{"_default": {"1": {"DaddyWesker": {"issues": [{"url": "https://api.github.com/repos/opencog/opencog/issues/2980", "title": "Signal6 issue with pattern miner", "body": "Today i've tried to launch firstly simple example from the site (https://wiki.opencog.org/w/Pattern_miner) and on the line \"opencog> loadmodule opencog/learning/PatternMiner/libPatternMinerAgent.so\" i've received following output in server's terminal window:\r\n\r\n\"Listening on port 17001\r\n;;; note: auto-compilation is enabled, set GUILE_AUTO_COMPILE=0\r\n;;;       or pass the --no-auto-compile argument to disable.\r\n;;; compiling /home/cics/OpenCog/opencog/build/../opencog/learning/PatternMiner/ugly_male_soda-drinker_corpus.scm\r\n;;; compiled /home/cics/.cache/guile/ccache/2.0-LE-8-2.0/home/cics/OpenCog/opencog/opencog/learning/PatternMiner/ugly_male_soda-drinker_corpus.scm.go\r\nterminate called after throwing an instance of 'opencog::AssertionException'\r\n  what():   (/home/cics/OpenCog/opencog/opencog/learning/PatternMiner/Parameters.cc:47)\r\n[2018-01-18 10:37:35:266] [ERROR] Caught signal 6 (Aborted) on thread 139683083409472\r\n\tStack Trace:\r\n\t2: basic_string.h:539\t~basic_string()\r\n\t3: CogServerMain.cc:81\t_Z7sighandi()\r\n\t4: [0x36cb0] ??() ??:0\r\n\t5: raise.c:56\t__GI_raise()\r\n\t6: abort.c:91\t__GI_abort()\r\n\t7: [0x60535] ??() ??:0\r\n\t8: [0x5e6d6] ??() ??:0\r\n\t9: [0x5e703] ??() ??:0\r\n\t10: [0x5e922] ??() ??:0\r\n\t11: oc_assert.cc:59\t  opencog::cassert(char const*, bool)\r\n\t12: Parameters.cc:47\t  opencog::PatternMining::Parameters::reSetAllSettingsFromConfig()\r\n\t13: PatternMiner.cc:2682\t  opencog::PatternMining::PatternMiner::PatternMiner(opencog::AtomSpace&)\r\n\t14: PatternMinerAgent.cc:66\t  opencog::PatternMinerAgent::PatternMinerAgent(opencog::CogServer&)\r\n\t15: Factory.h:71\t  opencog::Factory<opencog::PatternMinerAgent, opencog::Agent>::create(opencog::CogServer&) const\r\n\t16: Registry.h:104\t  opencog::Registry<opencog::Agent>::create(opencog::CogServer&, std::string const&)\r\n\t17: shared_ptr_base.h:448\t__shared_count<opencog::Agent*>()\r\n\t18: shared_ptr_base.h:545\t~__shared_count()\r\n\t19: CogServer.cc:481\t  opencog::CogServer::loadModule(std::string const&)\r\n\t20: LoadModuleRequest.cc:55\t  opencog::LoadModuleRequest::execute()\r\n\t21: CogServer.cc:261\t  opencog::CogServer::processRequests()\r\n\t22: CogServer.cc:224\t  opencog::CogServer::runLoopStep()\r\n\t23: CogServer.cc:199\t  opencog::CogServer::serverLoop()\r\n\t24: CogServerMain.cc:139\tmain()\r\n\t25: libc-start.c:321\t__libc_start_main()\r\n\t26: [0x4070fc] ??() ??:0\"\r\n\r\nAlso tried to do similar thing using python's scheme_eval. Like this:\r\n\r\n\"from opencog.atomspace import AtomSpace, TruthValue\r\nfrom opencog.atomspace import types\r\nfrom opencog.type_constructors import *\r\nfrom opencog.bindlink import satisfying_set, bindlink\r\nfrom opencog.utilities import initialize_opencog\r\nfrom opencog.scheme_wrapper import load_scm, scheme_eval, scheme_eval_h\r\n\r\na = AtomSpace()\r\ninitialize_opencog(a)\r\nset_type_ctor_atomspace(a)\r\nTV = TruthValue(1, 1)\r\ndata = [\"opencog/atomspace/core_types.scm\",\r\n        \"opencog/scm/utilities.scm\"]\r\nfor item in data:\r\n    load_scm(a, item)\r\nscheme_eval(a, \"(add-to-load-path \\\"/usr/local/share/opencog/scm\\\")\")\r\nscheme_eval(a,\"(use-modules (opencog) (opencog nlp) (opencog nlp chatbot) (opencog nlp relex2logic) (opencog atom-types))\")\r\nscheme_eval(a,\"(use-modules (opencog patternminer))\")\r\nscheme_eval(a, \"(clear)\")\r\nscheme_eval (a,'(load \"../opencog/learning/PatternMiner/testdatasmall.scm\")')\"\r\n\r\nand got same signal 6 problem on \"scheme_eval(a,\"(use-modules (opencog patternminer))\")\" line. \r\n\"Process finished with exit code 134 (interrupted by signal 6: SIGABRT)\"\r\n\r\nIf anyone could help with that i would really appreciate that. \r\nHave a nice day!\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/2980/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "linas": {"issues": [{"url": "https://api.github.com/repos/opencog/opencog/issues/2923", "title": "pattern miner compiler warning", "body": "I am seeing this compiler warning:\r\n```\r\nopencog/learning/PatternMiner/PatternMiner.cc: In member function \u2018unsigned int opencog::PatternMining::PatternMiner::getCountOfAConnectedPattern(const string&, const HandleSeq&)\u2019:\r\n/opencog/learning/PatternMiner/PatternMiner.cc:2002:43: warning: self-comparison always evaluates to true [-Wtautological-compare]\r\n             if (PATTERN_VARIABLENODE_TYPE == PATTERN_VARIABLE_NODE)                               \r\n```", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/2923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/2528", "title": "octomap contains InvalidHandles", "body": "Applying the patch below to the octomap shows that the octomap contains a lot of \"invalid handles\".  This is surely not very efficient, and it would be better if these were never placed in there, to begin with.  \r\n\r\n```\r\n--- a/opencog/timeoctomap/TimeOctomap.cc\r\n+++ b/opencog/timeoctomap/TimeOctomap.cc\r\n@@ -80,14 +80,19 @@ Handle TimeSlice::get_atom_at_location(const point3d& locati\r\n point3d_list TimeSlice::get_locations(const Handle& ato)\r\n {\r\n     point3d_list pl;\r\n+std::cout<<\"duuude getting locations at slisece=\"<<t<< \" p=\"<<((void*)this)<<st\r\n     for (AtomOcTree::tree_iterator ita =\r\n         map_tree.begin_tree(),\r\n         end = map_tree.end_tree();\r\n         ita != end;\r\n         ++ita)\r\n     {\r\n+std::cout<<\"duuude looopy atom=\"<<ita->getData()<<std::endl;\r\n         if (ita->getData() == ato)\r\n+        {\r\n+std::cout<<\"duuuude yayyyy\"<<std::endl;\r\n             pl.push_back(ita.getCoordinate());\r\n+        }\r\n     }\r\n     return pl;\r\n }\r\n```\r\n\r\nprints this:\r\n```\r\nduuude getting locations at slisece=1481620154 p=0x3c150d0\r\nduuude slice holds atom!!\r\nduuude looopy atom=Invalid Handle\r\nduuude looopy atom=Invalid Handle\r\nduuude looopy atom=Invalid Handle\r\nduuude looopy atom=Invalid Handle\r\nduuude looopy atom=Invalid Handle\r\nduuude looopy atom=Invalid Handle\r\nduuude looopy atom=Invalid Handle\r\nduuude looopy atom=Invalid Handle\r\n```\r\n```", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/2528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/2322", "title": "python shell handling is broken.", "body": "See comments in pull request opencog/atomspace#838\n\nAt this time, starting the cogserver, and then `telnet localhost 17001`, entering the python shell, and entering this:\n\n```\nfor i in range(10) :\n    print \"foo\", i\n\n```\n\nproduces no output in either the shell or the cogserver (see also issue #2315 -- currently prints go to the cogserver; once fixed, prints should go to the shell.)   There are also various inconsistencies:  running the python shell stand-alone gives this:\n\n```\n$ python\nPython 2.7.6 (default, Jun 22 2015, 17:58:13) \n[GCC 4.8.2] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> \n>>> \n>>> \n>>> \n```\n\nafter hitting carriage return 3 times.  Doing the same in the telnet terminal gives this:\n\n```\n$ telnet localhost 17001\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\nopencog> py\nEntering python shell; use ^D or a single . on a line by itself to exit.\npy> \n... \n... \npy> \npy> \n... \n... \n... \n... \n... \n... \npy> \n... \n... \n... \n... \npy> \n... \n```\n\nThere are also inconsistencies in what python considers to be \"legal syntax\". For example, the following code, when entered at the python shell, is invalid syntax:\n\n```\ndef fun(x):\n    y = x + 1\n\n    print \"foo\", y\n    return y\n\nfun(1)\nprint \"bar\"\n```\n\nit generates this error:\n\n```\n$ python\nPython 2.7.6 (default, Jun 22 2015, 17:58:13) \n[GCC 4.8.2] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> def fun(x):\n...     y = x + 1\n... \n>>>     print \"foo\", y\n  File \"<stdin>\", line 1\n    print \"foo\", y\n    ^\nIndentationError: unexpected indent\n>>> \n```\n\nhowever, copying that code to a file, say `f.py` and running it as `$ python f.py` does not produce any error:\n\n```\n$ python f.py\nfoo 2\nbar\n$\n```\n\nrunning the above code at the telnet prompt does nothing.\n\nI'm not sure quite how to resolve this ... if python itself is not self-consistent with what it considers to be valid syntax, I'm not sure how how to emulate that .. at any rate, the telnet shell is clearly broken.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/2322/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/2315", "title": "python printing is broken", "body": "Printing to the python shell is broken.  This got broken by pull request #2311, the refactoring of the network code is not yet complete. \n\nTor reproduce:  telnetto the cogserver, enter the python shell, and execute any python code -- nothing is printed.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/2315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/2299", "title": "Demo issues", "body": "This is a changing list of issues that arose while attempting to set up a demo.\n- [ ] 1. fuzzy matcher is not interruptible.  A second sentence cannot be sent to the matcher until it has finished the first sentence, which might talk too long.\n- [ ] 2. there is a shut-up button in the GUI, but no way to verbally cut her off.  The problem is that the microphone is turned off, to prevent feedback (i.e. prevent STT from turning the TTS output back into text). We should leave microphone on, and attempt to do some audio cancellation?? \n\n-- [] 2a. Self-model has no vocalization state.\n\n-- [] 2.b. right now pull request opencog/ros-behavior-scripting#72 has a hack to recognize string shut-up -- this should go through opencog so that loud noises and sudden movements also cause her to shut up.  as well as synonymous phrases: \"hush\", \"quiet\", \"shush\", \"stop talking\" etc.\n- [ ] 3. cogserver python shell is not printing anything.  It is running -- error messages do go into the logfile.  See tracking bug #2315\n- [x] 4. If a guile netcat session sends bad data into the cogserver shell, leaving it in pending input state, that pending input is NOT cleared when a new terminal is opened.  This could be a critical issue ! (as it confuses later, valid operations)\n    (fixed recently)\n- [ ] 5. trying to shutdown the cogserver, while some other process is sending it commands, sometimes ends with a crash.  Not a serious issue, as the point of shutdown is stopping it. But annoying and unclean, anyway.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/2299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/2285", "title": "global name 'basic_sentiment_analysis' is not defined.", "body": "I get this message on startup:\n\n```\nERROR: In procedure opencog-extension:\nERROR: Throw to key `C++-EXCEPTION' with args `(\"cog-evaluate!\" \"Python error in call_sentiment_parse: global name 'basic_sentiment_analysis' is not defined. (/home/linas/src/atomspace/opencog/cython/PythonEval.cc:802)\")'.\n```\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/2285/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/2225", "title": "Replace REST by gearman in the pattern miner", "body": "The pattern miner has a client-server as well as a native mode; the client-server should be built separately from the core miner -- in part because it has its own dependency on a REST module.\n\nAlso: the rest module in the pattern miner should probably be replaced by the gearman infrastructure.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/2225/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/2088", "title": "MicroplanningUTest fails when opencog not installed.", "body": "If `make install` is done before the unit tests, all tests pass. If `make install` is not done, Microplanning fails with this error: \n (from line 129 of MicroplanningUTest.cxxtest)\n\n```\ntest_declarative m-result=Backtrace:\nIn unknown file:\n   ?: 13 [apply-smob/1 #<catch-closure 2693d20>]\n   ?: 12 [apply-smob/1 #<catch-closure 2693ca0>]\nIn ice-9/boot-9.scm:\n2611: 11 [save-module-excursion {#<unspecified>}]\nIn ice-9/eval-string.scm:\n  38: 10 [read-and-eval #<input: string 28fa270> #:lang _]\nIn ice-9/eval.scm:\n 615: 9 [#<procedure 2690a60 at ice-9/eval.scm:614:6 (env)> #<directory # 21982d0>]\nIn srfi/srfi-1.scm:\n 592: 8 [map1 (#<<chunks-set> 25af750>)]\nIn /src/opencog-git/build/opencog/scm/opencog/nlp/microplanning/main.scm:\n  87: 7 [finalize #<<chunks-set> 25af750>]\nIn /src/opencog-git/build/opencog/scm/opencog/nlp/microplanning/anaphora.scm:\n  25: 6 [insert-anaphora #<<chunks-set> 25af750>]\nIn srfi/srfi-1.scm:\n 640: 5 [for-each1 (# # # # ...)]\nIn /src/opencog-git/build/opencog/scm/opencog/nlp/microplanning/anaphora.scm:\n  33: 4 [#<procedure 4b6a8a0 at /src/opencog-git/build/opencog/scm/opencog/nlp/microplanning/anaphora.scm:26:16 (ni)> #]\nIn /src/opencog-git/build/opencog/scm/opencog/nlp/microplanning/anaphora-noun-item.scm:\n  93: 3 [{#<unspecified>} _ _]\n  93: 2 [{#<unspecified>} _ _]\nIn ice-9/boot-9.scm:\n 778: 1 [dispatch-exception _ wrong-type-arg ...]\nIn unknown file:\n   ?: 0 [apply-smob/1 #<catch-closure 2693c60> wrong-type-arg ...]\n\nERROR: In procedure apply-smob/1:\nERROR: Wrong type to apply: #<unspecified>\nABORT: wrong-type-arg\n```\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/2088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/2048", "title": "tense, aspect, mood, number, declension in sureal", "body": "Currently sureal handles tense agreement in C++ code, in this patch: #2043  -- it would be better (in the long run) if this rule was not encoded in C++, but as a stand-alone rule.   Here's a hand-waving argument as to why:\n\nFuture extensions will need to check number agreement (singular-plural). Also the mood (subjunctive, conditional, etc.) https://en.wikipedia.org/wiki/Grammatical_mood and then also aspect ... https://en.wikipedia.org/wiki/Grammatical_aspect ... And then, some more things, if we ever get this to work for languages other than English -- e.g. declension https://en.wikipedia.org/wiki/Declension\n\nThe whole point of having a pattern matcher was to avoid having to hard-code rules in C++ code, yet here we have a rule that is hard-coded in C++. Maybe its OK for now, but it sets a dangerous precedent.\n\nThe reason I am looking at this: I would like support added for synonymous phrases. For example, the current chatbot self-awareness module can answer the question \"where are you looking?\" with `(Predicate \"look\") (Concept \"leftwards\")` which sureal converts to \"I am looking leftwards\".\n\nThe problem is that this is awkward -- a better reply would be \"I am looking to the left\" or even \"I am looking to the side\" or possibly \"I am not looking straight ahead\". The question then becomes: where does phrasing and prosody get handled? The choice of wording is a deeply personal indicator of personality and intelligence. Choice of synonymous expressions is part of it, but so is the play of number, tense, aspect and mood. Hard-coding such transformations in C++ code is maybe OK for now, but not quite right in the long-run.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/2048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/1922", "title": "Chat pipeline needs dialog mananger", "body": "Example:\n\n```\nscheme@(guile-user)> (process-query \"luser\" \"I sent the money to your boss.\")\nHello luser, you said: \"I sent the money to your boss.\"\nYou made a Declarative SpeechAct\nscheme@(guile-user)> (process-query \"luser\" \"Who sent money to your boss?\")\nHello luser, you said: \"Who sent money to your boss?\"\nYou made an Interrogative SpeechAct\nFuzzy match is finished.\n$1 = \"I sent the money to your boss .\"\n```\n\nThat's nice, a good match on an empty atomspace .. but it needs to be converted I->you.   This needs to be done BEFORE sending stuff to the microplanner.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/1922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/546", "title": "SpaceServer, TimeServer not thread-safe", "body": "It appears that the SpaceServer and TimeServer code is not thread-safe.  This prevents multi-threaded MindAgents from being able to work with the TimeServer in safe fashion.  See, for example, issue #340 \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/482", "title": "benchmark 'typical' EvaluationLinks", "body": "The current atomspace benchmark only measures node and link creation, and not 'typical' data. resulting in real-life performance that is one or two orders of magnitude worse than what's measured.  See for example:  https://github.com/opencog/test-datasets/pull/7\n\nThe benchmark needs to be updated to measure more 'typical' data. \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/opencog/opencog/commits/fbe19eb0b6f279ebe0ee37a5b125b39ace1d9d71", "message": "Update the lg-dict README.md"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/ba802ef7b20486308cb22e301145df295b5cb3a1", "message": "More markdown README fixes"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/5c6a5cc66718f3911584ba11b40089545b1630a7", "message": "Fix up the failing markdown"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/3f6be095234beeb204ba4a2b77a6853189fb810e", "message": "Force markdown to actually work"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/24e5ce644407583dd2d0a284489d69d6e051a057", "message": "Another markdown fix attempt"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/75b0af91fa7eb586ce07985039a7e23eda91e1c1", "message": "Fix broken formatting"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/2e9ce08e8fe859bc467b4a5d333bfd2dead56c30", "message": "Merge pull request #2981 from linas/pat\n\nAvoid pointless crash of the patternminer"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/87b056b7f712e74283377d206e5c5290c25d8a45", "message": "A string, apparently"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/c5fc6a9f93160cb58b6f295a59322d024a392122", "message": "Avoid pointless patternminer crash"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/e1626183370103209154819dc3df4cef384c994b", "message": "Try to avoid a pointless crash"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/4e3e07d7eede882bbf8f8b48077d4bf69710dc40", "message": "Update README"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/cd3de76452d8950e106f6035bc592d102e1d9dcc", "message": "Merge pull request #2978 from linas/wall\n\nRelEx compatibility fix, see bug #2977"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/a1d0c764247b84c6998e3c683e84faf18f9ef86a", "message": "RelEx compatibility fix, see bug #2977"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/c3f550f4bcad454f78d6c7c2379c38b43b269eee", "message": "Remove moer obsolete python crapola"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/adb818bb971e517d4d28dc123f020f795eda8317", "message": "Add missing patternminer types"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/5ce4bada2e82b06446fea0126208fcb48ab64568", "message": "More debugging of things"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/687dcdf0e87828893258828e60cf15a3dcdb607f", "message": "Another attempt to get Hobbs unit test to pass"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/d4d69ed62cbd726c92de9382136175e0fbdbb8af", "message": "Remove super-stale file paths"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/c0de4f2f5701276b728523f3f0926451ca192570", "message": "Try to get Hobbs unit test to run ..."}, {"url": "https://api.github.com/repos/opencog/opencog/commits/56a9612f54dc0eaca84c82787c00e27cd9c4f0a7", "message": "Merge pull request #2973 from linas/abrt\n\n Telnet on Debian stable works differently from that on Ubuntu."}, {"url": "https://api.github.com/repos/opencog/opencog/commits/7d51141db18438265f46b14e4a6982e330e1f891", "message": "Additional reorganization"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/5a9d5046f352e44a0d170d3288041f4b4611b4e3", "message": "Do not permit subnegotiation."}, {"url": "https://api.github.com/repos/opencog/opencog/commits/b7c374eec879299ed02b3609bccabc7e42a04a57", "message": "work past race condition in ShellUTest"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/ec2a45100f0f0fdb0cd0836ecabf68f83bea9761", "message": "Add more debug printing"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/65b36d027005418d12ac5a67b6cc2bdaec63a461", "message": "Additiona debugging prints"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/f5d9e20371bb9f70086e7b20a3107a9f9bec828a", "message": "Avoid prompt confusion"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/e1d5fa72c71dabac989b9b0eb4700a2f733449cf", "message": "Telnet on Debian stable works differently from that on Ubuntu.\n\nBasically, Debian stable does not send Ctrl-C's -- it just sends\nIAC DO TIMING-MARK instead ... which is bizarrely wrong, but whatever."}, {"url": "https://api.github.com/repos/opencog/opencog/commits/c544225f5e1233e4820a89cd2319b54439ba6505", "message": "Remove bad abort prompt; this screws up telnet processing!\n\nOuch .. this was painful to discover."}, {"url": "https://api.github.com/repos/opencog/opencog/commits/bee166a63e0c1f5df30a3e89f20f0be3befe6711", "message": "Revert an earlier change"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/d78409620dfdb1591ecaa5d662a8a440d8c98c24", "message": "More Microplanning unit tett mangling"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/cc3962fbe179f6fba9181abaf13766272aea9a2d", "message": "Attemtp to fix microplanning unit test"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/405f4cfbbfe99b6433a8771c75b3173496ea836b", "message": "Another sureal bug fix"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/209d5981835fcb7e1315d48edafc969bd2c03be4", "message": "Ongoing test-case insanity."}, {"url": "https://api.github.com/repos/opencog/opencog/commits/619aff81854ab997887d9476e8e9d3c041feae42", "message": "Really, really get SuReal to pass."}, {"url": "https://api.github.com/repos/opencog/opencog/commits/a6e37da237cc0e4d4bc50b65a940d9f4f9e58ab5", "message": "More LTDL craziness"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/8f4af7df0ca3a3338a939c5c262be10f586332d3", "message": "The true source of failure of microplanning was found!"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/c09f4bd64579e6b3b90688b66620f921419e2900", "message": "Foo. Relex2Logic uses the AtTimeLink (it probably should not!)\n\nThis link is provided by spacetime.  R2L should use something else."}, {"url": "https://api.github.com/repos/opencog/opencog/commits/6fba0df105844ee231a4d4dc101821f28aeb89c3", "message": "Ah Hah!! The culprit for the failing unit test has been found!"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/45ade3262f0548d80a6dc8dbb9a8e43fb598ee1b", "message": "Whoops; there is no spacetime any more."}, {"url": "https://api.github.com/repos/opencog/opencog/commits/b187d2791a8bccd9f94c7f9978ffcea4c8849381", "message": "Merge pull request #2971 from linas/un\n\nAttempt to get unit tests to pass"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/6e6afeb9364c58f308015e569ba1bcd1fa2a223a", "message": "Add some debug statements"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/d9e8b365fa5910879a54471aac4e22f0dab1fcb8", "message": "Avoid crash in sureal"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/d2f41d76cc3a65d31d75592e0e20a4366957a1cd", "message": "Avoid using the obsolete form"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/9011ed506364889f74aea261bc31bc6458084127", "message": "More elegant handling of the test"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/eb15573e0989c6ed0adc4edc45632cae74e486cb", "message": "Try to get the unit tests to actually run"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/6a3d8382de9936fda54ce7c1a74af410852e7cf7", "message": "Avoid deadlock in unit test"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/9a7ec25831b5cf495f6a9231a9c49b0aa54849fe", "message": "Misc reorganization"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/8cad22fc8aeb1afeeea1b8258cae236b38003270", "message": "Use extract not delete"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/2d1459a243031e1fb047b1793ba36aae60b65b8e", "message": "Fix another error message"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/fe3419e09c9ac15e58bef39560b30bae6a534c17", "message": "load missing, required modules"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/3743d74ae29d7584a230f246cc23d03510813b2e", "message": "Minor cleanup"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/f79ba73ad9a82abc6290f62b0bd07adc17ddd9b1", "message": "Stop using cogserver"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/3dd4e4787370362640796aff7fb5865b66366bb4", "message": "Remove another atomspace pointer"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/62a8da3d1fdc3e79ecae5618a27021ed3014f8e5", "message": "Another strange library loading bug ..."}, {"url": "https://api.github.com/repos/opencog/opencog/commits/4f422fa5ccaf45d4e32c5a24952660b1b436e17c", "message": "Avoid error during load"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/3fe70c547c5c1aad517f0e9d02b799452635d4fa", "message": "Add debug printing"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/7c7a73ed78ec5d64b4b3bdad1273ea008387e16a", "message": "Attempt to fix unit test"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/0f31f5ffc803754fa0ba0cc1d57cc61f2ef74116", "message": "Attempt to fix failing unit test."}, {"url": "https://api.github.com/repos/opencog/opencog/commits/040971fe6a5ea7c3b2b1707fbb50c76dda91e40e", "message": "Merge pull request #2970 from linas/ob\n\nRemove obsolete spacetime code."}, {"url": "https://api.github.com/repos/opencog/opencog/commits/a35123fa01702ad37720de665af23ee7df88750f", "message": "Remove dead unit tests"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/77f4d4f5211c8bfe9f09645ad74a601e1a875a00", "message": "Update for the new file structure"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/478aee9e3b1a4e3adbfb9bdf8153d71190e4b790", "message": "whitespace cleanup"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/3ed824f22eec37e61c373a775dcd1f672143f888", "message": "Update path to types"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/0393945dca3aa2f3386b4b83459a9d27d901181b", "message": "Revised README"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/6727a8adf5106ccda69b8ce48c3faecf2f5ed6e4", "message": "Use a non-colliding library name"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/e645d019d7b26716b0559cbaf993f25273383f1b", "message": "Move the pointmem module around."}, {"url": "https://api.github.com/repos/opencog/opencog/commits/c8ec19015c49752e4f237ee5dc84965d67e15290", "message": "Cleanup after directory changes"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/5dc4878a0181406c763cde5c108fbbdd0a6d90a6", "message": "Move octomap stuff to the spacetime directory"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/f5e9be3ea575263dced63d762124fcaecc033317", "message": "More cleanup of old cruft"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/4cf7929987f30b9a5afb9b22b9919bc77eb90ba9", "message": "Remove BlockVector stuff"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/db0525494d015c2205f4da62291bab4ae71db232", "message": "Move atom type defintions to a subdirectory"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/fa93aa926a4da4da32fb5fc8d21bc37c98edde5a", "message": "Remove the unit tests that went with."}, {"url": "https://api.github.com/repos/opencog/opencog/commits/e47b46977f6a15a209515e17e1885bb26bd11129", "message": "Remove the unused/obsolete spacetime code"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/729d93ea1de0349ca0c245d4dd01f967f72c526e", "message": "Add mention of Octomap"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/8daa06f0f6b0d55deca44ea525973b15d227eea5", "message": "Merge pull request #2969 from linas/lg\n\nBug fix for #2968"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/77cfbe8364b2d826abe4904a21fd805942d38df2", "message": "Bug fix for #2968"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/05cf106a59199c695f1d2c00e414680122cbc724", "message": "Merge pull request #2966 from linas/di\n\nAssorted minor cleanup"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/5a47186f3343dee540b06141cc93febc9152afe3", "message": "Merge pull request #2965 from linas/sigs\n\nFix for issue  #2960"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/be6a4b8e401b3ec03e1671ccce9056405b6b06fa", "message": "Fix for issue  #2960"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/af059d2130fa935afb48aa3478a181571f5affa8", "message": "Assorted minor cleanup"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/a8791f76acb257a30c21c7b06e072339f5d3bf0e", "message": "Merge pull request #2963 from linas/as\n\nModify signature of the execute method to match atomspace."}, {"url": "https://api.github.com/repos/opencog/opencog/commits/eccae2a7a87a2127c5b76a1e463b1f765d68e5f4", "message": "Modify signature of the execute method to match atomspace.\n\nThis was changed in https://github.com/opencog/atomspace/pull/1486"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/632e6b94987c9479cabee99c15558226b52e5b15", "message": "Merge pull request #2959 from linas/sigs\n\nExterminate boost"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/b1276d094ff19fb85517d0db1a0ebace8013b35c", "message": "atomspace is gone, its too late to do this."}, {"url": "https://api.github.com/repos/opencog/opencog/commits/c71e507184b18de9b82164e62834ab49139ab04d", "message": "Exterminate boost\n\nThis requiers an update to the the atomspace to compile."}, {"url": "https://api.github.com/repos/opencog/opencog/commits/fee9de54b549accb9ec3d857f4116130d36d9897", "message": "Merge pull request #2958 from linas/mo\n\nGet rid of archaic cog-satisfying-set"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/64a2eb4b23246a0a9a7ddfe9735c99f76096e82f", "message": "Get rid of archaic cog-satisfying-set\n\nPer issue https://github.com/opencog/atomspace/issues/686"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/edbb2374d6046c93d2cdb7b171abc56abe07631d", "message": "Merge pull request #2957 from linas/db\n\nGet rid of usages of cog-bind"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/9aae72c36b2335f2682a5132f5a9ac043b92e340", "message": "Get rid of usages of cog-bind\n\nPer issue https://github.com/opencog/atomspace/issues/686"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/0d9de434ff96d95ec5894fa8cc6cbcc53c34e84a", "message": "Merge pull request #2951 from Yidnekachew/fix-failing-moses-pln-synergy-test\n\nfix failing MOSESPLNSynergyUTest"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/27359ed83f7914bb47e40e63cddb296fc74beb0f", "message": "Merge branch 'mjs'"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/6adbe38d237dc9399b8bfd01e496cb8cc527bd9f", "message": "Cleanup per pull req #2949"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/e791f55478d4a48934c29567073dae4f75d2def4", "message": "Merge branch 'master' of https://github.com/mjsduncan/opencog into mjs"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/281850b70035f780f1aea3aed3320d2b55d5b41f", "message": "Bugfix"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9746835", "body": "I believe it is due to the doxygon setup in the main CMakefile: circa line\n632\n\n# documentation\n\nFIND_PACKAGE(Doxygen)\nIF (DOXYGEN_FOUND)\n    # doc dir has no CMakeList.txt\n    #ADD_SUBDIRECTORY(doc EXCLUDE_FROM_ALL)\n   EXECUTE_PROCESS(\n      WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}\n      COMMAND bzr nick\n      OUTPUT_VARIABLE BZR_NICK OUTPUT_STRIP_TRAILING_WHITESPACE)\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9746835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9750787", "body": "And I just fixed the third one, it was putting bzr tag numbers, replaces with 'git describe'\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9750787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9760057", "body": "If I remember right, there are two versions of cxxtest: the one we use, and\na newer one which is not compatible with it.  I'm guessing you installed\nthe new, incompatible one.\n\n--linas\n\nOn 24 October 2012 17:47, Karl Sackett notifications@github.com wrote:\n\n> cmake produces this output:\n> \n> -- Cxxtest was not found. Make sure CXXTEST_BIN_DIR is set.\n> \n> The cxxtestgen executable is in /usr/bin, so I tried\n> \n> CXXTEST_BIN_DIR=/usr/bin/ cmake ..\n> \n> and got the same result.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/opencog/opencog/issues/4.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9760057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9778654", "body": "OK, so this presents an interesting git merge question: what's the right thing to do, if one wants to just cherry-pick the first commit, and reject the next two?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9778654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9795225", "body": "yep\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9795225/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9795281", "body": "gonna merge this, I need to delete the entire fork and start over.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9795281/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9823017", "body": "I just did a pull request that should fix this for you.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9823017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9823593", "body": "I'm reviewing the code here, and see a number of issues:\n\n1) The changes to AtomSpaceExtensions/AtomSpaceUtil.cc introduce a new\ncircular dependency: it now depends on PAI, while PAI depends on it. This\nmay compile today, but this will only lead to heartbreak in the future.\nCan you find some other way of doing this?\n\n2) Many, many removals of ampersands, such as this:\n\n-StateValue Inquery::inqueryExist(vector<StateValue>& stateOwnerList)\n+StateValue Inquery::inqueryExist(vector<StateValue> stateOwnerList)\n\nYou realize that this will cause the vector to be copied, instead of being\npassed by reference?  This will chew up a fair amount of CPU cycles.  In\naddition, changes made to the vector won't propagate to the caller. Are you\nsure this is what you want?\n\n3) Class Inquery declares almost all methods as static.  Do you understand\nwhat  the 'static' keyword means in C++?  Why even bother to create a\nclass, if all the methods will be static?\n\n--linas\n\nOn 26 October 2012 06:15, Shujing KE notifications@github.com wrote:\n\n> There are different kinds of representation for different kinds of\n> predicates by Evaluation Link.\n> \n> ## This function is to deal with this differences.\n> \n> You can merge this Pull Request by running:\n> \n>   git pull https://github.com/shujingke/opencog master\n> \n> Or view, comment on, or merge it at:\n> \n>   https://github.com/opencog/opencog/pull/15\n> Commit Summary\n> - Implemented \"Query all kinds of predicate value from the AtomSpace\"\n>   f\u2026\n> - Merge remote-tracking branch 'upstream/master'\n> \n> File Changes\n> - _M_ opencog/embodiment/AtomSpaceExtensions/AtomSpaceUtil.cc (134)\n> - _M_ opencog/embodiment/AtomSpaceExtensions/AtomSpaceUtil.h (48)\n> - _M_opencog/embodiment/Control/OperationalAvatarController/Inquery.cc (268)\n> - _M_ opencog/embodiment/Control/OperationalAvatarController/Inquery.h\n>   (54)\n> - _M_ opencog/embodiment/Control/OperationalAvatarController/OAC.cc (2)\n> - _M_ opencog/embodiment/Control/OperationalAvatarController/OAC.h (8)\n> - _M_opencog/embodiment/Control/OperationalAvatarController/OCPlanner.cc (44)\n> - _M_opencog/embodiment/Control/OperationalAvatarController/PlanningHeaderFiles.h\n>   (7)\n> - _M_ opencog/embodiment/Control/OperationalAvatarController/Strips.cc\n>   (10)\n> - _M_ opencog/embodiment/Control/OperationalAvatarController/Strips.h\n>   (6)\n> - _M_opencog/embodiment/Control/PerceptionActionInterface/ActionParameter.cc (6)\n> - _M_opencog/embodiment/Control/PerceptionActionInterface/ActionParameter.h (3)\n> \n> Patch Links\n> - https://github.com/opencog/opencog/pull/15.patch\n> - https://github.com/opencog/opencog/pull/15.diff\n>   \n>   \u2014\n>   Reply to this email directly or view it on GitHubhttps://github.com/opencog/opencog/pull/15.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9823593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9832027", "body": "OK,\n\nYou'd need to pull from my branch, and not from somewhere else, to see my\nfix, because my fix has not yet been merged. See, for example:\n\nhttps://github.com/opencog/opencog/network\n\nPer new quasi-rules, people won't generally be merging their own code, and\nso I''ve not merged this\n\n--linas\n\nOn 26 October 2012 20:04, Karl Sackett notifications@github.com wrote:\n\n> I manually patched opencog/atomspace/CMakeLists.txt. Now I get this error:\n> \n> -- Set runtime path of \"/usr/local/lib/opencog/libnlp-types.so\" to \"/usr/local/lib/opencog\"\n> CMake Error at opencog/nlp/types/cmake_install.cmake:56 (FILE):\n>   file INSTALL cannot find\n>   \"/home/krs/git/opencog/opencog/nlp/types/atom_types.h\".\n> Call Stack (most recent call first):\n>   opencog/nlp/cmake_install.cmake:38 (INCLUDE)\n>   opencog/cmake_install.cmake:44 (INCLUDE)\n>   cmake_install.cmake:37 (INCLUDE)\n> \n> make: **\\* [install] Error 1\n> \n>  \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/opencog/opencog/issues/14#issuecomment-9831287.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9832027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9832678", "body": "I'm reviewing the code here, and see a number of issues:\n\n> 1) The changes to AtomSpaceExtensions/AtomSpaceUtil.cc introduce a new\n> circular dependency: it now depends on PAI, while PAI depends on it. This\n> may compile today, but this will only lead to heartbreak in the future.\n> Can you find some other way of doing this?\n\nOK\u00a3\u00ac I'll change this to avoid a circular dependency. I'll take care about\nsuch problems.\n\n> 2) Many, many removals of ampersands, such as this:\n> \n> -StateValue Inquery::inqueryExist(vector<StateValue>& stateOwnerList)\n> +StateValue Inquery::inqueryExist(vector<StateValue> stateOwnerList)\n> \n> You realize that this will cause the vector to be copied, instead of being\n> passed by reference?  This will chew up a fair amount of CPU cycles.  In\n> addition, changes made to the vector won't propagate to the caller. Are you\n> sure this is what you want?\n\nIC, so I wrote  all \"vector<StateValue>& stateOwnerList \" defaultly in the\nbeginning..\nThese codes have been in my local for monthes.. And at one time, I suffered\nfrom some compilling errors which I could not fix for days and I just tried\nto modify every possible stuff for tests..\nAnd then I forgat to modify them back to references - -\nI'll modify them ..\n\n> 3) Class Inquery declares almost all methods as static.  Do you understand\n> what  the 'static' keyword means in C++?  Why even bother to create a\n> class, if all the methods will be static?\n\nWell, I don't want to argue on this. A lot of ppl, like me, hate global\nstuff a lot, C++ is not compellent OO - but it allows you to make all the\nfuncitons static in a class, just like the static class in JAVA. Anyway, if\none day we need a subclass inherited from it, then it will be convient.  I\nsee no point to agrue on this, just different ppl have different views\ntowards this.\n\nShujing\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9832678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9847246", "body": " Should this go in a new issue?\n\n\nNo, here is fine.  Anyway, I just pushed additional fixes for that.\n\n--linas\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9847246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9906376", "body": "Do a pull request for anything where you want to say \"gee, look at this really neat thing I did\".  Push directly if it already been discussed or stupid or trite.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9906376/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9954969", "body": "Can you try the patch below?  It might affect other boost-1.48 distros,\nthough, not sure.\n\n--- a/opencog/util/foreach.h\n+++ b/opencog/util/foreach.h\n@@ -10,7 +10,7 @@ namespace boost {\n // Work-around for bug, see\n // https://svn.boost.org/trac/boost/ticket/6131  for details.\n // See also https://bugs.launchpad.net/opencog/+bug/1057640\n-#if BOOST_VERSION != 104900\n+#if (BOOST_VERSION != 104800) || (BOOST_VERSION != 104900)\n namespace BOOST_FOREACH = foreach;\n #endif\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9954969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10019521", "body": "Arghh.  This should have worked for you.\n\n#if (BOOST_VERSION != 104800) || (BOOST_VERSION != 104900)\nnamespace BOOST_FOREACH = foreach;\n#endif\n\nCan you try compiling the following with the -E flag?  Its not valid C code, I just want to see what the pre-processor does, what appears between the >>> and <<< markers\n\n#include &lt;boost/version.hpp&gt;\n\nhello its this >>> BOOST_VERSION <<<<\n#if BOOST_VERSION != 104900\nyes\n#else\nno\n#endif\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10019521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10019683", "body": "never mind: I bet teh following will fix it:\n\n--- a/opencog/util/foreach.h\n+++ b/opencog/util/foreach.h\n@@ -10,7 +10,7 @@ namespace boost {\n // Work-around for bug, see\n // https://svn.boost.org/trac/boost/ticket/6131  for details.\n // See also https://bugs.launchpad.net/opencog/+bug/1057640\n-#if (BOOST_VERSION != 104800) || (BOOST_VERSION != 104900)\n+#if (BOOST_VERSION/100 != 1048) || (BOOST_VERSION/100 != 1049)\n namespace BOOST_FOREACH = foreach;\n #endif\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10019683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10020716", "body": "OK, can you run the example, above, then?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10020716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10031239", "body": "Dohhh. I just pushed one more fix.  Silly me, the boolean or || should have  been a boolean and &&  If you see such stupidities, please point them out to me!\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10031239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10158102", "body": "Hi David,\n\nOn 6 November 2012 01:03, David Hart notifications@github.com wrote:\n\n> linas: we've been studying your git commands to make the change from the\n> commands listed at\n> http://wiki.opencog.org/w/Development_standards#Git_HOWTO.\n> \n> Your commands imply that it is unnecessary to merge from opencog/opencog\n> locally before pushing, that the Git Pull Request accomplishes the same\n> thing. Is this correct?\n> \n> An expanded version of your instructions:\n> \n> git clone https://githart@github.com/opencog/opencog (only if starting\n> fresh)\n> cd opencog\n> git checkout master (implied by the 'git clone' command, if issued)\n> git pull (no changes will be pulled if 'git clone' was just issued)\n> git branch my-latest-fix (create new branch)\n> git checkout my-latest-fix (move to new branch)\n> hack hack hack + Github Fork opencog/opencog; rename to my-latest-fix\n> \n> ```\n>              ^^^^^^^^^^^^^^^^^^^^^^^^\n> ```\n> \n> I don't understnad why any github fork is needed. In fact, I think github\n> only lets you have one fork, grand total: I tried creating a second one,\n> and it told me I can't do it. But maybe I misunderstand github. At any\n> rate, this is not needed. See also comments at bottom about speed.\n> \n> git commit\n> git pull origin master ('origin' tag is created by 'git clone' command\n> above)\n> \n> No pull is needed here (unless you absolutely need to pull the latest stuff\n> from somewhere, to make your patch work.  But if you need to do this, you\n> are probably doing something wrong, anyway.)\n> \n> git push https://githart@github.com/githart/my-latest-fix\n> \n> No, you'r pushing to wrong location.  It would be a git push\n> https://githart@github.com/opencog/opencog  my-latest-fix\n\nNote the space between the two: you are pushing to your private fork, and\nthe name of the branch in your private fork  is \"my latest fix\"\n\n>  Github Pull Request\n> \n> Yes.\n> \n> git branch -d my latest-fix (delete the branch, locally)\n> \n>  No, don't delete until the pull request has been closed.  The pull request\n> may result in comments that require additional fixes & changes to this\n> brancch, so you will need this branch lying around, so you can make those\n> fixes.\n\nGOTO 'git checkout master', wash, rinse, repeat\n\n> Err, well, it doesn't have to be circular, it can be parallel. You can have\n> multiple branches going all at the same time.  Typically, right before\n> creating a new branch, you want to do:\n\ngit checkout master\ngit pull                 (to get the latest code that other people have\ndone, and put it into your master)\ngit branch my-other-branch\ngit checkout my-other-branch\nhack hack..\n\nThe only hard part here is to remember that if you have multiple branches,\nto not get confused which one you are hacking in, since they will have\ndifferent code in each. and the oldest branch will typically not have the\nnewest code in it, which may lead to all sorts of WTF confusion.\n\nYou can bounce between the brnaches very rapidly; but each switch will\ntypicallly need a large recompile, if the branches difffer by a lot.\n\n> The Github Fork step above allows the push to be small. Pushing the entire\n> source tree can take a long time because the bandwidth from the Hong Kong\n> lab to US servers is pretty poor.\n\nI don't think the fork is needed, and if you just push a branch, you are\nnot pushing \"the entire source tree\", you are just pushing the changes.\n\n--linas\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10158102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10173853", "body": "On 7 November 2012 19:20, David Hart notifications@github.com wrote:\n\n> Creating a Fork on Github is, as far as I know, required to use Github's\n> Pull Request system which is a workflow that the group has agreed together\n> to use (I'm using capital letters here to distinguish a Github Fork or Pull\n> Request from any other uses of the terms).\n\n!? But you only need one fork, grand-total. You can do a pull request from\nany branch that you wish. All I can say is to try it; that's how I've been\ndoing it.\n\nSo, when you push to your github fork, specify a branch name you want to\npush to, as part of the fork. (It doesn't have to be the same branch name\nas on your local machine, but probably less confusing if it is) After you\npush, you will see that branch show up in your \"network diagram\" If you\nclick on that, then you can do a pull request there.\n\nso, for example:\n\nhttps://github.com/opencog/opencog/network\n\nyou will see (today) 5 branches. If you scroll to november 1st, you will\nsee the tip of one of my branches (my only one, just right now), and you\ncan see that its called \"moses\".  I have not made a pull request on it,\nbecause I am not yet ready to do so.  But I could, just by clicking on it.\n\nJust right now, I see these branches: jarredh:threading,\n  shujingke:shujing  and Rashvan: \"master\" .. and my own, and of course\nopencog:master  As it happens, each person is using just one branch, but\nthis is just a coincidence\n\nAll I can say is try it... create 2 or 3 branches. push all of them.\n refresh the network diagram, and notice what it shows. Then issue pull\nrequests, and watch what happens.\n\n--linas\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10173853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10200257", "body": "On 8 November 2012 01:58, alito notifications@github.com wrote:\n\n> Linas, you mentioned you \"fixed\" the third one, but I'm still getting\n> these errors. Are they fixed on a different branch?\n\nI didn't fix all of them, since it wasn't my code and I don't use doxygen,\nand I figured someone else would do it. But whatever. I just pushed a fix\nnow that I think fixes these.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10200257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10683803", "body": "Merging this myself, this is not rocket science, just some rather simple changes to add a timeout flag.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10683803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10684118", "body": "closing per comment above\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10684118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10684153", "body": "seems to be a duplicate of issue 36 -- which is closed, as this seems to be a boost-1.51 problem; boost-1.52 is reported to work fine.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10684153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10684199", "body": "opencog requires cxxtest version 3 and not version 4.  The problem is that version 4 is not backwards-compatible with version 3, and no one has yet figured out how hard or easy it might be to move opencog to use cxxtest version 4.  This would be an excellent beginner get-your-feet-wet project.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10684199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10703111", "body": "On 25 November 2012 20:56, Karl Sackett notifications@github.com wrote:\n\n> I found the problem and worked out a fix for it.\n> \n> What's the fix? small? big?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10703111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10703118", "body": "On 25 November 2012 21:07, Linas Vepstas linasvepstas@gmail.com wrote:\n\n> On 25 November 2012 20:56, Karl Sackett notifications@github.com wrote:\n> \n> > I found the problem and worked out a fix for it.\n> > \n> > What's the fix? small? big?\n\nBTW, its OK to push to your private branch now, for review; just don't\nissue a pull request, and it won't get merged until you are ready (i.e.\nuntil you check in the remainings OSX pieces)\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10703118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10703296", "body": "Since this usually builds fine, what changed on your system? \n\nDoes this patch fix it?\n\n--- a/opencog/embodiment/AtomSpaceExtensions/CMakeLists.txt\n+++ b/opencog/embodiment/AtomSpaceExtensions/CMakeLists.txt\n@@ -16,6 +16,7 @@ ADD_DEPENDENCIES(AtomSpaceExtensions opencog_atom_types)\n ADD_DEPENDENCIES(AtomSpaceExtensions embodiment_atom_types)\n\n TARGET_LINK_LIBRARIES (AtomSpaceExtensions\n-       query\n      spacetime\n      atomspace\n  )\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10703296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10703313", "body": "arghhh github mangled the patch.  Just add \"query\" to the TARGET_LINK_LIBRARIES\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10703313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10807934", "body": "And after these changes, do the unit tests compile and mostly pass?  Years\nago, when I last tried it, I got the impression that cxxtest 4.0 just\nwasn't backward compatible with 3.0, and that we'd need a major revamp to\nbe able to use it.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10807934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10810276", "body": "anyway, I just merged a fix to the FindCxxtest.cmake file that should at least find the thing.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10810276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10813125", "body": "how about 'make test' ?  make tests just builds the tests, make test runs them\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10813125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10832222", "body": "OK, the list seems reasonable.\n\n91% tests passed, 11 tests failed out of 120\n\n> Total Test time (real) = 289.25 sec\n> \n> The following tests FAILED:\n>          32 - BasicSaveUTest (Failed)\n> \n> you'd need to configure sql\n> \n> ```\n>      55 - MathUTest (Failed)\n> ```\n> \n> passes on ubuntu, fails on redhat, don't know why\n> \n> ```\n>      60 - RESTfulTest (Failed)\n> ```\n> \n> been failing for a year, I think the PLN rip-up tanked it\n> \n> ```\n>      62 - PythonModuleUTest (SEGFAULT)\n>      63 - AllPythonModuleTests (Failed)\n> ```\n> \n> beats me\n> \n> ```\n>      75 - procedure_repositoryUTest (Failed)\n> ```\n> \n> passes on ubuntu, fails on redhat, don't know why\n> \n> ```\n>     101 - PsiDemandUpdaterAgentUTest (SEGFAULT)\n>     102 - PsiModulatorUpdaterAgentUTest (SEGFAULT)\n>     103 - PsiFeelingUpdaterAgentUTest (SEGFAULT)\n>     104 - PsiActionSelectionAgentUTest (SEGFAULT)\n>     116 - BEUTest (OTHER_FAULT)\n> ```\n> \n> These started failing after the new embodiment 3D spacemap. In addition,\n> another 20 tests no longer compile.  Someone needs to clean these up.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10832222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/11228655", "body": "On 10 December 2012 06:51, ngeiswei notifications@github.com wrote:\n\n> Nevermind, this comes from another bug I'm trying to fix. When cmake is\n> rerun then CXXTEST_GEN is set to cxxtestgen.py. I've fixed it and will\n> commit it soon.\n\nHmm. I thought the new CMakefiles should have worked, although you'd\nprobably have to remove CMakeChache.txt to get a clean build with no cached\ngrunge left over.\n\n--linas\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/11228655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/11392626", "body": "On 11 December 2012 03:51, Jean-Marc Vanel notifications@github.com wrote:\n\n> On Ubuntu 12.10,Final result:\n> \n> 95% tests passed, 5 tests failed out of 93\n> \n> Total Test time (real) = 154.76 sec\n> \n> The following tests FAILED:\n> 32 - BasicSaveUTest (Failed)\n> \n> this will fail until SQL is configured\n> \n> 55 - MathUTest (Failed)\n> \n> this passes on my 12.04 ubuntu box, but fails on a very old rhel server.\n> Don't know why, never debugged it. This test is misnamed, and may also be\n> obsolete, shuijing ke would know more.\n> \n> 60 - RESTfulTest (Failed)\n> \n> Been failing for a while.  Don't know why.\n> \n> 72 - procedure_repositoryUTest (Failed)\n> \n>  this passes on my 12.04 ubuntu box, but fails on a very old rhel server.\n> Don't know why,\n> \n>  92 - feature_selectionUTest (Failed)\n> \n> Hmm. This is alarming, but perhaps due to some recent changes by Nil ??\n>  this error should \"go away by itself\", someday.\n\n-- linas\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/11392626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/11399271", "body": "Hey, I just more or less reverted this ... didn't realize that you added this just recently  ... on my system, it claimed to find cxxtest (which is correct, as it is installed), but left CXXTEST_GEN blank, thus causing make to crash when attempting to build the first test.\n\nWhat's wrong with running cxxtesgen.py ?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/11399271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/11405853", "body": "Should have worked ... FindCxxtest.cmake looks for cxxtestgen.py first. If it is not found, then it looks for cxxtestgen\n\nThat should work for both version 3 and for 4, although it will use the older version 3 if both are installed.   To fix this, you could try exchanging the order of the two searches...\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/11405853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/11452863", "body": "I'm stumped. The symbol should be there; can't imagine why it would not be.  I've never used Apple, I can't help; perhaps google knows about similar situations. \n\nThe symbol is defined in the util exceptions.cc file, and is statically linked into that library.  There's nothing unusual there, its normal code, no monkey-shines or crazy stunts in the code ...\n\nHmmm .. actually, I don't understand what symbol that is: there is a class called opencog::StandardException but the classname itself should not be a symbol: only its constructor, methods, vtable, etc.  So step one is to figure out what that symbol really is supposed to be, and then figure out why it did not get linked/exported.  Another clue can be gotten by looking at which code is asking for the symbol.\n\nAnother possibility is perhaps this is a compiler bug: I know that Mac is moving to the llvm/clang compiler collection, and perhaps their exception-handling infrastructure is still in beta ...  Perhaps the bug goes away if you use gcc?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/11452863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/11675455", "body": "On 25 December 2012 03:05, ngeiswei notifications@github.com wrote:\n\n> Linas,\n> \n> 1) Please note that\n> \n> KLD(X, Y) != MI(X, Y)\n> \n> According to\n> http://en.wikipedia.org/wiki/Kullback%E2%80%93Leibler_divergence#Relation_to_other_quantities_of_information_theory\n> \n> MI(X, Y) = KDL(P(X, Y), P(X)P(Y))\n\nHmm. I guess I assumed that this is what was implemented, but I guess not.\n Any suggestions on how to easily obtain these P's for a set of contin\nvalues?  Perchance there's some code that already does this?\n\n> 3) The way you sort the data seems suspicious, you put them by pair and\n> insert the pair in sorted_list, but then Y is not sorted anymore, right?\n> \n> Right.  I assume that the algo wants correlated pairs of X and Y, so either\n> X can be sorted, but not Y, or Y can be sorted, but not X.  Are you\n> suggesting that the X and Y values can be completely uncorrelated? i.e. I\n> should just sort both, completely independently of each other?\n> \n> 4) Please not that KDL uses counters internally, so if you use wisely the\n> KDLS struct instead of the KDL function you might avoid doing the unpacking\n> and sorting (I hope so at least).\n> \n> Will look.  I guess I'll have to read the original paper, too.\n\n--linas\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/11675455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/11675476", "body": "On 25 December 2012 03:11, ngeiswei notifications@github.com wrote:\n\n> Merry Xmas, for all X in PowerSet(Universe)!\n> \n> May the recursive gods of set theory interpret that statement as a\n> sentiment, rather than a statement of fact!\n\n--linas\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/11675476/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/11872673", "body": "I'll try to review, but am dealing with emergency for the next few days/week, so it won't be soon.\n\nWhat is \"Jade's work\" ?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/11872673/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/11888078", "body": "> Jade's work is here\n> \n> https://github.com/jadeoneill/moses\n\nStrange .. why's he not working with the same opencog repo the rest of us\nare? and .. more importantly, why did he not talk about this on the mailing\nlist?  Forking incorrectly, and then working on it in private, not telling\nanyone, is a receipe for merge collisions and conflicts.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/11888078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/11898811", "body": "I just reviewed this patch series, it looks reasonable to me, and can be merged.  \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/11898811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/12079378", "body": "this has been reported before, maybe for linux too, I think. I think different version of cython 0.16.2 ???? might clear this maybe I don't remember clearly\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/12079378/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/12243438", "body": "Yeah, please do NOT rename README to README.md.  We did this before, it was a bad idea then, its still a bad idea now.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/12243438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/12250119", "body": "We should rename README.md back to README in opencog.\n\nWhen we first moved to git, only a few months ago, README got moved to README.md, which turned out to be a poor idea, and so was moved back. I don't understand why this happened again; I don't see a pull request for this. Looking now ... \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/12250119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/12332915", "body": "OK, lets keep it as README.md for now.\n\nThe choice that the github sysadmins have made, of forcing everyone to add a .md suffix to README's is undeniably a bad idea. Why .md? why not .foobarbaz? Will they display README.html correctly?  What if a file is named README.wiki, and contains standard wikimedia markup, instead of mark-down?  What about .css an javascript? WTF?\n\nMost authors of README's have been using the markdown style for decades before someone started calling it \"markdown\".  Forcing folks to append a lame suffix is just hare-brained idiocy as far as I'm concerned; they didn't have to do this, they just did, for no rational reason.  We can do this, I suppose, but it's still a bad idea. \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/12332915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/12688635", "body": "Why do you need a scheme data reader when you can just use scheme to read scheme data?\n\nThe scheme API is not going away.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/12688635/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/12688682", "body": "And, BTW, it will almost surely be faster (performance-wise, in terms of atoms per second) than whatever code you write... currently, the scheme I/O is the fastest I/O mechanism in all of opencog.  \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/12688682/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/12688957", "body": "???  But if someone loads data into opencog (via scm, or any one of the other ways) won't these atoms be available in pyatomspace?   And vice versa -- if you put atoms into pyatomspace, won't they be visible in scm?  \n\nI'm not sure why it would be slow; last I worked on it, it was able to handle about 100K atoms/sec this was on older hardware too.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/12688957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/13104219", "body": "Please let us know how the demo goes, and if it works well, please submitt some documentation. Clearly, it has not been run in a long long time, and the coding style and API being used in this may be .. old.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/13104219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/13140807", "body": "Nil, sorry, I hit the 'merge' button when I meant to hit the 'comment' button. \n\nI'm guessing that demo might be using obsolete API's in moses, it may require some fair amount of cleanup.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/13140807/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/13778503", "body": "looks good\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/13778503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14022378", "body": "My knee-jerk reaction to the description is \"do we really need all these options?\"  Some of these sound like useful and interesting approaches, but it seems safer and easier to kludge them up, run some experiments, pick the best ones, and hard-code them to always be on.\n\nThe problem with options once they're added, we have to keep them around forever, for backwards-compatibility, and that just gloms up the interface.  I can't believe that all of these options will be good, I figure some will be stinkers that we'll never use.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14022378/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14242325", "body": "I just pushed a fix for this.  Please test ... \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14242325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14332440", "body": "Most of these are expected, and the newest opencog build disables the\nfailing tests.\n\nHowever, a few are serious, and should not be happening:\n\nOn 2 March 2013 03:01, GaneshSJ notifications@github.com wrote:\n\n> The following tests FAILED:\n> \n> 21 - IndefiniteTruthValueUTest (Failed)\n> \n> Bad -- this should pass.\n> \n>  95 - iostream_bscored_combo_treeUTest (Failed)\n\nThis too should work perfectly.\n\nIt would be great if the failure cause of these two could be isolated.  I\nam guessing that it might be due to an older compiler, or to older or bad\nversions of the boost libraries.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14332440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14393790", "body": "looks OK to me, and I'd merge it, but really, the originator of this file should review and merge.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14393790/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14527469", "body": "You can try crossing over anything you please, I suppose. I arrived at the heuristic of 40 and top-three by trial and error: printing out the results of the crossover into the log file, ranking them by score, best to worst, and graphing them, vs. current best score. I got an \"iceburg\" with a tiny little peak sticking up above the best score, and a huge mass under it. The width of that peak was always 40 or less, for the problem I studied.  I don't know what it is for other problems.  In principle, I guess the width of the peak could be automatically measured and allowed to be dynamic. At the time, this did not seem to be worth the trouble.\n\nYou can try crossing over other things -- if you see an iceberg, go for it. However, please don't crate a bunch of user-adjustable flags. This makes moses really hard to understand, and brings very questionable improvements to it.  I'm really not sure why you felt that the 40 should be user-adjustable, unless you discovered it works better for smaller or larger values?   Did you do such experiments?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14527469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14527949", "body": "BTW, the diary of these experiments is located here:  opencog/learning/moses/diary/genetic-crossover  and here is an \"iceberg\":  distrib-avg-bank-1-plex.png  and another distrib-avg-bank-2-plex.png  and another:  distrib-avg-bank-3-plex.png  and many more ... \n\nI think I blogged this on the opencog blog too.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14527949/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14527996", "body": "I mean, if you try experiments, it be great if you published a diary .. \"I tried this, and here's is what happened...\"\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14527996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14530094", "body": "knee-jerk reaction to config file: yes, that would be great. What can go wrong? :-)\n\n\"... kicks in too fast\" ?? I thought it only kicked in when hill-climbing hit a dead end, and couldn't make progress any more.  Its somewhere between a \"smart\" -L1 -T1 and a \"dumb\" lets-see-if-we're-lucky BOA.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14530094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14633391", "body": "Is this still an issue? I run 12.04, don't have a problem. I notice that a recent commit touched these files, perhaps it fixed them?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14633391/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14635656", "body": "err, you opened it, and you did the testing .. you should close.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14635656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14641172", "body": "Hmm, I can add comments to closed issues just fine...\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14641172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14697491", "body": "That solution is almost 12 months old -- I assume that cython 0.18 has the fix in it now, right?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14697491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14888046", "body": "Yeah, that's broken. I'm sort-of surprised by that.  I can reproduce the second one. (-136 ...)\n\nTry it with different -m values, e.g. -m40000 \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14888046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14888309", "body": "Oh, its mist-labelled, it should be the k1 not k3  its only multiplexing one bit, not 3.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14888309/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14888535", "body": "I fixed the wiki page to say the right things.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14888535/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/16138648", "body": "Dunno; the cython code doesn't compile, I can't test it.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/16138648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/16138851", "body": "I'm trying again with cython, just to see if anything has changed.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/16138851/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/16140070", "body": "I just wrote a blog on the atomspace, and why its a good thing: http://blog.opencog.org/2013/03/24/why-hypergraphs/  so as far as I'm concerned, its the main, central feature that defines opencog.  I can now count four different versions of the atomspace: besides the main one in opencog, there is also Boris Iordanov's HypergraphDB; I am trying to convince Boris to make  it more compatible with the opencog atomspace.  There's the new guy with the go implementation -- I'm excited, but its a lot of work, so who knows where it will go.  The fourth implementation is within link-grammar, but I am abandoning that -- it was a neat and successful experiment, but I realized that, rather than re-inventing it from scratch, it would be smarter to fix what's wrong with the opencog atomspace. (I guess you could call relex a fifth implementation of the atomspace ... but its pretty slick, but differrent in important ways.)\n\nMy current plans are as follows: implement a parser for link-grammar on top of the opencog atomspace (with luck, this could/should work with a either the go or the java implementations too.)  Move the pattern matcher deep into the guts of the atom table (for performance, for building indexes, for doing on-the-fly forward chaining -- think of it as \"PLN that works\" -- you set up a PLN rule once, and then, as new data comes in, it gets munched on automatically)  After this (I have very little spare time)  I hope to start doing statistical experiments and learning.  \n\nThe trick is, I cannot do the experiments on statistics and learning without a working, usable, fast atomspace plus rule processor.  So need to build that first.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/16140070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/16142142", "body": "FWIW, cython currently compiles for me. I don't know what changed. Its likely to still be broken for others.  I did clean up the compiler warnings that I got.  There is no unit test for cython; I don't know if the result actually works.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/16142142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/16143160", "body": "Any sort of PLN-ish rule processing risks being slow on certain/many kinds of problems. it wasn't until the Boolean SAT algorithm breakthroughs that made this fast.  And even then: I recently wrote an equipment scheduler in ASP (answer-set programming, which is prolog-like, and uses SAT solvers under the covers).  It worked great (under a second) for scheduling 20 items, but slowed to a crawl (minute) when pairing the 20 items with 20 others that are independently scheduled, but must come in pairs.  ... and this is with crisp logic.  Since PLN uses probabilities, not crisp logic, it will be much harder to perform the cuts & pruning that SAT solvers do.\n\nCertainly, the pattern matcher uses a very simple, naive algo, so its fast on simple things but will bog down on complex things. Currently, it can only forward chain by directly modifying the contents of the atomspace. I have not thought about how to back-chain, or how to keep it from modifying the contents of the atomspace, if the last rule causes all the earlier rules to unwind. Might be easy, might be hard. Then again, humans aren't efficient at this, either.\n\nEven the 'simple naive algo' of the pattern matcher is actually pretty confusing -- it has to keep a set of partially traversed graphs on stack, and I found many bugs during development, which is why it has so many unit tests. So I am not surprised that the python PLN is confuzzling ... and slow.  I suppose I would be surprised if it wasn't.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/16143160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/16150617", "body": "They seem to be currently disabled(?) They weren't run when I just tested.  I'll look into it.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/16150617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/16151489", "body": "Hmm this one is commented out, I assume because its failing:\n\nPythonModuleUTest\n[INFO] Using config file found at: /build/tests/cython/pymodule.conf\n[2013-04-10 02:02:24:996] [INFO] Initializing ClassServer\nRunning 4 tests\nIn PythonModuleUTest::testLoadExceptionAgent:\n/tests/cython/PythonModuleUTest.cxxtest:104: Error: Assertion failed: loadpyRequest != __null\nSegmentation fault (core dumped)\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/16151489/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/16483455", "body": "I assume you pulled from the git repository recently (the last few days) right? If not, try again, just in case (there was a restructuring a week ago that might explain this)\n\nYou seem to be using gcc-4.7 -- this works fine for me, with gcc-4.6\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/16483455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/16821234", "body": "It wasn't till I tried on a different machine, and did some googling and stackoverflow data mining that I saw what the problem was ... \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/16821234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/17077112", "body": "Why is this make_distribution script needed?  Can't things be fixed so that they just work automatically, in tree?  If it needs to be installed, doesn't 'make install' do the right thing?  \n\nPlease note that if you set the cmake path prefix to something other than /usr or /usr/local, then 'make install' will install to that directory.  Therefore, I suspect that this make_distribution script is not needed: it was created by someone who did not understand how cmake works ... Long term, this should probably be fixed.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/17077112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/17117894", "body": "Yes, the as-yet unreleased 4.7.12 is needed. No matte the viterbi parser does not yet work, anyway.There are actually two viterbi parsers, one in opencog, one in link-grammar. The one in link-grammar is more developed.\n\nCmake in opencog does say: \nFIND_PACKAGE(LinkGrammar 4.7.12)\n\nbut I guess the version checking must be failing somehow\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/17117894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/17118492", "body": "fixed in #159\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/17118492/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/17125755", "body": "Note: this issue appears to be blocked by issues #88, #48 and #44.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/17125755/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/17701590", "body": "pull request #169 mosty fixes this\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/17701590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/17701883", "body": "As I read the error messages more closely, this looks like a gcc-4.7.2 issue more than anything else. Somehow, locale processing seems broken.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/17701883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/17701952", "body": "fyi, PythonModuleUTest now runs, passes, and has been re-enabled. I did this in I think pull request #167 or maybe the one before that ...\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/17701952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/17952646", "body": "Where does the weird name \"vector_comp\" come from?  The equivalent, in functional programming languages, is usually called \"map\".  Since this is typed, I guess I would have expected \"map_vector\".\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/17952646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/17964875", "body": "What does 'comprehension' mean, anyway? \u00a0Its a weird word, I can't imagine what its supposed to mean in a comp-sci context. \u00a0When you add a filter to map, its called \"map-filter\" \u00a0as in srfi-1\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/17964875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/17976121", "body": "Comprehension. Oh. Huh. OK. Linq looks very SQL-like, I don't think we should be trying to pretend we are coding in SQL. I don't see a benefit to that.  Rest of discussion is on the mailing list.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/17976121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/18081009", "body": "fixed in pull #185 \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/18081009/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/18354700", "body": "closed with pull #197 \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/18354700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/19932255", "body": "Can you push your fixes to github? Do a pull request, if you think they are good.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/19932255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/19939185", "body": "Merged. But a quick grep also shows: reasoning/pln/AtomSpaceWrapper.cc: reasoning/pln/formulas/FormulasIndefinite.cc:  and ubigraph/Ubigrapher.cc: still using the old form. Could I convince you to fix these?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/19939185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/19978870", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/19978870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20121426", "body": "> Pushed a fix\n\n?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20121426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20124147", "body": "I just pushed a fix\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20124147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20180535", "body": "apt-get install guile-2.0-dev  will install in /usr/include not in /usr/local/include\n\nDo you have another, different guile installed in /usr/local/include  ?  If so, you will have to remove that (manually). \n\nOpen a different bug for the PY_FORMAT error. I thought we'd created a work-around for that one a while ago.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20180535/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20180769", "body": "suggest these steps:\napt-get remove guile-2.0-dev\nrm -r /usr/local/include/guile\napt-get install guile-2.0-dev\ncmake ..\nmake\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20180769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20197667", "body": "I'm going to merge this, but this fix is incorrect:\n-    int rc = fread(&mapSize, sizeof(unsigned int), 1, fp);\n\nthe fread advances the file pointer (by 4 bytes, in this case).  Without\nthis, all subsequent reads will fail. If you don't look at the return\nvalue, then the compiler will complain about an unchecked return value.\n The correct fix would have been\n-   if (rc < 0) print (\"Fatal Error: ...\");\n\n--linas\n\nOn 28 June 2013 10:09, 5aurabhpathak notifications@github.com wrote:\n\n> For the sake of a beginner project, cleaned ALL compiler warnings of above\n> types. Defined but unused variables were causing thousands of warnings\n> generated during the build process which flooded the shell screen. The\n> build now runs smoother and looks prettier than before (with all those\n> colors!). There are other warning types still left untouched but they're a\n> \n> ## lot less in comparison to these. Leaving them alone for now!\n> \n> You can merge this Pull Request by running\n> \n>   git pull https://github.com/5aurabhpathak/opencog master\n> \n> Or view, comment on, or merge it at:\n> \n>   https://github.com/opencog/opencog/pull/219\n> Commit Summary\n> - Cleaned -Wunused-variable and -Wunused-local-typedefs warnings for a\n>   cleaner build experience\n> - Merge branch 'master' of https://github.com/opencog/opencog\n> \n> File Changes\n> - _M_ opencog/comboreduct/combo/procedure_repository.cchttps://github.com/opencog/opencog/pull/219/files#diff-0(1)\n> - _M_ opencog/comboreduct/interpreter/eval.cchttps://github.com/opencog/opencog/pull/219/files#diff-1(1)\n> - _M_ opencog/comboreduct/reduct/mixed_rules.cchttps://github.com/opencog/opencog/pull/219/files#diff-2(4)\n> - _M_ opencog/comboreduct/table/table.hhttps://github.com/opencog/opencog/pull/219/files#diff-3(2)\n> - _M_ opencog/comboreduct/table/table_io.cchttps://github.com/opencog/opencog/pull/219/files#diff-4(2)\n> - _M_ opencog/comboreduct/table/table_io.hhttps://github.com/opencog/opencog/pull/219/files#diff-5(1)\n> - _M_ opencog/comboreduct/type_checker/type_tree.cchttps://github.com/opencog/opencog/pull/219/files#diff-6(1)\n> - _M_ opencog/cython/PythonEval.cchttps://github.com/opencog/opencog/pull/219/files#diff-7(13)\n> - _M_ opencog/embodiment/Control/OperationalAvatarController/Strips.cchttps://github.com/opencog/opencog/pull/219/files#diff-8(1)\n> - _M_ opencog/learning/feature-selection/algo/incremental.hhttps://github.com/opencog/opencog/pull/219/files#diff-9(1)\n> - _M_\n>   opencog/learning/feature-selection/algo/stochastic_max_dependency.hhttps://github.com/opencog/opencog/pull/219/files#diff-10(1)\n> - _M_ opencog/learning/moses/metapopulation/metapop_params.cchttps://github.com/opencog/opencog/pull/219/files#diff-11(1)\n> - _M_ opencog/learning/moses/metapopulation/metapopulation.hhttps://github.com/opencog/opencog/pull/219/files#diff-12(6)\n> - _M_ opencog/persist/file/SavingLoading.cchttps://github.com/opencog/opencog/pull/219/files#diff-13(3)\n> - _M_ opencog/persist/file/SpaceServerSavable.cchttps://github.com/opencog/opencog/pull/219/files#diff-14(1)\n> - _M_ opencog/util/algorithm.hhttps://github.com/opencog/opencog/pull/219/files#diff-15(2)\n> - _M_ opencog/web/json_spirit/json_spirit_writer_template.hhttps://github.com/opencog/opencog/pull/219/files#diff-16(2)\n> \n> Patch Links:\n> - https://github.com/opencog/opencog/pull/219.patch\n> - https://github.com/opencog/opencog/pull/219.diff\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20197667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20354748", "body": "Hi,\n\nYoiu accidentally checked in two junk files ...  CMakeLists.txt.user\nand lib/opencog.conf~   Can you provide a patch series without these ?\n Also, some of your commits seem to change file permissions on files\ncompletely unrelated to this work (such as the cuda-destin code...).\nI'm guessing that you are probably doing a \"git commit -a\" without\ntaking a look at \"git diff\" first.  You really want to review your\nwork with git-diff first, and then only git-commit the relevant files.\n  Global search-n-replace of file permissions is not nice.\n\n-- Linas\n\nOn 2 July 2013 09:46, Ramin Barati notifications@github.com wrote:\n\n> @linas I tried to link BasicPythonUTest which I wrote for testing\n> PythonEval's functionality, but after changing the\n> tests/cython/CMackList.txt I got the error \"No tests defined\", so I reverted\n> the changes. Can you help with this?\n> \n> ---\n> \n> You can merge this Pull Request by running\n> \n>   git pull https://github.com/rekino/opencog master\n> \n> Or view, comment on, or merge it at:\n> \n>   https://github.com/opencog/opencog/pull/220\n> \n> Commit Summary\n> \n> Added some comments\n> Merge branch 'master' of https://github.com/opencog/opencog\n> Merge branch 'master' of https://github.com/opencog/opencog\n> Added PythonShellModule class\n> merging\n> merging\n> py-shell is functional\n> Added statements to PythonShell files\n> Redirect python errors to shell\n> Added BasicPythonUTest\n> oops, backup file commited too\n> \n> File Changes\n> \n> A CMakeLists.txt.user (13293)\n> M lib/opencog.conf (1)\n> A lib/opencog.conf~ (98)\n> M opencog/cython/PythonEval.cc (172)\n> M opencog/cython/PythonEval.h (88)\n> M opencog/cython/PythonModule.cc (6)\n> A opencog/python/pattern_match_functions/generic.py (6)\n> M opencog/shell/CMakeLists.txt (20)\n> A opencog/shell/PythonShell.cc (283)\n> A opencog/shell/PythonShell.h (80)\n> A opencog/shell/PythonShellModule.cpp (110)\n> A opencog/shell/PythonShellModule.h (79)\n> A tests/cython/BasicPythonUTest.cxxtest (103)\n> \n> Patch Links:\n> \n> https://github.com/opencog/opencog/pull/220.patch\n> https://github.com/opencog/opencog/pull/220.diff\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20354748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20355165", "body": "e.g. this commit changes many file permisssions: https://github.com/rekino/opencog/commit/b5dfc89a2c7253db1cd96b0d419ed4d6de026f94\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20355165/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20355416", "body": "Given what I see, I think the easiest way to clean all of this up is to take the patch series from this pull request, hand-edit that to remove the junk, and then create a brand new branch, and apply the patch series to that.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20355416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20371750", "body": "Well, the original email contains a patch series, or you can ask for one\nfrom git-hub.  Or you can ask for an all-in-one giant diff. Just hand-edit\nthat diff.\n\nThe problem with copying files on top of other files is that you can\nclobber other changes unless you are very very careful -- it requires\ncarefully reading the code.  That's why diff was invented :-)  And one big\ndiff file can be unruly, which is why a sequence of small diff files (a\npatch series) was invented.  That way, you can audit each small change to\nmake sure its correct, before committing it.  You can even break for lunch\nin the middle of it all. Many smaller changes are just easier than fewer\nbig changes. :-)\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20371750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20572841", "body": "Looks good. FYI, I just pushed changes to CMakefiles to make sure that the atom-types files are built before any embodiment code is compiled. (this only affects parallel make).\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20572841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20680394", "body": "General remark: You could save a lot of RAM by implementing a sparse internal format. In my case, almost all of my tables have zeros for almost all columns and rows.  Storing all those zeros is a big waste of space.\n\nA sparse in-RAM table would have to put the non-zero values in a hash-table or tree, which would cost a fair amount in access time, especially during evaluation of instances ... However, its possible that this could still be faster, due to caching effects. viz. if the non-sparse table is larger than the shared third-level cache for all CPU cores, then all cores must halt and wait while parts of the table are fetched from main RAM for the one cor that is evaluating an instance.   If the sparse table fits into cache, then the hash/tree access costs could still be much less than flushing everything to  main RAM every time.\n\nNot sure about Intel, but on the high-end, mainframe-class powerpc systems from some few years ago, a (third level) cache miss was 5x or 10x slower than running in cache ... a (third level) cache miss cost a hundred or more CPU cycles.  So if you can do something in a hundred CPU cycles that avoids a cache miss, its a performance win for your code.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20680394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20681087", "body": "According to this, http://www.7-cpu.com/cpu/SandyBridge.html a 3rd level cache miss on Intel Sandy Bridge == 46 cycles + 65 nanosecs. Assuming 3 cycles per nanosec, thats about 46+3*65 = 240 cycle penalty for a cache miss.  That's plenty of time to compute a hash or walk an rb-tree.\n\nNote also that if one core is invalidating the 3rd level cache, there is a good chance that what is being thrown out is stuff that the other cores need ...\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20681087/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20702357", "body": "By 10 ... How?  except for the type signature, I just didn't see anything that would have affected memory usage. Is this a fragmentation thing?  \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20702357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20703160", "body": "But the table-of-strings was freed after being used.  That would have cause the heap pointer to grow, but after the free, that memory would be available again. \n\nOh, I see, If you have many moses procs running on a CPU, then that free memory would still have to be swapped to disk, if there was memory pressure, and swapping of unusued heap is really wasteful. OK, I get it.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20703160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20705213", "body": "Ah .. top is not showing it because top is only reporting the difference between the heap and the heap base. Top gets these values by asking the kernel what they are. And since the heap never decreases ... :-)\n\nWhen you call malloc(), the c library tries to see if it has something free. If it does, it returns that.  If it doesn't, it makes the sbrk() system call to the kernel to ask for more pages. sbrk() either succeeds or fails; if it succeeds, malloc() returns that memory; if sbrk() fails, the process gets killed/dies.  When you call free(), that memory is returned to the c library, which remembers it, but the C lib never ever returns back to the kernel.  top/htop only ask the kernel how many pages a process has. There is no way that top (or any external process) can ask the C library how much it has free (except for some gdb monkey-business, or valgrind, etc.)\n\nAnyway, from the kernel point of view, those pages in the heap are in use, even if the C library has them in the free pool. There is no way for the kernel to know if they hold valid or invalid data, kernel has to assume they're all in use (and thus must be swapped to disk if there is memory pressure) \n\nIt is far too expensive to try to return those unused pages to the kernel in some automatic way; no C library ever does this. If you really want to do this, then you create an anonymous, private shared-memory segment, put your data there for a while, and then later release the shared memory segment.  However, there's no way to malloc() from shared memory unless you write your own malloc(), and besides it's dangerous: if you release your shared memory segment, but are still using it .. kapoof, segmentation violation.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20705213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20938174", "body": "Huh?  The folder's not empty, its got two files in it ... !? Why would .gitignore fix a pthon problem? This makes no sense at all.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20938174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20938241", "body": "Ah, OK, I'm starting to see ... they are pyc files, not human-created files. All compiled files should go into the build directory, not the source directory, so the real bug is in some CMakefile, I guess.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20938241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20938451", "body": "Based on above, and the applied patches, I think this is all fixed now.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20938451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/21201335", "body": "Try it now. I just added a dependency for logic_wrapper, which was an\nauto-generated file.\n\n--linas\n\nOn 18 July 2013 09:33, Paulo Edgar Castro notifications@github.com wrote:\n\n> Nopes,\n> \n> It's not fixed, a fresh just now today seems to indicate the issue is\n> still there.\n> Perhaps some other missing deps?\n> \n> -- Build type: Release\n> -- Boost version: 1.48.0\n> -- Found the following Boost libraries:\n> -- date_time\n> -- filesystem\n> -- program_options\n> -- regex\n> -- serialization\n> -- signals\n> -- system\n> -- thread\n> -- Boost version 104800 found.\n> -- Found Boost::program_options\n> -- Found Boost::math\n> -- Expat XML parser found.\n> -- GSL found.\n> -- Guile was found.\n> -- HyperTable was not found. Make sure HYPERTABLE_LIBRARY and\n> HYPERTABLE_INCLUDE_DIR are set.\n> -- Hypertable not found; the experimental distributed persistence DB needs\n> it.\n> -- link-grammar (>=4.7.12) was not found. Make sure LINK_GRAMMAR_LIBRARY,\n> LINK_GRAMMAR_INCLUDE_DIR and LINK_GRAMMAR_DATA_DIR are set.\n> -- Link Grammar missing: needed for the Viterbi parser.\n> -- Could NOT find MPI_C (missing: MPI_C_LIBRARIES MPI_C_INCLUDE_PATH)\n> -- Could NOT find MPI_CXX (missing: MPI_CXX_LIBRARIES\n> MPI_CXX_INCLUDE_PATH)\n> -- MPI missing: needed for MPI-MOSES.\n> -- OpenGL was found.\n> -- Found these protobuf libs: /usr/lib64/libprotobuf.so\n> -- Protobuf was found.\n> -- Python libs found.\n> -- Python destination dir found: /usr/lib/python2.7/site-packages\n> -- SDL was found.\n> -- SDL_gfx was found\n> -- TCL shell was found here: /bin/tclsh\n> -- UnixODBC was found.\n> -- Valgrind Prefix:\n> -- Could NOT find VALGRIND (missing: VALGRIND_INCLUDE_DIR)\n> -- VALGRIND missing: needed for thread debugging.\n> CMake Warning at CMakeLists.txt:421 (MESSAGE):\n> Xerces 3.1.1 not supported. Only versions 2.\\* are supported. Embodiment\n> won't be built.\n> \n> -- Found these zmq libs: /usr/lib64/libzmq.so\n> -- ZeroMQ was found.\n> The following components will be built:\n> \n> AtomSpace - A weighted and typed hypergraph database.\n> Attention - Agents for attention allocation dynamics.\n> ComboReduct - Library for reduction of combo program trees.\n> CythonBinding - Cython (python) bindings.\n> Dim. Embedding - Compute dimensional embedding of the AtomSpace.\n> Doxygen - Code documentation.\n> FeatureSelection - MOSES based feature selection tool.\n> MOSES - Meta-Optimizing Semantic Evolutionary Search.\n> PLN - Probalistic Logic Networks.\n> SchemeBinding - Scheme bindings and shell.\n> Server - The CogServer.\n> Spatial - Vizualisation of the 3D spacemap.\n> SQL Persist - Interfaces for SQL persistance of the AtomSpace.\n> Ubigraph - Visualisation of the AtomSpace.\n> Util - General utility library.\n> WebInterface - Web server and REST API.\n> The following components WILL NOT be built:\n> \n> Embodiment - Architecture for embodiment.\n> Hypertable - HyperTable for scalable persistance (experimental).\n> Viterbi - Viterbi Parser for Link Grammar.\n> \n> -- Configuring done\n> -- Generating done\n> -- Build files have been written to: /download/opencog/bin\n> [ 4%] Built target cogutil\n> [ 17%] Built target comboreduct\n> [ 17%] Built target action-reductor\n> [ 17%] Built target contin-reductor\n> [ 17%] Built target eval-table\n> [ 17%] Built target full-reductor\n> [ 17%] Built target gen-disj-conj\n> [ 17%] Built target gen-table\n> [ 17%] Built target interactive-reductor\n> [ 17%] Built target logical-reductor\n> [ 17%] Built target mixed-reductor\n> [ 18%] Built target perception-reductor\n> [ 18%] Built target repl\n> [ 18%] Built target tree_gen\n> [ 18%] Built target opencog_atom_types\n> [ 20%] Built target ubigraph\n> [ 20%] Built target pln_atom_types\n> [ 20%] Built target pln-types\n> [ 29%] Built target atomspace\n> [ 31%] Built target xml\n> [ 34%] Built target smob\n> [ 34%] Built target nlp_atom_types\n> [ 34%] Built target nlp-types\n> [ 34%] Built target persist\n> [ 35%] Built target server\n> [ 35%] Built target cogserver_cython\n> [ 37%] Built target atomspace_cython\n> [ 39%] Built target agent_finder\n> [ 39%] Built target PythonEval\n> [ 39%] Built target PythonModule\n> [ 39%] Building CXX object\n> opencog/reasoning/pln/CMakeFiles/pln.dir/Testing.cc.o\n> /download/opencog/opencog/reasoning/pln/Testing.cc:16:46: fatal error:\n> opencog/cython/logic_wrapper_api.h: No such file or directory\n> \n> compilation terminated.\n> make[2]: **\\* [opencog/reasoning/pln/CMakeFiles/pln.dir/Testing.cc.o] Error\n> 1\n> make[1]: **\\* [opencog/reasoning/pln/CMakeFiles/pln.dir/all] Error 2\n> make: **\\* [all] Error 2\n> \n> \u2014\n> \n> Reply to this email directly or view it on GitHubhttps://github.com/opencog/opencog/issues/228#issuecomment-21187503\n> .\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/21201335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/21201917", "body": "Sorry, I didn't see this in the email queue, and just pushed more or less the same fix (except for the atom-types dependency -- how can that depend on cython?)   So I'm just closing this one.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/21201917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/21638768", "body": "I just pushed a fix which I think might fix this; can you try it?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/21638768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/21641738", "body": "I'm guessing you have python3 installed; our makefiles don't check for that; the code wants python 2\n\nsandsmark's branch has fixes for this. rekino will have to test; I'm not handling the python bindings.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/21641738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/21669596", "body": "I've never tried make install before.  The missing library is one of the cython ones. I guess you now have pythong2-devel installed?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/21669596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/21691797", "body": "Now if we add Vagrantfile (config) to project's main repo, this workflow\n\n> becomes\n> git clone <repo>\n> cd project/\n> <hack><hack><hack>\n> git commit/push\n> vagrant up ; vagrant ssh\n> make/install\n> So, this integrates seamlessly into how developers are used to working\n> with code (just add a couple new vagrant commands to workflow).\n> \n>  I like this; I might actually try it; I admit I never tried ocpkg.  If I\n> have an existing ubuntu install, does it fork the VM from that, or does it\n> do a completely new install of some other ubunutu version?\n\n--linas\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/21691797/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/22007917", "body": "did that work? are there still problems?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/22007917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/22013656", "body": "The core issue is in comboreduct/table/table.h struct interpreter_visitor  which ignores the output type (here, an enum) and uses contin_interpreter instead of mixed_interpreter\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/22013656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/22015210", "body": "Am adding a new unit test for this: irisUTest  that runs this example. Its broken for now.  I'm trying to understand a fix, but the new interpreter code is rather impenetrable. \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/22015210/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/22016756", "body": "OK, the problem seems to occur at comboreduct/table/table.cc line 326:\n\n```\n    interpreter_visitor iv(tr);\n    auto ai = boost::apply_visitor(iv);\n    for (const multi_type_seq& vs : itable)\n        push_back(ai(vs.get_variant()));\n```\n\nThe vs.get_variant fails to notice that the output type is an enum, not a double, and causes the wrong interpreter_visitor signature to be used:  viz, it incorrectly calls  vertex operator()(const std::vector<contin_t>& inputs) instead of vertex operator()(const std::vector<vertex>& inputs) \n\nPerhaps this wouldn't be so bad, if we could still call mixed_interpreter on double inputs, but that seems to fail because of how the interpreter .. hmmm. wait. maybe I see a solution .. \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/22016756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/22020145", "body": "OK, I have a fix for this, will push shortly\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/22020145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/22023096", "body": "BTW this is a fix for bug #242 \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/22023096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/22112647", "body": "fixed in commit #243 \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/22112647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/22114803", "body": "FYI, \n\nThe following tests FAILED:\n     95 - feature_selectionUTest (SEGFAULT)\n\nafter pulling this.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/22114803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/22275553", "body": "FYI, I just moved all four visualizers to one common subdir \"visualization\" and renamed this one to \"gtk-visualizer\"  this in pull request #248 \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/22275553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/22501516", "body": "I notice this branch was started in January, 8 months ago. In general, its not a good idea to wait so long before merging, although I do understand that no one else was working on code changes that would have messed you up.  But still .. you never know; there were some python fixes that might have messed you up.\n\nBTW, it would be great if your tests were run by 'make test' so that we'd know if they were getting messed up.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/22501516/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23270862", "body": "Most of the unused-result warnings should be fixed by actually looking at the result and testing.  \n\nSome of these warnings are in nearly obsolete code (such as some of the file-reading code), and we should probably look to see what it takes to completely turn off and eliminate that code.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23270862/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23271514", "body": "There are a nearly infinite number of thins wrong with opencog.  This would need a detailed use-case and design plan. \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23271514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23273456", "body": "Oops. won't compile, you forgot to check in \"macros.h\"\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23273456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23310630", "body": "Looks like a dupe to me.  All I get from this is that the REST API needs some love & attention.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23310630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23312348", "body": "Also, this commit contains a file called \"typescript\", which contains 562 lines of junk.   Chris, please review before you commit. \n\nDave, Please review these pull requests before merging them; we should not be merging junk into the repo.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23312348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23381123", "body": "think about enabling tests/web (by uncommenting contents of CMakefile) (assuming the test can be made to pass...)\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23381123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/opencog/opencog/comments/2063704", "body": "Thank you for fixing this!\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/2063704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/2063707", "body": "thanks!\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/2063707/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/2343125", "body": "looks good to me...\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/2343125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/2343156", "body": "Hmm .. the commit message claims a bug was fixed here, but I don't see it.\n\nit also replaced a coarse-grained parallel dispatch by a fine-grained one. I would have thought that the coarse-grained one would be more cpu-efficient? \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/2343156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/2343204", "body": "good\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/2343204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/3182020", "body": "I'm bisecting ... below is a note-to-self.\n\nCode in this branch crashes unless the following patch is applied:\n\n--- a/opencog/learning/moses/metapopulation/deme_expander.cc\n+++ b/opencog/learning/moses/metapopulation/deme_expander.cc\n@@ -124,6 +124,7 @@ bool deme_expander::create_demes(const combo_tree& exemplar)\n                                \"non-selected features\");\n                 // Insert exemplar features as they are not pruned\n                 sf.second.insert(xmplr_features.begin(), xmplr_features.end());\n+xmplr_seq.push_back(exemplar);\n             }\n\n```\n         // add the complement of the selected features to ignore_ops\n```\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/3182020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/3182467", "body": "This patch results in terrible performance. Before this patch, I was seeing these training times:\n\nreal    0m41.954s\nuser    5m21.755s\nsys 0m22.306s\n\nafter this patch, I am getting:\n\nreal  3m15.669s\nuser  9m37.329s\nsys   0m28.198s\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/3182467/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/3182516", "body": "This patch significantly degrades performance: before this patch, I'm getting run times:\n\nreal    3m15.669s\nuser    9m37.329s\nsys 0m28.198s\n\nafter this patch, it gets worse:\n\nreal    5m59.171s\nuser    14m43.004s\nsys 0m34.802s\n\nNote: I am not using diversity-anything, so I was expecting this to be a no-op: both sf_pop and top_sfs should contain just one exemplar, the same exemplar. It certainly did when I checked in other versions.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/3182516/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/3187938", "body": "I'm going to write a unit test first, and then think about what you are trying to do here. Representation building has been a bottle-neck ever since hill-climbing got fixed up a year ago. Before this, it used to account for 1/2 or 2/3rds of all CPU time (for my problems); after this, its now accounting for maybe 90% or 95% of all CPU time in moses.  It needs some kind of major re-think, re-architecture.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/3187938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/3190015", "body": "Actually, the above comment is probably totally misleading. Run-time and final score are non-deterministic, at this point, no two runs taking the same amount of time, or resulting in the same score (for -jN for N>0)  So disregard above comment, I really believe that contents of sf_pop and top_sfs should be identical when there's no diversity flags set.\n\nI'm trying to bisect to find the non-deteminism\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/3190015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/3190115", "body": "Oh, please don't make variable names shorter!  The code is already hard enough to understand without having to guess what \"xover\" might mean. I guess its OK here ... but in general .. \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/3190115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/3190169", "body": "Its hard to  tell from you changes, but it looks like you removed this permanently. But this was a good source of forward progress!  Basically I'd see this (full scan covered 5000 instances, cross-over covered 120, so crossover was fast and cheap):\n\nfull scan, score improve\nfull scan, score improve\ncross score improve\ncross score improve\ncross no improve\nfull scan  score improve  -- triggered by this code. Basically, whenever crossover stopped workin, i'd do a full scan\ncross score improve\ncross score improve\n...\netc.\nthis could go on a very long time 30-40-50 iterations, of which 3/4'ths were cheap/fast cross-overs and the rest were expensive full scans.   I can't tell, but it looks like you broke this?   If not, then can you please add a note explaining that the point of the algo is to interleave long expensive full scans with cheap, fast, effective cross-over scans. \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/3190169/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/3191025", "body": "This commit introduces non-determinism into the algo.  All commits between 6 feb and this one produce exactly the same results, including the commit right before this. This one, however, produces a different result ever time its run. \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/3191025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/3191029", "body": "different, when -jN for N>0 is set. Havne't tried but the new dyn-feat-sel utest will probably show this.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/3191029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/3191047", "body": "OK, fine. I couldn't tell by reading the patch.  Can I get you to add a note somewhere in there explaining that the point of the algo is to alternate between full scans and fast scans?  You and I won't forget, but I figure someday there will be someone new ... \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/3191047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/3191146", "body": "I'm guessing the scorer is returning exactly the same score for many features, and due to thread races, they end up in different places in the sorted array.  Then, later on, if we keep only the top N scores, the top N will be different each time.\n\nThus, we need to somehow guarantee a unique sort order, even when scores are the same.  Maybe by adding a hash of the feature set ??\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/3191146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/3192758", "body": "Assuming that lexicographic is acceptable -- which is why I suggested a hash. its deterministic, but at least 'randomized'.  I'll try to implement something now; if you don't like it, change it.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/3192758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/3192839", "body": "OK, tried the above. It does make things deterministic. Model-wise, its a disaster.  The same selected features always show up, they've always the very first few, and the score is always very poor.   Apparently, there are other features with the same MI score, but can be used to build much more accurate models.  I need a random selector, so that these others can be explored.  I was going to add exactly that, anyway -- a random selector; but it was going to go in a very different place than here.\n\nTo see the uniformity of features, run dynFeatSelUTest.cxxtest with different random seeds. They almost always get: -45 and(!$4 !$5 !$7 !$8 !$10 !$11 !$12)   Before this change, I was usually getting scores of about -31, sometimes -20 sometimes -12 for some random seeds (and  much more complex models)\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/3192839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/3192945", "body": "feature_selectionUTest.cxx::test_simple_sparse_contin() breaks, too, as a result of this patch -- apparently, that also has lots of features with identical MI scores.  Thinking about the best fix.  I think well need to randomize the lexicographic order with a random seed.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/3192945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/3195131", "body": "fixed in upcoming commit.  BTW, if sort performance is an issue, recommend using std:partial_sort to get only the needed results\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/3195131/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/3200171", "body": "Update:\n\n1) after other recent fixes, the performance issue has more-or-less gone away (at least, for a small number of features; my original testing was with 12 dyn select features; typical exemplars have 30-40 features)\n\n2) I reviewed above patch. It seems reasonable. the idea of generating all pairs still concerns me; one of my better par settings has exemplars with 30-50 features and dyn-feat-sel adding 90 or 120 to that, for a total of nearly 200 features.  Adding more than 120 dyn-feats, or less than 75 dyn feats destroys the quality of the model.  So we need a solution that is reasonable for up to maybe 200 features.\n\n3) your comment about perm_ratio could have been solved simply by replacing\n- unsigned int n_pairs =\n- ```\n     _arity + static_cast<unsigned int>(_perm_ratio * (max_pairs - _arity));\n  ```\n  \n  with\n- unsigned int n_pairs = \n-        perms.size() + static_cast<unsigned int>(_perm_ratio \\* (max_pairs - perms.size()));\n\nright ??\n\n4) something else, somewhere, is till being non-deterministic\n\n5) I see some easy performance fixes to above; I'll make those.  After that, I think that any remaining issues about this patch can be considered closed.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/3200171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/3200373", "body": "fixed in pull #183 (or the pull before or after that.)\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/3200373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/3609614", "body": "OK, I just pushed a fix tthat I think would fix this\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/3609614/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/3612849", "body": "OK, I just pushed a fix for that.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/3612849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/3808999", "body": "Huh? its 2013 right now, not 2008-2012\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/3808999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/3809021", "body": "surely this can't be right --  a discrete knob index can have any value? right? or is idx something else?\n\nSee also above note: there is some confusion between know setting and knob index going on here.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/3809021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/3809060", "body": "The naming here is confusing, this is not the knob index, this is the knob setting. The knob index can be any value from zero to N, where N is the total number of knobs.  The knob setting can range from 0 to M where M depends on the type of the knob: M is 2 for logical knobs (present, absent, negated), an arbitrary value for disc knobs, and 3 for contin knobs (roughly, multiply by 2, divide by 2, and another two cases).\n\nOh, Hi Nil, I thought I was writing to Cosmo, not you.  You know this stuff. But still, \"index\" is a confusing name, because its not actually an index ... right?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/3809060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/3809096", "body": "A much simpler way to do this is to just say\n\nlogger().fine() << \"get_candidate before reduct: \" << tr;\n\nYou don't need the stringstream gunk\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/3809096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/4537486", "body": "Thank you for merging!  I now have two additional requests:\n\n1) can you fix the compile warnings? Opencog used to compile with zro warnings, it now has 121 of them: see, for example http://158.132.58.86:8010/builders/opencog_master/builds/434/steps/compile/logs/warnings%20%28121%29\nCould you do this in the next 24 hours?\n\n2) over the next few months, please start creating unit tests for the planner and for the spatial/octree code.  Unit tests are a good idea to have, for a large number of reasons. One of them is that it makes _your_ life easier: when you fix a bug in one part of your code, you can be sure you did not accidentally break some other part of your code.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/4537486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/4553076", "body": "Thank you!\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/4553076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/4935921", "body": "That's odd.. what version of guile do you have installed? This works for me, under both guile 2.0.5 (about three years old, on ubuntu) and guile 2.0.9 (the latest)\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/4935921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/4935925", "body": "To get version, just type in guile --version  at the bash prompt\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/4935925/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/4941584", "body": "OK, I just opened a trouble ticket against ocpkg to upgrade to guile-2.0\n\nThe rnrs (which implements scheme standards r5rs and r6rs) is provided by package guile-2.0-libs in ubuntu 12.04 LTS precise.  The files are in /usr/share/guile/2.0/rnrs  ... so:\n-- is that package installed?\n-- did you recompile opencog?\n-- is version 1.8 also installed (one can have both installed simultaneously; it shouldn't interfere.)\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/4941584/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/4941714", "body": "no hurry.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/4941714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/4942322", "body": "Yeah, makes sense. Without installing dev, and re-compling, you end up linking to the 1.8 libraries, which use the 1.8 search paths to find files.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/4942322/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/4946292", "body": "OK, several notes:\n\n1) In linux, rebooting the system to solve a problem will never actually solve the problem. Unlike apple macintosh or windows, rebooting linux is almost always a bad idea. Don't do it.\n\n2)  The *-dev packages (in ubuntu, *-devel in redhat) contain the header files that are needed for compiling.  These packages also contain the libraries that tell the compile-time linker how to link the executable, and thus, which run-time libraries to use.   Thus, simply installing guile-2.0 did nothing at all, since opencog was still linked to guile-1.8.   As mentioned previously, you need to recompile with guile-2.0 to have it actually use guile-2.0\n\n3) The missing version.h problem I can't help you with. It sounds like you somehow broke the install, possibly by moving or deleting files by hand, or by using the --force-\\* flags (with RPM/yum) or --ignore flags (with dpkg/apt)  You have to figure out what you broke, and unbreak it.  Probably the easiest thing to do would be to completely remove guile-dev, and then install it again.  \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/4946292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/4946344", "body": "? Reinstalling guile-dev should take less time than reading this.  Just say\n'yum remove guile-2.0-devel; yum install guile-2.0-devel'  (or use apt on\nan ubuntu system)\n\nOn 27 December 2013 10:25, Alex van der Peet notifications@github.comwrote:\n\n> Ok, point 1 duly noted. We did recompile after installing guile 2.0\n> though, that\u2019s why we got the error. And I didn\u2019t use any \u2013force or \u2013ignore\n> flags but sure, we\u2019ll try a reinstall tomorrow.\n> \n> Thanks!\n> \n> Alex\n> \n> From: Linas Vepstas [mailto:notifications@github.com]\n> Sent: 28 December 2013 00:23\n> To: opencog/opencog\n> Cc: Alex van der Peet\n> Subject: Re: [opencog] Fix a UTF-8 bug. (f6793d0)\n> \n> OK, several notes:\n> \n> 1) In linux, rebooting the system to solve a problem will never actually\n> solve the problem. Unlike apple macintosh or windows, rebooting linux is\n> almost always a bad idea. Don't do it.\n> \n> 2) The *-dev packages (in ubuntu, *-devel in redhat) contain the header\n> files that are needed for compiling. These packages also contain the\n> libraries that tell the compile-time linker how to link the executable, and\n> thus, which run-time libraries to use. Thus, simply installing guile-2.0\n> did nothing at all, since opencog was still linked to guile-1.8. As\n> mentioned previously, you need to recompile with guile-2.0 to have it\n> actually use guile-2.0\n> \n> 3) The missing version.h problem I can't help you with. It sounds like you\n> somehow broke the install, possibly by moving or deleting files by hand, or\n> by using the --force-\\* flags (with RPM/yum) or --ignore flags (with\n> dpkg/apt) You have to figure out what you broke, and unbreak it. Probably\n> the easiest thing to do would be to completely remove guile-dev, and then\n> install it again.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub <\n> https://github.com/opencog/opencog/commit/f6793d0b9d41edc1846bea80a95c25cd9cc136a0#commitcomment-4946292>\n> . <\n> https://github.com/notifications/beacon/2569494__eyJzY29wZSI6Ik5ld3NpZXM6QmVhY29uIiwiZXhwaXJlcyI6MTcwMzY5NDE1MSwiZGF0YSI6eyJpZCI6MjI1NjUyMDB9fQ==--b3ba05131b3ac760c03bfe85fe948863f65679d4.gif>\n> ---\n> \n> No virus found in this message.\n> Checked by AVG - www.avg.com\n> Version: 2014.0.4259 / Virus Database: 3658/6953 - Release Date: 12/27/13\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/opencog/opencog/commit/f6793d0b9d41edc1846bea80a95c25cd9cc136a0#commitcomment-4946306\n> .\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/4946344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/5503906", "body": "Hey Lake,\n\nDid you realize that you created a branch off of opencog master, instead of under your own name? Its bad form to do this; work should be under your own git branch.\n\nAlso, I can't tell if you intended to merge this or not; as it stands, it has not been merged.\n\nI'm thinking you want to review the opencog wiki on how to use git...\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/5503906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/5503920", "body": "I mean, I can mere this for you if that's what you wanted ... I just can't tell, given its current state.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/5503920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/5503943", "body": "please don't use boost threads unless you really need to, its obsolete and has been superceeded by the c++11 standard\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/5503943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/5503964", "body": "I think you want to surround the whole thing by HAVE_ROS, since it won't compile without it ... \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/5503964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/5595330", "body": "if trail is a set (which it seems to be) then this boolean-or's the other set (input_trail)\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/5595330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/5607869", "body": "Hi Lake,\n\nPlease do not push your private branches to the opencog repo!  Your private code belongs in your private fork; when its ready to be merged, you should issue a pull request.   To be clear: you should be doing something like this:\n\ngit push git@github.com:/lake/opencog RosTestRun\n\nwhat you seem to be doing is \n\ngit push git@github.com:/opencog/opencog RosTestRun\n\nwhich is wrong. Don't do this!  \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/5607869/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/5608959", "body": "Dave, Yes, http://wiki.opencog.org/w/Opencog-github-flow is insanely complicated and should be ... made to go away.\n\n http://wiki.opencog.org/w/Development_standards#Git_HOWTO  is good, and could be ever so slightly better if something explained that \"origin\" is actually https://guthub.com/my-user-name/opencog  as otherwise it seems like some mumbo jumbo. Likewise https://github.com/opencog/opencog ... oh wait, its a wiki, I can do this myself..\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/5608959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/5634728", "body": "Hey Lake, you 're still pushing your changes to the wrong place. \n\nPlease review http://wiki.opencog.org/w/Development_standards#Git_HOWTO and follow the process there.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/5634728/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/5636998", "body": "stv conflates count and confidence so that confidence=800/count  with 800 a random number picked from thin air.  This makes it not suitable for actual counting tasks.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/5636998/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/5638390", "body": "Because:\n\n1) they were written before someone invented the opencog coding guidelines\n2) the person who did a global search-and-replace of tabs by 4 spaces forgot to do these files,\nand, most importantly,\n3) 4-space indentation is stupid, and is symptom of the kind of stupidity that often gets stuck into opencog.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/5638390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/5638425", "body": "anyway, please leave them as tabs. They're one of the few places where the indentation is actually soothing and pleasing to the eye.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/5638425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/5813584", "body": "Nil,  you realize that by always pushing to master, that you will someday clobber someone else's commit by accident, right? That is, if they commit after you pull but before you push, their stuff will be wiped out.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/5813584/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/5820233", "body": "Oh. OK.  Never mind ..  I was getting nervous .. as I'd sometimes done it myself. \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/5820233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/5842682", "body": "Sure ... I don't mind. But I think that maybe there's some test case that fails if you turn this into a throw?   I dn't remember.\n\nDuring rework, I found the throw commented out, so I changed it to throw, and then something broke, so I changed it back (with this commit), and added these notes.  As long as unit tests pas, I don't mind .... its possible unit tests may be buggy ... \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/5842682/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/5857832", "body": "I'm pretty sure you still need to call atom->unsetRemovalFlag(); before throwing.  That flag is used internally, and having it in a bad state will confuse something, somewhere.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/5857832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/6097441", "body": "FYI, several unit tests no longer compile, because TRICK_FOR_FOOD LOOK_UP_TURN_HEAD BARK are not defined.  These can almost surely be replaced by some other random actions, for the purposes of the unit tests ... \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/6097441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/6493327", "body": "In the future PLEASE REBASE YOUR CHANGES, instead of merging like this.  The problem with merges of this kind is that .. well, as you can see above: thousands of lines of code are shown, almost none of which you actually changed.  These other changes are from other people who are also working on the tree, and picking them up in this way completely obscures your work, and makes it very hard to tell what you are doing.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/6493327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/7238009", "body": "I can't quite tell what this test is testing, but numeric columns have been broken in moses for a while; there is an open bug report on this; its bug #241 .   I've had to do some annoying/painful work-around for this.  We shouldn't disable the testing for these things, we should get them to work.  \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/7238009/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/7273805", "body": "This doesn't compile for me and I can't find any work-arounds. The error message is\n\n/usr/local/include/cxxtest/TestSuite.h:56:9: error: call of overloaded\n\u2018equals(std::vectoropencog::moses::scored_combo_tree&,\nstd::vectoropencog::moses::scored_combo_tree&)\u2019 is ambiguous\n/usr/local/include/cxxtest/TestSuite.h:56:9: note: candidates are:\n/usr/local/include/cxxtest/TestSuite.h:45:10: note: bool\nCxxTest::equals(X, Y) [with X =\nstd::vectoropencog::moses::scored_combo_tree, Y =\nstd::vectoropencog::moses::scored_combo_tree]\n/usr/include/boost/algorithm/string/predicate.hpp:318:21: note: bool\nboost::algorithm::equals(const Range1T&, const Range2T&) [with Range1T =\nstd::vectoropencog::moses::scored_combo_tree, Range2T =\nstd::vectoropencog::moses::scored_combo_tree]\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/7273805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/7273973", "body": "this file also no longer compiles for me ... \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/7273973/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/7274941", "body": "Its boost-1.53  -- but read the error carefully: the clash is between boost and CxxTest -- and arguably, it is a bug in CxxTest, which should not use \"using\".\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/7274941/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/7285760", "body": "This also does not compile for me, with the error same as before:\n\n/opencog-git/tests/comboreduct/table/tableUTest.cxxtest:409:189:   instantiated from here\n/usr/local/include/cxxtest/TestSuite.h:56:9: error: call of overloaded \u2018equals(opencog::combo::TTable&, std::vectorboost::gregorian::date&)\u2019 is ambiguous\n/usr/local/include/cxxtest/TestSuite.h:56:9: note: candidates are:\n/usr/local/include/cxxtest/TestSuite.h:45:10: note: bool CxxTest::equals(X, Y) [with X = opencog::combo::TTable, Y = std::vectorboost::gregorian::date]\n/usr/include/boost/algorithm/string/predicate.hpp:318:21: note: bool boost::algorithm::equals(const Range1T&, const Range2T&) [with Range1T = opencog::combo::TTable, Range2T = std::vectorboost::gregorian::date]\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/7285760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/7950602", "body": "Who is \"Larry Daniels\" ??\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/7950602/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/7951463", "body": "Well, clearly, yes its Aaron's work. But why is Aaron Larry?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/7951463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/7951561", "body": "Huh. OK. That's reasonable. Just unexpected and odd .. \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/7951561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/8805472", "body": "I think I'm being quoted out of context.   moses_exec()  is the API for _calling_ moses.   What moses returns is something else again.   Right now, what it prints on stdout is only quasi standard, and has not been entirely stable.  So for example, I had to change the printed output to add weights, and the resulting python unit test broke.\n\nIf we remove the python boilerplate from the C++ code, it will break again.   I am not really sure what a better solution is, though.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/8805472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/9206772", "body": "Why are you looking at old code? The current code does the same thing, but is in a different location: its at line 344 of PatternMatch.cc\n\nThe philosophy of the pattern matcher wavers between two different design points.   The first, original design was that it should provide function, and not set policy.  That is, functionally, it should be able to compare any pattern to any other pattern.  But users always want policy, and so the policy is supposed to be implemented in the callbacks, which are supposed to accept or reject matches based on specific policy criteria.  So that's the main split: a policy-free functional pattern matcher, and a set of specific, tailored policies in the callbacks.\n\nVariableNodes were invented only later, to simplify the specification of the pattern.  Again: in principle, any type, node or link could be considered a variable, or a constant, and the callbacks should decide which is which and do as desired.  In practice, no one was interested in this general capability. Thus, to simplify pattern specification, the variable node was invented.  The variable node is meant to be a convenience **to the user**, only.  The pattern matcher does not need them, and can work happily without them.  Variables are policy, not function.\n\nUnfortunately, this clean split between policy and function has gotten blurrier and blurrier.  checks for variable nodes have crept into the engine; they really should not be there.  \n\nConversely, there are some left-overs of the general approach in other parts of the code. I think that you discovered one of these.  So the short answer is: a) I don't remember and b) if you remove it, do any of the unit tests break?   The pattern matcher is very heavily driven by unit tests.  If you don't break one, then it is a safe change.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/9206772/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/9208716", "body": "Sorry I was long-winded, I wanted to get the point across.\n\n... and what perfect timing: William Ma just created a pull  request for sureal code that defines new callbacks that allow WordNode and NumberNode  to behave as if they were variables.  This is because he wants to ... well, I did not try to review if his use was in fact the best or the easiest way ... but it seems legal.  He is NOT using that code with BindLink, and so this code would not be triggered. \n\n(It is almost surely the case that there is some equivalent bindlink to what he is trying to do, but that bindlink is probably much more verbose than what he came up with. That's sort-of the problem with these model-theoretic, type-theoretic approaches: there are many ways to do the same thing, and some are more verbose than others.  I have not yet discovered a good way to tell apart good and bad usage.)\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/9208716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/9319041", "body": "Well, but that statement isn't true!  It is plausible that, during node_match, one might want to adjust, for example, the AV or the TV of either node.    I cannot think of a good example, but here is a hokey one: while doing reasoning, we want to keep track of statistics of which atoms are \"hot\", i.e. are frequently explored, but then are never matched in the final answer.   In this case, you would use a CountTV type, and increment the count by 1 on every call to this function.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/9319041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/9804606", "body": "If you change the value, it forces a rebuild of the container.   Otherwise, apt-get update, below, will not not fire, and the old, cached result will be used.  Which means no security updates, no patches, fixes.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/9804606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/9804617", "body": "Oh, and I see that an apt-get upgrade is missing. I'll add that now.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/9804617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/9804643", "body": "the point is: you change the value ONLY when you want a new rebuild of the container. Otherwise, you don't change it.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/9804643/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/10738155", "body": "Curtis, this is technically wrong: autogenerated files should never be written to the source directory.  The buildbot is supposed to be setting the source directory as read-only, so that during build, the writing of files to source dirs is prohibited... \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/10738155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/10944663", "body": "Google tells me that the error is due to a recent change in binutils, it no longer attempts tto resolve all symbols when creating a shared lib. The work-around is to add this to the link line:  `-Wl,--copy-dt-needed-entries`  I added this to moses/CMakefile and it seemed to fix  the previous incarnation of this problem.  May need to add it to cogutil as well..\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/10944663/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/10997518", "body": "thanks Nill!\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/10997518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/14549834", "body": "Hi Shujing,\n\ncould you push this to your own git repo branch, instead of pushing to the main opencog repo?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/14549834/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/14633659", "body": "hi @rodsol  you were earlier contradicted by @AmeBel  who says its a temporary thing until something else changes ..!?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/14633659/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/15149715", "body": "You realize that OAC was removed from opencog several months ago? You are working on dead code! \n\nMaybe that's OK and its intentional, but it won't be possible to merge this code.\n\nThis was not my decision; I did  not ask for this or encourage it or anything.  Ask Nil & Ben for details.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/15149715/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/15149750", "body": "Specifically, embodiment was removed in pull req #1767 on 10 Sept 2015 as a follow-up to issue #1766 \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/15149750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/15929886", "body": "I don't get it. This change is completely wrong, that is not where the modules are installed.  `ls -la /usr/local/lib/opencog/`  does not show any subdirectory called cogserver!\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/15929886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/15929896", "body": "I mean, how are you testing this stuff?    I can't even imagine how this could ever have worked ... is this a docker thing?  Do you ever test outside of docker?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/15929896/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/17278178", "body": "What a mess.  The root error sis this: `cog-evaluate! ((DefinedPredicateNode` -- i.e. a scheme list was passed to cog-evaluate.\n\nTwo fixes are needed: first, cog-evaluate should check what it gets, and complain if its passed something wrong. Next, whatever passed it the list should be fixes to pass it the car of the list, or to use map.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/17278178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/17278375", "body": "Ugh. I take back what I said, `cog-evaluate!` does check its arguments; I can't quite tell what path lead into the above mess. \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/17278375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/22150208", "body": "I removed these because they are junk; there are no config paramters that use this. Please don't reinstate them!", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/22150208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/22150214", "body": "I removed these too, because they are not used anywhere.  Since you don't use these for the pattern miner, please do not reinsert them!", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/22150214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/22150371", "body": "The opencog config file has been deprecated many years ago, and is going to be completely removed soon. You should not be adding any new config parameters to it. \r\n\r\nIf you need to have configureable values to make your code run, place them into the atomspace as atoms.  This has multiple advantages over the config file:\r\n\r\n1) the parameters can be adjusted at run time. By contrast, changes to the config file require a total shutdown of the software system, followed by a restart, and possibly huge amounts of wasted CPU time to recover state.\r\n\r\n2) the atomspace parameters can be saved in the SQL database, allowing different datasets to be saved together with the config parameters that generated them.\r\n\r\n3) config files are a fundamentally bad idea, since forever. This is widely known among professional programmers, and you can google weblogs that describe the reasons why.   There have been many technologies invented over the years to avoid config files. These include the microsoft registry, the Gnome dconf syubsystem, the invention of tcl and guile as extension languages.  All of this tech was invented 20-30 years ago to avoid the horrors of having config files.   Learn from the past. Avoid config files.", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/22150371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/22150445", "body": "I wil ask again: please please please convert this API so that it does not use strings, ints and booleans!  All scheme API's should use atoms as their API, exclusively.  Using strings, ints, booleans causes serious difficulties for other users, and basically makes the scheme API ... unusable.   Don't do this. Use atoms instead.  Opencog is about atoms, lets use atoms!", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/22150445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/22218222", "body": "Hmm... UREConfigReader still makes me a little uncomfortable, because it still comes from, still reinforces a config mindset: that somehow, configs are a \"good thing\". They're not: having lots of configs is a symptom of bad design, of poorly thought-out API's, of an incomplete understanding of the problem.  \r\n\r\nNow I realize, its hard, almost impossible to not have configs: they are an excellent way for the *programmer*, the software designer, to explore different possibilities. But in the long run, if something is important, it should be part of the API, and not in a config. And if its not important, it should have some default value, where it's stupid to change that default.\r\n\r\nSo I want to get away from this style of thinking in terms of configs. They're a kind of ball-and-chain, non-functional dead weight.", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/22218222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/22936637", "body": "The code wouldn't compile. ", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/22936637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/3269707", "body": "I think this all looks pretty good, although here, perhaps you want to try to see if $GITROOT/build exists, and use that?\n\nI'm not sure, maybe that is a bad idea, but that is where my build dir is. ...\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/3269707/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/3274303", "body": "Yes, fine.   I just thought I'd mention this.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/3274303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5090675", "body": "Is this what is saving all the RAM? i.e. instead of having the type tree as part of the object, you just generate it on the fly when needed. and then discard when done?  If so, it would be nice to add a note to this method to say this. (I suppose I could do this) \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5090675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5090789", "body": "I'm adding this kind of comment now. I notice that CTable still keeps a type tree as part of the object, maybe you want to change that too?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5090789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5091187", "body": "I know this sounds crazy, but ... once, long ago, I put a print statement into \"tokens.size()\" (i.e. in the method being called to exit a loop)  and I found that it was being called _every time through the loop_.  I think the compiler is assuming that the method has side effects (i.e. not that the size is changing, but rather, that perhaps size() doing i/o or setting/releasing locks, counting something in some static data member, taking semaphores, whatever -- side-effects)  and so the compiler calls size() every time through the loop.  As a result I now have this strange habit of writing  size_t arity = thing.size(); for (... ; I< arity; i++) ...\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5091187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5091369", "body": "What is a \"Dense Table\" ?  This method is for reading an ordinary CSV table, right?  If so, then a better name for this would be istreamTable_parallel or something like that.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5091369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5092513", "body": "WTF, Nil, how do you set \"the largest floating point number\" from the ascii command line?  \n\nn/m\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5092513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5099703", "body": "oh, duhh, thanks\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5099703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5099787", "body": "Hmm. Now that you mention it, I think perhaps there is a gcc pragma (or ((attribute))) that does this, too. I don't think its called \"pure\"  The XLC compiler had a pragma for this for decades.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5099787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5872607", "body": "This is the wrong place for new PLN links; they should go into a PLN module, and not into the core.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5872607/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5980784", "body": "Above you changed int to std::size_t and that would also be the best fix here too.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5980784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5980865", "body": "bettter fix is to just remove this line completely\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5980865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5980884", "body": "ditto -- just remove this line\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5980884/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5980896", "body": "just remove zz\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5980896/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5981729", "body": "Personally, I like it a lot better when the subroutine documentation is in the .cc file instead of the .h file.  Here's why:\n\n-- For doxygen, it doesn't matter whether its in the .cc or the .h  (right?)\n-- When fixing bugs, and doing maintenance, one spends almost all the time reading the code in the .cc file. It is inconvenient to have to also open a second file (the .h file) and read that too.  Its just nice to have everything in one place.\n-- When trying to understand the API (the methods) provided by a class, its much nicer to have a small, compact list of methods one can quickly skim, instead of a big giant .h file that one has to carefully read. (e.g. to make sure one didn't accidentally skip over the one method you were hoping to find.)  Its a cognitive-overload thing: its just easier to read a short list of methods, than something that is 98% documentation and 2% method signatures.\n-- I know that this is NOT the convention in commercial software, where they put docuementation in the .h files. But commercial software is not open source, you don't get the .cc file, and so of course they have to put it in the .h file. But that doesn't mean its better.\n\nFor this case, you don't have to change it back, we can leave it alone, I guess, but in the future, don't do this.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5981729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5982507", "body": "All of the English-speaking developers are putting documentation into the .cc files.  Almost all of the Chinese-speaking developers are not writing documentation at all.  Most of the documentation in the existing code base is in the .cc files, so moving stuff to the .h's would boil the ocean. I really really don't want to see this kind of movement happening.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5982507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5996714", "body": "Is this supposed to be some temporary scaffolding code that will later be removed? Because the indentation to it seems totally crazy ... \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5996714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5996731", "body": "Indentation is crazy here too ... In most files, indentation is four spaces, not not zero or two or three;  (some files use tab indents but these are rare)\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5996731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/6064648", "body": "What's wrong with using the /doc subdir?  Everything else is in subdirs ... \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/6064648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/6100622", "body": "Please be careful not to check in auto-generated files. (I just removed this one from git)\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/6100622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/6367092", "body": "Hmm, but shouldn't this be CONFDIR, with is presumably /etc and not /lib ?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/6367092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/6367108", "body": "This deletion can't possibly be correct: the main opencog.conf file does not have database login credentials for TEST_DB_NAME ... right? And the test can't actually pass unless you set these credentials up. \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/6367108/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/6367114", "body": "Why the copying? Can't we just have the tests access these files in the source location?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/6367114/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/6367147", "body": "Should probably be /usr/bin/env python so that it works on multiple distros\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/6367147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/6367156", "body": "This is preventing this pull request from being auto-merged, since it conflicts with the other pull request...(which was merged already)\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/6367156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/6367708", "body": "Well, the unix file hierarchy standard says that config files should go into /etc and libraries go into /usr/lib    We should probably create an etc in the source tree, and move the config files there. It probably OK to leave the CMake stuff in /lib, it is not installed anyway.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/6367708/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/6367714", "body": "I dunno. The primary issue is that the DB test will fail until the user actually sets up postgres and odbc and then edits the config file to add the correct username and passwd.  This is kind-of a hassle, since it happens outside of the rest of opencog.   I can't think of any clever way to automate this.  So I'm not sure quite what to do about it.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/6367714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/6367725", "body": "Oh, I figured that a cleaner/easier change would be to change the configure code to look for these files in the source directory. But I'm not sure I really care. \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/6367725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7113454", "body": "So, what happens when you run the tests? Is this passing for you?  \n\nI tried this myself, and found that this test failed. I did not try to debug it to see why.  There does not seem to be any easy way of running this test from the command line, and whatever errors its generating are thus rather opaque ... \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7113454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7171273", "body": "PLN link types should almost surely go into the PLN atom types file, and not here.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7171273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7445452", "body": "file seems to be missing a final carriage return/newline\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7445452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7445480", "body": "this one is missing a final newline as well, maybe all the files are. perhaps this is something your editor is doing?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7445480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8050372", "body": "I'd be happier if this and related functions were removed.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8050372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8085749", "body": "Well, I think that there is a class or function called STIAboveThreshold  somewhere, which is probably not used anywhere any more ... so that should get removed too.\n\noh, wait .. I just found filter_InAttentionalFocus but that does not seem to be used anywhere, either ... and there's LTIAboveThreshold\n...\ndamn, looks like there are unit tests that use these, but whatever its testing is probably pointless, so should be removed. Or maybe we should move the code to the tests directory.. Hmmm.  Cleanup is sometimes painful.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8085749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8105080", "body": "Yes, anything marked deprecated should almost surely be removed.\n\nRe; filtering, I'm not sure what you are asking. I suppose that having a filtering api is an OK idea, even though there are few users.  I suppose that having some pre-defined filter predicates is an OK idea, so maybe  STIAboveThreshold could stick around.\n\nHow to 'combine filters' is a trickier question. I googled that a few months ago, found answers on stack-exchange, which seemed to be that \"combining filters is not supported in c++11, but you can use these wild-n-crazy BOOST stunts to do the same thing and someone really should put it in the c++14 standard...\" and it seemed to me that dicking with boost to create something that no one is going to use anytime soon was maybe a poor idea ... \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8105080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8105262", "body": "On the other hand, by failing to provide an 'elegant' solution for combining filters, some of those getHandles calls are wasteful, in that they have to copy... but so what... its not obvious that this is an actual bottleneck that needs urgent fixing.  Life is short, code important things first. \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8105262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8241561", "body": "a better name for this file would be \"example\" or \"demo\" .. its not part of the core system\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8241561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8241656", "body": "long term, its probably better if library files didn't also have main sections. Yes, they're great for quick tests, but can be confusing in the future.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8241656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8242048", "body": "what's the difference between \"generic.py\" and \"generic_formulas.py\" ?  What kind of code is in which file?  Neither are really 'generic'; the generic_formulas seems to contain the allen interval algebra .. I'm not sure what this contains. Some plotting functions? If so, rename to 'plotting.py'.. try to find a more descriptive name than 'generic'.\n\nFWIW:\nfrom Phil Karlton:\nThere are only two hard things in Computer Science: cache invalidation and naming things.\nhttp://msmvps.com/blogs/jon_skeet/archive/2009/02/27/what-s-in-a-name.aspx\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8242048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8242152", "body": "per other line notes, a better name for this file would be \"allen_interval_formulas.py\"  or maybe just \"allen_interval.py\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8242152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8242247", "body": "oh, I just saw \"create_sample_file\" -- would be better to move all example code to some other, examples file.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8242247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8242260", "body": "yeah I was gonna ask about unit tests .. \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8242260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8242819", "body": "If you want to talk about this with the other python users, go ahead; I don't much care, other than that all routine names and file names should be as descriptive as possible, so that one could kind of guess what's in there without having to open the file and actually read it.  For this reason, names like \"classes.py\" and \"generic.py\" have got to be the very worst possible names one could ever use -- they are absolutely poisonous to understanding code.  I don't know what projects you've seen that use names like that, but I would suggest that you stay away from anyone who thinks like that; you'll catch some mental disease. Its like having a library of books, and each book is called \"book\".  Yuck.\n\nJust pick a name that's descriptive, and if that takes 5 minutes or 10 minutes or 1/2 hour, that's fine. Naming things really is one of the very hardest things in comp sci.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8242819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8250597", "body": "Yikes!  Well, that's why ffx is slow. 2.4 GB is pretty outrageous. Looking at the code, it looks like you generate 100^3 == 1 million events, each of which is 2.4 KBytes. that seems wrong -- a single even should not use 2.4KB, since a single event is just four float pt numbers. And generating a million ... seems excessive.  I don't understand what the point of this is, but its certainly rather far from a minimal solution.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8250597/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8392336", "body": "Uhhh .. there was a recent discussion in another bug .. I thought you were a part of it?  It was talking people over 24 hours to load the atomspace with some dump of some game state ... it was taking me half an hour or more to load something that normally took a minute or less.  Turned out this was the problem ... \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8392336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8392409", "body": "Yeah .. you were the one that complained: issue #403 you said:\n\n> I tried loading https://github.com/opencog/test-datasets/blob/master/conceptnet/conceptnet4.scm and after 8 hours, it still hadn't finished.\n\nAnd I replied that it was this module. Did you not even try this?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8392409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8594413", "body": "Oh, this probably should not have been deleted: the point is that databases can be opened and closed by hand, so that you can open one load, close it , open another store there.  the readme should say something like this somewhere.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8594413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8654377", "body": "what version did you test on? Is signals2 in version 1.46 stable?\n\nUbuntu 12.04 LTS has 1.48 and 1.53 in it; \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8654377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8834090", "body": "cough cough .. doesn't this break the build? Its in direct conflict with line 30 of opencog/embodiment/AtomSpaceExtensions/atom_types.script\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8834090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/9025545", "body": "Ahh, I think the long-term correct solution is to fix the python module so that it does try to access atom types in it's ctor.  Because, right now, by re-ordering the these lines, you've only made the embodiment types visible, but the others remain hidden -- e.g. the viterbi types, the space-time types, because those all get loaded in alphabetical order.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/9025545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/9450410", "body": "So .. what's \"kif\" ?? \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/9450410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/9450473", "body": "As of very recently (a week or two ago), the default TV in opencog, if no TV is given, is now \"true, with confidence of zero\"  i.e. (stv 1 0)   Its used to be \"false with confidence of zero\"  (stv 0 0) but that seemed like a bizarre choice so I changed it (while doing other TV things).  So FYI ... \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/9450473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/9468251", "body": "On 5 February 2014 09:26, bgoertzel notifications@github.com wrote:\n\n> In tests/python/test_pln/scm/sumo/railway.kif:\n> \n> > @@ -0,0 +1,9 @@\n> > +(=>\n> \n> See http://www.ksl.stanford.edu/knowledge-sharing/kif/ I believe the SUMO\n> knowledge base comes in KIF format among others ... KIF is nice and easy to\n> parse...\n\nUnexpected.  The  KIF user manual was last updated in 1992; the last post\nto the KIF mailing list was 1994.   Yes, its \"easy to parse\", that's what\ncaught my eye.\n\n--linas\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/9468251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/9468523", "body": ">  See http://www.ksl.stanford.edu/knowledge-sharing/kif/ I believe the\n> \n> > SUMO knowledge base comes in KIF format among others ... KIF is nice and\n> > easy to parse...\n> \n> Unexpected.  The  KIF user manual was last updated in 1992; the last post\n> to the KIF mailing list was 1994.   Yes, its \"easy to parse\", that's what\n> caught my eye.\n\nTrivia: among the very first posts to the kif mailing list is Peter Norvig.\n Among the last is John Sowa and John McCarthy.\n\nThe \"blow away\" thread is about lack of funding for AI. :-)\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/9468523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/9809711", "body": "standard naming convention for anything that has side-effects in sheme is to put a bang at the end of the name.  Since setters are side-eefects by definition, this should get a bang:\n\ncog-set-af-boundary!\n\nSince everything else is a getter, you don't actually have to say \"get\", so the getter should be named cog-af-boundary. \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/9809711/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/9711535", "body": "concept_node is used only once here.  The code would be easier to read and understand if you just wrote it out directly:  (InheritanceLink  new_concept  (ConceptNode concept))\n\nLikewise for the other cases.  You do gain a small amount of cpu savings from the memoization of new_concept, and perhaps its nice to be able to easily see that its used in two places...\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/9711535/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/9711583", "body": "Please supply a one or two sentence description for the various rules here ...\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/9711583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/9711911", "body": "This is insanely inefficient!  Once you have more than 10K or 100K atoms, got-get-atoms will return all of them, and this will take minutes to run!\n\nThat atomspace keeps a special index for this, so that the C++ code can ask and get an answer immediately.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/9711911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/9712264", "body": "This code will work just fine. However, its written in a proceedural style. Most of the fun of programming in scheme is using the functional style -- this routine could easily be made tail-recusrive,  \n\nNote that tail-recursion is optimized in scheme: if the last statement in  a function returns a value, then the tail-recursion will be converted into a loop automatically by the compiler,  and is likely to run as fast or faster than hand-written loops.\n\nYou do NOT have to change this function, its just fine.  But you should practice tail-recursion enough so that it feels faster and simpler than writing a loop.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/9712264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/9712545", "body": "The scheme functions that do this are  called cog-node and cog-link  So you can replace the entire function above by a one-liner:\n\n(define (check-name? node-name node-type) (null? (cog-node node-type node-name)))\n\nIf the atom already exists, cog-node will return it. If it does not yet exist, it returns null.\n\n(notice the argument order is reversed: type always comes before name)\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/9712545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10007804", "body": "Don't use define\\* and don't use optional. Its too complicated. And don't use set!  As long as you use set! its still has side-effects.  you've got almost the right idea, below is a simpler way of doing it. \n\nAnyway, look at  http://mitpress.mit.edu/sicp/  ... its free to download.  Reading the first few chapters of this book can be very eye-opening, it broadened my horizons with regard to what software really is.\n\nThe usual style looks more like this:\n\n```\n   (define (rand-str len)\n     (define (get-rand-char) (...whatever...)) \n     (define (helper len  str)\n        (if (> len 0)\n            ; if len is non-zero, call helper:\n            (helper \n                (- len 1) ; shorten len by one.\n                (string-append str (get-rand-char))  ; lengthen string by one.\n            )\n            str  ; return str if len is zero.\n        )\n     )\n     (helper len \"\")  ;; call the helper function\n   )\n```\n\nThis should work. There are surely more efficient ways to do this, since string manipulation is such a common thing. But the above works, so if its not a bottleneck, its good enough.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10007804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10195971", "body": "... which is pretty useless for anything practical...\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10195971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10195976", "body": "the framenet code was removed; it never worked very well.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10195976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10195991", "body": "The wall serves to anchor the root of the sentence; its more than just question inversion.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10195991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10304360", "body": "You should not nest parallel loops. You don;'t need to create 144 threads ... \n\nFor efficiency, its best if the inner loop is a regular loop (so that each thread in the outer loop has a fairly large chunk of work to do.)\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10304360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10304483", "body": "This seems to duplicate the code above.... it would be great if we didn't have duplicated code.  Running the benchmark with -j1 should give equivalent results (for -j1, I believe that no threads will be created)\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10304483/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10490077", "body": "Simple truth values do not have a count, they only have a confidence. Only count truth values have a count!\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10490077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10490443", "body": "You're confused :-)  Its confusing.\n\nSimple truth values only have a confidence. Now, due to some historical accident, they are internally represented as a reciprocal, specifically, they are stored as (800.0/confidence) inside the C++ class.  However, this is done in a private member of the class and is not visible to the outside world:  Instead, one only has the public methods.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10490443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10490556", "body": "I mean, the point is that if you want to do counting, you MUST use the CountTruthValue. The SimpleTruthValue cannot work for counting -- it cannot store a count value that won't get fubared every time the confidence changes,.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10490556/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10490735", "body": "More generally, we really need a design that also allows for \"fuzzy truth values\", where the second and third values are neither confidence nor count, but something else again.    And, for Bayesian probability, we really need something that holds the log-probability... right now, we are using either simple or count rturh values for these things, but this is getting increasingly creaky and dangerous, and needs some kind of rework.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10490735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10491040", "body": "... and the thing that is blocking this work is that the C++ base class has three methods: getMean(), getConfidence(), getCount()  when we really need getMembership(), for fuzzy logic, getLogProb() for probability, etc.  If there was something like this, then SimpleTruthValues would no longer have a getCount() method. \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10491040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10491277", "body": "Jeez, Cosmo. \n\nI just got done esplainin.  The count is a mirage.  Its private. Its not really there.  There's only a confidence.  There should not even be a getCount() method on SimpleTruthValue; its only there because in C++, base class inheritance is fucked up, and in C++, you have to put the methods into the base class, even if it doesn't make sense for them to be there.  This is the only reason why there is a count in the SimpleTruthValue.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10491277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10491421", "body": "yep. in the code, k is 800.  There are only two numbers, not three, in SimpleTruthVlaues.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10491421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10491771", "body": "Why are we arguing? This is stupid. You quoted the correct paragraphs from the PLN book, and you're still arguing. Read the part that you quoted. Compare it to the code. You will see what I mean.\n\nThere are only two numbers, there are not three!\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10491771/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10493055", "body": "For the statistics that I do, I need to have a raw, integer count (or at least, usually-an-integer), and a log-probability.  To store the raw count, I invented the CountTruthValue.  It was minimal, and I was taking baby-steps at the time.\n\nOne of the issues is that the TruthValue::merge() method does this:   if (other->getConfidence() > getConfidence()) {...}   which means that if you try to add an atom to the atom space, but its already there with a _different_ confidence, the confidence (and thus the count) will change in an unexpected and perhaps surprising way.\n\nThis kind of merging is perhaps correct, _when_ that's what you want .. and its probably what PLN wants.  But, for other things, it can really mess things up, esp when the confidence/count is being used to hold something else, something unrelated.  In particular, its probably wrong for fuzzy truth values, and its definitely wrong for probabilities.\n\nI think the solution is to move the merge() method into a truth-value-specific method, so that different truth value types do different things depending on what they are ... but its not clear what the best way is, to do all this. \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10493055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10493343", "body": "And I just skimmed Nil's message that you posted ... it seems that he wants yet a third behaviour, where counts get converted into means in some way that's appropriate for what he's doing.\n\nThis is the mess: everyone wants to store 2 or 3 or 4 numbers, give them similar-but-slightly-different meanings, and have them be converted to one another using various application-specific formulas.  \n\nIts not clear how to set this up so that everyone gets what they need.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10493343/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10493663", "body": "BTW,\n\nTo solve Nil's problem, I invented the AnyNode.  I use it like this:\n\nEvaluationLink  tv\n   BlahNode\n   ListLink\n       BlahBlahNode\n       AnyNode\n\nThe EvaluationLink tv then holds a count which is a sum over all other EvaluationLinks that look like this, with a different Node where the AnyNode is.   This, to me, seems to be a simpler, better solution, than the one that Nil was proposing -- in particular, it does not require inventing a new truth value type.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10493663/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10528097", "body": "There already exists a CountTruthValue which currently  is always uses as a \"ProbabilityAndCountTruthValue\".\n\nI propose renaming SimpleTruthValue to PLNTruthValue, renaming CountTruthValue to ProbabilityTruthValue, and creating a brand new FuzzyTruthValue.\n\nAny suggestions for what the semantics of any of these should be? That is, for example, I don't know how to convert a ProbabilityTruthValue into a PLNTruthValue .. does this matter? Would anyone care?  (so e.g. the probability of an obscure word would be very low; this does not imply that its PLN-stength or confidence is low).\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10528097/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10635915", "body": "missing newline\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10635915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10635921", "body": "Can you add a header and comments indicating that this is a demo, rather than part of the core code?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10635921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10635923", "body": "This seems to be a demo, too.\n\nAdd words that describe what case1, case 2 are, and what they're supposed to show.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10635923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10635942", "body": "There is not a single line of comments in any of this code ... please, please, please provide documentation, comments.  Its going to be very hard for anyone in the future to understand what you did.  And, when people don't understand what some block of code does, they usually end up re-inventing it or re-writing it ... which means that your code dies.  If you want  your work to live on long after you are done with it, you should add comments, documentation.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10635942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10761241", "body": "never mind, I didn't read the full patch\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10761241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/11798031", "body": "any tomes? or any atoms?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/11798031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12604287", "body": "1) it doesn't behave like the default: it sets a tv, which the default does not do.\n2) the first solution found is ... hacky.\n\nIn the long run, we'll need something that cuts off search much earlier, during node or link or clause matches, if a grand-total tv or av gets too low. \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12604287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12604358", "body": "could you rename this to SingleUTest?\n\nwe've got have a dozen things that test Bind already, this simple name is confusing.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12604358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12605114", "body": "Oh,  I see what you're doing.  You copied the code from the \"CrispImplicator\", not the default implicator.\n\nThe Crisp one assumes that truth values actually matter. The other callbacks actually look at truth values, and do an accept/reject based on those -- this is implemented in CrispLogicPMCB.   Here' \"Crisp\" means it assumes all TV's are zero or 1, and uses crisp boolean logic.  Thus, at the end, when its done, it explicitly sets a crisp TV for the final generated atom.\n\nYou almost surely don't want this -- its gonna clobber the TV on whatever it is you are doing.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12605114/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12605167", "body": "Per notes above: don't set the TV here, this will almost surely scramble your results in unhealthy ways.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12605167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12960348", "body": ":-)\n\nDoes it have a noticable difference in execution time?  I suspect very little, as most cpu time is wasted elsewhere.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12960348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13022129", "body": "On 22 May 2014 19:34, Cosmo Harrigan notifications@github.com wrote:\n\n> It would also be interesting to figure out if there is some way to avoid\n> the overhead of \"getting into Scheme\" over and over, as you mentioned:\n> \n> there is some X number of microseconds performance penalty getting into\n> scheme, and out again\n> \n> while still being able to use Scheme.\n> \n> Yes. OK.   Looking at my own notes, I see that compiling can make a huge\n> difference (see benchmark/diary.txt)\n\nThere are two costs: calling C++ from scheme, and calling scheme from C++.\n The first is fast -- about 2-3uS per call (on my rather now-old system).\n The second is very slow ... 150-300uS to enter & exit the interpreter\n(python is comparable) (there seem to be a lot of cache-contention effects\nmaking it hard to measure).\n\nPerhaps having a thread holding the scheme evaluator in 'standby' would do\nthe trick.  Thread-switches in linux seem to be about 5uS .. so this would\nbe a huge improvement.   Hmm.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13022129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12911998", "body": "in principle, yes, (the above is 'almost correct') but obviously there's a bug above. Best open a bug on the relex bug tracker, and either @ruiting or @rodas or @kasun would need to fix it.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12911998/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13264127", "body": "The below is due to the partly-finished LG verb-wall connector work, which\nis prioritizing an incorrect linkage as the most likely.  I'm trying to fix\nit now.\n\n> @ruiting https://github.com/ruiting, gerunds evoke the same relation\n> _to-do and are thus correctly treated the same as infinitives, right? In\n> some sentences, e.g. \"I like eating bass\", the gerund is misinterpreted as\n> an adjective. Is there an easy way to resolve this?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13264127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13094823", "body": "> Okay, so this binds the variables in the expression, as described here http://wiki.opencog.org/w/AverageLink; can the AverageLink be passed to the pattern matcher?\n> \n> It probably shouldn't be.  Right now, AverageLink, ExistsLink, ForAllLink\n> all derive from BindLink.\n\nI've been thinking of creating a PatternLink (dervied from BindLink)  and\nalter the pattern matcher to only accept PatternLink's.\n\nBTW, you could perhaps play the following interesting game:  If the pattern\nmatcher sees an AverageLink, then, when it gets a match, it would alter the\nTV on the AverageLink using the accepted formula, instead of doing its\nusual output.\n\n(that is, it would accumulate truth values for all the matches, take the\naverge tv, and set it on an averageLink.)\n\nThis might not be the best way to do averaging, but it is a way...\n\n--linas\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13094823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13337155", "body": "In that case, it could be great if a few sentences were added that said\nthat: something like \"the below contains a nested use of 'I' which seems\ncomplicated, but all the alternatives are even more complicated\n(because...)\"\n\n> Ruiting and I thought about this for a while , and the only alternatives\n> we found were more complicated in other ways, so we settled on this... ben\n> \n>  Is there an alternate formulation for this expression that doesn't\n> involve a second nested \"I\"?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13337155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13475525", "body": "+1 on the comments.\n\nI am reminded that in certain parts of the linguistics community, there are\nactive efforts to try to carefully characterize all English verbs, as to\nwhat subjects, objects, agents, patients etc. they can all take. Current\napproaches seem to involve long, tedious, laborious, manual processes. At\nleast one such project uses phone apps (games) where the user plays games\nwith non-sense sentences; researchers gather the game data to figure out\nhow verbs work.\n\nSo I'm thinking that one of the sooner efforts we'll have to do, after the\nsummer is over, (after r2l+pln sort-of works) is to try to automatically\nlearn how to interpret verbs, specifically, to tell apart the 'Ben eats\nworms' from 'Ben appears ridiculous' cases. (but not from games, just from\ntext+embodiment)\n\nI claim again that this should be doable via various machine learning\ntechniques, but it won't be easy, but we should focus on it because we\ncan't afford to hand-build detailed verb-use dictionaries.\n\n--linas\n\nOn 4 June 2014 19:48, bgoertzel notifications@github.com wrote:\n\n> Sebastian, You raise a good point regarding the use of frame-based versus\n> non-frame-based representations.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13475525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "dbl001": {"issues": [{"url": "https://api.github.com/repos/opencog/opencog/issues/2902", "title": "Test fail on Ubuntu 14.04LTS", "body": "1. from github, cloned latest versions of: cogutils, atomspace, moses, opencog\r\n2. removed zeromq 4.2.1 \r\n3. build boost 1.5.4 from source (git clone --recursive https://github.com/boostorg/boost.git)\r\n4. built cogutils, atomspace, moses, opencog.\r\n\r\n```\r\n-- Boost version: 1.54.0\r\n$ cmake --version\r\ncmake version 3.2.2\r\n$ gcc --version\r\ngcc (Ubuntu/Linaro 6.3.0-18ubuntu2~14.04) 6.3.0 20170519\r\n\r\n[100%] Running tests...\r\nTest project /home/ubuntu/opencog/build/tests\r\n      Start  1: AttentionParamQueryUTest\r\n 1/20 Test  #1: AttentionParamQueryUTest .........   Passed    0.04 sec\r\n      Start  2: CogServerUTest\r\n 2/20 Test  #2: CogServerUTest ...................***Exception: SegFault  2.08 sec\r\n      Start  3: ShellUTest\r\n 3/20 Test  #3: ShellUTest .......................***Exception: SegFault  0.36 sec\r\n      Start  4: AgentUTest\r\n 4/20 Test  #4: AgentUTest .......................***Exception: SegFault  0.34 sec\r\n      Start  5: AnaphoraTest\r\n 5/20 Test  #5: AnaphoraTest .....................***Failed    0.87 sec\r\n      Start  6: MOSESPLNSynergyUTest\r\n 6/20 Test  #6: MOSESPLNSynergyUTest .............   Passed   33.38 sec\r\n      Start  7: PLNRulesUTest\r\n 7/20 Test  #7: PLNRulesUTest ....................   Passed    0.40 sec\r\n      Start  8: PythonPLNTest\r\n 8/20 Test  #8: PythonPLNTest ....................   Passed    0.79 sec\r\n      Start  9: OpenPsiUTest\r\n 9/20 Test  #9: OpenPsiUTest .....................***Failed    1.63 sec\r\n      Start 10: OpenPsiImplicatorUTest\r\n10/20 Test #10: OpenPsiImplicatorUTest ...........   Passed    0.23 sec\r\n      Start 11: PythonModuleUTest\r\n11/20 Test #11: PythonModuleUTest ................***Exception: SegFault  0.36 sec\r\n      Start 12: PyEvalUTest\r\n12/20 Test #12: PyEvalUTest ......................***Exception: SegFault  0.35 sec\r\n      Start 13: CythonServer\r\n13/20 Test #13: CythonServer .....................***Failed    0.70 sec\r\n      Start 14: CythonStatistics\r\n14/20 Test #14: CythonStatistics .................   Passed    0.72 sec\r\n      Start 15: RestApiTest\r\n15/20 Test #15: RestApiTest ......................***Failed    0.75 sec\r\n      Start 16: BlendingTest\r\n16/20 Test #16: BlendingTest .....................***Exception: SegFault  0.95 sec\r\n      Start 17: DimEmbedUTest\r\n17/20 Test #17: DimEmbedUTest ....................***Exception: SegFault  0.32 sec\r\n      Start 18: StatisticsUTest\r\n18/20 Test #18: StatisticsUTest ..................   Passed    0.01 sec\r\n      Start 19: PatternMinerUTest\r\n19/20 Test #19: PatternMinerUTest ................***Exception: SegFault  0.49 sec\r\n      Start 20: PatternIndexAPIUTest\r\n20/20 Test #20: PatternIndexAPIUTest .............   Passed    0.47 sec\r\n\r\n40% tests passed, 12 tests failed out of 20\r\n\r\nTotal Test time (real) =  45.28 sec\r\n\r\nThe following tests FAILED:\r\n\t  2 - CogServerUTest (SEGFAULT)\r\n\t  3 - ShellUTest (SEGFAULT)\r\n\t  4 - AgentUTest (SEGFAULT)\r\n\t  5 - AnaphoraTest (Failed)\r\n\t  9 - OpenPsiUTest (Failed)\r\n\t 11 - PythonModuleUTest (SEGFAULT)\r\n\t 12 - PyEvalUTest (SEGFAULT)\r\n\t 13 - CythonServer (Failed)\r\n\t 15 - RestApiTest (Failed)\r\n\t 16 - BlendingTest (SEGFAULT)\r\n\t 17 - DimEmbedUTest (SEGFAULT)\r\n\t 19 - PatternMinerUTest (SEGFAULT)\r\nErrors while running CTest\r\n\r\n\r\nubuntu@ip-10-0-1-107:~/opencog/build$ cmake ..\r\n-- The C compiler identification is GNU 6.3.0\r\n-- The CXX compiler identification is GNU 6.3.0\r\n-- Check for working C compiler: /usr/bin/cc\r\n-- Check for working C compiler: /usr/bin/cc -- works\r\n-- Detecting C compiler ABI info\r\n-- Detecting C compiler ABI info - done\r\n-- Detecting C compile features\r\n-- Detecting C compile features - done\r\n-- Check for working CXX compiler: /usr/bin/c++\r\n-- Check for working CXX compiler: /usr/bin/c++ -- works\r\n-- Detecting CXX compiler ABI info\r\n-- Detecting CXX compiler ABI info - done\r\n-- Detecting CXX compile features\r\n-- Detecting CXX compile features - done\r\n-- Build type: Release\r\n-- Looking for include file opencog/util/cogutil.h\r\n-- Looking for include file opencog/util/cogutil.h - found\r\n-- Found CogUtil version 2.0.2 at /usr/local/lib/libcogutil.so\r\n-- CogUtil found.\r\n-- Looking for include file opencog/atomspace/version.h\r\n-- Looking for include file opencog/atomspace/version.h - found\r\n-- Found AtomSpace at /usr/local/lib/opencog/libatomspace.so\r\n-- AtomSpace found.\r\n-- Boost version: 1.54.0\r\n-- Found the following Boost libraries:\r\n--   date_time\r\n--   filesystem\r\n--   program_options\r\n--   regex\r\n--   serialization\r\n--   system\r\n--   thread\r\n-- Boost version 105400 found.\r\n-- Found Boost::program_options\r\n-- Found Boost::math\r\n-- cpprest was not found; Distributed version of PatternMiner will not be built.\r\nTo over-ride, make sure that the environment variable cpprest_LIBRARY is set.\r\nInstallation instructions: https://casablanca.codeplex.com/\r\n-- Found PythonInterp: /home/ubuntu/anaconda/bin/python (found version \"2.7.11\") \r\n-- GHC was found.\r\n-- Found PkgConfig: /usr/bin/pkg-config (found version \"0.26\") \r\n-- Found GTK3: gtk-3;gdk-3;atk-1.0;gio-2.0;pangocairo-1.0;gdk_pixbuf-2.0;cairo-gobject;pango-1.0;cairo;gobject-2.0;glib-2.0  \r\n-- Guile (2.0.9 >= 2.0.0) was found.\r\n-- Looking for dgemm_\r\n-- Looking for dgemm_ - found\r\n-- Looking for include file pthread.h\r\n-- Looking for include file pthread.h - found\r\n-- Looking for pthread_create\r\n-- Looking for pthread_create - not found\r\n-- Looking for pthread_create in pthreads\r\n-- Looking for pthread_create in pthreads - not found\r\n-- Looking for pthread_create in pthread\r\n-- Looking for pthread_create in pthread - found\r\n-- Found Threads: TRUE  \r\n-- A library with BLAS API found.\r\n-- Looking for cheev_\r\n-- Looking for cheev_ - found\r\n-- A library with LAPACK API found.\r\n-- link-grammar( >= 5.4.0) was not found. Make sure LINK_GRAMMAR_LIBRARY, LINK_GRAMMAR_INCLUDE_DIR and LINK_GRAMMAR_DATA_DIR are set.\r\n-- Link Grammar missing: needed for NLP.\r\n-- Found MOSES library: /usr/local/lib/libmoses.so;/usr/local/lib/libmoses_exec.so;/usr/local/lib/libcomboant.so;/usr/local/lib/libcomboreduct.so;/usr/local/lib/libfeature_selection.so\r\n-- MOSES was found.\r\n-- Find octomap lib OCTOMAP_LIBRARY-NOTFOUND\r\n-- Find octomath lib OCTOMAP_OCTOMATH_LIBRARY-NOTFOUND\r\n-- Octomap not found\r\n-- Found OpenGL: /usr/lib/x86_64-linux-gnu/libGL.so  \r\n-- OpenGL was found.\r\n-- Found these protobuf libs: /usr/local/lib/libprotobuf.so\r\n-- Found PROTOBUF: /usr/local/lib/libprotobuf.so  \r\n-- Protobuf was found.\r\n-- Found PythonInterp: /home/ubuntu/anaconda/bin/python (found suitable version \"2.7.11\", minimum required is \"2.7\") \r\n-- Python 2.7.11 interpreter found.\r\n-- Found PythonLibs: /usr/lib/x86_64-linux-gnu/libpython2.7.so (found suitable version \"2.7.6\", minimum required is \"2.7\") \r\n-- Python 2.7.6 libraries found.\r\n-- Found PythonInterp: /home/ubuntu/anaconda/bin/python (found version \"2.7.11\") \r\n-- Found Cython: /home/ubuntu/anaconda/bin/cython (Required is at least version \"0.19.0\") \r\n-- Cython ( >= 0.19.0) found.\r\n-- Python destination dir found: /home/ubuntu/anaconda/lib/python2.7/site-packages\r\n-- Found SDL: /usr/lib/x86_64-linux-gnu/libSDLmain.a;/usr/lib/x86_64-linux-gnu/libSDL.so;-lpthread (found version \"1.2.15\") \r\n-- SDL was found.\r\n-- SDL_gfx was found\r\n-- Found Intel TBB\r\n-- \r\n-- Valgrind Prefix: \r\n-- Found VALGRIND: /usr/include/valgrind  \r\n-- VALGRIND was found.\r\n-- VALGRIND devel headers found.\r\n-- Required version of ZeroMQ was not found. Make sure the ZMQ_LIBRARY environment variable is set.\r\n-- ZeroMQ was not found; the AtomSpace Publisher module, and the message system used by GUI monitor for OAC will not be built.\r\nTo over-ride, make sure that the environment variable ZMQ_LIBRARY is set.\r\nInstallation instructions: http://zeromq.org/intro:get-the-software\r\n-- Stack was not found. Haskell codes will not be built.\r\n-- The Haskell Tool Stack not found.\r\nfailed to create symbolic link '/home/ubuntu/opencog/build/opencog/scm//opencog/pln/meta-rules/predicate/conditional-full-instantiation.scm': No such file or directory\r\n-- Found Doxygen: /usr/bin/doxygen (found version \"1.8.6\") \r\n\r\nThe following components will be built:\r\n-----------------------------------------------\r\n   Attention        - Agents for attention allocation dynamics.\r\n   Blopex           - BLOPEX block eigenvalue solver.\r\n   Cython bindings  - Cython (python) bindings.\r\n   Dim. Embedding   - Compute dimensional embedding of the AtomSpace.\r\n   Doxygen          - Code documentation.\r\n   GTK Visualizer   - GTK3-based Atomspace Visualizer.\r\n   Python tests     - Python bindings nose tests.\r\n   Server           - The CogServer.\r\n   Unit tests       - Unit tests.\r\n   PatternMiner     - Pattern Miner.\r\n\r\nThe following components WILL NOT be built:\r\n-----------------------------------------------\r\n   REST Events      - REST Atomspace Event Publisher module.\r\n   SpaceTime        - 3D Space-Time object tracker.\r\n   Spatial          - Vizualisation of the 3D spacemap.\r\n   NLP              - Natural Language Processing.\r\n   Haskell codes    - Logic via Lojban.\r\n\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/2902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mjsduncan": {"issues": [{"url": "https://api.github.com/repos/opencog/opencog/issues/2888", "title": "newbie patternminer crashes", "body": "hi, i'm posting notes and debugging output of 3 pattern-mining runs i did on a set of boolean moses models generated from micro-array expression level data sets comparing 3 related groups of 50 subjects starting with ~ 40k features.\r\ni know the pattern miner code is in flux so i'm not sure how relevant this info is but at least it shows what newbie mistakes to look out for!\r\nin the first run i was inadvertently filtering out all the patterns so the pattern miner didn't have anything to process.\r\nin the first two runs i kept 1-gram patterns (`Frequency_threshold = 1`) so i suspect keeping this large set in memory contributed to the crash in the second run.\r\nin the 3rd run with `Frequency_threshold = 2` the binary didn't crash but appeared to hang while mining 6-gram patterns so the run was halted manually.\r\nafter noticing this warning output in the second run: `warning: _non_ordered_pattern: Fail to figure out the order of  two patterns!` i tried setting `enable_unify_unordered_links = true` but this resulted in an immediate segfault of the cogserver.\r\n\r\nthe summary of each trial write-up is copied below with debugging output in the linked txt files.\r\n\r\ntrial 1\r\n```\r\n## pattern miner test 1\r\nthe atomspace for mining consists of 3 sets of moses models translated as:\r\n\r\nEquivalence <1 1>\r\n    Predicate \"model set: model number\"\r\n    boolean combo model with gene/features as Predicates connected by AndLinks,   OrLinks, and NotLinks.\r\n\r\nfor each gene/feature there is a predicate definition:\r\n\r\nEquivalence <1 1>\r\n    Predicate \"gene symbol\"\r\n    Lambda\r\n        Variable $X\r\n        Evaluation\r\n            Predicate \"overexpressed\"\r\n                GeneNode \"gene symbol\"\r\n                Variable $X\r\n\r\nwhere $X is a sample from a the micro-array experiment analyzed by moses.\r\n\r\n```\r\ntrial 2\r\n```\r\n### patternminer trial 2\r\nthis test used only combos with their run labels, without the gene symbol \"overexpressed\" predicate definitions.  conf was set for 7 threads, 6-gram search, and both surprisingness and interaction info were enabled.\r\nthese conf settings from the \"common\" template\r\nenable_filter_node_types_should_not_be_vars = true\r\nnode_types_should_not_be_vars = PredicateNode\r\nexcluded all the nodes so no 1-gram patterns were found and cogserver crashed trying to evaluate interestingness of non-existant 2-gram patterns.\r\n```\r\ntrial 3\r\n```\r\n### trial 3 output\r\ncombo only trial with Pattern_Max_Gram = 6, Frequency_threshold = 2 and max_var_num_percent = 1 (from opencog_patternminer_pln.conf).\r\n\r\ncogserver seemed to be hanging while mining 6-gram patterns so run was terminated\r\nstatus before aborting:\r\n$ ps -aux | grep cogserver\r\nmjsd      3311  163 29.1 5551648 4770480 pts/5 Sl+  13:10 879:13 cogserver -c opencog_patternminer_moses_models3.conf\r\n\r\nthis run produced \"FinalTopPatterns\" for 2-grams and 5-grams.  the first pattern from each output file is copied below:\r\n\r\n;Interesting Pattern Mining final results for 1 gram patterns. Total pattern number: 0\r\n;Interesting Pattern Mining final results for 2 gram patterns. Total pattern number: 131\r\n\r\n;p = 4/311 = 0.0128617\r\n\r\n; { [0]=\r\n\r\n;Pattern: Frequency = 4, SurprisingnessI = 1e+09, SurprisingnessII = 1e+09\r\n(NotLink\r\n  (PatternVariableNode \"$var_1\")\r\n)\r\n(OrLink\r\n  (NotLink\r\n    (PatternVariableNode \"$var_1\")\r\n  )\r\n  (NotLink (stv 1.000000 1.000000)\r\n    (PredicateNode \"ID3\" (stv 1.000000 1.000000))\r\n  )\r\n)\r\n...\r\n;Interesting Pattern Mining final results for 3 gram patterns. Total pattern number: 0\r\n;Interesting Pattern Mining final results for 4 gram patterns. Total pattern number: 0\r\n$ head -n60 FinalTopPatterns_5gram.scm\r\n;Interesting Pattern Mining final results for 5 gram patterns. Total pattern number: 3861\r\n\r\n;p = 5/311 = 0.0160772\r\n\r\n\r\n;Pattern: Frequency = 5, SurprisingnessI = 1e+09, SurprisingnessII = 6.22e+10\r\n(AndLink\r\n  (PatternVariableNode \"$var_1\")\r\n  (PredicateNode \"CDON\" (stv 1.000000 1.000000))\r\n)\r\n(OrLink\r\n  (PatternVariableNode \"$var_1\")\r\n  (AndLink\r\n    (NotLink (stv 1.000000 1.000000)\r\n      (PredicateNode \"ARL17A\" (stv 1.000000 1.000000))\r\n    )\r\n    (OrLink\r\n      (NotLink\r\n        (PatternVariableNode \"$var_1\")\r\n      )\r\n      (NotLink (stv 1.000000 1.000000)\r\n        (PredicateNode \"MUC5AC\" (stv 1.000000 1.000000))\r\n      )\r\n\r\n    )\r\n    (NotLink (stv 1.000000 1.000000)\r\n      (PredicateNode \"ABCC2\" (stv 1.000000 1.000000))\r\n    )\r\n  )\r\n)\r\n(OrLink\r\n  (PatternVariableNode \"$var_1\")\r\n  (AndLink\r\n    (OrLink\r\n      (PatternVariableNode \"$var_1\")\r\n      (NotLink (stv 1.000000 1.000000)\r\n        (PredicateNode \"ARL17A\" (stv 1.000000 1.000000))\r\n      )\r\n    )\r\n    (NotLink (stv 1.000000 1.000000)\r\n      (PredicateNode \"ABCC2\" (stv 1.000000 1.000000))\r\n\r\n    )\r\n  )\r\n)\r\n(OrLink\r\n  (PatternVariableNode \"$var_1\")\r\n  (NotLink (stv 1.000000 1.000000)\r\n    (PredicateNode \"ARL17A\" (stv 1.000000 1.000000))\r\n  )\r\n)\r\n(OrLink\r\n  (PatternVariableNode \"$var_1\")\r\n  (NotLink (stv 1.000000 1.000000)\r\n    (PredicateNode \"KLHL1\" (stv 1.000000 1.000000))\r\n  )\r\n)\r\n...\r\n```\r\n[trial 1 output.txt](https://github.com/opencog/opencog/files/1312992/trial.1.output.txt)\r\n[trial 2 output.txt](https://github.com/opencog/opencog/files/1312993/trial.2.output.txt)\r\n[trial 3 output.txt](https://github.com/opencog/opencog/files/1312995/trial.3.output.txt)\r\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/2888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/2792", "title": "AtomSpacePublisherModuleUTest fail on clean ubuntu 16.04 install", "body": "for atomspace commit 1b9a0c5 and opencog commit e1c3697\r\nthis is the problem:\r\n`AtomSpacePublisherModuleUTest: /usr/include/zmq.hpp:406: zmq::context_t::~context_t(): Assertion `rc == 0' failed.`\r\n\r\nfull output:\r\n````\r\nRunning cxxtest tests (1 test)[2017-06-21 18:40:10:796] [INFO] Using config file found at: /home/mjsd/oc/opencog/build/tests/persist/zmq/events/../../../../lib/opencog-test.conf\r\n\r\n[2017-06-21 18:40:10:796] [DEBUG] [SystemActivityTable] constructor\r\n[2017-06-21 18:40:10:871] [INFO] [global_python_initialize] Start\r\n[2017-06-21 18:40:10:877] [INFO] [global_python_initialize] Adding OpenCog sys.path directories\r\n[2017-06-21 18:40:10:877] [DEBUG] Python 'sys.path' is:\r\n[2017-06-21 18:40:10:877] [DEBUG]      0 > \r\n[2017-06-21 18:40:10:877] [DEBUG]      1 > /usr/local/share/opencog/python\r\n[2017-06-21 18:40:10:877] [DEBUG]      2 > /usr/lib/python2.7\r\n[2017-06-21 18:40:10:877] [DEBUG]      3 > /usr/lib/python2.7/plat-x86_64-linux-gnu\r\n[2017-06-21 18:40:10:877] [DEBUG]      4 > /usr/lib/python2.7/lib-tk\r\n[2017-06-21 18:40:10:877] [DEBUG]      5 > /usr/lib/python2.7/lib-old\r\n[2017-06-21 18:40:10:877] [DEBUG]      6 > /usr/lib/python2.7/lib-dynload\r\n[2017-06-21 18:40:10:877] [DEBUG]      7 > /usr/local/lib/python2.7/dist-packages\r\n[2017-06-21 18:40:10:877] [DEBUG]      8 > /usr/lib/python2.7/dist-packages\r\n[2017-06-21 18:40:10:877] [DEBUG]      9 > /usr/lib/python2.7/dist-packages/PILcompat\r\n[2017-06-21 18:40:10:877] [DEBUG]     10 > /usr/lib/python2.7/dist-packages/gtk-2.0\r\n[2017-06-21 18:40:10:877] [DEBUG]     11 > /usr/lib/python2.7/dist-packages/ubuntu-sso-client\r\n[2017-06-21 18:40:10:879] [INFO] [global_python_initialize] Finish\r\n[2017-06-21 18:40:10:879] [INFO] [global_python_initialize] Start\r\n[2017-06-21 18:40:10:879] [INFO] PythonEval::initialize_python_objects_and_imports Finished initialising python evaluator.\r\n[2017-06-21 18:40:10:879] [DEBUG] [SystemActivityTable] init\r\n[2017-06-21 18:40:10:879] [INFO] Loading module \"../../../../opencog/cogserver/modules/events/libatomspacepublishermodule.so\"\r\n[2017-06-21 18:40:10:885] [INFO] [AtomSpacePublisherModule] constructor\r\n[2017-06-21 18:40:10:885] [DEBUG] registering opencog::Request \"publisher-enable-signals\"\r\n[2017-06-21 18:40:10:885] [DEBUG] registering opencog::Request \"publisher-disable-signals\"\r\n[2017-06-21 18:40:10:885] [INFO] Initializing AtomSpacePublisherModule.\r\nAtomSpacePublisherModuleUTest: /usr/include/zmq.hpp:406: zmq::context_t::~context_t(): Assertion `rc == 0' failed.\r\n````\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/2792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/1485", "title": "add working sql backing store to docker file", "body": "now that the agi-bio project is starting experiments with large atomspaces, it would be great if a working postgresql atomspace database could be installed & configured in the Dockerfile image.  i've been unable to get it to work in the current container through the cogserver or in the unit tests, despite repeatedly following, checking & rechecing the multiple README files.  the test databases exist and are accessable with the users given in the respective config files.  proper permissions are emphasized but not stated explicitly:  what should they be?  the only other clue i've come up with is that for the current build \"docker ps\" lists the port mapping as \"0.0.0.0:17001->17001/tcp; 0.0.0.0:18001->18001/tcp\" while /etc/hosts has the usual \"127.0.0.1  localhost\".  any suggestions?\n\nthanks,\nmike\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/1485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/opencog/opencog/commits/45d76924ddf7b0646369176242afb4d540f857ff", "message": "modify python rest code apimain.py and add apighost.py for mozi ghost"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ngeiswei": {"issues": [{"url": "https://api.github.com/repos/opencog/opencog/issues/2787", "title": "Pattern Miner shallow clean-ups", "body": "I noticed the following possible clean-ups in the pattern miner. They\r\nare shallow but should already help to increase readability.\r\n\r\n- [x] In `PatternMiner::cleanUpPatternMiner()` a lot of swap is taking\r\n  place, why is that? Is it because it is faster than clear()? Is it\r\n  to deallocate memory as explained in\r\n  https://stackoverflow.com/questions/7351143/whats-faster-recreate-or-clear#7351163\r\n  ? If there is an advantage wrap these swaps into a `swap_clear()`\r\n  method, or add a generic version in cogutils.\r\n- [ ] Strive to have 80 col max. Otherwise it wastes a lot of screen\r\n  estate, you can't put 2 pages side-by-side, editor auto-wrapping\r\n  just doesn't cut it. Or suffice to say it's in the development\r\n  standard http://wiki.opencog.org/w/Development_standards#Formatting\r\n- [x] Replace `map<Handle, Handle>` by `HandleMap`, `pair<Handle,\r\n  Handle>` by `HandlePair`, etc, as defined in `Handle.h`\r\n- [x] Use by C++11 range loop when possible, such as \"for (iter =\" in\r\n  `PatternMinerDF.cc`. Look also at `niter`, `ValueToVarIt`,\r\n  `oneSuperRelationIt`, etc.\r\n- [x] Simplify insert pair inside a `std::map` (no need to rebuild an\r\n  unmodified pair, like in l.226 of `PatternMinerBF.cc`).\r\n- [x] Replace `0` and `NULL` by `nullptr` (look for `= 0` and `NULL`)\r\n- [x] Replace `node_types_should_not_be_vars` vector by set\r\n- [x] `incomeingPtr` -> `incomingPtr`\r\n- [x] simplify var_num initialization using ternary conditional\r\n  operator (? :)\r\n- [x] Simplify template closing brackets `> >` -> `>>`\r\n- [x] use `boost::sort` instead of `std::sort`. This is optional, some\r\n  people like Linas don't like that we use boost when we could use the\r\n  standard, because boost isn't as stable, but this one is pretty\r\n  stable, and will likely end-up in the standard anyway.\r\n- [x] In `initPatternMiner` use resize instead of pushing back\r\n  `patternVector`\r\n- [ ] Constify the whole thing\r\n  Like loops in `PatternMiner::calculateSurprisingness`\r\n- [ ] Define a PatternMiner logger and use it instead of printing on\r\n  the stdout.\r\n- [x] Simplify `PatternMiner::containWhiteKeywords` using\r\n  `PatternMiner::containKeywords`.\r\n- [x] Factorize\r\n    ```\r\n    node_types_str.erase(std::remove(node_types_str.begin(), node_types_str.end(), ' '), node_types_str.end());\r\n    vector<string> typeStrs;\r\n    boost::split(typeStrs, node_types_str, boost::is_any_of(\",\"));\r\n    ```\r\n- [x] Reimplement `PatternMiner::isInHandleSeq`,\r\n  `PatternMiner::isIgnoredType`, `PatternMiner::isTypeInList`,\r\n  `PatternMiner::isIgnoredContent` with `is_in` from `cogutils`.\r\n- [x] Replace the range loop over `allNodesInEachLink` in\r\n  `PatternMiner::splitDisconnectedLinksIntoConnectedGroups` by\r\n  `is_disjoint` from `cogutils`.\r\n- [ ] Better use sets rather than sequences in\r\n  `PatternMiner::splitDisconnectedLinksIntoConnectedGroups`\r\n- [x] `PatternMiner::splitDisconnectedLinksIntoConnectedGroups` could\r\n  be renamed into `PatternMiner::partitionIntoCliques`\r\n- [x] Have `linktype_black_list` and `linktype_white_list` be\r\n  `std::set` instead if `std::vector` and Reimplement\r\n  `PatternMiner::add_linktype_to_white_list` with\r\n  `std::pair<iterator,bool> std::set::insert(const value_type& value)`\r\n  and `PatternMiner::remove_Ignore_Link_Type` with `std::set::erase`\r\n- [x] Do similar simplifications with\r\n  `PatternMiner::add_link_type_to_same_link_types_not_share_second_outgoing`,\r\n  `PatternMiner::remove_link_type_from_same_link_types_not_share_second_outgoing`,\r\n  `PatternMiner::add_node_type_to_node_types_should_not_be_vars`,\r\n  `PatternMiner::remove_node_type_from_node_types_should_not_be_vars`,\r\n  `PatternMiner::add_keyword_to_black_list`,\r\n  `PatternMiner::remove_keyword_from_black_list`,\r\n  `PatternMiner::add_keyword_to_white_list`,\r\n  `PatternMiner::remove_keyword_from_white_list`\r\n- [ ] Move code like\r\n  ```\r\n  newHTreeNode->parentLinks.insert(parentNode);\r\n  parentNode->childLinks.insert(newHTreeNode);\r\n  ```\r\n  in a method of `HTreeNode` or `HTree`\r\n- [x] Replace\r\n        ```\r\n        float abs_diff = diff;\r\n        if (abs_diff < 0)\r\n            abs_diff = - abs_diff;\r\n        ```\r\n  by `std::abs`\r\n- [x] Remove `find` calls before inserting to an ordered container. No need to check if an element is already in the container as the `insert` will do the check. Removing these checks results in simpler and faster code.\r\n\r\nThere are other less shallow changes but they require more thinking (by me anyway).\r\n\r\n- [ ] Look into `XXX why do we need to set the TV ???` or\r\n  `TruthValue::TRUE_TV()`\r\n- [ ] Why representing pattern key as string instead of atom?\r\n- [ ] Likewise why use a string as key of `allEntityNumMap` instead of\r\n  atom?\r\n- [ ] Decouple running the algorithm and outputting its\r\n  results. For instance move out calls to\r\n  `PatternMiner::OutPutFrequentPatternsToFile` within\r\n  `PatternMiner::runPatternMiner` or such.\r\n\r\n@shujingke I don't necessarily suggest that you take care of them. In fact I would perhaps prefer to do it because it would help me to get familiar with the code. But, first, I need your feedback on a couple of stuff (like the swap thing), and second, I really won't do it unless the utest passes, and I need your help on that. Also of course it would be better if you don't have major changes not merged yet. What do you think?\r\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/2787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/2246", "title": "Bug in sureal", "body": "I can't generate speech if the model contains on the same words of the speech to generate.\n\nSteps to reproduce:\n1. `cd opencog/opencog/nlp/chatbot-psi`\n2. `guile -l chatbot.scm`\n3. `(chat \"small cats are happy\")`\n4. `(Word \"people\") (Word \"crazy\")`\n5. \n\n```\n(sureal\n   (SetLink\n      (Evaluation\n         (Predicate \"happy\")\n         (List\n            (Concept \"people\")))\n      (Inheritance\n         (Concept \"people\")\n         (Concept \"crazy\"))))\n```\n\nreturns `()`.\n\nIf you replace `happy` by `cute` in the exemplar sentence it works!\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/2246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/1846", "title": "Implement PPL and beyond in Atomese", "body": "# Overview\n\nPort PPL\nhttps://en.wikipedia.org/wiki/Probabilistic_programming_language to\nAtomese.\n# Motivation\n\nCurrently, in Atomese, we can only reason about probabilistic\ndistribution represented by truth values. Supporting PPL would be a\nstep towards extending that to any distributions.\n# Proposal\n\nFirst, implement distributions as indeterministic Schemata, for\ninstance\n\n``` atomese\nGroundedSchemaNode \"Gaussian\"\n```\n\nwould represent a Gaussian distribution that can be run\n\n``` atomese\nExecutionOutputLink\n   GroundedSchemaNode \"Gaussian\"\n   ListLink\n      <mean>\n      <variance>\n```\n\nor symbolically manipulated. We may want to define a new atom type for\nthem.\n\nSecond, implement PPL operators like mh-query. Maybe existing\nlibraries like http://www.robots.ox.ac.uk/~brooks/probabilistic-c/\ncould be used to save some work (not completely sure, but worth\ninvestigating).\n# Beyond PPL\n\nThis would be the first step towards more sophisticating reasoning on\nprobability distributions. After that we can upgrade PLN to reason on\nthose distributions in a manner typical PPLs do not. As well as improving PPL inference algorithm using the whole PPL/PLN reasoning, as long as those are implemented in Atomese to some degree.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/1846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/1419", "title": "Piping a lot of scheme code consumes a lot of RAM", "body": "When piping large scheme files (> 30MB) the RAM consumption goes crazy high > 8GB.\n\nAs a work around I can set do_async_output to false in method SchemeShell::SchemeShell, then the RAM remains quite low.\n\nDo we need to add a config option SCM_ASYNC_OUTPUT to control that? Or does that require a real fix? Or is this already parameterizable in another way?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/1419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/1311", "title": "Functional type system for hypegraphs", "body": "# Object\n\nProposal for an hypergraph type checker.\n# Motivation\n\nThe current type system is too limiting and doesn't allow to overload\noperators. Here's an example when using PLN Or/And rules.\n\nFor instance, one might want to write\n\n```\nOrLink\n    ConceptNode \"Big\"\n    AndLink\n        ConceptNode \"Tall\"\n        ConceptNode \"Slim\"\n```\n\nBut we need to tell that OrLink arguments are ConceptNode or AndLink,\nhowever an AndLink may not necessarily have the right type, for\ninstance the following is ill-formed:\n\n```\nOrLink\n    ConceptNode \"Big\"\n    AndLink\n        PredicateNode \"is_tall\"\n        PredicateNode \"is_slim\"\n```\n\nSo is the following:\n\n```\nOrLink\n    ConceptNode \"Big\"\n    AndLink\n        EvaluationLink\n            PredicateNode \"is_tall\"\n            ConceptNode \"John\"\n        EvaluationLink\n            PredicateNode \"is_slim\"\n            ConceptNode \"Cathy\"\n```\n\nMaybe one can address that by creating several OrLink types, like\nOrConceptLink, OrPredicateLink, OrFuzzyTVLink. Or alternatively use\nSatifyingSet implicitly, etc. However even if that would not solve the\nproblem generally, as in the cases involving Schemas, etc. We need a\nreal type system to handle those cases.\n# Proposal\n\nI suggest a type system kinda on top of the current atom type system\nas defined in atom_types.script. Let's call it the \"functional type\nsystem\" or the FT system for short. Let me jump straight into the\ndefinitions, then I'll give a few examples.\n## Terminology\n\nI'm using Haskell terminology as much as possible, so\n\n```\nE :: T\n```\n\nis used to denote the type T of expression (or hypergraph) E.\n\n```\nT1 -> T2\n```\n\ndenotes the type of a function with domain T1 and co-domain T2.\n\n```\nT1 -> T2 -> T3\n```\n\nsimilarly denotes a function that take 2 arguments of types T1 and\nT2, and return type T3.\n\n```\nP => T\n```\n\ndenotes the precondition P of type T.\n\n```\nT1 == T2\n```\n\nmeans that T1 is exactly equal to T2.\n\n```\nT1 <= T2\n```\n\nmeans T1 inherits T2 (this one doesn't exist in Haskell I think).\n## Simple primitive functional types (non exhaustive list)\n\nPrimitive types start in upper case, while type variables start in\nlower case.\n\n```\nATOM :: Atom\n```\n\n```\nCONCEPT_NODE :: Concept\n```\n\n```\nNUMBER_NODE :: Number\n```\n\n```\nVARIABLE_NODE :: Variable\n```\n\nYou may notice the absence of Node in the type name, that is because\nthat notion is now represented with the type signature itself. We'll\nsee that with type functions such as lists.\n\nOf course all types above inherit from Atom, that is\n\nConcept <= Atom, Number <= Atom, etc.\n\nFinally we've got the type\n\n```\nTV\n```\n\nwhich denotes a truth value. By truth value I mean its most general\nform, a pdf over [0, 1], I don't make the distinction between\nprobabilistic and fuzzy truth value, because it turns out the type\nsystem can be used for that, and besides, the real nature of a truth\nvalue is both fuzzy and probabilistic, depending on the way the PLN\nrules are gonna use them.\n## Composite functional types (non exhaustive list)\n\n```\nLIST_LINK :: [a]\n```\n\n[a] is in fact syntactic sugar for List a\n\n```\nMEMBER_LINK :: Atom -> Concept -> TV\n```\n\nso this means that MEMBER_LINK takes an atom, a concept and returns a\nTV.\n\n```\nPREDICATE_NODE :: [Atom] -> TV\n```\n\nLet's also define a type for it since it is used a lot\n\n```\nPredicate == [Atom] -> TV\n```\n\n```\nEVALUATION_LINK :: Predicate -> [Atom] -> TV\n```\n\n```\nIMPLICATION_LINK :: Predicate -> Predicate -> TV\nEQUIVALENCE_LINK :: Predicate -> Predicate -> TV\n```\n\n```\nINHERITANCE_LINK :: Concept -> Concept -> TV\nSIMILARITY_LINK :: Concept -> Concept -> TV\n```\n\n```\nAND_LINK :: a <= Concept or a <= Predicate or a == TV => a -> a -> a\nOR_LINK :: a <= Concept or a <= Predicate or a == TV => a -> a -> a\nNOT_LINK :: a <= Concept or a <= Predicate or a == TV => a -> a\n```\n\n```\nBindLink :: [Variable] -> Atom -> Predicate\n```\n\n```\nForAllLink :: [Variable] -> Atom -> TV\n```\n\nAs you may see BindLink and ForAllLink have different type signatures,\nBindLink is used to define a predicate, while ForAllLink defines a\nTV.\n\n```\nSchemaNode :: [Atom] -> Atom\n```\n\nOr more precisely\n\n```\nSchemaNode \"+\" :: [Number] -> Number\n```\n\nYou may notice that I use [Atom] as argument of PredicateNode, that's\nbecause I noticed that all over the code a PredicateNode has always a\nListLink. For instance a 0-ary predicate is only defined over an empty\nlist. I don't know if that's necessarily a good idea, but as it's seem\nexpressive enough, I chose to have my notations as alligned as\npossible with the existing use.\n## Tuple\n\nIt seems useful to have something finer than List, to be able to\nexpress the number of elements and their types, for that we introduce\nN-Tuple that inherit lists.\n\n```\nListLink\n    NumberNode \"3\"\n    NumberNode \"2\"\n:: [Atom]\n:: [Number]\n:: 2-Tuple Number Number\n```\n\nwith of course\n\n```\n(2-Tuple Number Number) <= [Number] <= [Atom]\n```\n\nThat way we can express things like\n\n```\nSchemaNode \"/\" :: (2-Tuple Number Number) -> Number\n```\n## Examples\n\nNow let's show the type of some hypergraphs:\n### Apply a predicate\n\n```\nEvaluationLink <tv>\n    PredicateNode \"P\"\n    ListLink\n        ConceptNode \"A\"\n        ConceptNode \"B\"\n:: TV\n```\n### Build a predicate\n\n```\nBindLink\n    ListLink\n        VariableNode \"$X\"\n    AndLink\n        EvaluationLink\n            PredicateNode \"Tall\"\n            ListLink\n                VariableNode \"$X\"\n        EvaluationnLink\n            PredicateNode \"Slim\"\n            ListLink\n                VariableNode \"$X\"\n:: Predicate\n```\n### Apply a schema\n\n```\nExecutionOutputLink\n    SchemaNode \"+\"\n        ListLink\n            NumberNode \"3\"\n            NumberNode \"2\"\n:: Number\n```\n## Further remarks\n### Extensional, intensional and mixed\n\nFollowing the type system we can type check mixed\nrelationships. For instance we know that\n\n```\nInheritanceLink\n    A\n    B\n:: TV\n```\n\nis equivalent to\n\n```\nOrLink\n    ExtensionalInheritanceLink\n        A\n        B\n    IntentionalInheritanceLink\n        A\n        B\n:: TV\n```\n\nassumming that both ExtensionalInheritanceLink and\nIntentionalInheritanceLink return TV, then we can use the OrLink type\n\n```\nOrLink :: a <= Concept or a <= Predicate or a == TV => a -> a -> a\n```\n\nwith a == TV, to obviously type check mixed inheritance.\n### IO monad\n\nCould we represent procedure's side effects with IO monad? For\ninstance\n\n```\nPredicateNode \"is_pixel_blue\" :: (2-tuple Number Number) -> IO TV\n```\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/1311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/opencog/opencog/commits/9e89aa1d5ac234d6617c3be5c6e38c0ed1a457cf", "message": "Merge pull request #2979 from ngeiswei/optimize-xpattern-miner\n\nOptimize xpattern miner"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/cf7cec5751852041a3d2997e8e743fa8bea82adb", "message": "Remove useless structures"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/968018f20607a3288df3fa792a41ab236534e084", "message": "Implement heuristic to speed up strongly connected components"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/1217af887837c7cc507b1341c3154cab17625700", "message": "Merge pull request #2975 from ngeiswei/fix-rules-utest\n\nUse load-from-path instead of load"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/b00b74ac149dd7fed1041ee434a1c6913b11cc92", "message": "Use load-from-path instead of load"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/16d3359d97378587f21e27462f67f475014e7ed9", "message": "Merge pull request #2974 from ngeiswei/fix-pattern-miner-utest\n\nDisable soda drinker pattern miner utest"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/19771dbbfc2868abe88c2e71cd24295eadc50914", "message": "Disable soda drinker pattern miner utest"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/acfa9bedd956337a487b984152bcde62cb6e3fff", "message": "Use PatternLink::get_components"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/c34f98b827487a5df6fcedcaa3dfffb5aef64855", "message": "Remove memory leak from XPatternMiner::restricted_satisfying_set"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/eca57d4bfa0460915e4640b040094ac68c5b8b54", "message": "Optimize new implementation (splitting strongly components)"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/f4f3d4547d54dd165093ed3250a50d155ccfd7d3", "message": "Remove trailing whitespace"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/344b9b91ccebc6f83113aeb5026f6b46f25d2945", "message": "More TODO comments"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/da2ba600099f885e0cc02d65ce716e75265fc1e9", "message": "New implementation of specialize\n\nInstead of generating the product of all variable reductions possible,\nit extract these combinations from the text, dismissing all that do\nnot exist in the text."}, {"url": "https://api.github.com/repos/opencog/opencog/commits/86377d2614a4c5072bc206f5455bdd8b91ba8014", "message": "Enable soda drinker utest (it worked right away!)"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/294fe79e10901a267f0da8a327e06d3fb2a32285", "message": "Uncomment all text from the inference control corpus"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/52ee0e7f0f41309cc9690055bdf5afabb6d52475", "message": "Prepare enabling soda drinker unit test"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/a85789fa579118c8bbd3abffc19595fb86c60704", "message": "Minro typo"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/ef358b53a555f0b5c0deb52641a2c42726b98ac2", "message": "Merge pull request #2967 from ngeiswei/xpattern-miner\n\nEmbryonic URE-based pattern miner"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/d12684cba840d603c3408ce5415c4911bf69ea42", "message": "Use gen-variables from rule-engine module"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/2f55dfe82d7d8e7bea5433eb8cbd78f526b516b3", "message": "Use abstraction rule instead of hardcoded specialization"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/41d7205517e92b58fd2196d994188a08c918d700", "message": "Add abstraction rule\n\nto infer simple abstraction from text"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/f7680366d78dff691eacb7f0db7f19182c5cbf85", "message": "Fix unary-specialization-formula"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/89977d6f517b6d24b3adebac83eaffe91e6a1128", "message": "Replace ComposeLink by PutLink"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/53445bcd817ce671deb80dabbf485cb9b325e572", "message": "Optimize XPatternMiner by not querying more text than necessary"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/57f7642adc52794dd13e619affb793c67a9283ad", "message": "Fix unary-specialization-rule and remove debug messages"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/2df73da4278adc89515bf2ab598d3b5de2027b74", "message": "Merge pull request #2954 from ngeiswei/fix-xpattern-miner-path\n\nFix xpattern-miner path in utest"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/0c481703e77952d401854bcbc2b8806d4bcc6c4b", "message": "Fix xpattern-miner path in utest"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/26c288d18e26635237c5569f7da3691f2d3b2389", "message": "Merge pull request #2953 from ngeiswei/experimental-pattern-miner\n\nExperimental pattern miner"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/8adaec458a07f005ef84de053d5865b196edae8c", "message": "Rename experimental-pattern-miner to xpattern-miner\n\n+ compilation fixes related to the introduction RewriteLink."}, {"url": "https://api.github.com/repos/opencog/opencog/commits/f84cc64ac84e1bd56bc78b5de57b59799f4187db", "message": "Merge remote-tracking branch 'upstream/master' into experimental-pattern-miner"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/cf506dae628713caa3c93a94fc50b85a6e65ff04", "message": "Simplify unary-specialization-formula a bit"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/d28b57795ee0e74622f377891da90b8facde05be", "message": "Add rule-engine module for bool to tv conversions"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/a50f512f8500b33848d998deab57fd3e6d916101", "message": "Merge pull request #2952 from ngeiswei/force-printing-unit-test-fail\n\nForce printing when a unit test fails"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/a4ce34c259fa25da85adb1539f2e07b0013c2de0", "message": "Force printing when a unit test fails"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/7828fe295f71379d77115b6053defe3fa414e4d8", "message": "Fix specialization-rule.scm + temporary debug messages"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/ee0ddacba06260733b3c3268245bee3f79302c95", "message": "Replace CompositionLink by ComposeLink"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/95617eb4830cb12cce5f448a241008910690e0d2", "message": "Fix installing HandleTree.h"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/1290f30a0542593c7641d99324fdd2f6daf66241", "message": "Add unify in atomspace libraries"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/3142e39d36a5296a71e389216e4d245a40f8850f", "message": "Minor simplification"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/b5fcefe9601795bf41a2cbb0fbe22f5036e40aba", "message": "Stub pattern miner rb"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/9245efccd628a927788897e9992fe1de58fa62c2", "message": "Add comment about optimizing C++-based pattern miner"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/fe16ad3fa0c50c34ca2b2a01b534fe702e8c7477", "message": "Rename ComposeLink to CompositionLink"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/2529525b75a0647ad314e4bdd8faea61a9462d73", "message": "Implement unary specialization rule"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/06d567c91884de71784b035b505e643335d5b883", "message": "Move toy examples to backwardchainer"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/d7e5d063b8e7c24b74c011d0f3b885d049c7cf05", "message": "Describe simplified URE-based pattern mining example"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/2e3ad9750a01a89109e2e229b5fc22500596d20f", "message": "Add ComposeLink over ImplicationScope idea in README.md"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/ee5ce9924287293f7323fabc8caf12af9a4af50a", "message": "Implement maxdepth"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/8f973bde997bb19c49427ccaa9d319158be1aef5", "message": "Replace solution set of XPatternMiner by HandleTree\n\nthis allows to keep track of the specialization relationship between\npatterns. If a pattern is the specialization of another that doesn't\nhave enough support, that pattern won't have enough support either."}, {"url": "https://api.github.com/repos/opencog/opencog/commits/6ec579540fed634f381c8d717ce9b035c7d959d9", "message": "Add more tree structures in HandleTree"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/865499607c1d32050906d85506855436cfe0de20", "message": "Add HandleTree\n\nThis comtainer will represent the abstraction/specialization\nhierarchy. Very convenient to prune the search, as if a node pattern\ndoesn't have enough support, its children won't have enough support as\nwell."}, {"url": "https://api.github.com/repos/opencog/opencog/commits/39d22375f13cd246a5a6563c7471f387e79135e4", "message": "Fix XPatternMinerUTest::test_InferenceControl()"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/66d2498068a55285783499dd3b7b86791349e63c", "message": "Fix XPatternMiner::shallow_patterns to handle pattern matcher links"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/6ecbb4bc1169228be0e67b18c5573713fcea88ae", "message": "Re-enable XPatternMinerUTest::test_2gram_2()"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/3a74c5b74f7fd7b322c033236984162b8afca57d", "message": "Improve pattern reduction (remove redundant clauses)"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/43f9f2562a06779d9895520c67d02fe1aeae30df", "message": "Add more XPatternMinerUTest unit tests"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/d51b521447033c194a359871eadaf93de33fec17", "message": "XPatternMiner::compose by filtering vardecl"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/c9a9605e4c19d6f262a70c28e06768f3b90f2f3d", "message": "Add n-gram support"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/949ed07dae48c6aa55a868dce1b450a838d4f723", "message": "Re-enable pattern miner over inference control unit test"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/fea39b14ead48a0caa18c48e29eea7951e8a5fd0", "message": "Re-enable XPatternMinerUTest::test_AB_ABC()"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/e75efe381cc6af2569541505fd83a56f5a70e098", "message": "Support minsup + enable more unit tests"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/ed5155e96e7d39a3e9781660614fe09d91d739d0", "message": "Towards supporting nimsup"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/eb366c76df2ead327c3d9e5e857b73e2769578d1", "message": "Fix XPatternMiner::product_compose and add unit test"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/51d76954496cd0eed5dc2c6d5a3183569574fdd4", "message": "Fix XPatternMiner::xspecialize"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/d3edbaf039bb6ff7418875736e32efe9c74a6cb1", "message": "Implement XPatternMiner::compose"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/f58bc4a3b23ff308cb69db023570ac72a351249c", "message": "Implement XPatternMiner::product_substitute"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/6f19c6bd491cb6c3a789f82fe3f5aa9d798c0dd2", "message": "Add initial C++ experimental pattern miner + broken unit tests"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/510dae4b85bf10122882361109c73616a9c086ee", "message": "Add README.md and some limited rule example"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/274d241a2b83b09e0025a4ffed874d124a0945c5", "message": "Merge pull request #2946 from ngeiswei/swap-attime-args\n\nSwap AtTimeLink args"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/b2dd5f6d66505b7beb3724eda1f220656f6e5e92", "message": "Swap arguments of AT_TIME_LINK"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/bac2b0c3b1b5ca777a45d76eb1942ec88d88b87f", "message": "Swap AtTimeLink arguments"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/c32b691a36e80041f309ee4c6f9c0feeb092764f", "message": "Merge pull request #2942 from ngeiswei/continue-icl\n\nSome minor improvements in inference control learning experiment"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/5d7c008268f01d5a4af1e44657ebe73c11e3fe13", "message": "Add comment to produce-control-rules"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/b49b62d67616621549c8af41ee1b01e4013eb3dc", "message": "Set piter back to 30"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/1f61163ac5d49080ab5c366ca37139e24f5adb36", "message": "Some tweakings"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/2b54899f16049b45ee6805684acbc08f51684a48", "message": "Merge pull request #2941 from ngeiswei/pattern-miner-icl\n\nAdd context sensitive rule learning in inference control experiment"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/6022e32c9cc1f7cc5dd27ecce298ef18f829d6d1", "message": "Minor convenience tweaks"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/d3107a612848a3d809ab478b111caed43c277343", "message": "Add Mixture Model parameters"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/f39375f2648dfd9fb2d7e5ec5338c7aa082bfb78", "message": "Fix Mixture Model formula"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/5b967d32c22261aa2ef052bc1514faf12a7dddf4", "message": "Set back to 100 pss now that remove-dangling-atom is fixed"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/d5c94a5957ce0fac2fee199a18e589015cc12a15", "message": "Fix remove-dangling-atom"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/f810dba4eee8703e1459870eb685d2fb9a2d6fd9", "message": "Minor extra target"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/a41548eb916d5f006db08c92e47f8d9c81803b13", "message": "Add TODO comment about Inh X z"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/50b1a68c674ef3898dd331e5e1027a61f91afbd9", "message": "WIP towards fixing mixture model formula"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/a7b4eb2d8891d2fc6b31b1f08a64e09891a6799c", "message": "Fix infer context-sensitive control rules"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/77b1a6d2415e1f4feac9da716a2673cbd91a6804", "message": "Fix changing upper to lower case alphabet"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/09ea2303d5a7ee5d0ffad50d9869fc21290ec271", "message": "Learn contextual control rules\n\nThis is hardwired for now, control rule with context that premise has\nthe form (Inheritance a $X)"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/b0ef8a3fe672b9e7c2a0b90adb1da65fdcc51b69", "message": "Break up mk-control-rules"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9979091", "body": "Gee's why it pull requests contains my last commits, I'll close that till I find out what's wrong\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9979091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/11190395", "body": "I've got cxxtest 4.0.3 installed and I'm getting the following errors\n\nGenerating ConfigUTest.cpp\n/bin/sh: 1: --runner=ErrorPrinter: not found\nmake[3]: **\\* [tests/util/lru_cacheUTest.cpp] Error 127\nmake[2]: **\\* [tests/util/CMakeFiles/lru_cacheUTest.dir/all] Error 2\nmake[2]: **\\* Waiting for unfinished jobs....\nGenerating LoggerUTest.cpp\n/bin/sh: 1: --runner=ErrorPrinter: not found\nmake[3]: **\\* [tests/util/ConfigUTest.cpp] Error 127\nmake[2]: **\\* [tests/util/CMakeFiles/ConfigUTest.dir/all] Error 2\n/bin/sh: 1: --runner=ErrorPrinter: not found\nmake[3]: **\\* [tests/util/LoggerUTest.cpp] Error 127\nmake[2]: **\\* [tests/util/CMakeFiles/LoggerUTest.dir/all] Error 2\n[ 45%] Built target feature_selection\nmake[1]: **\\* [CMakeFiles/test.dir/rule] Error 2\nmake: **\\* [test] Error 2\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/11190395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/11192149", "body": "Nevermind, this comes from another bug I'm trying to fix. When cmake is rerun then CXXTEST_GEN is set to cxxtestgen.py. I've fixed it and will commit it soon.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/11192149/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/11401399", "body": "cxxtest 4 doesn't have cxxtestgen.py anymore, but cxxtestgen instead. I'm aware what I did was a hack but it worked fine for me. I don't know what is the correct way to address that.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/11401399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/11670981", "body": "Linas,\n\n1) Please note that\n\nKDL(X, Y) != MI(X, Y)\n\nAlthough it is certain that if KDL(X, Y) is low (so X and Y look much like each other) then MI(X, Y) will be high. I don't think the converse is true (if MI(X, Y) is high, does that imply that KDL(X, Y) is low?)\n\nAccording to http://en.wikipedia.org/wiki/Kullback%E2%80%93Leibler_divergence#Relation_to_other_quantities_of_information_theory\n\nMI(X, Y) = KDL(P(X, Y), P(X)P(Y))\n\nBut it starts getting more complicated, those distributions are 2D, I've never really thought about it. I don't think the KDL method implemented can be used anymore as it assumes 1D data, it probably can be extended of course. I guess there must be some research out there addressing that.\n\n2) Regarding KDL's codomain, I think it is [0, +inf(, so negative values are likely computational errors, that kind of calculation is likely a bit chaotic.\n\n3) The way you sort the data seems suspicious, you put them by pair and insert the pair in sorted_list, but then Y is not sorted anymore, right?\n\n4) Please not that KDL uses counters internally, so if you use wisely the KDLS struct instead of the KDL function you might avoid doing the unpacking and sorting (I hope so at least).\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/11670981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/11671035", "body": "Merry Xmas, for all X in PowerSet(Universe)!\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/11671035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/11683425", "body": "On Tue, Dec 25, 2012 at 8:10 PM, Linas Vepstas notifications@github.comwrote:\n\n> On 25 December 2012 03:05, ngeiswei notifications@github.com wrote:\n> \n> > Linas,\n> > \n> > 1) Please note that\n> > \n> > KLD(X, Y) != MI(X, Y)\n> > \n> > According to\n> > \n> > http://en.wikipedia.org/wiki/Kullback%E2%80%93Leibler_divergence#Relation_to_other_quantities_of_information_theory\n> > \n> > MI(X, Y) = KDL(P(X, Y), P(X)P(Y))\n> \n> Hmm. I guess I assumed that this is what was implemented, but I guess not.\n> Any suggestions on how to easily obtain these P's for a set of contin\n> values? Perchance there's some code that already does this?\n\nThere are things like histograms or Parzen windows. See\nhttp://en.wikipedia.org/wiki/Kernel_density_estimation\nI dug a little bit but not enough to reach a conclusion.\n\n> > 3) The way you sort the data seems suspicious, you put them by pair and\n> > insert the pair in sorted_list, but then Y is not sorted anymore, right?\n> > \n> > Right. I assume that the algo wants correlated pairs of X and Y, so either\n> > X can be sorted, but not Y, or Y can be sorted, but not X.\n\nAha, I thought you thought that!\n\n>  Are you\n> suggesting that the X and Y values can be completely uncorrelated? i.e. I\n> should just sort both, completely independently of each other?\n\nThat what KDL assumes. But again for 1D datasets.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/11683425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/11768615", "body": "Cool!\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/11768615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/11875386", "body": "Jade's work is here\n\nhttps://github.com/jadeoneill/moses\n\nHe has added support for the operator equal + simplified the combo interpreter + written stuff to support fold more elegantly + other stuff, I'm still reviewing his code.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/11875386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/13092491", "body": "I don't think it is perfectly correct, although it does prevent the seg fault, I think the right method should be resize, rather than reserve.\n\nBut a shorter fix would be\n\npbs.first.push_back(0);\n\nThanks for pointing that out!\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/13092491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/13118330", "body": "agomez2, I didn't mean that fix. I'm gonna submit some pull request with the right fixes so you can see what I mean.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/13118330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/13118476", "body": "Oh, that fix is indeed correct, but it's not the more compact! Pull request's coming...\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/13118476/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14029210", "body": "You are right, there are too many options, some can be thrown away.\n\nFor instance my early experiments show that using the xmplr feature always\nworks less well than the rest. But I wanted to experiment a bit more (I'm\ngonna do so with biological data soon), before discarding options.\n\nOn Mon, Feb 25, 2013 at 2:53 AM, Linas Vepstas notifications@github.comwrote:\n\n> My knee-jerk reaction to the description is \"do we really need all these\n> options?\" Some of these sound like useful and interesting approaches, but\n> it seems safer and easier to kludge them up, run some experiments, pick the\n> best ones, and hard-code them to always be on.\n> \n> The problem with options once they're added, we have to keep them around\n> forever, for backwards-compatibility, and that just gloms up the interface.\n> I can't believe that all of these options will be good, I figure some will\n> be stinkers that we'll never use.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/opencog/opencog/pull/103#issuecomment-14022378.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14029210/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14528336", "body": "I didn't introduce a user-adjustable parameter for no reason. In my experiments (specifically using hill-climbing to evolve feature sets) I found that no crossover works better than crossover. After studying the log I found out that, in that case, crossover kicks in too fast. So in fact I originally wanted to be able to tweak when crossover kicks in. Since in the conditional crossover kicks in when the neighborhood is greater than 10*TOP_POP_SIZE, and growing TOP_POP_SIZE does cost much anyway, I thought it was the simpler way to turn what I wanted to tweak into a user-adjustable parameter.\n\nBTW, regarding options. Hardwired parameters are really a pain to work with, on the other hand the more option the more complex it seems. Maybe it's time to use some config file that can contain as many option as one wants and only leave the most important options as command line program options. What do you think?\n\nEDIT: Or maybe restructure the man and the help to have 2 sets of options, the basic ones, and the advanced ones.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14528336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14528549", "body": "Yeah, you are right about the diary... I really have to self-improve on that side!\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14528549/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14532020", "body": "I believe boost::program option actually supports config files too, although to be more consistent with the rest of opencog we may want to use the opencog's Config class.\n\nRegarding \"I thought it only kicked in when hill-climbing hit a dead end\": I thought that too. But both seeing the code in action and reading revealed the contrary. But using the size of the neighborhood as a kick-in criteria seems sensible.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14532020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/17963589", "body": "vector_comp stands for vector comprehension. It's not really map as there is also a filter, I think vector comprehension is the right term. Now for the function name itself I open to suggestions.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/17963589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/17968669", "body": "http://en.wikipedia.org/wiki/List_comprehension\n\nBut map-filter sounds good to me, that's really what it does.\n\nBTW I found a few C++ libraries that already does almost that under the name LINQ C++, see http://stackoverflow.com/questions/232222/is-there-a-linq-library-for-c\n\nI'm REALLY surprised I didn't find out about that earlier (I should not assume Wikipedia's completeness).\n\nSo I'm starting to wonder whether my stuff is worthwhile, on the other hand I don't having yet another dependency, too bad this stuff isn't in Boost (yet).\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/17968669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20102450", "body": "Pushed a fix\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20102450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20700780", "body": "Yeah, I thought of that actually, but my dataset isn't particularly sparse and as you anticipated I was afraid of the possible CPU overhead. That series of commits divides by 10 my memory requirements so I'm good for a while.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20700780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20702660", "body": "There are 2 things:\n\n1) builtin enum takes only a byte. This saves 2x memory on my tests.\n\n2) there is no preloading of the table in a matrix of strings (Table of string). This saves 5x memory on my tests.\n\nThe 2 combined saves 10x memory on my tests.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20702660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20703654", "body": "Yes indeed it was freed, but in my case I never could get to the point of freedom because this temporary loading would go way beyond my available memory (even with a swap).\n\nAlso I noticed something strange. When the memory is reported by top or htop it doesn't show the memory decreasing when objects are freed. But if I monitor the memory consumption with valgrind it does show the memory being freed.\n\nI don't know if that is Linux not freeing the memory (or perhaps having a lazy attitude, it would only free if other processes ask more memory than is available). Or htop is inaccurate (I know it is to some extend).\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20703654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/22097721", "body": "It seems OK, although it is more a hack at this point and I'm afraid it will slow down contin evaluation. But we can address that problem later on.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/22097721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/22125497", "body": "Thx, I'll have a look at it tomorrow.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/22125497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/22873062", "body": "It now passes\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/22873062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/opencog/opencog/comments/3184360", "body": "Cool, that you found the root of the problem, I'm not sure what is the right fix, maybe we can enable both code and switch to one or another depending on the learning settings (for instance with lots features and no feature selection the former one gets back in action). But I really need the new code because other I'm getting some serious slowdown too.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/3184360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/3184374", "body": "For that one I'm sure we can do something without changing the behaviour. I'll think about it.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/3184374/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/3190425", "body": "I think it still provides that behavior, just the code is slightly simpler, basically except for the first 2 iteration crossover is the default and full scan is used only when crossover doesn't work (I've removed the variable scan because it wasn't actually used in the new code).\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/3190425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/3191551", "body": "Well spotted. There's a pattern to remember here, multimap and multithreading ~> undeterminism.\n\nI guess we could use instead of the multimap\n\n``` c++\ntypedef std::pair<double, FeatureSet> ScoreFeatureSet;\nstd::set<ScoreFeatureSet>, std::greater<ScoreFeatureSet> > sorted_flist;\n```\n\nI think std::greater would use lexicographic order.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/3191551/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/3191582", "body": "Added on TODO list\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/3191582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/3193040", "body": "Note that to introduce more randomness during feature selection (within moses) you can use --fs-subsampling-pbty which is gonna randomly subsample the dataset before feature selection is run.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/3193040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/3809343", "body": "Yes, it would less confusing to use the term setting index or something, disc index is confusing.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/3809343/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/3809410", "body": "A discrete knob can have any value, but it's a logical_subtree_knob, with only 3 settings, absent, present or negated\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/3809410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/5817353", "body": "For that type of little changes I don't create a branch (but maybe I should), so I rebase instead of merging. I'm not an rebase expert but I think that if there is a clash git-rebase would tell me (I do recall that happening), similar to whether I would merge, right?\n\nNote that I don't enforce-push (by default git refuses to do that), so wiping out someone's commit is not possible I think.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/5817353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/7274317", "body": "Strange... What version of gcc do you use? Could you post the remaining of the error message cause I can't see the other source of ambiguity. Thanks.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/7274317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/7274783", "body": "Oh I see. Looks like another clash between boost and stl. What is your version of boost?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/7274783/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/9199451", "body": "I don't understand why you would want that. Can you explain it to me?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/9199451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/9207987", "body": "1. I commented that old commit cause I didn't know how to comment a line, only a commit (I just found out how now!)\n2. OK, I understand. I didn't know variableNode had been introduced after the pattern matcher. Although I would think that having a variableNode can benefit also the algorithms working on the atomspace, not just the user, but I see your point. However I don't think it is worth modifying, so I'll that aside for now.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/9207987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/9336200", "body": "OK. Although I would probably not mix that kind of thing in that function (just to keep things as modular as possible), but I do see your point in having the base class allowing this to the user/developer.\n\nI'm probably gonna remove that comment. We'll wait for the reaction of the next const maniac that comes across that code. ;-)\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/9336200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/11516297", "body": "@misgeatgit there an extra parenthesis here but I don't think that's the problem.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/11516297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/11516302", "body": "@misgeatgit could you paste the error message here? Thanks.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/11516302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/11518474", "body": "I don't know if that's related but it seems since some time I can't load scheme files without having to set an absolute path, maybe that's the same problem. I'm investigating...\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/11518474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/11519936", "body": "@misgeatgit I might have fixed it on the atomspace repo\nhttps://github.com/opencog/atomspace/pull/78\nLet me know. If it's still not fixed send me the instructions to reproduce it.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/11519936/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/22151422", "body": "If we're to have the atomspace hold most of the configuration (which I agree is good), we probably want to move some of that code https://github.com/opencog/atomspace/blob/master/opencog/rule-engine/UREConfigReader.h and https://github.com/opencog/atomspace/blob/master/opencog/scm/opencog/rule-engine/rule-engine-utils.scm#L110 in its own place.", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/22151422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5099573", "body": "The reason I removed Table::tt is because a Table is composed of a ITable and an OTable, and together they contain the type signature of a Table. What motivated me is a bug I created when writing the new loadTable code, having the type information at 2 places was confusing.\n\nCTable need tt because there are no other places this is stored.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5099573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5099701", "body": "Yes, I know iit does call size() every time, I also sometimes perform this optimization.\n\nC++ sucks a bit in that respect, it doesn't have anyway to tell that a function is pure (I guess in principle it could infer that in determined cases but it's probably too hard in practice). D however has a 'pure' statement that compile-guaranties no IO, random, etc. D rocks IMO!\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5099701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5099762", "body": "Yeah, dense table is regular CSV table. I don't know about _parallel, maybe just _csv.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5099762/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5099970", "body": "Oh yeah, well. I mean it's the default no need to set it in ascii. I guess I should correct that message a bit.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5099970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5100574", "body": "Awesome!!! Yes it has pure and const (not to confuse with the const C++ keyword):\n\nhttp://gcc.gnu.org/onlinedocs/gcc/Function-Attributes.html\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5100574/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5575879", "body": "I think C++ actually allows a RValue to be passed as reference default when it is const. So you could have instead\n\nmixed_interpreter(const std::vector<vertex>& inputs = std::vector<vertex>()); \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5575879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5575903", "body": "Oh, funny, I'm realizing you've just copied what I've done with empty_contin_inputs. Yeah, I wasn't aware of this RValue thing by then.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5575903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "inflector": {"issues": [{"url": "https://api.github.com/repos/opencog/opencog/issues/2756", "title": "CogServer does not error on module load failure", "body": "If you launch the CogServer and it cannot load a module because it has not been installed or is not present in the module search path, there is no error. It only prints some log entries at WARN level.\r\n\r\nTo duplicate, put a module in the MODULES section of a config file. Then remove the module from the install directory.", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/2756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/1434", "title": "Atomspace Benchmark for getHandleSet is borken", "body": "The recent Atomspace changes have made the benchmark show much worse performance. I was getting times about 110 seconds and 900 ops per second after changing shared_mutex to mutex for:\n\n```\n./atomspace_bm -m  getHandleSet\n```\n\nI was getting times below 90 seconds and ops per second above 1,050 consistently after all my proposed changes. Now I get:\n\n```\nBenchmarking AtomSpace's getHandleSet method 100000 times ..........\n283.211019 seconds elapsed (353.09 per second)\nSum clock() time for all requests: 248357539 (248.358 seconds, 402.645 requests per second)\n```\n\nCompare **248 seconds** to 110 seconds and **402 ops per second** to 900. Something unexpected must be happening.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/1434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/1370", "title": "Avoid or minimize passing of AtomSpace* into evaluation and execution links.", "body": "> fwiw python_eval should also take atomspace as an argument somewhere, so that it acts on the correct atomspace. - @linas in #1319\n1. Pass the atomspace into the `PythonEval::eval` and `PythonEval::eval_tv` \n2. Make sure the ATOMSPACE Python variable refers to the right atomspace\n3. Swap back ATOMSPACE afterward so that it preserves server ATOMSPACE by default ???\n\nNeed to think about the implications of swapping back as this may be unnecessary. It might be only necessary to make sure that ATOMSPACE is set to the one passed in.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/1370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/opencog/opencog/comments/10739096", "body": "@linas They are not placed in the source directory any more, they are placed in the build directory. I altered the include search for Cythonize to add the build directory. So those .pyx files are being picked up from the build directory.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/10739096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/10739139", "body": "The argument I added to CYTHON_ADD_MODULE_PYX is:\n\n -I ${PROJECT_BINARY_DIR}\n\nto tell it to look in the build directory.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/10739139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/15932746", "body": "Docker is just a way of bootstrapping a linux virtual machine consistently\nand for hosting different versions of linux virtual machines. It's sort of\nan abstraction on top of virtual machines melded with a configuration\nmanagement system.\n\nIt doesn't do anything special with Linux beyond running the command\nspecified in the Dockerfile which, in our case, calls octool to do the\nbuild.\n\nSo I don't think \"it's a docker thing\".\n\nOn Fri, Feb 5, 2016 at 9:44 PM, Linas Vep\u0161tas notifications@github.com\nwrote:\n\n> I mean, how are you testing this stuff? I can't even imagine how this\n> could ever have worked ... is this a docker thing? Do you ever test outside\n> of docker?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/opencog/opencog/commit/1e370a67b7484fc235ab440c5a5abbce0e9758e2#commitcomment-15929896\n> .\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/15932746/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "Shinkurt": {"issues": [{"url": "https://api.github.com/repos/opencog/opencog/issues/2702", "title": "Security: Multiple possible Intiger Overflows in HopfieldOptions.cc", "body": "opencog/examples/hopfield/HopfieldOptions.cc , uses and calls for atoi() multiple times (197, 200, 203, 204, 207...) \r\n\r\nIn the case of atoi, if the input recieved is not checked, the resulting number can exceed the expected range -- causing integer or stack overflows.\r\n\r\nIf source is untrusted (meaning recieved from user-input), check both minimum and maximum with INT_MAX and INT_MIN for ints, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended).\r\n\r\nUsing these to map variables while calling for atoi() would be nice\r\n\r\n- strtol()   \tLONG_MIN\tLONG_MAX\r\n- strtoll() \tLLONG_MIN\tLLONG_MAX\r\n- strtoimax()   INTMAX_MIN\tINTMAX_MAX\r\n- strtoq()\t        LLONG_MIN\tLLONG_MAX\r\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/2702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "andre-senna": {"issues": [{"url": "https://api.github.com/repos/opencog/opencog/issues/2692", "title": "nlp-parse is not working with child atomspace", "body": "The following SCM script crashes or hangs after +- 10 cycles.\r\n\r\nIf I comment the call to cog-set-atomspace! it works ok. If I comment the call to r2l-parse (inside nlp-parse) it will also work ok.\r\n\r\n`(add-to-load-path \"/usr/local/share/opencog/scm\")\r\n(add-to-load-path \"/opencog/build/opencog/scm/opencog/\")\r\n(add-to-load-path \".\")\r\n\r\n(use-modules (ice-9 readline))\r\n(activate-readline)\r\n\r\n(use-modules (opencog))\r\n(use-modules (opencog nlp) (opencog nlp lg-dict) (opencog nlp relex2logic) (opencog nlp chatbot))\r\n\r\n(set-relex-server-host)\r\n(cog-set-atomspace! (cog-new-atomspace (cog-atomspace)))\r\n(while #t (begin\r\n    (display \".\")\r\n    (nlp-parse \"What is engineered hardwood flooring?\")))\r\n`", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/2692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AmeBel": {"issues": [{"url": "https://api.github.com/repos/opencog/opencog/issues/2629", "title": "MOSESPLNSynergyUTest is hanging", "body": "The test MOSESPLNSynergyUTest is taking forever, on atomspace's sha = `5bd86057a Merge pull request #1158 from ngeiswei/FC-backcompatible`, and opencog's sha = `3dd862549 Merge pull request #2628 from AmeBel/a-fix`.", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/2629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/2586", "title": "Update python codes that use old apis.", "body": "Components using old apis\r\n1. rest-api\r\n2. concept-blending\r\n3. socketio (not been used for anything afaik)\r\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/2586/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/1657", "title": "cog-set-atomspace! not switching the atomspace used by the cogserver", "body": "not sure if it is a cogserver bug or a guile binding bug\n\n```\nguile> (define alt-as (cog-new-atomspace))\n\nguile> (cog-set-atomspace! alt-as)\n#<atomspace 0x14e4c20>\nguile> (cog-atomspace)\n#<atomspace 0x14e4c20>\n```\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/1657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/1549", "title": "Move all relevant Python PLN unit tests to new PLN", "body": "", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/1549/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/1446", "title": "Incorrect tense rule", "body": "The PredicateNode @ https://github.com/opencog/opencog/blob/master/opencog/nlp/relex2logic/rule-helpers.scm#L473 should be replaced with a SatisfyingSetLink once the discussions(https://github.com/opencog/opencog/pull/1442, https://github.com/opencog/opencog/pull/1422) on the appropriate form of syntax and whether implicit or explicit representation are allowed are resolved. \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/1446/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/1394", "title": "Testing Distributed atomspace ", "body": "Steps to take for the test were initial outlined  [here](https://github.com/opencog/docker/pull/29#issuecomment-78401615)\n1. start two containers, both connected to one database.\n2. write a guile script so that one of them pushes atoms into the database, the other pulls them out.\n3. To verify that data is moving, you have to actually look at truth values. So one would create atoms with e.g. low truth values, the other would verify the values. Maybe make them large and push them back again. Ping-pong around. Or you could look at incoming sets ... see below.\n\nNotes:\n- The push and pull commands are in scheme, called fetch-atom fetch-incoming-set store-atom all of which take a single atom as an argument.\n- `load-atoms-of-type` takes a single type as an argument\n- `barrier` takes no arguments; its supposed to make sure all stores are finished before any loads start. (if you try to store 100K atoms, it might take a while. Barrier is supposed to block until they are all stored.).\n- atom UUID's should be preserved, i.e., they should be the same in both atomspaces.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/1394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/1210", "title": "Create OK model of discourse context", "body": "What is the (implicit) context that a discourse is relevant to? This includes the conversation history, plus stuff in the immediate environment being talked about (e.g. the common \"physical\" environment, in a game world or robotics context), plus \"obviously\" relevant stuff pulled up from memory. (Ultimately this requires theory-of-mind modeling, but simple cases probably don't need this..)\n\nInformation-theoretic criteria of surprisingness may be applied relative to the discourse context, to aid in word/phrase selection and other tasks.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/1210/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/1209", "title": " Getting some backing store working effectively", "body": "This is not really an NLP task, but is listed here due to its importance for unsupervised language learning.\nFor unsupervised learning it will be very valuable to be able to rapidly load (small or large) pieces of a saved AtomSpace according to a flexible set of queries.\n\nThis could be done by extending the Postgres Backing Store's API, or by integrating some other backing store and writing an appropriate API for it and customizing it appropriately. \n\nThis will include\n- [ ] Remove the NLP_HACK from persist/sql/PersistModule.cc\n- [x] Dockerizing the existing postgres implementation\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/1209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/1206", "title": "Testing robotic dialogue", "body": "Making a set of test cases for robotic dialogue, doing testing, and fixing what\u2019s broken.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/1206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/1204", "title": "Integration of dialogue system with robotics framework", "body": "Substituting the OpenCog-based dialogue system in place of the OpenDial-based system for the OpenCog-based robotics framework. Tweaking the various speech act schema and associated hard-coded dialogue rules for appropriateness in a robotics context \n\nSubtle issues here would seem to be:\n- Goals specific to the game world context, and their connection with speech acts\n- Articulation of descriptions of things in the game world environment\n- Articulation of events, processes and sequences in the game world\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/1204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/1203", "title": "Testing of dialogue system", "body": "Putting the \u201cgeneration from general subhypergraph to English\u201d functionality together with the system of speech acts and associated goals, plus the content imported from the OpenDial chatbot, we obtain an overall OpenCog dialogue system.\n\nThis task consists of making a set of test cases for this overall functionality, and testing the system accordingly, and fixing the obvious things that are found to be broken.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/1203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/1202", "title": "Testing of generation from general subhypergraph to English", "body": "Putting the {sentence sized chunk of Atoms ---> English sentence) functionality together with word selection and microplanning, one obtains a language generation functionality capable of mapping a general Atom-set into a series of related English sentences.\n\nThis task consists of making a set of test cases for this overall functionality, and testing the system accordingly, and fixing the obvious things that are found to be broken.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/1202/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/1201", "title": "Import of opendial rules into opencog based system", "body": "The OpenDial chatbot, utilizing a combination of hand-coded rules and calls to external systems, displays a reasonably powerful chat functionality. This functionality can be ported into the OpenCog dialogue system, giving the OpenCog dialogue system the ability to conduct reasonably interesting conversations.\n\nA script can be written to translate OpenDial rules (which are expressed as implications) into OpenCog ImplicationLink; and it should be straightforward to translate OpenDial references to external sources (like MegaHal and OpenEphyra) into GroundedSchemaNodes referenceable within OpenCog ImplicationLinks. However, some thinking will need to be done regarding how to break up the OpenDial functionality among speech act schema. Some of the OpenDial functionality may go into new speech act schema (e.g. a \u201csay something amusing\u201d schema wrapping up the MegaHal reference), and some may be wrapped into existing speech act schema (e.g. the OpenEphyra reference could be invoked by the general question-answering schema, to be utilized when no sufficiently good answer to the question at hand is found within the Atomspace directly). The AIML-type rules used within OpenDial may end up being divided among various existing speech act schema (e.g. OpenDial rules for greetings could be placed within a general greetings schema).\n\nOpenDial handling of dialogue variables (e.g. the user\u2019s name) will have to be mapped into OpenCog structures carefully and probably on a case-by-case basis.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/1201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/1200", "title": "Implement useful question answering", "body": "Given a basic question-answering schema, and a process for fuzzy hypergraph matching, these two can be connected, creating a question-answering schema that utilizes fuzzy hypergraph matching to answer questions. In principle this should yield a powerful QA system (if the Atomspace is filled with appropriate knowledge ingested via the comprehension pipeline), but it will doubtless require lots of adjustment, tweaking and fixing before it works OK.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/1200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/1199", "title": "Design, implement speech act and conversation-management schema (and link to goals)", "body": "In the initial version of the OpenCog dialogue system, utterances will be triggered by specific \u201cspeech act schema\u201d that are hard-coded (via ImplicationLinks) to specific Goal Atoms. (The truth values of these links may then be adapted based on the system\u2019s experience.)\n\nSimple examples of such schema are:\n- Identify when a question has been asked, and answer it\n- Articulate the most important Atoms in the Atomspace\n- Argue/question, when the dialogue partner says something that seems incorrect\n\nA longer list of such schema can be obtained from the speech act literature, especially from the DAMSL paper (the paper by Twitchell and Nunamaker titled \u201cSpeech Act Profiling: A Probabilistic Method for Analyzing Persistent Conversations and Their Participants\u201d, which contains a fine-grained ontology of 42 kinds of speech acts, called SWBD-DAMSL (DAMSL = Dialogue Act Markup in Several Layers). We don\u2019t need to implement all 42 of these, and we can add some others, but this paper gives a useful practical guide as it is based on analyzing actual human dialogues in detail using speech act theory as a basis.)\n\nExample of conversation-management schema would be: starting a conversation, saying \"Uh huh\", etc.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/1199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/1197", "title": "Design, implement conversational goals", "body": "The OpenCog-based dialogue system will be goal-driven: statements will be made based on the execution of \u201cspeech act procedures\u201d that are selected via the OpenPsi motivation system based on its estimation that such execution will help achieve system goals.\n\nBut what system goals? In principle a few very high-level goals (e.g. seek information, seek novelty, please others) should be enough for an AI system, and other useful goals can be derived as subgoals of these. For the immediate term, however, it will be useful to explicitly encode lower-level goals.\n\nExample lower-level goals appropriate for general dialogue are, e.g. (not a complete list):\n- When engaged in a dialogue, fill up silence\n- Answer when asked\n- Utter important information\n- Get approval from one\u2019s dialogue partner\n- Gain new information/knowledge\n\nAdditional specialized goals may be appropriate for implementation of dialogue in a game-character or robotics context.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/1197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/1196", "title": "Implement PLN-based word selection", "body": "Sometimes the Atomspace doesn't transparently contain any word-based representation of an Atom chosen for articulation. Then we need to do some inference to figure out how to express the Atom in words. This can be done via customizing the PLN backward chainer.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/1196/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/1195", "title": "Word/phrase selection", "body": "Given a set of Atoms to be articulated as a series of sentences, the problem arises that some of these Atoms may not be directly linked to any WordNodes, so that there may not be any obvious way to articulate them as words.\n\nThus, the problem arises: for each Atom chosen for articulation, find a reasonably accurate way to represent it as a {ConceptNode or PredicateNode linked to a WordNode via a ReferenceLink}, or as a small combination of such Nodes.\n\nIn the initial case (which is all that this task covers), we will just handle the case of searching the Atomspace for finding the best representation, using simple heuristics. A later task Task 8) will involve using PLN to infer word-based representations of concepts.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/1195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/opencog/opencog/commits/7b91a9fb9af6a07514e2099c8a2a27455fd41c8c", "message": "Merge pull request #2945 from AmeBel/is-psi-rule\n\nAdd back psi-rule? function"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/c045183bd2920dab0ff14ee6152d0b7bae90282f", "message": "Add scheme wrapper psi-rule?"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/a6208e2af564a7e9141707ecdf56fbcb97a0d5c3", "message": "Add OpenPsiRules::is_rule"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/a8b0d94d8f2b6ee63e8dba2d9b863126cbaf1373", "message": "Merge pull request #2943 from AmeBel/refactor-openpsi\n\nContinued refactoring of openpsi framework\r\n\r\n* Adds categories of rules. A category of rules is a set of rules, similar to how `demand`s were being used. \r\n* Adds components . These are categories that have action-selectors and associated psi-loop.\r\n* Moves all parameters used to control a psi-loop to values. This way loops can be controlled from any programming language bindings\r\n* Breaks backward compatibility"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/e5cb1241cfd1b66e139b78839ea5b19f82fa434f", "message": "Add tests for psi-run and psi-halt"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/79b2d6567ec8603fc4b10d78a548d2c534842d85", "message": "Remove unrun openpsi tests"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/0e55bc9a8c24587fa70aac391def3ab91863a6de", "message": "Update psi-step tests"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/04f950d362d4c8baee1e0e1a773da715f4ebd4c4", "message": "a cleanup"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/0e2986ff57a58a364d2c255ab25c5d6cfa21cbd9", "message": "Enable test_psi_get_satisfiable_rules"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/097a23d3a9b28888c4e9ccf8934a383261420601", "message": "Fix the psi-select-rules function\n\nThe function was renamed from psi-select-rules-per-component to psi-select-rules.\nAnd the associated tests enabled."}, {"url": "https://api.github.com/repos/opencog/opencog/commits/87fe3ee29f3aa6084a7b6a4d477606a8f184ec78", "message": "Add scheme wrapping psi-categories"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/2aea849d4a6457d01236b2345cd3dba7040f60a7", "message": "Index openpsi rules by categories\n\nThis is to cache the rules in a category such that it would be faster\nto retrive them, as we don't need to search the atomspace for them."}, {"url": "https://api.github.com/repos/opencog/opencog/commits/7e111423660e6289b2e2fb6bb67da5d432a72b19", "message": "Update function name"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/bc63a19a49254e135ae47eda4eca0c2970f08954", "message": "Remove prefix string\n\nThe reason for removing is to make it easier for conversational ui"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/1913ab6357a744579f1ff067d001c8e02d617613", "message": "Cleanup openpsi rule functions"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/e5bae708fa5b1e6a5a18ef6c2e4ca6a40f981d98", "message": "Cleanup openpsi action-selector functions"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/af5a834e2decd5b8de8b3475f251b7356fa377ce", "message": "Declare that psi-components are categories"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/0888ecff2b98721f887896a83ea7c87021b44cc2", "message": "Export c++ scheme bindings"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/64d5d82c92723ebdf96cad1d6dd1fdd42fce90e4", "message": "Add openpsi categories"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/f0fc02ac2579b92b27dcfc4c561ee0d3738d2735", "message": "Cleanup and simplifications"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/f8e18e970b943d322aa8e0d7982df57eed2e7ea1", "message": "Rename demands to category in openpsi rule definition"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/89eb4f3824b252d89e97c022bc2231bccbaa800c", "message": "Refactor psi-step and psi-run\n\nThis breaks backward compatability. The reason for the break is to\nenable multiple componets defined by developers to have there own\nloop and behavior. Also, the variables used to control the psi-loop\nare converted to values and thus are accessible from any programming\nlanguage.\n\nThe only thing that can't be moved is the loop threads that are started\nin scheme maybe a mechanism should be added in the atomspace so as to\nassociate a thread with an atom.\n\nThis is sort of an atomese definition of mind-agents"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/14f5c33068c324af0f527c1445071baa635e4f16", "message": "Document psi-imply"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/72cb65ef1c76b08c8ef93e7280adb4a2e3b31245", "message": "Update getting of action-selector during psi-step"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/ca29c75e7489a55c21912d0339e4bbb856a2101e", "message": "Update signature of psi updaters for consistency with cog-value functions\n\nSince values are what are used to associate these details."}, {"url": "https://api.github.com/repos/opencog/opencog/commits/f6b61eb6062f1fdc14fced09e267cf3972d0acf0", "message": "Rename and update the signature for adding a psi-action-selctor\n\nMakes it consistent with the signature of cog-values that forms the base\nof adding this functions, and thus easier to remember for users"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/c885fe468679c80d5d21fa899ba2508a1a4ba2a5", "message": "Update on how functionality is associated with openpsi components"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/d157776aa747a8d050f10c217e52c453e060ffc1", "message": "Add function for defining components, aka psi-component"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/eda2274857235256bea024ad7165406de39d172d", "message": "Differentiate component code"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/1fcaf9fc08354d39b107280e75077cb39449fa75", "message": "Rename psi-run to psi-run-per-demand and psi-step to psi-step-per-demand\n\nThis is done so as to be able to add the capability for different\ncomponents to specify their own approach of action-selection"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/opencog/opencog/comments/8363942", "body": "woow, i missed that sorry.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/8363942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/9804433", "body": "@linas what is the purpose of  'last_os_update' ?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/9804433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/9805135", "body": " got it.  Thanks\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/9805135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7956994", "body": "If you look at the CN csv files, you will observe a column labelled\n'weight', which is the weight given to each assertion/edge; it can be\nthought of as being equivalent to strength in OC. Most of the weights are\neither 1 or .5 . But, weights could have both positive and negative\nvalueshttp://www.lrec-conf.org/proceedings/lrec2012/pdf/1072_Paper.pdf;\nthe more positive the more confident that the assertions are true. And i\nhaven't found any paper explaining what the upper and lower limit for those\nvalues are. So, I just arbitrarily choose the stv to be (1, 0.5).\n\n:-)\n\nOn Tue, Nov 26, 2013 at 4:19 AM, Cosmo Harrigan notifications@github.comwrote:\n\n> In opencog/python/conceptnet/to_scm.py:\n> \n> > -       return stv\n> > -   except KeyError:\n> > -       if (\"  \"+ word.upper()) in  corpus_dict:\n> > -           stv.mean = float(corpus_dict[(\"  \"+ word.upper())])/twf\n> > -           stv.count = .95 # have no reason for this value\n> > -           conceptnet_dict[word] = stv\n> > -           return stv\n> > -       else:  \n> > -           stv.mean = 1/(twf + 1)\n> > -           stv.count = .95  # have no reason for this value\n> > -           conceptnet_dict[word] = stv\n> > -           return stv\n> > -   \n> >   +\n> >   +def write_file(cn_assertion, context): # assertion is a list\n> > -   DEFAULT_TV = TruthValue(1,0.5) # 0.5 confidence is used(for links) because that is the weight given to most of the assertions on ConceptNet\n> \n> Actually, I'm referring to the confidence value of the Links generated by\n> the ConceptNet Relations being set to 0.5. Not the words that become nodes.\n> (\n> https://github.com/AmeBel/opencog/blob/58037b9fde235618205e625217e5d1d88ce0e50e/opencog/python/conceptnet/to_scm.py#L47\n> )\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/opencog/opencog/pull/403/files#r7912415\n> .\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7956994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/9999334", "body": "Hi Linas, I tried to refactor the function to make it tail recursive but I am repeatedly getting error. The following is the change i made\n\n```\n(define* (random-string str-length #:optional (str \"\")) \n    (define alphanumeric \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\")\n    (if (> str-length 0)\n        ((set! str (string-append str (string (string-ref alphanumeric (random (string-length alphanumeric))))))\n        (random-string (- str-length 1) str))\n        str\n    )\n)\n```\n\nand the error i am getting is.\n\n```\n<unnamed port>:47:0: In procedure random-string:\n<unnamed port>:47:0: Wrong type to apply: #<unspecified>\n\n```\n\nany suggestions?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/9999334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10333002", "body": "The IP lies within the  \"reserved private address space\" and hence publicly non-routable. More here\n\nhttps://docs.vagrantup.com/v2/networking/private_network.html\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10333002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10879316", "body": "> In opencog/python/pln/examples/relex2logic/evaluation_to_member_agent.py:\n> \n> > ```\n> >          GeneralEvaluationToMemberRule(self.chainer, 0, 2))\n> > ```\n> > -        self.chainer.add_rule(\n> > -            GeneralEvaluationToMemberRule(self.chainer, 0, 3))\n> \n> Do you have any thoughts on the advantage or disadvantage of instantiating\n> multiple instances with the location of the variable specified, versus a\n> design where the rule automatically attempts all those combinations based\n> on the arity of the predicate?\n> \n> \u200bNo there is no particular advantage. I just wanted to be consistent with\n> previous implementation. I don't see the use of\n> create_general_evaluation_to_member_rules method should the rule handle\n> depending on the arity of the predicate.\u200b\n> \n> \u200b\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10879316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10929468", "body": "One advantage i see is from the effort management perspective. It will be computationally expensive to iterate over all EvaluationLinks with Predicates taking differing number of arguments, and over the whole atomspace. \n\nI think that is a problem of other rules as well. If there is any other means of controlling that then it is very easy to apply your suggestions.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10929468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10929484", "body": "One advantage i see is from the effort management perspective. It will be computationally expensive to iterate over all EvaluationLinks with Predicates taking differing number of arguments, and over the whole atomspace. \n\nI think that is a problem of other rules as well. If there is any other means of controlling that then it is very easy to apply your suggestions.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10929484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12856947", "body": "A count of 1 will be correct . But what will be the right strength value? That is, shouldn't it be based on the number of observations/counts of such type of links?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12856947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13116931", "body": "https://github.com/opencog/opencog/blob/master/opencog/nlp/scm/nlp-utils.scm#L513\nor\nhttps://github.com/opencog/opencog/blob/master/opencog/nlp/scm/nlp-utils.scm#L553\n\nshould be handy enough\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13116931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13117386", "body": "Yes, i agree. If i remember correctly, from our last discussion on PLN, we had came to an understanding the ConceptNodes are sets and as such SatisfyingSetLink as the second argument is appropriate. \n\n(InheritanceLink (stv 1.0 1.0)\n    (ConceptNode \"scientist\")\n    (SatisfyingSetLink \n             (VariableNode  \"$x\")\n             (AndLink  .....)))\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13117386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13117546", "body": "Woow that was confusing :-) opencog/relex#47\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13117546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13273624", "body": "Shouldn't there be an AndLink circumsribing the InheritanceLink and EvaluationLink, b/c the second node of a SatisfyingSetLink is a predicate function? \n@bgoertzel  right? (Here is my vote for Atom type checking :+1: )\n\nIn addition, the sematics of the implicand seems to say \"The restaurants which serve national food are famous\".  The fact that the sentence is about a particular restaurant is not handled,  and the intensifier \"very\" is not handled.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13273624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13274707", "body": "SatisfyingSetLink is referring to all the books that you gave me in unspecified length of time, not to the single book you gave me last week. \n\n@ruiting @linas What are you suggestions of relex relations for dealing with sentences, that involve timing, such as, \"I am going to office next week, the day after the dragon boat festival\"\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13274707/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13291569", "body": "ok.\n@ruiting  after the post-processing what should we have, \n.1. output representing the whole sentence or,\n.2. output representing the adjective clause ?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13291569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13476001", "body": "why only 'adj' and 'adv' ?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13476001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13476202", "body": "Ok, i get that but in addition to that shouldn't the predicates be cleaned? I mean, without wsd, with the exception of 'definite' flaged word-instance-concepts, shouldn't all the rest be cleaned?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13476202/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13476260", "body": "I think a function like (clean-up-parse parse-node) will come in handy. \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13476260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "Matrioshka": {"issues": [{"url": "https://api.github.com/repos/opencog/opencog/issues/2597", "title": "REST API - Unable to start it", "body": "I have exported the paths (as depicted in the WIKI page): http://wiki.opencog.org/w/The_REST_API\r\n\r\nHere is the command I used to run the python file: python ./opencog/opencog/examples/restapi/start_restapi.py\r\n\r\nOutput: Error msg:\r\n```\r\n/usr/local/lib/python2.7/dist-packages/flask/exthook.py:71: ExtDeprecationWarning: Importing flask.ext.restful is deprecated, use flask_restful instead.\r\n  .format(x=modname), ExtDeprecationWarning\r\n/usr/local/lib/python2.7/dist-packages/flask/exthook.py:71: ExtDeprecationWarning: Importing flask.ext.cors is deprecated, use flask_cors instead.\r\n  .format(x=modname), ExtDeprecationWarning\r\n/usr/local/lib/python2.7/dist-packages/flask/exthook.py:71: ExtDeprecationWarning: Importing flask.ext.restful.reqparse is deprecated, use flask_restful.reqparse instead.\r\n  .format(x=modname), ExtDeprecationWarning\r\nTraceback (most recent call last):\r\n  File \"./opencog/opencog/examples/restapi/start_restapi.py\", line 1, in <module>\r\n    from web.api.apimain import RESTAPI\r\n  File \"/home/adam/opencog/opencog/opencog/python/web/api/apimain.py\", line 6, in <module>\r\n    from apiatomcollection import *\r\n  File \"/home/adam/opencog/opencog/opencog/python/web/api/apiatomcollection.py\", line 5, in <module>\r\n    import opencog.cogserver\r\n  File \"atomspace.pxd\", line 148, in init opencog.cogserver (/home/hr/hansonrobotics/opencog/opencog/build/opencog/cython/opencog/cogserver.cpp:1831)\r\nImportError: /usr/local/share/opencog/python/opencog/atomspace.so: undefined symbol: _ZN7opencog4Atom13getTruthValueEv\r\n\r\n```", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/2597/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bgoertzel": {"issues": [{"url": "https://api.github.com/repos/opencog/opencog/issues/2591", "title": "English => Lojbanic Atoms semantic mapping", "body": "write script using pattern-mined English=>Lojban rules to create a set of Lojbanic Atoms representing the logical interpretation of a given English sentence", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/2591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/2590", "title": "script pattern mining English=>Lojban rules", "body": "Write Scheme script invoking Pattern Miner to learn rules mapping English link-grammar-link-combinations into lojbanic-Atom-combinations", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/2590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/2589", "title": "Complete Lojban parser!", "body": "Complete Lojban parser so it has near 100% coverage of Lojban language features", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/2589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/1742", "title": "Loading VariableNodes from backing store ", "body": "Suppose the Atomspace already contains\n\nSatisfyingSetLink (VariableNode \"$X\") (EvaluationLink (PredicateNode \"humans\") (ListLink (ConceptNode \"eat\") (VariableNode \"$X\")))\n\nand then someone loads, from the backing store, the construct\n\nSatisfyingSetLink (VariableNode \"$Y\") (EvaluationLink (PredicateNode \"humans\") (ListLink (ConceptNode \"eat\") (VariableNode \"$Y\")))\n\nAccording to my understanding of the current code [please correct me if I'm wrong], these will look different because the VariableNodes have different names, so they won't be merged. But actually they are redundant; they  mean the same thing. \n\nOf course this is just a simple example, much more complex ones are possible.\n\nWithout VariableNodes, the basic merge rule is that two Nodes are the same if they have the same name and type; and two Links are the same if they have the same type and target-list\n\nWith VariableNodes, it's more complicated...\n\nLet's use the term Scoping Link to mean any link that can specify a variable binding, e.g. BindLink, LambdaLink, SatisfyingSet, ForAll, etc. etc. \n\nEach Scoping link can be viewed as the root of an Atom-dag: follow the outgoing set of the ScopingLink, and the outgoing set of everything you find that way, etc. ... and you get the Scoping link's Atom-dag..\n\nSo the basic merge rule for Scoping links is: Two Scoping links are the same if they are roots of Atom-dags that are the same up to a renaming of the VariableNodes that they scope....\n\nIn theory this could be expensive to check; in practice currently our Scoping links don't scope extremely large variable lists, so there's not a big compute-time issue here...\n\nThe issue is to implement this merge rule for Scoping links...\n\n(Of course, this would be relevant to any system for passing Atoms from one Atomspace to another (via ZMQ or whatever); it's just that with our current infrastructure it would only come up in the context of the backing store...)\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/1742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/1305", "title": "Make basic QA system triggered by system motivations using OpenPsi", "body": "(this is mainly for Rodas)\n\nThis is a follow-on to Issue #1302\n\nAfter getting the Cogita-mod QA system specified there working, the next step will be integrate the above functionality into OpenPsi, based on creating a \"please the user\" goal, and an ImplicationLink indicating that if the user asks a question, then answering it will tend to please the user.   The above question-answering procedure (step 4) would then need to be wrapped into a SimpleQuestionAnswering schema, to be accessed via a GroundedSchemaNode.\n\nThis will be a simple working \"pre-alpha version\" for an OpenPsi-based dialogue system -- woo hoo!\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/1305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/1302", "title": "Modify Cogita chatbot to be a simple QA system utilizing RelEx2Logic, the microplanner/SuREal, and Man Hin's fuzzy sub-hypergraph matcher", "body": "(This is intended mainly for Rodas.)\n\nLook at the code for Linas's previous OpenCog-based chatbot,\n\nhttps://github.com/opencog/opencog/tree/master/opencog/nlp/chatbot\n\nThere is nothing too deep AI-wise here.  However, it is of interest operationally, because it contains code that connects OpenCog to an IRC chatbot.  This is a simple way to experiment with NLP dialogue in OpenCog, bypassing more general problems of interfacing with OpenCog via the Embodiment module. \n\nSo a meaningful task is: Write code that replaces the chat-generating code Linas's chatbot with a\nsimple question-answering functionality that works as follows.\n\n-- The user asks a question to the chatbot\n\n-- The NL comprehension pipeline is applied to the question, including R2L and all postprocessing\n\n-- A search is done to find a sub-hypergraph providing \"close match\" to {the subhypergraph obtained by applying the NL comprehension pipeline to the question} in the Atomspace.   (Fuzzy search/matching between Atomspace sub-hypergraphs is being implemented by Man Hin in\nthe OpenCog HK office right now.  It currently sorta works but gives too many bad results.  But he is currently improving it.\n\n-- The closest match found in the above step, is fed to the microplanner/SuReal to be turned into a sentence to be articulated\n\n-- the Sentence is said to the user, via the IRC chatbot interface\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/1302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/1296", "title": "NLP comprehension code should assign sensible truth values to linguistic Atoms", "body": "When a new word-instance is added to the Atomspace, the corresponding WordNode and ConceptNode should get their truth value's count incremented by 1.  This can be done using either SimpleTV or CountTV, it doesn't really matter for now.  The result will be that more frequent words/concepts get higher node probabilities, which allows meaningful probabilistic inference and learning of various sorts to be done across the Atomspace.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/1296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/1294", "title": "Reformulation of HebbianLink updating", "body": "Assuming InverseHebbianLinks are removed, it should be possible to simplify/modify HebbianLink updating as follows.\n\n...\n\nUpdate of\n\ns_hebbAB\n\ncould happen as follows, I think.\n\nWhen A is chosen for importance updating, then: If A is in the AF,\n\n1)\nThe following steps are done for each B in the AF...\n\nIf no link\n\nHebbianLink A B  <s>\n\nexists, then one is created with\n\ns = SimpleTV(1, 1/(1+k))\n\nIf a link\n\nL=HebbianLink A B <s>\n\nalready exists, then its truth value is merged (revised) with the\nvalue SimpleTV(1, 1/(1+k))\n\nAlso, if after revision we have s>s_AF, then the LTI of the link L\nshould be increased by an amount LTISmallIncrement (which should cause\nan equal amount of LTI to get taken from the central bank).   This is\nbecause the link is more interesting if it has a higher truth value,\nassuming it's higher than the expected value s_AF....   Probably the\nSTI of the link L should be increased in a comparable way....\n\n2)\nThe following steps are done for each B that is not in the AF, for\nwhich there exists a link\n\nL = HebbianLink A B <s>\n\n-- The truth value of the link L is revised (merged) with the\nSimpleTruthValue (0,1/(1+k))  where k>>1 is a \"personality parameter\"\n\n-- If s > s_AF, then\n------the LTI of the link L is decreased by an amount\nLTISmallDecrement (which should cause an equal amount of LTI to get\nput into the central bank).   This is because the link is less\ninteresting if it has a lower truth value (given that its strength is\ngreater than expected... it's now becoming less greater than\nexpected...)\n------ If, after revision, s<s_AF, then the LTI of the link L is\ndecreased by a ratio LTIBigDecrement.   This is because the link is\nnow really, really uninteresting (it's a HebbianLink between two Atoms\nthat co-occur in the AF slightly less than would be expected at random\n... booorrring...)\n\n-- If s < s_AF ( so s is conceptually \"inverse hebbian\"), then\n------the LTI of the link L is increased by an amount\nLTISmallIncrement (which should cause an equal amount of LTI to get\nput into the central bank).   This is because the tweak in truth value\nhas made the link MORE surprising, not less...\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/1294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/opencog/opencog/comments/4953545", "body": "C++ PLN shouldn't be routinely getting built as part of building OpenCog\nthese days, if indeed it is...\n\nOn Sun, Dec 29, 2013 at 9:40 PM, Alex van der Peet <notifications@github.com\n\n> wrote:\n> \n> Well obviously, but I never noticed it in the \u2018will not be built\u2019 segment\n> of the cmake output.\n> \n> From: jadeoneill [mailto:notifications@github.com]\n> Sent: 30 December 2013 06:48\n> To: opencog/opencog\n> Cc: Alex van der Peet\n> Subject: Re: [opencog] Fix a UTF-8 bug. (f6793d0)\n> \n> You mean C++ PLN? That's been obsolete for years!\n> \n> On Mon, Dec 30, 2013 at 12:17 AM, Alex van der Peet <\n> notifications@github.com> wrote:\n> \n> > Thanks Cosmo, that did the trick! Figured it would be something like\n> > that\u2026\n> > \n> > PLN will not be built now apparently, but I\u2019ll be looking into that\n> > myself\n> > in the coming week anyway.\n> > \n> > From: Cosmo Harrigan [mailto:notifications@github.com]\n> > Sent: 29 December 2013 10:12\n> > To: opencog/opencog\n> > Cc: Alex van der Peet\n> > Subject: Re: [opencog] Fix a UTF-8 bug. (f6793d0)\n> > \n> > Hi @Alex-van-der-Peet https://github.com/Alex-van-der-Peet , try\n> > deleting CMakeCache.txt in your build directory, and then run cmake ..\n> > again.\n> > \n> > CMake Error at lib/FindGuile.cmake:56 (MESSAGE):\n> > \n> > Found libguile.h but not version.h; check your guile installation!\n> > \n> > Call Stack (most recent call first):\n> > \n> > CMakeLists.txt:230 (FIND_PACKAGE)\n> > \n> > -- Configuring incomplete, errors occurred!\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub <\n> > \n> > https://github.com/opencog/opencog/commit/f6793d0b9d41edc1846bea80a95c25cd9cc136a0#commitcomment-4951019>\n> > \n> > . <\n> > \n> > https://github.com/notifications/beacon/2569494__eyJzY29wZSI6Ik5ld3NpZXM6QmVhY29uIiwiZXhwaXJlcyI6MTcwMzgxNTkzMiwiZGF0YSI6eyJpZCI6MjI1NjUyMDB9fQ==--19475ff4507b71f0cadfe5973ba6cd5eafc62f4e.gif>\n> > ---\n> > \n> > No virus found in this message.\n> > Checked by AVG - www.avg.com\n> > Version: 2014.0.4259 / Virus Database: 3658/6955 - Release Date:\n> > 12/27/13\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub<\n> > https://github.com/opencog/opencog/commit/f6793d0b9d41edc1846bea80a95c25cd9cc136a0#commitcomment-4951802>\n> > \n> > .\n> \n> \u2014\n> Reply to this email directly or view it on GitHub <\n> https://github.com/opencog/opencog/commit/f6793d0b9d41edc1846bea80a95c25cd9cc136a0#commitcomment-4952934>\n> . <\n> https://github.com/notifications/beacon/2569494__eyJzY29wZSI6Ik5ld3NpZXM6QmVhY29uIiwiZXhwaXJlcyI6MTcwMzg5MDA3NiwiZGF0YSI6eyJpZCI6MjI1NjUyMDB9fQ==--f28aed4becd9a18ddfbe4fda522d69e8f7b4828d.gif>\n> ---\n> \n> No virus found in this message.\n> Checked by AVG - www.avg.com\n> Version: 2014.0.4259 / Virus Database: 3658/6957 - Release Date: 12/28/13\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/opencog/opencog/commit/f6793d0b9d41edc1846bea80a95c25cd9cc136a0#commitcomment-4953472\n> .\n## \n\nBen Goertzel, PhD\nhttp://goertzel.org\n\n\"In an insane world, the sane man must appear to be insane\". -- Capt. James\nT. Kirk\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/4953545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/5609091", "body": "On Sat, Mar 8, 2014 at 11:36 PM, Linas Vepstas notifications@github.comwrote:\n\n> Dave, Yes, http://wiki.opencog.org/w/Opencog-github-flow is insanely\n> complicated and should be ... made to go away.\n\nPersonally I find Nil's stream-of-git-consciousness notes kind of poetic\n;=) ...\n\n> http://wiki.opencog.org/w/Development_standards#Git_HOWTO is good, and\n> could be ever so slightly better if something explained that \"origin\" is\n> actually https://guthub.com/my-user-name/opencog as otherwise it seems\n> like some mumbo jumbo. Likewise https://github.com/opencog/opencog ... oh\n> wait, its a wiki, I can do this myself..\n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/opencog/opencog/commit/10b939fbbdf9be48bdefca8871f33e37459c7486#commitcomment-5608959\n> .\n## \n\nBen Goertzel, PhD\nhttp://goertzel.org\n\n\"In an insane world, the sane man must appear to be insane\". -- Capt. James\nT. Kirk\n\n\"Emancipate yourself from mental slavery / None but ourselves can free our\nminds\" -- Robert Nesta Marley\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/5609091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/8362065", "body": "Hmmm.. an EvalLink with no arguments seems odd...\n\nI wonder if a more fundamental solution to the representation of questions\nin the Atomspace and PLN would be interesting/worthwile...\n\nI recall this paper which we discussed some time ago,\n\nhttp://www.gatsby.ucl.ac.uk/aistats/fullpapers/246.pdf\n\nThis basically defines a question as the set of all statements that could\nprovide answers to the question (including all statements that imply those\nstatements).  Of course this can straightforwardly be fuzzified...\n\nFor a truth-value query, just speculating freely, if we said \"to what\nextent is the book under the table?\"\n\nQuestionLink\n**_EvaluationLink\n___**_ under\n______ book\n______ table\n\nthen this could be taken to logically refer to the set of all possible\nAtoms of the form\n\n**_EvaluationLink <x>\n___**_ under\n______ book\n______ table\n\nOn the other hand if we said \"Is it definitely true that the book is under\nthe table?\" then we could interpret this as\n\nQuestionLink\n**EmbeddedTruthValueLink <1,1>\n___ ConceptNode \"universe\" (or whatever)\n___ EvaluationLink\n____** under\n______ book\n______ table\n\nFor \"What did  Bob eat?\" we could say\n\nQuestionLink: $var1\n__ EvaluationLink\n____ eat\n____ Bob\n____ VariableNode $var1\n\nso the QuestionLink would have to be interpretable as a quantifier of\nvariables in cases like this...\n\nI'm typing off the cuff here, but this approach would be consistent with\nthe logic of questions in the paper referenced above.  Extending PLN to\nformally handle the logic of questions would be fun.  OTOH maybe this is an\novercomplicated approach...\n\n-- Ben\n\nOn Thu, Oct 30, 2014 at 10:52 AM, William Ma notifications@github.com\nwrote:\n\n> I am not sure. This seems a bit different.\n> \n> Is this suppose to be similar to the maybe-rule?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/opencog/opencog/commit/f11144664278a59cbc432b1a0e5d3394606c0dd3#commitcomment-8361934\n> .\n## \n\nBen Goertzel, PhD\nhttp://goertzel.org\n\n\"The reasonable man adapts himself to the world: the unreasonable one\npersists in trying to adapt the world to himself. Therefore all progress\ndepends on the unreasonable man.\" -- George Bernard Shaw\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/8362065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/16433714", "body": "It will be interesting when PLN inference generalizes \"a key can open a chest of the same color\" and concludes it is an insight about \"keyhole surgery\" ;o ;D ...\n  http://www.totalhealth.co.uk/sites/www.totalhealth.co.uk/files/keyhole%20surgery.jpg\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/16433714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7885965", "body": "Do you think something's wrong with it?\n\nOn Mon, Nov 25, 2013 at 5:16 PM, Cosmo Harrigan notifications@github.comwrote:\n\n> In opencog/python/conceptnet/to_scm.py:\n> \n> > -       return stv\n> > -   except KeyError:\n> > -       if (\"  \"+ word.upper()) in  corpus_dict:\n> > -           stv.mean = float(corpus_dict[(\"  \"+ word.upper())])/twf\n> > -           stv.count = .95 # have no reason for this value\n> > -           conceptnet_dict[word] = stv\n> > -           return stv\n> > -       else:  \n> > -           stv.mean = 1/(twf + 1)\n> > -           stv.count = .95  # have no reason for this value\n> > -           conceptnet_dict[word] = stv\n> > -           return stv\n> > -   \n> >   +\n> >   +def write_file(cn_assertion, context): # assertion is a list\n> > -   DEFAULT_TV = TruthValue(1,0.5) # 0.5 confidence is used(for links) because that is the weight given to most of the assertions on ConceptNet\n> \n> I'm still curious what your thoughts are about this.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/opencog/opencog/pull/403/files#r7885527\n> .\n\n## \n\nBen Goertzel, PhD\nhttp://goertzel.org\n\n\"In an insane world, the sane man must appear to be insane\". -- Capt. James\nT. Kirk\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7885965/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7910658", "body": "That;s just a heuristic way to get some node probabilities into the system,\nto allow PLN to do some basic reasoning on commonsense concepts....  A\nrough guide to the everyday-life node probability of a concept may be the\ncorresponding word frequency in a big corpus.  Crude, but OK for initial\nexperimentation, I hope...\n\nOn Tue, Nov 26, 2013 at 7:54 AM, Cosmo Harrigan notifications@github.comwrote:\n\n> In opencog/python/conceptnet/to_scm.py:\n> \n> > -       return stv\n> > -   except KeyError:\n> > -       if (\"  \"+ word.upper()) in  corpus_dict:\n> > -           stv.mean = float(corpus_dict[(\"  \"+ word.upper())])/twf\n> > -           stv.count = .95 # have no reason for this value\n> > -           conceptnet_dict[word] = stv\n> > -           return stv\n> > -       else:  \n> > -           stv.mean = 1/(twf + 1)\n> > -           stv.count = .95  # have no reason for this value\n> > -           conceptnet_dict[word] = stv\n> > -           return stv\n> > -   \n> >   +\n> >   +def write_file(cn_assertion, context): # assertion is a list\n> > -   DEFAULT_TV = TruthValue(1,0.5) # 0.5 confidence is used(for links) because that is the weight given to most of the assertions on ConceptNet\n> \n>  Do you think something's wrong with it?\n> \n> No. I was just curious.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/opencog/opencog/pull/403/files#r7910511\n> .\n\n## \n\nBen Goertzel, PhD\nhttp://goertzel.org\n\n\"In an insane world, the sane man must appear to be insane\". -- Capt. James\nT. Kirk\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7910658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7912252", "body": "The .5 confidence is for words not in the corpus at all ... So the strength\nassigned to these words is kinda a arbitrary small number ... Maybe .5 is\ntoo big a confidence but it doesn't matter much, since taking corpus\nappearance as a proxy for concept frequency is a hack anyway ...  I mean ,\na rare word could connote a common concept and we are not trying to account\nfor that here .. But we are playing fast and loose here for basic\nexperimentation ...\n\nOn Tuesday, November 26, 2013, Cosmo Harrigan wrote:\n\n> In opencog/python/conceptnet/to_scm.py:\n> \n> > -       return stv\n> > -   except KeyError:\n> > -       if (\"  \"+ word.upper()) in  corpus_dict:\n> > -           stv.mean = float(corpus_dict[(\"  \"+ word.upper())])/twf\n> > -           stv.count = .95 # have no reason for this value\n> > -           conceptnet_dict[word] = stv\n> > -           return stv\n> > -       else:  \n> > -           stv.mean = 1/(twf + 1)\n> > -           stv.count = .95  # have no reason for this value\n> > -           conceptnet_dict[word] = stv\n> > -           return stv\n> > -   \n> >   +\n> >   +def write_file(cn_assertion, context): # assertion is a list\n> > -   DEFAULT_TV = TruthValue(1,0.5) # 0.5 confidence is used(for links) because that is the weight given to most of the assertions on ConceptNet\n> \n> I understood about the approach with the node probabilities... I was\n> actually curious about the 0.5 choice for link confidence.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/opencog/opencog/pull/403/files#r7911064\n> .\n\n## \n\nBen Goertzel, PhD\nhttp://goertzel.org\n\n\"In an insane world, the sane man must appear to be insane\". -- Capt. James\nT. Kirk\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7912252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8254621", "body": "I also wonder whether is some confusion underlying the use of this massive\namount of data\n\nKeyvan and I are discussing that in a separate, private thread....\n\nThe training data for a single composition formula (like A precedes B, B\nprecedes C, therefore A precedes C) shouldn't need to contain more than\n100^3 points or so.\n\nMaybe the 2GB file is used to _create_ the training data for each of the\ncomposition formulas, though....  In that case it could be a useful\nintermediate step.   But still the regression algorithm would only see a\nmillion triples, for each composition formula it's trying to induce...\n\nOn Wed, Dec 11, 2013 at 6:35 AM, Linas Vepstas notifications@github.comwrote:\n\n> In opencog/python/spatiotemporal/temporal_events/composition_formulas.py:\n> \n> > @@ -0,0 +1,73 @@\n> > +from spatiotemporal.temporal_events.formulas import TemporalRelation\n> > +from spatiotemporal.temporal_events.trapezium import generate_random_events\n> > +import os\n> > +import csv\n> > +import numpy as np\n> > +import ffx\n> > +\n> > +**author** = 'keyvan'\n> > +\n> > +\n> > +def create_sample_file(number_of_events=100):\n> \n> Yikes! Well, that's why ffx is slow. 2.4 GB is pretty outrageous. Looking\n> at the code, it looks like you generate 100^3 == 1 million events, each of\n> which is 2.4 KBytes. that seems wrong -- a single even should not use\n> 2.4KB, since a single event is just four float pt numbers. And generating a\n> million ... seems excessive. I don't understand what the point of this is,\n> but its certainly rather far from a minimal solution.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/opencog/opencog/pull/428/files#r8250597\n> .\n\n## \n\nBen Goertzel, PhD\nhttp://goertzel.org\n\n\"In an insane world, the sane man must appear to be insane\". -- Capt. James\nT. Kirk\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8254621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8254673", "body": "I don't know anything about python really, but Google shows\n\n418,000,000  hits for generic.py\n144,000,000 hits for main.py\n90,200,000 hits for init.py\n\n:)\nben\n\nOn Wed, Dec 11, 2013 at 2:58 AM, Keyvan Mir Mohammad Sadeghi <\nnotifications@github.com> wrote:\n\n> In opencog/python/spatiotemporal/temporal_events/generic.py:\n> \n> > @@ -1,15 +1,11 @@\n> > -from datetime import datetime\n> \n> That's something that we need to discuss with the rest of the team. We\n> need a naming convention for our python files. Often in major projects,\n> people are forced to put their files in packages (folders, I tried to\n> enforce this, but didn't succeed completely).\n> \n> In a package, you might have very specific files, these will get their\n> unique names. But some of the functions and classes are core to the\n> package. These go to a file named 'classes.py' or 'main.py' or whatever the\n> team convention is. 'generic.py' is what my 'main.py' should be here. I'll\n> rename once we agree on a convention.\n> \n> Then, the APIs that author oughts to share with the rest of the team (i.e.\n> the ones that are not internal workings) go to _init_.py so they can be\n> easily imported using only the ..\n> \n> Also, if there are some utility classes that are shared between the files\n> in a package, these should go to a file named 'util.py' in the package. If\n> the utility functions and classes are so generic that are used in other\n> packages in the root, they should go to the 'utility' package.\n> \n> I suggest that we create an issue to discuss this further.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/opencog/opencog/pull/428/files#r8242523\n> .\n\n## \n\nBen Goertzel, PhD\nhttp://goertzel.org\n\n\"In an insane world, the sane man must appear to be insane\". -- Capt. James\nT. Kirk\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8254673/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8254784", "body": "Actually that was a goof...\n\nThe training data for a single composition formula (like A precedes B, B\nprecedes C, therefore A precedes C) shouldn't need to contain more than\n100^2 triples or so, I would think...\n\nI mean, for each value\n\nx_1 =degree of A precedes B\nx_2 = degree of B precedes C\n\n[assume each value is drawn from within [0,1] with 2 decimal places of\nprecision]\n\nwe can calculate one estimated value of\n\nx_3 = degree of A precedes C\n\n(e.g. by averaging together all the values of x_3 calculated from specific\ncases for which x_1 is the best 2-decimal-place approximation of \"Degree of\nA precedes B\", and x_2 is the best 2-decimal-place approximation of \"Degree\nof B precedes C\")\n\nSo the regression algorithm only needs to get 10,000 or so data points,\nperhaps generated from a much larger file of events...\n\nOn Wed, Dec 11, 2013 at 9:09 AM, Ben Goertzel ben@goertzel.org wrote:\n\n> I also wonder whether is some confusion underlying the use of this massive\n> amount of data\n> \n> Keyvan and I are discussing that in a separate, private thread....\n> \n> The training data for a single composition formula (like A precedes B, B\n> precedes C, therefore A precedes C) shouldn't need to contain more than\n> 100^3 points or so.\n> \n> Maybe the 2GB file is used to _create_ the training data for each of the\n> composition formulas, though....  In that case it could be a useful\n> intermediate step.   But still the regression algorithm would only see a\n> million triples, for each composition formula it's trying to induce...\n> \n> On Wed, Dec 11, 2013 at 6:35 AM, Linas Vepstas notifications@github.comwrote:\n> \n> > In opencog/python/spatiotemporal/temporal_events/composition_formulas.py:\n> > \n> > > @@ -0,0 +1,73 @@\n> > > +from spatiotemporal.temporal_events.formulas import TemporalRelation\n> > > +from spatiotemporal.temporal_events.trapezium import generate_random_events\n> > > +import os\n> > > +import csv\n> > > +import numpy as np\n> > > +import ffx\n> > > +\n> > > +**author** = 'keyvan'\n> > > +\n> > > +\n> > > +def create_sample_file(number_of_events=100):\n> > \n> > Yikes! Well, that's why ffx is slow. 2.4 GB is pretty outrageous. Looking\n> > at the code, it looks like you generate 100^3 == 1 million events, each of\n> > which is 2.4 KBytes. that seems wrong -- a single even should not use\n> > 2.4KB, since a single event is just four float pt numbers. And generating a\n> > million ... seems excessive. I don't understand what the point of this is,\n> > but its certainly rather far from a minimal solution.\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHubhttps://github.com/opencog/opencog/pull/428/files#r8250597\n> > .\n> \n> ## \n> \n> Ben Goertzel, PhD\n> http://goertzel.org\n> \n> \"In an insane world, the sane man must appear to be insane\". -- Capt.\n> James T. Kirk\n\n## \n\nBen Goertzel, PhD\nhttp://goertzel.org\n\n\"In an insane world, the sane man must appear to be insane\". -- Capt. James\nT. Kirk\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8254784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/9463962", "body": "See\n\nhttp://www.ksl.stanford.edu/knowledge-sharing/kif/\n\nI believe the SUMO knowledge base comes in KIF format among others ... KIF\nis nice and easy to parse...\n\nOn Wed, Feb 5, 2014 at 12:41 PM, Linas Vepstas notifications@github.comwrote:\n\n> In tests/python/test_pln/scm/sumo/railway.kif:\n> \n> > @@ -0,0 +1,9 @@\n> > +(=>\n> \n> So .. what's \"kif\" ??\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/opencog/opencog/pull/526/files#r9450410\n> .\n\n## \n\nBen Goertzel, PhD\nhttp://goertzel.org\n\n\"In an insane world, the sane man must appear to be insane\". -- Capt. James\nT. Kirk\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/9463962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10503732", "body": "In the PLN, it is assumed that one can convert confidence values into count\nvalues, and vice versa\n\nMatt Ikle' and I derived some fancy formulas for doing that, published in a\nconference paper way back when,\n\nhttps://www.academia.edu/175929/Assessing_the_Weight_of_Evidence_Implicit_in_an_Indefinite_Probability\n\n(and based on certain assumptions, etc. etc.)\n\nHowever, in the code we have never used the fancy formulas, but just a\nsimple heuristic approximation borrowed from Pei Wang's NARS system.\n\nIn any case, for PLN, it is definitely valid to convert btw count values\nand confidence values...\n\nAs Linas notes, there might be other uses of count or confidence, valid for\nsome OpenCog applications, for which this kind of conversion does not make\nsense.   However, this fact should not be used as a basis for restricting\ncount/confidence conversion for PLN, which is important for PLN's\npurposes...\n\nIf someone wants to create\n\nProbabilityAndCountTruthValue // no conversion\n\nProbabilityAndConfidenceTruthValue // no conversion\n\nProbabilityAndCountOrConfidenceTruthValue // allowing conversion\n\nI don't mind, though it may be an unnecessary complication....  These might\nall be types of SimpleProbabilisticTruthValue, a subtype of\nSimpleTruthValue and also of ProbabilisticTruthValue\n\nAs Linas points out, it might be smart to distinguish\n\nSimpleProbabilisticTruthValue\n\nvs.\n\nSimpleFuzzyTruthValue\n\n-- the reuse of \"strength\" for both probability and fuzzy membership\ndegree, while sometimes convenient, can also sometimes cause confusion as\none has to know something about the Atom type to know whether the strength\nis a probability or fuzzy value...\n\nThere are lots of ways to slice the truth value types.....  But, in any\ncase, however they're sliced, PLN's simple truth values must be allowed to\nconvert freely btw count and confidence and back...\n\n-- Ben\n\nOn Wed, Mar 12, 2014 at 4:06 AM, Linas Vepstas notifications@github.comwrote:\n\n> In opencog/guile/SchemeSmobTV.cc:\n> \n> > ```\n> >         SCM rc = SCM_EOL;\n> >         rc = scm_acons(sconf, conf, rc);\n> >         rc = scm_acons(smean, mean, rc);\n> > ```\n> > -           rc = scm_acons(scount, count, rc);\n> \n> For the statistics that I do, I need to have a raw, integer count (or at\n> least, usually-an-integer), and a log-probability. To store the raw count,\n> I invented the CountTruthValue. It was minimal, and I was taking baby-steps\n> at the time.\n> \n> One of the issues is that the TruthValue::merge() method does this: if\n> (other->getConfidence() > getConfidence()) {...} which means that if you\n> try to add an atom to the atom space, but its already there with a\n> _different_ confidence, the confidence (and thus the count) will change\n> in an unexpected and perhaps surprising way.\n> \n> This kind of merging is perhaps correct, _when_ that's what you want ..\n> and its probably what PLN wants. But, for other things, it can really mess\n> things up, esp when the confidence/count is being used to hold something\n> else, something unrelated. In particular, its probably wrong for fuzzy\n> truth values, and its definitely wrong for probabilities.\n> \n> I think the solution is to move the merge() method into a\n> truth-value-specific method, so that different truth value types do\n> different things depending on what they are ... but its not clear what the\n> best way is, to do all this.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/opencog/opencog/pull/590/files#r10493055\n> .\n\n## \n\nBen Goertzel, PhD\nhttp://goertzel.org\n\n\"In an insane world, the sane man must appear to be insane\". -- Capt. James\nT. Kirk\n\n\"Emancipate yourself from mental slavery / None but ourselves can free our\nminds\" -- Robert Nesta Marley\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10503732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10739286", "body": "I can't think of a simple answer for how to determine c\n\nSuppose E1 and E2 are two bodies of evidence...\n\nlet\n\nc1 =P(E1 &E2) / P(E1)\n\nc2 =P(E1 & E2 ) / P(E2)\n\nThen the revision formula could be estimated as\n\nn = n1 + n2 - c1*n1\n\nor\n\nn = n1 + n2 - c2*n2\n\nAveraging those two values together would make sense...  The current\nformula uses\n\nc = P(E1 & E2) / P(E1 || E2)\n\nn = n1 + n2 - c*min(n1,n2)\n\nwhich amounts to about the same thing in most cases I guess...\n\nBut without some estimates of c1, c2 or c, this is all pretty fudgy...\n\none could concoct various heuristics for estimating the c values in various\nsituations.   But it seems there are many more basic issues to solve with\nPLN first...\n\nOn Wed, Mar 19, 2014 at 7:39 AM, Cosmo Harrigan notifications@github.comwrote:\n\n> In opencog/python/pln/rules/formulas.py:\n> \n> > @@ -473,10 +479,19 @@ def ontoInhFormula(tvs):\n> > \n> >  def revisionFormula(tvs):\n> > -    '''From the PLN Book: We may also heuristically form a count rule\n> > -    such as n = n1 + n2 - c min(n1, n2), where the parameter c indicates an\n> > -    assumption about the level of interdependency between the bases of\n> > -    information corresponding to the two premises. The value c=1 denotes\n> \n> I think we will need to clarify further how the value 'c' is determined\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/opencog/opencog/pull/610/files#r10731465\n> .\n\n## \n\nBen Goertzel, PhD\nhttp://goertzel.org\n\n\"In an insane world, the sane man must appear to be insane\". -- Capt. James\nT. Kirk\n\n\"Emancipate yourself from mental slavery / None but ourselves can free our\nminds\" -- Robert Nesta Marley\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10739286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13260030", "body": "> So, @ruiting https://github.com/ruiting, just so I understand you\n> correctly: You're saying that \"He works in science\" and \"He works in Hong\n> Kong\" should be represented differently? To differentiate, RelEx would need\n> to be able to tell that science is a field of study and Hong Kong is a\n> location which would require tremendous world knowledge. Am I missing your\n> point here?\n> \n> I think the point is that when RelEx treats a preposition as part of a\n> collocation, e.g. work_in, then RelEx2Logic will treat the collocation as a\n> single PredicateNode\n\nBut when RelEx does not treat the preposition as part of a collocation like\nthat, then RelEx2Logic will produce a separate PredicateNode for the\npreposition...\n\nI haven't run RelEx on the various examples discussed to see when it\nproduces a collocation and when it doesn't...\n\nben\n\n## \n\nBen Goertzel, PhD\nhttp://goertzel.org\n\n\"In an insane world, the sane man must appear to be insane\". -- Capt. James\nT. Kirk\n\n\"Emancipate yourself from mental slavery / None but ourselves can free our\nminds\" -- Robert Nesta Marley\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13260030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13117566", "body": "> +; Non-context specific axioms > + > +; 7) \"Accounting is associated\n> with money.\" > +(InheritanceLink (stv .7 .9) > + (ConceptNode \"Accounting\")\n> - (ConceptNode \"Money\"))\n> \n> I'm not sure that InheritanceLink is the right link type for this relation.\n> \n> \u2014\n\nSeems not... AssociativeLink or HebbianLink would be better...\n\nben\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13117566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13117609", "body": "In the PLN book there are Boolean operators on ConceptNodes, which are\nseparate from Boolean operators on PredicateNodes and Links (but sometimes\nconnoted with the same notation, a kind of perhaps confusing overloading)\n...\n\nThese are not used in the code at the moment, so far as I know...\n\nAnyway\n\n> -                (NotLink\n> -                    (ConceptNode \"CanadianPeople\"))\n\nfeatures Not as a logical node operator...\n\nben\n\nOn Wed, May 28, 2014 at 2:43 AM, Cosmo Harrigan notifications@github.comwrote:\n\n> In\n> tests/python/test_pln/scm/relex2logic_pln_examples/contextual-inference-rwr.scm:\n> \n> > -            (ListLink\n> > -                (VariableNode \"$X\")\n> > -                (VariableNode \"$Y\")))))\n> >   +\n> >   +\n> >   +; 10) Non Canadian People involved with Canadian\n> >   +; people in the context of money have a chance of\n> >   +; being associated with log trafficking activities.\"\n> >   +(AverageLink (stv .6 .8)\n> > -    (VariableNode \"$X\")\n> > -    (ImplicationLink\n> > -        (AndLink\n> > -            (SubsetLink\n> > -                (VariableNode \"$X\")\n> > -                (NotLink\n> > -                    (ConceptNode \"CanadianPeople\")))\n> \n> Doesn't this require a separate concept for \"NonCanadianPeople\" instead of\n> trying to embed \"CanadianPeople\" in a NotLink?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/opencog/opencog/pull/776/files#r13094446\n> .\n\n## \n\nBen Goertzel, PhD\nhttp://goertzel.org\n\n\"In an insane world, the sane man must appear to be insane\". -- Capt. James\nT. Kirk\n\n\"Emancipate yourself from mental slavery / None but ourselves can free our\nminds\" -- Robert Nesta Marley\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13117609/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13260022", "body": "You mean non-canadian people is a different concept from non-(canadian\npeople) ?\n\nyeah, definitely!\n\nfor example, a canadian dog is a non-(canadian person)\n\n..\n\nOn Sat, May 31, 2014 at 3:19 PM, Sebastian Ruder notifications@github.com\nwrote:\n\n> In\n> tests/python/test_pln/scm/relex2logic_pln_examples/contextual-inference-rwr.scm:\n> \n> > -            (ListLink\n> > -                (VariableNode \"$X\")\n> > -                (VariableNode \"$Y\")))))\n> >   +\n> >   +\n> >   +; 10) Non Canadian People involved with Canadian\n> >   +; people in the context of money have a chance of\n> >   +; being associated with log trafficking activities.\"\n> >   +(AverageLink (stv .6 .8)\n> > -    (VariableNode \"$X\")\n> > -    (ImplicationLink\n> > -        (AndLink\n> > -            (SubsetLink\n> > -                (VariableNode \"$X\")\n> > -                (NotLink\n> > -                    (ConceptNode \"CanadianPeople\")))\n> \n> I agree with Cosmo here. These are different concepts. I think for this\n> small universe, this is negligible, but in a bigger one PLN might come up\n> with unsound inferences based on this discrepancy.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/opencog/opencog/pull/776/files#r13259897.\n\n## \n\nBen Goertzel, PhD\nhttp://goertzel.org\n\n\"In an insane world, the sane man must appear to be insane\". -- Capt. James\nT. Kirk\n\n\"Emancipate yourself from mental slavery / None but ourselves can free our\nminds\" -- Robert Nesta Marley\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13260022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13321406", "body": "Ruiting and I thought about this for a while , and the only alternatives we\nfound were more complicated in other ways, so we settled on this...\n\nben\n\nOn Tue, Jun 3, 2014 at 2:29 PM, Cosmo Harrigan notifications@github.com\nwrote:\n\n> In tests/python/test_pln/scm/relex2logic_pln_examples/context-link.scm:\n> \n> > -        ; \"I like eating bass.\"\n> > -        ; RelEx at the moment delivers the wrong output for this sentence.\n> > -        ; Eating is interpreted as an adjective:\n> > -        ; _obj(like, bass)\n> > -        ; _subj(like, I)\n> > -        ; _amod(bass, eating)\n> > -        ; The output produced by RelEx2Logic should be:\n> > -        (EvaluationLink\n> > -            (PredicateNode \"like\")\n> > -            (ListLink\n> > -                (ConceptNode \"I\")\n> > -                (EvaluationLink\n> > -                    (PredicateNode \"eat\")\n> > -                    (ListLink\n> > -                        (ConceptNode \"I\")\n> > -                        (ConceptNode \"bass@12345\")))))\n> \n> Is there an alternate formulation for this expression that doesn't involve\n> a second nested \"I\"?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/opencog/opencog/pull/776/files#r13320789.\n\n## \n\nBen Goertzel, PhD\nhttp://goertzel.org\n\n\"In an insane world, the sane man must appear to be insane\". -- Capt. James\nT. Kirk\n\n\"Emancipate yourself from mental slavery / None but ourselves can free our\nminds\" -- Robert Nesta Marley\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13321406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13419473", "body": "Sebastian,\n\nYou raise a good point regarding the use of frame-based versus\nnon-frame-based representations.\n\nWe have been using a non-frame-based approach for Subjects and Objects of\nverbs....   However I have now suggested using more of a frame-based\napproach for other verb arguments.   This raises the question of whether it\nmight be better to use a frame-based approach for Subjects and Objects as\nwell.\n\nIndeed it might be.  I can think of two arguments against the frame-based\napproach:\n\n1)  It uses more Atoms\n\n2)  We already have a bunch of RelEx2Logic rules written using the\nnon-frame-based approach, and it would be a pain for Ruiting and Rodas and\nothers to rewrite them into a frame-based approach ;p\n\nIn the end the two approaches are semantically equivalent and are both\nfairly simple, so it doesn't seem a huge deal...\n\n...\n\nI will elaborate a bit further, so others understand the issue fully and\ncan express their own views...\n\nIn an OpenCog predecessor system,  instead of  e.g.\n\nEvaluationLink\n    eat\n    ListLink\n         Ben\n         stir-fried caterpillar\n\nwe  used a frame-based format like\n\nEvaluationLink\n     Agent\n     ListLink\n         eat99\n         Ben\n\nEvaluationLink\n     Patient\n     ListLink\n         eat99\n         stir-fried caterpillar\n\nInheritance eat99 eat\n\nThis is OK.... However, apart from using more Atoms, the problem w/ this is\nthat in many cases, disambiguating whether the first argument (the subject\nof a verb, say) is really an \"agent\" or not becomes tricky....   For\ninstance in the case\n\nEvaluationLink\n     appear\n     ListLink\n           Ben\n           ridiculous\n\nBen is not the Agent and ridiculous the Patient ...\n\nSo figuring out the right semantic role label for the subject and object of\na verb gets tricky, meaning that before one does (PLN-based?) semantic\ndisambiguation one will have a lot of Atoms like\n\nEvaluationLink\n     map_of_Subject\n     ListLink\n         eat99\n         Ben\n\nEvaluationLink\n     map_of_Object\n     ListLink\n         eat99\n         stir-fried caterpillar\n\nInheritance eat99 eat\n\nEvaluationLink\n     map_of_Subject\n     ListLink\n         appear44\n         Ben\n\nEvaluationLink\n     map_of_Object\n     ListLink\n         appear44\n         ridiculous\n\nInheritance appear44 appear\n\n...\n\nThis frame-based approach is not really wrong and could possibly be a\nbetter approach...   But it doesn't add any meaning over the style where\none says\n\nEvaluationLink\n    eat\n    ListLink\n         Ben\n         stir-fried caterpillar\n\nEvaluationLink\n     appear\n     ListLink\n           Ben\n           ridiculous\n\nand it does introduce a bunch of extra Atoms...\n\nIn either case once one finds out the actual role played by the subject and\nobject one has to create new Atoms....  So in the non frame based case, if\none find out Ben is the Agent and stir-fried caterpillar is the Patient,\none can still create\n\nEvaluationLink\n     Agent\n     ListLink\n         eat99\n         Ben\n\nEvaluationLink\n     Patient\n     ListLink\n         eat99\n         stir-fried caterpillar\n\nNote that, to do the semantic disambiguation, the Atomspace could contain\ngeneral knowledge of the form\n\nImplication\n   Evaluation\n       eat\n       ListLink\n           $X\n           $Y\n   ThereExists $Z\n        ANDLink\n            Inheritance $Z eat\n            EvaluationLink Agent (ListLink $Z $X)\n            EvaluationLink Patient (ListLink $Z $Y)\n\nexpressing knowledge about the semantic roles of the subject and object of\n\"eat\", or\n\nImplication\n   ANDLink\n       Evaluation\n          map_from_Subject\n          ListLink\n             $X\n             $Y\n       InheritanceLink $X eat\n   Evaluation\n       Agent\n       ListLink\n           $X\n           $Y\n\nImplication\n   ANDLink\n       Evaluation\n          map_from_Object\n          ListLink\n             $X\n             $Y\n       InheritanceLink $X eat\n   Evaluation\n       Patient\n       ListLink\n           $X\n           $Y\n\nIn this case the disambiguation is easy -- the subject of \"eat\" is pretty\nmuch always the Agent, and the object the Patient.  In many cases, it's\nless obvious and the disambiguation requires some context...\n\nIn short, you may be right that it's inelegant to treat the Subject and\nObject of a verb using non-frame-based representation, and the other\narguments of the verb (e.g. expressed via prepositions or relative\nclauses)  using frame-based representation.   Using frame-based\nrepresentation for everything would be more consistent.   On the other\nhand, it doesn't seem to matter much, because if PLN can't effectively\nconvert btw these sorts of similar representations, it won't be able to do\nany interesting conceptual inferences either....\n\nAlso, we note that in the case where the function-argument relation is\ndefined by, say, a preposition rather than a subject or object slot, we\nusually have a little more information about the meaning, e.g. we my have\n\nEvaluationLink\n     in\n     ListLink\n          Ben999\n          house\n\nHere we have \"in\" instead of something even vaguer like \"map_of_Subject\"\nbecause the syntax of English uses the word \"in\" to denote the\nfunction-argument relationship, rather than just using the position in the\nsentence (as in the case of Subject).\n\nNote that I am using \"map_of_Subject\" as a PredicateNode name here instead\nof \"Subject\" to emphasize the point that Subject is a syntax-level\nrelationship, vs. Agent and Patient which are semantics-level\nrelationships...   Of course this is a fuzzy distinction, and e.g. \"in\" is\nbeing used in both semantic and syntactic forms.\n\nIn the end language is a mess, and there is always gonna be some mess in\nmapping language into any formal system.  As long as the mappings used are\nrelatively simple, and are mutually consistent with each other, a suitably\npowerful reasoning engine should be able to sort out the mess.....\nUltimately the hard problem is inferring contextual knowledge from the mass\nof mess, and using it to guide judgments; and the hardness of this is\nprobably not dependent on the particular choices of how to arrange the\nrepresentations of individual semantic features...\n\n-- Ben\n\nOn Wed, Jun 4, 2014 at 1:14 AM, Sebastian Ruder notifications@github.com\nwrote:\n\n> In tests/python/test_pln/scm/relex2logic_pln_examples/context-link.scm:\n> \n> > -        ; \"I like eating bass.\"\n> > -        ; RelEx at the moment delivers the wrong output for this sentence.\n> > -        ; Eating is interpreted as an adjective:\n> > -        ; _obj(like, bass)\n> > -        ; _subj(like, I)\n> > -        ; _amod(bass, eating)\n> > -        ; The output produced by RelEx2Logic should be:\n> > -        (EvaluationLink\n> > -            (PredicateNode \"like\")\n> > -            (ListLink\n> > -                (ConceptNode \"I\")\n> > -                (EvaluationLink\n> > -                    (PredicateNode \"eat\")\n> > -                    (ListLink\n> > -                        (ConceptNode \"I\")\n> > -                        (ConceptNode \"bass@12345\")))))\n> \n> @bgoertzel https://github.com/bgoertzel, I understand the logic behind\n> it: I think this is the most consistent way and preempts other, more\n> difficult cases where the subject of the subordinate clause isn't the same\n> as for the main clause and makes the representation analogous to\n> that-clauses. Even so, I would appreciate it if you could comment briefly\n> why you didn't choose to use a link for such cases containing only verb and\n> object:\n> \n> (EvaluationLink\n>     (PredicateNode \"like \")\n>     (ListLink\n>         (ConceptNode \"I\")\n>         (TodoLink/GerundLink\n>             (PredicateNode \"eat\")\n>             (ConceptNode \"bass@12345\"))))\n> \n> Or why you didn't choose to make like, say, ternary, as kind of a thought\n> experiment:\n> \n> (EvaluationLink\n>     (PredicateNode \"like \")\n>     (ListLink\n>         (ConceptNode \"I\")\n>         (PredicateNode \"eat\")\n>         (ConceptNode \"bass@12345\"))))\n> \n> Anyway, I pushed a partial explanation for this as requested by Linas.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/opencog/opencog/pull/776/files#r13346447.\n\n## \n\nBen Goertzel, PhD\nhttp://goertzel.org\n\n\"In an insane world, the sane man must appear to be insane\". -- Capt. James\nT. Kirk\n\n\"Emancipate yourself from mental slavery / None but ourselves can free our\nminds\" -- Robert Nesta Marley\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13419473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13419967", "body": "FYI according to FrameNet,\n\nhttps://framenet2.icsi.berkeley.edu/fnReports/data/frameIndex.xml?frame=Create_sensation\n\na frame-based rendering of \"Ben appears ridiculous\" would be\n\nEvaluationLink\n    Phenomenon\n    ListLink\n       appear_88\n       Ben\n\nEvaluationLink\n   Appraisal\n   ListLink\n      appear_88\n      ridiculous\n\nInheritance appear_88 appear\n\nInheritance appear Perception\n\n...\n\nso in this case instead of Agent/Patient we have Phenomenon/Appraisal ...\n\nOf course FrameNet is not all-knowing and an OpenCog system could use a\ndifferent method for disambiguation of semantic roles...\n\n-- Ben\n\nOn Thu, Jun 5, 2014 at 8:48 AM, Ben Goertzel ben@goertzel.org wrote:\n\n> Sebastian,\n> \n> You raise a good point regarding the use of frame-based versus\n> non-frame-based representations.\n> \n> We have been using a non-frame-based approach for Subjects and Objects of\n> verbs....   However I have now suggested using more of a frame-based\n> approach for other verb arguments.   This raises the question of whether it\n> might be better to use a frame-based approach for Subjects and Objects as\n> well.\n> \n> Indeed it might be.  I can think of two arguments against the frame-based\n> approach:\n> \n> 1)  It uses more Atoms\n> \n> 2)  We already have a bunch of RelEx2Logic rules written using the\n> non-frame-based approach, and it would be a pain for Ruiting and Rodas and\n> others to rewrite them into a frame-based approach ;p\n> \n> In the end the two approaches are semantically equivalent and are both\n> fairly simple, so it doesn't seem a huge deal...\n> \n> ...\n> \n> I will elaborate a bit further, so others understand the issue fully and\n> can express their own views...\n> \n> In an OpenCog predecessor system,  instead of  e.g.\n> \n> EvaluationLink\n>     eat\n>     ListLink\n>          Ben\n>          stir-fried caterpillar\n> \n> we  used a frame-based format like\n> \n> EvaluationLink\n>      Agent\n>      ListLink\n>          eat99\n>          Ben\n> \n> EvaluationLink\n>      Patient\n>      ListLink\n>          eat99\n>          stir-fried caterpillar\n> \n> Inheritance eat99 eat\n> \n> This is OK.... However, apart from using more Atoms, the problem w/ this\n> is that in many cases, disambiguating whether the first argument (the\n> subject of a verb, say) is really an \"agent\" or not becomes tricky....\n> For instance in the case\n> \n> EvaluationLink\n>      appear\n>      ListLink\n>            Ben\n>            ridiculous\n> \n> Ben is not the Agent and ridiculous the Patient ...\n> \n> So figuring out the right semantic role label for the subject and object\n> of a verb gets tricky, meaning that before one does (PLN-based?) semantic\n> disambiguation one will have a lot of Atoms like\n> \n> EvaluationLink\n>      map_of_Subject\n>      ListLink\n>          eat99\n>          Ben\n> \n> EvaluationLink\n>      map_of_Object\n>      ListLink\n>          eat99\n>          stir-fried caterpillar\n> \n> Inheritance eat99 eat\n> \n> EvaluationLink\n>      map_of_Subject\n>      ListLink\n>          appear44\n>          Ben\n> \n> EvaluationLink\n>      map_of_Object\n>      ListLink\n>          appear44\n>          ridiculous\n> \n> Inheritance appear44 appear\n> \n> ...\n> \n> This frame-based approach is not really wrong and could possibly be a\n> better approach...   But it doesn't add any meaning over the style where\n> one says\n> \n> EvaluationLink\n>     eat\n>     ListLink\n>          Ben\n>          stir-fried caterpillar\n> \n> EvaluationLink\n>      appear\n>      ListLink\n>            Ben\n>            ridiculous\n> \n> and it does introduce a bunch of extra Atoms...\n> \n> In either case once one finds out the actual role played by the subject\n> and object one has to create new Atoms....  So in the non frame based case,\n> if one find out Ben is the Agent and stir-fried caterpillar is the Patient,\n> one can still create\n> \n> EvaluationLink\n>      Agent\n>      ListLink\n>          eat99\n>          Ben\n> \n> EvaluationLink\n>      Patient\n>      ListLink\n>          eat99\n>          stir-fried caterpillar\n> \n> Note that, to do the semantic disambiguation, the Atomspace could contain\n> general knowledge of the form\n> \n> Implication\n>    Evaluation\n>        eat\n>        ListLink\n>            $X\n>            $Y\n>    ThereExists $Z\n>         ANDLink\n>             Inheritance $Z eat\n>             EvaluationLink Agent (ListLink $Z $X)\n>             EvaluationLink Patient (ListLink $Z $Y)\n> \n> expressing knowledge about the semantic roles of the subject and object of\n> \"eat\", or\n> \n> Implication\n>    ANDLink\n>        Evaluation\n>           map_from_Subject\n>           ListLink\n>              $X\n>              $Y\n>        InheritanceLink $X eat\n>    Evaluation\n>        Agent\n>        ListLink\n>            $X\n>            $Y\n> \n> Implication\n>    ANDLink\n>        Evaluation\n>           map_from_Object\n>           ListLink\n>              $X\n>              $Y\n>        InheritanceLink $X eat\n>    Evaluation\n>        Patient\n>        ListLink\n>            $X\n>            $Y\n> \n> In this case the disambiguation is easy -- the subject of \"eat\" is pretty\n> much always the Agent, and the object the Patient.  In many cases, it's\n> less obvious and the disambiguation requires some context...\n> \n> In short, you may be right that it's inelegant to treat the Subject and\n> Object of a verb using non-frame-based representation, and the other\n> arguments of the verb (e.g. expressed via prepositions or relative\n> clauses)  using frame-based representation.   Using frame-based\n> representation for everything would be more consistent.   On the other\n> hand, it doesn't seem to matter much, because if PLN can't effectively\n> convert btw these sorts of similar representations, it won't be able to do\n> any interesting conceptual inferences either....\n> \n> Also, we note that in the case where the function-argument relation is\n> defined by, say, a preposition rather than a subject or object slot, we\n> usually have a little more information about the meaning, e.g. we my have\n> \n> EvaluationLink\n>      in\n>      ListLink\n>           Ben999\n>           house\n> \n> Here we have \"in\" instead of something even vaguer like \"map_of_Subject\"\n> because the syntax of English uses the word \"in\" to denote the\n> function-argument relationship, rather than just using the position in the\n> sentence (as in the case of Subject).\n> \n> Note that I am using \"map_of_Subject\" as a PredicateNode name here instead\n> of \"Subject\" to emphasize the point that Subject is a syntax-level\n> relationship, vs. Agent and Patient which are semantics-level\n> relationships...   Of course this is a fuzzy distinction, and e.g. \"in\" is\n> being used in both semantic and syntactic forms.\n> \n> In the end language is a mess, and there is always gonna be some mess in\n> mapping language into any formal system.  As long as the mappings used are\n> relatively simple, and are mutually consistent with each other, a suitably\n> powerful reasoning engine should be able to sort out the mess.....\n> Ultimately the hard problem is inferring contextual knowledge from the mass\n> of mess, and using it to guide judgments; and the hardness of this is\n> probably not dependent on the particular choices of how to arrange the\n> representations of individual semantic features...\n> \n> -- Ben\n> \n> On Wed, Jun 4, 2014 at 1:14 AM, Sebastian Ruder notifications@github.com\n> wrote:\n> \n> > In tests/python/test_pln/scm/relex2logic_pln_examples/context-link.scm:\n> > \n> > > -        ; \"I like eating bass.\"\n> > > -        ; RelEx at the moment delivers the wrong output for this sentence.\n> > > -        ; Eating is interpreted as an adjective:\n> > > -        ; _obj(like, bass)\n> > > -        ; _subj(like, I)\n> > > -        ; _amod(bass, eating)\n> > > -        ; The output produced by RelEx2Logic should be:\n> > > -        (EvaluationLink\n> > > -            (PredicateNode \"like\")\n> > > -            (ListLink\n> > > -                (ConceptNode \"I\")\n> > > -                (EvaluationLink\n> > > -                    (PredicateNode \"eat\")\n> > > -                    (ListLink\n> > > -                        (ConceptNode \"I\")\n> > > -                        (ConceptNode \"bass@12345\")))))\n> > \n> > @bgoertzel https://github.com/bgoertzel, I understand the logic behind\n> > it: I think this is the most consistent way and preempts other, more\n> > difficult cases where the subject of the subordinate clause isn't the same\n> > as for the main clause and makes the representation analogous to\n> > that-clauses. Even so, I would appreciate it if you could comment briefly\n> > why you didn't choose to use a link for such cases containing only verb and\n> > object:\n> > \n> > (EvaluationLink\n> >     (PredicateNode \"like \")\n> >     (ListLink\n> >         (ConceptNode \"I\")\n> >         (TodoLink/GerundLink\n> >             (PredicateNode \"eat\")\n> >             (ConceptNode \"bass@12345\"))))\n> > \n> > Or why you didn't choose to make like, say, ternary, as kind of a thought\n> > experiment:\n> > \n> > (EvaluationLink\n> >     (PredicateNode \"like \")\n> >     (ListLink\n> >         (ConceptNode \"I\")\n> >         (PredicateNode \"eat\")\n> >         (ConceptNode \"bass@12345\"))))\n> > \n> > Anyway, I pushed a partial explanation for this as requested by Linas.\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/opencog/opencog/pull/776/files#r13346447.\n> \n> ## \n> \n> Ben Goertzel, PhD\n> http://goertzel.org\n> \n> \"In an insane world, the sane man must appear to be insane\". -- Capt.\n> James T. Kirk\n> \n> \"Emancipate yourself from mental slavery / None but ourselves can free our\n> minds\" -- Robert Nesta Marley\n\n## \n\nBen Goertzel, PhD\nhttp://goertzel.org\n\n\"In an insane world, the sane man must appear to be insane\". -- Capt. James\nT. Kirk\n\n\"Emancipate yourself from mental slavery / None but ourselves can free our\nminds\" -- Robert Nesta Marley\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13419967/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13532066", "body": "Looks right to me...\n\nOn Mon, Jun 9, 2014 at 3:59 PM, Sebastian Ruder notifications@github.com\nwrote:\n\n> In\n> tests/python/test_pln/scm/relex2logic_pln_examples/contextual-inference-rwr.scm:\n> \n> > -            (ListLink\n> > -                (VariableNode \"$X\")\n> > -                (VariableNode \"$Y\")))))\n> >   +\n> >   +\n> >   +; 10) Non Canadian People involved with Canadian\n> >   +; people in the context of money have a chance of\n> >   +; being associated with log trafficking activities.\"\n> >   +(AverageLink (stv .6 .8)\n> > -    (VariableNode \"$X\")\n> > -    (ImplicationLink\n> > -        (AndLink\n> > -            (SubsetLink\n> > -                (VariableNode \"$X\")\n> > -                (NotLink\n> > -                    (ConceptNode \"CanadianPeople\")))\n> \n> Would one define this concept in terms of an inheritance from the\n> intersection of two distinct concepts?\n> \n> (InheritanceLink\n>     (ConceptNode \"Non-CanadianPeople\")\n>     (AndLink\n>         (NotLink\n>              (ConceptNode \"Canadian))\n>         (ConceptNode \"People\")))\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/opencog/opencog/pull/776/files#r13531850.\n\n## \n\nBen Goertzel, PhD\nhttp://goertzel.org\n\n\"In an insane world, the sane man must appear to be insane\". -- Capt. James\nT. Kirk\n\n\"Emancipate yourself from mental slavery / None but ourselves can free our\nminds\" -- Robert Nesta Marley\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13532066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "leungmanhin": {"issues": [{"url": "https://api.github.com/repos/opencog/opencog/issues/2508", "title": "forward-chainer: C++ exception when running chatbot-psi", "body": "Not sure how to reliably reproduce this yet, but it appeared after starting the chatbot-psi for a while (even if I was not actively chatting with it). This exception caused the pln-reasoner to crash\r\n```\r\nscheme@(guile-user)> In thread:\r\nuncaught throw to C++-EXCEPTION: (cog-fc The variable (VariableNode \"__EXECUTION_OUTPUT_VAR__\") ; [6495469486552467932][NULL]\r\n does not appear (unquoted) in any clause! (/home/manhin/hansonrobotics/opencog/atomspace/opencog/atoms/pattern/PatternLink.cc:469)\r\nFunction args:\r\n((SetLink\r\n)\r\n (ConceptNode \"rb3\")\r\n (SetLink\r\n)\r\n))\r\n```", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/2508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/2459", "title": "R2L outputs for sentences with only one word", "body": "Currently the R2L outputs for many of the one word sentences (e.g. \"hi\", \"hello\", \"good\", \"welcome\" etc) look like this:\n\n```\n(ReferenceLink\n   (InterpretationNode \"sentence@123\")\n   (SetLink\n      (InheritanceLink\n         (InterpretationNode \"sentence@123\")\n         (DefinedLinguisticConceptNode \"DeclarativeSpeechAct\")\n      )\n   )\n)\n```\n\nwhich seems to contain almost no useful information related to the input at all, is it intended or should it includes more?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/2459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/2008", "title": "The word \"quiet\" is missing from the R2L outputs of \"Please keep quiet.\"", "body": "Below is the R2L output of `(nlp-parse \"Please keep quiet.\")`, but the word `quiet` is missing:\n\n```\n(ReferenceLink\n   (InterpretationNode \"sentence@8d2c7a6b-cef6-49ca-a40f-66a8da67caef_parse_0_interpretation_$X\")\n   (SetLink\n      (InheritanceLink\n         (ConceptNode \"please@ab2a0503-2334-4083-9f0d-d4cb47057c5a\")\n         (ConceptNode \"please\" (ptv 1 0 1))\n      )\n      (ImplicationLink\n         (PredicateNode \"keep@f407a36b-8805-4daa-93ce-da21819f0297\")\n         (PredicateNode \"keep\" (ptv 1 0 1))\n      )\n      (InheritanceLink\n         (SatisfyingSetLink\n            (PredicateNode \"keep@f407a36b-8805-4daa-93ce-da21819f0297\")\n         )\n         (ConceptNode \"please@ab2a0503-2334-4083-9f0d-d4cb47057c5a\")\n      )\n      (InheritanceLink\n         (InterpretationNode \"sentence@8d2c7a6b-cef6-49ca-a40f-66a8da67caef_parse_0_interpretation_$X\")\n         (DefinedLinguisticConceptNode \"ImperativeSpeechAct\")\n      )\n      (InheritanceLink\n         (PredicateNode \"keep@f407a36b-8805-4daa-93ce-da21819f0297\")\n         (DefinedLinguisticConceptNode \"imperative\")\n      )\n   )\n)\n```\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/2008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/opencog/opencog/commits/172b087603d4b43af643b59b1e9eea8d35c1dd5e", "message": "Merge pull request #2976 from leungmanhin/psi\n\nUse AndLink instead of SequentialAndLink for the psi-rules"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/521cf8c6d50e1eca0ec37b7305469c0077e13147", "message": "Replace SequentialAndLink with AndLink"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/d01234c9996032d74b58430343f85b46c596a167", "message": "Merge pull request #2961 from leungmanhin/mst\n\nPreserve the MST parses when doing unsupervised language learning"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/c4d9ed9bf1ae5133bf36f8273169e92c30e0a3cf", "message": "Merge branch with 'master'"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/a4661a8d9c6dd26b6b928f9eb4576ec88bd5793d", "message": "Provide a way to export the MST parses to a file"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/a878eb1f8564394f0709b5e2a305abb90e31197c", "message": "Remove the instances from RAM after the parse"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/58bd9a3f82b0bce98449078e465920c8d2483b66", "message": "Make the mstparse-insts clearer"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/1b97b553c95f5bc88a20a057c01f04c07b377cd6", "message": "Store the extra atoms"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/9fa9be370828d9ce746f13f9bc9d4dfe53f0a80b", "message": "Add comments"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/44aa513a094570e5af2edb49d4fc42f39006ef7d", "message": "Record the parse of a sentence"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/ec297b57d07e8b40244978baccd4798e4777ad00", "message": "Merge pull request #2955 from leungmanhin/ull\n\nFix typos"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/2a8883db22db6fe80fceb970835bda9c98adf682", "message": "Fix typos"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/c6f65406cc3f17efbc469501d6ba24a4578e7ce8", "message": "Merge pull request #2950 from leungmanhin/ghost\n\nMisc updates to Ghost"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/7378290797730c82414be73b8802c2927676b915", "message": "Provide a way to disable the debug mode"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/ed8999ef16e7ecb055992de9fefee5dbcf45156c", "message": "Update README"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/0e590aeac05571b999d83ed2ef78b8f03d0935c5", "message": "Fix load sequence"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/e6cd009b97115604e167964d63f1fb2164e251c6", "message": "Split idioms"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/ee1f18cac9394b7ba4f1649039ab91e59b1fcac8", "message": "Not to generate more than one glob for rules with functions only"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/d6fc66f1572b912b172e22059457f824cdff7f53", "message": "Merge pull request #2948 from leungmanhin/ghost\n\nMinor fixes in Ghost"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/08c0d3ba66d00d26bb764659c3984db168c41012", "message": "Flatten the list for TTS-features"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/85dd678987a8af9bcbf51b568db2ad0adf00f593", "message": "Take numbers for ID in the parser"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/ae9044560d4af676e111d6e5414f7362c77513b4", "message": "Merge pull request #2947 from leungmanhin/ghost\n\nImplement the goal-driven action selection in Ghost"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/89283ad8250ea7d364fa5c5c6d7de5662e10fda0", "message": "Update README"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/2e0317bea008a6a8b9b295758fe9b6bcd6010aeb", "message": "Finish the work for rejoinders"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/00d37fee81ade68dcc794bfc946f9c686a8879c1", "message": "Handle topical rules"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/4567b6fa775851a6f2f777aebc8e848f61085695", "message": "Make topic features and keywords optional"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/ff655343f7fc20e80f3e0f944e562134a548e63a", "message": "Workaround for the default STI"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/c75d16693241a0acf1b514be4e6e9ec9df95a89e", "message": "Warn the author if no goal is defined"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/b9b90e5fcd2fb86a45718d9215377e56852fb4fb", "message": "Bugfix"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/bab1399bae266d8583cd3295e20c2a00dd05c3a3", "message": "Implement goal-driven action selection"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/859e930ce8042f519958e2f732551ed56045706f", "message": "Associate the rule with its topic differently"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/c1c69023cd0c891219257d75c9ae8c95181e4cf4", "message": "Define the GHOST component"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/18d93750144f2e426f43f09f8008ee7ee187f962", "message": "Remove the hack"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/9283c3799b14b17d85c63fa226a8f438fab60664", "message": "Update README"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/02a83e276ef2f20634c1551fd7d564d028e4200c", "message": "Warn the user if the value being assigned to a user-variable is null"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/c19432e3c290945ec9ce30ddeb1edcf0427a0036", "message": "Implement 'noaccess'"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/a30929682609a1c1520a4860f4ea2043b4a2627f", "message": "Support topic-level 'keep'"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/996f077ca17ee66962060d75d3c99c1800f4ef54", "message": "Accept topic-level features"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/e9a028866f1d6e3c44bf23d4536a89d7e9bafd11", "message": "Fix the 'name' also"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/89bd7bff3bfc02bfecaa696539e6110e186414a0", "message": "Fix NUM usages in the parser"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/e6271693fc1e6f6cfbcd9b536f72ee136e19a319", "message": "Move Ghost out of the nlp directory"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/5aa7d8b86b27d5dd0c2edd93a6d3f6789f695812", "message": "Update comments"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/5098e70b52207762abe3b34332e8be162359cd57", "message": "Update ghost-prefix function"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/834a47c979eb75e0ab2ecdb968ceefa17a43c7d7", "message": "Remove obsolete variables"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/21378a99cf305c041f1e8f18b54f5b3fe77687ce", "message": "Remove the catch"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/9f00d88936a82e92b04545ab7e43ddd4bd2aeb8b", "message": "Merge pull request #2944 from leungmanhin/op\n\nFix the variable names in the psi-rule related functions"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/10f578a617830e1ac7093fc46d74fc7c508107cd", "message": "Fix variable names"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/783f696300a82e0310ff38bc2614b1814294faf6", "message": "Merge pull request #2940 from leungmanhin/ghost-topic\n\nMore topic management updates in Ghost"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/182ef4110f4f778685326a225fad971f16dd55ce", "message": "Misc updates"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/51a35c360940f116514f03a7ea64befb8cde1b42", "message": "Implement the rule level keep function"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/fb71aa395e28ba6b371b41aa9669ae0d16fb42a2", "message": "Fix the return"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/4f0ffa5b31a2bc9bdc2e54b916267c8bd9e296ee", "message": "Update the value after a rule has been executed"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/8d191b243b873e1f09317432c267ee70fc656bf6", "message": "Some renaming"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/90bfd5c126a3e36d0edb69e02535dadde6eaa2e3", "message": "Update the action selector"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/fad1fbe88855c963ed9f284ca8c1635b2869c0c7", "message": "Change the way for name generation"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/93ba67710fd28021448a1b84c90ae0dab938c832", "message": "Use the label for recording"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/c604054885da95f4ba45cce4e9ec00101d8b19dd", "message": "Fix syntax"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/2490fb4906eaa407dd23d28a3a10718685cc8dff", "message": "Label each of the rule internally even if a label is not given"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/89244ef12e0dce4528de505dfc38cbbe7b309c2c", "message": "Put the rejoinder condition in the context of the rule"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/34e063c3d849e4f0f1e93beac5ff53679975a13b", "message": "Assign the 'rank' to the rules"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/ca1f4cc60a065febcf59642a746abf0ef16e4ccb", "message": "Use values to record the rule types"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/1c1abd298a54e7b42e0889769c087f59c6c4e25f", "message": "Add a remark"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/29e53a61d697ff4a706acd96790dedb9ada41adf", "message": "Minor refactoring"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/d0d83954f2c2bd124af54fea7bf1307c01537287", "message": "Generate the required atomese"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/785348866539d75175d078a9c9a293aae1ca48e9", "message": "Pass the gambits too"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/cbfc3f18bb0810208d85ebdba8c6b7eb8e0ad55e", "message": "Pass along the types to the translator"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/ab9b1f09cedfbd4d5db63cde40589fcfeb4635c7", "message": "Take a type when creating a rule"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/83bcc9427d726baa3139641ce223796577b2fd46", "message": "Merge pull request #2937 from leungmanhin/ghost-parse\n\nHandle those TTS features in Ghost"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/0bf9926c4bf2a34c5be6ccf89511f03383513dfd", "message": "Handle it in the translator"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/bd4949b1fe3a25f23b325de0b8787229c9ebe0d2", "message": "Accept numbers as well, for user variables"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/e09504af74f68ae2e16817a771300cd2e358dd27", "message": "Update the format returned by the parser"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/8c96de27464dae99233623a0887a804fa0cf6538", "message": "Parse those tts markers"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/a7caeaa0df64ff1b27cb14797d9ae92b37a88763", "message": "Merge pull request #2936 from leungmanhin/ghost-optional\n\nSupport having optional words in the pattern of a Ghost rule"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/236682b78c669997432d046c9795c18d9937f940", "message": "Update README etc"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/c1c9b9bd4875a4aab1a2aee0260c0d9184f5d58d", "message": "Remove unneeded consecutive wildcards"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/27db044399dbbe5c637a033fbf35125c5d9a697b", "message": "Handle in the translator"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/e4034a5ec40bafe2a13322e2efcf2c6353a6020d", "message": "Add the new \"optional\" terms"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/e90574b9528a872e938438cccd14cdd6c02008d5", "message": "Parse braces"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/85c6de08cc95d9febe7604d914088ba85b70e8e4", "message": "Merge pull request #2935 from leungmanhin/ghost-glob\n\nUse a ListLink to wrap the glob-grounding in Ghost"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/6bb084a617ed9004414b0863e4c82fcee3b95ab6", "message": "Use ListLink to wrap the glob groundings"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/opencog/opencog/comments/17281121", "body": "@eddiemonroe Looks like some missing modules will also lead to these errors, https://github.com/opencog/opencog/pull/2138 should fix the problem, I changed the flow a bit as well, let me know if you see any problems, thanks\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/17281121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "tanksha": {"issues": [{"url": "https://api.github.com/repos/opencog/opencog/issues/2477", "title": "OpenCog pattern miner not working", "body": "Hello,\r\nI am using OpenCog pattern miner for the attached scheme files loaded to the AtomSpace, and it is not working.\r\n\r\n**STEPS I followed**\r\n\r\n1. Start opencog server with the config file  `-c ../lib/opencog_patternminer.conf` and relex server\r\n\r\n2. Telnet to opencog server on port 17001 and access the scheme shell\r\n\r\n3. `(use-modules (opencog) (opencog nlp) (opencog nlp chatbot) (opencog nlp relex2logic))`\r\n\r\n4. `(clear)` to remove the VariableNode instances created by nlp and relex2logic modules (OpencCog pattern miner encounters an error finding VariableNode in the atomspace)\r\n\r\n6. `(load-scm-from-file \"test-dialogue.scm\")`\r\n    `(load-scm-from-file \"back-ground.scm\")`\r\n\r\n7. Exit the scheme shell and load the test pattern miner agent module\r\n   `loadmodule <OPENCOG_REPO>/build/opencog/learning/PatternMiner/libTestPatternMinerAgent.so`\r\n\r\n8. From the opencog server I got this\r\n```\r\nListening on port 17001\r\nDebug: PatternMining start! Max gram = 4, mode = Depth_First\r\nStart thread 0 from 0 to 4765\r\n0% completed in Thread 0.\r\n```\r\nIt stays like this ... waited long but nothing happened\r\n\r\n**another example without the use of relex server**\r\n1. Start and connect to OpenCog server (using `../lib/opencog_patternminer.conf`)\r\n\r\n2. `(use-modules (opencog) (opencog nlp))`\r\n\r\n3. `(load-scm-from-file \"test-dialogue2.scm\")`\r\n    `(load-scm-from-file \"back-ground.scm\")`\r\nAs you see from the attached files `test-dialogue2.scm` doesn\u2019t call for `(nlp-parse)` rather each words of a sentence are listed as a WordNode and the InheritanceLink is created to the user which the sentence belongs. \r\n\r\n4. Exit the scheme shell and load the test pattern miner agent module\r\n   `loadmodule <OPENCOG_REPO>/build/opencog/learning/PatternMiner/libTestPatternMinerAgent.so`\r\n\r\n\r\nin this case the pattern miner starts mining and stops at some percent , here is the screen copy\r\n```\r\nListening on port 17001\r\nDebug: PatternMining start! Max gram = 4, mode = Depth_First\r\nStart thread 0 from 0 to 119\r\n51.6667% completed in Thread 0.\r\n```\r\n\r\n[dialogue-example.tar.gz](https://github.com/opencog/opencog/files/589429/dialogue-example.tar.gz)\r\n\r\n\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/2477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kim135797531": {"issues": [{"url": "https://api.github.com/repos/opencog/opencog/issues/1678", "title": "Improvement plan for Interaction Information algorithm", "body": "I'm working on a statistics module made by Shujing to apply it into blending algorithm. I've fixed the minor problems until now, but I will not make a PR for the moment since it still needs more fixing.\n\nThis is a list of the things I did: (c383aeb03b50ccf359041e8f8c1b35cb1b0fd6de)\n- Merge the template methods into header file.\n  - C++ template can not be implemented in a cpp file. (if we want to avoid using a hacky method)\n- Fix the bugs.\n  - Remove a non-standard function 'atoi()'. Start to use the lexical_cast in boost lib.\n  - Resolve the mismatched template types in algorithm.\n- Stabilize the code.\n  - Change 'int' in some parameters to 'long' to prevent the possible loss of data.\n  - Change 'float' in some parameters to 'double' to prevent the possible loss of data.\n  - Write 'inline' keyword to every template methods explicitly.\n  - Remove the 'using namespace std;' statement.\n  - Change the c-style library headers to cpp-style.\n  - Fix the delete statement mistake in DataProvider's destructor.\n- Improve the code style.\n  - Location of brackets, columns size, ...\n- Make a unit test.\n\nand TODO list still remain:\n- Remain bugs: It has little bug related with variable range mistake.\n- Secure problem: It use machine's absolute memory location as algorithm key. It causes many problems, so making a custom hash function would be greater than now.\n- Unit test: It does not using the assert statements.\n- Improve algorithm: It was coded to use bubble sort for every execution.\n- Remove a duplicate code: It has some duplicate codes such as sorting, calculating probabilitity, ...\n- Code Style: It uses camel case in everywhere.\n\nAfter make a PR, I will start to make a python binding. I'll make a statistics.pxd and statistics.pyx file in opencog/cython/opencog, then make class wrappers for DataProvider, Probability, Entropy, InteractionInformation. It seems to easiest way to use existing algorithm in Python, but any suggestions for python binding or overall plans are more than welcome!\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/1678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "misgeatgit": {"issues": [{"url": "https://api.github.com/repos/opencog/opencog/issues/1581", "title": "Adding opencog clangformat to opencog directory ", "body": "Hi all,\n\nI was just thinking if we can have an opencog clangformat file inside opencog directory which I think will be helpful.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/1581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/1506", "title": "Stimulating atoms outside of a mind agent", "body": "Currently atoms can only be stimulated with in an Agent class instance. Is there any particular reason for this design choice? What is the disadvantage of making stimulus attribute of an Atom class and stimulation a method defined by the AtomSpace class?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/1506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/1431", "title": "Strange PLN output", "body": " I am confused with application of this https://github.com/opencog/opencog/blob/master/opencog/reasoning/RuleEngine/rules/pln/contextualize.scm#L214\n\n```\nguile >(clear) (load-scm-from-file \"/home/misgana/OPENCOG/opencog/opencog/python/pln/examples/deduction/atomspace_contents.scm\")\nguile>(load-scm-from-file \"/home/misgana/OPENCOG/opencog/opencog/reasoning/RuleEngine/rules/pln/contextualize.scm\")\nguile>(cog-bind pln-rule-create-and-as-2nd-arg-of-inheritance)\n(ListLink\n   (InheritanceLink\n      (ConceptNode \"Animal\" (stv 0.1 0.111111))\n      (AndLink\n         (ConceptNode \"Being\" (stv 0.1 0.111111))\n         (ConceptNode \"Being\" (stv 0.1 0.111111))\n      )\n   )\n   (InheritanceLink\n      (ConceptNode \"Frog\" (stv 0.0099999998 0.111111))\n      (AndLink\n         (ConceptNode \"Intelligent\" (stv 0.050000001 0.111111))\n         (ConceptNode \"Animal\" (stv 0.1 0.111111))\n      )\n   )\n   (InheritanceLink\n      (ConceptNode \"Frog\" (stv 0.0099999998 0.111111))\n      (AndLink\n         (ConceptNode \"Slimy\" (stv 0.0099999998 0.111111))\n         (ConceptNode \"Animal\" (stv 0.1 0.111111))\n      )\n   )\n   (InheritanceLink\n      (ConceptNode \"Frog\" (stv 0.0099999998 0.111111))\n      (AndLink\n         (ConceptNode \"Animal\" (stv 0.1 0.111111))\n         (ConceptNode \"Animal\" (stv 0.1 0.111111))\n      )\n   )\n   (InheritanceLink\n      (ConceptNode \"Frog\" (stv 0.0099999998 0.111111))\n      (AndLink\n         (ConceptNode \"Intelligent\" (stv 0.050000001 0.111111))\n         (ConceptNode \"Slimy\" (stv 0.0099999998 0.111111))\n      )\n   )\n   (InheritanceLink\n      (ConceptNode \"Frog\" (stv 0.0099999998 0.111111))\n      (AndLink\n         (ConceptNode \"Slimy\" (stv 0.0099999998 0.111111))\n         (ConceptNode \"Slimy\" (stv 0.0099999998 0.111111))\n      )\n   )\n   (InheritanceLink\n      (ConceptNode \"Frog\" (stv 0.0099999998 0.111111))\n      (AndLink\n         (ConceptNode \"Slimy\" (stv 0.0099999998 0.111111))\n         (ConceptNode \"Animal\" (stv 0.1 0.111111))\n      )\n   )\n   (InheritanceLink\n      (ConceptNode \"Frog\" (stv 0.0099999998 0.111111))\n      (AndLink\n         (ConceptNode \"Slimy\" (stv 0.0099999998 0.111111))\n         (AndLink\n            (ConceptNode \"Intelligent\" (stv 0.050000001 0.111111))\n            (ConceptNode \"Animal\" (stv 0.1 0.111111))\n         )\n      )\n   )\n   (InheritanceLink\n      (ConceptNode \"Frog\" (stv 0.0099999998 0.111111))\n      (AndLink\n         (ConceptNode \"Slimy\" (stv 0.0099999998 0.111111))\n         (AndLink\n            (ConceptNode \"Slimy\" (stv 0.0099999998 0.111111))\n            (ConceptNode \"Animal\" (stv 0.1 0.111111))\n         )\n      )\n   )\n   (InheritanceLink\n      (ConceptNode \"Frog\" (stv 0.0099999998 0.111111))\n      (AndLink\n         (ConceptNode \"Slimy\" (stv 0.0099999998 0.111111))\n         (AndLink\n            (ConceptNode \"Animal\" (stv 0.1 0.111111))\n            (ConceptNode \"Animal\" (stv 0.1 0.111111))\n         )\n      )\n   )\n   (InheritanceLink\n      (ConceptNode \"Frog\" (stv 0.0099999998 0.111111))\n      (AndLink\n         (ConceptNode \"Intelligent\" (stv 0.050000001 0.111111))\n         (ConceptNode \"Intelligent\" (stv 0.050000001 0.111111))\n      )\n   )\n   (InheritanceLink\n      (ConceptNode \"Frog\" (stv 0.0099999998 0.111111))\n      (AndLink\n         (ConceptNode \"Intelligent\" (stv 0.050000001 0.111111))\n         (ConceptNode \"Slimy\" (stv 0.0099999998 0.111111))\n      )\n   )\n   (InheritanceLink\n      (ConceptNode \"Frog\" (stv 0.0099999998 0.111111))\n      (AndLink\n         (ConceptNode \"Intelligent\" (stv 0.050000001 0.111111))\n         (ConceptNode \"Animal\" (stv 0.1 0.111111))\n      )\n   )\n   (InheritanceLink\n      (ConceptNode \"Frog\" (stv 0.0099999998 0.111111))\n      (AndLink\n         (ConceptNode \"Intelligent\" (stv 0.050000001 0.111111))\n         (AndLink\n            (ConceptNode \"Intelligent\" (stv 0.050000001 0.111111))\n            (ConceptNode \"Animal\" (stv 0.1 0.111111))\n         )\n      )\n   )\n   (InheritanceLink\n      (ConceptNode \"Frog\" (stv 0.0099999998 0.111111))\n      (AndLink\n         (ConceptNode \"Intelligent\" (stv 0.050000001 0.111111))\n         (AndLink\n            (ConceptNode \"Slimy\" (stv 0.0099999998 0.111111))\n            (ConceptNode \"Animal\" (stv 0.1 0.111111))\n         )\n      )\n   )\n   (InheritanceLink\n      (ConceptNode \"Frog\" (stv 0.0099999998 0.111111))\n      (AndLink\n         (ConceptNode \"Intelligent\" (stv 0.050000001 0.111111))\n         (AndLink\n            (ConceptNode \"Animal\" (stv 0.1 0.111111))\n            (ConceptNode \"Animal\" (stv 0.1 0.111111))\n         )\n      )\n   )\n   (InheritanceLink\n      (ConceptNode \"Frog\" (stv 0.0099999998 0.111111))\n      (AndLink\n         (ConceptNode \"Intelligent\" (stv 0.050000001 0.111111))\n         (AndLink\n            (ConceptNode \"Intelligent\" (stv 0.050000001 0.111111))\n            (ConceptNode \"Slimy\" (stv 0.0099999998 0.111111))\n         )\n      )\n   )\n   (InheritanceLink\n      (ConceptNode \"Frog\" (stv 0.0099999998 0.111111))\n      (AndLink\n         (ConceptNode \"Intelligent\" (stv 0.050000001 0.111111))\n         (AndLink\n            (ConceptNode \"Slimy\" (stv 0.0099999998 0.111111))\n            (ConceptNode \"Slimy\" (stv 0.0099999998 0.111111))\n         )\n      )\n   )\n   (InheritanceLink\n      (ConceptNode \"Frog\" (stv 0.0099999998 0.111111))\n      (AndLink\n         (ConceptNode \"Intelligent\" (stv 0.050000001 0.111111))\n         (AndLink\n            (ConceptNode \"Slimy\" (stv 0.0099999998 0.111111))\n            (AndLink\n               (ConceptNode \"Intelligent\" (stv 0.050000001 0.111111))\n               (ConceptNode \"Animal\" (stv 0.1 0.111111))\n            )\n         )\n      )\n   )\n   (InheritanceLink\n      (ConceptNode \"Frog\" (stv 0.0099999998 0.111111))\n      (AndLink\n         (ConceptNode \"Intelligent\" (stv 0.050000001 0.111111))\n         (AndLink\n            (ConceptNode \"Slimy\" (stv 0.0099999998 0.111111))\n            (AndLink\n               (ConceptNode \"Slimy\" (stv 0.0099999998 0.111111))\n               (ConceptNode \"Animal\" (stv 0.1 0.111111))\n            )\n         )\n      )\n   )\n   (InheritanceLink\n      (ConceptNode \"Frog\" (stv 0.0099999998 0.111111))\n      (AndLink\n         (ConceptNode \"Intelligent\" (stv 0.050000001 0.111111))\n         (AndLink\n            (ConceptNode \"Slimy\" (stv 0.0099999998 0.111111))\n            (AndLink\n               (ConceptNode \"Animal\" (stv 0.1 0.111111))\n               (ConceptNode \"Animal\" (stv 0.1 0.111111))\n            )\n         )\n      )\n   )\n   (InheritanceLink\n      (ConceptNode \"Peter\" (stv 0.001 0.111111))\n      (AndLink\n         (ConceptNode \"Frog\" (stv 0.0099999998 0.111111))\n         (ConceptNode \"Frog\" (stv 0.0099999998 0.111111))\n      )\n   )\n)\n```\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/1431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/opencog/opencog/commits/606c53baff8dab7475e294e04648500b1aa01708", "message": "Merge pull request #2956 from misgeatgit/fix\n\nParam load path update/fix"}, {"url": "https://api.github.com/repos/opencog/opencog/commits/3b3609a73266a24ec06f6a41e652885e9024136b", "message": "Param load path update/fix"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/opencog/opencog/comments/11491125", "body": "@ngeiswei  the above changes are causing loading error. \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/11491125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/11520626", "body": "@ngeiswei   it is working now. Thanks.  Below is the command that used to cause the error.\n\n```\n(load \"/home/misgana/OPENCOG/opencog/opencog/reasoning/pln/rules/deduction.scm\")  OR\n(load-scm-from-file  \"/home/misgana/OPENCOG/opencog/opencog/reasoning/pln/rules/deduction.scm\")\n```\n\nload function works now. However, the load-scm-from-file doesn't work. \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/11520626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "moikle": {"issues": [{"url": "https://api.github.com/repos/opencog/opencog/issues/1512", "title": "ECAN Simplification", "body": "At some future time, the new ECAN updating equations as expressed in http://wiki.opencog.org/w/New_ECAN_Equations should be implemented \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/1512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "williampma": {"issues": [{"url": "https://api.github.com/repos/opencog/opencog/issues/1441", "title": "BackwardChainer: Rule selection problem", "body": "It seems there is going to be some problem with rule selection.  Looking at the old PLN, the new PLN, and the PLN design at http://wiki.opencog.org/w/New_PLN_Chainer_Design#Overall_Backward_Chaining_Process  it seems the chainer chooses rules by matching the \"output\" (implicand of an ImplicationLink).\n\nHowever, as rules become more complex (like some current on-going discussion), it becomes impossible to tell what the rule \"output\" will be by just looking, as the output could be wrapped inside another function that does some processing first, and spit out different results.\n\nIs this a problem?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/1441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/1214", "title": "R2L: anaphora resolution?", "body": "We have some form of anaphora resolution for RelEx's opencog atoms, but not for R2L atoms.  Do we not need that as well for those logic atoms?\n\nI ask because in the process of working with SuReal, I cannot match the output of `(r2l \"John steals the orange and eats the orange.\")` or `(r2l \"John steals the orange and eats it.\")` with \n\n```\n(EvaluationLink (stv 0.99000001 0.99000001)\n    (PredicateNode \"steals@d88d647d-5c02-481e-b8d0-cfd20d33fb23\" (stv 0.001 0.99000001))\n    (ListLink (stv 0.99000001 0.99000001)\n        (ConceptNode \"Bob@fd5fb72f-0d3f-4517-8b20-8147df2ee7d3\" (stv 0.001 0.99000001))\n        (ConceptNode \"apple@ca552878-32d4-41e3-aaa3-34239ba98f34\" (stv 0.001 0.99000001))\n    )\n)\n(EvaluationLink (stv 0.99000001 0.99000001)\n    (PredicateNode \"eats@5ec780eb-a98b-4650-a680-3b0163a8822e\" (stv 0.001 0.99000001))\n    (ListLink (stv 0.99000001 0.99000001)\n        (ConceptNode \"Bob@fd5fb72f-0d3f-4517-8b20-8147df2ee7d3\" (stv 0.001 0.99000001))\n        (ConceptNode \"apple@ca552878-32d4-41e3-aaa3-34239ba98f34\" (stv 0.001 0.99000001))\n    )\n)\n```\n\nbecause both `(ConceptNode \"apple@ca55...\")` need to match to the same node, and we have two different \"orange\" in the first R2L output, and one \"orange\" and a \"it\" in the second.\n\nI suppose this requires the \"abstraction\" post-processing pipeline at some step as well?\n\n@AmeBel add to the Dialogue System milestone?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/1214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/1213", "title": "PLN: need support going from PredicateNode to EvaluationLink", "body": "Needed for R2L outputs like:\n\n```\n(EvaluationLink\n   (PredicateNode \"that\")\n   (ListLink\n      (PredicateNode \"glad@11\")\n      (PredicateNode \"won@22\")))\n(EvaluationLink\n   (PredicateNode \"glad@11\")\n   (ListLink\n       (ConceptNode \"he@33\")))\n(EvaluationLink\n   (PredicateNode \"won@22\")\n   (ListLink\n       (ConceptNode \"she@44\")))\n```\n\nsee https://github.com/opencog/relex/issues/124\n\n@AmeBel add this to the DialogueSystem milestone?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/1213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/1130", "title": "RelEx2Logic: better classification for post-processing & SuReal?", "body": "I mentioned this at https://github.com/opencog/relex/pull/190#issuecomment-64744376\n\nSo maybe something should be changed so that instead of currently\n\n```\nReferenceLink\n    InterpretationNode \"sentence@2341\"\n    SetLink\n       R2L links...\n```\n\nmaybe we need\n\n```\nReferenceLink\n    InterpretationNode \"sentence@2341\"\n    SomeOtherLink\n       R2L links that can be excluded from post-processing, and also excluded from SuReal\n    SetLink\n       R2L links that should be included in post-processing, and for SuReal\n```\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/1130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/opencog/opencog/comments/8347017", "body": "You redefined whencop-Q-rule here.  I think you meant whycop-Q-rule or something (but whycop-Q-rule is never called with the example sentence).\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/8347017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/8347055", "body": "This is an EvaluationLink with no argument.  Is this really OK?  (I am not sure.)\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/8347055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/8347357", "body": "I see you changed SVP rule to EvaulationLink.  But what about now that an adjective can have both a ConceptNode and a PredicateNode in the atomspace?\n\nLike `I am happy` and `The happy man danced.`, will create both `ConceptNode happy` and `PredicateNode happy`.  Is this OK to have two different abstracted \"happy\"?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/8347357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/8361934", "body": "I am not sure.  This seems a bit different.\n\nIs this suppose to be similar to the maybe-rule?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/8361934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/8362453", "body": "Does PLN really needs to know if the link came from a yes/no question?  It seems TruthValue query (yes/no questions) can be treated like a normal sentence, but with different \"confidence\" in the TruthValue.\n\nSo for sentences \"The book is under the table\", and \"Maybe the book is under the table.\" and \"Is the book under the table?\" can all create\n\n```\nEvaluationLink\n    under\n    book\n    table\n```\n\nexcept that\n- for the normal sentence, the confidence would be close to 1\n- for the maybe sentence, the confidence would be 0.5 or something\n- for the question, the confidence would be 0.1  (cannot be 0 I think)\n\nThen if the planner want to increase the confidence, it can say the EvaluationLink as an \"interrogative\", resulting in \"Is the book under the table?\".\n\nSimilarly for \"Is it definitely true that the book is under the table?\", it can be treated as \"it is definitely true that the book is under the table\", but with low confidence... (a bit weird I admit)\n\nAlthough I seem to recall that's not what the \"confidence\" value is used for... low confidence means it will be deleted soon from decay right?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/8362453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/8362791", "body": "Oh right, I forgot about the finding the answer part.\n\nHow is the pattern matcher triggered?  I assume by the dialogue system when a question is asked?  Maybe the pattern matcher can be triggered by the speech act type rather than the existence of variables... (just random thought).\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/8362791/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13167719", "body": "The \"maybe-rule\" right now as far as I can tell is only implemented on the RelEx2Logic side.  The helper function doesn't exist yet.\n\nKind of weird, I got a feeling I saw it exists before... maybe only in the wiki...\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13167719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13476159", "body": "I was basically following the recommandation\n\n> About this issue, we talked about cleaning the instance nodes that without definite-FLAG constraint, but please note that that constraint is only available for nouns, which are related with ConceptNode. I guess for all the adjective/adverb-extended ConceptNode, we can clean all the related instance nodes for now. For the PredicateNode, I think we should keep the instance, as they will be evaluated.\n\nAre there other word instances that should be cleaned?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13476159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13476628", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13476628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "rohit12": {"issues": [{"url": "https://api.github.com/repos/opencog/opencog/issues/1326", "title": "Slightly incorrect generation of parse in minimum spanning tree parse", "body": "The (mst-parse-text) function takes a sentence and then gives the minimum spanning tree parse of the given sentence. It outputs a list of word pairs. This it does by looking at the list of word-pairs that have been stored in the database. Once in a while, a word will come which it has not encountered before. So it does not create the wordnode for that word. This cause problems in further processing steps.\n\nThe sentence \"May God bless all of you\" has the following parse:\n\n```\n((1.6544489860534668 ((4 (WordNode \"all\" (ctv 1 0 50356))\n) (5 (WordNode \"of\" (ctv 1 0 984036))\n)))\n(-1000 ((5 (WordNode \"of\" (ctv 1 0 984036))\n) (6 (WordNode \"us\" (ctv 1 0 1844))\n))) \n(-1000 ((3 ()) (6 (WordNode \"us\" (ctv 1 0 1844))\n))) \n(-1000 ((2 (WordNode \"God\" (ctv 1 0 3182))\n) (3 ()))) \n(-1000 ((1 (WordNode \"May\" (ctv 1 0 10426))\n) (2 (WordNode \"God\" (ctv 1 0 3182))\n))))\n```\n\nHere, bless does not occur at all. The stage of code where it looks up the word in its database must be fixed.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/1326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cosmoharrigan": {"issues": [{"url": "https://api.github.com/repos/opencog/opencog/issues/611", "title": "DimEmbedModule is not threadsafe", "body": "The DimEmbedModule has slots registered with the AtomSpace Boost.Signals2 library for atom add and remove signals. The signal handlers in the module then perform add and remove operations against a `CoverTree` datastructure that stores the dimensional embedding. \n\nHowever, this datastructure is not threadsafe. Since the atomspace supports multithreaded operations, any modules that have connections with slots also need to be threadsafe.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/588", "title": "confidenceToCount ", "body": "The maximum value that `SimpleTruthValue::confidenceToCount` will return is 4473923584:\nhttps://github.com/opencog/opencog/blob/master/opencog/atomspace/SimpleTruthValue.cc#L110\n\nbut `SimpleTruthValue` stores `count` as a double:\nhttps://github.com/opencog/opencog/blob/master/opencog/atomspace/SimpleTruthValue.h#L50\nhttps://github.com/opencog/opencog/blob/186f25f8731e6fd912ceb915057d83997c3d3c8e/opencog/atomspace/TruthValue.h#L53\nwhich can have a very large value.\n\nthis seems confusing, because if you tried to convert back and forth between them, you would lose information; for example, if the count were very large, and you used countToConfidence and then confidenceToCount, the number would reduce dramatically. \n\nHow should this actually be implemented?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23279336", "body": "Thanks. What version of doxygen is used by the BuildBot?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23279336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23280344", "body": "We're building against Ubuntu 12.04 (Precise), and it appears to be using Doxygen version 1.7.6.1-2ubuntu1:\nhttps://launchpad.net/ubuntu/precise/+source/doxygen\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23280344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23310432", "body": "Duplicate of #249?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23310432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23310448", "body": "Duplicate of #249?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23310448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23310934", "body": "Thank you for fixing this! It will also help when using the [GTK Visualizer](http://wiki.opencog.org/w/Atomspace_Visualization#Atomspace_Visualizer), which relied on this functionality working properly.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23310934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [{"url": "https://api.github.com/repos/opencog/opencog/comments/3611725", "body": "To get the tests to build, I had to either add these two lines back to opencog/Ubigraph/CMakeLists.txt that Jade removed here:\nhttps://github.com/opencog/opencog/commit/7959905c9f8f87eb3400f94ff453fd604891b720\nor comment out \"#define USE_BITUBIGRAPHER\" in opencog/reasoning/pln/BackInferenceTreeNode.h\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/3611725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/3945391", "body": "The online [doxygen docs](http://buildbot.opencog.org/doxygen/index.html) have a problem now:\nhttp://158.132.219.213:8010/builders/doxygen/builds/323/steps/compile/logs/warnings%20%281%29\nwarning: ignoring unsupported tag `HTML_EXTRA_STYLESHEET  =' at line 842, file /home/buildbot/slave/doxygen/build/Doxyfile\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/3945391/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/4512651", "body": "Instance variable learnRuleFrequencies is sometimes uninitialized, I think it should be fixed like this:\nhttps://github.com/opencog/opencog/pull/377\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/4512651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/4868927", "body": "@jadeoneill the PLN tests are failing, could you check them?\nhttp://buildbot.opencog.org:8010/builders/opencog_master/builds/494/steps/test/logs/testlog\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/4868927/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/4939753", "body": "I also receive this error after pulling the latest version when I start the cogserver.\n\nInitially, using Ubuntu 12.04.3 with Guile version 1.8.8, since that is what is currently specified in ocpkg:\nhttps://github.com/opencog/ocpkg/blob/master/ocpkg#L127\n\nAnd, after upgrading to Guile 2.0.5, I still receive the error:\n\n```\nFile: ../opencog/scm/file-utils.scm line: 19\nBacktrace:\nIn current input:\n   1:  0* (use-modules (rnrs io ports))\n   1:  1  (eval-case (# # *unspecified*) (else #))\n   1:  2  (begin (process-use-modules (list (list #))) *unspecified*)\n   ?:  3* [process-use-modules (((rnrs io ports)))]\n   ?:  4  (let* ((interfaces #)) (call-with-deferred-observers (lambda () #)))\n   ?:  5* [map #<procedure #f (mif-args)> (((rnrs io ports)))]\n   ?:  6* [#<procedure #f (mif-args)> ((rnrs io ports))]\n   ?:  7* (or (apply resolve-interface mif-args) (error \"no such module\" mif-args))\n   ?:  8* [apply #<procedure resolve-interface (name . args)> ((rnrs io ports))]\n   ?:  9  [resolve-interface (rnrs io ports)]\n    ...\n   ?: 10  (let* (# # # # ...) (and # #) (if # public-i #))\n   ?: 11* (and (or (not module) (not public-i)) (error \"no code for module\" name))\n   ?: 12  [error \"no code for module\" (rnrs io ports)]\n    ...\n   ?: 13  [scm-error misc-error #f \"~A ~S\" (\"no code for module\" (rnrs io ports)) #f]\n\n<unnamed port>: In procedure scm-error in expression (scm-error (quote misc-error) #f ...):\n<unnamed port>: no code for module (rnrs io ports)\nABORT: misc-error\n\nFile: ../opencog/scm/repl-shell.scm line: 9\nBacktrace:\nIn current input:\n   1:  0* (use-modules (system repl server))\n   1:  1  (eval-case (# # *unspecified*) (else #))\n   1:  2  (begin (process-use-modules (list (list #))) *unspecified*)\n   ?:  3* [process-use-modules (((system repl server)))]\n   ?:  4  (let* ((interfaces #)) (call-with-deferred-observers (lambda () #)))\n   ?:  5* [map #<procedure #f (mif-args)> (((system repl server)))]\n   ?:  6* [#<procedure #f (mif-args)> ((system repl server))]\n   ?:  7* (or (apply resolve-interface mif-args) (error \"no such module\" mif-args))\n   ?:  8* [apply #<procedure resolve-interface (name . args)> ((system repl server))]\n   ?:  9  [resolve-interface (system repl server)]\n    ...\n   ?: 10  (let* (# # # # ...) (and # #) (if # public-i #))\n   ?: 11* (and (or (not module) (not public-i)) (error \"no code for module\" name))\n   ?: 12  [error \"no code for module\" (system repl server)]\n    ...\n   ?: 13  [scm-error misc-error #f ...]\n\n<unnamed port>: In procedure scm-error in expression (scm-error (quote misc-error) #f ...):\n<unnamed port>: no code for module (system repl server)\nABORT: misc-error\n```\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/4939753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/4941899", "body": "In addition to installing `guile-2.0`, I also needed to install `guile-2.0-dev` and then it worked okay.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/4941899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/4951019", "body": "Hi @Alex-van-der-Peet, try deleting CMakeCache.txt in your build directory, and then run `cmake ..` again.\n\n```\nCMake Error at lib/FindGuile.cmake:56 (MESSAGE):\n\n  Found libguile.h but not version.h; check your guile installation!\n\nCall Stack (most recent call first):\n\n  CMakeLists.txt:230 (FIND_PACKAGE)\n\n-- Configuring incomplete, errors occurred!\n```\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/4951019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/5055268", "body": "@keyvan-m-sadeghi What does opencog/python/sample_data/main.py do?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/5055268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/5593948", "body": "What is the meaning of the `|=` operator?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/5593948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/5608238", "body": "@jadeoneill Where did the constant **1.42** come from?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/5608238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/5636964", "body": "But SimpleTruthValue does store count: https://github.com/opencog/opencog/blob/master/opencog/atomspace/SimpleTruthValue.h#L50\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/5636964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/5637015", "body": "I'm finding an odd behavior when running PLN, where the count grows to a very large number. Currently, at 9.31099271352453e28, and I'm trying to track down what's going on.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/5637015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/5637800", "body": "Why do the files in the guile folder use tabs instead of spaces? Is that intentional?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/5637800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/5637907", "body": "The comment reads \"SimpleTruthValue does not store count anyway, there is no storage penalty associated with this\", but in fact, it does store count, right?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/5637907/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/5841835", "body": "Is it okay to change this again so that it does throw the exception?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/5841835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/5886684", "body": "Ok, I added that.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/5886684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/6280397", "body": "@jadeoneill Chainer inherits from AbstractChainer which inherits from Logic. [Logic](https://github.com/opencog/opencog/blob/706d449a88259c1aab37b309a3ab696e65345d52/opencog/python/pln/logic.py#L13) stores the atomspace in **self._atomspace**. Here it is stored again in **self.atomspace**. Is there a reason there two different names?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/6280397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/7951408", "body": "That is Aaron (anitzkin).\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/7951408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/8285085", "body": "@anitzkin your commits aren't being associated with your GitHub username, meaning the git configuration for your associated email addresses needs to be fixed.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/8285085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/8285092", "body": "@anitzkin You probably just need to add `anitzkin@gmail.com` at this page: https://github.com/settings/emails\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/8285092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/8805211", "body": "@linas the interface uses moses_exec because that is what you suggested:\n\n> So my answer is: use moses_exec. If someone comes back and doesn't like that, you have to figure out whether they really mean it, or if they just mis-understand how to use what is already there.  Coding up anything lower than moses_exec will cause a world of pain, the way I see it.\n> \n> BTW, its really not hard at all to write python code that just invokes moses from the command line. You really don't need to call the c++ library directly, I don't think.  Its probably easier/more stable/more maintainble/more future-proof to just call the command-line tool.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/8805211/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": [{"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/6365411", "body": "Pull request updated\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/6365411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/6365413", "body": "Pull request updated - moved to method doc strings\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/6365413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/6367424", "body": "Updated. Is auto-merge available now?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/6367424/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/6367427", "body": "Updated\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/6367427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/6367563", "body": "Oh, I thought the goal was to copy all the files needed to the build location.\n\nShould all .scm and .conf files stay in the source location? There are other ones already being copied, and I imagine it should be consistent.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/6367563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/6367574", "body": "But there is no /etc directory in the source or build trees. What is intended here?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/6367574/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/6367591", "body": "Okay, I will add it again. But, should it be named opencog-test.conf.example or opencog-test.conf?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/6367591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/6521517", "body": "Test is not passing:\n**undefined symbol: _ZN7opencog5Agent13stimulateAtomENS_6HandleEs)**\n\n```\n58/123 Testing: Cython\n58/123 Test: Cython\nCommand: \"/usr/local/bin/nosetests\" \"-vs\" \"/home/cosmo/opencog/src/tests/cython/\"\nDirectory: /home/cosmo/opencog/src/qtbin/tests/cython\n\"Cython\" start time: Sep 23 10:19 PDT\nOutput:\n----------------------------------------------------------\nFailure: ImportError (/home/cosmo/opencog/src/qtbin/opencog/cython/opencog/cogserver.so: undefined symbol: _ZN7opencog5Agent13stimulateAtomENS_6HandleEs) ... ERROR\n<end of output>\nTest time =   2.30 sec\n----------------------------------------------------------\nTest Failed.\n\"Cython\" end time: Sep 23 10:19 PDT\n\"Cython\" time elapsed: 00:00:02\n----------------------------------------------------------\n```\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/6521517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7179118", "body": "Yeah, it's because of the way Flask-RESTful has you register resources.\nhttps://github.com/cosmoharrigan/opencog/blob/ae59bfe08be4a45abd0c8dd99f7f8e286cf83e8f/opencog/python/web/api/apimain.py#L39\n\nI even asked them about it:\nhttps://github.com/twilio/flask-restful/issues/134\nhttp://stackoverflow.com/questions/19073952/flask-restful-how-to-add-resource-and-pass-it-non-global-data\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7179118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7179188", "body": "I was thinking about that too. Yes it would work. However, I was reading some information on recommended JSON REST API responses, for example this one, that suggest this approach:\n\nhttp://jsonapi.org/format/\n\n```\nSingular Resources\n\nSingular resources are represented as JSON objects. However, they are still wrapped inside an array:\n\n{\n  \"posts\": [{\n    // an individual post document\n  }]\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7179188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7211828", "body": "Fixed\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7211828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7211834", "body": "Comments added\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7211834/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7211844", "body": "Ok. There seem to be varying opinions on JSON REST API response formats. I hope a nice standard emerges.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7211844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7211856", "body": "Removed unnessary trailing slashes\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7211856/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7928223", "body": "Perhaps you could add a note in the wiki that CORS and JSONP are only enabled for GET operations, and won't work for PUT and POST operations? \n\nI see that the CORS extension that was recently added only supports GET. But for JSONP, would it be easy to move this function that wraps the return data to mappers.py, and then enable it on the PUT and POST operations too?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7928223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8083816", "body": "Removed in #416\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8083816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7800062", "body": "Are the AtomSpace, Link, Node modules needed or is only TruthValue needed?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7800062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7801895", "body": "If the context is the \"Universe\", is it necessary to include a ContextLink? To make it simpler, could you eliminate the ContextLink and the \"Universe\" ConceptNode so that example output number 1 would just be:\n\n```\n(InheritanceLink (stv 1.0 0.5)\n   (ConceptNode  \"america_beautiful\" (stv 2.52457494464e-09 0.95))\n   (ConceptNode  \"national_anthem\" (stv 2.52457494464e-09 0.95))\n)\n```\n\n?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7801895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7802163", "body": "`DEFAULT_TV2` is never used\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7802163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7802286", "body": "Is setting a 0.5 confidence value to the links a correct choice?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7802286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7885527", "body": "I'm still curious what your thoughts are about this.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7885527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7910511", "body": "> Do you think something's wrong with it?\n\nNo. I was just curious.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7910511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7911064", "body": "I understood about the approach with the node probabilities... I was actually curious about the 0.5 choice for link confidence.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7911064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7912415", "body": "Actually, I'm referring to the confidence value of the Links generated by the ConceptNet Relations being set to 0.5. Not the words that become nodes.\n(https://github.com/AmeBel/opencog/blob/58037b9fde235618205e625217e5d1d88ce0e50e/opencog/python/conceptnet/to_scm.py#L47)\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7912415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7995377", "body": "What do you think about the idea of retrieving the type name strings from the defined types - something like this?\n\n```\nfrom opencog.atomspace import types\n\ndef type_name(type):\n     return types.__dict__.keys()[types.__dict__.values().index(type)]\n```\n\n```\n>>> type_name(types.IntensionalInheritanceLink)\nOut[26]: 'IntensionalInheritanceLink'\n```\n\nThen the entry in `map_dict1` would look like:\n\n```\n\"/r/HasProperty\": type_name(types.IntensionalInheritanceLink)\n```\n\nand it would raise an error on types that aren't included in the enumeration.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7995377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8083742", "body": "@AmeBel let me know your thoughts regarding this suggestion. Thanks.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8083742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8104475", "body": "#417 fixes the only non-test reference to STIAboveThreshold and makes it use the new getHandlesByAV method.\n\nIn the code you're mentioning, I see that you have added \"deprecated\" and \"do not use\" notes. I can remove those parts too if you like.\n\nThe only thing I'm wondering is: if someone wanted to combine an STI filter with other filters, how could one do so, while still utilizing the ImportanceIndex?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8104475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8155669", "body": "@jadeoneill @AmeBel Using atomspace.print_list() is a good idea, but first that would require modifying the binding, because right now it would just print to stdout:\nhttps://github.com/opencog/opencog/blob/master/opencog/cython/opencog/atomspace.pxd#L153\nhttps://github.com/opencog/opencog/blob/master/opencog/atomspace/AtomSpace.h#L114\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8155669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8378380", "body": "Can you post a benchmark that demonstrates this assertion?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8378380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8411146", "body": "> Did you not even try this?\n\nYes, I tried this. However, `conceptnet4.scm` has other problems as well that @jadeoneill is currently helping fix, so it's not currently a good test case.\n\nI'll use atomspace_bm to do some benchmarking for further analysis.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8411146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8654572", "body": "I tested on 1.48. http://www.boost.org/users/history/ says Boost.Signals2 was added in 1.39 and had a bug fix in 1.46.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8654572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8838741", "body": "I didn't intend to include that line in this pull request. Updated.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8838741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/9019589", "body": "@jadeoneill - produces **ImportError: cannot import name predicate_rules** - do you have the missing file?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/9019589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/9414937", "body": "@jadeoneill This triggered Buildbot to [fail](http://buildbot.opencog.org:8010/builders/opencog_master/builds/566/steps/test/logs/testlog):\n\n``` ======================================================================\nERROR: Failure: ImportError (No module named util)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/usr/lib/python2.7/dist-packages/nose/loader.py\", line 390, in loadTestsFromName\n    addr.filename, addr.module)\n  File \"/usr/lib/python2.7/dist-packages/nose/importer.py\", line 39, in importFromPath\n    return self.importFromDir(dir_path, fqname)\n  File \"/usr/lib/python2.7/dist-packages/nose/importer.py\", line 86, in importFromDir\n    mod = load_module(part_fqname, fh, filename, desc)\n  File \"/home/buildbot/slave/opencog_master/build/tests/python/test_pln/pln_examples.py\", line 6, in <module>\n    import util\nImportError: No module named util\n```\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/9414937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/9810001", "body": "@linas Updated\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/9810001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10320896", "body": "Based on, for example,\nhttp://bisqwit.iki.fi/story/howto/openmp/#LoopNesting\nI do not think that 144 threads would be created, but I am not sure how one would enable nested parallelism here, since we're not using those OpenMP pragma directives. Regarding minimum chunk size, it seems that is what `gps.for_each_minimal_n = min_n;` in [oc_omp.cc](https://github.com/opencog/opencog/blob/a55b7a24ed057e550d760c90940acb702c2443be/opencog/util/oc_omp.cc#L33) is for.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10320896/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10321964", "body": "Ah. I was comparing OMP_ALGO with std::for_each. I'll remove this part.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10321964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10322502", "body": "Why 192.168.50.2?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10322502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10355019", "body": "This particular line is probably unnecessary since step #2 already cloned this repository.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10355019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10356187", "body": "Ah, I see, thanks.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10356187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10356233", "body": "Is this just for the vi editor? Perhaps it could be removed.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10356233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10490156", "body": "But SimpleTruthValue has a count, right here:\nhttps://github.com/opencog/opencog/blob/master/opencog/atomspace/SimpleTruthValue.h#L50\n`count_t count;`\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10490156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10490804", "body": "> Simple truth values only have a confidence.\n\nNo, there's a method `SimpleTruthValue::getConfidence`. It calls `countToConfidence` which returns `return countToConfidence(count);`. How can you say SimpleTruthValue doesn't have a count? If it doesn't have a count, then all these names would need to be revised.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10490804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10490854", "body": "There's even a method:\n\n```\ncount_t SimpleTruthValue::getCount() const\n{\n    return count;\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10490854/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10491284", "body": "But the initial definition of SimpleTruthValue (in Probabilistic Logic Networks, 2008) defines it as follows:\n\n```\nSimpleTruthValues, which consist of pairs of numbers. These pairs come in two forms:\n  - the default, <s,w>, where s is a strength and w is a \u201cweight of evidence\u201d \u2013 the latter \nbeing a number in [0,1] that tells you, qualitatively, how much you should believe the \nstrength estimate. The letter w will habitually be used to denote weight of evidence values.\n\n  - <s,N>, where N is a \u201ccount\u201d \u2013 a positive number telling you, qualitatively, the total\namount of evidence that was evaluated in order to assess s. There is a heuristic \nformula interrelating w and N, w=N/(N+k) where k is an adjustable parameter. The \nletter N will habitually be used to denote count. If the count version rather than the \nweight of evidence version is being used, this will be explicitly indicated, as the \nformer version is the default.\n```\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10491284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10491505", "body": "In fact, even the constructor for SimpleTruthValue uses count. \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10491505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10492148", "body": "Hmm... are you saying that you created the separate type `CountTruthValue` in order to address the second case in that quote?\n\nI found that @ngeiswei and you had started to discuss this before:\nhttps://groups.google.com/d/msg/opencog/ytIGDKdPEZo/z_bJ5p3dMagJ\n\nbut I think lots of existing code, like PLN, is built with the assumption that SimpleTruthValue does have a count attribute. (cc @jadeoneill)\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10492148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10731289", "body": "Probably these shouldn't be loaded in the default opencog.conf file\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10731289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10731297", "body": "Can you make the docstring formatting match the rest of the docstrings in the file?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10731297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10731362", "body": "Now this is a configurable constant, but what do you think will be a correct approach to setting it? Eventually does it need to be replaced with a function that depends on the context?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10731362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10731367", "body": "Docstring formatting doesn't match\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10731367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10731407", "body": "What does the 'i' parameter represent?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10731407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10731465", "body": "I think we will need to clarify further how the value 'c' is determined\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10731465/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10876035", "body": "Do you have any thoughts on the advantage or disadvantage of instantiating multiple instances with the location of the variable specified, versus a design where the rule automatically attempts all those combinations based on the arity of the predicate?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/10876035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/11798753", "body": "Heh. We should ask the author of the tome :)\nhttps://github.com/opencog/opencog/blame/master/tests/cython/guile/test_pattern.py#L24\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/11798753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12259977", "body": "Thanks for the updated script! Is \"octool\" needed, or can it be removed, since there is already \"install-dependencies-trusty\" which also invokes \"ocpkg\"?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12259977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12260095", "body": "I realize they do the same thing, but since this script exists, shouldn't this sentence refer to it instead?\ninstall-dependencies-trusty\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12260095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12262515", "body": "> Merging this pull now however will be immediately useful.\n\nIt was already merged.\n\n> octool, which will just spit out usage guidance if invoked with no arguments\n\nOh, I see! I hadn't realized that.\n\n> Add software repositories\n\nIs there still a use case for this option anymore, since the script is already part of the repository?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12262515/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12549851", "body": "Note that the agent defined in evaluation_to_member_agent.py can be used in two ways: it can be loaded into the CogServer as a mind agent, or it can be invoked from evaluation_to_member_example.py.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12549851/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12550073", "body": "But that's not a set, it's a tuple represented by the ListLink\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12550073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12550266", "body": "It's very nice to have these steps clearly expressed here as an explanation of the example inference process -- thanks for adding that.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12550266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12550466", "body": "The markdown formatting looks strange when the \"#####\" is used on a continuation line (here and in the other \"Note\" below) -- perhaps the two lines should be on one line, so the markdown formatting will look correct\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12550466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12550603", "body": "Files should end with one newline.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12550603/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12550739", "body": "Thanks for adding this example from Real World Reasoning! As you have noted, there will need to be discussion on how to represent some of these constructs.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12550739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12550790", "body": "As a convention, Scheme file names would often use dashes, rather than underscores.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12550790/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12550873", "body": "This one (#602) is closed\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12550873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12615702", "body": "Fixed in #750\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12615702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12615712", "body": "Name changed in #750\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12615712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12854090", "body": "Should we update all of the links in this file to have a non-zero confidence value, so that their instantiations will be valid inference candidates?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12854090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12854798", "body": "For the truth value of this ContextLink and others in this file, based on the example on page 154 of Real World Reasoning, and the syntax described on page 23 of Probabilistic Logic Networks, the \"<.9>\" value in the example is the strength value. So, to be consistent with the example as written, the truth value set here should have a .9 strength, plus some reasonably high confidence value. As currently written, it has a .5 strength.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12854798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12854951", "body": "Although the example in Real World Reasoning (for example, on page 154) does not include a truth value for the EvaluationLink, it will be necessary to define a truth value that is non-zero for all of the EvaluationLinks in this file, consistent with the syntax defined in http://wiki.opencog.org/w/ContextLink.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12854951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12855392", "body": "However, looking further at page 192 of Real World Reasoning, I note that it includes a second example of this ContextLink with the same arguments, where it does explicitly state a different truth value of \"<.5, .9>\", in which case the way it is stated here would be consistent with the example.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12855392/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12856087", "body": "Actually, I'm not certain about this syntax. In that wiki page, it states that\n\n```\nContextLink <TV>\n   C\n   R A B\n```\n\nis equivalent to\n\n```\nR <TV>\n   (A AND C)\n   (B AND C)\n```\n\nbut it includes an example\n\n```\nContextLink <0.0, 0.2>\n   ConceptNode \"Moon\"\n   EvaluationLink <0.8, 0.6>\n       PredicateNode isBlue\n       ConceptNode \"sky\"\n```\n\nSo, does that mean that if you have\n\n```\nContextLink <TV1>\n   C\n   R <TV2>\n     A \n     B\n```\n\nthat TV2 of R has no meaning? If so, then why was it included in that example? Further clarification is needed here.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12856087/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12857348", "body": "> A count of 1 will be correct\n\nYou mean a confidence?\n\n> But what will be the right strength value?\n\nI'm not sure. Maybe it should be 1 for initial experimentation?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12857348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12981912", "body": "That's an interesting question; I haven't had the chance to run any benchmarking to compare. \n\nIt would also be interesting to figure out if there is some way to avoid the overhead of \"getting into Scheme\" over and over, as you mentioned:\n\n> there is some X number of microseconds performance penalty getting into scheme, and out again\n\nwhile still being able to use Scheme.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12981912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13061325", "body": "@Alex-van-der-Peet This class has usages in other files that would also need to be renamed (example: https://github.com/opencog/opencog/search?q=EvaluationToMemberRule&ref=cmdform).\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13061325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13151214", "body": "Please see my comments here: https://github.com/opencog/opencog/issues/781#issuecomment-44454265\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13151214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13116007", "body": "\"PredicadeNode\" -> \"PredicateNode\"\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13116007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13116077", "body": "I think this expression requires a SatisfyingSetLink as the second argument of the outer InheritanceLink.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13116077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13116105", "body": "https://github.com/opencog/relex/pull/39 says that https://github.com/opencog/relex/pull/47 fixed this; how does the output look now?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13116105/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13116117", "body": "@AmeBel can you answer this question?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13116117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13116131", "body": "@AmeBel can you answer these two questions about infinitive constructions and embedded sentences?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13116131/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13116171", "body": "@bgoertzel @ruiting what would be the suggested approach for mapping approximate truth values to adverbs/modifiers?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13116171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13151866", "body": "> Woow that was confusing\n\n@AmeBel thanks for pointing that out - I have updated the comment so that it points to those issue numbers, but in the other correct repo now :)\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13151866/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13151967", "body": "> the post processing part of RelEx2Logic, which hasn't been implemented yet. Rodas or William will implement that soon, I think...\n\n@ruiting What is the post processing part of RelEx2Logic? Where will that be implemented?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13151967/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13093595", "body": "I suggest that we also need a very basic unit test demonstrating the functionality of ContextLink with PLN, since it will be a widely used link type in the future. Something that is much simpler than this example, containing a bare minimum example of separation of information into two separate contexts.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13093595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13094006", "body": "I'm not sure that InheritanceLink is the right link type for this relation.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13094006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13094029", "body": "Again, I'm not sure that InheritanceLink is the right link type for this relation.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13094029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13094198", "body": "Okay, so this binds the variables in the expression, as described [here](http://wiki.opencog.org/w/AverageLink); can the AverageLink be passed to the pattern matcher?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13094198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13094446", "body": "Doesn't this require a separate concept for \"NonCanadianPeople\" instead of trying to embed \"CanadianPeople\" in a NotLink?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13094446/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13094527", "body": "Here you're defining a query, so perhaps you could assign it a truth value with 0 confidence, and use the define command to associate it with a keyword, so that it can be queried later?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13094527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13148786", "body": "Ok, I found that section in the PLN book, at 10.6.2.1 on page 211.\n\nHowever, saying \n\n```\n(NotLink\n    (ConceptNode \"CanadianPeople\"))\n```\n\nwould mean \"things that are not canadian people\" whereas the sentence says\n\n```\nNon Canadian People\n```\n\nwhich I interpret as meaning something different: \"all things that are people but are not canadian people\", equivalent to another concept \"all people that are not canadian\" (the set difference of \"people\" and \"canadian people\").\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13148786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13320789", "body": "Is there an alternate formulation for this expression that doesn't involve a second nested \"I\"?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13320789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13517994", "body": "Alright, so this line would still need a distinct concept to be defined, then.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13517994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13518030", "body": "This should be converted to a different type such as AssociativeLink\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13518030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "TScottJ": {"issues": [{"url": "https://api.github.com/repos/opencog/opencog/issues/501", "title": "Passing empty string for 'name' parameter in REST API returns atoms when it shouldn't.", "body": "A request to the REST API with name parameter set to blank (example: \"http://localhost:5000/api/v1.0/atoms?name=\") returns a list of atoms with names, where it should return none or an error.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8255319", "body": "I believe Cosmo and Joel have established some coding standards for Python,\nbut I can't recall if or where it's posted. :)\n\nOn Wed, Dec 11, 2013 at 2:58 AM, Keyvan Mir Mohammad Sadeghi <\nnotifications@github.com> wrote:\n\n> In opencog/python/spatiotemporal/temporal_events/generic.py:\n> \n> > @@ -1,15 +1,11 @@\n> > -from datetime import datetime\n> \n> That's something that we need to discuss with the rest of the team. We\n> need a naming convention for our python files. Often in major projects,\n> people are forced to put their files in packages (folders, I tried to\n> enforce this, but didn't succeed completely).\n> \n> In a package, you might have very specific files, these will get their\n> unique names. But some of the functions and classes are core to the\n> package. These go to a file named 'classes.py' or 'main.py' or whatever the\n> team convention is. 'generic.py' is what my 'main.py' should be here. I'll\n> rename once we agree on a convention.\n> \n> Then, the APIs that author oughts to share with the rest of the team (i.e.\n> the ones that are not internal workings) go to _init_.py so they can be\n> easily imported using only the ..\n> \n> Also, if there are some utility classes that are shared between the files\n> in a package, these should go to a file named 'util.py' in the package. If\n> the utility functions and classes are so generic that are used in other\n> packages in the root, they should go to the 'utility' package.\n> \n> I suggest that we create an issue to discuss this further.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/opencog/opencog/pull/428/files#r8242523\n> .\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8255319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "rTreutlein": {"issues": [], "commits": [{"url": "https://api.github.com/repos/opencog/opencog/commits/1973e4e29a36b9b68d366aefead5b852c8ea5578", "message": "Merge pull request #2982 from rTreutlein/UpstreamMaster\n\nVarious Improvments to Lojban Prasing"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Yidnekachew": {"issues": [], "commits": [{"url": "https://api.github.com/repos/opencog/opencog/commits/32f5f9387c51ec116e08cdc319d54f85f5d8d6ab", "message": "fix failing MOSESPLNSynergyUTest"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "karlsackett": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9761365", "body": "The latest release is 4.0.3.\n\nOSX: installed after downloading from github. No errors from cmake.\n\nDebian Linux: installed the Debian package. Cmake can't find it. Removed the package and installed from the\ngithub source. Cmake still can't find it whether CXXTEST_BIN_DIR is set or not.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9761365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9761971", "body": "Here's the tail of the cmake output:\n\n```\n-- Found Xerces 2.8.0 -- /usr/lib/libxerces-c.so\n-- Found these zmq libs: /usr/lib/x86_64-linux-gnu/libzmq.so\n-- ZeroMQ was found.\nfatal: No names found, cannot describe anything.\n-- Cxxtest was not found. Make sure CXXTEST_BIN_DIR is set.\n-- Found Doxygen: /usr/bin/doxygen (found version \"1.8.1.2\") \nbzr: ERROR: Not a branch: \"/home/krs/git/opencog/\".\nbzr: ERROR: Not a branch: \"/home/krs/git/opencog/\".\n```\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9761971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9831188", "body": "I've got the same problem. The latest pull didn't fix it.\n\n```\n-- Up-to-date: /usr/local/include/opencog/atomspace/AtomTable.h\nCMake Error at opencog/atomspace/cmake_install.cmake:56 (FILE):\n  file INSTALL cannot find\n  \"/home/krs/git/opencog/opencog/atomspace/atom_types.h\".\nCall Stack (most recent call first):\n  opencog/cmake_install.cmake:41 (INCLUDE)\n  cmake_install.cmake:37 (INCLUDE)\n\n\nmake: *** [install] Error 1\n```\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9831188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9831287", "body": "I manually patched opencog/atomspace/CMakeLists.txt. Now I get this error:\n\n```\n-- Set runtime path of \"/usr/local/lib/opencog/libnlp-types.so\" to \"/usr/local/lib/opencog\"\nCMake Error at opencog/nlp/types/cmake_install.cmake:56 (FILE):\n  file INSTALL cannot find\n  \"/home/krs/git/opencog/opencog/nlp/types/atom_types.h\".\nCall Stack (most recent call first):\n  opencog/nlp/cmake_install.cmake:38 (INCLUDE)\n  opencog/cmake_install.cmake:44 (INCLUDE)\n  cmake_install.cmake:37 (INCLUDE)\n\n\nmake: *** [install] Error 1\n```\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9831287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9835245", "body": "I pulled from your branch and fixed the conflict with my patch. This a new error with a missing\nopencog/nlp/types/atom_types.h. Should this go in a new issue?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9835245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9853709", "body": "The fixes worked. I can finally build and install opencog under Debian Linux. Thanks for your help.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9853709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10017963", "body": "Boost 1.49. Pulled from master.\n\n```\n[  1%] Building CXX object opencog/util/CMakeFiles/util.dir/lazy_selector.cc.o\nIn file included from /home/krs/git/opencog/opencog/util/lazy_selector.cc:28:0:\n/home/krs/git/opencog/opencog/util/foreach.h:14:34: error: declaration of namespace \u2018boost::BOOST_FOREACH\u2019 conflicts with\nIn file included from /usr/include/boost/multi_index/hashed_index.hpp:22:0,\n                 from /home/krs/git/opencog/opencog/util/lazy_selector.h:30,\n                 from /home/krs/git/opencog/opencog/util/lazy_selector.cc:25:\n/usr/include/boost/foreach_fwd.hpp:56:1: error: previous declaration of namespace \u2018boost::BOOST_FOREACH\u2019 here\nmake[2]: *** [opencog/util/CMakeFiles/util.dir/lazy_selector.cc.o] Error 1\nmake[1]: *** [opencog/util/CMakeFiles/util.dir/all] Error 2\nmake: *** [all] Error 2\n```\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10017963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10020535", "body": "No change. I get the same error messages.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10020535/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10029668", "body": "```\nmiranda$ g++ -E boostversion.cc \n# 1 \"boostversion.cc\"\n# 1 \"<command-line>\"\n# 1 \"boostversion.cc\"\n# 1 \"/usr/include/boost/version.hpp\" 1 3 4\n# 2 \"boostversion.cc\" 2\n\nhello its this >>> 104900 <<<<\n\n\n\nno\n```\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10029668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10034341", "body": "That fix worked.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10034341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10251921", "body": "I have the same bug under OSX.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10251921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10702970", "body": "I found the problem and worked out a fix for it. It works for Debian, but I want to try it out on OS X next and then clean it up. I'll submit the pull request later this week.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10702970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10788852", "body": "Here's the diff for a quick-and-dirty fix:\n\n```\n$ diff lib/FindCxxtest.cmake lib/FindCxxtest.cmake.orig                                                                                                 \n17c17\n< FIND_PATH(CXXTEST_PYTHON_BIN_DIR cxxtestgen\n---\n> FIND_PATH(CXXTEST_PYTHON_BIN_DIR cxxtestgen.py\n25c25\n<       SET(CXXTEST_GEN \"${CXXTEST_PYTHON_BIN_DIR}/cxxtestgen\")\n---\n>       SET(CXXTEST_GEN \"${CXXTEST_PYTHON_BIN_DIR}/cxxtestgen.py\")\n```\n\nI guessing that since the earlier CxxTest release the Perl script was dropped and\nthe Python script was renamed 'cxxtestgen'. \n\nI've since found that CxxTest has no installation scripts and I think the files have to\nbe installed manually. The changes I made to FindCxxtest.cmake are enough to\nwork under Debian Linux because the Debianized CxxTest package puts everything\nwhere OpenCog can find it. So my fix and the Debian package should also work\nunder Ubuntu.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10788852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10812454", "body": "The patch works. 'make tests' successfully ran through to the end.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10812454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10820426", "body": "```\n91% tests passed, 11 tests failed out of 120\n\nTotal Test time (real) = 289.25 sec\n\nThe following tests FAILED:\n         32 - BasicSaveUTest (Failed)\n         55 - MathUTest (Failed)\n         60 - RESTfulTest (Failed)\n         62 - PythonModuleUTest (SEGFAULT)\n         63 - AllPythonModuleTests (Failed)\n         75 - procedure_repositoryUTest (Failed)\n        101 - PsiDemandUpdaterAgentUTest (SEGFAULT)\n        102 - PsiModulatorUpdaterAgentUTest (SEGFAULT)\n        103 - PsiFeelingUpdaterAgentUTest (SEGFAULT)\n        104 - PsiActionSelectionAgentUTest (SEGFAULT)\n        116 - BEUTest (OTHER_FAULT)\nErrors while running CTest\nmake[3]: *** [CMakeFiles/test] Error 8\nmake[2]: *** [CMakeFiles/test.dir/all] Error 2\nmake[1]: *** [CMakeFiles/test.dir/rule] Error 2\nmake: *** [test] Error 2\n```\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10820426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "githart": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9763429", "body": "Github appears OK with a README file in mardown format without the md extension, so +1 for the rename back to README.\n\nHow about moving the other README files to doc/ to reduce the clutter on the main opencog repo page at github?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9763429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9937394", "body": "Setup: \nFedora 17 (Beefy Miracle)\nBoost 1.48\nGCC 4.7.2\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9937394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10004796", "body": "Oops, that may have been premature. I tested a sufflix-less markdown README in my repo and it worked ok. Perhaps there's some malformed markdown? In any case it seems a small issue - I don't care if README has a suffix or not.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10004796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10006900", "body": "I believe that Github displaying 'FILENAME.md' for 'FILENAME' is just a quirk of Github.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10006900/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10101034", "body": "linas: we've been studying your git commands to make the change from the commands listed at http://wiki.opencog.org/w/Development_standards#Git_HOWTO.\n\nYour commands imply that it is unnecessary to merge from opencog/opencog locally before pushing, that the Git Pull Request accomplishes the same thing. Is this correct?\n\nAn expanded version of your instructions:\n\ngit clone https://githart@github.com/opencog/opencog (only if starting fresh)\ncd opencog\ngit checkout master (implied by the 'git clone' command, if issued)\ngit pull (no changes will be pulled if 'git clone' was just issued)\ngit branch my-latest-fix (create new branch)\ngit checkout my-latest-fix (move to new branch)\nhack hack hack + Github Fork opencog/opencog; rename to my-latest-fix\ngit commit\ngit pull origin master ('origin' tag is created by 'git clone' command above)\ngit push https://githart@github.com/githart/my-latest-fix\nGithub Pull Request\ngit branch -d my latest-fix (delete the branch, locally)\nGOTO 'git checkout master', wash, rinse, repeat\n\nThe Github Fork step above allows the push to be small. Pushing the entire source tree can take a long time because the bandwidth from the Hong Kong lab to US servers is pretty poor.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10101034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10101628", "body": "Er, actually the 'git pull' command above I believe makes no changes to the checked-out branch without a following 'git merge' - it really should have been left out of my example.\n\n'upstream' is just a label which would usually point to https://githart@github.com/opencog/opencog\n\nIn the example above the 'origin' label points to https://githart@github.com/opencog/opencog whereas in the instructions on the wiki 'origin' points to the personal branch on Github. \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10101628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10172495", "body": "Creating a Fork on Github is, as far as I know, required to use Github's Pull Request system which is a workflow that the group has agreed together to use (I'm using capital letters here to distinguish a Github Fork or Pull Request from any other uses of the terms).\n\nIf anyone knows of a way to accomplish the same thing from the command line (but please, not the built-in git-request-pull / git-send-email !), I would be most interested!\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10172495/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10214034", "body": "Tried it, works! Thanks!\n\n_phew_ that was NOT obvious!\n\nI'll update the wiki.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10214034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10357031", "body": "I see a similar error with MacPorts 2.1.2 packages:\n\ngcc47 @4.7.2\nboost @1.52.0\npython27 @2.7.3\npy27-cython @0.17.1\n\n[ 84%] Building CXX object opencog/cython/CMakeFiles/PythonModule.dir/PyMindAgent.cc.o\nIn file included from /opt/local/include/gcc47/c++/bits/basic_ios.h:39:0,\n                 from /opt/local/include/gcc47/c++/ios:45,\n                 from /opt/local/include/gcc47/c++/ostream:40,\n                 from /opt/local/include/gcc47/c++/iostream:40,\n                 from /opt/local/include/boost/assert.hpp:82,\n                 from /opt/local/include/boost/smart_ptr/scoped_ptr.hpp:14,\n                 from /opt/local/include/boost/scoped_ptr.hpp:14,\n                 from /Users/dhart/opencog/opencog/atomspace/AtomSpace.h:32,\n                 from /Users/dhart/opencog/opencog/server/Agent.h:31,\n                 from /Users/dhart/opencog/opencog/cython/PyMindAgent.h:30,\n                 from /Users/dhart/opencog/opencog/cython/PyMindAgent.cc:2:\n/opt/local/include/gcc47/c++/bits/locale_facets.h:242:53: error: macro \"toupper\" passed 2 arguments, but takes just 1\n/opt/local/include/gcc47/c++/bits/locale_facets.h:271:53: error: macro \"tolower\" passed 2 arguments, but takes just 1\n/opt/local/include/gcc47/c++/bits/locale_facets.h:814:53: error: macro \"toupper\" passed 2 arguments, but takes just 1\n/opt/local/include/gcc47/c++/bits/locale_facets.h:847:53: error: macro \"tolower\" passed 2 arguments, but takes just 1\nIn file included from /opt/local/include/gcc47/c++/bits/basic_ios.h:39:0,\n                 from /opt/local/include/gcc47/c++/ios:45,\n                 from /opt/local/include/gcc47/c++/ostream:40,\n                 from /opt/local/include/gcc47/c++/iostream:40,\n                 from /opt/local/include/boost/assert.hpp:82,\n                 from /opt/local/include/boost/smart_ptr/scoped_ptr.hpp:14,\n                 from /opt/local/include/boost/scoped_ptr.hpp:14,\n                 from /Users/dhart/opencog/opencog/atomspace/AtomSpace.h:32,\n                 from /Users/dhart/opencog/opencog/server/Agent.h:31,\n                 from /Users/dhart/opencog/opencog/cython/PyMindAgent.h:30,\n                 from /Users/dhart/opencog/opencog/cython/PyMindAgent.cc:2:\n/opt/local/include/gcc47/c++/bits/locale_facets.h:2529:44: error: macro \"isspace\" passed 2 arguments, but takes just 1\n/opt/local/include/gcc47/c++/bits/locale_facets.h:2547:44: error: macro \"isupper\" passed 2 arguments, but takes just 1\n/opt/local/include/gcc47/c++/bits/locale_facets.h:2553:44: error: macro \"islower\" passed 2 arguments, but takes just 1\n/opt/local/include/gcc47/c++/bits/locale_facets.h:2559:44: error: macro \"isalpha\" passed 2 arguments, but takes just 1\n/opt/local/include/gcc47/c++/bits/locale_facets.h:2583:44: error: macro \"isalnum\" passed 2 arguments, but takes just 1\n/opt/local/include/gcc47/c++/bits/locale_facets.h:2595:44: error: macro \"toupper\" passed 2 arguments, but takes just 1\n/opt/local/include/gcc47/c++/bits/locale_facets.h:2601:44: error: macro \"tolower\" passed 2 arguments, but takes just 1\nIn file included from /opt/local/include/gcc47/c++/bits/basic_ios.h:39:0,\n                 from /opt/local/include/gcc47/c++/ios:45,\n                 from /opt/local/include/gcc47/c++/ostream:40,\n                 from /opt/local/include/gcc47/c++/iostream:40,\n                 from /opt/local/include/boost/assert.hpp:82,\n                 from /opt/local/include/boost/smart_ptr/scoped_ptr.hpp:14,\n                 from /opt/local/include/boost/scoped_ptr.hpp:14,\n                 from /Users/dhart/opencog/opencog/atomspace/AtomSpace.h:32,\n                 from /Users/dhart/opencog/opencog/server/Agent.h:31,\n                 from /Users/dhart/opencog/opencog/cython/PyMindAgent.h:30,\n                 from /Users/dhart/opencog/opencog/cython/PyMindAgent.cc:2:\n/opt/local/include/gcc47/c++/bits/locale_facets.h:227:7: error: 'btowc' is not a type\n/opt/local/include/gcc47/c++/bits/locale_facets.h:242:7: error: expected ';' at end of member declaration\n/opt/local/include/gcc47/c++/bits/locale_facets.h:243:7: error: expected unqualified-id before '{' token\n/opt/local/include/gcc47/c++/bits/locale_facets.h:256:7: error: 'btowc' is not a type\n/opt/local/include/gcc47/c++/bits/locale_facets.h:271:7: error: expected ';' at end of member declaration\n/opt/local/include/gcc47/c++/bits/locale_facets.h:272:7: error: expected unqualified-id before '{' token\n/opt/local/include/gcc47/c++/bits/locale_facets.h: In member function 'std::__ctype_abstract_base<_CharT>::char_type std::__ctype_abstract_base<_CharT>::towupper(int (_)(std::__ctype_abstract_base<_CharT>::char_type)) const':\n/opt/local/include/gcc47/c++/bits/locale_facets.h:228:33: error: '__c' was not declared in this scope\n/opt/local/include/gcc47/c++/bits/locale_facets.h: In member function 'std::__ctype_abstract_base<_CharT>::char_type std::__ctype_abstract_base<_CharT>::towlower(int (_)(std::__ctype_abstract_base<_CharT>::char_type)) const':\n/opt/local/include/gcc47/c++/bits/locale_facets.h:257:33: error: '__c' was not declared in this scope\n/opt/local/include/gcc47/c++/bits/locale_facets.h: At global scope:\n/opt/local/include/gcc47/c++/bits/locale_facets.h:797:7: error: 'btowc' is not a type\n/opt/local/include/gcc47/c++/bits/locale_facets.h:814:7: error: expected ';' at end of member declaration\n/opt/local/include/gcc47/c++/bits/locale_facets.h:815:7: error: expected unqualified-id before '{' token\n/opt/local/include/gcc47/c++/bits/locale_facets.h:830:7: error: 'btowc' is not a type\n/opt/local/include/gcc47/c++/bits/locale_facets.h:847:7: error: expected ';' at end of member declaration\n/opt/local/include/gcc47/c++/bits/locale_facets.h:848:7: error: expected unqualified-id before '{' token\n/opt/local/include/gcc47/c++/bits/locale_facets.h: In member function 'std::ctype<char>::char_type std::ctype<char>::towupper(int (_)(std::ctype<char>::char_type)) const':\n/opt/local/include/gcc47/c++/bits/locale_facets.h:798:33: error: '__c' was not declared in this scope\n/opt/local/include/gcc47/c++/bits/locale_facets.h: In member function 'std::ctype<char>::char_type std::ctype<char>::towlower(int (_)(std::ctype<char>::char_type)) const':\n/opt/local/include/gcc47/c++/bits/locale_facets.h:831:33: error: '__c' was not declared in this scope\nIn file included from /opt/local/include/gcc47/c++/bits/basic_ios.h:39:0,\n                 from /opt/local/include/gcc47/c++/ios:45,\n                 from /opt/local/include/gcc47/c++/ostream:40,\n                 from /opt/local/include/gcc47/c++/iostream:40,\n                 from /opt/local/include/boost/assert.hpp:82,\n                 from /opt/local/include/boost/smart_ptr/scoped_ptr.hpp:14,\n                 from /opt/local/include/boost/scoped_ptr.hpp:14,\n                 from /Users/dhart/opencog/opencog/atomspace/AtomSpace.h:32,\n                 from /Users/dhart/opencog/opencog/server/Agent.h:31,\n                 from /Users/dhart/opencog/opencog/cython/PyMindAgent.h:30,\n                 from /Users/dhart/opencog/opencog/cython/PyMindAgent.cc:2:\n/opt/local/include/gcc47/c++/bits/locale_facets.h: At global scope:\n/opt/local/include/gcc47/c++/bits/locale_facets.h:2529:5: error: 'std::isspace' declared as an 'inline' variable\n/opt/local/include/gcc47/c++/bits/locale_facets.h:2529:5: error: template declaration of 'bool std::isspace'\n/opt/local/include/gcc47/c++/bits/locale_facets.h:2530:7: error: expected primary-expression before 'return'\n/opt/local/include/gcc47/c++/bits/locale_facets.h:2530:7: error: expected '}' before 'return'\n/opt/local/include/gcc47/c++/bits/locale_facets.h:2535:31: error: 'locale' does not name a type\n/opt/local/include/gcc47/c++/bits/locale_facets.h: In function 'bool isprint(_CharT, const int&)':\n/opt/local/include/gcc47/c++/bits/locale_facets.h:2536:14: error: 'use_facet' was not declared in this scope\n/opt/local/include/gcc47/c++/bits/locale_facets.h:2536:14: note: suggested alternative:\nIn file included from /opt/local/include/gcc47/c++/bits/locale_classes.h:789:0,\n                 from /opt/local/include/gcc47/c++/bits/ios_base.h:43,\n                 from /opt/local/include/gcc47/c++/ios:43,\n                 from /opt/local/include/gcc47/c++/ostream:40,\n                 from /opt/local/include/gcc47/c++/iostream:40,\n                 from /opt/local/include/boost/assert.hpp:82,\n                 from /opt/local/include/boost/smart_ptr/scoped_ptr.hpp:14,\n                 from /opt/local/include/boost/scoped_ptr.hpp:14,\n                 from /Users/dhart/opencog/opencog/atomspace/AtomSpace.h:32,\n                 from /Users/dhart/opencog/opencog/server/Agent.h:31,\n                 from /Users/dhart/opencog/opencog/cython/PyMindAgent.h:30,\n                 from /Users/dhart/opencog/opencog/cython/PyMindAgent.cc:2:\n/opt/local/include/gcc47/c++/bits/locale_classes.tcc:130:5: note:   'std::use_facet'\nIn file included from /opt/local/include/gcc47/c++/bits/basic_ios.h:39:0,\n                 from /opt/local/include/gcc47/c++/ios:45,\n                 from /opt/local/include/gcc47/c++/ostream:40,\n                 from /opt/local/include/gcc47/c++/iostream:40,\n                 from /opt/local/include/boost/assert.hpp:82,\n                 from /opt/local/include/boost/smart_ptr/scoped_ptr.hpp:14,\n                 from /opt/local/include/boost/scoped_ptr.hpp:14,\n                 from /Users/dhart/opencog/opencog/atomspace/AtomSpace.h:32,\n                 from /Users/dhart/opencog/opencog/server/Agent.h:31,\n                 from /Users/dhart/opencog/opencog/cython/PyMindAgent.h:30,\n                 from /Users/dhart/opencog/opencog/cython/PyMindAgent.cc:2:\n/opt/local/include/gcc47/c++/bits/locale_facets.h:2536:24: error: 'ctype' was not declared in this scope\n/opt/local/include/gcc47/c++/bits/locale_facets.h:2536:24: note: suggested alternative:\nIn file included from /opt/local/include/gcc47/c++/string:45:0,\n                 from /Users/dhart/opencog/opencog/cython/PyMindAgent.h:26,\n                 from /Users/dhart/opencog/opencog/cython/PyMindAgent.cc:2:\n/opt/local/include/gcc47/c++/bits/localefwd.h:123:11: note:   'std::ctype'\nIn file included from /opt/local/include/gcc47/c++/bits/basic_ios.h:39:0,\n                 from /opt/local/include/gcc47/c++/ios:45,\n                 from /opt/local/include/gcc47/c++/ostream:40,\n                 from /opt/local/include/gcc47/c++/iostream:40,\n                 from /opt/local/include/boost/assert.hpp:82,\n                 from /opt/local/include/boost/smart_ptr/scoped_ptr.hpp:14,\n                 from /opt/local/include/boost/scoped_ptr.hpp:14,\n                 from /Users/dhart/opencog/opencog/atomspace/AtomSpace.h:32,\n                 from /Users/dhart/opencog/opencog/server/Agent.h:31,\n                 from /Users/dhart/opencog/opencog/cython/PyMindAgent.h:30,\n                 from /Users/dhart/opencog/opencog/cython/PyMindAgent.cc:2:\n/opt/local/include/gcc47/c++/bits/locale_facets.h:2536:36: error: expected primary-expression before '>' token\n/opt/local/include/gcc47/c++/bits/locale_facets.h:2536:38: error: expected primary-expression before '>' token\n/opt/local/include/gcc47/c++/bits/locale_facets.h:2536:47: error: request for member 'is' in '__loc', which is of non-class type 'const int'\n/opt/local/include/gcc47/c++/bits/locale_facets.h:2536:50: error: 'ctype_base' has not been declared\n/opt/local/include/gcc47/c++/bits/locale_facets.h: At global scope:\n/opt/local/include/gcc47/c++/bits/locale_facets.h:2541:31: error: 'locale' does not name a type\n/opt/local/include/gcc47/c++/bits/locale_facets.h: In function 'bool iscntrl(_CharT, const int&)':\n/opt/local/include/gcc47/c++/bits/locale_facets.h:2542:14: error: 'use_facet' was not declared in this scope\n/opt/local/include/gcc47/c++/bits/locale_facets.h:2542:14: note: suggested alternative:\nIn file included from /opt/local/include/gcc47/c++/bits/locale_classes.h:789:0,\n                 from /opt/local/include/gcc47/c++/bits/ios_base.h:43,\n                 from /opt/local/include/gcc47/c++/ios:43,\n                 from /opt/local/include/gcc47/c++/ostream:40,\n                 from /opt/local/include/gcc47/c++/iostream:40,\n                 from /opt/local/include/boost/assert.hpp:82,\n                 from /opt/local/include/boost/smart_ptr/scoped_ptr.hpp:14,\n                 from /opt/local/include/boost/scoped_ptr.hpp:14,\n                 from /Users/dhart/opencog/opencog/atomspace/AtomSpace.h:32,\n                 from /Users/dhart/opencog/opencog/server/Agent.h:31,\n                 from /Users/dhart/opencog/opencog/cython/PyMindAgent.h:30,\n                 from /Users/dhart/opencog/opencog/cython/PyMindAgent.cc:2:\n/opt/local/include/gcc47/c++/bits/locale_classes.tcc:130:5: note:   'std::use_facet'\nIn file included from /opt/local/include/gcc47/c++/bits/basic_ios.h:39:0,\n                 from /opt/local/include/gcc47/c++/ios:45,\n                 from /opt/local/include/gcc47/c++/ostream:40,\n                 from /opt/local/include/gcc47/c++/iostream:40,\n                 from /opt/local/include/boost/assert.hpp:82,\n                 from /opt/local/include/boost/smart_ptr/scoped_ptr.hpp:14,\n                 from /opt/local/include/boost/scoped_ptr.hpp:14,\n                 from /Users/dhart/opencog/opencog/atomspace/AtomSpace.h:32,\n                 from /Users/dhart/opencog/opencog/server/Agent.h:31,\n                 from /Users/dhart/opencog/opencog/cython/PyMindAgent.h:30,\n                 from /Users/dhart/opencog/opencog/cython/PyMindAgent.cc:2:\n/opt/local/include/gcc47/c++/bits/locale_facets.h:2542:24: error: 'ctype' was not declared in this scope\n/opt/local/include/gcc47/c++/bits/locale_facets.h:2542:24: note: suggested alternative:\nIn file included from /opt/local/include/gcc47/c++/string:45:0,\n                 from /Users/dhart/opencog/opencog/cython/PyMindAgent.h:26,\n                 from /Users/dhart/opencog/opencog/cython/PyMindAgent.cc:2:\n/opt/local/include/gcc47/c++/bits/localefwd.h:123:11: note:   'std::ctype'\nIn file included from /opt/local/include/gcc47/c++/bits/basic_ios.h:39:0,\n                 from /opt/local/include/gcc47/c++/ios:45,\n                 from /opt/local/include/gcc47/c++/ostream:40,\n                 from /opt/local/include/gcc47/c++/iostream:40,\n                 from /opt/local/include/boost/assert.hpp:82,\n                 from /opt/local/include/boost/smart_ptr/scoped_ptr.hpp:14,\n                 from /opt/local/include/boost/scoped_ptr.hpp:14,\n                 from /Users/dhart/opencog/opencog/atomspace/AtomSpace.h:32,\n                 from /Users/dhart/opencog/opencog/server/Agent.h:31,\n                 from /Users/dhart/opencog/opencog/cython/PyMindAgent.h:30,\n                 from /Users/dhart/opencog/opencog/cython/PyMindAgent.cc:2:\n/opt/local/include/gcc47/c++/bits/locale_facets.h:2542:36: error: expected primary-expression before '>' token\n/opt/local/include/gcc47/c++/bits/locale_facets.h:2542:38: error: expected primary-expression before '>' token\n/opt/local/include/gcc47/c++/bits/locale_facets.h:2542:47: error: request for member 'is' in '__loc', which is of non-class type 'const int'\n/opt/local/include/gcc47/c++/bits/locale_facets.h:2542:50: error: 'ctype_base' has not been declared\n/opt/local/include/gcc47/c++/bits/locale_facets.h: At global scope:\n/opt/local/include/gcc47/c++/bits/locale_facets.h:2547:5: error: 'isupper' declared as an 'inline' variable\n/opt/local/include/gcc47/c++/bits/locale_facets.h:2547:5: error: template declaration of 'bool isupper'\n/opt/local/include/gcc47/c++/bits/locale_facets.h:2548:7: error: expected primary-expression before 'return'\n/opt/local/include/gcc47/c++/bits/locale_facets.h:2548:7: error: expected '}' before 'return'\n/opt/local/include/gcc47/c++/bits/locale_facets.h:2548:75: error: expected declaration before '}' token\nmake[2]: **\\* [opencog/cython/CMakeFiles/PythonModule.dir/PyMindAgent.cc.o] Error 1\nmake[1]: **\\* [opencog/cython/CMakeFiles/PythonModule.dir/all] Error 2\nmake: **\\* [all] Error 2\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10357031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10788947", "body": "On Wed, Nov 28, 2012 at 12:03 PM, Karl Sackett notifications@github.comwrote:\n\n>  So my fix and the Debian package should also work under Ubuntu.\n\nGreat! I noticed that cxxtest 4.0.3 is packaged for Ubuntu 12.10 when I did\nsome early quantal testing.\n\nhttp://packages.ubuntu.com/quantal/cxxtest\n\nDid they make the same fixes as yours?\n\n-dave\n\n## \n\nDavid Hart |  +852 9875 1345\nOpenCog Foundation | http://opencog.org\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10788947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/12080867", "body": "This was reported in Launchpad, but I've recently encountered it on Ubuntu 12.10 and Debian 7.0. Upgrading the cython package does not resolve the issue, which is kinda difficult to track down since the file displaying the error is auto-generated. \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/12080867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/12252709", "body": "Build fails.\n\nPlease disable Cpack in CMakeLists.txt. Thanks!\n\nCMake Error at /usr/share/cmake-2.8/Modules/CPack.cmake:338 (message):\n  CPack package description file:\n  \"/var/lib/buildbot/slave/opencog_master/build/README\" could not be found.\nCall Stack (most recent call first):\n  /usr/share/cmake-2.8/Modules/CPack.cmake:342 (cpack_check_file_exists)\n  CMakeLists.txt:632 (INCLUDE)\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/12252709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/16146612", "body": "As far as I know, for many months opencog/cython has compiled only with\nthe specific combination cpython & cython distributed in Ubuntu 12.04.\nEvery other combination I've tried has failed (various flavours of\nDebian, Ubuntu, OSX).\n\nIt's pretty trivial to setup a chroot with Ubuntu 12.04 to test\nalongside other flavours of Linux and to help nail down the cython bugs.\n\nCheck out the tools 'debootstrap' and 'schroot'.\n\n-dave\n\nOn 10/04/13 07:40, Linas Vepstas wrote:\n\n> FWIW, cython currently compiles for me. I don't know what changed. Its\n> likely to still be broken for others. I did clean up the compiler\n> warnings that I got. There is no unit test for cython; I don't know if\n> the result actually works.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/opencog/opencog/issues/88#issuecomment-16142142.\n\n## \n\nDavid Hart\nOpenCog Foundation\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/16146612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/21675388", "body": "This is really great! Maybe it can go into the ocpkg repo instead of opencog:master? \n\nThe build step should do something like:\n\ncd /vagrant\ngit clone https://github.com/opencog/opencog\nmkdir /vagrant/opencog/bin\ncd /vagrant/opencog/bin\ncmake ..\nmake -j$CPUS\n\nOr, setting a symlink from $HOME/opencog to /vagrant/opencog beforehand, ocpkg can do the equivalent with\n\noctool -u\noctool -b\n\n(-u update source & -b build from source)\n\nplus scripts/createSymLinksOCPKG.sh, which creates more symlinks for Embodiment and other things that require run-from-source and deploy-from-source trees. I continue to try to move things away from in-source builds, but these odd dependencies still exist...\n\nIs there a way to detect the number of CPU cores on the guest OS and set that in Vagrant's VirtualBox config? This can make the difference between compiling taking 1 hour or 10 minutes. :-)\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/21675388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/21694646", "body": "@amberj I see how keeping Vagrantfile in opencog/scripts makes sense. Moving ocpkg scripts there may make sense as well.\n\nA wiki page to outline the Vagrant use cases would be great. \n\nscripts/createSymLinksOCPKG.sh needs to run before scripts/embodiment/make_distribution. Both are really hacky; what we should have instead is something like 'make DESTDIR=$HOME/tests install_embodiment'\n\nI googled and found a few ways to determine CPU/vCPU count on Windows, from CMD, PowerShell, VBscript, etc. all of which should be callable from Ruby. I suggest placing the max vCPUs (and 1/2 available system RAM) into the VirtualBox config, then allowing the user to tune-down using -jX or from VirtualBox settings.\n\nPlanning to move from 12.04 LTS to 14.04 LTS for the 'reference platform' is a good idea and will likely go smoothly; OpenCog builds ok now on 13.10.\n\n@linas For longer-lived lower-overhead Linux-on-Linux environments, have a look at debootsrap + ocpkg + schroot. In the form from above, it would look like:\n`git clone <repo>\ncd project/\n<hack><hack><hack>\ngit commit\nmkdir build_hostlinux\ncmake ..\nmake\nschroot -c precise\nmkdir build_precise\ncmake ..\nmake\ngit push\n`\nTo test that commits build on another distro. \n\ndebootstrap builds a Debian-based distro in any specified directory (I usually choose /var/distro) to use with chroot.\nschroot propagates your user environment into any chroot (/etc/schroot/schroot.conf & /etc/schroot/chroot.d/distro.conf)\nocpkg installs opencog build dependencies (octool -a -d).\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/21694646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/22618915", "body": "thanks!\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/22618915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/opencog/opencog/comments/3575811", "body": "Thanks, this checkin fixed the failing Cython test! (the test that's been failing for months on Buildbot)\n\nhttp://buildbot.opencog.org:8010/builders/opencog_master/builds/254\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/3575811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/3609445", "body": "Some of the  tests fail to build http://158.132.219.213:8010/builders/opencog_master/builds/263/steps/compile_2/logs/stdio\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/3609445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/4494128", "body": "Oops, sorry, should have PR'd that...\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/4494128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/5607909", "body": "The full workflow at http://wiki.opencog.org/w/Development_standards#Git_HOWTO is fine-tuned to be fairly comprehensive.\n\nBy rebasing using fastforward, this workflow keeps the history clean, avoiding the \"merge branch 'master' of opencog/opencog into my-branch\" commits and, of course, runs everything through GitHub's PR system.\n\nIf we can all agree that everyone should use this workflow, straggling instructions like http://wiki.opencog.org/w/Opencog-github-flow and http://wiki.opencog.org/w/GitHub_Reference can be deleted.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/5607909/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12262020", "body": "ocpkg behaves differently iff invoked as `octool`. If ocpkg is invoked as `ocpkg` (or any other name), it may perform an unwanted git-clone or git-pull. Safer to direct the user to octool, which will just spit out usage guidance if invoked with no arguments, e.g.\n\n```\n~/opencog/scripts/octool \nUsage: octool OPTION\n -a Add software repositories\n -d Install build dependencies\n -u Update OpenCog source at /home/dhart/opencog/src\n -b Build OpenCog\n -t Test OpenCog\n```\n\nIf anything, I should fix up ocpkg to skip the git clone/pull if invoked as `install-dependencies-trusty`, i.e. to behave strictly the same as `octool -a -d`. Merging this pull now however will be immediately useful.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12262020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "ferrouswheel": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9764996", "body": "FYI @linas - you can easily update a pull request by pushing to the source branch.\n\ne.g. if you had feature-x as a branch, you could issue a pull request, and then continue to update it and push again. \n\nThis makes it great for having a discussion, since if someone makes a request to change something you don't need to reissue the PR... you just need to edit->commit->push and the pull request will reflect those changes.\n\nYou might already be aware of that functionality, but it took me a while before I realised this!!\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9764996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9794319", "body": "@linas Generally I would say that it's up to the person issuing the pull request to resolve them on their local branch before pushing them.\n\nOnce a commit is published outside of one's local repo, it's bad form to change history.\n\nWhen he was at commit 54c075f @githart could have used:\n\n```\ngit reset --hard HEAD^\n```\n\n...to permanently revert to the commit before HEAD (and nuke any changes that disagree with that commit).\n\nHowever, it terms of doing it yourself, you could add @githart's repo as a remote:\n\n```\ngit remote add githart [git@github... grab the address from his fork]\ngit fetch githart\ngit checkout master # go to your master branch, presumedly up to date with upstream/master\ngit cherry-pick f4af24d # merge the commit to keep.\ngit push upstream/master # if it's a big change, issuing a new pull request is probably better than pushing direct to upstream/master!\n```\n\nThen close this pull request explaining the reason for rejecting it.\n\n(Of course, I find myself less concerned about commit noise in git, since I no longer think of things being a linear set of changes... it's all trees and merges! I mostly only pay attention to the aggregate diff shown by the \"Files Changed\" tab)\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9794319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9794430", "body": "This is pull request is a good example for why one should attach pull requests from specific local branch names and not your local \"master\" branch.\n\nIf you continue hacking/merging stuff on your master branch, or just merging with upstream/master, you get the above commits: ba478dd   c27d1b4     44dfe79, which are unrelated to what the pull request was originally proposing.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9794430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9850929", "body": "FYI if you say `close #14` or `fix #14` in the commit message, it will autoclose the issue once your pull request is merged. \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9850929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9850960", "body": "I believe that pull requests are only really useful if they are being reviewed by other people.\n\nI can understand wanting to make a minor change in a single commit, and get it merged straight away, but in that case, it's probably best to push directly to upstream/master (assuming the \"upstream\" remote points to the opencog team repo).\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9850960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9854667", "body": ":dancers: \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9854667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/12293831", "body": "How come it is a poor idea? I don't think github renders README as markdown unless it's called README.md or README.markdown.\n\nWhile this may appear scary and different to past expectations, many projects use README.md now. This is because it's nicer to have well formatted documentation than purity around filename extensions!\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/12293831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/16150348", "body": "There were unit tests for cython when I implemented it.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/16150348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/17702704", "body": ":thumbsup: \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/17702704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/18331308", "body": "In PR #197.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/18331308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23237737", "body": "Edited to format the json ;-)\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23237737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23237907", "body": "While I don't disagree, you might want to expand on what you mean by \"ORM-like interface\". Do you mean a query language like SQL, or a better defined API, or an declarative ORM that automatically maps entities/relationships to atoms?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23237907/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23238132", "body": "That's completely understandable. As I mentioned on the mailing list, this was the first api I built several years ago and I'll be the first to admit it's lacking.\n\nHowever, having worked with the C++ API a lot, I think it's also got problems. I was intentionally trying to avoid a direct link.\n\nHappy to have a redesign, or start from a Python/Ruby web interface and create the json API to fit. Thanks for the feedback and sorry for the frustration ;-)\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23238132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/opencog/opencog/comments/3522492", "body": "It is inappropriate to completely remove the original author's name.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/3522492/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/3531334", "body": "If it's merely a copy pasted header then my apologies. If the body of the files, i.e. the code, is copy pasted from other files... then that's potentially a DRY issue. The OpenCog codebase has had a lot of people copy pasting things in the past, and I think this leads to a lot of technical debt that needs refactoring later (I cleaned up lots of duplicated code in embodiment years ago, and it's boring work that could have been avoided).\n\nFYI I was original author of the Python bindings, but I probably didn't bother including any author statements. I don't care about my name being there though.\n\nAnyhow, I'm not actively involved, so feel free to ignore my advice! I still care about the project though, which is why I sometimes comment about these things.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/3531334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/1936951", "body": "I think we can just remove this file. Github should use README automatically.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/1936951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/6365357", "body": "generally a good idea to terminate the last line with a newline\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/6365357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/6365358", "body": "Probably best to put this and run_manually documentation as doc strings to the methods themselves.\n\nMakes sense to leave the outline on how to use it as module documentation tho.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/6365358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7179067", "body": "It'd be great to remove these star imports. Makes it easier for coding tools to detect issues and pep8 prefers it.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7179067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7179091", "body": "Was there a reason for this approach instead of passing atomspace as a argument to **init**?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7179091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7179114", "body": "To me it seems unnecessary to have atoms as a key in the json structure when this is a detailed view a specific atom. Will it work with:\n\n```\nreturn {marshal(atom, atom_fields)}\n```\n\n?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7179114/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7179161", "body": "Ah ok. Might be good to add that as a comment in case others ask or wonder about the same thing in future.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7179161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7179217", "body": "Trailing slash is unnecessary for line continuation in a bracketed expression.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7179217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7179231", "body": "I did not know about the `@raises` decorator, I'd always used assertRaises in the past. Cool!\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7179231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7179279", "body": "Ah, it makes sense to follow that suggestion then.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7179279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8255862", "body": "I think main.py should be limited to containing a main entry point for an executable. e.g. nothing that's intended to be imported from elsewhere.\n\nIf you're thinking about generic.py, and \"generic\" isn't actually a meaningful grouping, then consider putting the contents in `__init__.py` instead. On the other hand, if you were creating [generic programming entities](http://en.wikipedia.org/wiki/Generic_programming) then a generics module might make a lot of sense!\n\ninit.py probably should probably always be included as the contents of `__init__.py`, unless there is technical reason for why this wouldn't work, or you have giant amounts of initialization (in the latter case, you'd probably want to refactor it)\n\nJust my 2c, tho :-)\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8255862/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8256267", "body": "I've seen a number of projects use a `utils.py` module as part of a package, so I think that's fine.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8256267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "shujingke": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9970784", "body": "Thank you Linas for suggestion : ) I'll try it next time ~\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/9970784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10101303", "body": "The pull before push,\nWe used to do:\ngit fetch upstream -v\ngit merge upstream/master\nSo are these 2 lines equal to \"git pull origin master \"?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10101303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10101669", "body": "Got it. I am trying Linas's way now : )\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10101669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23619587", "body": "Thank you for cleaning up the warnings for Opencog.\n\nPAI::processActionAvailability logic is to parse the message received from virtual game world. In this message structure definition there should be a tartgetType in it. So, yes, I think your second solution is better. It's better to be an assert. \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23619587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/opencog/opencog/comments/4545388", "body": "1) Fixed. I will pay attention to keep 0 warning.\n\n2) Yes, sure. I can create unit tests for 3D SpaceMap first, since its\nrequirements and functions are more stable. For planner, still need to do\nmore debugs for different cases, and the requirements are still changing .\nWill definitely create Unit tests for the planner when it gets more stable.\n\nOn 7 November 2013 23:18, Linas Vepstas notifications@github.com wrote:\n\n> Thank you for merging! I now have two additional requests:\n> \n> 1) can you fix the compile warnings? Opencog used to compile with zro\n> warnings, it now has 121 of them: see, for example\n> http://158.132.58.86:8010/builders/opencog_master/builds/434/steps/compile/logs/warnings%20%28121%29\n> Could you do this in the next 24 hours?\n> \n> 2) over the next few months, please start creating unit tests for the\n> planner and for the spatial/octree code. Unit tests are a good idea to\n> have, for a large number of reasons. One of them is that it makes _your_life easier: when you fix a bug in one part of your code, you can be sure\n> you did not accidentally break some other part of your code.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/opencog/opencog/commit/0c62c7e6f42938ec5b3f13fe0c1e974dcf4fb677#commitcomment-4537486\n> .\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/4545388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/4933971", "body": "This change, seems to give an error when I start the embodiment server: \nFile: ./scm/file-utils-scm line: 19 \nERROR: no code for module (rnrs io port)\nABORT: misc-error \n\nAnd when I try scm-eval (export-all-atoms \"/home/path..... \") , it doesn't work, the output error:\nBacktrace:\nIn current input:\n 1: 0\\* scm-eval (export-all-atoms \"/home/path..... \")\n<unnamed port>:1:1: In expression (export-all-atoms \"/home/path..... \")\n<unnamed port>:1:1: Unbound variable: export-all-atoms \n\nThis worked well 2 weeks ago when I used  export-all-atoms..\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/4933971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/22924362", "body": "what is this change for?", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/22924362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "edajade": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10098503", "body": "Everything important was merged years ago.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10098503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/opencog/opencog/comments/4952934", "body": "You mean C++ PLN? That's been obsolete for years!\n\nOn Mon, Dec 30, 2013 at 12:17 AM, Alex van der Peet <\nnotifications@github.com> wrote:\n\n> Thanks Cosmo, that did the trick! Figured it would be something like that\u2026\n> \n> PLN will not be built now apparently, but I\u2019ll be looking into that myself\n> in the coming week anyway.\n> \n> From: Cosmo Harrigan [mailto:notifications@github.com]\n> Sent: 29 December 2013 10:12\n> To: opencog/opencog\n> Cc: Alex van der Peet\n> Subject: Re: [opencog] Fix a UTF-8 bug. (f6793d0)\n> \n> Hi @Alex-van-der-Peet https://github.com/Alex-van-der-Peet , try\n> deleting CMakeCache.txt in your build directory, and then run cmake ..\n> again.\n> \n> CMake Error at lib/FindGuile.cmake:56 (MESSAGE):\n> \n> Found libguile.h but not version.h; check your guile installation!\n> \n> Call Stack (most recent call first):\n> \n> CMakeLists.txt:230 (FIND_PACKAGE)\n> \n> -- Configuring incomplete, errors occurred!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub <\n> https://github.com/opencog/opencog/commit/f6793d0b9d41edc1846bea80a95c25cd9cc136a0#commitcomment-4951019>\n> . <\n> https://github.com/notifications/beacon/2569494__eyJzY29wZSI6Ik5ld3NpZXM6QmVhY29uIiwiZXhwaXJlcyI6MTcwMzgxNTkzMiwiZGF0YSI6eyJpZCI6MjI1NjUyMDB9fQ==--19475ff4507b71f0cadfe5973ba6cd5eafc62f4e.gif>\n> ---\n> \n> No virus found in this message.\n> Checked by AVG - www.avg.com\n> Version: 2014.0.4259 / Virus Database: 3658/6955 - Release Date: 12/27/13\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/opencog/opencog/commit/f6793d0b9d41edc1846bea80a95c25cd9cc136a0#commitcomment-4951802\n> .\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/4952934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/5069754", "body": "But Python has a builtin csv module!\n\nOn Wed, Jan 15, 2014 at 2:46 AM, Keyvan Mir Mohammad Sadeghi <\nnotifications@github.com> wrote:\n\n> @cosmoharrigan https://github.com/cosmoharrigan it's a module for\n> importing CSV data to python data structures. I once used it for some\n> Bayesian Network work I was doing, believe it's not been used ever since.\n> Can be safely deleted if that's what you're asking ;)\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/opencog/opencog/commit/0447e31a09525795cd3b3820d0fe9f535e86a03e#commitcomment-5063676\n> .\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/5069754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/5606040", "body": "See the operations defined here for the python set class:\nhttp://docs.python.org/2/library/sets.html\n\nOn Fri, Mar 7, 2014 at 2:32 PM, Linas Vepstas notifications@github.comwrote:\n\n> if trail is a set (which it seems to be) then this boolean-or's the other\n> set (input_trail)\n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/opencog/opencog/commit/9dc059646378305beba239f606935dd485e45d42#commitcomment-5595330\n> .\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/5606040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/5637439", "body": "Wow, I thought count was always a double! Conceptually it should be! (IIRC\nit is at least in the C++ part, because fractional counts are perfectly\nordinary under the PLN math)\n\nOn Wed, Mar 12, 2014 at 4:51 AM, Cosmo Harrigan notifications@github.comwrote:\n\n> I'm finding an odd behavior when running PLN, where the count grows to a\n> very large number. Currently, at 9.31099271352453e28, and I'm trying to\n> track down what's going on.\n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/opencog/opencog/commit/a2e87fc8d1b88eb67ddb18cc18a51232aa917d17#commitcomment-5637015\n> .\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/5637439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/5638454", "body": "I think it stores both, and count should always be a double\n\nOn Wed, Mar 12, 2014 at 6:01 AM, Cosmo Harrigan notifications@github.comwrote:\n\n> The comment reads \"SimpleTruthValue does not store count anyway, there is\n> no storage penalty associated with this\", but in fact, it does store count,\n> right?\n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/opencog/opencog/commit/a2e87fc8d1b88eb67ddb18cc18a51232aa917d17#commitcomment-5637907\n> .\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/5638454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/6280643", "body": "No that was an accident\n\nOn Sun, May 11, 2014 at 12:03 PM, Cosmo Harrigan\nnotifications@github.comwrote:\n\n> @jadeoneill https://github.com/jadeoneill Chainer inherits from\n> AbstractChainer which inherits from Logic. Logichttps://github.com/opencog/opencog/blob/706d449a88259c1aab37b309a3ab696e65345d52/opencog/python/pln/logic.py#L13stores the atomspace in\n> _self._atomspace_. Here it is stored again in _self.atomspace_. Is there\n> a reason there two different names?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/opencog/opencog/commit/870ad473acd62f1a054b49a1446c0af968713971#commitcomment-6280397\n> .\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/6280643/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8086684", "body": "By the way, you don't need to write code to output scheme files. You can\njust add atoms to the AtomSpace and then call\n      atomspace.print_list()\n in python to output all atoms in scheme file. running\n      print atom\nwill print one atom.\n\nOn Wed, Dec 4, 2013 at 12:51 PM, Cosmo Harrigan notifications@github.comwrote:\n\n> In opencog/python/conceptnet/to_scm.py:\n> \n> > +\n> > +# This code creates a scheme file, after inputing the address to a conceptnet\n> > +#  csv file dump. The conceptnet csv file should be in the same folder as this\n> > +# script. Make sure you add '.scm' when inputting the name for the scheme\n> > +# output file. The output file will be in the same folder as the script\n> > +\n> > +from opencog.atomspace import TruthValue\n> > +import reader\n> > +import term\n> > +\n> > +corpus_path = \"\"\n> > +corpus_dict = {}\n> > +conceptnet_dict = {}\n> > +twf = 0\n> > +# ConceptNet relation to Opencog Link mappings\n> > +map_dict1 = {\"/r/ConceptuallyRelatedTo\": \"IntensionalSimilarityLink\",\n> \n> @AmeBel https://github.com/AmeBel let me know your thoughts regarding\n> this suggestion. Thanks.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/opencog/opencog/pull/403/files#r8083742\n> .\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8086684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "keyvan-m-sadeghi": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10099058", "body": "Nice, everything is in sync now!\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10099058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/12688749", "body": "Jade is testing the FISHGRAM and PLN which are both written in Python,\naccording to Jade, running these tests on a cogserver is slow and debugging\nthe code is only possible by printing stuff to the log. I've hand-coded\nsome preprocessing rules that she needed, but ultimately a simple scm\nreader that puts data to an instance of pyatomspace seems to be useful for\ntesting purpose (this way she can use PyCharm for debugging)\n\nOn Fri, Jan 25, 2013 at 1:30 PM, Linas Vepstas notifications@github.comwrote:\n\n> And, BTW, it will almost surely be faster (performance-wise, in terms of\n> atoms per second) than whatever code you write... currently, the scheme I/O\n> is the fastest I/O mechanism in all of opencog.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/opencog/opencog/pull/96#issuecomment-12688682.\n\n## \n\nKeyvan Mir Mohammad Sadeghi\nMSc AI\n\n\"One has to pay dearly for immortality; one has to die several times while\none is still alive.\" -- Friedrich Nietzsche\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/12688749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/12688926", "body": "See lines 213-252 in https://github.com/opencog/opencog/blob/master/opencog/python/embodiment/situation.py for example\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/12688926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/12689032", "body": "I'm not sure why she had speed issues. But speed is not the primary concern, debugging is.\n\n> But if someone loads data into opencog (via scm, or any one of the other ways) won't these atoms be available in pyatomspace? And vice versa -- if you put atoms into pyatomspace, won't they be visible in scm?\n\nThey will be available if one uses cython bindings, but we also have the Python impl of the atomspace (https://github.com/opencog/opencog/blob/master/opencog/python/opencog/atomspace.py) which merely serves for testing purpose, that is not connected to the cogserver (we also have a very simple impl of cogserver in python, https://github.com/opencog/opencog/blob/master/opencog/python/opencog/cogserver.py)\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/12689032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/16136791", "body": "Will this break any of the old Cython bindings code?\n\n## \n\nKeyvan Mir Mohammad Sadeghi\nMSc AI\n\n\"One has to pay dearly for immortality; one has to die several times while\none is still alive.\" -- Friedrich Nietzsche\nOn Apr 9, 2013 10:19 PM, \"Linas Vepstas\" notifications@github.com wrote:\n\n> There is no need to declare atom types in a central location. This was\n> architected and implemented long long ago, but sat around unused. So split\n> \n> ## up the atom type table, and hand it off to the interested parties.\n> \n> You can merge this Pull Request by running\n> \n>   git pull https://github.com/linas/opencog link-grammar\n> \n> Or view, comment on, or merge it at:\n> \n>   https://github.com/opencog/opencog/pull/143\n> Commit Summary\n> - Add link-grammar as a requirement.\n> - Try to reationalize the scm type constructors...\n> - Each subsystem defines its own atom types.\n> - Unit test need to load up a bunch of atom types.\n> \n> File Changes\n> - _M_ README.mdhttps://github.com/opencog/opencog/pull/143/files#diff-0(15)\n> - _M_ examples/atomtypes/CMakeLists.txthttps://github.com/opencog/opencog/pull/143/files#diff-1(6)\n> - _M_ lib/OpenCogMacros.cmakehttps://github.com/opencog/opencog/pull/143/files#diff-2(11)\n> - _M_ lib/opencog-chatbot.confhttps://github.com/opencog/opencog/pull/143/files#diff-3(6)\n> - _M_ lib/opencog-test.conf.examplehttps://github.com/opencog/opencog/pull/143/files#diff-4(1)\n> - _M_ lib/opencog.confhttps://github.com/opencog/opencog/pull/143/files#diff-5(13)\n> - _M_ opencog/atomspace/CMakeLists.txthttps://github.com/opencog/opencog/pull/143/files#diff-6(6)\n> - _M_ opencog/atomspace/atom_types.scripthttps://github.com/opencog/opencog/pull/143/files#diff-7(146)\n> - _M_ opencog/dynamics/attention/CMakeLists.txthttps://github.com/opencog/opencog/pull/143/files#diff-8(11)\n> - _M_ opencog/dynamics/attention/atom_types.scripthttps://github.com/opencog/opencog/pull/143/files#diff-9(18)\n> - _M_ opencog/embodiment/AtomSpaceExtensions/AtomSpaceUtil.cchttps://github.com/opencog/opencog/pull/143/files#diff-10(2)\n> - _M_ opencog/embodiment/AtomSpaceExtensions/CMakeLists.txthttps://github.com/opencog/opencog/pull/143/files#diff-11(7)\n> - _M_ opencog/embodiment/AtomSpaceExtensions/atom_types.scripthttps://github.com/opencog/opencog/pull/143/files#diff-12(27)\n> - _M_ opencog/embodiment/AtomSpaceExtensions/atom_types_init.cchttps://github.com/opencog/opencog/pull/143/files#diff-13(3)\n> - _M_ opencog/embodiment/Control/Language/LanguageComprehension.cchttps://github.com/opencog/opencog/pull/143/files#diff-14(2)\n> - _M_ opencog/embodiment/Control/Language/OutputRelex.cchttps://github.com/opencog/opencog/pull/143/files#diff-15(3)\n> - _M_\n>   opencog/embodiment/Control/OperationalAvatarController/EntityExperienceAgent.cchttps://github.com/opencog/opencog/pull/143/files#diff-16(2)\n> - _M_\n>   opencog/embodiment/Control/OperationalAvatarController/MockOpcHCTest.cchttps://github.com/opencog/opencog/pull/143/files#diff-17(1)\n> - _M_ opencog/embodiment/Control/OperationalAvatarController/Pet.cchttps://github.com/opencog/opencog/pull/143/files#diff-18(1)\n> - _M_\n>   opencog/embodiment/Control/OperationalAvatarController/PsiActionSelectionAgent.cchttps://github.com/opencog/opencog/pull/143/files#diff-19(2)\n> - _M_\n>   opencog/embodiment/Control/OperationalAvatarController/PsiRelationUpdaterAgent.cchttps://github.com/opencog/opencog/pull/143/files#diff-20(3)\n> - _M_\n>   opencog/embodiment/Control/OperationalAvatarController/PsiRuleUtil.cchttps://github.com/opencog/opencog/pull/143/files#diff-21(1)\n> - _M_\n>   opencog/embodiment/Control/PerceptionActionInterface/CMakeLists.txthttps://github.com/opencog/opencog/pull/143/files#diff-22(1)\n> - _M_ opencog/embodiment/Control/PerceptionActionInterface/PAI.cchttps://github.com/opencog/opencog/pull/143/files#diff-23(2)\n> - _M_\n>   opencog/embodiment/Control/PredicateUpdaters/BasicPredicateUpdater.cchttps://github.com/opencog/opencog/pull/143/files#diff-24(7)\n> - _M_\n>   opencog/embodiment/Control/PredicateUpdaters/IsNoisyPredicateUpdater.cchttps://github.com/opencog/opencog/pull/143/files#diff-25(1)\n> - _M_\n>   opencog/embodiment/Control/PredicateUpdaters/IsPeePlacePredicateUpdater.cchttps://github.com/opencog/opencog/pull/143/files#diff-26(3)\n> - _M_\n>   opencog/embodiment/Control/PredicateUpdaters/IsPickupablePredicateUpdater.cchttps://github.com/opencog/opencog/pull/143/files#diff-27(1)\n> - _M_\n>   opencog/embodiment/Control/PredicateUpdaters/IsPooPlacePredicateUpdater.cchttps://github.com/opencog/opencog/pull/143/files#diff-28(3)\n> - _M_\n>   opencog/embodiment/Control/PredicateUpdaters/IsSmallPredicateUpdater.cchttps://github.com/opencog/opencog/pull/143/files#diff-29(1)\n> - _M_ opencog/embodiment/Control/PredicateUpdaters/PredicatesUpdater.cchttps://github.com/opencog/opencog/pull/143/files#diff-30(2)\n> - _M_ opencog/embodiment/Control/Procedure/BuiltIn/PetActionSchema.cchttps://github.com/opencog/opencog/pull/143/files#diff-31(3)\n> - _M_ opencog/embodiment/Learning/Filter/ActionFilter.cchttps://github.com/opencog/opencog/pull/143/files#diff-32(6)\n> - _M_ opencog/embodiment/Learning/Filter/EntityRelevanceFilter.cchttps://github.com/opencog/opencog/pull/143/files#diff-33(2)\n> - _M_ opencog/embodiment/Learning/Filter/EntropyFilter.hhttps://github.com/opencog/opencog/pull/143/files#diff-34(1)\n> - _M_\n>   opencog/embodiment/Learning/LearningServer/ImitationLearningAgent.cchttps://github.com/opencog/opencog/pull/143/files#diff-35(1)\n> - _M_ opencog/embodiment/Learning/behavior/BDRetriever.cchttps://github.com/opencog/opencog/pull/143/files#diff-36(1)\n> - _M_ opencog/embodiment/WorldWrapper/PAIWorldWrapper.cchttps://github.com/opencog/opencog/pull/143/files#diff-37(35)\n> - _M_ opencog/embodiment/WorldWrapper/WorldWrapperUtil.cchttps://github.com/opencog/opencog/pull/143/files#diff-38(1)\n> - _M_ opencog/nlp/types/CMakeLists.txthttps://github.com/opencog/opencog/pull/143/files#diff-39(1)\n> - _M_ opencog/nlp/types/atom_types.scripthttps://github.com/opencog/opencog/pull/143/files#diff-40(97)\n> - _D_ opencog/scm/type_constructors.scmhttps://github.com/opencog/opencog/pull/143/files#diff-41(210)\n> - _M_ opencog/server/CMakeLists.txthttps://github.com/opencog/opencog/pull/143/files#diff-42(1)\n> - _M_ opencog/server/CogServer.cchttps://github.com/opencog/opencog/pull/143/files#diff-43(26)\n> - _M_ opencog/server/CogServer.hhttps://github.com/opencog/opencog/pull/143/files#diff-44(2)\n> - _M_ opencog/server/CogServerMain.cchttps://github.com/opencog/opencog/pull/143/files#diff-45(4)\n> - _M_ opencog/spacetime/CMakeLists.txthttps://github.com/opencog/opencog/pull/143/files#diff-46(11)\n> - _M_ opencog/spacetime/SpaceServer.cchttps://github.com/opencog/opencog/pull/143/files#diff-47(2)\n> - _M_ opencog/spacetime/SpaceTime.cchttps://github.com/opencog/opencog/pull/143/files#diff-48(1)\n> - _M_ opencog/spacetime/TimeServer.cchttps://github.com/opencog/opencog/pull/143/files#diff-49(1)\n> - _A_ opencog/spacetime/atom_types.scripthttps://github.com/opencog/opencog/pull/143/files#diff-50(13)\n> - _A_ opencog/spacetime/atom_types_init.cchttps://github.com/opencog/opencog/pull/143/files#diff-51(63)\n> - _M_ opencog/viterbi/CMakeLists.txthttps://github.com/opencog/opencog/pull/143/files#diff-52(15)\n> - _A_ opencog/viterbi/atom_types.scripthttps://github.com/opencog/opencog/pull/143/files#diff-53(9)\n> - _A_ opencog/viterbi/atom_types_init.cchttps://github.com/opencog/opencog/pull/143/files#diff-54(47)\n> - _M_ tests/atomspace/CMakeLists.txthttps://github.com/opencog/opencog/pull/143/files#diff-55(6)\n> - _M_ tests/embodiment/Learning/behavior/BDRetrieverUTest.cxxtesthttps://github.com/opencog/opencog/pull/143/files#diff-56(2)\n> - _M_ tests/persist/file/CMakeLists.txthttps://github.com/opencog/opencog/pull/143/files#diff-57(1)\n> - _M_ tests/query/BiggerPatternUTest.cxxtesthttps://github.com/opencog/opencog/pull/143/files#diff-58(1)\n> - _M_ tests/query/BuggyStackUTest.cxxtesthttps://github.com/opencog/opencog/pull/143/files#diff-59(14)\n> - _M_ tests/query/CMakeLists.txthttps://github.com/opencog/opencog/pull/143/files#diff-60(2)\n> - _M_ tests/query/ImplicationUTest.cxxtesthttps://github.com/opencog/opencog/pull/143/files#diff-61(22)\n> - _M_ tests/query/MatchLinkUTest.cxxtesthttps://github.com/opencog/opencog/pull/143/files#diff-62(13)\n> - _M_ tests/query/PatternUTest.cxxtesthttps://github.com/opencog/opencog/pull/143/files#diff-63(1)\n> - _M_ tests/query/StackMoreUTest.cxxtesthttps://github.com/opencog/opencog/pull/143/files#diff-64(13)\n> - _M_ tests/query/UnorderedUTest.cxxtesthttps://github.com/opencog/opencog/pull/143/files#diff-65(14)\n> - _M_ tests/query/VarTypeNotUTest.cxxtesthttps://github.com/opencog/opencog/pull/143/files#diff-66(13)\n> - _M_ tests/query/stackmore-o-o.scmhttps://github.com/opencog/opencog/pull/143/files#diff-67(2)\n> - _M_ tests/query/stackmore-o-u.scmhttps://github.com/opencog/opencog/pull/143/files#diff-68(2)\n> - _M_ tests/query/stackmore-u-o.scmhttps://github.com/opencog/opencog/pull/143/files#diff-69(2)\n> - _M_ tests/query/stackmore-u-u.scmhttps://github.com/opencog/opencog/pull/143/files#diff-70(2)\n> - _M_ tests/query/unordered-more.scmhttps://github.com/opencog/opencog/pull/143/files#diff-71(2)\n> - _M_ tests/scm/BasicSCMUTest.cxxtesthttps://github.com/opencog/opencog/pull/143/files#diff-72(2)\n> - _M_ tests/scm/CMakeLists.txthttps://github.com/opencog/opencog/pull/143/files#diff-73(1)\n> - _M_ tests/spatial/TimeServerUTest.cxxtesthttps://github.com/opencog/opencog/pull/143/files#diff-74(1)\n> \n> Patch Links:\n> - https://github.com/opencog/opencog/pull/143.patch\n> - https://github.com/opencog/opencog/pull/143.diff\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/16136791/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/16138910", "body": "Yeah, the problem is that nobody is maintaining that code anymore, and it's\nthe bridge that connects the Python code (that me and Jade mainly work on)\nto the rest of OpenCog.\n\nI'm kinda confused about our short-term and long-term plan with respect to\nthe Atomspace, heard that somebody's gonna implement a Go version and\nyou're revising it in the coming months, what's happening?\n\n## \n\nKeyvan Mir Mohammad Sadeghi\nMSc AI\n\n\"One has to pay dearly for immortality; one has to die several times while\none is still alive.\" -- Friedrich Nietzsche\nOn Apr 10, 2013 1:09 AM, \"Linas Vepstas\" notifications@github.com wrote:\n\n> Dunno; the cython code doesn't compile, I can't test it.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/opencog/opencog/pull/143#issuecomment-16138648\n> .\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/16138910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/16140994", "body": "Sounds very interesting. I read your blog the day you wrote it. Having PLN\nas a part of Atomtable will speed things 10x I guess, the current Python\nimpl is slow and confuzzling (confuzzle is a blend of confused and puzzled).\n\n## \n\nKeyvan Mir Mohammad Sadeghi\nMSc AI\n\n\"One has to pay dearly for immortality; one has to die several times while\none is still alive.\" -- Friedrich Nietzsche\nOn Apr 10, 2013 1:34 AM, \"Linas Vepstas\" notifications@github.com wrote:\n\n> I just wrote a blog on the atomspace, and why its a good thing:\n> http://blog.opencog.org/2013/03/24/why-hypergraphs/ so as far as I'm\n> concerned, its the main, central feature that defines opencog. I can now\n> count four different versions of the atomspace: besides the main one in\n> opencog, there is also Boris Iordanov's HypergraphDB; I am trying to\n> convince Boris to make it more compatible with the opencog atomspace.\n> There's the new guy with the go implementation -- I'm excited, but its a\n> lot of work, so who knows where it will go. The fourth implementation is\n> within link-grammar, but I am abandoning that -- it was a neat and\n> successful experiment, but I realized that, rather than re-inventing it\n> from scratch, it would be smarter to fix what's wrong with the opencog\n> atomspace. (I guess you could call relex a fifth implementation of the\n> atomspace ... but its pretty slick, but differrent in important ways.)**\n> \n> My current plans are as follows: implement a parser for link-grammar on\n> top of the opencog atomspace (with luck, this could/should work with a\n> either the go or the java implementations too.) Move the pattern matcher\n> deep into the guts of the atom table (for performance, for building\n> indexes, for doing on-the-fly forward chaining -- think of it as \"PLN that\n> works\" -- you set up a PLN rule once, and then, as new data comes in, it\n> gets munched on automatically) After this (I have very little spare time) I\n> hope to start doing statistical experiments and learning.\n> \n> The trick is, I cannot do the experiments on statistics and learning\n> without a working, usable, fast atomspace plus rule processor. So need to\n> build that first.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/opencog/opencog/pull/143#issuecomment-16140070\n> .\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/16140994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20362685", "body": "Hmmm, that looks awful, wonder how this might have happened. I might be\neasier if you'd just backup the files you've changed, delete your fork,\nfork again, then copy the backed up files into your brand new fork, commit\nand submit a new pull request.\nOn Jul 2, 2013 8:29 PM, \"Linas Vepstas\" notifications@github.com wrote:\n\n> Given what I see, I think the easiest way to clean all of this up is to\n> take the patch series from this pull request, hand-edit that to remove the\n> junk, and then create a brand new branch, and apply the patch series to\n> that.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/opencog/opencog/pull/220#issuecomment-20355416\n> .\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20362685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/opencog/opencog/comments/3525292", "body": "This file never had an original author. It was mere copy and paste from Zhenhua's Python module code. But now it's completely rewritten.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/3525292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/5063676", "body": "@cosmoharrigan it's a module for importing CSV data to python data structures. I once used it for some Bayesian Network work I was doing, believe it's not been used ever since. Can be safely deleted if that's what you're asking ;)\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/5063676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/5069781", "body": "Which it uses. It only adds the option to specify each column's data type\nand name, then get objects per rows with members of the specified type and\nname...\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/5069781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7445804", "body": "Nah, it's my fault, my neurons are tuned this way! Thanks for pointing out, I'll check all the files to see if there are more in my next pull.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/7445804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8241708", "body": "hmmm.. that's not true. This is the file that generates the composition formulas, it's part of the core system!\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8241708/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8241733", "body": "sure, I'll make unit tests out of these at some point\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8241733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8242601", "body": "hmmm, not sure. The logic that this whole package is based on is allen_interval, it's not just this file.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8242601/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8242523", "body": "That's something that we need to discuss with the rest of the team. We need a naming convention for our python files. Often in major projects, people are forced to put their files in packages (folders, I tried to enforce this, but didn't succeed completely).\n\nIn a package, you might have very specific files, these will get their unique names. But some of the functions and classes are core to the package. These go to a file named 'classes.py' or 'main.py' or whatever the team convention is. 'generic.py' is what my 'main.py' should be here. I'll rename once we agree on a convention.\n\nThen, the APIs that author oughts to share with the rest of the team (i.e. the ones that are not internal workings) go to _ _ init _ _.py so they can be easily imported using only {package name}.{api name}.  \n\nAlso, if there are some utility classes that are shared between the files in a package, these should go to a file named 'util.py' in the package. If the utility functions and classes are so generic that are used in other packages in the root, they should go to the 'utility' package.\n\nI suggest that we create an issue to discuss this further.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8242523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8243168", "body": "Hmmm, these conventions are designed to make understanding the code easy! 'classes.py' is the centric classes of the package. So when an experienced python programmer sees one, they'll immediately know that: ah, this is where the classes I care about in this package are. It's analogous to '{package_name}.py'. And when they see util.py they will go: ah, this is the shit I shouldn't care about!\n\nI do buy into your argument that a book should not be called book, that's why I have a class named ['ProbabilityDistributionPiecewiseLinear'](https://github.com/opencog/opencog/blob/master/opencog/python/spatiotemporal/temporal_events/membership_function.py#L23) (I have had longer ones, this is one in this package that I happen to remember..).\n\nConventions are there to save you headaches, not to give you one...\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8243168/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8243779", "body": "it's not an example, it creates a 2.4GB csv dataset that is later used in the other methods in this same file to learn composition formulas.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8243779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8250838", "body": "right, 100^3, but I do that 10 times. Each line has 39 float values, these are not the event specifications, rather the values of 13 relations for A->B, B->C and A->C we got from the previous step (relation formulas). The goal here is to feed in the first 26 numbers to a learning algorithm and have it come up with formulas for each of the 13 relations of A->C\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8250838/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8256204", "body": "That was enlightening Joel, thanks. Yeah I wondered why one would use some other file than _ _ init _ _.py for this purpose.\nWhat's your opinion on util.py? Say I have some functions that are common to different files in a package, but are not general enough to go to the utility package, would it make sense to reserve the name 'util' for such scenarios?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/8256204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "alito": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10179332", "body": "Linas, you mentioned you \"fixed\" the third one, but I'm still getting these errors.  Are they fixed on a different branch?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10179332/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10317231", "body": "Fixes them here. Thanks\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10317231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10318575", "body": "Moving to boost 1.52.0 seems to fix this.  Close this?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/10318575/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/17116587", "body": "Ah, I see, link-grammar svn trunk does install read-dict.h.  Maybe a dependency on a hypothetical 4.7.12 is needed for the CMake checker.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/17116587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jmvanel": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/opencog/opencog/issues/comments/11285091", "body": "I could run the server.\nAt first I did not find the helpful pages \nhttp://wiki.opencog.org/w/OpenCog_shell\nand\nhttp://wiki.opencog.org/w/Cookbook\nthat are not hyperlinked at the first level in the wiki :( .\n\nAlas, on client side it does not work as expected:\n\n% telnet localhost 17001\nTrying ::1...\nTrying 127.0.0.1...\nConnected to localhost.\nEscape characte is '^]'.\nopencog> help\ncommand \"help\" not found\nopencog> agents-list\ncommand \"agents-list\" not found\nopencog> list\ncommand \"list\" not found\nopencog> scm\ncommand \"scm\" not found\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/11285091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/11371726", "body": "To execute the server, one must be in directory bin/\nand run e.g. :\n\nopencog/server/cogserver -c opencog/lib/opencog.conf\n\nThis page says it right :\nhttp://wiki.opencog.org/w/Cookbook\n\nI'll make a pull request with an updated README .\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/11371726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/13765738", "body": "I tried the latest release of Cython 0.18 (released 2013-01-28) . I read somewhere that trying Cython 0.17 has been reported as non solving issues.\n\nI installed Cython 0.18 from sources.\nThis fixed Cython troubles, but further down the road, it is not OK, see mail on the list \"Re-trying OpenCog build\".\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/13765738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "rebcabin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/opencog/opencog/issues/comments/11453650", "body": "Since I got everything going last night in an Ubuntu VM, I am not going to sweat it on the Mac.  Thanks very much for having a look!\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/11453650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "amberj": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/opencog/opencog/issues/comments/12243257", "body": "Tested running 'cmake .' in my local branch. cmake runs perfectly fine now.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/12243257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/12243280", "body": "Also, I guess we don't need cpack configuration as it is very outdated now. If other devs agree to it, I can send in another pull request to remove cpack lines from cmake config of opencog.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/12243280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/12243683", "body": "Linas: should I send in another pull request then (with cpack lines removed from cmake config)?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/12243683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/12243899", "body": "Linas:\nErr, what is your last comment supposed to mean?\n- Should we rename the file README.md back to README in opencog/ ?\n- Or, should we remove cpack config from CMakeLists.txt (instead of what I did in this pull request)?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/12243899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/12337699", "body": "If everyone agrees to keeping README.md, someone should merge this particular pull request into https://github.com/opencog/opencog (because otherwise 'cmake .' fails to create a Makefile). This in turn forces 'make' to fail causing the build to fail to start.\nThis might not be immediately obvious to newbie cmake user that he/she simply needs to replace \"README\" with \"README.md\" in CMakeLists.txt (which is what this pull request does).\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/12337699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/12348749", "body": "Thanks Linas, https://github.com/opencog/opencog builds fine now!\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/12348749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14308881", "body": "Build fine now. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14308881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14633634", "body": "Yup, this was fixed earlier today. You can close this issue now. \n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14633634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14644702", "body": "Test comment... The \"Comments\" button is enabled this time (unlike last time when it was 'javascript-disabled').\nPlease ignore this comment.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14644702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/21672152", "body": "I sent an email with more details to @linas @githart @ngeiswei @matt2000 and Ben (filled with Vagrant-advocacy stuff).. Check your inbox!\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/21672152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/21690853", "body": "@githart:\nI added this to opencog repo (instead of ocpkg repo) because then this integrates seamlessly into developers current workflow. Right now, this is how developers work (not only OpenCog but most projects):\n`git clone <repo>\ncd project/\n<hack><hack><hack>\ngit commit/push\nmake/install`\nNow if we add Vagrantfile (config) to project's main repo, this workflow becomes \n`git clone <repo>\ncd project/\n<hack><hack><hack>\ngit commit/push\nvagrant up ; vagrant ssh\nmake/install`\nSo, this integrates seamlessly into how developers are used to working with code (just add a couple new vagrant commands to workflow). This is why Vagrant's documentation says (http://docs.vagrantup.com/v2/vagrantfile/):\n\n> \"Vagrantfile is supposed to be committed to version control. **This allows other developers involved in the project to check out the code, run vagrant up, and be on their way.\"**\n\nBut then this is no hard-and-fast rule. If you want it in ocpkg, I can move it easily. Or maybe, we should keep vagrant configs both in opencog's git repo as well as ocpkg's repo (if not permanent then at least for few weeks so that users can try out both and decide which one to keep).\nWhat do you say?\n\nDo you mean that we need to run scripts/createSymLinksOCPKG.sh every time after build? I understand from your comment that it creates useful symlinks but can you please confirm that we need to add this to the list of commands executed automatically at the end of build process?\n\nAlso, I didn't knew about contents of opencog/scripts/ ... If you agree to keep vagrant configuration files in opencog's repo, then I'll move opencog/vagrant-configs/\\* to opencog/scripts (because vagrant-configs/ simply contain bash scripts). \n\namberj/opencog/Vagrantfile (the main config file that has options that are passed to virtualbox) is a file written in Ruby. I don't understand Ruby but I think I know the Ruby snippet that will find number of threads/cores on a system and start the VM with number of processors we want to allocate to the VM (--cpus option to VboxManage command to specify number of virtual CPUs for VM http://www.virtualbox.org/manual/ch08.html#idp12921600). \nHow many --cpus should we allocate to the VM? For e.g. my laptop has Core i5 with 2 cores and 4 threads. How man --cpus should we allocate to VM? In general, how many --cpus to allocate to VM on a host system with 'm' cores and 'n' threads? Once you tell this to me, I'll push a fix.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/21690853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/21693476", "body": "@linas:\n\n> I like this; I might actually try it; I admit I never tried ocpkg. If I have an existing ubuntu install, does it fork the VM from that, or does it do a completely new install of some other ubunutu version?\n\nNo, it does _not_ forks VM from your existing Ubuntu install. \nIn our vagrant setup, you will download a minimal image (~320MB) of Ubuntu-12.04.2-amd64 (version codename: Precise64). **This is a one-time-only download.**\nIt downloads and saves this image in some directory unknown to me right now (let's call this directory _'X'_). You will then `cd` to the directory containing your opencog repo and run `vagrant up` which will **first create a copy of already-downloaded VM image** from directory _'X'_ and **then boot the copy of image** inside VM. You can setup as many VMs you want without the need to download any extra bit (i.e. the image will be downloaded only once). Download once, create as many VMs as you want.\n\nNo, it does _not_ forks VM from your existing Ubuntu install. I guess this is good for us because we want all our new users to use one single version of Ubuntu (so that we don't have to worry about error related to different versions of OS/compilers/libboost/dependencies).\nOfficially, Vagrant only supports two Ubuntu versions as downloadable VM images: 10.04 (lucid) and 12.04 (precise). I chose 12.04/precise because this version is a Long Term Support (LTS) release and will be supported till April 2017 (ubuntu version support timeline: https://wiki.ubuntu.com/Releases#Stable). This way OpenCog developers won't have to worry about supporting a newer version till April 2017. In the meantime, OpenCog packagers can create DEBs for different versions of Ubuntu (as well as Windows and OSX binary installers) at their own pace. But if some user is using a version of Ubuntu we don't have DEB packages for (or Windows or OSX), we can point him/her to our Vagrant+OpenCog setup which will work fine till April 2017 (without the need of any major effort on development/packaging front).\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/21693476/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/21693871", "body": "Quoting myself from previous comment:\n\n> Officially, Vagrant only supports two Ubuntu versions as downloadable VM images: 10.04 (lucid) and 12.04 (precise). I chose 12.04/precise because this version is a Long Term Support (LTS) release and will be supported till April 2017 (ubuntu version support timeline: https://wiki.ubuntu.com/Releases#Stable). This way OpenCog developers won't have to worry about supporting a newer version till April 2017.\n\nJust to clarify what I meant by that^ comment of mine: Instead of using ubuntu-12.04-precise64 till April 2017, we might instead choose switch to Ubuntu-14.04 (another LTS release expected in April 2014). This way we'll always support latest Ubuntu LTS release in our vagrant development VMs (while packagers build/release/support .deb packages for newer non-LTS versions). This will make sure that OpenCog codebase is always 'buildable' on currently supported Ubuntu versions.\nOtherwise if we stick with Ubuntu-12.04-precise till 2017 (bad idea imho!), then it might happen that when in 2017 we try to build our code it might fail with loads of seemingly unfixable errors. New LTS versions are released every 2 years (and each LTS version is supported for 5 years). So, supporting every new LTS version in our vagrant development environment makes sense. \nAnd for non-LTS Ubuntu versions, our packagers will be responsible to make sure that OpenCog builds on all of them (like David tested OpenCog for 12.10 and 13.04 and documented the changes needed on wiki) and try to ship DEB packages for all of them. But if there are no DEB packages available for some Ubuntu version, our vagrant VM (running some LTS version) will act as a fallback environment (especially for new users) to build/use OpenCog.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/21693871/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/22433394", "body": "CC: @githart @Alex-van-der-Peet \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/22433394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "mattkruse": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/opencog/opencog/issues/comments/12325676", "body": "+1\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/12325676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "kurekaoru": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/opencog/opencog/issues/comments/12934043", "body": "With boost=150000, fix in foreach.h recreates the problem, removing fix fixes it.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/12934043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "agomez2": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/opencog/opencog/issues/comments/13092828", "body": "Thanks, I will do that and resubmit\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/13092828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/13119545", "body": "Thanks for your help, ngeiswei \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/13119545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/13119647", "body": "Thanks Linas.\n\nThe demo still does not work. It throws an exception when trying to do something with the demes. \n\nI'll try to see what is happening with it today. I am trying to get a sense of the whole opencog so I was playing with the examples to understand a little more.\n\nOk, if I can make it to work I'll submit some documentation.\n\nThanks a lot.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/13119647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/13122204", "body": "It's when expanding one of the exemplars of the deme, it fails to expand and it throws an exception.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/13122204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/13173804", "body": "which examples do you think would be best to see moses and other parts of opencog work so I can learn more?\n\nhow can I enable logging in this example? I have followed the code until \"pendingMessagesToWrite.push\" but then I do not know how to recover the logs from that queue. I have not been able to see any messages in the logs either. I've tried in /tmp/opencog.log but it's not there.\n\nThanks\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/13173804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "GaneshSJ": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14325335", "body": "91% tests passed, 11 tests failed out of 121\n\nTotal Test time (real) = 805.25 sec\n\nThe following tests FAILED:\n     21 - IndefiniteTruthValueUTest (Failed)\n     32 - BasicSaveUTest (Failed)\n     60 - RESTfulTest (Failed)\n     62 - PythonModuleUTest (SEGFAULT)\n     63 - AllPythonModuleTests (Failed)\n     95 - iostream_bscored_combo_treeUTest (Failed)\n    102 - PsiDemandUpdaterAgentUTest (SEGFAULT)\n    103 - PsiModulatorUpdaterAgentUTest (SEGFAULT)\n    104 - PsiFeelingUpdaterAgentUTest (SEGFAULT)\n    105 - PsiActionSelectionAgentUTest (SEGFAULT)\n    117 - BEUTest (OTHER_FAULT)\nErrors while running CTest\nmake[3]: **\\* [CMakeFiles/test] Error 8\nmake[2]: **\\* [CMakeFiles/test.dir/all] Error 2\nmake[1]: **\\* [CMakeFiles/test.dir/rule] Error 2\nmake: **\\* [test] Error 2\n\n> > What should be done?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14325335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "aw1231": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14654480", "body": "I seem to have this problem too, any permanent solutions?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14654480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14687886", "body": "Found the solution: https://groups.google.com/forum/#!msg/cython-users/0CYqw2cRFlg/4J9VzLJY7bkJ\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14687886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14706566", "body": "It does, but for the version that is suggested on the wiki for Ubuntu Quantal Quetzal, adding spaces works.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14706566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14745141", "body": "Ah, but then it gets stuck on \n    ../../../cython/libPythonModule.so: undefined reference to `PyString_FromString'\n    collect2: error: ld returned 1 exit status\n    make[2]: **\\* [opencog/embodiment/Control/OperationalAvatarController/OACTester] Error 1\n    make[1]: **\\* [opencog/embodiment/Control/OperationalAvatarController/CMakeFiles/OACTester.dir/all] Error 2\n    make: **\\* [all] Error 2\nwhich is apparently due to cython using python 3.  Where does libPythonModule.so come from?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14745141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Alex-van-der-Peet": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14888325", "body": "I tried with -m40000, that gets it closer.\n\nalex@ubuntu:~/src/opencog/build/opencog/learning/moses/main$ ./moses -Hmux -k3 -j8 -m40000\n-64 or(and(or(and(or(and(!$1 $2 $6) $3) or(!$1 $2)) and(or(and($1 $5) $3) !$2 $9) and($1 $2 $7)) or(and(!$1 $10) !$2 !$3 $11) or(and($2 $10) $1 !$3 $8)) and(or(!$1 $5) !$2 !$3 $4)) \n-64 or(and(or(and(or(and(!$1 $3) $2) or(and(!$1 $6) $3)) and(or(and($1 $5) $3) !$2 $9) and($1 $2 $7)) or(and(!$1 $10) !$2 !$3 $11) or(and($2 $10) $1 !$3 $8)) and(or(!$1 $5) !$2 !$3 $4)) \n-64 or(and(or(and(or(and(!$1 $2 $6) $3) or(and(!$1 $3) $2 $9)) and($1 !$2 $5 $9) and($1 $2 $7)) or(and(!$1 $10) !$2 !$3 $11) or(and($2 $10) $1 !$3 $8)) and(or(!$1 $5) !$2 !$3 $4)) \n-64 or(and(or(and(or(and(!$1 $2 $6) $3) or(!$1 $2 $9)) and(or(and($1 $5) $3) !$2 $9) and($1 $2 $7)) or(and(!$1 $10) !$2 !$3 $11) or(and($2 $10) $1 !$3 $8)) and(or(!$1 $5) !$2 !$3 $4)) \n-64 or(and(or(and(or(and(!$1 $2 $6) $3) or(and(!$1 $3) $2)) and(or(and($1 $5) $3) !$2 $9) and($1 $2 $7)) or(and(!$1 $10) !$2 !$3 $11) or(and($2 $10) $1 !$3 $8)) and(or(!$1 $5) !$2 !$3 $4)) \n-64 or(and(or(and(or(and(!$1 $2 $6) $3) or(!$1 $2 $9)) and($1 !$2 $5 $9) and($1 $2 $7)) or(and(or(!$1 $7) !$3) and(!$1 $10) !$2 $11) or(and($2 $10) $1 !$3 $8)) and(or(!$1 $5) !$2 !$3 $4)) \n-64 or(and(or(and(or(and(!$1 $2 $6) $3) or(!$1 $2 $9)) and($1 !$2 $5 $9) and($1 $2 $7)) or(and(or($1 $6) !$3) and(!$1 $10) !$2 $11) or(and($2 $10) $1 !$3 $8)) and(or(!$1 $5) !$2 !$3 $4)) \n-64 or(and(or(and(or(and(!$1 $2 $6) $3) or(and(!$1 $3) $2 $9)) and(or(and($1 $5) $3) !$2 $9) and($1 $2 $7)) or(and(!$1 $10) !$2 !$3 $11) or(and($2 $10) $1 !$3 $8)) and(or(!$1 $5) !$2 !$3 $4)) \n-64 or(and(or(and(or(and(!$1 $2 $6) $3) or(!$1 $2)) and(or(and($1 $5) $3) !$2 $9) and($1 $2 $7)) or(and(or(!$1 $7) !$3) and(!$1 $10) !$2 $11) or(and($2 $10) $1 !$3 $8)) and(or(!$1 $5) !$2 !$3 $4)) \n-64 or(and(or(and(or(and(!$1 $2 $6) $3) or(!$1 $2)) and(or(and($1 $5) $3) !$2 $9) and($1 $2 $7)) or(and(or($1 $6) !$3) and(!$1 $10) !$2 $11) or(and($2 $10) $1 !$3 $8)) and(or(!$1 $5) !$2 !$3 $4)) \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14888325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14888329", "body": "Oh ok, so the wiki page is incorrect then? I found that k1 did work yeh, will continue from there, thanks!\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14888329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14888418", "body": "I'll close this.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14888418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14893082", "body": "Spoke with Jade, she approved the change, that's the best I can do for now...\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/14893082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/18329962", "body": "I picked this up and implemented something that works, may need further filtering / expansion though, let me know if so.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/18329962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20935641", "body": "Started with a fresh pull, added dependencies:\n\nfrom pln to cython\nfrom ubigraph to opencog_atom_types\n\nSeems to be chugging along nicely now...if it finishes I'll push the fix, as well as Ramin's newly required folder.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20935641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20938198", "body": "Hi Linas,\n\nRamin would know the details, but the fact is it works! I had to add a .gitignore because you can\u2019t add empty folders with git.\n\nTake care,\n\nAlex\n\nFrom: Linas Vepstas [mailto:notifications@github.com] \nSent: 14 July 2013 23:44\nTo: opencog/opencog\nCc: Alex van der Peet\nSubject: Re: [opencog] Added empty folder (with .gitignore) to fix the Python error (#230)\n\nHuh? Thefolder's not empty, its got two files in it ... !? Why would .gitignore fix a pthon problem? This makes no sense at all.\n\n\u2014\nReply to this email directly or view it on GitHub https://github.com/opencog/opencog/pull/230#issuecomment-20938174 .  https://github.com/notifications/beacon/Lo02E8G8QZK2yjRuF5xNmxLyrIkL09vT-uIGbedlSrwhczk4Nl-j9ruIgv1V8N_b.gif \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20938198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20938480", "body": "Yep, thanks!\n\nFrom: Linas Vepstas [mailto:notifications@github.com] \nSent: 15 July 2013 00:01\nTo: opencog/opencog\nCc: Alex van der Peet\nSubject: Re: [opencog] Build errors, fresh pull (#228)\n\nBased on above, and the applied patches, I think this is all fixed now.\n\n\u2014\nReply to this email directly or view it on GitHub https://github.com/opencog/opencog/issues/228#issuecomment-20938451 .  https://github.com/notifications/beacon/Lo02E8G8QZK2yjRuF5xNmzdCcCuYkJHltlp66XQOUYIlJ96oLCwKLiB4xXOp5LHM.gif \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20938480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/21190965", "body": "Hi Paulo,\n\nI don\u2019t think my pull request with the fix has been accepted yet.\n\nCan you go into your build/cython folder and run make there? Then go back to your build folder and do make there. That worked for me\u2026\n\nTake care,\n\nAlex\n\nFrom: Paulo Edgar Castro [mailto:notifications@github.com] \nSent: 18 July 2013 22:33\nTo: opencog/opencog\nCc: Alex van der Peet\nSubject: Re: [opencog] Build errors, fresh pull (#228)\n\nNopes,\n\nIt's not fixed, a fresh just now today seems to indicate the issue is still there.\nPerhaps some other missing deps?\n\n-- Build type: Release\n-- Boost version: 1.48.0\n-- Found the following Boost libraries:\n-- date_time\n-- filesystem\n-- program_options\n-- regex\n-- serialization\n-- signals\n-- system\n-- thread\n-- Boost version 104800 found.\n-- Found Boost::program_options\n-- Found Boost::math\n-- Expat XML parser found.\n-- GSL found.\n-- Guile was found.\n-- HyperTable was not found. Make sure HYPERTABLE_LIBRARY and HYPERTABLE_INCLUDE_DIR are set.\n-- Hypertable not found; the experimental distributed persistence DB needs it.\n-- link-grammar (>=4.7.12) was not found. Make sure LINK_GRAMMAR_LIBRARY, LINK_GRAMMAR_INCLUDE_DIR and LINK_GRAMMAR_DATA_DIR are set.\n-- Link Grammar missing: needed for the Viterbi parser.\n-- Could NOT find MPI_C (missing: MPI_C_LIBRARIES MPI_C_INCLUDE_PATH) \n-- Could NOT find MPI_CXX (missing: MPI_CXX_LIBRARIES MPI_CXX_INCLUDE_PATH) \n-- MPI missing: needed for MPI-MOSES.\n-- OpenGL was found.\n-- Found these protobuf libs: /usr/lib64/libprotobuf.so\n-- Protobuf was found.\n-- Python libs found.\n-- Python destination dir found: /usr/lib/python2.7/site-packages\n-- SDL was found.\n-- SDL_gfx was found\n-- TCL shell was found here: /bin/tclsh\n-- UnixODBC was found.\n-- Valgrind Prefix: \n-- Could NOT find VALGRIND (missing: VALGRIND_INCLUDE_DIR) \n-- VALGRIND missing: needed for thread debugging.\nCMake Warning at CMakeLists.txt:421 (MESSAGE):\nXerces 3.1.1 not supported. Only versions 2.\\* are supported. Embodiment\nwon't be built.\n\n-- Found these zmq libs: /usr/lib64/libzmq.so\n-- ZeroMQ was found.\n\nThe following components will be built:\n\nAtomSpace - A weighted and typed hypergraph database.\nAttention - Agents for attention allocation dynamics.\nComboReduct - Library for reduction of combo program trees.\nCythonBinding - Cython (python) bindings.\nDim. Embedding - Compute dimensional embedding of the AtomSpace.\nDoxygen - Code documentation.\nFeatureSelection - MOSES based feature selection tool.\nMOSES - Meta-Optimizing Semantic Evolutionary Search.\nPLN - Probalistic Logic Networks.\nSchemeBinding - Scheme bindings and shell.\nServer - The CogServer.\nSpatial - Vizualisation of the 3D spacemap.\nSQL Persist - Interfaces for SQL persistance of the AtomSpace.\nUbigraph - Visualisation of the AtomSpace.\nUtil - General utility library.\nWebInterface - Web server and REST API.\n\nThe following components WILL NOT be built:\n\nEmbodiment - Architecture for embodiment.\nHypertable - HyperTable for scalable persistance (experimental).\nViterbi - Viterbi Parser for Link Grammar.\n\n-- Configuring done\n-- Generating done\n-- Build files have been written to: /download/opencog/bin\n[ 4%] Built target cogutil\n[ 17%] Built target comboreduct\n[ 17%] Built target action-reductor\n[ 17%] Built target contin-reductor\n[ 17%] Built target eval-table\n[ 17%] Built target full-reductor\n[ 17%] Built target gen-disj-conj\n[ 17%] Built target gen-table\n[ 17%] Built target interactive-reductor\n[ 17%] Built target logical-reductor\n[ 17%] Built target mixed-reductor\n[ 18%] Built target perception-reductor\n[ 18%] Built target repl\n[ 18%] Built target tree_gen\n[ 18%] Built target opencog_atom_types\n[ 20%] Built target ubigraph\n[ 20%] Built target pln_atom_types\n[ 20%] Built target pln-types\n[ 29%] Built target atomspace\n[ 31%] Built target xml\n[ 34%] Built target smob\n[ 34%] Built target nlp_atom_types\n[ 34%] Built target nlp-types\n[ 34%] Built target persist\n[ 35%] Built target server\n[ 35%] Built target cogserver_cython\n[ 37%] Built target atomspace_cython\n[ 39%] Built target agent_finder\n[ 39%] Built target PythonEval\n[ 39%] Built target PythonModule\n[ 39%] Building CXX object opencog/reasoning/pln/CMakeFiles/pln.dir/Testing.cc.o\n/download/opencog/opencog/reasoning/pln/Testing.cc:16:46: fatal error: opencog/cython/logic_wrapper_api.h: No such file or directory\ncompilation terminated.\nmake[2]: **\\* [opencog/reasoning/pln/CMakeFiles/pln.dir/Testing.cc.o] Error 1\nmake[1]: **\\* [opencog/reasoning/pln/CMakeFiles/pln.dir/all] Error 2\nmake: **\\* [all] Error 2\n\n\u2014\nReply to this email directly or view it on GitHub https://github.com/opencog/opencog/issues/228#issuecomment-21187503 .  https://github.com/notifications/beacon/Lo02E8G8QZK2yjRuF5xNmzdCcCuYkJHltlp66XQOUYIlJ96oLCwKLiB4xXOp5LHM.gif \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/21190965/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/21229245", "body": "That\u2019s ok, glad I got it half right ;)\n\nAlex\n\nFrom: Linas Vepstas [mailto:notifications@github.com] \nSent: 19 July 2013 01:56\nTo: opencog/opencog\nCc: Alex van der Peet\nSubject: Re: [opencog] Fixed build (#236)\n\nSorry, I didn't see this in the email queue, and just pushed more or less the same fix (except for the atom-types dependency -- how can that depend on cython?) So I'm just closing this one.\n\n\u2014\nReply to this email directly or view it on GitHub https://github.com/opencog/opencog/pull/236#issuecomment-21201917 .  https://github.com/notifications/beacon/Lo02E8G8QZK2yjRuF5xNm5xHkUnGLWsjgoJqFnS-CnN6HlevHTZi8XAKtc5NSVvn.gif \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/21229245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/opencog/opencog/comments/4934015", "body": "It seems commenting out this line in file-utils.scm\n\n(use-modules (rnrs io ports))\n\nFixes it, but I have a feeling the line is a new (required?) addition and the module it refers to was not committed.\n\nAlex\n\nFrom: Shujing KE [mailto:notifications@github.com] \nSent: 24 December 2013 16:41\nTo: opencog/opencog\nSubject: Re: [opencog] Fix a UTF-8 bug. (f6793d0)\n\nThis change, seems to give an error when I start the embodiment server: \nFile: ./scm/file-utils-scm line: 19 \nERROR: no code for module (rnrs io port)\nABORT: misc-error \n\nAnd when I try scm-eval (export-all-atoms \"/home/path..... \") , it doesn't work, the output error:\nBacktrace:\nIn current input:\n1: 0\\* scm-eval (export-all-atoms \"/home/path..... \")\n:1:1: In expression (export-all-atoms \"/home/path..... \")\n:1:1: Unbound variable: export-all-atoms \n\n\u2014\nReply to this email directly or view it on GitHub https://github.com/opencog/opencog/commit/f6793d0b9d41edc1846bea80a95c25cd9cc136a0#commitcomment-4933971 .  https://github.com/notifications/beacon/2569494__eyJzY29wZSI6Ik5ld3NpZXM6QmVhY29uIiwiZXhwaXJlcyI6MTcwMzQwNzI1MCwiZGF0YSI6eyJpZCI6MjI1NjUyMDB9fQ==--80af2e8cb9fbfe8e0776cee9069e32ed0292191a.gif \n\n---\n\nNo virus found in this message.\nChecked by AVG - www.avg.com\nVersion: 2014.0.4259 / Virus Database: 3658/6945 - Release Date: 12/23/13\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/4934015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/4941598", "body": "Hi Linas,\n\nSorry for the delay, we haven\u2019t been in the office today, will get you the answers to your questions tomorrow!\n\nAlex\n\nFrom: Linas Vepstas [mailto:notifications@github.com] \nSent: 27 December 2013 01:43\nTo: opencog/opencog\nCc: Alex van der Peet\nSubject: Re: [opencog] Fix a UTF-8 bug. (f6793d0)\n\nOK, I just opened a trouble ticket against ocpkg to upgrade to guile-2.0\n\nThe rnrs (which implements scheme standards r5rs and r6rs) is provided by package guile-2.0-libs in ubuntu 12.04 LTS precise. The files are in /usr/share/guile/2.0/rnrs ... so:\n-- is that package installed?\n-- did you recompile opencog?\n-- is version 1.8 also installed (one can have both installed simultaneously; it shouldn't interfere.)\n\n\u2014\nReply to this email directly or view it on GitHub https://github.com/opencog/opencog/commit/f6793d0b9d41edc1846bea80a95c25cd9cc136a0#commitcomment-4941584 .  https://github.com/notifications/beacon/2569494__eyJzY29wZSI6Ik5ld3NpZXM6QmVhY29uIiwiZXhwaXJlcyI6MTcwMzYxMjU4OCwiZGF0YSI6eyJpZCI6MjI1NjUyMDB9fQ==--ee374ded1c3ec04f71f95d0228da29e5d8b440c2.gif \n\n---\n\nNo virus found in this message.\nChecked by AVG - www.avg.com\nVersion: 2014.0.4259 / Virus Database: 3658/6949 - Release Date: 12/25/13\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/4941598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/4945786", "body": "Hi Linas,\n\nGuile-2.0-libs was not installed at the time the issue cropped up, 1.8 is installed. After installing it and rebuilding OpenCog (with the line in file-utils.scm re-enabled) the error still appears. Installing guile-2.0-dev per Cosmo\u2019s suggestion, required the uninstallation of guile-1.8-dev as well as installing the guile-2.0 package. We tried cmake next, but got the errors below, even after rebooting:\n\n-- Build type: Release\n\n-- BFD not found\n\n-- Binutils-dev missing: No pretty stack-trace printing.\n\n-- Boost version 104601 found.\n\n-- Found Boost::program_options\n\n-- Found Boost::math\n\n-- Expat XML parser found.\n\n-- GSL found.\n\n-- Could NOT find GTK3 (missing:  GTK3_LIBRARIES GTK3_INCLUDE_DIRS) \n\n-- GTK missing: needed for the the gtk-visualizer.\n\nCMake Error at lib/FindGuile.cmake:56 (MESSAGE):\n\n  Found libguile.h but not version.h; check your guile installation!\n\nCall Stack (most recent call first):\n\n  CMakeLists.txt:230 (FIND_PACKAGE)\n\n-- Configuring incomplete, errors occurred!\n\nThanks!\n\nAlex \n\nFrom: Linas Vepstas [mailto:notifications@github.com] \nSent: 27 December 2013 01:43\nTo: opencog/opencog\nCc: Alex van der Peet\nSubject: Re: [opencog] Fix a UTF-8 bug. (f6793d0)\n\nOK, I just opened a trouble ticket against ocpkg to upgrade to guile-2.0\n\nThe rnrs (which implements scheme standards r5rs and r6rs) is provided by package guile-2.0-libs in ubuntu 12.04 LTS precise. The files are in /usr/share/guile/2.0/rnrs ... so:\n-- is that package installed?\n-- did you recompile opencog?\n-- is version 1.8 also installed (one can have both installed simultaneously; it shouldn't interfere.)\n\n\u2014\nReply to this email directly or view it on GitHub https://github.com/opencog/opencog/commit/f6793d0b9d41edc1846bea80a95c25cd9cc136a0#commitcomment-4941584 .  https://github.com/notifications/beacon/2569494__eyJzY29wZSI6Ik5ld3NpZXM6QmVhY29uIiwiZXhwaXJlcyI6MTcwMzYxMjU4OCwiZGF0YSI6eyJpZCI6MjI1NjUyMDB9fQ==--ee374ded1c3ec04f71f95d0228da29e5d8b440c2.gif \n\n---\n\nNo virus found in this message.\nChecked by AVG - www.avg.com\nVersion: 2014.0.4259 / Virus Database: 3658/6949 - Release Date: 12/25/13\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/4945786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/4946306", "body": "Ok, point 1 duly noted. We did recompile after installing guile 2.0 though, that\u2019s why we got the error. And I didn\u2019t use any \u2013force or \u2013ignore flags but sure, we\u2019ll try a reinstall tomorrow.\n\nThanks!\n\nAlex\n\nFrom: Linas Vepstas [mailto:notifications@github.com] \nSent: 28 December 2013 00:23\nTo: opencog/opencog\nCc: Alex van der Peet\nSubject: Re: [opencog] Fix a UTF-8 bug. (f6793d0)\n\nOK, several notes:\n\n1) In linux, rebooting the system to solve a problem will never actually solve the problem. Unlike apple macintosh or windows, rebooting linux is almost always a bad idea. Don't do it.\n\n2) The *-dev packages (in ubuntu, *-devel in redhat) contain the header files that are needed for compiling. These packages also contain the libraries that tell the compile-time linker how to link the executable, and thus, which run-time libraries to use. Thus, simply installing guile-2.0 did nothing at all, since opencog was still linked to guile-1.8. As mentioned previously, you need to recompile with guile-2.0 to have it actually use guile-2.0\n\n3) The missing version.h problem I can't help you with. It sounds like you somehow broke the install, possibly by moving or deleting files by hand, or by using the --force-\\* flags (with RPM/yum) or --ignore flags (with dpkg/apt) You have to figure out what you broke, and unbreak it. Probably the easiest thing to do would be to completely remove guile-dev, and then install it again. \n\n\u2014\nReply to this email directly or view it on GitHub https://github.com/opencog/opencog/commit/f6793d0b9d41edc1846bea80a95c25cd9cc136a0#commitcomment-4946292 .  https://github.com/notifications/beacon/2569494__eyJzY29wZSI6Ik5ld3NpZXM6QmVhY29uIiwiZXhwaXJlcyI6MTcwMzY5NDE1MSwiZGF0YSI6eyJpZCI6MjI1NjUyMDB9fQ==--b3ba05131b3ac760c03bfe85fe948863f65679d4.gif \n\n---\n\nNo virus found in this message.\nChecked by AVG - www.avg.com\nVersion: 2014.0.4259 / Virus Database: 3658/6953 - Release Date: 12/27/13\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/4946306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/4946547", "body": "Yes I know but we\u2019re at home now (it is 01:05 after all) and the computer in question is in the office :)\n\nFrom: Linas Vepstas [mailto:notifications@github.com] \nSent: 28 December 2013 00:32\nTo: opencog/opencog\nCc: Alex van der Peet\nSubject: Re: [opencog] Fix a UTF-8 bug. (f6793d0)\n\n? Reinstalling guile-dev should take less time than reading this. Just say \n'yum remove guile-2.0-devel; yum install guile-2.0-devel' (or use apt on \nan ubuntu system) \n\nOn 27 December 2013 10:25, Alex van der Peet notifications@github.comwrote: \n\n> Ok, point 1 duly noted. We did recompile after installing guile 2.0 \n> though, that\u2019s why we got the error. And I didn\u2019t use any \u2013force or \u2013ignore \n> flags but sure, we\u2019ll try a reinstall tomorrow. \n> \n> Thanks! \n> \n> Alex \n> \n> From: Linas Vepstas [mailto:notifications@github.com] \n> Sent: 28 December 2013 00:23 \n> To: opencog/opencog \n> Cc: Alex van der Peet \n> Subject: Re: [opencog] Fix a UTF-8 bug. (f6793d0) \n> \n> OK, several notes: \n> \n> 1) In linux, rebooting the system to solve a problem will never actually \n> solve the problem. Unlike apple macintosh or windows, rebooting linux is \n> almost always a bad idea. Don't do it. \n> \n> 2) The *-dev packages (in ubuntu, *-devel in redhat) contain the header \n> files that are needed for compiling. These packages also contain the \n> libraries that tell the compile-time linker how to link the executable, and \n> thus, which run-time libraries to use. Thus, simply installing guile-2.0 \n> did nothing at all, since opencog was still linked to guile-1.8. As \n> mentioned previously, you need to recompile with guile-2.0 to have it \n> actually use guile-2.0 \n> \n> 3) The missing version.h problem I can't help you with. It sounds like you \n> somehow broke the install, possibly by moving or deleting files by hand, or \n> by using the --force-\\* flags (with RPM/yum) or --ignore flags (with \n> dpkg/apt) You have to figure out what you broke, and unbreak it. Probably \n> the easiest thing to do would be to completely remove guile-dev, and then \n> install it again. \n> \n> \u2014 \n> Reply to this email directly or view it on GitHub < \n> https://github.com/opencog/opencog/commit/f6793d0b9d41edc1846bea80a95c25cd9cc136a0#commitcomment-4946292> \n> . < \n> https://github.com/notifications/beacon/2569494__eyJzY29wZSI6Ik5ld3NpZXM6QmVhY29uIiwiZXhwaXJlcyI6MTcwMzY5NDE1MSwiZGF0YSI6eyJpZCI6MjI1NjUyMDB9fQ==--b3ba05131b3ac760c03bfe85fe948863f65679d4.gif> \n> ---\n> \n> No virus found in this message. \n> Checked by AVG - www.avg.com \n> Version: 2014.0.4259 / Virus Database: 3658/6953 - Release Date: 12/27/13 \n> \n> \u2014 \n> Reply to this email directly or view it on GitHubhttps://github.com/opencog/opencog/commit/f6793d0b9d41edc1846bea80a95c25cd9cc136a0#commitcomment-4946306 \n> . \n\n\u2014\nReply to this email directly or view it on GitHub https://github.com/opencog/opencog/commit/f6793d0b9d41edc1846bea80a95c25cd9cc136a0#commitcomment-4946344 .  https://github.com/notifications/beacon/2569494__eyJzY29wZSI6Ik5ld3NpZXM6QmVhY29uIiwiZXhwaXJlcyI6MTcwMzY5NDc0MSwiZGF0YSI6eyJpZCI6MjI1NjUyMDB9fQ==--c4281e07f011e9dcb8902e6752d6fdf599107451.gif \n\n---\n\nNo virus found in this message.\nChecked by AVG - www.avg.com\nVersion: 2014.0.4259 / Virus Database: 3658/6953 - Release Date: 12/27/13\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/4946547/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/4951802", "body": "Thanks Cosmo, that did the trick! Figured it would be something like that\u2026\n\nPLN will not be built now apparently, but I\u2019ll be looking into that myself in the coming week anyway.\n\nFrom: Cosmo Harrigan [mailto:notifications@github.com] \nSent: 29 December 2013 10:12\nTo: opencog/opencog\nCc: Alex van der Peet\nSubject: Re: [opencog] Fix a UTF-8 bug. (f6793d0)\n\nHi @Alex-van-der-Peet https://github.com/Alex-van-der-Peet , try deleting CMakeCache.txt in your build directory, and then run cmake .. again.\n\nCMake Error at lib/FindGuile.cmake:56 (MESSAGE):\n\n  Found libguile.h but not version.h; check your guile installation!\n\nCall Stack (most recent call first):\n\n  CMakeLists.txt:230 (FIND_PACKAGE)\n\n-- Configuring incomplete, errors occurred!\n\n\u2014\nReply to this email directly or view it on GitHub https://github.com/opencog/opencog/commit/f6793d0b9d41edc1846bea80a95c25cd9cc136a0#commitcomment-4951019 .  https://github.com/notifications/beacon/2569494__eyJzY29wZSI6Ik5ld3NpZXM6QmVhY29uIiwiZXhwaXJlcyI6MTcwMzgxNTkzMiwiZGF0YSI6eyJpZCI6MjI1NjUyMDB9fQ==--19475ff4507b71f0cadfe5973ba6cd5eafc62f4e.gif \n\n---\n\nNo virus found in this message.\nChecked by AVG - www.avg.com\nVersion: 2014.0.4259 / Virus Database: 3658/6955 - Release Date: 12/27/13\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/4951802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/4953472", "body": "Well obviously, but I never noticed it in the \u2018will not be built\u2019 segment of the cmake output. \n\nFrom: jadeoneill [mailto:notifications@github.com] \nSent: 30 December 2013 06:48\nTo: opencog/opencog\nCc: Alex van der Peet\nSubject: Re: [opencog] Fix a UTF-8 bug. (f6793d0)\n\nYou mean C++ PLN? That's been obsolete for years! \n\nOn Mon, Dec 30, 2013 at 12:17 AM, Alex van der Peet < \nnotifications@github.com> wrote: \n\n> Thanks Cosmo, that did the trick! Figured it would be something like that\u2026 \n> \n> PLN will not be built now apparently, but I\u2019ll be looking into that myself \n> in the coming week anyway. \n> \n> From: Cosmo Harrigan [mailto:notifications@github.com] \n> Sent: 29 December 2013 10:12 \n> To: opencog/opencog \n> Cc: Alex van der Peet \n> Subject: Re: [opencog] Fix a UTF-8 bug. (f6793d0) \n> \n> Hi @Alex-van-der-Peet https://github.com/Alex-van-der-Peet , try \n> deleting CMakeCache.txt in your build directory, and then run cmake .. \n> again. \n> \n> CMake Error at lib/FindGuile.cmake:56 (MESSAGE): \n> \n> Found libguile.h but not version.h; check your guile installation! \n> \n> Call Stack (most recent call first): \n> \n> CMakeLists.txt:230 (FIND_PACKAGE) \n> \n> -- Configuring incomplete, errors occurred! \n> \n> \u2014 \n> Reply to this email directly or view it on GitHub < \n> https://github.com/opencog/opencog/commit/f6793d0b9d41edc1846bea80a95c25cd9cc136a0#commitcomment-4951019> \n> . < \n> https://github.com/notifications/beacon/2569494__eyJzY29wZSI6Ik5ld3NpZXM6QmVhY29uIiwiZXhwaXJlcyI6MTcwMzgxNTkzMiwiZGF0YSI6eyJpZCI6MjI1NjUyMDB9fQ==--19475ff4507b71f0cadfe5973ba6cd5eafc62f4e.gif> \n> ---\n> \n> No virus found in this message. \n> Checked by AVG - www.avg.com \n> Version: 2014.0.4259 / Virus Database: 3658/6955 - Release Date: 12/27/13 \n> \n> \u2014 \n> Reply to this email directly or view it on GitHubhttps://github.com/opencog/opencog/commit/f6793d0b9d41edc1846bea80a95c25cd9cc136a0#commitcomment-4951802 \n> . \n\n\u2014\nReply to this email directly or view it on GitHub https://github.com/opencog/opencog/commit/f6793d0b9d41edc1846bea80a95c25cd9cc136a0#commitcomment-4952934 .  https://github.com/notifications/beacon/2569494__eyJzY29wZSI6Ik5ld3NpZXM6QmVhY29uIiwiZXhwaXJlcyI6MTcwMzg5MDA3NiwiZGF0YSI6eyJpZCI6MjI1NjUyMDB9fQ==--f28aed4becd9a18ddfbe4fda522d69e8f7b4828d.gif \n\n---\n\nNo virus found in this message.\nChecked by AVG - www.avg.com\nVersion: 2014.0.4259 / Virus Database: 3658/6957 - Release Date: 12/28/13\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/4953472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/4953553", "body": "It was disabled a long time ago, I think it was more recently added to the \u2018Will not be built\u2019 segment though, which could have been done at the time it was disabled.\n\nFrom: bgoertzel [mailto:notifications@github.com] \nSent: 30 December 2013 11:19\nTo: opencog/opencog\nCc: Alex van der Peet\nSubject: Re: [opencog] Fix a UTF-8 bug. (f6793d0)\n\nC++ PLN shouldn't be routinely getting built as part of building OpenCog \nthese days, if indeed it is... \n\nOn Sun, Dec 29, 2013 at 9:40 PM, Alex van der Peet <notifications@github.com  <mailto:notifications@github.com%20%0b> \n\n> wrote: \n> \n> Well obviously, but I never noticed it in the \u2018will not be built\u2019 segment \n> of the cmake output. \n> \n> From: jadeoneill [mailto:notifications@github.com] \n> Sent: 30 December 2013 06:48 \n> To: opencog/opencog \n> Cc: Alex van der Peet \n> Subject: Re: [opencog] Fix a UTF-8 bug. (f6793d0) \n> \n> You mean C++ PLN? That's been obsolete for years! \n> \n> On Mon, Dec 30, 2013 at 12:17 AM, Alex van der Peet < \n> notifications@github.com> wrote: \n> \n> > Thanks Cosmo, that did the trick! Figured it would be something like \n> > that\u2026 \n> > \n> > PLN will not be built now apparently, but I\u2019ll be looking into that \n> > myself \n> > in the coming week anyway. \n> > \n> > From: Cosmo Harrigan [mailto:notifications@github.com] \n> > Sent: 29 December 2013 10:12 \n> > To: opencog/opencog \n> > Cc: Alex van der Peet \n> > Subject: Re: [opencog] Fix a UTF-8 bug. (f6793d0) \n> > \n> > Hi @Alex-van-der-Peet https://github.com/Alex-van-der-Peet , try \n> > deleting CMakeCache.txt in your build directory, and then run cmake .. \n> > again. \n> > \n> > CMake Error at lib/FindGuile.cmake:56 (MESSAGE): \n> > \n> > Found libguile.h but not version.h; check your guile installation! \n> > \n> > Call Stack (most recent call first): \n> > \n> > CMakeLists.txt:230 (FIND_PACKAGE) \n> > \n> > -- Configuring incomplete, errors occurred! \n> > \n> > \u2014 \n> > Reply to this email directly or view it on GitHub < \n> > \n> > https://github.com/opencog/opencog/commit/f6793d0b9d41edc1846bea80a95c25cd9cc136a0#commitcomment-4951019> \n> > \n> > . < \n> > \n> > https://github.com/notifications/beacon/2569494__eyJzY29wZSI6Ik5ld3NpZXM6QmVhY29uIiwiZXhwaXJlcyI6MTcwMzgxNTkzMiwiZGF0YSI6eyJpZCI6MjI1NjUyMDB9fQ==--19475ff4507b71f0cadfe5973ba6cd5eafc62f4e.gif> \n> > ---\n> > \n> > No virus found in this message. \n> > Checked by AVG - www.avg.com \n> > Version: 2014.0.4259 / Virus Database: 3658/6955 - Release Date: \n> > 12/27/13 \n> > \n> > \u2014 \n> > Reply to this email directly or view it on GitHub< \n> > https://github.com/opencog/opencog/commit/f6793d0b9d41edc1846bea80a95c25cd9cc136a0#commitcomment-4951802> \n> > \n> > . \n> \n> \u2014 \n> Reply to this email directly or view it on GitHub < \n> https://github.com/opencog/opencog/commit/f6793d0b9d41edc1846bea80a95c25cd9cc136a0#commitcomment-4952934> \n> . < \n> https://github.com/notifications/beacon/2569494__eyJzY29wZSI6Ik5ld3NpZXM6QmVhY29uIiwiZXhwaXJlcyI6MTcwMzg5MDA3NiwiZGF0YSI6eyJpZCI6MjI1NjUyMDB9fQ==--f28aed4becd9a18ddfbe4fda522d69e8f7b4828d.gif> \n> ---\n> \n> No virus found in this message. \n> Checked by AVG - www.avg.com \n> Version: 2014.0.4259 / Virus Database: 3658/6957 - Release Date: 12/28/13 \n> \n> \u2014 \n> Reply to this email directly or view it on GitHubhttps://github.com/opencog/opencog/commit/f6793d0b9d41edc1846bea80a95c25cd9cc136a0#commitcomment-4953472 \n> . \n## \n\nBen Goertzel, PhD \nhttp://goertzel.org \n\n\"In an insane world, the sane man must appear to be insane\". -- Capt. James \nT. Kirk \n\n\u2014\nReply to this email directly or view it on GitHub https://github.com/opencog/opencog/commit/f6793d0b9d41edc1846bea80a95c25cd9cc136a0#commitcomment-4953545 .  https://github.com/notifications/beacon/2569494__eyJzY29wZSI6Ik5ld3NpZXM6QmVhY29uIiwiZXhwaXJlcyI6MTcwMzkwNjM1OCwiZGF0YSI6eyJpZCI6MjI1NjUyMDB9fQ==--d41293c7844ea1109bf12779274e2f6ba0904706.gif \n\n---\n\nNo virus found in this message.\nChecked by AVG - www.avg.com\nVersion: 2014.0.4259 / Virus Database: 3658/6957 - Release Date: 12/28/13\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/4953553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/3273939", "body": "Hi Linas,\n\nThanks for looking into the script!\n\nJust to be sure though, doesn\u2019t your build folder then qualify as an \u2018in-source\u2019 build? It was my impression that we were trying to move away from \u2018in-source\u2019 builds, so this script was intended for people who run the ocpkg script in the new sudo-free way which creates an \u2018out-of-source\u2019 build folder.\n\nTo avoid confusion, ocpkg makes\n\nOpencog\n\nOpencog/src  \u00df gitroot in my script, since that\u2019s where .git lives\n\nOpencog/build\n\nTake care,\n\nAlex\n\nFrom: Linas Vepstas [mailto:notifications@github.com] \nSent: 07 March 2013 05:16\nTo: opencog/opencog\nCc: Alex van der Peet\nSubject: Re: [opencog] SymLink script to support new ocpkg folder structure (#116)\n\nIn scripts/createSymLinksOCPKG.sh:\n\n> -            mkdir -p bin/opencog/cython\n> -            mkdir -p bin/opencog/embodiment/AtomSpaceExtensions/\n>   +\n> -            echo \"Folder creation complete!\"\n>   +\n> -            # And then the symbolic links\n> -            # BUILDROOT = /tmp/opencog/build\n> -            # ln -s ../../../../build/opencog/server/cogserver bin/opencog/server/cogserver\n>   +\n> -            #echo \"GITROOT=$GITROOT\"  \n>   +\n> -            if [ -z $BUILDROOT ]; then\n> -                    BUILDROOT=$GITROOT/../build\n> -            fi \n>   +\n> -            if ! [ -e $BUILDROOT ]; then\n\nI think this all looks pretty good, although here, perhaps you want to try to see if $GITROOT/build exists, and use that?\n\nI'm not sure, maybe that is a bad idea, but that is where my build dir is. ...\n\n\u2014\nReply to this email directly or view it on GitHub https://github.com/opencog/opencog/pull/116/files#r3269707 .  https://github.com/notifications/beacon/Lo02E8G8QZK2yjRuF5xNm0gMivnRNDeGMWcYh-8kw3CWJRnUSCHPlCLA74kH4HMT.gif \n\n---\n\nNo virus found in this message.\nChecked by AVG - www.avg.com\nVersion: 2013.0.2899 / Virus Database: 2641/6152 - Release Date: 03/06/13\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/3273939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13063571", "body": "Good point, replaced the other occurences too now.\n\nFrom: Cosmo Harrigan [mailto:notifications@github.com] \nSent: 27 May 2014 11:39\nTo: opencog/opencog\nCc: Alex van der Peet\nSubject: Re: [opencog] Renamed EvaluationToMemberRule to GeneralEvaluationToMemberRule per Amen... (#793)\n\nIn opencog/python/pln/rules/direct_evaluation_rules.py:\n\n> @@ -302,7 +302,7 @@ def create_general_evaluation_to_member_rules(chainer):\n>      return rules\n> \n> -class EvaluationToMemberRule(Rule):\n> +class GeneralEvaluationToMemberRule(Rule):\n\n@Alex-van-der-Peet https://github.com/Alex-van-der-Peet  This class has usages in other files that would also need to be renamed (example: https://github.com/opencog/opencog/search?q=EvaluationToMemberRule https://github.com/opencog/opencog/search?q=EvaluationToMemberRule&ref=cmdform &ref=cmdform).\n\n\u2014\nReply to this email directly or view it on GitHub https://github.com/opencog/opencog/pull/793/files#r13061325 .  https://github.com/notifications/beacon/2569494__eyJzY29wZSI6Ik5ld3NpZXM6QmVhY29uIiwiZXhwaXJlcyI6MTcxNjc4MTE1MywiZGF0YSI6eyJpZCI6MzMxMjEwMjB9fQ==--ec48aadb216828c2c9e0723a7b7c4a2e37572451.gif \n\n---\n\nNo virus found in this message.\nChecked by AVG - www.avg.com\nVersion: 2014.0.4570 / Virus Database: 3950/7568 - Release Date: 05/26/14\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13063571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "likelion": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/opencog/opencog/issues/comments/16489432", "body": "Yes, I pulled it yesterday. Probably gcc incompatibility, will try to compile with gcc-4.6, let's see what happens.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/16489432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ehabnoreddin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/opencog/opencog/issues/comments/19075662", "body": "cmake is pulling from the python 3.3m library. 2 solution I have found, \n1. run ccmake, edit the python library (3 entries?) to *2.7 from *3.3m, then run make\n2. run \ngrep -rl 'PyString_FromString' ./ | xargs sed -i 's/PyString_FromString/PyBytes_FromString/g'  \n\nfrom the opencog dir\n\nsolution 2 should help fix support for python 3.\n\nusing Mint 15 (raring) and just compiled successfully both ways.  \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/19075662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/19075812", "body": "is this still open? i found that building latest cython and doing what i described here works.. https://github.com/opencog/opencog/issues/48#issuecomment-19075662\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/19075812/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "5aurabhpathak": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/opencog/opencog/issues/comments/19939652", "body": "Ok. I have created a pull request.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/19939652/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/19942040", "body": "Of course. will do it later this day.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/19942040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/19977018", "body": "Done! I have created a pull request in case you'd like to review.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/19977018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/19983116", "body": "Pleasure's all mine linas! Thanks for helping me a lot these days...\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/19983116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20085668", "body": "been told by the author about some errors pertaining to the fix, seemingly on line 268 of PythonEval.cc. Any comments?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20085668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20154213", "body": "The files in question compiled for me using guile 2.0.9. There was no problem! Not sure why you're getting this. GNU Guile has a lot of dependencies. It was a little tricky to setup. You have to be sure you've built all of them before building guile itself!\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20154213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20201647", "body": "I see it. I should've payed more attention there. Those two were a blunder on my part. Thanks for fixing it!\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20201647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/opencog/opencog/comments/3522840", "body": "Agree here. Doing so discredits the original author. IMHO, a better practice would be to include your name instead of replacing someone else's. This way we'll have a nice list of all contributors to a file without discrediting one another. Moreover the contributors names should be placed after something like '@updated by' tag.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/3522840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "anirul": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20099728", "body": "uint not defined...\nshould add something like\n\ntypedef unsigned int uint;\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20099728/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Mike3620": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20167081", "body": "I used apt-get install guile-2.0-dev but when I tried to compile it. It\ngriped that it could not find version.h and when I pointed it to\n/usr/local/guile/2.0/libguile\nit started to gripe it could not find #include <libguile.h> and when I\nchanged it to #include \"/usr/local/guilde/2.0/libguile.h\" it started to\ngenerate other errors. So please tell me how I get opencog to compile under\nguile 2.0 without me having to do so much hacking around my system.\n\nI am using the version from https://github.com/opencog/opencog and have to\nmanually fix the PY_FORMAT error by editing files as I compile, is their\nanother version I should be using. Thank you.\n\nOn Thu, Jun 27, 2013 at 4:53 PM, 5aurabhpathak notifications@github.comwrote:\n\n> The files in question compiled for me using guile 2.0.9. There was no\n> problem! Not sure why you're getting this. GNU Guile has a lot of\n> dependencies. It was a little tricky to setup. You have to be sure you've\n> built all of them before building guile itself!\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/opencog/opencog/issues/216#issuecomment-20154213\n> .\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20167081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/22013875", "body": "It works great.\n\nSent from my iPhone\n\nOn Aug 2, 2013, at 10:10 AM, Linas Vepstas notifications@github.com wrote:\n\n> did that work? are there still problems?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/22013875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "rekino": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20401169", "body": "I have no idea how these permission changes happened! I'll get on to it asap. By the way, shouldn't git ignore the junk files automatically?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20401169/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20402887", "body": "I'm pretty sure they where in the .gitignore. This is the first time that junk files are committed too. I'll check .gitignore anyways\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20402887/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20417773", "body": "Someone plz reject this request, I made a new one without the mistakes I had made here\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20417773/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/21643942", "body": "> /home/leron/projects/devsources/opencog/opencog/cython/PythonEval.cc: In\n> member function \u2018void opencog::PythonEval::add_module_directory(const\n> boost::filesystem3::path&)\u2019:\n> /home/leron/projects/devsources/opencog/opencog/cython/PythonEval.cc:347:82:\n> error: \u2018PyString_FromString\u2019 was not declared in this scope\n> /home/leron/projects/devsources/opencog/opencog/cython/PythonEval.cc: In\n> member function \u2018void opencog::PythonEval::add_module_file(const\n> boost::filesystem3::path&)\u2019:\n> /home/leron/projects/devsources/opencog/opencog/cython/PythonEval.cc:376:74:\n> error: \u2018PyString_FromString\u2019 was not declared in this scope\n\nAre you using the latest version from master branch? \"boost::filesystem3\"\nis deprecated and it's changed to \"boost::filesystem\" in the main branch, a\nmonth ago I think. Also there is something wrong with your python\ninstallation, did you use \"ocpkg\"? Would you please state your python\nversion and installation method?\n\nOn Fri, Jul 26, 2013 at 11:37 PM, Linas Vepstas notifications@github.comwrote:\n\n> I'm guessing you have python3 installed; our makefiles don't check for\n> that; the code wants python 2\n> \n> sandsmark's branch has fixes for this. rekino will have to test; I'm not\n> handling the python bindings.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/opencog/opencog/issues/239#issuecomment-21641738\n> .\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/21643942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/opencog/opencog/comments/3526485", "body": "You can see the original file here https://github.com/opencog/opencog/blob/1557e6b834bf2d4caef354ea8f9a3ac959df4a22/opencog/cython/PythonEval.cc\n\nIt was tailored by copy and pasting from some other files (without any significant changes), mostly https://github.com/opencog/opencog/blob/1557e6b834bf2d4caef354ea8f9a3ac959df4a22/opencog/cython/PythonModule.cc and https://github.com/opencog/opencog/blob/1557e6b834bf2d4caef354ea8f9a3ac959df4a22/opencog/guile/SchemeEval.h\n\nWe're not even sure if Zhenhua is the original author. It certainly had an original author, but IMHO he/she shouldn't get any credits for just reserving a file name.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/3526485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/3532009", "body": "You're right, I've found the original commit that created PythonEval and it's done by Zhenhua. He had written the complete statement in PythonEval.h. I'll put his name back on my next commit. Thanks for pointing it out.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/3532009/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "TheMiXeD": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20401230", "body": "Only when you mark them with git.ignore as junk, or when someone configured on server side that it is junk.\n\nVan: Ramin Barati\nVerzonden: \u200ewoensdag\u200e \u200e3\u200e \u200ejuli\u200e \u200e2013 \u200e10\u200e:\u200e07\nAan: opencog/opencog\n\nI have no idea how these permission changes happened! I'll get on to it asap. By the way, shouldn't git ignore the junk files automatically?\n\n\u2014\nReply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/20401230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "pecastro": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/opencog/opencog/issues/comments/21187503", "body": "Nopes,\n\nIt's not fixed, a fresh just now today seems to indicate the issue is still there.\nPerhaps some other missing deps?\n\n-- Build type: Release\n-- Boost version: 1.48.0\n-- Found the following Boost libraries:\n--   date_time\n--   filesystem\n--   program_options\n--   regex\n--   serialization\n--   signals\n--   system\n--   thread\n-- Boost version 104800 found.\n-- Found Boost::program_options\n-- Found Boost::math\n-- Expat XML parser found.\n-- GSL found.\n-- Guile was found.\n-- HyperTable was not found. Make sure HYPERTABLE_LIBRARY and HYPERTABLE_INCLUDE_DIR are set.\n-- Hypertable not found; the experimental distributed persistence DB needs it.\n-- link-grammar (>=4.7.12) was not found. Make sure LINK_GRAMMAR_LIBRARY, LINK_GRAMMAR_INCLUDE_DIR and LINK_GRAMMAR_DATA_DIR are set.\n-- Link Grammar missing: needed for the Viterbi parser.\n-- Could NOT find MPI_C (missing:  MPI_C_LIBRARIES MPI_C_INCLUDE_PATH) \n-- Could NOT find MPI_CXX (missing:  MPI_CXX_LIBRARIES MPI_CXX_INCLUDE_PATH) \n-- MPI missing: needed for MPI-MOSES.\n-- OpenGL was found.\n-- Found these protobuf libs: /usr/lib64/libprotobuf.so\n-- Protobuf was found.\n-- Python libs found.\n-- Python destination dir found: /usr/lib/python2.7/site-packages\n-- SDL was found.\n-- SDL_gfx was found\n-- TCL shell was found here: /bin/tclsh\n-- UnixODBC was found.\n-- Valgrind Prefix: \n-- Could NOT find VALGRIND (missing:  VALGRIND_INCLUDE_DIR) \n-- VALGRIND missing: needed for thread debugging.\nCMake Warning at CMakeLists.txt:421 (MESSAGE):\n  Xerces 3.1.1 not supported.  Only versions 2.\\* are supported.  Embodiment\n  won't be built.\n\n-- Found these zmq libs: /usr/lib64/libzmq.so\n-- ZeroMQ was found.\n\n## The following components will be built:\n\n   AtomSpace         - A weighted and typed hypergraph database.\n   Attention         - Agents for attention allocation dynamics.\n   ComboReduct       - Library for reduction of combo program trees.\n   CythonBinding     - Cython (python) bindings.\n   Dim. Embedding    - Compute dimensional embedding of the AtomSpace.\n   Doxygen           - Code documentation.\n   FeatureSelection  - MOSES based feature selection tool.\n   MOSES             - Meta-Optimizing Semantic Evolutionary Search.\n   PLN               - Probalistic Logic Networks.\n   SchemeBinding     - Scheme bindings and shell.\n   Server            - The CogServer.\n   Spatial           - Vizualisation of the 3D spacemap.\n   SQL Persist       - Interfaces for SQL persistance of the AtomSpace.\n   Ubigraph          - Visualisation of the AtomSpace.\n   Util              - General utility library.\n   WebInterface      - Web server and REST API.\n\n## The following components WILL NOT be built:\n\n   Embodiment        - Architecture for embodiment.\n   Hypertable        - HyperTable for scalable persistance (experimental).\n   Viterbi           - Viterbi Parser for Link Grammar.\n\n-- Configuring done\n-- Generating done\n-- Build files have been written to: /download/opencog/bin\n[  4%] Built target cogutil\n[ 17%] Built target comboreduct\n[ 17%] Built target action-reductor\n[ 17%] Built target contin-reductor\n[ 17%] Built target eval-table\n[ 17%] Built target full-reductor\n[ 17%] Built target gen-disj-conj\n[ 17%] Built target gen-table\n[ 17%] Built target interactive-reductor\n[ 17%] Built target logical-reductor\n[ 17%] Built target mixed-reductor\n[ 18%] Built target perception-reductor\n[ 18%] Built target repl\n[ 18%] Built target tree_gen\n[ 18%] Built target opencog_atom_types\n[ 20%] Built target ubigraph\n[ 20%] Built target pln_atom_types\n[ 20%] Built target pln-types\n[ 29%] Built target atomspace\n[ 31%] Built target xml\n[ 34%] Built target smob\n[ 34%] Built target nlp_atom_types\n[ 34%] Built target nlp-types\n[ 34%] Built target persist\n[ 35%] Built target server\n[ 35%] Built target cogserver_cython\n[ 37%] Built target atomspace_cython\n[ 39%] Built target agent_finder\n[ 39%] Built target PythonEval\n[ 39%] Built target PythonModule\n[ 39%] Building CXX object opencog/reasoning/pln/CMakeFiles/pln.dir/Testing.cc.o\n/download/opencog/opencog/reasoning/pln/Testing.cc:16:46: fatal error: opencog/cython/logic_wrapper_api.h: No such file or directory\ncompilation terminated.\nmake[2]: **\\* [opencog/reasoning/pln/CMakeFiles/pln.dir/Testing.cc.o] Error 1\nmake[1]: **\\* [opencog/reasoning/pln/CMakeFiles/pln.dir/all] Error 2\nmake: **\\* [all] Error 2\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/21187503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/21195381", "body": "It has worked for me as well.\nTkx.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/21195381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "noskill": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/opencog/opencog/issues/comments/21641296", "body": "Build failed in different place:\n\n[ 30%] Built target server\nScanning dependencies of target PythonEval\n[ 30%] Building CXX object opencog/cython/CMakeFiles/PythonEval.dir/PythonEval.cc.o\n/home/leron/projects/devsources/opencog/opencog/cython/PythonEval.cc: In member function \u2018void opencog::PythonEval::init()\u2019:\n/home/leron/projects/devsources/opencog/opencog/cython/PythonEval.cc:110:89: error: \u2018PyString_FromString\u2019 was not declared in this scope\n/home/leron/projects/devsources/opencog/opencog/cython/PythonEval.cc: In member function \u2018void opencog::PythonEval::printDict(PyObject_)\u2019:\n/home/leron/projects/devsources/opencog/opencog/cython/PythonEval.cc:157:43: error: \u2018PyString_AsString\u2019 was not declared in this scope\n/home/leron/projects/devsources/opencog/opencog/cython/PythonEval.cc: In member function \u2018opencog::Handle opencog::PythonEval::apply(const string&, opencog::Handle)\u2019:\n/home/leron/projects/devsources/opencog/opencog/cython/PythonEval.cc:235:92: error: \u2018PyString_FromString\u2019 was not declared in this scope\n/home/leron/projects/devsources/opencog/opencog/cython/PythonEval.cc:262:88: error: \u2018PyString_AsString\u2019 was not declared in this scope\n/home/leron/projects/devsources/opencog/opencog/cython/PythonEval.cc: In member function \u2018std::string opencog::PythonEval::apply_script(const string&)\u2019:\n/home/leron/projects/devsources/opencog/opencog/cython/PythonEval.cc:293:69: warning: deprecated conversion from string constant to \u2018char_\u2019 [-Wwrite-strings]\n/home/leron/projects/devsources/opencog/opencog/cython/PythonEval.cc:303:42: error: \u2018PyString_AsString\u2019 was not declared in this scope\n/home/leron/projects/devsources/opencog/opencog/cython/PythonEval.cc: In member function \u2018void opencog::PythonEval::addSysPath(std::string)\u2019:\n/home/leron/projects/devsources/opencog/opencog/cython/PythonEval.cc:316:67: error: \u2018PyString_FromString\u2019 was not declared in this scope\n/home/leron/projects/devsources/opencog/opencog/cython/PythonEval.cc: In member function \u2018void opencog::PythonEval::add_module_directory(const boost::filesystem3::path&)\u2019:\n/home/leron/projects/devsources/opencog/opencog/cython/PythonEval.cc:347:82: error: \u2018PyString_FromString\u2019 was not declared in this scope\n/home/leron/projects/devsources/opencog/opencog/cython/PythonEval.cc: In member function \u2018void opencog::PythonEval::add_module_file(const boost::filesystem3::path&)\u2019:\n/home/leron/projects/devsources/opencog/opencog/cython/PythonEval.cc:376:74: error: \u2018PyString_FromString\u2019 was not declared in this scope\nmake[2]: **\\* [opencog/cython/CMakeFiles/PythonEval.dir/PythonEval.cc.o] Error 1\nmake[1]: **\\* [opencog/cython/CMakeFiles/PythonEval.dir/all] Error 2\nmake: **\\* [all] Error 2\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/21641296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/21661577", "body": "python --version\nPython 2.7.3\n\nMy installation method is:\ncd opencog\ngit reset --hard\ngit pull\nmkdir build\ncd build\ncmake ..\nmake\nsudo make install\n\nAfter i uninstalled python3-devel i was able to get to last step.\nResult of \"sudo make install\":\n....\nLinking CXX shared library CMakeFiles/CMakeRelink.dir/agent_finder.so\nLinking CXX shared library CMakeFiles/CMakeRelink.dir/opencog/atomspace.so\n/usr/lib64/gcc/x86_64-suse-linux/4.7/../../../../x86_64-suse-linux/bin/ld: cannot open output file CMakeFiles/CMakeRelink.dir/opencog/atomspace.so: No such file or directory\ncollect2: error: ld returned 1 exit status\nmake[2]: **\\* [opencog/cython/CMakeFiles/CMakeRelink.dir/opencog/atomspace.so] Error 1\nmake[1]: **\\* [opencog/cython/CMakeFiles/atomspace_cython.dir/preinstall] Error 2\nmake: **\\* [preinstall] Error 2\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/21661577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/21783777", "body": "Yes, i have python2-devel installed\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/21783777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "TNick": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23209641", "body": "To fix unused warnings issue #260 should be resolved.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23209641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23254758", "body": "macros.h is defined in previous pull request; I suggest merging dorepeat.h into it. Please comment.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23254758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23271867", "body": "Given my level of understanding the code, I did what I could - mostly silence the warnings. In case of fread() you will notice a macro in the code that actually checks returned value. I would appreciate if you and other contributors would review the pull requests.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23271867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23273677", "body": "That is in another pull request, sorry about that\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23273677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23278878", "body": "Well, i will revert that, but [doxygen docs](http://www.stack.nl/~dimitri/doxygen/manual/customize.html) states that it is not longer recommended to use HTML_STYLESHEET this way, as it make it difficult to upgrade to a newer version of doxygen. Use HTML_EXTRA_STYLESHEET instead.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23278878/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23279061", "body": "I will look into checking what version introduced this change and add appropriate code in cmakefile\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23279061/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23279386", "body": "I have no idea. First version where HTML_EXTRA_STYLESHEET  was introduced is 1.8.2\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23279386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23280997", "body": "Should be fixed by #269\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23280997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23316968", "body": "I managed to get vagrant up and running with doxygen and an apache server installed. The virtual machine seems to have same configuration as the build bots, so this kinds of accidents from my part will be trimmed. I'm building the documentation now to test the solution.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23316968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23319800", "body": "That Doxygen version seems reluctant to understand what I'm telling it and I don't have the time to investigate/make it work; I'm dropping all the css & custom html idea and reverting to original defaults.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23319800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23468744", "body": "By the way, I did not reverted the original change because, when someone else will try to customize the output will end up with same problem - the css path, when relative, is computed with respect to doxygen's current directory. When absolute, custom css is copied in output directory but in html files the path is wrong (is the absolute path).\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23468744/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23628063", "body": "My `make install` breaks at:\n\n```\nCMake Error at opencog/scm/cmake_install.cmake:44 (FILE):\nsrc/opencog/scm/type_constructors.scm\n```\n\nThat file is listed in CMakeLists.txt but does not exists. There are other scm files not listed, and I don't know if they should be installed.\n\nAfter fixing that it completse without any other problems. I will wait for guidance on what to do with those scm files before a pull request.\n\nnoskill, if you are still unable to `make install`, please drop a line here, so we can investigate or set up a clean environment for you. I want to know if this issue may be closed after the problem I described above is fixed. Thanks.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23628063/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23628226", "body": "Also, I'm starting [this page](http://wiki.opencog.org/w/Make_install) about what should happen on a make install.\nYou will notice that two libraries are outside lib/opencog:\n- $INSTALLDIR/lib/libcomboreduct.so\n- $INSTALLDIR/lib/libmoses.a \n\nIs this on purpose?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23628226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5982013", "body": "well, ok, but then there's the consistency concern. One may find it frustrating (tiring?) to constantly look for the description in the wrong place (ok, it will not be ALWAYS, but you got the the point). I would suggest discussing this with others and adding a line in HACKING file to decide where is the documentation to be stored. \n\nPlease send a mail to mailing list on this matter - for some reason I can't. Since I intend to look into other files, I could as well implement an uniform style of comments in the source code. My personal experience was that a code base organized in a  consistent manner is a lot easier to grasp. And opencog has a large code base and not that many people contributing, so anything helping a prospecting programmer should be considered, me thinks. :)\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5982013/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5982687", "body": "I'm not arguing for documentation in headers, I'm simply saying that it should be the same in all (most) places. And a line in HACKING would help avoiding confusion.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/5982687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/6065017", "body": "yes, but what I did somehow changed the output from /doc/html to /doc/doc/html;\nnow, it is back in /doc/html\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/6065017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/6065064", "body": "And, as I explained in the pull request, I could have just reverted the change, but, if someone will ever want to add a css, will have to do same research again to find the solution; so I've left it like that and changed the doxy file.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/6065064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/6100630", "body": "I am used to my .gitignore to filter these things out, sorry about that. That issue was addressed in my upcoming pull request, along with a change in .gitignore file. \nThanks for catching that, though!\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/6100630/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "chris-hexx": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23238037", "body": "I concede that was more rant than design document, and I apologize. Exposing the cogserver's query API to network clients via some well-defined RPC standard would seem to be a good move, with the goal being to make the semantics of accessing the atomspace as familiar as possible to web developers used to, e.g., the Ruby on Rails workflow. I'll try to flesh this out more completely; in the meantime I'd like to leave this up to attract attention.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23238037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23365489", "body": "Gah, yes. My patch for #265 should also have addressed this issue and #249 \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/issues/comments/23365489/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "ptrakk": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/opencog/opencog/comments/5595522", "body": "thank you.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/5595522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "ceefour": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/opencog/opencog/comments/6986827", "body": "@sebastianruder This causes my OpenCog not to run:\n\n```\nceefour@hendy:~/git/opencog_build > opencog/server/cogserver \nUsing default config at lib/opencog.conf\nWarning file /home/ceefour/git/opencog/opencog/nlp/scm/relex-to-logic.scm ended with unterminated input begun at line 140\nscm_unprotect_object called on unprotected object\n[2014-07-13 06:18:09:507] [ERROR] Caught signal 6 (Aborted) on thread 140628137334784\n        Stack Trace:\n        2: opencog/server/cogserver (opencog::Logger::Base::~Base() +0x7c) [0x41743e]\n        3: opencog/server/cogserver (sighand(int) +0xc6) [0x41587b]\n        4: /lib/x86_64-linux-gnu/libc.so.6 (Hn\ufffd\ufffd +0x36ff0) [0x7fe688e0dff0]\n        5: /lib/x86_64-linux-gnu/libc.so.6 (Hn\ufffd\ufffd +0x39) [0x7fe688e0df79]\n        6: /lib/x86_64-linux-gnu/libc.so.6 (Hn\ufffd\ufffd +0x148) [0x7fe688e11388]\n        7: /usr/lib/libguile-2.0.so.22 (Hn\ufffd\ufffd +0x7266a) [0x7fe686ae666a]\n        8: /home/ceefour/git/opencog_build/opencog/guile/libsmob.so (opencog::SchemeEval::finish() +0x8a) [0x7fe68832263a]\n        9: /home/ceefour/git/opencog_build/opencog/guile/libsmob.so (opencog::SchemeEval::c_wrap_finish(void*) +0x20) [0x7fe68832265c]\n        10: /usr/lib/libguile-2.0.so.22 (\ufffdg\ufffd\ufffd +0x5b2ca) [0x7fe686acf2ca]\n        11: /usr/lib/libguile-2.0.so.22 (\ufffdg\ufffd\ufffd +0xecc00) [0x7fe686b60c00]\n        12: /usr/lib/libguile-2.0.so.22 (\ufffdg\ufffd\ufffd +0x33) [0x7fe686ad8863]\n        13: /usr/lib/libguile-2.0.so.22 (\ufffdg\ufffd\ufffd +0x5b9ff) [0x7fe686acf9ff]\n        14: /usr/lib/libguile-2.0.so.22 (\ufffdi\ufffd\ufffd +0x35) [0x7fe686acfa95]\n        15: /usr/lib/x86_64-linux-gnu/libgc.so.1 (\ufffdi\ufffd\ufffd +0x60) [0x7fe6860a5950]\n        16: /usr/lib/libguile-2.0.so.22 (\ufffdi\ufffd\ufffd +0xd47d1) [0x7fe686b487d1]\n        17: /usr/lib/x86_64-linux-gnu/libgc.so.1 (\ufffdi\ufffd\ufffd +0x12) [0x7fe68609ffe2]\n        18: /usr/lib/libguile-2.0.so.22 (\ufffdi\ufffd\ufffd +0x28) [0x7fe686b48b48]\n        19: /home/ceefour/git/opencog_build/opencog/guile/libsmob.so (opencog::SchemeEval::~SchemeEval() +0x34) [0x7fe688322904]\n        20: /home/ceefour/git/opencog_build/opencog/guile/libsmob.so (opencog::SchemeEval::~SchemeEval() +0x18) [0x7fe688322960]\n        21: /home/ceefour/git/opencog_build/opencog/guile/libsmob.so (opencog::load_scm_file(opencog::AtomSpace&, char const*) +0x319) [0x7fe688334d0d]\n        22: /home/ceefour/git/opencog_build/opencog/guile/libsmob.so (opencog::load_scm_file_relative(opencog::AtomSpace&, char const*, char const**) +0xea) [0x7fe688334ec1]\n        23: /home/ceefour/git/opencog_build/opencog/guile/libsmob.so (opencog::load_scm_files_from_config(opencog::AtomSpace&, char const**) +0x138) [0x7fe6883350d0]\n        24: /home/ceefour/git/opencog_build/opencog/server/libserver.so (opencog::CogServer::loadSCMModules(char const**) +0x3e) [0x7fe689e75b08]\n        25: opencog/server/cogserver (\ufffdi\ufffd\ufffd +0xc68) [0x416521]\n        26: /lib/x86_64-linux-gnu/libc.so.6 (\ufffdi\ufffd\ufffd +0xf5) [0x7fe688df8ec5]\n        27: opencog/server/cogserver() [0x415639]\n\n[2014-07-13 06:18:12:513] [INFO] Terminating BenchmarkModule.\n```\n\nReverting back to commit `fade674` made it work again.\n\nAny idea why?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/6986827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/6986893", "body": "Please review https://github.com/opencog/opencog/pull/926\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/6986893/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "sebastianruder": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/opencog/opencog/comments/6987380", "body": "Thanks for pointing that out @ceefour, I had missed that parenthesis.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/6987380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12551133", "body": "Thanks for your notes, Cosmo. They are really helpful. I will deal with them tomorrow morning and submit some more commits. :)\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12551133/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12908717", "body": "@ruiting, can RelEx handle conjunction?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12908717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12908753", "body": "@ruiting, and what about compound verbs? Can RelEx deal with them at the moment?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12908753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12923057", "body": "Alright. I opened a new issue here: https://github.com/opencog/relex/issues/46\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/12923057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13119151", "body": "@AmeBel, these are awesome. Thanks! Exactly what I wanted. Good thing that ConceptNode and WordInstanceNode are not yet connected in any way...\n@cosmoharrigan, fyi, in case you didn't know.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13119151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13119257", "body": "Thanks. I'm going to fix this. Could you provide me with a link to that discussion?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13119257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13119670", "body": "Both the be-inheritance and the SV-rule are now applied. Still, they are applied separately and not embedded in one SatisfyingSetLink. I assume this will be fixed together with this issue https://github.com/opencog/relex/issues/55.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13119670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13135539", "body": "@ruiting, jep, I'm going to fix this. It's the next item on my list. I'm just making sure that the Socrates demo works and editing the README; then I'm getting to this.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13135539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13147584", "body": "That's interesting. Thank you, @ruiting! So R2L can theoretically handle verbs with particles but one would new a rule to take care of this, right? A rule which would take the `in(work, science)` and create a PredicateNode `work_in` from it. This, however, would neglect other particles, e.g. 'up', 'on', etc. What would be your approach here?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13147584/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13171345", "body": "@ruiting, thanks for the explanation. At the moment, to-do-rules 1-5 are defined in https://github.com/opencog/relex/blob/master/data/relex2logic-rules.txt, but there are only helper functions for to-do-rules 1-3 in https://github.com/opencog/opencog/blob/master/opencog/nlp/scm/relex-to-logic.scm.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13171345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13224965", "body": "@ruiting, will this be done in relex-to-logic.scm or some place else?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13224965/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13232484", "body": "So, @ruiting, just so I understand you correctly: You're saying that \"He works in science\" and \"He works in Hong Kong\" should be represented differently? To differentiate, RelEx would need to be able to tell that science is a field of study and Hong Kong is a location which would require tremendous world knowledge. Am I missing your point here?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13232484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13260313", "body": "@ruiting, gerunds evoke the same relation `_to-do` and are thus correctly treated the same as infinitives, right? In some sentences, e.g. \"I like eating bass\", the gerund is misinterpreted as an adjective by link-grammar. Is there an easy way to resolve this? I don't see one as -- depending on the verb -- this is a valid interpretation and requires world-knowledge to resolve.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13260313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13119910", "body": "Noted. I'm going to come up with one during the next days.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13119910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13120000", "body": "Good point. I'll determine what is the best approach here.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13120000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13259871", "body": "Does an AssociateLink type still exist, @bgoertzel? http://wiki.opencog.org/w/AssociativeLink\nMaybe rather use a HebbianLink then? http://wiki.opencog.org/w/HebbianLink\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13259871/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13259897", "body": "I agree with Cosmo here. These are different concepts. I think for this small universe, this is negligible, but in a bigger one PLN might come up with unsound inferences based on this discrepancy.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13259897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13260075", "body": "@cosmoharrigan, should such an example also feature the rules for ContextLinks?http://wiki.opencog.org/w/ContextLink#Context_Rules\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13260075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13260087", "body": "So, when you say that AverageLink shouldn't be bound by the PatternMatcher, aren't free variables always interpreted as AverageLinks as described [here](http://wiki.opencog.org/w/AverageLink)?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13260087/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13260142", "body": "@cosmoharrigan, so the strength value of the Inheritance would be represented by a VariableNode so it can be queried later?\nHow does one exactly query for a VariableNode? Would I need a BindLink like in [Linas' example](https://github.com/sebastianruder/opencog/blob/master/tests/cython/guile/basic_unify.scm) even though I'm not specifying an ImplicationLink?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13260142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13260411", "body": "@cosmoharrigan, I sketched an example [here](https://github.com/sebastianruder/opencog/blob/rwr/tests/python/test_pln/scm/relex2logic_pln_examples/context-link.scm). Would you care to comment on it? Should this be simpler?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13260411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13346447", "body": "@bgoertzel, I understand the logic behind it: I think this is the most consistent way and preempts other, more difficult cases where the subject of the subordinate clause isn't the same as for the main clause and makes the representation analogous to that-clauses. Even so, I would appreciate it if you could comment briefly why you didn't choose to use a link for such cases containing only verb and object:\n\n```\n(EvaluationLink\n    (PredicateNode \"like \")\n    (ListLink\n        (ConceptNode \"I\")\n        (TodoLink/GerundLink\n            (PredicateNode \"eat\")\n            (ConceptNode \"bass@12345\"))))\n```\n\nOr why you didn't choose to make \"like\", say, ternary, as kind of a thought experiment:\n\n```\n(EvaluationLink\n    (PredicateNode \"like \")\n    (ListLink\n        (ConceptNode \"I\")\n        (PredicateNode \"eat\")\n        (ConceptNode \"bass@12345\"))))\n```\n\nAnyway, I pushed a partial explanation for this as requested by Linas.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13346447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13531850", "body": "Would one define this concept in terms of an inheritance from the intersection of two distinct concepts?\n\n```\n(InheritanceLink\n    (ConceptNode \"Non-CanadianPeople\")\n    (AndLink\n        (NotLink\n             (ConceptNode \"Canadian))\n        (ConceptNode \"People\")))\n```\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13531850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "anitzkin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/opencog/opencog/comments/7951488", "body": "Larry Daniels is the name I usually give to anything where I have to give a name and would prefer not to.  I didn't give it to github. A couple of days ago I entered it to \"register\" to attend a polyu lecture this week (I thought it was weird that I had to register to walk into a lecture so I gave Larry's name); I guess somehow github picked it up from there?  Just like this photo of me that I never purposely uploaded to gmail or github . . . \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/7951488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/8347385", "body": "The semantics of the two are diffrent.  Not for \"happy\" but for many other adjectives.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/8347385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/8347508", "body": "It produces the desired output; the question is will PLN later hook it up with its arguments and evaluate the truth-value?\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/8347508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/8347752", "body": "Yup . . . found it; when I made the imperative subjects it messed up some sentences that also had the /Wi/ link at the left wall . . . fixing it now.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/8347752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/8347784", "body": "Actually, /Wi/ is supposed to be only for imperatives, but LG is giving it to that sentence for some reason, so there's an LG bug in here . . . .\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/8347784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/8347907", "body": "Yeah, this sentence is all fuclked up by the /Wi/.  Something happened in the latest LG update . . . .\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/8347907/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/8362654", "body": "Hmm. The sum of all possible answers is a philosophically interesting way of describing the meaning of a question, but maybe not very useful . . . . I guess the bottom line is that questions need to be represented in ways that enable pattern matching to answer them (probabilistically).  I would caution against trying to re-frame questions as propositions with a different truth-value.  Questions are questions, not propositions.  I.e., one could have a very high or very low-level of confidence in the proposition being questioned.  A question is a directive; it tells the person who is asked the question to find a piece of information or to determine the truth-value or a possible proposition.  Therefore the implementation using truth-value variables seems appropriate.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/8362654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/8363817", "body": "I have only done it using the cog-bind command; Cosmo walked me through using it to do one of the examples written to demo the pattern matcher.   Speech-act-types and variables seem quite different in terms of what they would do inside the system, because (I presume) the system would regularly, automatically, activate the pattern matcher and other processes to fill in variables in its pool of attention but that doesn't mean it would automatically anaswer questions.  I Imagine being a variable would make something more likely to remain in the pool of attention; answering open questions (to onesself) seems like a survival priority in general.  Responding to a speech-act type would be a decision made by OpenPsi.  Openpsi would be notified if the system receives a query and then decide whether / how to repspond to the query. For example, maybe the system has already automatically activated the pattern matcher and filled in the variable but it decides not to verbally answer the question because it doesn't want to give the questioner that information, for other reasons, so it responds to the question with a joke, or another question.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/8363817/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "rodsol": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/opencog/opencog/comments/14633447", "body": "yes it is needed , the comment is wrong \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/14633447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13274717", "body": "On Mon, Jun 2, 2014 at 10:45 AM, AmeBel notifications@github.com wrote:\n\n> In opencog/nlp/scm/relex-to-logic.scm:\n> \n> > -                                (VariableNode \"$B\")\n> > -                                (VariableTypeNode \"ConceptNode\"))\n> > -                        (TypedVariableLink\n> > -                                (VariableNode \"$C\")\n> > -                                (VariableTypeNode \"PredicateNode\"))\n> > -                        (TypedVariableLink\n> > -                                (VariableNode \"$D\")\n> > -                                (VariableTypeNode \"ConceptNode\")))\n> > -                (ImplicationLink\n> > -                        (AndLink\n> > -                                (InheritanceLink (VariableNode \"$A\")(VariableNode \"$B\"))\n> > -                                (EvaluationLink (VariableNode \"$C\")(ListLink(VariableNode \"$A\")(VariableNode \"$D\")))\n> > -                                (EvaluationLink (PredicateNode \"whichmarker\") (ListLink (VariableNode \"$A\")(VariableNode \"$C\"))))\n> > -                        (InheritanceLink\n> > -                                (SatisfyingSetLink (VariableNode \"$X\")\n> > -                                        (InheritanceLink (VariableNode \"$X\") (VariableNode \"$A\"))\n> \n> Shouldn't there be an AndLink circumsribing the InheritanceLink and\n> EvaluationLink, b/c the second node of a SatisfyingSetLink is a predicate\n> function?\n> @bgoertzel https://github.com/bgoertzel right?\n> \n> In addition, the sematics of the implicand seems to say \"The restaurants\n> which serve national food are famous\". The fact that the sentence is about\n> a particular restaurant is not handled, \n> What about det-rule ?\n> \n> and the intensifier \"very\" is not handled.\n> advmod-rule  will handle that :\n\n(InheritanceLink  (ConceptNode \"famous\" ) (ConceptNode \"very\"))\n\n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/opencog/opencog/pull/809/files#r13273624.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13274717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "eddiemonroe": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/opencog/opencog/comments/17276471", "body": "Hi @leungmanhin, I had to add some modules in order to get this file to load.\n\n```\n(use-modules (opencog nlp) (opencog nlp chatbot) (opencog nlp relex2logic))  \n```\n\nShould these be added to the file?\n\nAlso, when I use the chat function I get an error that I'm pasting below, both from the console and from opencog.log.\n\nThis in particular is from opencog.log: \n[ERROR] Cannot call getMean() method of a NullTruthvalue (/home/eddie/opencog/atomspace/opencog/truthvalue/NullTruthValue.cc:52)\n\nFrom the console:\n\n```\nscheme@(guile-user)> (chat \"How are you?\")\n\nscheme@(guile-user)> Backtrace:\nIn ice-9/boot-9.scm:\n 157: 2 [catch #t #<catch-closure 317cf00> ...]\nIn unknown file:\n   ?: 1 [apply-smob/1 #<catch-closure 317cf00>]\n   ?: 0 [opencog-extension cog-evaluate! ((DefinedPredicateNode \"OpenPsi: loop\")\n)]\n\nERROR: In procedure opencog-extension:\nERROR: Throw to key `C++-EXCEPTION' with args `(\"cog-evaluate!\" \"Backtrace:\\nIn ice-9/boot-9.scm:\\n 157: 11 [catch #t #<catch-closure 317cf00> ...]\\nIn unknown file:\\n   ?: 10 [apply-smob/1 #<catch-closure 317cf00>]\\n   ?: 9 [opencog-extension cog-evaluate! ((DefinedPredicateNode \\\"OpenPsi: loop\\\")\\n)]\\nIn ice-9/boot-9.scm:\\n 157: 8 [catch #t #<catch-closure 1e4c840> ...]\\nIn unknown file:\\n   ?: 7 [apply-smob/1 #<catch-closure 1e4c840>]\\nIn ice-9/boot-9.scm:\\n 157: 6 [catch #t #<catch-closure 1e4c5e0> ...]\\nIn unknown file:\\n   ?: 5 [apply-smob/1 #<catch-closure 1e4c5e0>]\\nIn openpsi/main.scm:\\n 314: 4 [psi-step]\\n 265: 3 [psi-select-rules]\\nIn unknown file:\\n   ?: 2 [opencog-extension cog-execute! (#)]\\nIn ice-9/boot-9.scm:\\n 102: 1 [#<procedure 2142c80 at ice-9/boot-9.scm:97:6 (thrown-k . args)> C++-EXCEPTION ...]\\nIn unknown file:\\n   ?: 0 [apply-smob/1 #<catch-closure 1e4c400> C++-EXCEPTION ...]\\n\\nERROR: In procedure apply-smob/1:\\nERROR: In procedure cog-execute!: Failed evaluation; see logfile for stack trace. (/home/eddie/opencog/atomspace/opencog/atoms/execution/ExecutionOutputLink.cc:150)\\nABORT: C++-EXCEPTION\\n (/home/eddie/opencog/atomspace/opencog/guile/SchemeEval.cc:1140)\")'.\n```\n\nFrom opencog.log:\n\n```\n[2016-04-27 18:26:45:173] [ERROR] Cannot call getMean() method of a NullTruthvalue (/home/eddie/opencog/atomspace/opencog/truthvalue/NullTruthValue.cc:52)\n    Stack Trace:\n    2: /usr/local/lib/libcogutil.so (opencog::Logger::logva(opencog::Logger::Level, char const*, __va_list_tag*) +0xa7) [0x7f6150d08ce7]\n    3: /usr/local/lib/libcogutil.so (opencog::Logger::Error::operator()(char const*, ...) +0x92) [0x7f6150d08e82]\n    4: /usr/local/lib/libcogutil.so (opencog::StandardException::parse_error_message(char const*, __va_list_tag*, bool) +0x63) [0x7f6150cfdf83]\n    5: /usr/local/lib/libcogutil.so (opencog::StandardException::parse_error_message(char const*, char const*, __va_list_tag*, bool) +0x9a) [0x7f6150cfe05a]\n    6: /usr/local/lib/libcogutil.so (opencog::RuntimeException::RuntimeException(char const*, char const*, ...) +0xb4) [0x7f6150cfe174]\n    7: /usr/local/lib/opencog/libtruthvalue.so (opencog::NullTruthValue::getMean() const +0x2b) [0x7f6150890dfb]\n    8: /usr/local/lib/opencog/libexecution.so (opencog::EvaluationLink::do_eval_scratch(opencog::AtomSpace*, opencog::Handle const&, opencog::AtomSpace*, bool) +0x221) [0x7f614c0c1961]\n    9: /usr/local/lib/opencog/libexecution.so (opencog::EvaluationLink::do_eval_scratch(opencog::AtomSpace*, opencog::Handle const&, opencog::AtomSpace*, bool) +0xbfb) [0x7f614c0c233b]\n    10: /usr/local/lib/opencog/libexecution.so (opencog::EvaluationLink::do_evaluate(opencog::AtomSpace*, opencog::Handle const&, bool) +0x10) [0x7f614c0c9ed0]\n    11: /usr/local/lib/opencog/libexecution.so (x +0x1487b) [0x7f614c0ca87b]\n    12: /usr/local/lib/opencog/libsmob.so (opencog::FunctionWrap::as_wrapper_p_h(opencog::Handle) +0x22) [0x7f6151192902]\n    13: /usr/local/lib/opencog/libsmob.so (x +0xe3b8) [0x7f61511903b8]\n    14: /usr/local/lib/opencog/libsmob.so (opencog::PrimitiveEnviron::do_call(scm_unused_struct*, scm_unused_struct*) +0x28) [0x7f615119f208]\n    15: /usr/lib/libguile-2.0.so.22 (x +0xe212a) [0x7f6153d1812a]\n    16: /usr/lib/libguile-2.0.so.22 (x +0x33) [0x7f6153c9adc3]\n    17: /usr/lib/libguile-2.0.so.22 (x +0x53) [0x7f6153c9ae23]\n    18: /usr/lib/libguile-2.0.so.22 (x +0xe212a) [0x7f6153d1812a]\n    19: /usr/lib/libguile-2.0.so.22 (x +0x33) [0x7f6153c9a863]\n    20: /usr/local/lib/opencog/libsmob.so (opencog::SchemeEval::do_scm_eval(scm_unused_struct*, scm_unused_struct* (*)(void*)) +0xbf) [0x7f6151194adf]\n    21: /usr/local/lib/opencog/libsmob.so (opencog::SchemeEval::do_apply(std::string const&, opencog::Handle const&) +0x12) [0x7f6151194f42]\n    22: /usr/local/lib/opencog/libsmob.so (opencog::SchemeEval::apply(std::string const&, opencog::Handle) +0xd5) [0x7f6151195035]\n    23: /usr/local/lib/opencog/libexecution.so (opencog::ExecutionOutputLink::do_execute(opencog::AtomSpace*, opencog::Handle const&, opencog::Handle const&) +0x550) [0x7f614c0c6df0]\n    24: /usr/local/lib/opencog/libexecution.so (opencog::ExecutionOutputLink::execute(opencog::AtomSpace*) const +0x1d) [0x7f614c0c74fd]\n    25: /usr/local/lib/opencog/libexecution.so (opencog::Instantiator::walk_tree(opencog::Handle const&) +0xe36) [0x7f614c0c0876]\n    26: /usr/local/lib/opencog/libexecution.so (opencog::Instantiator::walk_tree(opencog::Handle const&) +0xe8c) [0x7f614c0c08cc]\n    27: /usr/local/lib/opencog/libexecution.so (opencog::Instantiator::instantiate(opencog::Handle const&, std::map<opencog::Handle, opencog::Handle, std::less<opencog::Handle>, std::allocator<std::pair<opencog::Handle const, opencog::Handle> > > const&) +0x32) [0x7f614c0c8342]\n    28: /usr/local/lib/opencog/libexecution.so (x +0x1246d) [0x7f614c0c846d]\n    29: /usr/local/lib/opencog/libexecution.so (x +0x146be) [0x7f614c0ca6be]\n    30: /usr/local/lib/opencog/libsmob.so (opencog::FunctionWrap::as_wrapper_h_h(opencog::Handle) +0x22) [0x7f6151192892]\n    31: /usr/local/lib/opencog/libsmob.so (x +0xf30a) [0x7f615119130a]\n    32: /usr/local/lib/opencog/libsmob.so (opencog::PrimitiveEnviron::do_call(scm_unused_struct*, scm_unused_struct*) +0x28) [0x7f615119f208]\n    33: /usr/lib/libguile-2.0.so.22 (x +0xe212a) [0x7f6153d1812a]\n    34: /usr/lib/libguile-2.0.so.22 (x +0x33) [0x7f6153c9adc3]\n    35: /usr/lib/libguile-2.0.so.22 (x +0x53) [0x7f6153c9ae23]\n    36: /usr/lib/libguile-2.0.so.22 (x +0xe212a) [0x7f6153d1812a]\n    37: /usr/lib/libguile-2.0.so.22 (x +0x33) [0x7f6153c9a863]\n    38: /usr/local/lib/opencog/libsmob.so (opencog::SchemeEval::do_scm_eval(scm_unused_struct*, scm_unused_struct* (*)(void*)) +0xbf) [0x7f6151194adf]\n    39: /usr/local/lib/opencog/libsmob.so (opencog::SchemeEval::c_wrap_apply_tv(void*) +0x19) [0x7f615119d509]\n    40: /usr/lib/libguile-2.0.so.22 (x +0x5b2ca) [0x7f6153c912ca]\n    41: /usr/lib/libguile-2.0.so.22 (x +0xe212a) [0x7f6153d1812a]\n    42: /usr/lib/libguile-2.0.so.22 (x +0x33) [0x7f6153c9a863]\n    43: /usr/lib/libguile-2.0.so.22 (x +0x5b9ff) [0x7f6153c919ff]\n    44: /usr/lib/libguile-2.0.so.22 (x +0x35) [0x7f6153c91a95]\n    45: /usr/lib/x86_64-linux-gnu/libgc.so.1 (x +0x12) [0x7f61533fffe2]\n    46: /usr/lib/libguile-2.0.so.22 (x +0x28) [0x7f6153d0ab48]\n    47: /usr/local/lib/opencog/libsmob.so (opencog::SchemeEval::apply_tv(std::string const&, opencog::Handle) +0xb0) [0x7f615119d640]\n    48: /usr/local/lib/opencog/libexecution.so (opencog::EvaluationLink::do_evaluate(opencog::AtomSpace*, opencog::Handle const&, opencog::Handle const&) +0x233) [0x7f614c0ca113]\n    49: /usr/local/lib/opencog/libexecution.so (opencog::EvaluationLink::do_eval_scratch(opencog::AtomSpace*, opencog::Handle const&, opencog::AtomSpace*, bool) +0x34f) [0x7f614c0c1a8f]\n\n[2016-04-27 18:26:45:186] [ERROR] Failed evaluation; see logfile for stack trace. (/home/eddie/opencog/atomspace/opencog/atoms/execution/ExecutionOutputLink.cc:150)\n    Stack Trace:\n    2: /usr/local/lib/libcogutil.so (opencog::Logger::logva(opencog::Logger::Level, char const*, __va_list_tag*) +0xa7) [0x7f6150d08ce7]\n    3: /usr/local/lib/libcogutil.so (opencog::Logger::Error::operator()(char const*, ...) +0x92) [0x7f6150d08e82]\n    4: /usr/local/lib/libcogutil.so (opencog::StandardException::parse_error_message(char const*, __va_list_tag*, bool) +0x63) [0x7f6150cfdf83]\n    5: /usr/local/lib/libcogutil.so (opencog::StandardException::parse_error_message(char const*, char const*, __va_list_tag*, bool) +0x9a) [0x7f6150cfe05a]\n    6: /usr/local/lib/libcogutil.so (opencog::RuntimeException::RuntimeException(char const*, char const*, ...) +0xb4) [0x7f6150cfe174]\n    7: /usr/local/lib/opencog/libexecution.so (opencog::ExecutionOutputLink::do_execute(opencog::AtomSpace*, opencog::Handle const&, opencog::Handle const&) +0xa6c) [0x7f614c0c730c]\n    8: /usr/local/lib/opencog/libexecution.so (opencog::ExecutionOutputLink::execute(opencog::AtomSpace*) const +0x1d) [0x7f614c0c74fd]\n    9: /usr/local/lib/opencog/libexecution.so (opencog::Instantiator::walk_tree(opencog::Handle const&) +0xe36) [0x7f614c0c0876]\n    10: /usr/local/lib/opencog/libexecution.so (opencog::Instantiator::walk_tree(opencog::Handle const&) +0xe8c) [0x7f614c0c08cc]\n    11: /usr/local/lib/opencog/libexecution.so (opencog::Instantiator::instantiate(opencog::Handle const&, std::map<opencog::Handle, opencog::Handle, std::less<opencog::Handle>, std::allocator<std::pair<opencog::Handle const, opencog::Handle> > > const&) +0x32) [0x7f614c0c8342]\n    12: /usr/local/lib/opencog/libexecution.so (x +0x1246d) [0x7f614c0c846d]\n    13: /usr/local/lib/opencog/libexecution.so (x +0x146be) [0x7f614c0ca6be]\n    14: /usr/local/lib/opencog/libsmob.so (opencog::FunctionWrap::as_wrapper_h_h(opencog::Handle) +0x22) [0x7f6151192892]\n. . . etc.\n\n```\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/17276471/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/opencog/opencog/comments/17289512", "body": "@leungmanhin #2138 fixed the problem, thanks.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/comments/17289512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "review_comments": []}, "ruiting": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13122347", "body": "Prepositions have been treated as a PredicateNode so far... But for the common verb phrases, Link Parser is able to recognize them as one verb, using K link... http://www.abisource.com/projects/link-grammar/dict/section-K.html   So RelEx2Logic can handle \"work_in\" as a PredicateNode as the \"Desired output\" ;-)\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13122347/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13122396", "body": "https://github.com/opencog/relex/issues/55\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13122396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13122849", "body": "For those fussy adverbs/adjective, such as \"maybe\" \"may\" \"approximately\"\netc, RelEx2Logic will deal with them separately, so the specific\napproximate truth values could be assigned to these fussy adverbs... But so\nfar, only the \"maybe-rule\" has been implemented...\n\nRuiting Lian\n\nOn Wed, May 28, 2014 at 1:19 PM, Cosmo Harrigan notifications@github.comwrote:\n\n> In\n> tests/python/test_pln/scm/relex2logic_pln_examples/simple-wikipedia-facts.scm:\n> \n> > +(InheritanceLink (stv 1.000000 0.000000)\n> > -  (SatisfyingSetLink (stv 1.000000 0.000000)\n> > -    (PredicateNode \"make@d6d5ff22-4fd7-4616-a443-31147a8bdb67\") ; [220]\n> > -  ) ; [236]\n> > -  (ConceptNode \"often@bf26a7e3-a467-40bd-922c-fb2d87221fe8\") ; [233]\n> >   +) ; [237]\n> >   +\n> >   +(EvaluationLink (stv 1.000000 1.000000)\n> > -  (PredicateNode \"make@d6d5ff22-4fd7-4616-a443-31147a8bdb67\") ; [220]\n> > -  (ListLink (stv 1.000000 0.000000)\n> > -    (ConceptNode \"scientists@1dac5b75-dadd-4c04-aa63-dc56e63f802c\") ; [223]\n> > -    (ConceptNode \"experiments@80482db7-def5-4f26-9f6a-1505bb94b7d6\") ; [226]\n> > -  ) ; [229]\n> >   +) ; [230]\n> >   +\n> >   +; Often needs to modify stv.\n> \n> @bgoertzel https://github.com/bgoertzel @ruitinghttps://github.com/ruitingwhat would be the suggested approach for mapping approximate truth values\n> to adverbs/modifiers?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/opencog/opencog/pull/778/files#r13116171\n> .\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13122849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13125774", "body": "Hi @sebastianruder  @cosmoharrigan  The SatisfyingSetLink will be embedded in the post processing part of RelEx2Logic, which hasn't been implemented yet. Rodas or William will implement that soon, I think... \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13125774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13127245", "body": "Regarding to the infinitive constructions, check the to-do-rules from https://github.com/opencog/opencog/blob/master/opencog/nlp/scm/relex-to-logic.scm\n\nFor \"scientists try to understand science\", the logic form is like:\n\n```\nEvaluationLink\n    PredicateNode Try\n    ListLink\n        ConceptNode Scientists\n        EvaluationLink\n                PredicateNode Understand\n                ConceptNode Scientists\n                ConceptNode Science\n```\n\nPer embedded sentences, it's the similar mechanism as the \"that/which/...\" clauses. That is: apply the rules to the sub sentence first, with some temporary MarkerLink as an incomplete result marker. Then deal with the MarkerLink in the post processing part.   \n\nThe expected final result of RelEx2Logic for that example would be something like:\n\n```\nA scientist tries to understand how our world works.\n\n   EvaluationLink\n            PredicateNode Try\n            ListLink\n                  ConceptNode Scientist\n                  EvaluationLink\n                         PredicateNode Understand\n                         ListLink\n                               ConceptNode Scientist\n                                       SatisfyingSet\n                                               VariableNode  $qVar\n                                                EvaluationLink\n                                                       PredicateNode  How\n                                                       ListLink\n                                                             $qVar\n                                                              EvaluationLink\n                                                                     PredicateNode Work\n                                                                     ConceptNode World\n\n```\n\nFor \"our world\", possessive-rule that has been defined in https://github.com/opencog/opencog/blob/master/opencog/nlp/scm/relex-to-logic.scm would be applied as well...\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13127245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13127392", "body": "Yes, it can. I replied above ;-) \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13127392/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13127429", "body": "@sebastianruder  Are you going to fix the typo? or fixing the code? \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13127429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13173748", "body": "Rodas has pushed the to-do-rule-4, but we are still discussing about the format of the logic representation for that, so that hasn't been merged yet. I just merged to-do-rule-5 via #796\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13173748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13190267", "body": "Sorry that I didn't explain well... What I meant is for common verb phrases, for example \"work in\" \"come up\", Link Parser can combine them with K link, so the RelEx will generate work_in as a compound verb. Thus the RelEx will have: \n\n```\nHe works in science.\n   _obj(work_in, science)\n    _subj(work_in, he)\n```\n\nThen the SVO rule will be applied as usual. R2L will just consider \"work_in\" as a PredicateNode in this case. \n\n```\nEvaluationLink\n       PredicateNode \"work_in\"\n       ListLink\n             ConceptNode He\n             ConceptNode Science\n```\n\nFor the general prepositions, we will consider them as PredicateNodes in general. For example:\n\n```\nI work in Hong Kong\n\n_subj(work, I)\nin(work, Hong_Kong)\n\nEvaluationLink\n       PredicateNode \"In\"\n       ListLink\n             EvaluationLink \n                   PredicateNode Work\n                   ConceptNode I\n             ConceptNode Hong_Kong\n```\n\nPrepositions can be very ambiguous, so we need different approaches to deal with different prepositions and different cases of course. \n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13190267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13190477", "body": "@sebastianruder  FYI, William and Rodas are working on the R2L for adjective clauses, including the post processing work I mentioned before..\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13190477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13190934", "body": "@cosmoharrigan The post processing part will be the extension of the relex-to-logic.scm. It basically includes:\n\n1) cleaning up the unnecessary instance nodes \n2) removing the temporary marker links that have been made up for various uses of organizing the R2L rules. For example, MaybeMarker from the maybe-rule, see http://wiki.opencog.org/w/RelEx2Logic#Maybe_Rule\nand WhichMarker from the which-rule, which is a sign for embedding the SatisfySetLink for the sentences with adjective clauses....\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13190934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13476052", "body": "Hi Amen,\n\nthe \"noun\" \"adj\" \"adv\" words are all defined as ConceptNodes...\n\nRuiting Lian\n\nOn Fri, Jun 6, 2014 at 12:18 PM, AmeBel notifications@github.com wrote:\n\n> In opencog/nlp/scm/relex-to-logic-post-processing.scm:\n> \n> > +; Check if a word instance has definite flag\n> > +(define (definite? word-inst)\n> > -   ; get the list of DefinedLinguisticConceptNode connected to word-inst\n> > -   (define ling-concept-list (word-inst-get-attr word-inst))\n> > -   ; for each item in ling-concept-list, want to check if name is \"definite\"\n> > -   (list-index (lambda (a-node) (string=? \"definite\" (cog-name a-node))) ling-concept-list)\n> >   +)\n> >   +\n> >   +; -----------------------------------------------------------------------\n> >   +; Check if a word instance can be removed\n> >   +(define (cleanable? word-inst)\n> > -   (or\n> > -       (and (not (definite? word-inst)) (word-inst-match-pos? word-inst \"noun\"))\n> > -       (word-inst-match-pos? word-inst \"adj\")\n> > -       (word-inst-match-pos? word-inst \"adv\")\n> > -   )\n> \n> why only 'adj' and 'adv' ?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/opencog/opencog/pull/825/files#r13476001.\n", "reactions": {"url": "https://api.github.com/repos/opencog/opencog/pulls/comments/13476052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}}}