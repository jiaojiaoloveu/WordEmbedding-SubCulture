{"_default": {"1": {"Imisnew2": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15969", "title": "Potential Specification & Implementation Mismatch: Whether a method definition overrides inherited method.", "body": "From this version of the specification:\r\nhttps://www.ecma-international.org/publications/files/ECMA-ST/ECMA-335.pdf\r\n\r\nCLS Rule 4 states:\r\n> Assemblies shall follow Annex 7 of Technical Report 15 of the Unicode Standard\r\n> 3.0 governing the set of characters permitted to start and be included in identifiers, available online\r\n> at http://www.unicode.org/unicode/reports/tr15/tr15-18.html. Identifiers shall be in the\r\n> canonical format defined by Unicode Normalization Form C. For CLS purposes, two identifiers\r\n> are the same if their lowercase mappings (as specified by the Unicode locale-insensitive, one-toone\r\n> lowercase mappings) are the same. That is, for two identifiers to be considered different\r\n> under the CLS they shall differ in more than simply their case. However, in order to override an\r\n> inherited definition the CLI requires the precise encoding of the original declaration be used.\r\n\r\nThe key part I think the CLR violates is the last sentence:\r\n> However, in order to override an inherited definition the CLI requires the precise encoding of\r\n> the original declaration be used.\r\n\r\nI believe that means that the lowercase mapping logic described just prior should not apply? If so, here's how I constructed an example that appears to violate the rule:\r\n\r\n```\r\nImports System\r\n\r\nClass Program\r\n    Shared Sub Main(args As String())\r\n        Dim a As A = new A()\r\n        Dim b As B = new B()\r\n        Dim c As A = new B()\r\n        a.foo() ' Should output 'Foo'\r\n        b.foo() ' Should output 'FOO' (direct call to B::Foo)\r\n        c.foo() ' Should output 'FOO' (virtual call to B::Foo)\r\n    End Sub\r\nEnd Class\r\n\r\nClass A\r\n    Public Overridable Sub Foo() ' Emitted as A::Foo\r\n        Console.WriteLine(\"Foo\")\r\n    End Sub\r\nEnd Class\r\n\r\nClass B\r\n    Inherits A\r\n    Public Overrides Sub FOO() ' Emitted as B::Foo\r\n        Console.WriteLine(\"FOO\")\r\n    End Sub\r\nEnd Class\r\n```\r\n\r\nUsing ILDasm, I disassemble this program, change the name of 'B::Foo' to 'B::FOO', then, using ILAsm, I reassemble the program. If my interpretation of CLS Rule 4 is correct, B::FOO should no longer be considered an override of A::Foo, and the program should output:\r\n```\r\nFoo\r\nFoo\r\nFoo\r\n```\r\nInstead, I get the same output from both the pre-modified program and post-modified program:\r\n```\r\nFoo\r\nFOO\r\nFOO\r\n```\r\n\r\nSide-note: Interestingly enough, the \"b.foo()\" call from Main is emitted as 'B::Foo' although no 'B::Foo' exists (in the modified program), yet 'A::Foo' exists... Unsure whether in this context the lower-cased mapping should be checked, or if it should search the base-class for 'Foo'.\r\n\r\nThis is a fairly esoteric edge case, but one I was investigating due to trying to see exactly how far VB's case-insensitivity goes. It appears case-insensitive IL could be emitted and work properly using VB's case-insensitivity rules, but the Roslyn compiler seems to use a canonical name for any symbol that overrides another symbol (perhaps due to interpreting CLS Rule 4 the same way I have?).", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jkotas": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15963", "title": "Improve CI coverage for release builds", "body": "The recent build break in official build (#15958, #15960) highlighted that we have no CI coverage for release builds. I think we should look into improving it:\r\n\r\n- `CentOS7.1 x64 Checked Innerloop Build and Test` and `Ubuntu x64 Checked Innerloop Build and Test` have huge overlap. One of them should be changed to release build to have better coverage.\r\n- We should have at least one 32-bit release build. Not sure what the best option for it is.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15954", "title": "ArrayPool logging initialization is 70% of startup for empty program", "body": "Empty program executes about 320 methods managed methods today (in release build). Initialization of ArrayPool logging (ArrayPoolEventSource) is responsible for 220 of them. When the ArrayPool initialization is commented out, I am back to about 100 where we used to to be historically.\r\n\r\nIs the ArrayPool logging valueable enough to contribute this much to startup cost of empty program? Can we make it cheaper or not have it?", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15954/reactions", "total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15780", "title": "The throw keyword shows the wrong thrown exception line", "body": "_From @NicolasDorier on August 22, 2017 14:56_\n\nUsing .NETCore2.0, Win10, it seems the `throw` keywor\r\n\r\nUsing the `throw` keyword loose all the initial stacktrace information. \r\nYou can workaround with `ExceptionDispatchInfo.Capture(ex).Throw();`, but this seems like a bug to me.\r\n\r\n```\r\nusing System;\r\n\r\nnamespace ConsoleApp3\r\n{\r\n\tclass Program\r\n\t{\r\n\t\tstatic void Main(string[] args)\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tDoStuff();\r\n\t\t\t}\r\n\t\t\tcatch(Exception ex)\r\n\t\t\t{\r\n\t\t\t\tConsole.WriteLine(ex.StackTrace);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\r\n\t\tprivate static void DoStuff()\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tthrow new Exception(\"Boom!\");\r\n\t\t\t}\r\n\t\t\tcatch(Exception ex)\r\n\t\t\t{\r\n\t\t\t\tthrow;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n```\r\nActual output: (Exception line 28)\r\n\r\n```\r\n   at ConsoleApp3.Program.DoStuff() in c:\\users\\nicolasdorier\\documents\\visual studio 2017\\Projects\\ConsoleApp3\\ConsoleApp3\\Program.cs:line 28\r\n   at ConsoleApp3.Program.Main(String[] args) in c:\\users\\nicolasdorier\\documents\\visual studio 2017\\Projects\\ConsoleApp3\\ConsoleApp3\\Program.cs:line 11\r\n```\r\n\r\nExpected output: (Exception line 24)\r\n\r\n```\r\n   at ConsoleApp3.Program.DoStuff() in c:\\users\\nicolasdorier\\documents\\visual studio 2017\\Projects\\ConsoleApp3\\ConsoleApp3\\Program.cs:line 24\r\n   at ConsoleApp3.Program.Main(String[] args) in c:\\users\\nicolasdorier\\documents\\visual studio 2017\\Projects\\ConsoleApp3\\ConsoleApp3\\Program.cs:line 11\r\n```\r\n\r\nWorkaround using `ExceptionDispatchInfo.Capture(ex).Throw();`:\r\n\r\n```\r\nusing System;\r\nusing System.Runtime.ExceptionServices;\r\n\r\nnamespace ConsoleApp3\r\n{\r\n\tclass Program\r\n\t{\r\n\t\tstatic void Main(string[] args)\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tDoStuff();\r\n\t\t\t}\r\n\t\t\tcatch(Exception ex)\r\n\t\t\t{\r\n\t\t\t\tConsole.WriteLine(ex.StackTrace);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\r\n\t\tprivate static void DoStuff()\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tthrow new Exception(\"Boom!\");\r\n\t\t\t}\r\n\t\t\tcatch(Exception ex)\r\n\t\t\t{\r\n\t\t\t\tExceptionDispatchInfo.Capture(ex).Throw();\r\n\t\t\t\tthrow;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n```\n\n_Copied from original issue: dotnet/corefx#23470_", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15780/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15755", "title": "Optimize out write barriers for fields in ref-like structs", "body": "From https://github.com/dotnet/coreclr/pull/15745#issuecomment-355481958 :\r\n\r\n> > Hmm, I wonder if there are sufficient guarantees that by ref like types only live on the stack for the JIT to be able to eliminate GC write barriers when writing to fields of such types.\r\n\r\n> Yes, there are. It would be nice optimization to have.\r\n\r\ncc @mikedn", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15755/reactions", "total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15543", "title": "dotnet report segfaults on Ubuntu 16.04 x64 ", "body": "_From @Jamesxql on December 15, 2017 11:44_\n\nRun asp.net core 2.0 app causes a Segmentation fault. \r\n\r\n```\r\nubuntu@ip-172-31-12-206:/opt/feiniu/ms/Essos/Essos$ /usr/bin/dotnet Essos.Api.dll\r\nSegmentation fault (core dumped)\r\n```\r\n\r\n```\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  16.04\r\n OS Platform: Linux\r\n RID:         ubuntu.16.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.0.2/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n\r\n```\r\nubuntu@ip-172-31-12-206:/opt/feiniu/ms/Essos/Essos$ uname -a\r\nLinux ip-172-31-12-206 4.4.0-104-generic #127-Ubuntu SMP Mon Dec 11 12:16:42 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\r\n```\r\n\r\n[Core file](https://s3.cn-north-1.amazonaws.com.cn/netcoredebug/core)\r\n```\r\nCore file '/opt/feiniu/ms/Essos/Essos/./core' (x86_64) was loaded.\r\nProcess 0 stopped\r\n* thread #1: tid = 0, 0x00007fdf8ea57e40 libcoreclr.so`EventPipeConfiguration::RegisterProvider(EventPipeProvider&) + 48, name = 'dotnet', stop reason = signal SIGSEGV\r\n    frame #0: 0x00007fdf8ea57e40 libcoreclr.so`EventPipeConfiguration::RegisterProvider(EventPipeProvider&) + 48\r\n-> 0x7fdf8ea57e40 <EventPipeConfiguration::RegisterProvider+48>: addb   %al, (%rax)\r\n   0x7fdf8ea57e42 <EventPipeConfiguration::RegisterProvider+50>: addb   %al, (%rax)\r\n   0x7fdf8ea57e44 <EventPipeConfiguration::RegisterProvider+52>: addb   %al, (%rax)\r\n   0x7fdf8ea57e46 <EventPipeConfiguration::RegisterProvider+54>: addb   %al, (%rax)\r\n  thread #2: tid = 1, 0x00007fdf8f656499 libc.so.6`syscall + 25, stop reason = signal SIGSEGV\r\n    frame #0: 0x00007fdf8f656499 libc.so.6`syscall + 25\r\n-> 0x7fdf8f656499 <syscall+25>: addb   %al, (%rax)\r\n   0x7fdf8f65649b <syscall+27>: addb   %al, (%rax)\r\n   0x7fdf8f65649d <syscall+29>: addb   %al, (%rax)\r\n   0x7fdf8f65649f <syscall+31>: addb   %al, (%rax)\r\n  thread #3: tid = 2, 0x00007fdf901cd709 libpthread.so.0`__pthread_cond_timedwait + 297, stop reason = signal SIGSEGV\r\n    frame #0: 0x00007fdf901cd709 libpthread.so.0`__pthread_cond_timedwait + 297\r\n-> 0x7fdf901cd709 <__pthread_cond_timedwait+297>: addb   %al, (%rax)\r\n   0x7fdf901cd70b <__pthread_cond_timedwait+299>: addb   %al, (%rax)\r\n   0x7fdf901cd70d <__pthread_cond_timedwait+301>: addb   %al, (%rax)\r\n   0x7fdf901cd70f <__pthread_cond_timedwait+303>: addb   %al, (%rax)\r\n  thread #4: tid = 3, 0x00007fdf8f656499 libc.so.6`syscall + 25, stop reason = signal SIGSEGV\r\n    frame #0: 0x00007fdf8f656499 libc.so.6`syscall + 25\r\n-> 0x7fdf8f656499 <syscall+25>: addb   %al, (%rax)\r\n   0x7fdf8f65649b <syscall+27>: addb   %al, (%rax)\r\n   0x7fdf8f65649d <syscall+29>: addb   %al, (%rax)\r\n   0x7fdf8f65649f <syscall+31>: addb   %al, (%rax)\r\n  thread #5: tid = 4, 0x00007fdf901d051d libpthread.so.0, stop reason = signal SIGSEGV\r\n    frame #0: 0x00007fdf901d051d libpthread.so.0\r\n-> 0x7fdf901d051d <???+45>: addb   %al, (%rax)\r\n   0x7fdf901d051f <???+47>: addb   %al, (%rax)\r\n   0x7fdf901d0521 <???+49>: addb   %al, (%rax)\r\n   0x7fdf901d0523 <???+51>: addb   %al, (%rax)\r\n  thread #6: tid = 5, 0x00007fdf901cd360 libpthread.so.0`__pthread_cond_wait + 192, stop reason = signal SIGSEGV\r\n    frame #0: 0x00007fdf901cd360 libpthread.so.0`__pthread_cond_wait + 192\r\n-> 0x7fdf901cd360 <__pthread_cond_wait+192>: addb   %al, (%rax)\r\n   0x7fdf901cd362 <__pthread_cond_wait+194>: addb   %al, (%rax)\r\n   0x7fdf901cd364 <__pthread_cond_wait+196>: addb   %al, (%rax)\r\n   0x7fdf901cd366 <__pthread_cond_wait+198>: addb   %al, (%rax)\r\n  thread #7: tid = 6, 0x00007fdf8f65070d libc.so.6`__poll + 45, stop reason = signal SIGSEGV\r\n    frame #0: 0x00007fdf8f65070d libc.so.6`__poll + 45\r\n-> 0x7fdf8f65070d <__poll+45>: addb   %al, (%rax)\r\n   0x7fdf8f65070f <__poll+47>: addb   %al, (%rax)\r\n   0x7fdf8f650711 <__poll+49>: addb   %al, (%rax)\r\n   0x7fdf8f650713 <__poll+51>: addb   %al, (%rax)\r\n  thread #8: tid = 7, 0x00007fdf901cd360 libpthread.so.0`__pthread_cond_wait + 192, stop reason = signal SIGSEGV\r\n    frame #0: 0x00007fdf901cd360 libpthread.so.0`__pthread_cond_wait + 192\r\n-> 0x7fdf901cd360 <__pthread_cond_wait+192>: addb   %al, (%rax)\r\n   0x7fdf901cd362 <__pthread_cond_wait+194>: addb   %al, (%rax)\r\n   0x7fdf901cd364 <__pthread_cond_wait+196>: addb   %al, (%rax)\r\n   0x7fdf901cd366 <__pthread_cond_wait+198>: addb   %al, (%rax)\r\n  thread #9: tid = 8, 0x00007fdf901cd360 libpthread.so.0`__pthread_cond_wait + 192, stop reason = signal SIGSEGV\r\n    frame #0: 0x00007fdf901cd360 libpthread.so.0`__pthread_cond_wait + 192\r\n-> 0x7fdf901cd360 <__pthread_cond_wait+192>: addb   %al, (%rax)\r\n   0x7fdf901cd362 <__pthread_cond_wait+194>: addb   %al, (%rax)\r\n   0x7fdf901cd364 <__pthread_cond_wait+196>: addb   %al, (%rax)\r\n   0x7fdf901cd366 <__pthread_cond_wait+198>: addb   %al, (%rax)\r\n  thread #10: tid = 9, 0x00007fdf901d0c7d libpthread.so.0, stop reason = signal SIGSEGV\r\n    frame #0: 0x00007fdf901d0c7d libpthread.so.0\r\n-> 0x7fdf901d0c7d <???+45>: addb   %al, (%rax)\r\n   0x7fdf901d0c7f <???+47>: addb   %al, (%rax)\r\n   0x7fdf901d0c81 <???+49>: addb   %al, (%rax)\r\n   0x7fdf901d0c83 <???+51>: addb   %al, (%rax)\r\n  thread #11: tid = 10, 0x00007fdf901cd360 libpthread.so.0`__pthread_cond_wait + 192, stop reason = signal SIGSEGV\r\n    frame #0: 0x00007fdf901cd360 libpthread.so.0`__pthread_cond_wait + 192\r\n-> 0x7fdf901cd360 <__pthread_cond_wait+192>: addb   %al, (%rax)\r\n   0x7fdf901cd362 <__pthread_cond_wait+194>: addb   %al, (%rax)\r\n   0x7fdf901cd364 <__pthread_cond_wait+196>: addb   %al, (%rax)\r\n   0x7fdf901cd366 <__pthread_cond_wait+198>: addb   %al, (%rax)\r\n  thread #12: tid = 11, 0x00007fdf901cd360 libpthread.so.0`__pthread_cond_wait + 192, stop reason = signal SIGSEGV\r\n    frame #0: 0x00007fdf901cd360 libpthread.so.0`__pthread_cond_wait + 192\r\n-> 0x7fdf901cd360 <__pthread_cond_wait+192>: addb   %al, (%rax)\r\n   0x7fdf901cd362 <__pthread_cond_wait+194>: addb   %al, (%rax)\r\n   0x7fdf901cd364 <__pthread_cond_wait+196>: addb   %al, (%rax)\r\n   0x7fdf901cd366 <__pthread_cond_wait+198>: addb   %al, (%rax)\r\n  thread #13: tid = 12, 0x00007fdf901cd709 libpthread.so.0`__pthread_cond_timedwait + 297, stop reason = signal SIGSEGV\r\n    frame #0: 0x00007fdf901cd709 libpthread.so.0`__pthread_cond_timedwait + 297\r\n-> 0x7fdf901cd709 <__pthread_cond_timedwait+297>: addb   %al, (%rax)\r\n   0x7fdf901cd70b <__pthread_cond_timedwait+299>: addb   %al, (%rax)\r\n   0x7fdf901cd70d <__pthread_cond_timedwait+301>: addb   %al, (%rax)\r\n   0x7fdf901cd70f <__pthread_cond_timedwait+303>: addb   %al, (%rax)\r\n  thread #14: tid = 13, 0x00007fdf901cd360 libpthread.so.0`__pthread_cond_wait + 192, stop reason = signal SIGSEGV\r\n    frame #0: 0x00007fdf901cd360 libpthread.so.0`__pthread_cond_wait + 192\r\n-> 0x7fdf901cd360 <__pthread_cond_wait+192>: addb   %al, (%rax)\r\n   0x7fdf901cd362 <__pthread_cond_wait+194>: addb   %al, (%rax)\r\n   0x7fdf901cd364 <__pthread_cond_wait+196>: addb   %al, (%rax)\r\n   0x7fdf901cd366 <__pthread_cond_wait+198>: addb   %al, (%rax)\r\n```\n\n_Copied from original issue: dotnet/corefx#25941_", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15076", "title": "Optimize Span.Copy and Span.TryCopyTo", "body": "From https://github.com/dotnet/coreclr/pull/15069#discussion_r151746531 :\r\n\r\nReadOnlySpan.TryCopyTo is ~9.9%, but the Buffer.Memmove it's using for the actual copy is ~3.9%, so there's 6% in there that going to something other than the actual copy (the trace shows ~2.6% in the ReadOnlySpan.TryCopyTo body and ~3.4% in the Span.CopyTo body that TryCopyTo calls). If we're looking to optimize for such percentages, I'd prefer to see us start by looking at making TryCopyTo faster, as that'll accrue to many other scenarios.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15076/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14867", "title": "Failed Debug.Assert prints the stacktrace twice to the console", "body": "Repro: Run the following as debug build:\r\n\r\n```C#\r\nusing System.Diagnostics;\r\n\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        Debug.Assert(false);\r\n    }\r\n}\r\n```\r\n\r\nResult:\r\n\r\n```\r\nFailFast:\r\n\r\n   at System.Diagnostics.Debug.Assert(Boolean condition, String message, String detailMessage)\r\n   at Program.Main(String[] args) in C:\\repro\\Program.cs:line 7\r\n\r\n   at System.Environment.FailFast(System.String, System.Exception)\r\n   at Program.Main(System.String[])\r\n```\r\n\r\nProblems:\r\n\r\n- Stacktrace is printed twice\r\n- `System.Diagnostics.Debug.Assert` should not be included in the stacktrace\r\n- Title should say `Assertion failed` instead of `FailFast`", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/db81f5ec3cadb33eea9595ed102810825737acd4", "message": "Move TimeZoneInfo.Win32.cs to shared CoreLib partition (#15953)\n\nReconcile deltas with CoreRT and refactor interop to follow coding conventions"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/821be4bc919e4bad06d6ffa18781ab8c34f4e95c", "message": "Fix Windows ARM release build break (#15958)"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/3bd16103e76fbad8de7a37cb37f6a6f74ce46dfd", "message": "Rename Libraries.GlobalizationInterop to Libraries.GlobalizationNative\n\nConsistency with CoreFX and coding conventions.\n\nAlso delete a few other pieces of unused code."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/1ea580bab8adc060a88c87e29790b8fa7d91c098", "message": "Define Interop.Kernel32.MAX_PATH (#15952)\n\n* Define Interop.Kernel32.MAX_PATH\r\n\r\nFor consistency with CoreFX and coding conventions."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/ab91124003c73c28d0067f9a822b48eb829ad5cf", "message": "Fix timezone lookup to be consistently case insensitive (#15951)\n\nThe timezone ids used case insensitive comparisons everywhere, except in the dictionary used to cache timezones.\r\n\r\nFixes dotnet/corefx#26479"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/a4af006ff55af59ac5d28f0b4faffdc1806dc89a", "message": "Break current culture initialization cycle (#15938)\n\nFixes #15931"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/643a3966300a0d509e99629c3b6056117b89720a", "message": "Move platform-neutral part of TimeZone to shared CoreLib partition (#15926)\n\nPrep work for moving the platform specific parts"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/38cf93013c1dd1efc7137a6f4930cab7cc653411", "message": "Cache Invariant CompareInfo (#15902)\n\nThe Invariant CompareInfo is used in number of places. It is fetched via virtual method on CultureInfo. Caching it avoids the virtual method calls and extra indirections."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/ac0e38fbdb8bf54fa0c1b4d548acfc1c5ad02758", "message": "Move public StreamReader/Writer to CoreLib (#15884)"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/a433a9ca4b4d7f37987db11a7e842e64517edf27", "message": "Matching non-shared Decimal changes"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/d5818013f1dcf376932a6092afbcd8d5e7b0c40b", "message": "Delete BasicSpanTest.cs (#15860)\n\nIt is redundant with CoreFX Span tests now"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/decccc8e57f289b70f2d8038f5dfb2d3c47b6afc", "message": "Merge pull request #15855 from jkotas/revert\n\nRevert \"Remove relocations for MethodTable::m_pParentMethodTable for Linux ARM\""}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/2b197262e52b06719db5179cc42b55851874c88c", "message": "Revert \"Remove relocations for MethodTable::m_pParentMethodTable for Linux ARM\"\n\nThis reverts commit cf1fb9e17fc8b6ee849edab5a696d0ec5c6eadd2."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/3126bd31077a6d97f665a573957d5bb6419f9a0f", "message": "Mark legacy ByRef-like types as ref in sources (#15846)\n\nDelete special casing in the type loader"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/8266cbcf4563011b3a6686405f2fd56964123506", "message": "Fix Obsolete on ReadOnlySpan Equals and GetHashCode methods (#15820)\n\n* Fix Obsolete on ReadOnlySpan Equals and GetHashCode methods\r\n\r\n* Delete unnecessary CLSCompliant attribute"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/8719e73302f427dcb6332a6ba74e3c541577d560", "message": "Move System.Globalization.CultureData to shared CoreLib partition (#15805)"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/a2336484d07c904ac93c894d32e6a4c521788aae", "message": "Update the document for netcoreapp2.1"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/4f5896223846cdb13745497cc9b6a449006bf73b", "message": "Update links to nightly .NET Core SDK builds (#15799)"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/2c254c4085328511225e267c541561405f6916c3", "message": "Move types to shared corelib partition (#15768)\n\n- YieldAwaitable: Fixed readonly mismatch\r\n- Comparer: Made public to fix https://github.com/dotnet/corefx/issues/25973"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/5f4510d4db515b49015a961d335facd3e59b8614", "message": "Simplify and unify EnumCalendars interop (#15762)\n\nWindows was not allocating GCHandles, switch Unix to do the same."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/6c12105bb8cc1821ba5d5c3d36aad609a44308e0", "message": "Detect ByRefLike types using attribute (#15745)\n\n* Detect ByRefLike types using attribute and improve error messages for their invalid use\r\n\r\nFixes #11371 and #15458"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/75ff3e46c33bd8062fb13dd5371521485d9a01e3", "message": "Fix link to IdnMapping.cs (#15717)"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/22658ba2917cabb22d3673faab5a4cc072c3176a", "message": "Remove lib prefix for System.Globalization.Native.a to match all other libraries (#15667)"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/eb6f5764e7945e0fbb8d3921e9194aa594a0b856", "message": "Remove reflection block on methods with MethodAttributes.RequireSecObject flag (#15663)\n\nThis is not applicable for CoreCLR since CoreCLR does not have CAS, and this flag was overloaded for other purpose.\r\n\r\nFixes #15662"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/61f1e4d2e41c982b938b2596a2a4bee4f7a206be", "message": "Make HandleRef fields private"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/457a90b88eba5c37cadc332ff64a9f92592297a9", "message": "Merge pull request dotnet/corert#5148 from dotnet/nmirror\n\nMerge nmirror to master\n\nSigned-off-by: dotnet-bot <dotnet-bot@microsoft.com>"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/013eb5695e23cb967598daa5e19356af1eea060b", "message": "Fix manual GC_PROTECTs around StackTraceArray (#15621)\n\nStackTraceArray wraps GC reference that needs to be GC_PROTECTED exactly once accross all GC triggering points. The calls from copy constructor and assignment operator were violating this invariant. I have fixed this by deleting the copy constructor and assignment operator, and replaced their use by explicit CopyFrom method.\r\n\r\nFixes #15537"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72744115", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72744115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72744661", "body": "System.Security.Cryptography.\\* is going to be published as a set of separate libraries in http://github.com/dotnet/corefx\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72744661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72757425", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72757425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72783065", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72783065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72783700", "body": "Consider voting for http://visualstudio.uservoice.com/forums/121579-visual-studio/suggestions/2371587-better-nullpointerexception-error-message\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72783700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72805784", "body": "The interpreter is not a production quality code - it is not enabled in shipping bits. It is only meant to be used for initial bring up of new platforms, until the JIT starts working. If you would like to play with it or fix bugs in it, it can be enabled in src\\inc\\switches.h.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72805784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72807988", "body": "@cmckinsey - we also have TFS bug from the original report on Microsoft Connect\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72807988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72810383", "body": "We did not have a chance to look into the bug.\n\nThe heuristic mentioned is implemented in MethodTableBuilder::AllocAndInitMethodDescs: https://github.com/dotnet/coreclr/blob/master/src/vm/methodtablebuilder.cpp#L7260\n\nThe problem is that the number of generic dictionary slots guessed by MethodTableBuilder::AllocAndInitMethodDescs is less than what the JIT eventually asks for, and forces the JIT to use slower path.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72810383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72872615", "body": "The project management team looks at top uservoice requests regularly and works on getting them addressed. It does not matter that the UserVoice is 4 years old - it just means that it did not gather enough votes to be in the top list yet.\n\nFor example, UserVoice votes were one of the reasons for adding SIMD support to CLR - http://visualstudio.uservoice.com/forums/121579-visual-studio/suggestions/2212443-c-and-simd\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72872615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72882348", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72882348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72882781", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72882781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72890123", "body": "Good catch - LGTM\n\nThis fix won't have any observable effect currently - this method is only called from JitHeapInfo in SOS (https://github.com/maksqwe/coreclr/blob/master/src/ToolBox/SOS/Strike/eeheap.cpp#L1630), and the missed JIT manager is filtered out by this caller anyway. Still, nice to fix.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72890123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72893299", "body": "@CarolEidt would you like to comment on this?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72893299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72898892", "body": "Thanks for the contribution.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72898892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72917416", "body": "Could you please update the commit message to something like \"Avoid unnecessary work for identical locations in Buffer.BlockCopy\" so that it follows the guidelines that Alex mentioned above?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72917416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72919993", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72919993/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72941436", "body": "Thanks for the contribution!\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72941436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72954338", "body": "Correct, the JIT and PDB do not have enough precision in debug info today to reliably identify the source of NullReferenceException. For example, the following C# statement:\n\n```\n        foo(a.ToString(), b.ToString(), c.ToString());\n```\n\nhas just one sequence point, and so it is not possible to identify from just the NullReferenceException location and debug info which one of a, b or c was null. If you would like to see the good error message even with JIT optimizations on, it is even harder because of the debug info tracking is not guaranteed to be preserved by the JIT optimizations today.\n\nI think that the first step to attack this problem would be to write a design proposal about possible approaches. The ones identified by @mikedn would be a good start. Focus on: \n- The rough sketch of extra information that would flow between the different components in the system\n- The user experience - how good and reliable would be the exception messages\n- The estimated overhead in disk footprint, RAM and CPU cycles\n\nI know it is a lot of work...\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72954338/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72974401", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72974401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73006647", "body": "Thank you for fixing the typos\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73006647/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73012418", "body": "Very likely dup of #57\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73012418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73014815", "body": "Whether/when changes made in this repo are going to be included in future desktop versions is on case by case basis. The desktop has to maintain very high compatibility guarantees. Changes with low compat risk are likely going to be included after some bake time. Changes with high compat risk are not going to be included by default - we will ask for such changes to be made under FEATURE_CORECLR ifdef, or under a target framework version specific quirk.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73014815/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73029485", "body": "I think that the contribution guidelines are clear about this.\n\nPutting the guidelines aside for the moment - while I agree that some of the formatting in this file is not perfect, your change does not make it uniformly better:\n- The aligment of the equal signs or commas in blocks of declarations does not match the common style used for C# in general and in the rest of mscorlib\n- The enum declarations in this file are intentionally written to match the format of their unmanaged equivalents that they have to be in sync with.\n\nI am sorry, but this is not a good pull request.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73029485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/9636374", "body": "The writebarriers are patched by WriteBarrierManager that assumes certain layout. The problem is that the Apple assembler does not use short jump encoding that throws the layout off. We had an extensive discussion about the best solution during review of this PR.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9636374/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9793081", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9793081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9801308", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9801308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/12457418", "body": "@kangaroo Could you please double check this change? It does not look right: the condition is checked by the surrounding if statement, and so it will be always true.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/12457418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/13671911", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/13671911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/13726972", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/13726972/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/14747041", "body": "I think that the infinite timeouts are the right choice for the modern .NET runtimes (CoreCLR/CoreRT). We are trying to make the modern .NET runtimes policy free. \n\nThe arbitrary timeouts for finalization are policy inherited from desktop. It would be unfortunate to add it back to CoreCLR.\n\nWhy is the finalizer thread getting blocked on the GC spinlock? It seems to be the actual problem that we should fix.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/14747041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16509841", "body": "`& 0xffffffff` is unnecessary. The unchecked cast to `int` will take care of it.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16509841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/17475946", "body": "@tijoytom Do you also want to rename `ZeroFreeMemoryUTF8` to make it consistent?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/17475946/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/17906170", "body": "@VSadov I am using byref locals and returns in `Span<T>` implementation. It works great :-)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/17906170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/17909174", "body": "Yes, it needs to be possible. (It is not possible with what's here so far.)\n\ncc @KrzysztofCwalina We need to make sure that there is a way to pin `Span<T>` for interop... .\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/17909174/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/18237472", "body": "I know that this is subjective, but I liked the original label names `DiffOffset...` much better.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/18237472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20209121", "body": "@AlexRadch Could you please port this change to corert when you get a chance? Thank you!", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20209121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20823387", "body": "Nit: `U` typically means unsigned. I would make it `BYREF_INIT_BLOCK_UNALIGNED`.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20823387/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20957240", "body": "Would it be better to have just one wrapper, and do the alignment dynamically? E.g. something like:\r\n\r\n```\r\npush_nonvol_reg rbp\r\nmov rbp, rsp\r\nset_cfa_register rbp, 0\r\nmov rax, rsp\r\nand rax, -8\r\nmov rsp, rax\r\ncall    EXTERNAL_C_FUNC(signal_handler_worker)\r\nmov rsp, rbp\r\npop_nonvol_reg rbp\r\nret\r\n```\r\n\r\nThis pattern would work better on platforms where the alignment can be multiple values.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20957240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/21385127", "body": "Typo: Assembly", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/21385127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/21385130", "body": "Assembly.Load loads into the calling assembly context", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/21385130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/21385133", "body": "The APIs are not off the AppDomain type...", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/21385133/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/21385139", "body": "Maybe worth mentioning the there cannot be multiple assemblies with the same simple name loaded into a single load context; and that .Net Core ignores strong name token for assembly binding", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/21385139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/23073365", "body": "I think `lookup.accessType == IAT_VALUE` should be `lookup.accessType != IAT_VALUE` here.  (I probably got it wrong in my earlier comment.)\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/23073365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/24560157", "body": "Nit: `VSTS bug 28659` is redundant - you can tell the bug number from the URL just fine.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/24560157/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/26311409", "body": "This should be just: \r\n\r\n`Thread::ApartmentState state = SystemDomain::GetEntryPointThreadAptState(pMeth->GetMDImport(), pMeth->GetMemberDef());`", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/26311409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/26311416", "body": "This is tool late - by this point, the whole program has run and the process is about to exit.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/26311416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/26727693", "body": "Nit: I assume that these will be marked as forceinline to make them efficient as described above.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/26727693/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/26727696", "body": "You can just cast the provider to int. It will be more efficient that way.\r\n  ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/26727696/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/26727721", "body": "Is this extra interface really necessary? IMHO, it can be directly on IGCHeap and it can be folded into fewer methods:\r\n\r\n```\r\nvoid ControlEvents(bool enable, int keyword, int level)\r\nvoid ControlPrivateEvents(bool enable, int keyword, int level)\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/26727721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/26727732", "body": "Typo: CCLR ?", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/26727732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/94507865", "body": "This is fixing annoying existing problem: full CoreCLR build will create a bunch of these localpkg directories that will show up in `git status`:\r\n\r\n```\r\nD:\\coreclr>git status\r\nOn branch master\r\nYour branch is up-to-date with 'origin/master'.\r\nUntracked files:\r\n  (use \"git add <file>...\" to include in what will be committed)\r\n\r\n        src/.nuget/Microsoft.NETCore.ILAsm/localpkg/\r\n        src/.nuget/Microsoft.NETCore.ILAsm/win/localpkg/\r\n        src/.nuget/Microsoft.NETCore.ILDAsm/localpkg/\r\n        src/.nuget/Microsoft.NETCore.ILDAsm/win/localpkg/\r\n... bunch more of these ...\r\n```\r\n\r\n@weshaggard Is there more appropriate way to fix it?", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/94507865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/27123279", "body": "This should check IS_64BIT_BUILD instead of the long condition.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/27123279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/27123385", "body": "Could you please move this comment to the first place where the long condition is checked?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/27123385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/27577669", "body": "Could you please delete it in the other makefile?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/27577669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/31873583", "body": "It should be just \"/GL\" switch here. CoreCLR should be building with \"minimize size\" by default. It results into better overall performance. We selectively enable \"optimize for speed\" via pragmas in places where it is needed. And /Zi and /O1 are redundant because of they are specified above already.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/31873583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/31873954", "body": "These measurements were done a while back using the internal msbuild-based build that did not have the WPO bug. The WPO bug was introduced by conversion to cmake that we have done for open-source/cross-platform. Thanks a lot for noticing it and getting it fixed!\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/31873954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/34011250", "body": "It may be better to go with STUBLINKER_GENERATES_UNWIND_INFO undefined - same as what we do on Linux AMD64. You can make it work either way, but I expect that going with STUBLINKER_GENERATES_UNWIND_INFO is going to be more work.\n\nGetting this right will be important for managed exception handling. You can ignore it for \"hello world\".\n\nSTUBLINKER_GENERATES_UNWIND_INFO is defined in vm\\stublink.h for all other cases. If it is really needed, it may be better to define it for this case too.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/34011250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/34086179", "body": "Including the additional members in StubLinkCPU sounds like the right first step.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/34086179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/34088513", "body": "I do not have a strong opinion about it. Keeping the definitions in similar order may be easier to maintain.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/34088513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/36095842", "body": "Could you please share more details about the issue with prebuilt headers not working for 32 bit? We are using same set of prebuilt headers for both 32bit and 64bit in the internal builds and they work just fine.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/36095842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/36113826", "body": "We should just use the x86 version of the prebuilt header file. I have change in flight to get it updated. Once it is in, this should not be necessary.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/36113826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/36157410", "body": "#1339 should fix the problem with prebuilt headers.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/36157410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/44606060", "body": "> otherwise linker could remove functions that are pinvoked from mscorlib, but not called from anywhere else. \n\nThis should not be a problem anymore now that we have explicit control over libcoreclr.so exports.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/44606060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/46754266", "body": "Does ARM64 really need the `/SAFESEH:NO` option to work? It has been legacy x86-only option since forever. I would be surprised if they brought it back for arm64.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/46754266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/46754331", "body": "And we should not be using /SAFESEH:NO for x86 either - opened https://github.com/dotnet/coreclr/issues/2245 on it.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/46754331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/48199395", "body": "The contract analyzer (scan.exe) works on debug/checked binaries only. We do not run it on release binaries.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/48199395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/51825323", "body": "For other products, we have been using AMD64 || I386 condition to enable it.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/51825323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/58151445", "body": "Is `-DFEATURE_STUBS_AS_IL` going to show up twice for Unix ARM64? It may be nice to avoid it...\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/58151445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/58153153", "body": "We are using `FEATURE_STUBS_AS_IL` for Windows ARM64 - Unix ARM64 should be on the same plan as Windows.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/58153153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59971691", "body": "Is overriding default lib the blessed (by C++) way to mix the static and dynamic linking? Similar things were hard to get right in the past - had subtle bugs.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59971691/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/75982912", "body": "nit typo: assmebly \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/75982912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/92954386", "body": "Nit - comment says 6.02, code has 6.03", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/92954386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/138660907", "body": "Do we need something to ensure that the tool is installed on the official build machines so that we do not release runtime without this bit set by accident?", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/138660907/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/156651238", "body": "If you want to remove this workaround, you need to add something to the build that prints build error when you are building with configuration that has the bug. The bug results in a bad crash that is hard and expensive to diagnose.\r\n\r\nI do not see a problem with having this workaround in for a while. We do not get that much benefit from incremental linking in CoreCLR anyway. coreclr.dll - that is the largest .dll and that would benefit from the incremental linking the most - has incremental linking disabled for other reason.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/156651238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/156659129", "body": "Could you please add a note to the comment that the bug was fixed in 15.5?", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/156659129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59654752", "body": "It does have dependency on it. All of these dependencies show up in `InlinedCallFrame::UpdateRegDisplay`.\n\nLooking at `InlinedCallFrame::UpdateRegDisplay` for ARM, there is also a dependency on `REG_SAVED_LOCALLOC_SP` that is not mentioned here.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59654752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59657923", "body": "Do we want to mention that Thread abort is not supported in .NET Core, but we still care about it for full framework?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59657923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59657964", "body": "(Similar for other full framework specific features like managed varargs.)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59657964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/140915423", "body": "Nit: RyuJit LSRA meets this requirement *by* adding special ?", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/140915423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/144352542", "body": "Would it be better to use backticks to for these instead?", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/144352542/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/144381144", "body": "They will render differently. We tend to use the back ticks to escape code fragments, even if it is just complex type name.\r\n\r\nOne example from many - look for `List<T>` in https://github.com/dotnet/corefx/blob/master/Documentation/coding-guidelines/framework-design-guidelines-digest.md", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/144381144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "tannergooding": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15943", "title": "Add the appropriate ABI handling for the SIMD HWIntrinsic types", "body": "The SIMD HWIntrinsic types (`Vector64<T>`. `Vector128<T>`, and `Vector256<T>`) are special and represent the `__m64`, `__m128`, and `__m256` ABI types.\r\n\r\nThese types have special handling in both the System V and Windows ABI and are treated as \"scalar\" (e.g. non aggregate and non union) types for the purpose of parameter passing or value returns. They additionally play some role in the selection of MultiReg or HVA (also known as HFA) structs.\r\n\r\nWe should add the appropriate support for these types to ensure we are meeting the requirement of the underlying ABI for a given platform/system.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15914", "title": "Tizen armel CI job frequently hangs", "body": "If you look at the failures for the [armel_cross_checked_tizen_prtest](https://ci.dot.net/job/dotnet_coreclr/job/master/job/armel_cross_checked_tizen_prtest/), you will see that they frequently fail due to timeout issues.\r\n\r\nOn one side, it looks like a given job will hang after some tests have hit an 'Unsupported syscall'.\r\n\r\nOn other jobs, they will succesfully execute all tests and then stall with `Perform an action if the job was performed on an Azure VM Agent. is waiting for a checkpoint on dotnet_coreclr \u00bb master \u00bb armel_cross_checked_tizen_prtest ####` (the job will be waiting on another prtest job, from the same queue, and for an unrelated PR to complete before allowing itself to finish).\r\n\r\nThe timeout on all of these jobs is currently 4 hours which can quickly cause the queue to get backed up or cause PRs to get delayed for long periods of time.\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15914/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15908", "title": "Plumb support for Is4ByteSSEInstruction through the emitter", "body": "Currently, the emitter has support for emitting 4-byte AVX instructions throughout most of the `emitOutput*` code paths in the emitter.\r\n\r\nHowever, the support for emitting 4-byte SSE instructions only exists in a couple of the `emitOutput*` code paths and requires non-trivial work to enable elsewhere.\r\n\r\nWe should plumb the rest of this support through the emitter in order to enable several of the 4-byte SSE4.1 and SSE4.2 intrinsics on machines which don't support the VEX encoding (non-AVX machines).\r\n\r\nThis will also allow the `Math.Round`, `Math.Ceiling`, and `Math.Floor` intrinsics to be enabled for these architectures as well.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15908/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15879", "title": "Simplify the 'emit immediate' logic in emitxarch", "body": "In `emitxarch`, we have a some duplicated logic for emitting immediate values to handle the imm8 and the imm16/imm32 case (ex: https://github.com/dotnet/coreclr/pull/14736/files/59db2cef21998c9680670a95939e77ee29ebc595#diff-a51165bc1fd2c0fa3987370e2e714356R8201).\r\n\r\nIt would be useful to create a helper method and contain this logic centrally where possible.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15848", "title": "JIT\\SIMD\\VectorConvert tests fail on x86 Checked with AVX2 disabled", "body": "The `JIT_SIMD._VectorConvert_r_VectorConvert_r_._VectorConvert_r_VectorConvert_r_cmd` and `JIT_SIMD._VectorConvert_ro_VectorConvert_ro_._VectorConvert_ro_VectorConvert_ro_cmd` tests are failing in the x86 Checked build when AVX2 is also disabled. They appear to pass as expected when AVX is also disabled.\r\n\r\n* https://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x86_checked_windows_nt_jitx86hwintrinsicnoavx2/1/\r\n* https://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x86_checked_windows_nt_jitx86hwintrinsicnoavx2/2/\r\n\r\nI did validate locally that the `COMPlus_EnableIncompleteISAClass` flag has no impact on the result.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15828", "title": "Merge Address Mode emit helpers to a single method", "body": "Currently, we have several `emitIns` methods to support the various address modes we emit.\r\n\r\nThese include:\r\n* `emitIns_R_AR(instruction ins, emitAttr attr, regNumber ireg, regNumber base, int disp)`\r\n* `emitIns_R_AI(instruction ins, emitAttr attr, regNumber ireg, ssize_t disp)`\r\n* `emitIns_R_ARR(instruction ins, emitAttr attr, regNumber ireg, regNumber base, regNumber index, int disp)`\r\n* `emitIns_R_ARX(instruction ins, emitAttr attr, regNumber ireg, regNumber base, regNumber index, unsigned mul, int disp)`\r\n* `emitIns_R_AX(instruction ins, emitAttr attr, regNumber ireg, regNumber reg, unsigned mul, int disp)`\r\n\r\nIn most cases, these are all doing the same thing and the difference is the parameters that are passed in (baseReg/base, indxReg/index, scale/mul, and offs/disp).\r\n\r\nThese values are general pulled from an Indir node which correctly sets the defaults on these when unused (reg = REG_NA, scale = 1, offs = 0).\r\n\r\nIt may be useful (and would allow us to simplify some other code) if we combined these into a single `emitIns_R_A` method and relied on the correct defaults being set when they are unused (adding in asserts to ensure that they are correct, of course)\r\n* `emitIns_R_A(instruction ins, emitAttr attr, regNumber reg1, regNumber baseReg, regNumber indxReg, size_t scale, ssize_t offs)`\r\n\r\nThere are some others (in the form of `emitIns_A*_R`) that could probably also be combined into a single `emitIns_A_R` method\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15828/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15694", "title": "Make Vector64<T>, Vector128<T>, and Vector256<T> work with the debugger.", "body": "### Rationale\r\nCurrently `Vector64<T>`, `Vector128<T>` and `Vector256<T>` in the `System.Runtime.Intrinsics` namespace are opaque types.\r\n\r\nThis is great for the hardware intrinsics API, but it provides a very poor experience in the debugger.\r\n\r\nAs such, I propose that the types be extended with the `DebuggerTypeProxy` and `DebuggerDisplay` attributes to provide a better debugging experience.\r\n\r\n### Additional Thoughts\r\nI propose the `DebuggerDisplay` attribute should display a string of T elements.\r\n\r\nEx: For `Vector128<float>`, it would display `\"{e0, e1, e2, e3}\"`, for `Vector128<ushort>` it would display `\"{e0, e1, e2, e3, e4, e5, e6, e7}\"` (where `e#` is the value of that given element).\r\n\r\nI propose `DebuggerTypeProxy` should have several properties in the form of `public <type>[] <type>View` and there should be a property for each supported value of `T` (i.e. `float`, `double`, `byte`, `short`, `int`, `long`, `sbyte`, `ushort`, `uint`, and `ulong`).\r\n\r\nEx: `Vector128DebugView` would have `public byte[] ByteView {get;}`, `public float[] SingleView {get;}`, etc...\r\n\r\n### Notes\r\nIn doing a prototype for this proposal, I found that the debugger would always see `0` as the value of the underlying struct. I initially attempted to add serialization support, but that did not resolve the issue. \r\n\r\nHowever, adding private fields to the structs allowed it to work (I'm guessing the debugger is marshalling the type, or something similar).\r\n\r\nEx: I had to change `Vector128<T>` to the following in order for `DebuggerTypeProxy` and `DebuggerDisplay` to work:\r\n```C#\r\n[Intrinsic]\r\n[StructLayout(LayoutKind.Sequential, Size = 16)]\r\n[DebuggerTypeProxy(typeof(Vector128DebugView<>))]\r\n[DebuggerDisplay(\"{DebuggerDisplay,nq}\")]\r\npublic struct Vector128<T> where T : struct\r\n{\r\n    // These fields exist purely so debug view works\r\n    private ulong _lower;\r\n    private ulong _upper;\r\n}\r\n```\r\n\r\n\r\n  ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15694/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15670", "title": "Provide a build switch to improve the inner loop experience", "body": "Currently, `build.cmd` will build the product, build the tests, and create `CORE_ROOT` directory for running the tests.\r\n\r\nThere exists a switch for building just the product and a switch for building tests and creating the CORE_ROOT directory, but I cannot find a switch which will create the CORE_ROOT directory without building the tests as well.\r\n\r\nI propose such a switch should be added. This would help cut down the inner loop time for the scenario where you are iterating on the product and have already built all the tests (which can still take a significant time for the \"up-to-date\" check, given the sheer number)\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15670/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15641", "title": "Decouple `FEATURE_HW_INTRINSICS` from `FEATURE_SIMD`", "body": "There are a few places in the code-base where `FEATURE_HW_INTRINSICS` functionality is dependent on `FEATURE_SIMD` also being defined.\r\n\r\nThe hardware intrinsics feature should (ideally) share code with the SIMD feature, where possible, but should not be dependent on it being defined.\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14895", "title": "[Question] Why are we getting the number of cores, rather than the number of logical processors?", "body": "In our build script, we are calling `wmic cpu get NumberOfCores`: https://github.com/dotnet/coreclr/blob/5a01d8a39576f0d07441e4d123a90138f4ae0735/build.cmd#L323\r\n\r\nThis seems like the wrong thing to be grabbing as it fails to return the proper number of cores for a machine with SMT (simultaneous multi-threading) support (machine will be under-utilized).\r\n\r\nIt will also report an incorrect number of cores if the user has disabled one or more cores via the UEFI/BIOS, or some other mechanism (machine will be over-utilized).\r\n\r\n`NumberOfCores` should likely be used in conjunction with one or more of `NumberOfEnabledCore`, `NumberOfLogicalProcessors`, and `ThreadCount`.\r\n\r\nThis will ensure that the processor is properly utilized based on its actual configuration.\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14846", "title": "`double.IsNaN` and `float.IsNaN` should be updated to be intrinsic", "body": "Both of these methods should be updated to be intrinsic and generate a single instruction on platforms that support it.\r\n\r\nOn x86 architectures, they should be generating `ucomisd` and `ucomiss`, respectively.\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/ecfe848cf1edb218f9b635e41693eae43fd076b6", "message": "Merge pull request #15942 from tannergooding/no-multireg-simd\n\nUpdating the VM to no longer treat the SIMD HWIntrinsic types as HFA or MultiReg structs"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/441487910f9b183bb41deffe9476cd87c1c2ba6b", "message": "Stop the SIMD hardware intrinsics types from undergoing crossgen."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/34776bf5f6bba461b9f616744cb6e17962ccce3b", "message": "Updating the VM to no longer treat the SIMD HWIntrinsic types as HFA or MultiReg structs."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/9afce33defce540c810f3e8806568fb4c3b37732", "message": "Merge pull request #15836 from tannergooding/emitInsBinary\n\nRefactoring emitInsBinary"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/9de5dcdc3f476a1c18ba47f776a951608a8facbb", "message": "Removing an incorrect assert from emitInsBinary"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/a191099a2a27f6ced657b1585d1fa2e86c1a1a44", "message": "Refactoring emitInsBinary"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/f9a985db166ec393dc4683ecaaf083d370ae8c0a", "message": "Updating TYP_SIMD locals to no longer undergo struct promotion for HWIntrinsic nodes."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/d9aa56fcc3901f2fe2c4fb9a6817cb3dcf260651", "message": "Disabling the Math.Round, Math.Floor, and Math.Ceiling intrinsics on non-AVX machines"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/ff39b0f050378d935304db36cb0060730457acab", "message": "Fixing the `LoadAlignedVector128` HWIntrinsic test to ensure that we always read from an aligned address."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/5a17ad5d4fc0a9922124bf6e459f2d54d3a87804", "message": "Fixing some bad merge conflicts in the `emitIns_R_A_I`, `emitIns_R_C_I`, and `emitIns_R_S_I` methods"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/3e619d70d491f34fc950a7fcc635c58cb31ace92", "message": "Merge pull request #15897 from tannergooding/hwintrin-debuggerdisplay\n\nAdding a DebugView for Vector64<T>, Vector128<T>, and Vector256<T>"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/9133e9dc3336a2a4cbd56c0f5d9e223cffa5d342", "message": "Adding a DebugView for Vector64<T>, Vector128<T>, and Vector256<T>"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/0b5e9ebc73f2bc4efdc7cfbf5c041fed2be95a54", "message": "Updating emitIns_R_R_A_I to not be defined for the legacy backend."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/e522589e0c11fa4ab9a188ba91ede5c8f728802f", "message": "Merge pull request #15538 from tannergooding/sse-intrinsics\n\nImplement the SSE hardware intrinsics."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/a8db845fd2a6bd6a3e9c93ce4a4a3e523e71c205", "message": "Resolving PR feedback"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/11b6ac8f9ed2ecd8420a98e04f806829de07274a", "message": "Adding tests for the SSE Load, LoadAligned, LoadHigh, LoadLow, and LoadScalar intrinsics"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/677c5c33ab1e4954d98df72a9658719b3b02ca65", "message": "Adding support for the SSE Load, LoadAligned, LoadHigh, LoadLow, and LoadScalar intrinsics"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/5ca94174d1d20755ef40e0a559becb6794b9bf74", "message": "Updating most of the SSE Compare intrinsics to support containment"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/a15aa12827471776801fb87a4bccd69d8d64502c", "message": "Updating the SSE HWIntrinsics to share code where possible."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/51a1a5984cd5ba84813088cf29781ca42e7a0102", "message": "Adding tests for the SSE MoveMask intrinsic"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/baeed0c7cd1c9924579103fc03ff52e39ff11f6d", "message": "Adding support for the SSE MoveMask intrinsic"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/dee8fb7386799ee85c0e106a48400e0d9ab14661", "message": "Adding tests for the SSE Set scalar intrinsic"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/5ef844b0f8d003313e4dcb8502ddfe3d3c06e3aa", "message": "Adding support for the SSE Set scalar intrinsic"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/08179123052e8553fe80dce28138ef8f46574a92", "message": "Adding tests for the SSE Compare<op>Ordered and Compare<op>Unordered scalar intrinsics for op: eq, gt, ge, lt, le, and ne"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/887d5c4f1725b06f4a2edc8af77081e28e6e040c", "message": "Adding support for the SSE Compare<op>Ordered and Compare<op>Unordered scalar intrinsics for op: eq, gt, ge, lt, le, and ne"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/2a256bd066b980e39a96c8fbc217131bb2f88ee5", "message": "Adding tests for the SSE ConvertTo Int32, Int32WithTruncation, Int64WithTruncation, Single, and Vector128Single scalar intrinsics"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/e84b55e1da99f88e0ea6b6f9f35fa8689724b80b", "message": "Adding support for the SSE ConvertTo Int32, Int32WithTruncation, Int64WithTruncation, Single, and Vector128Single scalar intrinsics"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/db75c98cf3dc8391a9b3145b1034c87acf60024d", "message": "Adding tests for the SSE Reciprocal, ReciprocalSqrt, and Sqrt scalar intrinsics"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/3fcdaf8dc2698f444625a9d1236d985b8860b1dc", "message": "Adding support for the SSE Reciprocal, ReciprocalSqrt, and Sqrt scalar intrinsics"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/cd60a85bcaa10cee56f971c51b9611fee09a2e7e", "message": "Adding tests for the SSE compare eq, gt, ge, lt, le, ne, ord, and unord scalar intrinsics"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/eaf9aefffcda0d588147c2a244182d4c34c83a0b", "message": "Adding support for the SSE compare eq, gt, ge, lt, le, ne, ord, and unord scalar intrinsics"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/38af536175ee16a67e01d18c08955f77410eb259", "message": "Adding tests for the SSE Add, Divide, Max, Min, Move, Multiply, and Subtract scalar intrinsics"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/bfc992e2a8d49188d437490c6c022d7eb132617a", "message": "Adding support for the SSE Add, Divide, Max, Min, Move, Multiply, and Subtract scalar intrinsics"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/1283d8722e27213d277eaa7e237634ff612776bc", "message": "Adding tests for the SSE StaticCast intrinsic"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/224b8dc550977fac88486f917159fd4cd3282e26", "message": "Adding support for the SSE StaticCast intrinsic"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/9e545854eed157df49319f3aa0dce68f6299a454", "message": "Adding tests for the SSE Shuffle intrinsic"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/94f82fb98657a27165846d5f18a1afee4efc88cd", "message": "Adding support for the SSE Shuffle intrinsic"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/fbc91fcf2319d8a307d52b00a66d982ee967ad06", "message": "Adding tests for the SSE Set, SetAll, and SetZero intrinsics"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/3f115efc404b5b8953093d6e081a721db245c83c", "message": "Adding support for the SSE Set, SetAll, and SetZero intrinsics"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/c09ad386736bb4584df65be1e4b0b291d1a685aa", "message": "Adding tests for the SSE Reciprocal, ReciprocalSqrt, and Sqrt intrinsics"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/91c75504d6e545311ca97699419787ec1bccec1f", "message": "Adding support for the SSE Reciprocal, ReciprocalSqrt, and Sqrt intrinsics"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/77fa074b4674b7b9803954ccf471d4cd37e93fae", "message": "Adding tests for the SSE compare eq, gt, ge, lt, le, ne, ord, and unord intrinsics\n\nAdding tests for the SSE compare gt, and gte intrinsics"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/402550ca34e814d6fe8fc38c4f189d0aed82efeb", "message": "Adding support for the SSE compare eq, gt, ge, lt, le, ne, ord, and unord intrinsics"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/1cb5722400d6a29117f02507249e499dd2b2bd9d", "message": "Adding tests for the And, AndNot, Divide, Max, Min, MoveHighToLow, MoveLowToHigh, Multiply, Or, Subtract, UnpackHigh, UnpackLow, and Xor SSE intrinsics."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/adadee17d6210be74f443a40bd13887c9e61ff9c", "message": "Adding support for the SSE And, AndNot, Divide, Max, Min, MoveHighToLow, MoveLowToHigh, Multiply, Or, Subtract, UnpackHigh, UnpackLow, and Xor instructions."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/bd56bb3b2914bf56be36227314d7fba0d886a433", "message": "Adding the remaining SSE intrinsics to hwintrinsiclistxarch.h"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/ccc9329994b0029c91cfd7fd1aa35ccafa980f24", "message": "Merge pull request #14736 from tannergooding/roundsx\n\nEnable CORINFO_INTRINSIC Round, Ceiling, and Floor to generate ROUNDSS and ROUNDSD"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/4f2f9bee09e1ca1f0175ba0b3cb22da9bd6b7adf", "message": "Merge pull request #15880 from tannergooding/hwintrin-containment\n\nMark emitIns_R_A and emitIns_R_R_A to be not defined for legacy backend"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/1b66556cff0bfd720b6e7e29b9d4bb48f03fe94e", "message": "Mark emitIns_R_A and emitIns_R_R_A to be not defined for legacy backend"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/59db2cef21998c9680670a95939e77ee29ebc595", "message": "Add tests for Math.Ceiling, Floor, and Round."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/7ba1bf921700a66ee2e45ce5f706b3366ee493ba", "message": "Adding SSE4.1 intrinsic support for Round, Ceiling, and Floor."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/97efaab0ca6ebf55e3cd4d717be7a136aef98cc0", "message": "Merge pull request #15804 from tannergooding/hwintrin-containment\n\nAdding basic containment support to the x86 HWIntrinsics"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/592aa820859c894b179354d1652d359e1bb3145b", "message": "Fixing the hwintrin codgen containment checks"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/6804e9940ac0dda3c935379188af6a95d84574df", "message": "Adding asserts that values are as expected for certain containment checks"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/8225ec354bdcbf6026c084dc58ae05e3de9183af", "message": "Adding basic containment support to the x86 HWIntrinsics"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/d36b8e18fa0e1f81a176174e0413c368f2743297", "message": "Merge pull request #15772 from tannergooding/hwintrin-expand\n\nUpdating the x86 HWIntrinsic importer to not inline when returning gtNewMustThrowException"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/6d910b40c09e311d88aad742e08c8d4186b17ace", "message": "Updating the x86 HWIntrinsic importer to not inline when returning gtNewMustThrowException"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/6f79b79f4e33a029bf1d993b2d7e9b108aa3ff72", "message": "Merge pull request #15639 from tannergooding/expand-hwintrin\n\nUpdating Compiler::impIntrinsic to always expand hardware intrinsics."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/eaeb4d39ead6004de4734b7dc8bac5b25a29224f", "message": "Updating the existing HWIntrinsic tests to also test indirect calling via reflection."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/a71f4bc0f161140855eaf87e27cd82100df0a9e0", "message": "Updating Compiler::impIntrinsic to always expand hardware intrinsics."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/8337aa4fa5cdbccddee0ff81bf0b3c8db80956d3", "message": "Updating the build script to work when python is installed to a path containing a space. (#15707)"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/479797497630af8a32734711ca35a97ec3f65109", "message": "Merge pull request #15341 from tannergooding/simd-scalar\n\nAdding scalar hardware intrinsics for x86."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/2900d760f958298bc42f7a77f6632c8d4c0be301", "message": "Updated CreateMethodDesc to pass along the `IsJitIntrinsic` flag for generic methods. (#15653)"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/fc89ab8156b8f6534ada439569bdacbbcb1be2ca", "message": "Adding basic containment analysis support for hardware intrinsics."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/c127fa74fde9143e39d1cdf979aee21f31d3d31d", "message": "Organizing the tests/src/JIT/HardwareIntrinsics/X86 folder by ISA to make it more manageable. (#15617)"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15961", "title": "Updates `Vector64<T>`, `Vector128<T>`, and `Vector256<T>` to have the appropriate packing.", "body": "As per the discussion in https://github.com/dotnet/coreclr/issues/15943.\r\n\r\nThis updates the VM to specially handle `Vector64<T>`, `Vector128<T>`, and `Vector256<T>` so that they have the requisite packing levels as described in the various ABI specifications.\r\n\r\nUnlike several of the other fundamental data types, these types are required to have a specific packing and are expected to use that packing regardless of the packing of the parent structure.\r\n\r\n`LayoutKind.Auto` hasn't been handled yet as that is a bit more complicated.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15923", "title": " Fixing some inconsistencies in the x86 HWIntrinsic APIs", "body": "1. This resolves https://github.com/dotnet/corefx/issues/26433 by adding the missing Sse2.MoveMask API.\r\n\r\n2. This resolves a few issues in the Sse2 and Sse41 intrinsics where the signatures differed from the C++ signatures. This also makes the corresponding Sse intrinsics deviate from their C++ signatures to be inline with the rest of the scalar intrinsics.\r\n\r\n3. This fixes naming of arguments in LoadHigh and LoadLow to be consistent with the naming of other parameters where the operand is used for the upper or lower bits of the returned result.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15771", "title": "Update x86 HWIntrinsic Tests", "body": "I've updated the x86 hardware intrinsics to share some base code and to follow a template that ensures we get fairly consistent coverage.\r\n\r\nNotable, The `TestTable` and `Program.cs` are shared.\r\n\r\nAll tests will be expected to have the following tests:\r\n* Basic - Validates basic functionality works as intended\r\n* Reflection - Validates invocation via reflection works as intended\r\n* Unsupported - Validates PNSE is thrown when IsSupported == false\r\n* Containment - Validates that functionality works as intended with various argument types that should be treated as contained\r\n  * ClsVar - Static Variables\r\n  * LclVar - Local Variables\r\n  * LclFld - Field of a local variable\r\n  * Fld - Field of the current instance\r\n* Other - Validates other functionality that may be test specific (things like commutative or associativity tests can go here, if we need them)\r\n\r\nAt the very least, the new pattern is very \"templatable\" and is easy to copy and then do a search/replace on to get working for new tests", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15673", "title": "Updating build.cmd to support 'generatelayout' when 'skiptests' is specified.", "body": "This makes it easier to test product changes without performing the up-to-date check on all tests.\r\n\r\nResolves https://github.com/dotnet/coreclr/issues/15670", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/14897", "title": "Port #14287 to release/1.1.0", "body": "FYI. @JosephTremoulet", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/23311739", "body": "This implementation of `_ecvt` also takes a couple of other shortcuts (such as not processing INF and NAN) based on the assumption that `DoubleToNumber` is handling them.\r\n\r\nIt's probably worth renaming it and having a brief comment on what it does not handle and why.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/23311739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/23312654", "body": "For the name, `DoubleToNumber_Internal` (or something to that affect) is probably the simplest choice.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/23312654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "ahsonkhan": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15937", "title": "[JIT] Naiive implementation of Span Reverse should produce optimal codegen", "body": "From https://github.com/dotnet/corefx/pull/26381#discussion_r162217309:\r\n\r\nHere is the naiive implementation which uses a single temporary local for swapping elements. This produces sub-optimal disassembly since it contains an unnecessary mov/lea in the loop body.:\r\n```C#\r\npublic static void Reverse<T>(this Span<T> span)\r\n{\r\n    ref T p = ref MemoryMarshal.GetReference(span);\r\n    int i = 0;\r\n    int j = span.Length - 1;\r\n    while (i < j)\r\n    {\r\n        T temp = Unsafe.Add(ref p, i);\r\n        Unsafe.Add(ref p, i) = Unsafe.Add(ref p, j);\r\n        Unsafe.Add(ref p, j) = temp;\r\n        i++;\r\n        j--;\r\n    }\r\n}\r\n```\r\n\r\nThe following implementation results in better disassembly, but we shouldn't expect users to write code in this way without the unnecessary mov/lea instructions within the loop body:\r\n```C#\r\npublic static unsafe void Reverse<T>(Span<T> span)\r\n{\r\n    if (span.Length > 1)\r\n    {\r\n        ref T p = ref MemoryMarshal.GetReference(span);\r\n        IntPtr i = IntPtr.Zero;\r\n        IntPtr j = (IntPtr)span.Length - 1;\r\n\r\n        do\r\n        {\r\n            var temp1 = Unsafe.Add(ref p, i);\r\n            var temp2 = Unsafe.Add(ref p, j);\r\n            Unsafe.Add(ref p, i) = temp2;\r\n            Unsafe.Add(ref p, j) = temp1;\r\n\r\n            i += 1;\r\n            j -= 1;\r\n        } while (i.ToPointer() < j.ToPointer());\r\n    }\r\n}\r\n```\r\n\r\ncc @jkotas, @AndyAyersMS, @GrabYourPitchforks ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15364", "title": "Port optimizations to TryFormat and ToString from the UTF-8 formatter", "body": "We can optimize TryFormat/ToString for 32-bit.\r\nhttps://github.com/dotnet/coreclr/blob/master/src/mscorlib/shared/System/Number.Formatting.cs\r\n\r\nAlso, it is faster to first count the digits and then output backwards rather than outputting in reverse and then reversing it.\r\n\r\nSee related PRs from where we can port the optimizations: \r\n- https://github.com/dotnet/corefx/pull/25424#issuecomment-347744346\r\n- https://github.com/dotnet/corefx/pull/25626#issuecomment-348798209\r\n\r\ncc @stephentoub, @jkotas", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15364/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/6ef7735b14da25aa7e5b2c2a0c34c06fa868b209", "message": "Rename Pin offset to byteOffset and clean up Retain test (#26518)\n\nSigned-off-by: dotnet-bot-corefx-mirror <dotnet-bot@microsoft.com>"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/216a2d93979db085de75afbb2a3e762f51d76000", "message": "Add optional integer offset to OwnedMemory Pin (#15946)"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/4d0e3632cdf940a2170e2cf7469d6bf40483c90b", "message": "Make DangerousGetPinnableReference internal and remove DangerousTryGetArray (#15557)\n\n* Make DangerousGetPinnableReference internal and remove DangerousTryGetArray\r\n\r\n* Change DangerousGetPinnableReference to return ref readonly"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15821", "title": "Port S.N.Vector sources down to corelib", "body": "As part of https://github.com/dotnet/corefx/issues/25182#issuecomment-343614677, moving `Vector<T>` and friends down to CoreLib.\r\n\r\nI didn't copy over the .tt files. Are they necessary at this point?\r\n\r\nWe should attempt to keep these in sync with https://github.com/dotnet/corefx/tree/master/src/System.Numerics.Vectors/src/System/Numerics\r\n\r\nRelated PR: https://github.com/dotnet/corefx/pull/26266\r\n\r\ncc @jkotas, @KrzysztofCwalina, @safern, @ViktorHofer, @eerhardt ", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nbilling": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15934", "title": "PAL _wcstoui64 method name changes based on PAL_STDCPP_COMPAT in build.", "body": "I'm honestly not sure if this is a bug or intended, so filing an issue in hopes someone can answer and/or change it.\r\n\r\nThis line\r\nhttps://github.com/dotnet/coreclr/blob/84efbc8e71fff8ccffdd637017036d2dc0f666df/src/pal/inc/pal.h#L5130\r\nwill declare a method `PAL__wcstoui64` when `PAL_STDCPP_COMPAT` is not defined, and `_wcstoui64` when it is defined. This is due to\r\nhttps://github.com/dotnet/coreclr/blob/84efbc8e71fff8ccffdd637017036d2dc0f666df/src/pal/inc/pal.h#L4974\r\nbeing enclosed by an `#ifndef PAL_STDCPP_COMPAT`.\r\n\r\nThe weirdness we are seeing with this is when we compile one of our PAL-consuming binaries with `PAL_STDCPP_COMPAT` but link against an externally-compiled `libcoreclrpal.a`, we get a runtime error whenever the above method gets called because the name we linked was wrong. Meanwhile if we used `PAL__wcstoui64` in our code then linking would fail.\r\n\r\nAs I said, not sure if a bug or feature so there it is.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "CarolEidt": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15932", "title": "RyuJIT x86: LSRA assert with jitStressRegs=8", "body": "There are 541 failures:\r\nbaseservices_compilerservices._dynamicobjectproperties_Dev10_535767_Dev10_535767_._dynamicobjectproperties_Dev10_535767_Dev10_535767_cmd\r\nbaseservices_exceptions._simple_HardwareEh_HardwareEh_._simple_HardwareEh_HardwareEh_cmd\r\nbaseservices_exceptions._regressions_V1_SEH_VJ_NormalException_NormalException_._regressions_V1_SEH_VJ_NormalException_NormalException_cmd\r\nbaseservices_threading._paramthreadstart_ThreadStartBool_ThreadStartBool_._paramthreadstart_ThreadStartBool_ThreadStartBool_cmd\r\nbaseservices_threading._paramthreadstart_ThreadStartByte_ThreadStartByte_._paramthreadstart_ThreadStartByte_ThreadStartByte_cmd\r\nbaseservices_threading._commitstackonlyasneeded_DefaultStackCommit_DefaultStackCommit_._commitstackonlyasneeded_DefaultStackCommit_DefaultStackCommit_cmd\r\nbaseservices_threading._paramthreadstart_ThreadStartSByte_ThreadStartSByte_._paramthreadstart_ThreadStartSByte_ThreadStartSByte_cmd\r\nCoreMangLib_cti._system_guid_GuidCompareTo2_GuidCompareTo2_._system_guid_GuidCompareTo2_GuidCompareTo2_cmd\r\nCoreMangLib_cti._system_array_ArrayGetEnumerator_ArrayGetEnumerator_._system_array_ArrayGetEnumerator_ArrayGetEnumerator_cmd\r\nCoreMangLib_cti._system_guid_GuidEquals3_GuidEquals3_._system_guid_GuidEquals3_GuidEquals3_cmd\r\nCoreMangLib_cti._system_collections_generic_list_ListRemoveAt_ListRemoveAt_._system_collections_generic_list_ListRemoveAt_ListRemoveAt_cmd\r\nCoreMangLib_cti._system_char_CharIConvertibleToType_CharIConvertibleToType_._system_char_CharIConvertibleToType_CharIConvertibleToType_cmd\r\nCoreMangLib_cti._system_convert_ConvertToByte_ConvertToByte_._system_convert_ConvertToByte_ConvertToByte_cmd\r\nCoreMangLib_cti._system_guid_GuidCtor1_GuidCtor1_._system_guid_GuidCtor1_GuidCtor1_cmd\r\nCoreMangLib_cti._system_convert_ConvertToByte4_ConvertToByte4_._system_convert_ConvertToByte4_ConvertToByte4_cmd\r\nCoreMangLib_cti._system_convert_ConvertToDecimal15_ConvertToDecimal15_._system_convert_ConvertToDecimal15_ConvertToDecimal15_cmd\r\nCoreMangLib_cti._system_convert_ConvertToByte6_ConvertToByte6_._system_convert_ConvertToByte6_ConvertToByte6_cmd\r\nCoreMangLib_cti._system_sbyte_SByteIConvertibleToInt32_SByteIConvertibleToInt32_._system_sbyte_SByteIConvertibleToInt32_SByteIConvertibleToInt32_cmd\r\nCoreMangLib_cti._system_collections_generic_list_ListReverse2_ListReverse2_._system_collections_generic_list_ListReverse2_ListReverse2_cmd\r\nCoreMangLib_cti._system_convert_ConvertToSByte3_ConvertToSByte3_._system_convert_ConvertToSByte3_ConvertToSByte3_cmd\r\nCoreMangLib_cti._system_sbyte_SByteIConvertibleToInt64_SByteIConvertibleToInt64_._system_sbyte_SByteIConvertibleToInt64_SByteIConvertibleToInt64_cmd\r\nCoreMangLib_cti._system_collections_generic_list_ListAdd_ListAdd_._system_collections_generic_list_ListAdd_ListAdd_cmd\r\nCoreMangLib_cti._system_guid_GuidCtor3_GuidCtor3_._system_guid_GuidCtor3_GuidCtor3_cmd\r\nCoreMangLib_cti._system_uint16_UInt16IConvertibleToByte_UInt16IConvertibleToByte_._system_uint16_UInt16IConvertibleToByte_UInt16IConvertibleToByte_cmd\r\nCoreMangLib_cti._system_sbyte_SByteIConvertibleToUInt32_SByteIConvertibleToUInt32_._system_sbyte_SByteIConvertibleToUInt32_SByteIConvertibleToUInt32_cmd\r\nCoreMangLib_cti._system_uint16_UInt16IConvertibleToType_UInt16IConvertibleToType_._system_uint16_UInt16IConvertibleToType_UInt16IConvertibleToType_cmd\r\nCoreMangLib_cti._system_convert_ConvertToChar8_ConvertToChar8_._system_convert_ConvertToChar8_ConvertToChar8_cmd\r\nCoreMangLib_cti._system_type_TypeGetArrayRank_TypeGetArrayRank_._system_type_TypeGetArrayRank_TypeGetArrayRank_cmd\r\nCoreMangLib_cti._system_random_RandomNextBytes_RandomNextBytes_._system_random_RandomNextBytes_RandomNextBytes_cmd\r\nCoreMangLib_cti._system_convert_ConvertToDecimal14_ConvertToDecimal14_._system_convert_ConvertToDecimal14_ConvertToDecimal14_cmd\r\nCoreMangLib_cti._system_array_ArraySetValue2_ArraySetValue2_._system_array_ArraySetValue2_ArraySetValue2_cmd\r\nCoreMangLib_cti._system_collections_generic_list_ListReverse_ListReverse_._system_collections_generic_list_ListReverse_ListReverse_cmd\r\nCoreMangLib_cti._system_sbyte_SByteIConvertibleToChar_SByteIConvertibleToChar_._system_sbyte_SByteIConvertibleToChar_SByteIConvertibleToChar_cmd\r\nCoreMangLib_cti._system_guid_GuidEquals2_GuidEquals2_._system_guid_GuidEquals2_GuidEquals2_cmd\r\nCoreMangLib_cti._system_array_ArrayCreateInstance2b_ArrayCreateInstance2b_._system_array_ArrayCreateInstance2b_ArrayCreateInstance2b_cmd\r\nCoreMangLib_cti._system_guid_GuidEquals1_GuidEquals1_._system_guid_GuidEquals1_GuidEquals1_cmd\r\nCoreMangLib_cti._system_sbyte_SByteIConvertibleToByte_SByteIConvertibleToByte_._system_sbyte_SByteIConvertibleToByte_SByteIConvertibleToByte_cmd\r\nCoreMangLib_cti._system_convert_ConvertToByte3_ConvertToByte3_._system_convert_ConvertToByte3_ConvertToByte3_cmd\r\nCoreMangLib_cti._system_sbyte_SByteIConvertibleToDouble_SByteIConvertibleToDouble_._system_sbyte_SByteIConvertibleToDouble_SByteIConvertibleToDouble_cmd\r\nCoreMangLib_cti._system_array_ArrayGetValue2_ArrayGetValue2_._system_array_ArrayGetValue2_ArrayGetValue2_cmd\r\nCoreMangLib_cti._system_sbyte_SByteIConvertibleToUInt16_SByteIConvertibleToUInt16_._system_sbyte_SByteIConvertibleToUInt16_SByteIConvertibleToUInt16_cmd\r\nCoreMangLib_cti._system_convert_ConvertToByte8_ConvertToByte8_._system_convert_ConvertToByte8_ConvertToByte8_cmd\r\nCoreMangLib_cti._system_decimal_DecimalToByte_DecimalToByte_._system_decimal_DecimalToByte_DecimalToByte_cmd\r\nCoreMangLib_cti._system_collections_generic_list_ListForEach_ListForEach_._system_collections_generic_list_ListForEach_ListForEach_cmd\r\nCoreMangLib_cti._system_array_ArraySort3_ArraySort3_._system_array_ArraySort3_ArraySort3_cmd\r\nCoreMangLib_cti._system_uint16_UInt16IConvertibleToSByte_UInt16IConvertibleToSByte_._system_uint16_UInt16IConvertibleToSByte_UInt16IConvertibleToSByte_cmd\r\nCoreMangLib_cti._system_convert_ConvertToSByte_ConvertToSByte_._system_convert_ConvertToSByte_ConvertToSByte_cmd\r\nCoreMangLib_cti._system_convert_ConvertToChar9_ConvertToChar9_._system_convert_ConvertToChar9_ConvertToChar9_cmd\r\nCoreMangLib_cti._system_sbyte_SByteIConvertibleToInt16_SByteIConvertibleToInt16_._system_sbyte_SByteIConvertibleToInt16_SByteIConvertibleToInt16_cmd\r\nCoreMangLib_cti._system_sbyte_SByteIConvertibleToUInt64_SByteIConvertibleToUInt64_._system_sbyte_SByteIConvertibleToUInt64_SByteIConvertibleToUInt64_cmd\r\nCoreMangLib_cti._system_intptr_IntPtrEquals_IntPtrEquals_._system_intptr_IntPtrEquals_IntPtrEquals_cmd\r\nCoreMangLib_cti._system_sbyte_SByteIConvertibleToDecimal_SByteIConvertibleToDecimal_._system_sbyte_SByteIConvertibleToDecimal_SByteIConvertibleToDecimal_cmd\r\nCoreMangLib_cti._system_collections_idictionary_IDictionaryClear_IDictionaryClear_._system_collections_idictionary_IDictionaryClear_IDictionaryClear_cmd\r\nGC_Scenarios._Boxing_gcvariant3_gcvariant3_._Boxing_gcvariant3_gcvariant3_cmd\r\nhosting_stress._testset1_csgen_1_csgen_1_._testset1_csgen_1_csgen_1_cmd\r\nInterop_MarshalAPI._ReadWrite_ReadWriteByte_ReadWriteByte_._ReadWrite_ReadWriteByte_ReadWriteByte_cmd\r\nInterop_PrimitiveMarshalling._EnumMarshalling_EnumTest_EnumTest_._EnumMarshalling_EnumTest_EnumTest_cmd\r\nInterop_PrimitiveMarshalling._Bool_BoolTest_BoolTest_._Bool_BoolTest_BoolTest_cmd\r\nInterop_SimpleStruct._SimpleStruct_SimpleStruct_._SimpleStruct_SimpleStruct_cmd\r\nJIT_CheckProjects._CheckProjects_CheckProjects_._CheckProjects_CheckProjects_cmd\r\nJIT_CodeGenBringUpTests._ArrayMD1_ArrayMD1_._ArrayMD1_ArrayMD1_cmd\r\nJIT_CodeGenBringUpTests._LngConv_LngConv_._LngConv_LngConv_cmd\r\nJIT_CodeGenBringUpTests._ArrayMD2_ArrayMD2_._ArrayMD2_ArrayMD2_cmd\r\nJIT_Directed._shift_int8_il_r_int8_il_r_._shift_int8_il_r_int8_il_r_cmd\r\nJIT_Directed._leave_filter1_r_filter1_r_._leave_filter1_r_filter1_r_cmd\r\nJIT_Directed._nullabletypes_isinstinterface_do_isinstinterface_do_._nullabletypes_isinstinterface_do_isinstinterface_do_cmd\r\nJIT_Directed._shift_uint8_d_uint8_d_._shift_uint8_d_uint8_d_cmd\r\nJIT_Directed._coverage_oldtests_lclflddiv_cs_ro_lclflddiv_cs_ro_._coverage_oldtests_lclflddiv_cs_ro_lclflddiv_cs_ro_cmd\r\nJIT_Directed._leave_catch3_r_catch3_r_._leave_catch3_r_catch3_r_cmd\r\nJIT_Directed._nullabletypes_isinstinterface_ro_isinstinterface_ro_._nullabletypes_isinstinterface_ro_isinstinterface_ro_cmd\r\nJIT_Directed._nullabletypes_castclassinterface_do_castclassinterface_do_._nullabletypes_castclassinterface_do_castclassinterface_do_cmd\r\nJIT_Directed._PREFIX_PrimitiveVT_callconv2_cs_do_callconv2_cs_do_._PREFIX_PrimitiveVT_callconv2_cs_do_callconv2_cs_do_cmd\r\nJIT_Directed._perffix_primitivevt_mixed1_cs_ro_mixed1_cs_ro_._perffix_primitivevt_mixed1_cs_ro_mixed1_cs_ro_cmd\r\nJIT_Directed._nullabletypes_castclassvaluetype_ro_castclassvaluetype_ro_._nullabletypes_castclassvaluetype_ro_castclassvaluetype_ro_cmd\r\nJIT_Directed._zeroinit_init_struct_init_struct_._zeroinit_init_struct_init_struct_cmd\r\nJIT_Directed._nullabletypes_Desktop_boxunboxvaluetype_ro_boxunboxvaluetype_ro_._nullabletypes_Desktop_boxunboxvaluetype_ro_boxunboxvaluetype_ro_cmd\r\nJIT_Directed._coverage_oldtests_lclfldadd_cs_do_lclfldadd_cs_do_._coverage_oldtests_lclfldadd_cs_do_lclfldadd_cs_do_cmd\r\nJIT_Directed._leave_try1_r_try1_r_._leave_try1_r_try1_r_cmd\r\nJIT_Directed._coverage_oldtests_cse2_cs_ro_cse2_cs_ro_._coverage_oldtests_cse2_cs_ro_cse2_cs_ro_cmd\r\nJIT_Directed._Misc_gettype_gettypetypeofmatrix_gettypetypeofmatrix_._Misc_gettype_gettypetypeofmatrix_gettypetypeofmatrix_cmd\r\nJIT_Directed._zeroinit_init_int32_init_int32_._zeroinit_init_int32_init_int32_cmd\r\nJIT_Directed._perffix_primitivevt_callconv3_il_r_callconv3_il_r_._perffix_primitivevt_callconv3_il_r_callconv3_il_r_cmd\r\nJIT_Directed._shift_uint8_r_uint8_r_._shift_uint8_r_uint8_r_cmd\r\nJIT_Directed._shift_nativeint_il_d_nativeint_il_d_._shift_nativeint_il_d_nativeint_il_d_cmd\r\nJIT_Directed._StrAccess_straccess1_cs_do_straccess1_cs_do_._StrAccess_straccess1_cs_do_straccess1_cs_do_cmd\r\nJIT_Directed._perffix_primitivevt_mixed1_cs_do_mixed1_cs_do_._perffix_primitivevt_mixed1_cs_do_mixed1_cs_do_cmd\r\nJIT_Directed._shift_uint8_ro_uint8_ro_._shift_uint8_ro_uint8_ro_cmd\r\nJIT_Directed._shift_uint8_cs_r_uint8_cs_r_._shift_uint8_cs_r_uint8_cs_r_cmd\r\nJIT_Directed._StrAccess_straccess2_cs_ro_straccess2_cs_ro_._StrAccess_straccess2_cs_ro_straccess2_cs_ro_cmd\r\nJIT_Directed._coverage_oldtests_lclfldsub_cs_ro_lclfldsub_cs_ro_._coverage_oldtests_lclfldsub_cs_ro_lclfldsub_cs_ro_cmd\r\nJIT_Directed._nullabletypes_isinstgenerics_do_isinstgenerics_do_._nullabletypes_isinstgenerics_do_isinstgenerics_do_cmd\r\nJIT_Directed._nullabletypes_isinst_ro_isinst_ro_._nullabletypes_isinst_ro_isinst_ro_cmd\r\nJIT_Directed._nullabletypes_isinstgenerics_ro_isinstgenerics_ro_._nullabletypes_isinstgenerics_ro_isinstgenerics_ro_cmd\r\nJIT_Directed._zeroinit_init_int64_init_int64_._zeroinit_init_int64_init_int64_cmd\r\nJIT_Directed._nullabletypes_isinstvaluetype_ro_isinstvaluetype_ro_._nullabletypes_isinstvaluetype_ro_isinstvaluetype_ro_cmd\r\nJIT_Directed._coverage_oldtests_lclfldsub_cs_do_lclfldsub_cs_do_._coverage_oldtests_lclfldsub_cs_do_lclfldsub_cs_do_cmd\r\nJIT_Directed._nullabletypes_isinstvaluetype_do_isinstvaluetype_do_._nullabletypes_isinstvaluetype_do_isinstvaluetype_do_cmd\r\nJIT_Directed._zeroinit_init_byte_init_byte_._zeroinit_init_byte_init_byte_cmd\r\nJIT_Directed._shift_int8_il_d_int8_il_d_._shift_int8_il_d_int8_il_d_cmd\r\nJIT_Directed._nullabletypes_Desktop_boxunboxvaluetype_do_boxunboxvaluetype_do_._nullabletypes_Desktop_boxunboxvaluetype_do_boxunboxvaluetype_do_cmd\r\nJIT_Directed._shift_uint8_cs_ro_uint8_cs_ro_._shift_uint8_cs_ro_uint8_cs_ro_cmd\r\nJIT_Directed._nullabletypes_isinstboxed_do_isinstboxed_do_._nullabletypes_isinstboxed_do_isinstboxed_do_cmd\r\nJIT_Directed._StrAccess_straccess2_cs_do_straccess2_cs_do_._StrAccess_straccess2_cs_do_straccess2_cs_do_cmd\r\nJIT_Directed._shift_uint8_do_uint8_do_._shift_uint8_do_uint8_do_cmd\r\nJIT_Directed._shift_nativeuint_il_d_nativeuint_il_d_._shift_nativeuint_il_d_nativeuint_il_d_cmd\r\nJIT_Directed._StrAccess_straccess1_cs_ro_straccess1_cs_ro_._StrAccess_straccess1_cs_ro_straccess1_cs_ro_cmd\r\nJIT_Directed._coverage_oldtests_cse2_cs_do_cse2_cs_do_._coverage_oldtests_cse2_cs_do_cse2_cs_do_cmd\r\nJIT_Directed._coverage_oldtests_lclfldmul_cs_do_lclfldmul_cs_do_._coverage_oldtests_lclfldmul_cs_do_lclfldmul_cs_do_cmd\r\nJIT_Directed._nullabletypes_isinst_do_isinst_do_._nullabletypes_isinst_do_isinst_do_cmd\r\nJIT_Directed._perffix_primitivevt_mixed2_cs_ro_mixed2_cs_ro_._perffix_primitivevt_mixed2_cs_ro_mixed2_cs_ro_cmd\r\nJIT_Directed._perffix_primitivevt_callconv1_cs_ro_callconv1_cs_ro_._perffix_primitivevt_callconv1_cs_ro_callconv1_cs_ro_cmd\r\nJIT_Directed._coverage_oldtests_lclfldmul_cs_ro_lclfldmul_cs_ro_._coverage_oldtests_lclfldmul_cs_ro_lclfldmul_cs_ro_cmd\r\nJIT_Directed._perffix_primitivevt_callconv2_cs_do_callconv2_cs_do_._perffix_primitivevt_callconv2_cs_do_callconv2_cs_do_cmd\r\nJIT_Directed._gettypetypeof_gettypetypeofmatrix_gettypetypeofmatrix_._gettypetypeof_gettypetypeofmatrix_gettypetypeofmatrix_cmd\r\nJIT_Directed._PREFIX_PrimitiveVT_callconv1_cs_do_callconv1_cs_do_._PREFIX_PrimitiveVT_callconv1_cs_do_callconv1_cs_do_cmd\r\nJIT_Directed._coverage_oldtests_lclfldrem_cs_ro_lclfldrem_cs_ro_._coverage_oldtests_lclfldrem_cs_ro_lclfldrem_cs_ro_cmd\r\nJIT_Directed._PREFIX_PrimitiveVT_callconv2_cs_ro_callconv2_cs_ro_._PREFIX_PrimitiveVT_callconv2_cs_ro_callconv2_cs_ro_cmd\r\nJIT_Directed._nullabletypes_boxunboxinterface_do_boxunboxinterface_do_._nullabletypes_boxunboxinterface_do_boxunboxinterface_do_cmd\r\nJIT_Directed._forceinlining_NoMetaData_NoMetaData_._forceinlining_NoMetaData_NoMetaData_cmd\r\nJIT_Directed._nullabletypes_castclassinterface_ro_castclassinterface_ro_._nullabletypes_castclassinterface_ro_castclassinterface_ro_cmd\r\nJIT_Directed._nullabletypes_castclassvaluetype_do_castclassvaluetype_do_._nullabletypes_castclassvaluetype_do_castclassvaluetype_do_cmd\r\nJIT_Directed._leave_filter3_r_filter3_r_._leave_filter3_r_filter3_r_cmd\r\nJIT_Directed._shift_uint8_cs_d_uint8_cs_d_._shift_uint8_cs_d_uint8_cs_d_cmd\r\nJIT_Directed._StructABI_StructABI_StructABI_._StructABI_StructABI_StructABI_cmd\r\nJIT_Directed._coverage_oldtests_lclfldadd_cs_ro_lclfldadd_cs_ro_._coverage_oldtests_lclfldadd_cs_ro_lclfldadd_cs_ro_cmd\r\nJIT_Directed._coverage_oldtests_lclfldrem_cs_do_lclfldrem_cs_do_._coverage_oldtests_lclfldrem_cs_do_lclfldrem_cs_do_cmd\r\nJIT_Directed._nullabletypes_isinst2_ro_isinst2_ro_._nullabletypes_isinst2_ro_isinst2_ro_cmd\r\nJIT_Directed._perffix_primitivevt_identity3_il_r_identity3_il_r_._perffix_primitivevt_identity3_il_r_identity3_il_r_cmd\r\nJIT_Directed._zeroinit_init_uint64_init_uint64_._zeroinit_init_uint64_init_uint64_cmd\r\nJIT_Directed._perffix_primitivevt_callconv1_cs_do_callconv1_cs_do_._perffix_primitivevt_callconv1_cs_do_callconv1_cs_do_cmd\r\nJIT_Directed._coverage_oldtests_lclflddiv_cs_do_lclflddiv_cs_do_._coverage_oldtests_lclflddiv_cs_do_lclflddiv_cs_do_cmd\r\nJIT_Directed._intrinsic_pow_pow2_cs_do_pow2_cs_do_._intrinsic_pow_pow2_cs_do_pow2_cs_do_cmd\r\nJIT_Directed._zeroinit_init_uint32_init_uint32_._zeroinit_init_uint32_init_uint32_cmd\r\nJIT_Directed._nullabletypes_isinst2_do_isinst2_do_._nullabletypes_isinst2_do_isinst2_do_cmd\r\nJIT_Directed._nullabletypes_boxunboxinterface_ro_boxunboxinterface_ro_._nullabletypes_boxunboxinterface_ro_boxunboxinterface_ro_cmd\r\nJIT_Directed._perffix_primitivevt_callconv2_cs_ro_callconv2_cs_ro_._perffix_primitivevt_callconv2_cs_ro_callconv2_cs_ro_cmd\r\nJIT_Directed._intrinsic_pow_pow2_cs_ro_pow2_cs_ro_._intrinsic_pow_pow2_cs_ro_pow2_cs_ro_cmd\r\nJIT_Directed._leave_catch1_r_catch1_r_._leave_catch1_r_catch1_r_cmd\r\nJIT_Directed._shift_uint8_cs_do_uint8_cs_do_._shift_uint8_cs_do_uint8_cs_do_cmd\r\nJIT_Directed._PREFIX_PrimitiveVT_callconv1_cs_ro_callconv1_cs_ro_._PREFIX_PrimitiveVT_callconv1_cs_ro_callconv1_cs_ro_cmd\r\nJIT_Directed._perffix_primitivevt_mixed2_cs_do_mixed2_cs_do_._perffix_primitivevt_mixed2_cs_do_mixed2_cs_do_cmd\r\nJIT_Directed._nullabletypes_isinstboxed_ro_isinstboxed_ro_._nullabletypes_isinstboxed_ro_isinstboxed_ro_cmd\r\nJIT_Directed._tailcall_tailcall_tailcall_._tailcall_tailcall_tailcall_cmd\r\nJIT_Generics._Instantiation_Interfaces_struct04_struct04_._Instantiation_Interfaces_struct04_struct04_cmd\r\nJIT_Generics._Typeof_struct03_struct03_._Typeof_struct03_struct03_cmd\r\nJIT_Generics._Arrays_ConstructedTypes_MultiDim_class01_static_class01_static_._Arrays_ConstructedTypes_MultiDim_class01_static_class01_static_cmd\r\nJIT_Generics._Arrays_ConstructedTypes_MultiDim_struct01_static_struct01_static_._Arrays_ConstructedTypes_MultiDim_struct01_static_struct01_static_cmd\r\nJIT_Generics._Instantiation_Interfaces_struct01_struct01_._Instantiation_Interfaces_struct01_struct01_cmd\r\nJIT_Generics._Instantiation_Structs_struct02_struct02_._Instantiation_Structs_struct02_struct02_cmd\r\nJIT_Generics._Arrays_TypeParameters_MultiDim_struct01_struct01_._Arrays_TypeParameters_MultiDim_struct01_struct01_cmd\r\nJIT_Generics._Arrays_ConstructedTypes_MultiDim_struct01_instance_struct01_instance_._Arrays_ConstructedTypes_MultiDim_struct01_instance_struct01_instance_cmd\r\nJIT_Generics._Instantiation_Structs_struct03_struct03_._Instantiation_Structs_struct03_struct03_cmd\r\nJIT_Generics._Instantiation_Interfaces_struct05_struct05_._Instantiation_Interfaces_struct05_struct05_cmd\r\nJIT_Generics._Arrays_ConstructedTypes_MultiDim_class01_class01_._Arrays_ConstructedTypes_MultiDim_class01_class01_cmd\r\nJIT_Generics._Typeof_struct01_struct01_._Typeof_struct01_struct01_cmd\r\nJIT_Generics._Instantiation_Structs_struct01_struct01_._Instantiation_Structs_struct01_struct01_cmd\r\nJIT_Generics._Typeof_struct02_struct02_._Typeof_struct02_struct02_cmd\r\nJIT_Generics._Instantiation_Interfaces_struct02_struct02_._Instantiation_Interfaces_struct02_struct02_cmd\r\nJIT_Generics._Arrays_TypeParameters_MultiDim_class01_class01_._Arrays_TypeParameters_MultiDim_class01_class01_cmd\r\nJIT_Generics._Instantiation_Interfaces_struct03_struct03_._Instantiation_Interfaces_struct03_struct03_cmd\r\nJIT_Generics._Arrays_ConstructedTypes_MultiDim_class01_instance_class01_instance_._Arrays_ConstructedTypes_MultiDim_class01_instance_class01_instance_cmd\r\nJIT_Generics._Arrays_ConstructedTypes_MultiDim_struct01_struct01_._Arrays_ConstructedTypes_MultiDim_struct01_struct01_cmd\r\nJIT_IL_Conformance._Old_directed_ldloca_s_i1_ldloca_s_i1_._Old_directed_ldloca_s_i1_ldloca_s_i1_cmd\r\nJIT_jit64._valuetypes_nullable_castclass_generics_castclass_generics042_castclass_generics042_._valuetypes_nullable_castclass_generics_castclass_generics042_castclass_generics042_cmd\r\nJIT_jit64._valuetypes_nullable_castclass_castclass_castclass039_castclass039_._valuetypes_nullable_castclass_castclass_castclass039_castclass039_cmd\r\nJIT_jit64._valuetypes_nullable_box_unbox_value_box_unbox_value031_box_unbox_value031_._valuetypes_nullable_box_unbox_value_box_unbox_value031_box_unbox_value031_cmd\r\nJIT_jit64._valuetypes_nullable_box_unbox_box_unbox_box_unbox025_box_unbox025_._valuetypes_nullable_box_unbox_box_unbox_box_unbox025_box_unbox025_cmd\r\nJIT_jit64._valuetypes_nullable_box_unbox_box_unbox_box_unbox031_box_unbox031_._valuetypes_nullable_box_unbox_box_unbox_box_unbox031_box_unbox031_cmd\r\nJIT_jit64._valuetypes_nullable_castclass_generics_castclass_generics021_castclass_generics021_._valuetypes_nullable_castclass_generics_castclass_generics021_castclass_generics021_cmd\r\nJIT_jit64._valuetypes_nullable_box_unbox_box_unbox_box_unbox045_box_unbox045_._valuetypes_nullable_box_unbox_box_unbox_box_unbox045_box_unbox045_cmd\r\nJIT_jit64._valuetypes_nullable_castclass_generics_castclass_generics039_castclass_generics039_._valuetypes_nullable_castclass_generics_castclass_generics039_castclass_generics039_cmd\r\nJIT_jit64._valuetypes_nullable_castclass_generics_castclass_generics032_castclass_generics032_._valuetypes_nullable_castclass_generics_castclass_generics032_castclass_generics032_cmd\r\nJIT_jit64._valuetypes_nullable_castclass_castclass_castclass032_castclass032_._valuetypes_nullable_castclass_castclass_castclass032_castclass032_cmd\r\nJIT_jit64._valuetypes_nullable_box_unbox_value_box_unbox_value042_box_unbox_value042_._valuetypes_nullable_box_unbox_value_box_unbox_value042_box_unbox_value042_cmd\r\nJIT_jit64._valuetypes_nullable_box_unbox_generics_box_unbox_generics041_box_unbox_generics041_._valuetypes_nullable_box_unbox_generics_box_unbox_generics041_box_unbox_generics041_cmd\r\nJIT_jit64._valuetypes_nullable_box_unbox_value_box_unbox_value033_box_unbox_value033_._valuetypes_nullable_box_unbox_value_box_unbox_value033_box_unbox_value033_cmd\r\nJIT_jit64._valuetypes_nullable_castclass_interface_castclass_interface001_castclass_interface001_._valuetypes_nullable_castclass_interface_castclass_interface001_castclass_interface001_cmd\r\nJIT_jit64._valuetypes_nullable_castclass_interface_castclass_interface004_castclass_interface004_._valuetypes_nullable_castclass_interface_castclass_interface004_castclass_interface004_cmd\r\nJIT_jit64._valuetypes_nullable_box_unbox_generics_box_unbox_generics038_box_unbox_generics038_._valuetypes_nullable_box_unbox_generics_box_unbox_generics038_box_unbox_generics038_cmd\r\nJIT_jit64._valuetypes_nullable_box_unbox_interface_box_unbox_interface004_box_unbox_interface004_._valuetypes_nullable_box_unbox_interface_box_unbox_interface004_box_unbox_interface004_cmd\r\nJIT_jit64._valuetypes_nullable_box_unbox_value_box_unbox_value039_box_unbox_value039_._valuetypes_nullable_box_unbox_value_box_unbox_value039_box_unbox_value039_cmd\r\nJIT_jit64._valuetypes_nullable_castclass_interface_castclass_interface002_castclass_interface002_._valuetypes_nullable_castclass_interface_castclass_interface002_castclass_interface002_cmd\r\nJIT_jit64._valuetypes_nullable_box_unbox_generics_box_unbox_generics039_box_unbox_generics039_._valuetypes_nullable_box_unbox_generics_box_unbox_generics039_box_unbox_generics039_cmd\r\nJIT_jit64._valuetypes_nullable_castclass_castclass_castclass026_castclass026_._valuetypes_nullable_castclass_castclass_castclass026_castclass026_cmd\r\nJIT_jit64._valuetypes_nullable_castclass_castclass_castclass038_castclass038_._valuetypes_nullable_castclass_castclass_castclass038_castclass038_cmd\r\nJIT_jit64._valuetypes_nullable_box_unbox_value_box_unbox_value045_box_unbox_value045_._valuetypes_nullable_box_unbox_value_box_unbox_value045_box_unbox_value045_cmd\r\nJIT_jit64._valuetypes_nullable_box_unbox_generics_box_unbox_generics042_box_unbox_generics042_._valuetypes_nullable_box_unbox_generics_box_unbox_generics042_box_unbox_generics042_cmd\r\nJIT_jit64._valuetypes_nullable_box_unbox_box_unbox_box_unbox042_box_unbox042_._valuetypes_nullable_box_unbox_box_unbox_box_unbox042_box_unbox042_cmd\r\nJIT_jit64._valuetypes_nullable_box_unbox_box_unbox_box_unbox040_box_unbox040_._valuetypes_nullable_box_unbox_box_unbox_box_unbox040_box_unbox040_cmd\r\nJIT_jit64._valuetypes_nullable_box_unbox_value_box_unbox_value025_box_unbox_value025_._valuetypes_nullable_box_unbox_value_box_unbox_value025_box_unbox_value025_cmd\r\nJIT_jit64._valuetypes_nullable_box_unbox_box_unbox_box_unbox021_box_unbox021_._valuetypes_nullable_box_unbox_box_unbox_box_unbox021_box_unbox021_cmd\r\nJIT_jit64._valuetypes_nullable_box_unbox_box_unbox_box_unbox039_box_unbox039_._valuetypes_nullable_box_unbox_box_unbox_box_unbox039_box_unbox039_cmd\r\nJIT_jit64._valuetypes_nullable_castclass_castclass_castclass045_castclass045_._valuetypes_nullable_castclass_castclass_castclass045_castclass045_cmd\r\nJIT_jit64._valuetypes_nullable_box_unbox_value_box_unbox_value032_box_unbox_value032_._valuetypes_nullable_box_unbox_value_box_unbox_value032_box_unbox_value032_cmd\r\nJIT_jit64._valuetypes_nullable_box_unbox_interface_box_unbox_interface003_box_unbox_interface003_._valuetypes_nullable_box_unbox_interface_box_unbox_interface003_box_unbox_interface003_cmd\r\nJIT_jit64._valuetypes_nullable_box_unbox_value_box_unbox_value026_box_unbox_value026_._valuetypes_nullable_box_unbox_value_box_unbox_value026_box_unbox_value026_cmd\r\nJIT_jit64._valuetypes_nullable_box_unbox_generics_box_unbox_generics025_box_unbox_generics025_._valuetypes_nullable_box_unbox_generics_box_unbox_generics025_box_unbox_generics025_cmd\r\nJIT_jit64._regress_vsw_539509_test1_test1_._regress_vsw_539509_test1_test1_cmd\r\nJIT_jit64._valuetypes_nullable_box_unbox_generics_box_unbox_generics032_box_unbox_generics032_._valuetypes_nullable_box_unbox_generics_box_unbox_generics032_box_unbox_generics032_cmd\r\nJIT_jit64._valuetypes_nullable_castclass_interface_castclass_interface005_castclass_interface005_._valuetypes_nullable_castclass_interface_castclass_interface005_castclass_interface005_cmd\r\nJIT_jit64._valuetypes_nullable_box_unbox_box_unbox_box_unbox038_box_unbox038_._valuetypes_nullable_box_unbox_box_unbox_box_unbox038_box_unbox038_cmd\r\nJIT_jit64._valuetypes_nullable_box_unbox_value_box_unbox_value041_box_unbox_value041_._valuetypes_nullable_box_unbox_value_box_unbox_value041_box_unbox_value041_cmd\r\nJIT_jit64._valuetypes_nullable_castclass_castclass_castclass040_castclass040_._valuetypes_nullable_castclass_castclass_castclass040_castclass040_cmd\r\nJIT_jit64._valuetypes_nullable_castclass_castclass_castclass025_castclass025_._valuetypes_nullable_castclass_castclass_castclass025_castclass025_cmd\r\nJIT_jit64._valuetypes_nullable_castclass_generics_castclass_generics045_castclass_generics045_._valuetypes_nullable_castclass_generics_castclass_generics045_castclass_generics045_cmd\r\nJIT_jit64._valuetypes_nullable_box_unbox_generics_box_unbox_generics045_box_unbox_generics045_._valuetypes_nullable_box_unbox_generics_box_unbox_generics045_box_unbox_generics045_cmd\r\nJIT_jit64._valuetypes_nullable_box_unbox_box_unbox_box_unbox041_box_unbox041_._valuetypes_nullable_box_unbox_box_unbox_box_unbox041_box_unbox041_cmd\r\nJIT_jit64._valuetypes_nullable_box_unbox_generics_box_unbox_generics021_box_unbox_generics021_._valuetypes_nullable_box_unbox_generics_box_unbox_generics021_box_unbox_generics021_cmd\r\nJIT_jit64._valuetypes_nullable_castclass_generics_castclass_generics026_castclass_generics026_._valuetypes_nullable_castclass_generics_castclass_generics026_castclass_generics026_cmd\r\nJIT_jit64._valuetypes_nullable_box_unbox_box_unbox_box_unbox026_box_unbox026_._valuetypes_nullable_box_unbox_box_unbox_box_unbox026_box_unbox026_cmd\r\nJIT_jit64._valuetypes_nullable_castclass_generics_castclass_generics031_castclass_generics031_._valuetypes_nullable_castclass_generics_castclass_generics031_castclass_generics031_cmd\r\nJIT_jit64._valuetypes_nullable_castclass_generics_castclass_generics025_castclass_generics025_._valuetypes_nullable_castclass_generics_castclass_generics025_castclass_generics025_cmd\r\nJIT_jit64._valuetypes_nullable_castclass_generics_castclass_generics040_castclass_generics040_._valuetypes_nullable_castclass_generics_castclass_generics040_castclass_generics040_cmd\r\nJIT_jit64._valuetypes_nullable_box_unbox_generics_box_unbox_generics033_box_unbox_generics033_._valuetypes_nullable_box_unbox_generics_box_unbox_generics033_box_unbox_generics033_cmd\r\nJIT_jit64._valuetypes_nullable_box_unbox_generics_box_unbox_generics040_box_unbox_generics040_._valuetypes_nullable_box_unbox_generics_box_unbox_generics040_box_unbox_generics040_cmd\r\nJIT_jit64._valuetypes_nullable_castclass_generics_castclass_generics038_castclass_generics038_._valuetypes_nullable_castclass_generics_castclass_generics038_castclass_generics038_cmd\r\nJIT_jit64._valuetypes_nullable_box_unbox_value_box_unbox_value040_box_unbox_value040_._valuetypes_nullable_box_unbox_value_box_unbox_value040_box_unbox_value040_cmd\r\nJIT_jit64._valuetypes_nullable_castclass_castclass_castclass033_castclass033_._valuetypes_nullable_castclass_castclass_castclass033_castclass033_cmd\r\nJIT_jit64._valuetypes_nullable_castclass_castclass_castclass041_castclass041_._valuetypes_nullable_castclass_castclass_castclass041_castclass041_cmd\r\nJIT_jit64._valuetypes_nullable_box_unbox_box_unbox_box_unbox033_box_unbox033_._valuetypes_nullable_box_unbox_box_unbox_box_unbox033_box_unbox033_cmd\r\nJIT_jit64._valuetypes_nullable_castclass_castclass_castclass021_castclass021_._valuetypes_nullable_castclass_castclass_castclass021_castclass021_cmd\r\nJIT_jit64._valuetypes_nullable_castclass_interface_castclass_interface003_castclass_interface003_._valuetypes_nullable_castclass_interface_castclass_interface003_castclass_interface003_cmd\r\nJIT_jit64._valuetypes_nullable_box_unbox_interface_box_unbox_interface002_box_unbox_interface002_._valuetypes_nullable_box_unbox_interface_box_unbox_interface002_box_unbox_interface002_cmd\r\nJIT_jit64._valuetypes_nullable_box_unbox_generics_box_unbox_generics026_box_unbox_generics026_._valuetypes_nullable_box_unbox_generics_box_unbox_generics026_box_unbox_generics026_cmd\r\nJIT_jit64._valuetypes_nullable_box_unbox_box_unbox_box_unbox032_box_unbox032_._valuetypes_nullable_box_unbox_box_unbox_box_unbox032_box_unbox032_cmd\r\nJIT_jit64._valuetypes_nullable_box_unbox_value_box_unbox_value038_box_unbox_value038_._valuetypes_nullable_box_unbox_value_box_unbox_value038_box_unbox_value038_cmd\r\nJIT_jit64._valuetypes_nullable_castclass_castclass_castclass042_castclass042_._valuetypes_nullable_castclass_castclass_castclass042_castclass042_cmd\r\nJIT_jit64._valuetypes_nullable_castclass_generics_castclass_generics041_castclass_generics041_._valuetypes_nullable_castclass_generics_castclass_generics041_castclass_generics041_cmd\r\nJIT_jit64._valuetypes_nullable_castclass_generics_castclass_generics033_castclass_generics033_._valuetypes_nullable_castclass_generics_castclass_generics033_castclass_generics033_cmd\r\nJIT_jit64._valuetypes_nullable_box_unbox_value_box_unbox_value021_box_unbox_value021_._valuetypes_nullable_box_unbox_value_box_unbox_value021_box_unbox_value021_cmd\r\nJIT_jit64._valuetypes_nullable_box_unbox_interface_box_unbox_interface001_box_unbox_interface001_._valuetypes_nullable_box_unbox_interface_box_unbox_interface001_box_unbox_interface001_cmd\r\nJIT_jit64._valuetypes_nullable_box_unbox_interface_box_unbox_interface005_box_unbox_interface005_._valuetypes_nullable_box_unbox_interface_box_unbox_interface005_box_unbox_interface005_cmd\r\nJIT_jit64._valuetypes_nullable_box_unbox_generics_box_unbox_generics031_box_unbox_generics031_._valuetypes_nullable_box_unbox_generics_box_unbox_generics031_box_unbox_generics031_cmd\r\nJIT_jit64._valuetypes_nullable_castclass_castclass_castclass031_castclass031_._valuetypes_nullable_castclass_castclass_castclass031_castclass031_cmd\r\nJIT_Methodical._explicit_coverage_seq_gc_float_1_r_seq_gc_float_1_r_._explicit_coverage_seq_gc_float_1_r_seq_gc_float_1_r_cmd\r\nJIT_Methodical._unsafecsharp__speed_dbgunsafe_6__speed_dbgunsafe_6_._unsafecsharp__speed_dbgunsafe_6__speed_dbgunsafe_6_cmd\r\nJIT_Methodical._fp_exgen_200w1d_01_cs_ro_200w1d_01_cs_ro_._fp_exgen_200w1d_01_cs_ro_200w1d_01_cs_ro_cmd\r\nJIT_Methodical._explicit_coverage_seq_gc_obj_1_d_seq_gc_obj_1_d_._explicit_coverage_seq_gc_obj_1_d_seq_gc_obj_1_d_cmd\r\nJIT_Methodical._divrem_rem_decimalrem_cs_ro_decimalrem_cs_ro_._divrem_rem_decimalrem_cs_ro_decimalrem_cs_ro_cmd\r\nJIT_Methodical._explicit_coverage_seq_long_1_r_seq_long_1_r_._explicit_coverage_seq_long_1_r_seq_long_1_r_cmd\r\nJIT_Methodical._divrem_rem_r8rem_cs_do_r8rem_cs_do_._divrem_rem_r8rem_cs_do_r8rem_cs_do_cmd\r\nJIT_Methodical._fp_exgen_10w250d_cs_do_10w250d_cs_do_._fp_exgen_10w250d_cs_do_10w250d_cs_do_cmd\r\nJIT_Methodical._explicit_coverage_expl_gc_byte_1_r_expl_gc_byte_1_r_._explicit_coverage_expl_gc_byte_1_r_expl_gc_byte_1_r_cmd\r\nJIT_Methodical._explicit_coverage_expl_gc_int_1_d_expl_gc_int_1_d_._explicit_coverage_expl_gc_int_1_d_expl_gc_int_1_d_cmd\r\nJIT_Methodical._MDArray_InnerProd_doublearr_cs_ro_doublearr_cs_ro_._MDArray_InnerProd_doublearr_cs_ro_doublearr_cs_ro_cmd\r\nJIT_Methodical._MDArray_GaussJordan_structarr_cs_ro_structarr_cs_ro_._MDArray_GaussJordan_structarr_cs_ro_structarr_cs_ro_cmd\r\nJIT_Methodical._explicit_coverage_expl_gc_float_1_d_expl_gc_float_1_d_._explicit_coverage_expl_gc_float_1_d_expl_gc_float_1_d_cmd\r\nJIT_Methodical._explicit_coverage_expl_short_1_r_expl_short_1_r_._explicit_coverage_expl_short_1_r_expl_short_1_r_cmd\r\nJIT_Methodical._MDArray_DataTypes_double_cs_do_double_cs_do_._MDArray_DataTypes_double_cs_do_double_cs_do_cmd\r\nJIT_Methodical._Arrays_lcs__speed_rellcsmixed__speed_rellcsmixed_._Arrays_lcs__speed_rellcsmixed__speed_rellcsmixed_cmd\r\nJIT_Methodical._explicit_coverage_expl_long_1_r_expl_long_1_r_._explicit_coverage_expl_long_1_r_expl_long_1_r_cmd\r\nJIT_Methodical._NaN_r8NaNdiv_cs_do_r8NaNdiv_cs_do_._NaN_r8NaNdiv_cs_do_r8NaNdiv_cs_do_cmd\r\nJIT_Methodical._explicit_coverage_expl_val_1_d_expl_val_1_d_._explicit_coverage_expl_val_1_d_expl_val_1_d_cmd\r\nJIT_Methodical._divrem_rem_overldrem_cs_ro_overldrem_cs_ro_._divrem_rem_overldrem_cs_ro_overldrem_cs_ro_cmd\r\nJIT_Methodical._MDArray_basics_jaggedarr_cs_ro_jaggedarr_cs_ro_._MDArray_basics_jaggedarr_cs_ro_jaggedarr_cs_ro_cmd\r\nJIT_Methodical._explicit_coverage_seq_float_1_r_seq_float_1_r_._explicit_coverage_seq_float_1_r_seq_float_1_r_cmd\r\nJIT_Methodical._fp_exgen_5w1d_01_cs_do_5w1d_01_cs_do_._fp_exgen_5w1d_01_cs_do_5w1d_01_cs_do_cmd\r\nJIT_Methodical._MDArray_InnerProd_stringarr_cs_ro_stringarr_cs_ro_._MDArray_InnerProd_stringarr_cs_ro_stringarr_cs_ro_cmd\r\nJIT_Methodical._refany__il_relarray1__il_relarray1_._refany__il_relarray1__il_relarray1_cmd\r\nJIT_Methodical._NaN_r4NaNmul_cs_ro_r4NaNmul_cs_ro_._NaN_r4NaNmul_cs_ro_r4NaNmul_cs_ro_cmd\r\nJIT_Methodical._NaN_r4NaNadd_cs_ro_r4NaNadd_cs_ro_._NaN_r4NaNadd_cs_ro_r4NaNadd_cs_ro_cmd\r\nJIT_Methodical._explicit_coverage_expl_int_1_r_expl_int_1_r_._explicit_coverage_expl_int_1_r_expl_int_1_r_cmd\r\nJIT_Methodical._unsafecsharp__speed_relunsafe_5__speed_relunsafe_5_._unsafecsharp__speed_relunsafe_5__speed_relunsafe_5_cmd\r\nJIT_Methodical._unsafecsharp__speed_relunsafe_4__speed_relunsafe_4_._unsafecsharp__speed_relunsafe_4__speed_relunsafe_4_cmd\r\nJIT_Methodical._MDArray_InnerProd_stringarr_cs_do_stringarr_cs_do_._MDArray_InnerProd_stringarr_cs_do_stringarr_cs_do_cmd\r\nJIT_Methodical._explicit_coverage_seq_gc_float_1_d_seq_gc_float_1_d_._explicit_coverage_seq_gc_float_1_d_seq_gc_float_1_d_cmd\r\nJIT_Methodical._fp_exgen_10w5d_cs_ro_10w5d_cs_ro_._fp_exgen_10w5d_cs_ro_10w5d_cs_ro_cmd\r\nJIT_Methodical._explicit_coverage_expl_obj_1_d_expl_obj_1_d_._explicit_coverage_expl_obj_1_d_expl_obj_1_d_cmd\r\nJIT_Methodical._divrem_rem_i8rem_cs_do_i8rem_cs_do_._divrem_rem_i8rem_cs_do_i8rem_cs_do_cmd\r\nJIT_Methodical._unsafecsharp__speed_relunsafe_6__speed_relunsafe_6_._unsafecsharp__speed_relunsafe_6__speed_relunsafe_6_cmd\r\nJIT_Methodical._divrem_div_i4div_cs_ro_i4div_cs_ro_._divrem_div_i4div_cs_ro_i4div_cs_ro_cmd\r\nJIT_Methodical._MDArray_InnerProd_structarr_cs_ro_structarr_cs_ro_._MDArray_InnerProd_structarr_cs_ro_structarr_cs_ro_cmd\r\nJIT_Methodical._unsafecsharp__speed_dbgunsafe_0__speed_dbgunsafe_0_._unsafecsharp__speed_dbgunsafe_0__speed_dbgunsafe_0_cmd\r\nJIT_Methodical._explicit_coverage_expl_short_1_d_expl_short_1_d_._explicit_coverage_expl_short_1_d_expl_short_1_d_cmd\r\nJIT_Methodical._MDArray_DataTypes_uint_cs_do_uint_cs_do_._MDArray_DataTypes_uint_cs_do_uint_cs_do_cmd\r\nJIT_Methodical._explicit_coverage_expl_byte_1_d_expl_byte_1_d_._explicit_coverage_expl_byte_1_d_expl_byte_1_d_cmd\r\nJIT_Methodical._NaN_r8NaNsub_cs_ro_r8NaNsub_cs_ro_._NaN_r8NaNsub_cs_ro_r8NaNsub_cs_ro_cmd\r\nJIT_Methodical._explicit_coverage_seq_byte_1_r_seq_byte_1_r_._explicit_coverage_seq_byte_1_r_seq_byte_1_r_cmd\r\nJIT_Methodical._divrem_div_u4div_cs_ro_u4div_cs_ro_._divrem_div_u4div_cs_ro_u4div_cs_ro_cmd\r\nJIT_Methodical._tailcall__il_reltest_implicit__il_reltest_implicit_._tailcall__il_reltest_implicit__il_reltest_implicit_cmd\r\nJIT_Methodical._eh_interactions_throw2dimarray_r_throw2dimarray_r_._eh_interactions_throw2dimarray_r_throw2dimarray_r_cmd\r\nJIT_Methodical._divrem_rem_i4rem_cs_do_i4rem_cs_do_._divrem_rem_i4rem_cs_do_i4rem_cs_do_cmd\r\nJIT_Methodical._NaN_r4NaNadd_cs_do_r4NaNadd_cs_do_._NaN_r4NaNadd_cs_do_r4NaNadd_cs_do_cmd\r\nJIT_Methodical._unsafecsharp__speed_dbgunsafe_3__speed_dbgunsafe_3_._unsafecsharp__speed_dbgunsafe_3__speed_dbgunsafe_3_cmd\r\nJIT_Methodical._MDArray_basics_structarr_cs_ro_structarr_cs_ro_._MDArray_basics_structarr_cs_ro_structarr_cs_ro_cmd\r\nJIT_Methodical._MDArray_DataTypes_ulong_cs_ro_ulong_cs_ro_._MDArray_DataTypes_ulong_cs_ro_ulong_cs_ro_cmd\r\nJIT_Methodical._explicit_coverage_seq_gc_val_1_r_seq_gc_val_1_r_._explicit_coverage_seq_gc_val_1_r_seq_gc_val_1_r_cmd\r\nJIT_Methodical._NaN_r8NaNadd_cs_ro_r8NaNadd_cs_ro_._NaN_r8NaNadd_cs_ro_r8NaNadd_cs_ro_cmd\r\nJIT_Methodical._divrem_rem_r4rem_cs_ro_r4rem_cs_ro_._divrem_rem_r4rem_cs_ro_r4rem_cs_ro_cmd\r\nJIT_Methodical._divrem_div_i8div_cs_ro_i8div_cs_ro_._divrem_div_i8div_cs_ro_i8div_cs_ro_cmd\r\nJIT_Methodical._MDArray_InnerProd_jaggedarr_cs_ro_jaggedarr_cs_ro_._MDArray_InnerProd_jaggedarr_cs_ro_jaggedarr_cs_ro_cmd\r\nJIT_Methodical._divrem_rem_i4rem_cs_ro_i4rem_cs_ro_._divrem_rem_i4rem_cs_ro_i4rem_cs_ro_cmd\r\nJIT_Methodical._fp_exgen_200w1d_02_cs_ro_200w1d_02_cs_ro_._fp_exgen_200w1d_02_cs_ro_200w1d_02_cs_ro_cmd\r\nJIT_Methodical._MDArray_DataTypes_uint_cs_ro_uint_cs_ro_._MDArray_DataTypes_uint_cs_ro_uint_cs_ro_cmd\r\nJIT_Methodical._explicit_coverage_expl_gc_short_1_r_expl_gc_short_1_r_._explicit_coverage_expl_gc_short_1_r_expl_gc_short_1_r_cmd\r\nJIT_Methodical._unsafecsharp__speed_relunsafe_2__speed_relunsafe_2_._unsafecsharp__speed_relunsafe_2__speed_relunsafe_2_cmd\r\nJIT_Methodical._MDArray_DataTypes_int_cs_do_int_cs_do_._MDArray_DataTypes_int_cs_do_int_cs_do_cmd\r\nJIT_Methodical._divrem_rem_i8rem_cs_ro_i8rem_cs_ro_._divrem_rem_i8rem_cs_ro_i8rem_cs_ro_cmd\r\nJIT_Methodical._MDArray_InnerProd_doublearr_cs_do_doublearr_cs_do_._MDArray_InnerProd_doublearr_cs_do_doublearr_cs_do_cmd\r\nJIT_Methodical._divrem_rem_overldrem_cs_do_overldrem_cs_do_._divrem_rem_overldrem_cs_do_overldrem_cs_do_cmd\r\nJIT_Methodical._fp_exgen_3w1d_02_cs_ro_3w1d_02_cs_ro_._fp_exgen_3w1d_02_cs_ro_3w1d_02_cs_ro_cmd\r\nJIT_Methodical._explicit_coverage_seq_short_1_r_seq_short_1_r_._explicit_coverage_seq_short_1_r_seq_short_1_r_cmd\r\nJIT_Methodical._MDArray_basics_classarr_cs_do_classarr_cs_do_._MDArray_basics_classarr_cs_do_classarr_cs_do_cmd\r\nJIT_Methodical._MDArray_DataTypes_char_cs_do_char_cs_do_._MDArray_DataTypes_char_cs_do_char_cs_do_cmd\r\nJIT_Methodical._explicit_coverage_seq_gc_byte_1_r_seq_gc_byte_1_r_._explicit_coverage_seq_gc_byte_1_r_seq_gc_byte_1_r_cmd\r\nJIT_Methodical._unsafecsharp__speed_dbgunsafe_4__speed_dbgunsafe_4_._unsafecsharp__speed_dbgunsafe_4__speed_dbgunsafe_4_cmd\r\nJIT_Methodical._explicit_coverage_expl_gc_long_1_d_expl_gc_long_1_d_._explicit_coverage_expl_gc_long_1_d_expl_gc_long_1_d_cmd\r\nJIT_Methodical._explicit_coverage_expl_gc_obj_1_r_expl_gc_obj_1_r_._explicit_coverage_expl_gc_obj_1_r_expl_gc_obj_1_r_cmd\r\nJIT_Methodical._explicit_coverage_seq_val_1_d_seq_val_1_d_._explicit_coverage_seq_val_1_d_seq_val_1_d_cmd\r\nJIT_Methodical._NaN_r4NaNsub_cs_do_r4NaNsub_cs_do_._NaN_r4NaNsub_cs_do_r4NaNsub_cs_do_cmd\r\nJIT_Methodical._fp_exgen_5w1d_03_cs_ro_5w1d_03_cs_ro_._fp_exgen_5w1d_03_cs_ro_5w1d_03_cs_ro_cmd\r\nJIT_Methodical._MDArray_DataTypes_bool_cs_ro_bool_cs_ro_._MDArray_DataTypes_bool_cs_ro_bool_cs_ro_cmd\r\nJIT_Methodical._ELEMENT_TYPE_IU__il_dbgptr__il_dbgptr_._ELEMENT_TYPE_IU__il_dbgptr__il_dbgptr_cmd\r\nJIT_Methodical._NaN_r8NaNdiv_cs_ro_r8NaNdiv_cs_ro_._NaN_r8NaNdiv_cs_ro_r8NaNdiv_cs_ro_cmd\r\nJIT_Methodical._refany__il_relarray2__il_relarray2_._refany__il_relarray2__il_relarray2_cmd\r\nJIT_Methodical._divrem_div_u8div_cs_do_u8div_cs_do_._divrem_div_u8div_cs_do_u8div_cs_do_cmd\r\nJIT_Methodical._explicit_coverage_expl_gc_double_1_d_expl_gc_double_1_d_._explicit_coverage_expl_gc_double_1_d_expl_gc_double_1_d_cmd\r\nJIT_Methodical._explicit_coverage_expl_gc_float_1_r_expl_gc_float_1_r_._explicit_coverage_expl_gc_float_1_r_expl_gc_float_1_r_cmd\r\nJIT_Methodical._divrem_rem_r4rem_cs_do_r4rem_cs_do_._divrem_rem_r4rem_cs_do_r4rem_cs_do_cmd\r\nJIT_Methodical._explicit_coverage_seq_gc_double_1_d_seq_gc_double_1_d_._explicit_coverage_seq_gc_double_1_d_seq_gc_double_1_d_cmd\r\nJIT_Methodical._explicit_coverage_seq_gc_long_1_r_seq_gc_long_1_r_._explicit_coverage_seq_gc_long_1_r_seq_gc_long_1_r_cmd\r\nJIT_Methodical._NaN_r8NaNrem_cs_do_r8NaNrem_cs_do_._NaN_r8NaNrem_cs_do_r8NaNrem_cs_do_cmd\r\nJIT_Methodical._MDArray_basics_doublearr_cs_ro_doublearr_cs_ro_._MDArray_basics_doublearr_cs_ro_doublearr_cs_ro_cmd\r\nJIT_Methodical._MDArray_InnerProd_classarr_cs_ro_classarr_cs_ro_._MDArray_InnerProd_classarr_cs_ro_classarr_cs_ro_cmd\r\nJIT_Methodical._MDArray_DataTypes_ushort_cs_ro_ushort_cs_ro_._MDArray_DataTypes_ushort_cs_ro_ushort_cs_ro_cmd\r\nJIT_Methodical._MDArray_DataTypes_bool_cs_do_bool_cs_do_._MDArray_DataTypes_bool_cs_do_bool_cs_do_cmd\r\nJIT_Methodical._MDArray_GaussJordan_classarr_cs_do_classarr_cs_do_._MDArray_GaussJordan_classarr_cs_do_classarr_cs_do_cmd\r\nJIT_Methodical._explicit_coverage_seq_gc_int_1_d_seq_gc_int_1_d_._explicit_coverage_seq_gc_int_1_d_seq_gc_int_1_d_cmd\r\nJIT_Methodical._explicit_coverage_expl_val_1_r_expl_val_1_r_._explicit_coverage_expl_val_1_r_expl_val_1_r_cmd\r\nJIT_Methodical._explicit_coverage_expl_byte_1_r_expl_byte_1_r_._explicit_coverage_expl_byte_1_r_expl_byte_1_r_cmd\r\nJIT_Methodical._explicit_coverage_seq_float_1_d_seq_float_1_d_._explicit_coverage_seq_float_1_d_seq_float_1_d_cmd\r\nJIT_Methodical._explicit_coverage_seq_gc_int_1_r_seq_gc_int_1_r_._explicit_coverage_seq_gc_int_1_r_seq_gc_int_1_r_cmd\r\nJIT_Methodical._explicit_coverage_seq_double_1_r_seq_double_1_r_._explicit_coverage_seq_double_1_r_seq_double_1_r_cmd\r\nJIT_Methodical._MDArray_DataTypes_byte_cs_do_byte_cs_do_._MDArray_DataTypes_byte_cs_do_byte_cs_do_cmd\r\nJIT_Methodical._divrem_div_u8div_cs_ro_u8div_cs_ro_._divrem_div_u8div_cs_ro_u8div_cs_ro_cmd\r\nJIT_Methodical._explicit_coverage_expl_double_1_d_expl_double_1_d_._explicit_coverage_expl_double_1_d_expl_double_1_d_cmd\r\nJIT_Methodical._explicit_coverage_seq_gc_byte_1_d_seq_gc_byte_1_d_._explicit_coverage_seq_gc_byte_1_d_seq_gc_byte_1_d_cmd\r\nJIT_Methodical._NaN_r8NaNmul_cs_do_r8NaNmul_cs_do_._NaN_r8NaNmul_cs_do_r8NaNmul_cs_do_cmd\r\nJIT_Methodical._MDArray_DataTypes_long_cs_do_long_cs_do_._MDArray_DataTypes_long_cs_do_long_cs_do_cmd\r\nJIT_Methodical._refany__il_relarray3__il_relarray3_._refany__il_relarray3__il_relarray3_cmd\r\nJIT_Methodical._unsafecsharp__speed_relunsafe_1__speed_relunsafe_1_._unsafecsharp__speed_relunsafe_1__speed_relunsafe_1_cmd\r\nJIT_Methodical._divrem_div_r8div_cs_ro_r8div_cs_ro_._divrem_div_r8div_cs_ro_r8div_cs_ro_cmd\r\nJIT_Methodical._explicit_coverage_seq_val_1_r_seq_val_1_r_._explicit_coverage_seq_val_1_r_seq_val_1_r_cmd\r\nJIT_Methodical._explicit_coverage_seq_byte_1_d_seq_byte_1_d_._explicit_coverage_seq_byte_1_d_seq_byte_1_d_cmd\r\nJIT_Methodical._MDArray_DataTypes_float_cs_ro_float_cs_ro_._MDArray_DataTypes_float_cs_ro_float_cs_ro_cmd\r\nJIT_Methodical._explicit_coverage_expl_gc_long_1_r_expl_gc_long_1_r_._explicit_coverage_expl_gc_long_1_r_expl_gc_long_1_r_cmd\r\nJIT_Methodical._fp_exgen_1000w1d_cs_do_1000w1d_cs_do_._fp_exgen_1000w1d_cs_do_1000w1d_cs_do_cmd\r\nJIT_Methodical._explicit_coverage_seq_gc_long_1_d_seq_gc_long_1_d_._explicit_coverage_seq_gc_long_1_d_seq_gc_long_1_d_cmd\r\nJIT_Methodical._fp_exgen_5w1d_06_cs_ro_5w1d_06_cs_ro_._fp_exgen_5w1d_06_cs_ro_5w1d_06_cs_ro_cmd\r\nJIT_Methodical._MDArray_DataTypes_byte_cs_ro_byte_cs_ro_._MDArray_DataTypes_byte_cs_ro_byte_cs_ro_cmd\r\nJIT_Methodical._divrem_div_i8div_cs_do_i8div_cs_do_._divrem_div_i8div_cs_do_i8div_cs_do_cmd\r\nJIT_Methodical._VT_etc__speed_dbgknight__speed_dbgknight_._VT_etc__speed_dbgknight__speed_dbgknight_cmd\r\nJIT_Methodical._MDArray_DataTypes_char_cs_ro_char_cs_ro_._MDArray_DataTypes_char_cs_ro_char_cs_ro_cmd\r\nJIT_Methodical._unsafecsharp__speed_dbgunsafe_5__speed_dbgunsafe_5_._unsafecsharp__speed_dbgunsafe_5__speed_dbgunsafe_5_cmd\r\nJIT_Methodical._MDArray_DataTypes_double_cs_ro_double_cs_ro_._MDArray_DataTypes_double_cs_ro_double_cs_ro_cmd\r\nJIT_Methodical._MDArray_DataTypes_ulong_cs_do_ulong_cs_do_._MDArray_DataTypes_ulong_cs_do_ulong_cs_do_cmd\r\nJIT_Methodical._NaN_r8NaNadd_cs_do_r8NaNadd_cs_do_._NaN_r8NaNadd_cs_do_r8NaNadd_cs_do_cmd\r\nJIT_Methodical._explicit_coverage_expl_gc_obj_1_d_expl_gc_obj_1_d_._explicit_coverage_expl_gc_obj_1_d_expl_gc_obj_1_d_cmd\r\nJIT_Methodical._divrem_div_u4div_cs_do_u4div_cs_do_._divrem_div_u4div_cs_do_u4div_cs_do_cmd\r\nJIT_Methodical._MDArray_GaussJordan_plainarr_cs_ro_plainarr_cs_ro_._MDArray_GaussJordan_plainarr_cs_ro_plainarr_cs_ro_cmd\r\nJIT_Methodical._explicit_coverage_expl_gc_byte_1_d_expl_gc_byte_1_d_._explicit_coverage_expl_gc_byte_1_d_expl_gc_byte_1_d_cmd\r\nJIT_Methodical._divrem_rem_u4rem_cs_ro_u4rem_cs_ro_._divrem_rem_u4rem_cs_ro_u4rem_cs_ro_cmd\r\nJIT_Methodical._VT_etc__il_relknight__il_relknight_._VT_etc__il_relknight__il_relknight_cmd\r\nJIT_Methodical._explicit_coverage_expl_float_1_d_expl_float_1_d_._explicit_coverage_expl_float_1_d_expl_float_1_d_cmd\r\nJIT_Methodical._explicit_coverage_expl_gc_short_1_d_expl_gc_short_1_d_._explicit_coverage_expl_gc_short_1_d_expl_gc_short_1_d_cmd\r\nJIT_Methodical._divrem_div_r4div_cs_ro_r4div_cs_ro_._divrem_div_r4div_cs_ro_r4div_cs_ro_cmd\r\nJIT_Methodical._divrem_div_overlddiv_cs_do_overlddiv_cs_do_._divrem_div_overlddiv_cs_do_overlddiv_cs_do_cmd\r\nJIT_Methodical._NaN_r4NaNmul_cs_do_r4NaNmul_cs_do_._NaN_r4NaNmul_cs_do_r4NaNmul_cs_do_cmd\r\nJIT_Methodical._explicit_coverage_expl_float_1_r_expl_float_1_r_._explicit_coverage_expl_float_1_r_expl_float_1_r_cmd\r\nJIT_Methodical._divrem_rem_decimalrem_cs_do_decimalrem_cs_do_._divrem_rem_decimalrem_cs_do_decimalrem_cs_do_cmd\r\nJIT_Methodical._divrem_div_r8div_cs_do_r8div_cs_do_._divrem_div_r8div_cs_do_r8div_cs_do_cmd\r\nJIT_Methodical._explicit_coverage_expl_gc_val_1_r_expl_gc_val_1_r_._explicit_coverage_expl_gc_val_1_r_expl_gc_val_1_r_cmd\r\nJIT_Methodical._MDArray_basics_stringarr_cs_do_stringarr_cs_do_._MDArray_basics_stringarr_cs_do_stringarr_cs_do_cmd\r\nJIT_Methodical._MDArray_GaussJordan_jaggedarr_cs_ro_jaggedarr_cs_ro_._MDArray_GaussJordan_jaggedarr_cs_ro_jaggedarr_cs_ro_cmd\r\nJIT_Methodical._MDArray_InnerProd_classarr_cs_do_classarr_cs_do_._MDArray_InnerProd_classarr_cs_do_classarr_cs_do_cmd\r\nJIT_Methodical._unsafecsharp__speed_relunsafe_0__speed_relunsafe_0_._unsafecsharp__speed_relunsafe_0__speed_relunsafe_0_cmd\r\nJIT_Methodical._explicit_coverage_expl_long_1_d_expl_long_1_d_._explicit_coverage_expl_long_1_d_expl_long_1_d_cmd\r\nJIT_Methodical._explicit_coverage_seq_long_1_d_seq_long_1_d_._explicit_coverage_seq_long_1_d_seq_long_1_d_cmd\r\nJIT_Methodical._explicit_coverage_seq_obj_1_r_seq_obj_1_r_._explicit_coverage_seq_obj_1_r_seq_obj_1_r_cmd\r\nJIT_Methodical._MDArray_basics_doublearr_cs_do_doublearr_cs_do_._MDArray_basics_doublearr_cs_do_doublearr_cs_do_cmd\r\nJIT_Methodical._fp_exgen_5w1d_03_cs_do_5w1d_03_cs_do_._fp_exgen_5w1d_03_cs_do_5w1d_03_cs_do_cmd\r\nJIT_Methodical._fp_exgen_3w1d_02_cs_do_3w1d_02_cs_do_._fp_exgen_3w1d_02_cs_do_3w1d_02_cs_do_cmd\r\nJIT_Methodical._MDArray_GaussJordan_structarr_cs_do_structarr_cs_do_._MDArray_GaussJordan_structarr_cs_do_structarr_cs_do_cmd\r\nJIT_Methodical._MDArray_DataTypes_decimal_cs_do_decimal_cs_do_._MDArray_DataTypes_decimal_cs_do_decimal_cs_do_cmd\r\nJIT_Methodical._fp_exgen_5w1d_06_cs_do_5w1d_06_cs_do_._fp_exgen_5w1d_06_cs_do_5w1d_06_cs_do_cmd\r\nJIT_Methodical._explicit_coverage_expl_gc_int_1_r_expl_gc_int_1_r_._explicit_coverage_expl_gc_int_1_r_expl_gc_int_1_r_cmd\r\nJIT_Methodical._MDArray_InnerProd_structarr_cs_do_structarr_cs_do_._MDArray_InnerProd_structarr_cs_do_structarr_cs_do_cmd\r\nJIT_Methodical._MDArray_DataTypes_int_cs_ro_int_cs_ro_._MDArray_DataTypes_int_cs_ro_int_cs_ro_cmd\r\nJIT_Methodical._divrem_rem_r8rem_cs_ro_r8rem_cs_ro_._divrem_rem_r8rem_cs_ro_r8rem_cs_ro_cmd\r\nJIT_Methodical._explicit_coverage_seq_double_1_d_seq_double_1_d_._explicit_coverage_seq_double_1_d_seq_double_1_d_cmd\r\nJIT_Methodical._fp_exgen_10w5d_cs_do_10w5d_cs_do_._fp_exgen_10w5d_cs_do_10w5d_cs_do_cmd\r\nJIT_Methodical._NaN_r4NaNdiv_cs_ro_r4NaNdiv_cs_ro_._NaN_r4NaNdiv_cs_ro_r4NaNdiv_cs_ro_cmd\r\nJIT_Methodical._MDArray_GaussJordan_classarr_cs_ro_classarr_cs_ro_._MDArray_GaussJordan_classarr_cs_ro_classarr_cs_ro_cmd\r\nJIT_Methodical._MDArray_DataTypes_float_cs_do_float_cs_do_._MDArray_DataTypes_float_cs_do_float_cs_do_cmd\r\nJIT_Methodical._explicit_coverage_seq_gc_short_1_d_seq_gc_short_1_d_._explicit_coverage_seq_gc_short_1_d_seq_gc_short_1_d_cmd\r\nJIT_Methodical._MDArray_basics_structarr_cs_do_structarr_cs_do_._MDArray_basics_structarr_cs_do_structarr_cs_do_cmd\r\nJIT_Methodical._flowgraph_dev10_bug679955_volatileLocal1_volatileLocal1_._flowgraph_dev10_bug679955_volatileLocal1_volatileLocal1_cmd\r\nJIT_Methodical._MDArray_GaussJordan_jaggedarr_cs_do_jaggedarr_cs_do_._MDArray_GaussJordan_jaggedarr_cs_do_jaggedarr_cs_do_cmd\r\nJIT_Methodical._MDArray_basics_classarr_cs_ro_classarr_cs_ro_._MDArray_basics_classarr_cs_ro_classarr_cs_ro_cmd\r\nJIT_Methodical._MDArray_DataTypes_decimal_cs_ro_decimal_cs_ro_._MDArray_DataTypes_decimal_cs_ro_decimal_cs_ro_cmd\r\nJIT_Methodical._NaN_r4NaNrem_cs_ro_r4NaNrem_cs_ro_._NaN_r4NaNrem_cs_ro_r4NaNrem_cs_ro_cmd\r\nJIT_Methodical._divrem_rem_u4rem_cs_do_u4rem_cs_do_._divrem_rem_u4rem_cs_do_u4rem_cs_do_cmd\r\nJIT_Methodical._unsafecsharp__speed_dbgunsafe_1__speed_dbgunsafe_1_._unsafecsharp__speed_dbgunsafe_1__speed_dbgunsafe_1_cmd\r\nJIT_Methodical._MDArray_basics_stringarr_cs_ro_stringarr_cs_ro_._MDArray_basics_stringarr_cs_ro_stringarr_cs_ro_cmd\r\nJIT_Methodical._unsafecsharp__speed_relunsafe_3__speed_relunsafe_3_._unsafecsharp__speed_relunsafe_3__speed_relunsafe_3_cmd\r\nJIT_Methodical._fp_exgen_200w1d_01_cs_do_200w1d_01_cs_do_._fp_exgen_200w1d_01_cs_do_200w1d_01_cs_do_cmd\r\nJIT_Methodical._MDArray_InnerProd_intarr_cs_ro_intarr_cs_ro_._MDArray_InnerProd_intarr_cs_ro_intarr_cs_ro_cmd\r\nJIT_Methodical._NaN_r4NaNrem_cs_do_r4NaNrem_cs_do_._NaN_r4NaNrem_cs_do_r4NaNrem_cs_do_cmd\r\nJIT_Methodical._MDArray_DataTypes_sbyte_cs_ro_sbyte_cs_ro_._MDArray_DataTypes_sbyte_cs_ro_sbyte_cs_ro_cmd\r\nJIT_Methodical._unsafecsharp__speed_dbgunsafe_2__speed_dbgunsafe_2_._unsafecsharp__speed_dbgunsafe_2__speed_dbgunsafe_2_cmd\r\nJIT_Methodical._MDArray_DataTypes_ushort_cs_do_ushort_cs_do_._MDArray_DataTypes_ushort_cs_do_ushort_cs_do_cmd\r\nJIT_Methodical._flowgraph_dev10_bug679955_volatileLocal2_volatileLocal2_._flowgraph_dev10_bug679955_volatileLocal2_volatileLocal2_cmd\r\nJIT_Methodical._MDArray_GaussJordan_plainarr_cs_do_plainarr_cs_do_._MDArray_GaussJordan_plainarr_cs_do_plainarr_cs_do_cmd\r\nJIT_Methodical._explicit_coverage_seq_int_1_d_seq_int_1_d_._explicit_coverage_seq_int_1_d_seq_int_1_d_cmd\r\nJIT_Methodical._ELEMENT_TYPE_IU__il_relptr__il_relptr_._ELEMENT_TYPE_IU__il_relptr__il_relptr_cmd\r\nJIT_Methodical._VT_etc__speed_relknight__speed_relknight_._VT_etc__speed_relknight__speed_relknight_cmd\r\nJIT_Methodical._NaN_r4NaNdiv_cs_do_r4NaNdiv_cs_do_._NaN_r4NaNdiv_cs_do_r4NaNdiv_cs_do_cmd\r\nJIT_Methodical._NaN_r8NaNsub_cs_do_r8NaNsub_cs_do_._NaN_r8NaNsub_cs_do_r8NaNsub_cs_do_cmd\r\nJIT_Methodical._NaN_r8NaNmul_cs_ro_r8NaNmul_cs_ro_._NaN_r8NaNmul_cs_ro_r8NaNmul_cs_ro_cmd\r\nJIT_Methodical._explicit_coverage_expl_obj_1_r_expl_obj_1_r_._explicit_coverage_expl_obj_1_r_expl_obj_1_r_cmd\r\nJIT_Methodical._divrem_div_decimaldiv_cs_do_decimaldiv_cs_do_._divrem_div_decimaldiv_cs_do_decimaldiv_cs_do_cmd\r\nJIT_Methodical._explicit_coverage_seq_gc_obj_1_r_seq_gc_obj_1_r_._explicit_coverage_seq_gc_obj_1_r_seq_gc_obj_1_r_cmd\r\nJIT_Methodical._MDArray_DataTypes_short_cs_do_short_cs_do_._MDArray_DataTypes_short_cs_do_short_cs_do_cmd\r\nJIT_Methodical._explicit_coverage_expl_int_1_d_expl_int_1_d_._explicit_coverage_expl_int_1_d_expl_int_1_d_cmd\r\nJIT_Methodical._explicit_coverage_seq_gc_short_1_r_seq_gc_short_1_r_._explicit_coverage_seq_gc_short_1_r_seq_gc_short_1_r_cmd\r\nJIT_Methodical._MDArray_basics_jaggedarr_cs_do_jaggedarr_cs_do_._MDArray_basics_jaggedarr_cs_do_jaggedarr_cs_do_cmd\r\nJIT_Methodical._divrem_rem_u8rem_cs_do_u8rem_cs_do_._divrem_rem_u8rem_cs_do_u8rem_cs_do_cmd\r\nJIT_Methodical._MDArray_InnerProd_jaggedarr_cs_do_jaggedarr_cs_do_._MDArray_InnerProd_jaggedarr_cs_do_jaggedarr_cs_do_cmd\r\nJIT_Methodical._divrem_rem_u8rem_cs_ro_u8rem_cs_ro_._divrem_rem_u8rem_cs_ro_u8rem_cs_ro_cmd\r\nJIT_Methodical._MDArray_InnerProd_intarr_cs_do_intarr_cs_do_._MDArray_InnerProd_intarr_cs_do_intarr_cs_do_cmd\r\nJIT_Methodical._explicit_coverage_seq_int_1_r_seq_int_1_r_._explicit_coverage_seq_int_1_r_seq_int_1_r_cmd\r\nJIT_Methodical._Arrays_lcs__speed_dbglcsmixed__speed_dbglcsmixed_._Arrays_lcs__speed_dbglcsmixed__speed_dbglcsmixed_cmd\r\nJIT_Methodical._fp_exgen_1000w1d_cs_ro_1000w1d_cs_ro_._fp_exgen_1000w1d_cs_ro_1000w1d_cs_ro_cmd\r\nJIT_Methodical._divrem_div_overlddiv_cs_ro_overlddiv_cs_ro_._divrem_div_overlddiv_cs_ro_overlddiv_cs_ro_cmd\r\nJIT_Methodical._MDArray_DataTypes_sbyte_cs_do_sbyte_cs_do_._MDArray_DataTypes_sbyte_cs_do_sbyte_cs_do_cmd\r\nJIT_Methodical._NaN_r4NaNsub_cs_ro_r4NaNsub_cs_ro_._NaN_r4NaNsub_cs_ro_r4NaNsub_cs_ro_cmd\r\nJIT_Methodical._MDArray_DataTypes_short_cs_ro_short_cs_ro_._MDArray_DataTypes_short_cs_ro_short_cs_ro_cmd\r\nJIT_Methodical._divrem_div_r4div_cs_do_r4div_cs_do_._divrem_div_r4div_cs_do_r4div_cs_do_cmd\r\nJIT_Methodical._explicit_coverage_seq_obj_1_d_seq_obj_1_d_._explicit_coverage_seq_obj_1_d_seq_obj_1_d_cmd\r\nJIT_Methodical._fp_exgen_200w1d_02_cs_do_200w1d_02_cs_do_._fp_exgen_200w1d_02_cs_do_200w1d_02_cs_do_cmd\r\nJIT_Methodical._explicit_coverage_seq_gc_double_1_r_seq_gc_double_1_r_._explicit_coverage_seq_gc_double_1_r_seq_gc_double_1_r_cmd\r\nJIT_Methodical._MDArray_DataTypes_long_cs_ro_long_cs_ro_._MDArray_DataTypes_long_cs_ro_long_cs_ro_cmd\r\nJIT_Methodical._divrem_div_i4div_cs_do_i4div_cs_do_._divrem_div_i4div_cs_do_i4div_cs_do_cmd\r\nJIT_Methodical._divrem_div_decimaldiv_cs_ro_decimaldiv_cs_ro_._divrem_div_decimaldiv_cs_ro_decimaldiv_cs_ro_cmd\r\nJIT_Methodical._explicit_coverage_expl_double_1_r_expl_double_1_r_._explicit_coverage_expl_double_1_r_expl_double_1_r_cmd\r\nJIT_Methodical._explicit_coverage_expl_gc_val_1_d_expl_gc_val_1_d_._explicit_coverage_expl_gc_val_1_d_expl_gc_val_1_d_cmd\r\nJIT_Methodical._explicit_coverage_seq_short_1_d_seq_short_1_d_._explicit_coverage_seq_short_1_d_seq_short_1_d_cmd\r\nJIT_Methodical._NaN_r8NaNrem_cs_ro_r8NaNrem_cs_ro_._NaN_r8NaNrem_cs_ro_r8NaNrem_cs_ro_cmd\r\nJIT_Methodical._fp_exgen_10w250d_cs_ro_10w250d_cs_ro_._fp_exgen_10w250d_cs_ro_10w250d_cs_ro_cmd\r\nJIT_Methodical._tailcall__il_dbgtest_implicit__il_dbgtest_implicit_._tailcall__il_dbgtest_implicit__il_dbgtest_implicit_cmd\r\nJIT_Methodical._explicit_coverage_expl_gc_double_1_r_expl_gc_double_1_r_._explicit_coverage_expl_gc_double_1_r_expl_gc_double_1_r_cmd\r\nJIT_Methodical._fp_exgen_5w1d_01_cs_ro_5w1d_01_cs_ro_._fp_exgen_5w1d_01_cs_ro_5w1d_01_cs_ro_cmd\r\nJIT_Methodical._explicit_coverage_seq_gc_val_1_d_seq_gc_val_1_d_._explicit_coverage_seq_gc_val_1_d_seq_gc_val_1_d_cmd\r\nJIT_opt._AssertionPropagation_regression_dev10_bug573840_bug573840_bug573840_._AssertionPropagation_regression_dev10_bug573840_bug573840_bug573840_cmd\r\nJIT_opt._AssertionPropagation_NullCheckAssertion6_NullCheckAssertion6_._AssertionPropagation_NullCheckAssertion6_NullCheckAssertion6_cmd\r\nJIT_opt._Enum_hasflag_hasflag_._Enum_hasflag_hasflag_cmd\r\nJIT_opt._ETW_TailCallCases_TailCallCases_._ETW_TailCallCases_TailCallCases_cmd\r\nJIT_Performance._CodeQuality_BenchmarksGame_reverse_complement_reverse_complement_1_reverse_complement_1_._CodeQuality_BenchmarksGame_reverse_complement_reverse_complement_1_reverse_complement_1_cmd\r\nJIT_Performance._CodeQuality_Bytemark_Bytemark_Bytemark_._CodeQuality_Bytemark_Bytemark_Bytemark_cmd\r\nJIT_Performance._CodeQuality_BenchmarksGame_regex_redux_regex_redux_1_regex_redux_1_._CodeQuality_BenchmarksGame_regex_redux_regex_redux_1_regex_redux_1_cmd\r\nJIT_Performance._CodeQuality_Serialization_Serialize_Serialize_._CodeQuality_Serialization_Serialize_Serialize_cmd\r\nJIT_Performance._CodeQuality_SIMD_SeekUnroll_SeekUnroll_SeekUnroll_._CodeQuality_SIMD_SeekUnroll_SeekUnroll_SeekUnroll_cmd\r\nJIT_Performance._CodeQuality_BenchmarksGame_spectralnorm_spectralnorm_3_spectralnorm_3_._CodeQuality_BenchmarksGame_spectralnorm_spectralnorm_3_spectralnorm_3_cmd\r\nJIT_Performance._CodeQuality_Span_Indexer_Indexer_._CodeQuality_Span_Indexer_Indexer_cmd\r\nJIT_Performance._CodeQuality_BenchmarksGame_reverse_complement_reverse_complement_6_reverse_complement_6_._CodeQuality_BenchmarksGame_reverse_complement_reverse_complement_6_reverse_complement_6_cmd\r\nJIT_Performance._CodeQuality_Serialization_Deserialize_Deserialize_._CodeQuality_Serialization_Deserialize_Deserialize_cmd\r\nJIT_Performance._CodeQuality_BenchmarksGame_fasta_fasta_2_fasta_2_._CodeQuality_BenchmarksGame_fasta_fasta_2_fasta_2_cmd\r\nJIT_Performance._CodeQuality_BenchmarksGame_regex_redux_regex_redux_5_regex_redux_5_._CodeQuality_BenchmarksGame_regex_redux_regex_redux_5_regex_redux_5_cmd\r\nJIT_Performance._CodeQuality_Linq_Linq_Linq_._CodeQuality_Linq_Linq_Linq_cmd\r\nJIT_Performance._CodeQuality_Roslyn_CscBench_CscBench_._CodeQuality_Roslyn_CscBench_CscBench_cmd\r\nJIT_Performance._CodeQuality_BenchmarksGame_fasta_fasta_1_fasta_1_._CodeQuality_BenchmarksGame_fasta_fasta_1_fasta_1_cmd\r\nJIT_Performance._CodeQuality_BenchmarksGame_mandelbrot_mandelbrot_7_mandelbrot_7_._CodeQuality_BenchmarksGame_mandelbrot_mandelbrot_7_mandelbrot_7_cmd\r\nJIT_Performance._CodeQuality_BenchmarksGame_k_nucleotide_k_nucleotide_9_k_nucleotide_9_._CodeQuality_BenchmarksGame_k_nucleotide_k_nucleotide_9_k_nucleotide_9_cmd\r\nJIT_Performance._CodeQuality_V8_Crypto_Crypto_Crypto_._CodeQuality_V8_Crypto_Crypto_Crypto_cmd\r\nJIT_Regression._CLR_x86_JIT_V1_M12_Beta2_b60600_b60600_b60600_._CLR_x86_JIT_V1_M12_Beta2_b60600_b60600_b60600_cmd\r\nJIT_Regression._CLR_x86_JIT_v2_1_b609988_Desktop_b609988_b609988_._CLR_x86_JIT_v2_1_b609988_Desktop_b609988_b609988_cmd\r\nJIT_Regression._VS_ia64_JIT_V2_0_RTM_b539509_b539509_b539509_._VS_ia64_JIT_V2_0_RTM_b539509_b539509_b539509_cmd\r\nJIT_Regression._CLR_x86_JIT_V1_M12_Beta2_b79250_b79250_b79250_._CLR_x86_JIT_V1_M12_Beta2_b79250_b79250_b79250_cmd\r\nJIT_Regression._CLR_x86_JIT_V1_M12_Beta2_b72996_b72996_b72996_._CLR_x86_JIT_V1_M12_Beta2_b72996_b72996_b72996_cmd\r\nJIT_Regression._CLR_x86_JIT_V1_M12_Beta2_b34952_b34952_b34952_._CLR_x86_JIT_V1_M12_Beta2_b34952_b34952_b34952_cmd\r\nJIT_Regression._CLR_x86_JIT_V1_M14_SP1_b119538_b119538b_b119538b_._CLR_x86_JIT_V1_M14_SP1_b119538_b119538b_b119538b_cmd\r\nJIT_Regression._VS_ia64_JIT_V1_2_M01_b13691_b13691_b13691_._VS_ia64_JIT_V1_2_M01_b13691_b13691_b13691_cmd\r\nJIT_Regression._CLR_x86_JIT_V2_0_Beta2_b425314_b425314_b425314_._CLR_x86_JIT_V2_0_Beta2_b425314_b425314_b425314_cmd\r\nJIT_Regression._VS_ia64_JIT_V1_2_Beta1_b91944_b91944_b91944_._VS_ia64_JIT_V1_2_Beta1_b91944_b91944_b91944_cmd\r\nJIT_Regression._CLR_x86_JIT_v2_1_b609988_b609988_b609988_._CLR_x86_JIT_v2_1_b609988_b609988_b609988_cmd\r\nJIT_Regression._CLR_x86_JIT_dev10_b464149_b464149_b464149_._CLR_x86_JIT_dev10_b464149_b464149_b464149_cmd\r\nJIT_Regression._JitBlue_devdiv_911875_DevDiv_911875_d_DevDiv_911875_d_._JitBlue_devdiv_911875_DevDiv_911875_d_DevDiv_911875_d_cmd\r\nJIT_Regression._CLR_x86_JIT_V1_M12_Beta2_b59782_b59782_b59782_._CLR_x86_JIT_V1_M12_Beta2_b59782_b59782_b59782_cmd\r\nJIT_Regression._CLR_x86_JIT_V1_1_M1_Beta1_b140711_b140711_b140711_._CLR_x86_JIT_V1_1_M1_Beta1_b140711_b140711_b140711_cmd\r\nJIT_Regression._VS_ia64_JIT_V1_2_M02_b26496_b26496_b26496_._VS_ia64_JIT_V1_2_M02_b26496_b26496_b26496_cmd\r\nJIT_Regression._CLR_x86_JIT_V1_M12_Beta2_b51420_b51420_b51420_._CLR_x86_JIT_V1_M12_Beta2_b51420_b51420_b51420_cmd\r\nJIT_Regression._JitBlue_GitHub_12392_GitHub_12392_GitHub_12392_._JitBlue_GitHub_12392_GitHub_12392_GitHub_12392_cmd\r\nJIT_Regression._Dev11_External_dev11_135245_R3Trasher1_R3Trasher1_._Dev11_External_dev11_135245_R3Trasher1_R3Trasher1_cmd\r\nJIT_Regression._CLR_x86_JIT_V1_M12_Beta2_b70964_b70964_b70964_._CLR_x86_JIT_V1_M12_Beta2_b70964_b70964_b70964_cmd\r\nJIT_Regression._CLR_x86_JIT_V1_M09_5_PDC_b16881_b16881a_b16881a_._CLR_x86_JIT_V1_M09_5_PDC_b16881_b16881a_b16881a_cmd\r\nJIT_Regression._CLR_x86_JIT_V1_M12_Beta2_b53994_b53994_b53994_._CLR_x86_JIT_V1_M12_Beta2_b53994_b53994_b53994_cmd\r\nJIT_Regression._v4_dev10_804810_dev10_804810_dev10_804810_._v4_dev10_804810_dev10_804810_dev10_804810_cmd\r\nJIT_Regression._CLR_x86_JIT_V1_2_M01_b02345_b02345_b02345_._CLR_x86_JIT_V1_2_M01_b02345_b02345_b02345_cmd\r\nJIT_Regression._CLR_x86_JIT_V1_2_Beta1_b219940_b219940_b219940_._CLR_x86_JIT_V1_2_Beta1_b219940_b219940_b219940_cmd\r\nJIT_Regression._CLR_x86_JIT_V1_M13_RTM_b89506_b89506_b89506_._CLR_x86_JIT_V1_M13_RTM_b89506_b89506_b89506_cmd\r\nJIT_Regression._CLR_x86_JIT_V1_M12_Beta2_b78392_b78392_b78392_._CLR_x86_JIT_V1_M12_Beta2_b78392_b78392_b78392_cmd\r\nJIT_Regression._JitBlue_DevDiv_461649_DevDiv_461649_DevDiv_461649_._JitBlue_DevDiv_461649_DevDiv_461649_DevDiv_461649_cmd\r\nJIT_Regression._CLR_x86_JIT_V1_2_M01_b07900_b07900_b07900_._CLR_x86_JIT_V1_2_M01_b07900_b07900_b07900_cmd\r\nJIT_Regression._CLR_x86_JIT_V1_M12_Beta2_b72687_b72687_b72687_._CLR_x86_JIT_V1_M12_Beta2_b72687_b72687_b72687_cmd\r\nJIT_Regression._CLR_x86_JIT_V1_M11_Beta1_b27873_b27873_b27873_._CLR_x86_JIT_V1_M11_Beta1_b27873_b27873_b27873_cmd\r\nJIT_Regression._CLR_x86_JIT_V1_M13_RTM_b87284_b87284_b87284_._CLR_x86_JIT_V1_M13_RTM_b87284_b87284_b87284_cmd\r\nJIT_Regression._JitBlue_devdiv_911875_DevDiv_911875_r_DevDiv_911875_r_._JitBlue_devdiv_911875_DevDiv_911875_r_DevDiv_911875_r_cmd\r\nJIT_Regression._CLR_x86_JIT_V1_M13_RTM_b93027_b93027_b93027_._CLR_x86_JIT_V1_M13_RTM_b93027_b93027_b93027_cmd\r\nJIT_Regression._CLR_x86_JIT_V1_M12_Beta2_b56154_b56154_b56154_._CLR_x86_JIT_V1_M12_Beta2_b56154_b56154_b56154_cmd\r\nJIT_Regression._CLR_x86_JIT_V1_M13_RTM_b89600_b89600_b89600_._CLR_x86_JIT_V1_M13_RTM_b89600_b89600_b89600_cmd\r\nJIT_Regression._CLR_x86_JIT_V1_M13_RTM_b91230_b91230_b91230_._CLR_x86_JIT_V1_M13_RTM_b91230_b91230_b91230_cmd\r\nJIT_Regression._CLR_x86_JIT_V1_2_M01_b16570_b16570_b16570_._CLR_x86_JIT_V1_2_M01_b16570_b16570_b16570_cmd\r\nJIT_Regression._CLR_x86_JIT_V1_M12_Beta2_b91377_b91377_b91377_._CLR_x86_JIT_V1_M12_Beta2_b91377_b91377_b91377_cmd\r\nJIT_SIMD._VectorConvert_ro_VectorConvert_ro_._VectorConvert_ro_VectorConvert_ro_cmd\r\nJIT_SIMD._VectorCast_ro_VectorCast_ro_._VectorCast_ro_VectorCast_ro_cmd\r\nJIT_SIMD._VectorCopyToArray_ro_VectorCopyToArray_ro_._VectorCopyToArray_ro_VectorCopyToArray_ro_cmd\r\nJIT_SIMD._VectorCast_r_VectorCast_r_._VectorCast_r_VectorCast_r_cmd\r\nJIT_SIMD._BitwiseOperations_r_BitwiseOperations_r_._BitwiseOperations_r_BitwiseOperations_r_cmd\r\nJIT_SIMD._VectorArrayInit_r_VectorArrayInit_r_._VectorArrayInit_r_VectorArrayInit_r_cmd\r\nJIT_SIMD._VectorArrayInit_ro_VectorArrayInit_ro_._VectorArrayInit_ro_VectorArrayInit_ro_cmd\r\nJIT_SIMD._VectorCopyToArray_r_VectorCopyToArray_r_._VectorCopyToArray_r_VectorCopyToArray_r_cmd\r\nJIT_superpmi._superpmicollect_superpmicollect_._superpmicollect_superpmicollect_cmd\r\nLoader_binding._assemblies_generics_arilistienum_methods_methods_methods_._assemblies_generics_arilistienum_methods_methods_methods_cmd\r\nLoader_classloader._generics_Instantiation_Positive_NestedStruct01_NestedStruct01_._generics_Instantiation_Positive_NestedStruct01_NestedStruct01_cmd\r\nLoader_classloader._generics_Instantiation_Positive_NestedStruct03_NestedStruct03_._generics_Instantiation_Positive_NestedStruct03_NestedStruct03_cmd\r\nLoader_classloader._generics_Instantiation_Positive_NestedInterface07_NestedInterface07_._generics_Instantiation_Positive_NestedInterface07_NestedInterface07_cmd\r\nLoader_classloader._generics_Instantiation_Positive_NestedInterface06_NestedInterface06_._generics_Instantiation_Positive_NestedInterface06_NestedInterface06_cmd\r\nLoader_classloader._generics_Instantiation_Positive_NestedInterface05_NestedInterface05_._generics_Instantiation_Positive_NestedInterface05_NestedInterface05_cmd\r\nLoader_classloader._generics_Instantiation_Positive_NestedInterface08_NestedInterface08_._generics_Instantiation_Positive_NestedInterface08_NestedInterface08_cmd\r\nLoader_classloader._regressions_Dev12_518401_dev12_518401_dev12_518401_._regressions_Dev12_518401_dev12_518401_dev12_518401_cmd\r\nmanaged_Compilation._Compilation_Compilation_._Compilation_Compilation_cmd\r\nreadytorun_tests._mainv1_mainv1_._mainv1_mainv1_cmd\r\nreadytorun_tests._generics_generics_._generics_generics_cmd\r\nreadytorun_tests._mainv2_mainv2_._mainv2_mainv2_cmd\r\nRegressions_coreclr._0041_expl_double_1_expl_double_1_._0041_expl_double_1_expl_double_1_cmd\r\nRegressions_coreclr._0046_istype_istype_._0046_istype_istype_cmd\r\nRegressions_coreclr._0582_csgen_1_csgen_1_._0582_csgen_1_csgen_1_cmd\r\nRegressions_coreclr._9414_readonlyPrefix_readonlyPrefix_._9414_readonlyPrefix_readonlyPrefix_cmd\r\nRegressions_expl_double._expl_double_expl_double_._expl_double_expl_double_cmd\r\ntracing_eventpipetrace._eventpipetrace_eventpipetrace_._eventpipetrace_eventpipetrace_cmd\r\ntracing_eventsourcetrace._eventsourcetrace_eventsourcetrace_._eventsourcetrace_eventsourcetrace_cmd", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15932/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15818", "title": "Intrinsics tests should use JitLog to check for \"no compile\" path", "body": "Many of the SIMD tests (e.g. https://github.com/dotnet/coreclr/blob/master/tests/src/JIT/SIMD/VectorAdd.cs) use the `COMPlus_JitFuncInfoLogFile` capability, exposed by the `JitLog` class in https://github.com/dotnet/coreclr/blob/master/tests/src/JIT/SIMD/VectorUtil.cs, to check that methods that should be recognized by the JIT as intrinsics are *not* compiled.\r\n\r\nA similar capability should be used by the HardwareIntrinsics tests.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15408", "title": "[LSRA][RyuJIT] Consider merging allocating free & busy regs", "body": "Currently, LSRA iterates over all the free registers, and then iterates again if it has to find a register to spill. It would probably be more efficient, as well as more effective, to combine these passes. In particular, it would avoid the situation where we make a bad register choice for a critical `Interval` simply because it is the only free register, when it may be better to spill a less important `Interval`.\r\nIn particular, it seems like this may be the best approach to address #13735.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15408/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14607", "title": "[RyuJIT/arm64] Determine treatment of special regs", "body": "Issue #14591 was caused by an inconsistency in the register sets used by LSRA. In particular, the \"special\" registers IP0, IP1, PR, FP, andLR. In PR #14606 I have added IP0 and IP1 to the set of registers in `REG_VAR_ORDER`, and excluded the others in `availableIntRegs`. This needs to be revisited by someone more intimately familiar with the ABI to ensure that this is the correct treatment. ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14607/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/128893e65c3e748e2ac9b85cbc6e0560cf84e2e1", "message": "Merge pull request #15903 from CarolEidt/Fix545505\n\nARM: Fix morphing of struct passed on stack"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/7f8c67e5fa17aace876612942979cbec8b78229e", "message": "Merge pull request #15798 from sdmaclea/PR-ARM64-Set-Instruction-Set-Flags\n\n[Arm64] Set Instruction set flags"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/5fa59e3919366b35ea99a6268197f8d23140f38f", "message": "Merge pull request #15933 from sdmaclea/PR-ARM64-EMIT-COMPARE-ZERO\n\n[Arm64] Add compare vector to zero emitters"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/48ee74a9e7990f1ca535a58af18dd42c62c384c7", "message": "Merge pull request #15935 from sdmaclea/PR-ARM64-IRREGULAR-NOT\n\n[Arm64] Remove irregular vector not handling"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/35af7047534f420cb098f496837d1d24a9aedb78", "message": "Merge pull request #15930 from mikedn/useless-code\n\nRemove some redundant code from TreeNodeInfoInit"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/516b973b52d16843c5c7f20c53bd246d62c55d4e", "message": "Merge pull request #15749 from fiigii/tabledrive\n\nTable-driven Intel hardware intrinsic"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/2620736ac1a2cfad18f8376abd7df469b182278b", "message": "Merge pull request #15901 from tannergooding/hwintrin-fixup\n\nResolving a few issues with the HWIntrinsic code"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/6ba75f9d4d54545def9bb39a68cff45100125098", "message": "PR Feedback"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/ad48067429d3e4469a740ccc89267f4b4d14bf23", "message": "ARM: Fix morphing of struct passed on stack\n\nIf a struct is passed on the stack, it must live on the stack, unless/until we support `GT_FIELD_LIST` for these args. This is unlikely to represent a significant code quality issue, since ARM supports many register args, and this has gone undetected thus far.\nThis was exposed by tailcall stress on desktop.\nI've added a test that exposes the issue without tailcall stress (though it gets a different assert than the desktop failure).\n\nIt seemed that `fgMorphMultiregStructArg()` was the best place to fix this - and I noted that this is called for any struct that is larger than a single register. So I updated the comments to reflect that.\n\nI thought about putting the test in the JIT\\Regressions test directory, but I consider that it is addressing basic missing test coverage, so I added it to JIT\\Methodical\\structs."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/025ba02cc5ff2df9392b28fffcad4934124589b5", "message": "Merge pull request #15869 from sdmaclea/PR-ARM64-is16Byte\n\n[Arm64] Use is16Byte"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/abe3c4635e2fcfcc928aa01903b873c2fca2a614", "message": "Merge pull request #15900 from tannergooding/sse-intrinsics\n\nUpdating emitIns_R_R_A_I to not be defined for the legacy backend."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/66bd34e16bc9058263a2c5cd522ee6b59e1b4419", "message": "Merge pull request #15791 from dotnetrt/dstdstsrc\n\nRefactor emitter::IsDstDstSrcAVXInstruction and emitter::IsDstSrcSrcAVXInstruction"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/20010ab1f8ec0caa413305b72bb8ba80449be503", "message": "Merge pull request #15814 from CarolEidt/FixObj\n\nFix change to fgMorphBlockOperand"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/06055495d96093502deae21c33134338229f6554", "message": "Fix change to fgMorphBlockOperand\n\nMy recent fix broke the `DYN_BLK` case. In addition to checking that types match, we *still* need to check that the sizes match.\n\nThis was caught by desktop testing. The test cases are somewhat complex, so I created a smaller repro."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/5ee10283292a11a0480773194168f44d9c3e9fd4", "message": "Merge pull request #15724 from sdmaclea/PR-ARM64-VECTOR64\n\n[Arm64] Add Vector64 HW Intrinsic support"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/16b7c1420c08aebc594242733f4db3210af8033b", "message": "Merge pull request #15716 from CarolEidt/RefactorMinRegCount\n\nRefactor minRegCount and eliminate auto"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/a1c324833712ef0a1ba62cd88ec5d41b9f55092d", "message": "Refactor minRegCount and eliminate auto\n\nWhen building RefPositions in the TreeNodeInfoInit methods, it is very complex and messy to have the setting of the (debug-only) `minRegCandidateCount` spread all over. Instead, set them for all the RefPositions for a given node after they have been created.\n\nThis required the ability to create an iterator marking the end of the list, prior to creating the new ones.\n\nIn the process, eliminated the use of auto from lsra.cpp in the interest of strong typing, as well as avoiding the confusion of having things with `RefPosition` in their name that are actually iterators.\n\nThese changes originally caused failures with JitStressRegs because `getKillSetForNode()` had side effects - generating Kill `RefPosition`s for `MOD` & `DIV`. This is not actually necessary, and causes problems when the debug-only stress code was calling it *after* all the `RefPosition`s had been created. Also, this had the weird (existing) effect that duplicate kill `RefPosition`s were being generated in the stress case!"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/d5a9c01e24b2ff41eb9ba91fd3810b836f0ac404", "message": "Merge pull request #15726 from CarolEidt/Fix15237\n\nKeep OBJ on mismatched struct assignment"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/76b4b48489a249c037f15b5d1c66393c149151d8", "message": "Keep OBJ on mismatched struct assignment\n\nIn a mismatched struct assignment, e.g. using Unsafe.As, we need to retain the OBJ(ADDR(lcl)) on the rhs of the assignment.\n\nFix #15237"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/55f9cc3af46fdca20b08e7d0cf9c19fe833a8679", "message": "Merge pull request #15702 from sdmaclea/PR-EOL\n\nNormalize lsra.h line endings"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/15cf500202c3f81b927d95e6f4cda39f995ef8d0", "message": "Merge pull request #15699 from CarolEidt/FixFeatureSIMDDesc\n\nFix description of FeatureSIMD"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/6c30ff4fab0a44bcfe89ee7b7e985b89f4fe4d2f", "message": "Fix description of FeatureSIMD\n\nThe associated dll is actually System.Numerics.Vectors.dll,\nplus System.Numerics.dll on desktop."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/50a4b337f59071ced788681ca3e5a8c3ea51d8f5", "message": "Merge pull request #15640 from tannergooding/hwintrin-lower\n\nAdding basic containment analysis support for hardware intrinsics."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/d965b3f2fc8e81704772ba91b6bfd267650ec12b", "message": "Merge pull request #15596 from CarolEidt/RemoveMap\n\nLSRA: Replace operandToLocationInfoMap with a list"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72920801", "body": "@jkotas although I could imagine that the JIT could participate in a solution (through improved debug/unwind info if there are imprecisions), the main work would lie in getting System.Environment.GetStackTrace to report column numbers (which I think would give the desired granularity).  @vongillern - System.Environment.GetStackTrace is in clr\\src\\mscorlib\\src\\System\\Exception.cs.  That might be a good place to start, though debug info (beyond the IL offsets that the JIT reports) is not really my area of expertise.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72920801/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/11137344", "body": "Yes, I had intended to make it \"const int\" - I will make that change.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/11137344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/14740560", "body": "I'm not sure that I would say that it is out of scope, but presumably all it would say is that the JIT currently supports only little-endianness. Do you think that would be useful?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/14740560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "dotnet-mc-bot": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15924", "title": "Test failure: tracing_eventpipetrace._eventpipetrace_eventpipetrace_/_eventpipetrace_eventpipetrace_cmd", "body": "Opened on behalf of @Sunny-pu\n\nThe test `tracing_eventpipetrace._eventpipetrace_eventpipetrace_/_eventpipetrace_eventpipetrace_cmd` has failed.\n\n\n    \n    Return code:      1\n    Raw output file:      C:\\dotnetbuild\\work\\c3d2bb58-cd4b-483e-8169-07a5ef0dc304\\Work\\39854026-d90f-47cd-ab05-25e4708908cf\\Unzip\\Reports\\tracing.eventpipetrace\\eventpipetrace\\eventpipetrace.output.txt\n    Raw output:\n    BEGIN EXECUTION\\r\n            1 file(s) copied.\\r\n    \" C:\\dotnetbuild\\work\\c3d2bb58-cd4b-483e-8169-07a5ef0dc304\\Payload\\crossgen.exe\" /Platform_Assemblies_Paths C:\\dotnetbuild\\work\\c3d2bb58-cd4b-483e-8169-07a5ef0dc304\\Payload;C:\\dotnetbuild\\work\\c3d2bb58-cd4b-483e-8169-07a5ef0dc304\\Work\\39854026-d90f-47cd-ab05-25e4708908cf\\Unzip\\eventpipetrace\\IL;C:\\dotnetbuild\\work\\c3d2bb58-cd4b-483e-8169-07a5ef0dc304\\Work\\39854026-d90f-47cd-ab05-25e4708908cf\\Unzip\\eventpipetrace /in eventpipetrace.org /out eventpipetrace.exe\\r\n    Microsoft (R) CoreCLR Native Image Generator - Version 4.5.22220.0\\r\n    Copyright (c) Microsoft Corporation.  All rights reserved.\\r\n    \\r\n    Native image eventpipetrace.exe generated successfully.\\r\n     \"C:\\dotnetbuild\\work\\c3d2bb58-cd4b-483e-8169-07a5ef0dc304\\Payload\\corerun.exe\" eventpipetrace.exe \\r\n    \\tStart: Enable tracing.\\r\n    \\tEnd: Enable tracing.\n    \\r\n    \\tStart: Generating CLR events\\r\n    \\tEnd: Generating CLR Events\n    \\r\n    \\tStart: Disable tracing.\\r\n    \\tEnd: Disable tracing.\n    \\r\n    \\tStart: Processing events from file.\\r\n    \\tEnd: Processing events from file.\n    \\r\n    \\tProcessed 1 GCAllocationTick events\\r\n    \\tProcessed 1 GCTriggered events\\r\n    Expected: 100\\r\n    Actual: 0\\r\n    END EXECUTION - FAILED\\r\n    FAILED\\r\n    Test Harness Exitcode is : 1\\r\n    \n    To run the test:\n    > set CORE_ROOT=C:\\dotnetbuild\\work\\c3d2bb58-cd4b-483e-8169-07a5ef0dc304\\Payload\n    > C:\\dotnetbuild\\work\\c3d2bb58-cd4b-483e-8169-07a5ef0dc304\\Work\\39854026-d90f-47cd-ab05-25e4708908cf\\Unzip\\eventpipetrace\\eventpipetrace.cmd\n    \\r\n    Expected: True\\r\n    Actual:   False\n\n        Stack Trace:\n\n        null\nBuild : Master - 20180119.01 (Core Tests)\nFailing configurations:\n- Windows.7.Amd64\n  - x64\nDetails:\nhttps://mc.dot.net/#/product/netcore/master/source/official~2Fcoreclr~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180119.01/workItem/tracing.eventpipetrace.XUnitWrapper/analysis/xunit/tracing_eventpipetrace._eventpipetrace_eventpipetrace_~2F_eventpipetrace_eventpipetrace_cmd", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15838", "title": "Test failure: Loader_classloader._DefaultInterfaceMethods_simple_simple_simple_/_DefaultInterfaceMethods_simple_simple_simple_cmd", "body": "Opened on behalf of @Sunny-pu\n\nThe test `Loader_classloader._DefaultInterfaceMethods_simple_simple_simple_/_DefaultInterfaceMethods_simple_simple_simple_cmd` has failed.\n\n/home/helixbot/dotnetbuild/work/52decfa3-6de8-4a9e-ac3b-a2f3bccc6c5c/Work/c85cb290-22c2-4937-9d51-9841c4362e1a/Unzip/DefaultInterfaceMethods/simple/simple/simple.sh: line 243:  8207 Segmentation fault      (core dumped) $_DebuggerFullPath \"$CORE_ROOT/corerun\" $ExePath $CLRTestExecutionArguments\n    \n    \n    Return code:      1\n    Raw output file:      /home/helixbot/dotnetbuild/work/52decfa3-6de8-4a9e-ac3b-a2f3bccc6c5c/Work/c85cb290-22c2-4937-9d51-9841c4362e1a/Unzip/Reports\\Loader.classloader\\DefaultInterfaceMethods\\simple\\simple\\simple.output.txt\n    Raw output:\n    BEGIN EXECUTION\n    in takeLock\n    /home/helixbot/dotnetbuild/work/52decfa3-6de8-4a9e-ac3b-a2f3bccc6c5c/Payload/crossgen /Platform_Assemblies_Paths /home/helixbot/dotnetbuild/work/52decfa3-6de8-4a9e-ac3b-a2f3bccc6c5c/Payload:/home/helixbot/dotnetbuild/work/52decfa3-6de8-4a9e-ac3b-a2f3bccc6c5c/Work/c85cb290-22c2-4937-9d51-9841c4362e1a/Unzip/DefaultInterfaceMethods/simple/simple/IL:/home/helixbot/dotnetbuild/work/52decfa3-6de8-4a9e-ac3b-a2f3bccc6c5c/Work/c85cb290-22c2-4937-9d51-9841c4362e1a/Unzip/DefaultInterfaceMethods/simple/simple /in simple.org /out simple.exe\n    Microsoft (R) CoreCLR Native Image Generator - Version 4.5.22220.0\n    Copyright (c) Microsoft Corporation.  All rights reserved.\n    \n    Native image simple.exe generated successfully.\n    in ReleaseLock\n    in takeLock\n    /home/helixbot/dotnetbuild/work/52decfa3-6de8-4a9e-ac3b-a2f3bccc6c5c/Payload/corerun simple.exe\n    Calling IFoo.Foo on FooBar - expecting default method on IFoo.Foo. \n    in ReleaseLock\n    Expected: 100\n    Actual: 139\n    END EXECUTION - FAILED\n    Test Harness Exitcode is : 1\n    \n    To run the test:\n    > set CORE_ROOT=/home/helixbot/dotnetbuild/work/52decfa3-6de8-4a9e-ac3b-a2f3bccc6c5c/Payload\n    > /home/helixbot/dotnetbuild/work/52decfa3-6de8-4a9e-ac3b-a2f3bccc6c5c/Work/c85cb290-22c2-4937-9d51-9841c4362e1a/Unzip/DefaultInterfaceMethods/simple/simple/simple.sh\n    \n    Expected: True\n    Actual:   False\n\n        Stack Trace:\n\n        null\nBuild : Master - 20180112.01 (Ready-To-Run Tests)\nFailing configurations:\n- redhat.69.amd64\n  - x64\n- fedora.25.amd64\n  - x64\nDetails:\nhttps://mc.dot.net/#/product/netcore/master/source/official~2Fcoreclr~2Fmaster~2F/type/test~2Ffunctional~2Fr2r~2Fcli~2F/build/20180112.01/workItem/Loader.classloader.XUnitWrapper/analysis/xunit/Loader_classloader._DefaultInterfaceMethods_simple_simple_simple_~2F_DefaultInterfaceMethods_simple_simple_simple_cmd", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15838/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15720", "title": "CoreCLR Windows PortableBuild failed with \"File not found: 'E:\\A\\_work\\803\\s\\bin\\Product\\Windows_NT.x64.Release\\SOS.NETCore.dll'\"", "body": "Opened on behalf of @jcagme\n\nWarnings: 1\nStatus Message: failed\n\nBuild : Master - 20180103.06 (Product Build)\nFailing configurations:\n- Windows\n  - PortableBuild-Release-x64\n[Mission Control Build Info](https://mc.dot.net/#/product/netcore/master/source/official~2Fcoreclr~2Fmaster~2F/type/build~2Fproduct~2F/build/20180103.06/workItem/Orchestration/analysis/external/Link)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15539", "title": "Test failure: reflection_regression._dev10bugs_Dev10_629953_Dev10_629953_/_dev10bugs_Dev10_629953_Dev10_629953_cmd", "body": "Opened on behalf of @Sunny-pu\n\nThe test `reflection_regression._dev10bugs_Dev10_629953_Dev10_629953_/_dev10bugs_Dev10_629953_Dev10_629953_cmd` has failed.\n\nTest Infrastructure Failure: Method not found: '!0 System.ReadOnlySpan`1.get_Item(Int32)'.\n    Expected: True\n    Actual:   False\n\n        Stack Trace:\n\n        \nBuild : Master - 20171215.02 (Core Tests)\nFailing configurations:\n- redhat.69.amd64\n  - x64\n- ubuntu.1710.amd64\n  - x64\n- ubuntu.1604.amd64\n  - x64\n- ubuntu.1404.amd64\n  - x64\n- redhat.72.amd64\n  - x64\n- fedora.25.amd64\n  - x64\n- debian.82.amd64\n  - x64\n- osx.1012.amd64\n  - x64\nDetails:\nhttps://mc.dot.net/#/product/netcore/master/source/official~2Fcoreclr~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171215.02/workItem/reflection.regression.XUnitWrapper/analysis/xunit/reflection_regression._dev10bugs_Dev10_629953_Dev10_629953_~2F_dev10bugs_Dev10_629953_Dev10_629953_cmd", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14583", "title": "Test failure: JIT_Directed._coverage_oldtests_lclflddiv_cs_d_lclflddiv_cs_d_/_coverage_oldtests_lclflddiv_cs_d_lclflddiv_cs_d_cmd", "body": "Opened on behalf of @Sunny-pu\n\nThe test `JIT_Directed._coverage_oldtests_lclflddiv_cs_d_lclflddiv_cs_d_/_coverage_oldtests_lclflddiv_cs_d_lclflddiv_cs_d_cmd` has failed.\n\n\n    \n    Return code:      1\n    Raw output file:      C:\\dotnetbuild\\work\\c4b42376-cea4-46bd-be93-0fcfe113c7de\\Work\\4299f860-fdb7-4789-8e71-770b3c3a9fe3\\Unzip\\Reports\\JIT.Directed\\coverage\\oldtests\\lclflddiv_cs_d\\lclflddiv_cs_d.output.txt\n    Raw output:\n    BEGIN EXECUTION\\r\n            1 file(s) copied.\\r\n    \" C:\\dotnetbuild\\work\\c4b42376-cea4-46bd-be93-0fcfe113c7de\\Payload\\crossgen.exe\" /Platform_Assemblies_Paths C:\\dotnetbuild\\work\\c4b42376-cea4-46bd-be93-0fcfe113c7de\\Payload;C:\\dotnetbuild\\work\\c4b42376-cea4-46bd-be93-0fcfe113c7de\\Work\\4299f860-fdb7-4789-8e71-770b3c3a9fe3\\Unzip\\coverage\\oldtests\\lclflddiv_cs_d\\IL;C:\\dotnetbuild\\work\\c4b42376-cea4-46bd-be93-0fcfe113c7de\\Work\\4299f860-fdb7-4789-8e71-770b3c3a9fe3\\Unzip\\coverage\\oldtests\\lclflddiv_cs_d /in lclflddiv_cs_d.org /out lclflddiv_cs_d.exe\\r\n    Microsoft (R) CoreCLR Native Image Generator - Version 4.5.22220.0\\r\n    Copyright (c) Microsoft Corporation.  All rights reserved.\\r\n    \\r\n    Native image lclflddiv_cs_d.exe generated successfully.\\r\n     \"C:\\dotnetbuild\\work\\c4b42376-cea4-46bd-be93-0fcfe113c7de\\Payload\\corerun.exe\" lclflddiv_cs_d.exe \\r\n    testcase 6 failed\\r\n    testcase 7 failed\\r\n    testcase 8 failed\\r\n    FAILED\\r\n    Expected: 100\\r\n    Actual: 1\\r\n    END EXECUTION - FAILED\\r\n    FAILED\\r\n    Test Harness Exitcode is : 1\\r\n    \n    To run the test:\n    > set CORE_ROOT=C:\\dotnetbuild\\work\\c4b42376-cea4-46bd-be93-0fcfe113c7de\\Payload\n    > C:\\dotnetbuild\\work\\c4b42376-cea4-46bd-be93-0fcfe113c7de\\Work\\4299f860-fdb7-4789-8e71-770b3c3a9fe3\\Unzip\\coverage\\oldtests\\lclflddiv_cs_d\\lclflddiv_cs_d.cmd\n    \\r\n    Expected: True\\r\n    Actual:   False\n\n        Stack Trace:\n\n           at JIT_Directed._coverage_oldtests_lclflddiv_cs_d_lclflddiv_cs_d_._coverage_oldtests_lclflddiv_cs_d_lclflddiv_cs_d_cmd()\nBuild : Master - 20171018.04 (Core Tests)\nFailing configurations:\n- windows.10.arm64\n  - arm\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fiigii": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15922", "title": "Move hardware intrinsic definition to S.P.CoreLib shared source", "body": "To avoid the conditional compile flag `#if !CORERT` when using hardware intrinsics in mscorlib/CoreFX, we can move hardware intrinsic definition from `coreclr/src/mscorlib/src/` to `coreclr/src/mscorlib/shared/`. \r\n\r\n.NET Native just needs to build with `XXX.PlatformNotSupported.cs` files, so that `IsSupported` would always return false before CoreRT compilers support hardware intrinsics.\r\n\r\nLogging the discussion https://github.com/dotnet/coreclr/pull/15685#issuecomment-358783454\r\n\r\nRelated to https://github.com/dotnet/coreclr/issues/15506\r\n\r\ncc @jkotas @CarolEidt @benaadams @eerhardt @tannergooding @sdmaclea ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15506", "title": "Collect Optimization Candidates for Using Intel Hardware Intrinsics in mscorlib", "body": "## Status of Intel hardware intrinsic work \r\nAt this time (12/13/2017), we have enabled all the infrastructures for [Intel hardware intrinsic](https://github.com/dotnet/corefx/issues/22940) and certain scalar/SIMD intrinsics. The next step is to implement specific Intel hardware intrinsics.\r\n\r\n## Optimizing mscorlib using Intel hardware intrinsic\r\nThe base class library (mscorlib) is used by every .NET Core program, so its performance is critical, and we can use hardware intrinsics to improve performance of mscorlib by leveraging modern Intel Architecture instructions. For instance, we experimented rewriting the [nonrandomized hash function](https://github.com/dotnet/coreclr/blob/master/src/mscorlib/src/System/String.Comparison.cs#L995-L1049) of `String` with `Sse42.Crc32` intrinsic in a micro-benchmark. The result showed that `Crc32` version provided 2~**5.5x**(32-bit)/**8.5x**(64-bit) performance gain on short strings and **6.5x**(32-bit)/**12.3x**(64-bit) gain hashing for longer strings.\r\n![image](https://user-images.githubusercontent.com/1263030/33628072-675ba53e-d9b4-11e7-9730-a5dddd5592db.png)\r\n\r\n## Capturing optimization candidates\r\nThis issue attempts to capture a list of optimization candidates in mscorlib for taking advantage of Intel hardware intrinsics. We are looking for popular use cases from the community and mscorlib authors, and their input on how such methods could be optimized. For example, \"we use method XYZ intensively, and if XYZ were to be optimized using intrinsic A and B, we may get X% performance gain\". That kind of information could help steer subsequent intrinsic work, with highly demanded hardware intrinsics and many uses cases to have higher implementation priority. In addition, listed below are some general guidelines we plan to use when considering optimization candidates.\r\n1. We would prioritize 256-bit SIMD intrinsics (that operate over `Vector256<T>`) higher because they have distinctive performance advantage over 128-bit SIMD intrinsics, and AVX/AVX2 machines (Sandy Bridge, Haswell, and above) are widely available and used.\r\n2. We would prefer to fully implement an ISA class, then move to another one. When hardware intrinsics ship with the next release (.NET Core 2.1), [\"IsSupported\" will be true only for fully implemented classes](https://github.com/dotnet/coreclr/issues/14930). For example, if we want `Sse42.Crc32` available in .NET Core 2.1, other SSE4.2 intrinsics should also be implemented in CoreCLR.\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15506/reactions", "total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15490", "title": "[up-for-grabs] Create and port more test cases for Vector128<T> and Vector256<T>", "body": "The new SIMD types `Vector128<T>` and `Vector256<T>` have been enabled in CoreCLR https://github.com/dotnet/coreclr/pull/15244. We need more test cases to make sure they work well with other CoreCLR features. \r\nSome language features have to be tested:\r\n- try/catch\r\n- typecast\r\n- boxing/unboxing\r\n- calling convention\r\n- ref\r\n- ...\r\n\r\nCoreCLR already has certain such tests for `System.Numeric.Vectors` (e.g., [VectorReturn](https://github.com/dotnet/coreclr/blob/master/tests/src/JIT/SIMD/VectorReturn.cs)) that can be ported to `Vector128<T>` and `Vector256<T>`.\r\nThis work may require more hardware intrinsic, we will implement them preferentially.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/5c94055501c7dbe98fbc9b05304c7f5f13a7d8fe", "message": "#if defined(_TARGET_XARCH_) || defined(_TARGET_ARM64_)"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/654a8d5ff0cf1a7e0968c68a4b84aecf03ed9c1c", "message": "Merge SSE intrinsics into the table-driven framework"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/fffd34540b50cee2ae5a3e1215e525f029eec124", "message": "table drive Intel hardware intrinsic"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/2267b5d8675b7316d32a14c76ee992a2aac4a123", "message": "Add new CI mode for Intel HW intrinsics"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/2bb0fedb21d09c6982259fffdcdbef839afe1838", "message": "fix corefx/#26230 (#15792)"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/cab0db6345a7941f75d991281bcc0079d28ba182", "message": "Update Intel hardware intrinsic APIs (#15601)\n\n- add missing APIs\r\n- fix generic names\r\n- fix comments\r\n- disambiguate with `using static`"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/14725", "title": "[WIP] Compile runtime with -fvisibility=hidden", "body": "Based on @janvorli 's work to resolve #2484.", "author_association": "COLLABORATOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "brianrob": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15919", "title": "Re-Enable EventSourceTrace Test on Linux", "body": "This can be done once https://github.com/Microsoft/perfview/issues/461 is fixed.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15378", "title": "Create a Mechanism to Get All Thread Managed Stacks", "body": "Useful for getting a snapshot of thread count and what threads are doing.  This would used in the performance profiling controller: https://github.com/dotnet/designs/pull/26", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15378/reactions", "total_count": 5, "+1": 5, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15377", "title": "Consider: Create the Concept of Multiple EventPipe Sessions", "body": "This would allow multiple concurrent consumers with different configurations to run concurrently.  Right now, only one consumer can run concurrently, and it is easy for consumers to interfere with each other.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15376", "title": "Expose Trace Files In-Proc", "body": "Rather than forcing a trace file to be written to disk, make it possible for the in-proc controller of tracing to get at the trace in-memory.  This allows the trace creator to do whatever it wants with the trace (e.g. send it out over HTTP).", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15376/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15375", "title": "Expose EventPipe Tracing API", "body": "Currently, there isn't a supported way to control the EventPipe from in-proc.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15374", "title": "Tracing Epic", "body": "", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15374/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15367", "title": "EventPipe: Add Support for ActivityId and RelatedActivityId", "body": "There is currently support in EventSource, but this does not extend to native events.\r\n\r\nThis issue tracks adding full support for ActivityId and RelatedActivityId in EventPipe.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15367/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15175", "title": "Re-Enable Performance PR Jobs", "body": "We should do the following work as part of bringing back PR jobs:\r\n - [x] Reduce execution time to be closer to the existing functional CI jobs.\r\n - [ ] Address any intermittent failures (not sure if there are any).\r\n - [x] Ensure we have machine capacity to minimize queue time (I believe this is already taken care of).\r\n - [ ] Document how to use these runs.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15128", "title": "Enable EventPipe to keep track of what logging system (ETW, EventListener, etc.) requested which events and dispatch appropriately", "body": " - Each instance will be represented by an object that knows what it requested.\r\n - Have a top-level bitmask that knows whether an event has been requested by anyone and use that to decide whether an event is on.\r\n - At a minimum, once an event has been requested by anyone, use an observer pattern to dispatch the event to each consumer, and allow them to deliver it if they want (or ignore it). We can also be smarter and only dispatch to the systems that requested the event (think of each of these logging systems as sessions).", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15127", "title": "Update Native Runtime Events to Use the EventData Serialization Format", "body": "This is fairly straight forward and just requires updating the script and serialization functions. The purpose of this is to ensure that all events have a consistent serialization format and that the format easily allows for access to individual payload items. Once a particular logging system has taken over it can choose to convert the payload into a different format.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15126", "title": "Plumb Payload Names for All Events Through EventPipe", "body": " - This is required to fill in the PayloadNames field of EventWrittenEventArgs (EventListener support).\r\n - Right now, EventSource specifies a metadata blob.\r\n - CONSIDER: Make EventSource pass a strongly typed object representing the payload fields.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15125", "title": "Expose Native Runtime Events using EventSource", "body": "- EventListener.EnableEvents requires an EventSource parameter.\r\n- Need a way to expose native events in EventListener from EventPipe.\r\n\r\nExample: EventListener.EnableEvents(CLREventSource.Log, ...)", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15124", "title": "Enable EventPipe to Target EventListeners as Dispatch Targets", "body": "- Allow the EventListener to pinvoke into the runtime and register itself as a target.\r\n- Implement a GC safe buffering mechanism to allow native events to be dispatched to managed code.\r\n- Invoke registration mechanism from all EventListeners.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15122", "title": "Enable EventPipe on All Platforms", "body": "Currently only present on Linux.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/25d6ccb0092d1a1aa5b785dd5ffee0a4b4c5f13e", "message": "Enable EventPipe and EventSource Functional Tests (#15917)"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/c2a35f4480655e497d378c9485caac924bfa2178", "message": "Convert BulkTypeLogger Allocations From Stack to Heap (#15907)"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15444", "title": "[Port to Release/2.0.0] Fix uaf in DestroyThread function", "body": "Fixes a crash on Tizen in EventPipe.  From the commit:\r\n\r\nMark thread's buffers as no longer owned before calling Thread::OnThreadTerminate because thread can delete itself in this method.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15147", "title": "Fix SIGSEGV in EventPipe on Shutdown (#14123)", "body": "Port the fix contained in #14123 to release/2.0.", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72595168", "body": "Looks good to me as well.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72595168/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72747875", "body": "Thanks @ramarag.  Were these files just missed as part of the original PR?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72747875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72748711", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72748711/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72882016", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72882016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72923874", "body": "If you want to write a quick benchmark for this, take a look at http://blogs.msdn.com/b/vancem/archive/2009/02/06/measureit-update-tool-for-doing-microbenchmarks.aspx.  MeasureIt makes writing benchmarks very simple and solves a large number of the issues that crop up around them.\n\nAs an FYI, we'll have some official guidance on using MeasureIt soon.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72923874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72958782", "body": "@Knagis, it looks like the source file link didn't take me to the right place.  Can you check on this?\n\nConsidering the simplicity of the change, feel free to code it up, and submit a pull request and we can review it from there.  Thanks.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72958782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/20738546", "body": "I think I may have confused things.  I believe that these methods should remain as is and not be removed.  I expect that they are used on desktop.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20738546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/22135134", "body": "To prevent double-frees, can you change this to:\r\n\r\nif(m_pMetadata != NULL)\r\n{\r\n    delete[] m_pMetadata;\r\n    m_pMetadata = NULL;\r\n}", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/22135134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/22135173", "body": "This should only happen if pMetadata != NULL.  Otherwise, m_pMetadata should be NULL and m_metadataLength should be 0.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/22135173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/25667657", "body": "Not sure you meant to commit this.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/25667657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/25958649", "body": "Hey @nategraf, how come we need to make changes to the perf infrastructure in this PR?  If possible, we should try to keep this sort of change separate and contained.  It's OK if this needs to go in first, but we should make sure that this PR is isolated if at all possible to eventpipe changes to bring it to Windows / OSX, and not have infra changes.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/25958649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/26152468", "body": "Any reason to switch this from PLATFORM_WINDOWS?  I think that's the right define to use.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/26152468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/26152481", "body": "These statics and the DLL instance should all be under ifdef PLATFORM WINDOWS.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/26152481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/26152526", "body": "You can call this directly from SetTimeGranularity.  That way, if we ever have to call that again, you're guaranteed to have it initialized.  It also makes the SampleProfiler cleaner, since we'd like to limit exposure to platform specifics.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/26152526/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/26152617", "body": "I think you should make this more generic so that if we have to do other work on non-Windows platforms, this is a great place for it.\r\n\r\nSomething like SampleProfiler::LoadDependencies.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/26152617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/26152626", "body": "Same here.  SampleProfiler::UnloadDependencies.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/26152626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/26152663", "body": "On second thought - if you rename this as I said in my other comment, then you can just put this at the top of SampleProfiler::Enable.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/26152663/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/26191303", "body": "It looks like this new flag is only used for ReadyToRun.  I think we should name it as such.  Also since you're looking for naming recommendations, for NGEN we use the term \"reject\" or \"rejected\", so it might be good to use that.  Something like ReadyToRunPrecompiledCodeRejected (or R2RCodeRejected for something shorter).", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/26191303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/26191377", "body": "Another one of your questions was around the profiler, and whether or not we should split this out as a reason to reject precompiled code.\r\n\r\nI can't remember how we handle this for NGEN code - I think it just happens at the assembly level and we log it there, but I'm having trouble finding it now.  We should probably do the same thing.  It's been valuable in the past as there have been folks that have had profilers attached that didn't know it, and were surprised at the amount of JIT time caused by it.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/26191377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/26191413", "body": "Ah, It appears that I'm incorrect.  In that case, ignore my comment about naming it ReadyToRun.  I do think using the term \"Reject\" is still applicable.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/26191413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "Gallimathias": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15906", "title": "SIMD 64 Bit Memory-Alignment Bug ", "body": "Since I was a little wrong with issue https://github.com/dotnet/roslyn/issues/24233#issuecomment-358405137 in the Roslyn repo, I apologize for that ^^, here at the right place.\r\n\r\n**Version Used**: .NET 4.7.1 C# 7.2\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Install engenious via nuget or wrote your own packed Vector3 or use a other packed Vector3\r\n2. Cast with pointer to System.Numerics.Vector3 or own unpacked Vector3\r\n3.  Just do the same thing, just put the pointer in a variable before it.\r\n4. Compare the results\r\n\r\n**A brief example:**\r\n\r\nC#-Code:\r\n\r\n````CSharp\r\n        static unsafe void Test()\r\n        {\r\n            var value = new Vector3(0, 0, -41);\r\n            var a = *(Numerics.Vector3*)(&value);\r\n        }\r\n\r\n        static unsafe void TestB()\r\n        {\r\n            var value = new Vector3(0, 0, -41);\r\n            var d = &value;\r\n            var a = *(Numerics.Vector3*)d;\r\n        }\r\n````\r\n\r\nIL-Code:\r\n\r\n````CIL\r\n                 .method private hidebysig static \r\n\t\t\tvoid Test () cil managed \r\n\t\t{\r\n\t\t\t// Method begins at RVA 0x2144\r\n\t\t\t// Code size 33 (0x21)\r\n\t\t\t.maxstack 4\r\n\t\t\t.locals init (\r\n\t\t\t\t[0] valuetype [engenious]engenious.Vector3 'value',\r\n\t\t\t\t[1] valuetype [System.Numerics.Vectors]System.Numerics.Vector3 a\r\n\t\t\t)\r\n\r\n\t\t\tIL_0000: nop\r\n\t\t\tIL_0001: ldloca.s 'value'\r\n\t\t\tIL_0003: ldc.r4 0.0\r\n\t\t\tIL_0008: ldc.r4 0.0\r\n\t\t\tIL_000d: ldc.r4 -41\r\n\t\t\tIL_0012: call instance void [engenious]engenious.Vector3::.ctor(float32, float32, float32)\r\n\t\t\tIL_0017: ldloca.s 'value'\r\n\t\t\tIL_0019: conv.u\r\n\t\t\tIL_001a: ldobj [System.Numerics.Vectors]System.Numerics.Vector3\r\n\t\t\tIL_001f: stloc.1\r\n\t\t\tIL_0020: ret\r\n\t\t} // end of method Program::Test\r\n\r\n\t\t.method private hidebysig static \r\n\t\t\tvoid TestB () cil managed \r\n\t\t{\r\n\t\t\t// Method begins at RVA 0x2174\r\n\t\t\t// Code size 35 (0x23)\r\n\t\t\t.maxstack 4\r\n\t\t\t.locals init (\r\n\t\t\t\t[0] valuetype [engenious]engenious.Vector3 'value',\r\n\t\t\t\t[1] valuetype [engenious]engenious.Vector3* d,\r\n\t\t\t\t[2] valuetype [System.Numerics.Vectors]System.Numerics.Vector3 a\r\n\t\t\t)\r\n\r\n\t\t\tIL_0000: nop\r\n\t\t\tIL_0001: ldloca.s 'value'\r\n\t\t\tIL_0003: ldc.r4 0.0\r\n\t\t\tIL_0008: ldc.r4 0.0\r\n\t\t\tIL_000d: ldc.r4 -41\r\n\t\t\tIL_0012: call instance void [engenious]engenious.Vector3::.ctor(float32, float32, float32)\r\n\t\t\tIL_0017: ldloca.s 'value'\r\n\t\t\tIL_0019: conv.u\r\n\t\t\tIL_001a: stloc.1\r\n\t\t\tIL_001b: ldloc.1\r\n\t\t\tIL_001c: ldobj [System.Numerics.Vectors]System.Numerics.Vector3\r\n\t\t\tIL_0021: stloc.2\r\n\t\t\tIL_0022: ret\r\n\t\t} // end of method Program::TestB\r\n````\r\n\r\n**Expected Behavior**: Both methods should produce the same result on all systems.\r\n\r\nMethod Test: a should be <0. 0. -41>\r\nMethod TestB: a should be <0. 0. -41>\r\n\r\n**Actual Behavior**: When you cast a packed vector into an unpacked vector, the result will always be a zero vector on some computers with 64 Bit and the use of a direct assignment.\r\n\r\nMethod TestB works on all systems no matter if 32 Bit or 64 Bit.\r\nMethod Test does not work as 64 bit version on some systems. Could this be related to the CPU used?\r\n\r\nMy Results compiled as 64 Bit:\r\n\r\nMethod Test: a is <0. 0. 0>\r\nMetod TestB: a is <0. 0. -41>\r\n\r\nOn my PC, Method Test doesn't work. My CPU is Intel i7-5960X.\r\n\r\nThe only difference in CIL are the following lines:\r\n\r\nIL_001a: stloc.1\r\nIL_001b: ldloc.1\r\n\r\n**Supplementary here the assembly**\r\n\r\n__Method TestB:__\r\n````Assembly\r\n var d = &value;\r\n00007FF958820875  lea         rax,[rbp+38h]  \r\n00007FF958820879  mov         qword ptr [rbp+30h],rax  \r\n            var a = *(Numerics.Vector3*)d;\r\n00007FF95882087D  mov         rax,qword ptr [rbp+30h]  \r\n00007FF958820881  vmovss      xmm0,dword ptr [rax+8]  \r\n00007FF958820887  vmovsd      xmm1,qword ptr [rax]  \r\n00007FF95882088C  vshufps     xmm1,xmm1,xmm0,44h  \r\n00007FF958820892  vmovapd     xmmword ptr [rbp+20h],xmm1  \r\n        }\r\n````\r\n__Method Test:__\r\n````Assembly\r\n\r\nvar a = *(Numerics.Vector3*)(&value);\r\n00007FF9588207F5  mov         al,byte ptr [rbp+38h]  \r\n00007FF9588207F8  mov         byte ptr [rbp+20h],al  \r\n        }\r\n````", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jeremymeng": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15892", "title": "sosdocsunit.txt should not have execute permission set", "body": "## Steps to reproduce\r\n```\r\ndotnet new console\r\ndotnet public -r linux-x64 -o pub2\r\nll pub2/*.txt\r\n```\r\n\r\n## Actual behavior\r\nNote that `sosdocsunit.txt` has execution permission which doesn't seem right.\r\n\r\nIn fact many *.dll and *.so under the published folder all have the `-rwxrw-rw-`.  They can just use `-rw-rw-rw-`\r\n\r\n```\r\n-rwxrw-rw- 1 azureuser azureuser 65869 Jul 20 19:16 pub2/sosdocsunix.txt*\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     debian\r\n OS Version:  8\r\n OS Platform: Linux\r\n RID:         debian.8-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.0.2/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "4creators": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15888", "title": "[Win/IPv6] Local build fails with server timeouts during build tools initialization", "body": "For a couple of hours I am blocked by inability to build coreclr locally. The error I am getting is as follows:\r\n\r\n```\r\ne:\\src\\ms\\dotnet\\coreclr>call \"e:\\src\\ms\\dotnet\\coreclr\\Tools\\dotnetcli\\dotnet.exe\" restore \"e:\\src\\ms\\dotnet\\coreclr\\Tools\\generated\\project.csproj\" --source https://dotnet.myget.org/F/dotnet-buildtools/api/v3/index.json --source https://api.nuget.org/v3/index.json  --packages \"e:\\src\\ms\\dotnet\\coreclr\\Tools\\.\"\r\n  Restoring packages for e:\\src\\ms\\dotnet\\coreclr\\Tools\\generated\\project.csproj...\r\n  Retrying 'FindPackagesByIdAsync' for source 'https://dotnetmyget.blob.core.windows.net/artifacts/dotnet-buildtools/nuget/v3/flatcontainer/microbuild.core/index.json'.\r\n  An error occurred while sending the request.\r\n    The operation timed out\r\n  Retrying 'FindPackagesByIdAsync' for source 'https://dotnetmyget.blob.core.windows.net/artifacts/dotnet-buildtools/nuget/v3/flatcontainer/microsoft.net.compilers/index.json'.\r\n  An error occurred while sending the request.\r\n    The operation timed out\r\n  Retrying 'FindPackagesByIdAsync' for source 'https://dotnetmyget.blob.core.windows.net/artifacts/dotnet-buildtools/nuget/v3/flatcontainer/microbuild.core/index.json'.\r\n  An error occurred while sending the request.\r\n    The operation timed out\r\n  Retrying 'FindPackagesByIdAsync' for source 'https://dotnetmyget.blob.core.windows.net/artifacts/dotnet-buildtools/nuget/v3/flatcontainer/microsoft.net.compilers/index.json'.\r\n  An error occurred while sending the request.\r\n    The operation timed out\r\nC:\\Program Files\\dotnet\\sdk\\2.1.4\\NuGet.targets(103,5): error : Failed to retrieve information about 'Microsoft.Net.Compilers' from remote source 'https://dotnetmyget.blob.core.windows.net/artifacts/dotnet-buildtools/nuget/v3/flatcontainer/microsoft.net.compilers/index.json'. [e:\\src\\ms\\dotnet\\coreclr\\Tools\\generated\\project.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.1.4\\NuGet.targets(103,5): error :   An error occurred while sending the request. [e:\\src\\ms\\dotnet\\coreclr\\Tools\\generated\\project.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.1.4\\NuGet.targets(103,5): error :   The operation timed out [e:\\src\\ms\\dotnet\\coreclr\\Tools\\generated\\project.csproj]\r\n\r\ne:\\src\\ms\\dotnet\\coreclr>set RESTORE_PORTABLETARGETS_ERROR_LEVEL=1\r\nERROR: An error ocurred when running: '\"e:\\src\\ms\\dotnet\\coreclr\\Tools\\dotnetcli\\dotnet.exe\" restore \"e:\\src\\ms\\dotnet\\coreclr\\Tools\\generated\\project.csproj\"'. Please check above for more details.\r\nBUILD: Laying out dynamically generated files consumed by the native build system\r\nBUILD: Laying out dynamically generated Event test files and etmdummy stub functions\r\n Generating Dummy Event Headers\r\n Generating Event Headers\r\nBUILD: Laying out dynamically generated EventPipe Implementation\r\nBUILD: Laying out ETW event logging interface\r\nBUILD: Commencing build of native components for Windows_NT.x64.Checked\r\nBUILD: Using environment: \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\Common7\\Tools\\\\..\\..\\VC\\Auxiliary\\Build\\vcvarsall.bat\" x86_amd64\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15697", "title": "Provide a runtest script switch to run one or group of *.XUnitWrappers.dll from command line", "body": "While working with repo one of the main problems I have encountered is a bit inconvenient way of invoking test runs by hand. While it is possible to invoke single tests from command line (quite involved right now) there is no easy possibility of invoking any *.XUnitWrapper.dll for running group of test i.e. if I am working on RyuJIT it may be desirable to run often one group of tests which are directly affected by my work - `JIT.HardwareIntrinsics.XUnitWrapper.dll`, and a bit less often `JIT.*.XUnitWrapper.dlls`, and even less often whole priority 0 tests.\r\n\r\nI have a working solution to the problem, which allows to specify XUnitWrappers to run. It reduces test run time from 10 min in Checked / 20 min Debug configurations for whole suite to to 40 s / 1 min  for single HardwareIntrinsics wrapper. \r\n\r\nIf this would be of interest for repo I will submit PR.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15638", "title": "[RyuJIT/xarch] Assertion failed 'child->isContained()' in src/jit/lsraxarch.cpp Line: 494", "body": "CI in PR #15585 was failing for some optimized tests only (#15618 was fixed in my PR with solution from #15637) with the following errors:\r\n\r\n`Windows_NT x86 Checked Innerloop Build and Test`\r\n```\r\nAssert failure(PID 7592 [0x00001da8], Thread: 11900 [0x2e7c]): Assertion failed 'child->isContained()' in 'IntelHardwareIntrinsicTest.Program:Main(ref):int' (IL size 1287)\r\n             File: d:\\j\\workspace\\x86_checked_w---b3a226f6\\src\\jit\\lsraxarch.cpp Line: 494\r\n             Image: D:\\j\\workspace\\x86_checked_w---b3a226f6\\bin\\tests\\Windows_NT.x86.Checked\\Tests\\Core_Root\\CoreRun.exe\r\n```\r\n\r\nIdentical asserts were hit for:\r\n`Windows_NT x86 Checked Innerloop Build and Test` https://ci.dot.net/job/dotnet_coreclr/job/master/job/x86_checked_windows_nt_prtest/13677/\r\n`Ubuntu x64 Checked Innerloop Build and Test ` https://ci.dot.net/job/dotnet_coreclr/job/master/job/checked_ubuntu_flow_prtest/14336/\r\n`OSX10.12 x64 Checked Innerloop Build and Test` https://ci.dot.net/job/dotnet_coreclr/job/master/job/checked_osx10.12_flow_prtest/10570/\r\n`CentOS7.1 x64 Checked Innerloop Build and Test` https://ci.dot.net/job/dotnet_coreclr/job/master/job/checked_centos7.1_flow_prtest/2090/\r\n\r\nIt was possible to create minimum repro for the assertion:\r\n\r\n```C#\r\nusing System;\r\nusing System.Runtime.Intrinsics;\r\nusing System.Runtime.Intrinsics.X86;\r\n\r\nnamespace IntelHardwareIntrinsicTest\r\n{\r\n    internal static partial class Program\r\n    {\r\n        static unsafe int Main(string[] args)\r\n        {\r\n            if (Sse2.IsSupported)\r\n            {\r\n                using (var doubleTable = TestTableVector128<double>.Create(testsCount))\r\n                {\r\n                    (Vector128<double>, Vector128<double>, Vector128<double>) value = doubleTable[i];\r\n                    doubleTable.SetOutArray(Sse2.Add(value.Item1, value.Item2));                  // => this call triggers assert\r\n                }\r\n            }\r\n            return 0;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThe workaround for the issue is quite simple, it is enough to create local variable which will receive value from `Sse2.Add(value.Item1, value.Item2)` call before passing it to `doubleTable.SetOutArray` i.e..\r\n\r\n```C#\r\n                    var result = Sse2.Add(value.Item1, value.Item2);\r\n                    doubleTable.SetOutArray(result);\r\n```\r\n\r\nThe assert is hit for all Sse2 methods tested so far when built with optimization. `TestTableVector128` codes used in test case can be found here:\r\nhttps://github.com/dotnet/coreclr/pull/15585/files#diff-a673f392be079e241929d6095941fa16\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15165", "title": "[Docs] Add requirement to always invoke powershell with -NoProfile option to coding guidelines", "body": "I have encountered several issues with powershell invocations in coreclr build, CI and test code which were caused by powershell invocation without using -NoProfile option which prevents powershell profile script execution on startup.\r\n\r\nUnlike Linux shells powershell when invoked by default executes profile scripts even on unixes. This overlooked feature may cause side effects which may affect executing code. To guard against this problem it should be a requirement to always invoke powershell with -NoProfile option.\r\n\r\nSee #15164 ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15165/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14884", "title": "[Infrastructure] Add header files to native Visual Studio coreclr projects", "body": "Currently CMake is used according to standard pattern where only `.cpp` file are included into targets with library or executable. However, this pattern breaks some usability of CMake created Visual Studio projects since they do not include header files by default and it is necessary to search for them in VS project dependencies directory containing several hundred files or scroll to top of code file and click \"open file\" on include directive. Obviously none of this is convenient even for medium sized code files.\r\n\r\nIf proposal will be accepted I could provide PR with required changes. ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14884/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14878", "title": "[Crossgen] Support multithreaded crossgen compilation", "body": "Currently crossgen runs compilation as a single threaded task. It would significantly improve performance of several crossgen dependent scenarios if crossgen native component compilation could be run as a multithreaded task.\r\n\r\nMy understanding is that RyuJIT by default supports multithreaded compilation of methods. If this could be exploited by crossgen it would enable several orders of magnitude faster native components compilation.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14878/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14596", "title": "[Infrastructure/Windows] Remove spmi artifacts from cross component mscorlib builds on Windows.", "body": "The problem was discovered during code review for PR #14578: the conclusion was that superpmi binaries do not belong to cross components. See comment: https://github.com/dotnet/coreclr/pull/14578#issuecomment-337929416\r\n\r\nPls assign this issue to me.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14594", "title": "[Infrastructure/Windows] Optimize test build on Windows", "body": "Code review in #14509 led to proposal to optimize test build on Windows: see https://github.com/dotnet/coreclr/pull/14509#issuecomment-337055756\r\n\r\nThis issue is created to track that work.\r\n\r\nPls assign it to me.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/84efbc8e71fff8ccffdd637017036d2dc0f666df", "message": " Update clr-configuration-knobs.md, add new C# csi.exe based script for xplat document generation (#15858)\n\n* C# csx script to generate CoreCLR and Jit configuration knobs doc\r\n\r\n* Normalize category names, fix typos and white space in clrconfigvalues.h\r\n\r\n* Normalize category names, knobs descrptions and fix typos in jitconfigvalues.h\r\n\r\n* Remove clr-complus-conf-docgen.sh\r\n\r\n* Remove from clrconfigvalues.h CONFIG_ declarations which are already present in jitconfigvalues.h\r\n\r\n* Update clr-configuration-knobs.md with clr-configuration-knobs.csx script"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/82f2576ef4de9f202a7dffd5a388b94a28e34bfd", "message": "[Infrastructure/Win] Add C++ header files to Visual Studio clrjit project (#15775)\n\n* Add C++ header files to Visual Studio clrjit project\r\n\r\n* Add comment about script change impact and usage"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/90f1918d672eec9cea327c20a7a40ac96b318af1", "message": "movhlps categorized as dstdstsrc"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/90e017eb85c9e1c87ad19bcf785113ba45b5d72f", "message": "Address review feedback"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/1deda46cefeb4915582fdc65324e95c92a78aec7", "message": "Refactor emitter::IsDstDstSrcAVXInstruction function implementation"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15950", "title": "On all platforms first member of InstructionSet enum is InstructionSet_ILLEGAL", "body": "Minor fix to XArch Arm common code", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15777", "title": "[WIP] Implement Sse2 Intel hardware intrinsics - part 2", "body": "In this PR remaining Sse2 hardware instrinsics are implemented except for all `Load` and `Store`. There are 3 instructions which are expected to not work at this moment but I need CI support to better implement them.\r\n\r\nThis PR builds incrementally on #15585 and contains all implemented so far Sse2 instructions.\r\n  ", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15637", "title": "Add dir.props files to hardware intrinsics test directories to control test env variables", "body": "\r\nFixes ##15618", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15585", "title": "Implement simple Sse2 hardware instrinsics", "body": "Implementation of simple SSE2 hardware intrinsics: \r\n- all simple intrinsics listed below  are implemented, `Load` and `Store` instructions are left for @fiigii to implement as was suggested below,\r\n- all scalar intrinsics will be implemented in separate PR\r\n- remaining `special` intrinsics will be ported to table driven codegen in PR #15777 \r\n- final implementation of tests which would require porting to new format discussed in PR #15771 will be done within #15777 \r\n\r\n```C++\r\n//  SSE2 Intrinsics implemented in this PR\r\nHARDWARE_INTRINSIC(SSE2_AddSaturate,                                \"AddSaturate\",                                  SSE2)\r\nHARDWARE_INTRINSIC(SSE2_And,                                        \"And\",                                          SSE2)\r\nHARDWARE_INTRINSIC(SSE2_AndNot,                                     \"AndNot\",                                       SSE2)\r\nHARDWARE_INTRINSIC(SSE2_Average,                                    \"Average\",                                      SSE2)\r\nHARDWARE_INTRINSIC(SSE2_CompareEqual,                               \"CompareEqual\",                                 SSE2)\r\nHARDWARE_INTRINSIC(SSE2_CompareGreaterThan,                         \"CompareGreaterThan\",                           SSE2)\r\nHARDWARE_INTRINSIC(SSE2_CompareGreaterThanOrEqual,                  \"CompareGreaterThanOrEqual\",                    SSE2)\r\nHARDWARE_INTRINSIC(SSE2_CompareLessThan,                            \"CompareLessThan\",                              SSE2)\r\nHARDWARE_INTRINSIC(SSE2_CompareLessThanOrEqual,                     \"CompareLessThanOrEqual\",                       SSE2)\r\nHARDWARE_INTRINSIC(SSE2_CompareNotEqual,                            \"CompareNotEqual\",                              SSE2)\r\nHARDWARE_INTRINSIC(SSE2_CompareNotGreaterThan,                      \"CompareNotGreaterThan\",                        SSE2)\r\nHARDWARE_INTRINSIC(SSE2_CompareNotGreaterThanOrEqual,               \"CompareNotGreaterThanOrEqual\",                 SSE2)\r\nHARDWARE_INTRINSIC(SSE2_CompareNotLessThan,                         \"CompareNotLessThan\",                           SSE2)\r\nHARDWARE_INTRINSIC(SSE2_CompareNotLessThanOrEqual,                  \"CompareNotLessThanOrEqual\",                    SSE2)\r\nHARDWARE_INTRINSIC(SSE2_CompareOrdered,                             \"CompareOrdered\",                               SSE2)\r\nHARDWARE_INTRINSIC(SSE2_CompareUnordered,                           \"CompareUnordered\",                             SSE2)\r\nHARDWARE_INTRINSIC(SSE2_ConvertToVector128Int32,                    \"ConvertToVector128Int32\",                      SSE2)\r\nHARDWARE_INTRINSIC(SSE2_ConvertToVector128Double,                   \"ConvertToVector128Double\",                     SSE2)\r\nHARDWARE_INTRINSIC(SSE2_ConvertToVector128Single,                   \"ConvertToVector128Single\",                     SSE2)\r\nHARDWARE_INTRINSIC(SSE2_ConvertToVector128Int32WithTruncation,      \"ConvertToVector128Int32WithTruncation\",        SSE2)\r\nHARDWARE_INTRINSIC(SSE2_Divide,                                     \"Divide\",                                       SSE2)\r\nHARDWARE_INTRINSIC(SSE2_Max,                                        \"Max\",                                          SSE2)\r\nHARDWARE_INTRINSIC(SSE2_Min,                                        \"Min\",                                          SSE2)\r\nHARDWARE_INTRINSIC(SSE2_MoveMask,                                   \"MoveMask\",                                     SSE2)\r\nHARDWARE_INTRINSIC(SSE2_Multiply,                                   \"Multiply\",                                     SSE2)\r\nHARDWARE_INTRINSIC(SSE2_MultiplyHigh,                               \"MultiplyHigh\",                                 SSE2)\r\nHARDWARE_INTRINSIC(SSE2_MultiplyHorizontalAdd,                      \"MultiplyHorizontalAdd\",                        SSE2)\r\nHARDWARE_INTRINSIC(SSE2_MultiplyLow,                                \"MultiplyLow\",                                  SSE2)\r\nHARDWARE_INTRINSIC(SSE2_Or,                                         \"Or\",                                           SSE2)\r\nHARDWARE_INTRINSIC(SSE2_PackSignedSaturate,                         \"PackSignedSaturate\",                           SSE2)\r\nHARDWARE_INTRINSIC(SSE2_PackUnsignedSaturate,                       \"PackUnsignedSaturate\",                         SSE2)\r\nHARDWARE_INTRINSIC(SSE2_SetZero,                                    \"SetZero\",                                      SSE2)\r\nHARDWARE_INTRINSIC(SSE2_SumAbsoluteDifferences,                     \"SumAbsoluteDifferences\",                       SSE2)\r\nHARDWARE_INTRINSIC(SSE2_Sqrt,                                       \"Sqrt\",                                         SSE2)\r\nHARDWARE_INTRINSIC(SSE2_Subtract,                                   \"Subtract\",                                     SSE2)\r\nHARDWARE_INTRINSIC(SSE2_SubtractSaturate,                           \"SubtractSaturate\",                             SSE2)\r\nHARDWARE_INTRINSIC(SSE2_UnpackHigh,                                 \"UnpackHigh\",                                   SSE2)\r\nHARDWARE_INTRINSIC(SSE2_UnpackLow,                                  \"UnpackLow\",                                    SSE2)\r\nHARDWARE_INTRINSIC(SSE2_Xor,                                        \"Xor\",                                          SSE2)\r\n```\r\n  ", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/14510", "title": "Optimize native build of coreclr repo release/2.0 branch - 4x less memory , 16% build time improvement", "body": "After this commit is accepted and merged I will provide PR with build docs update\r\n\r\nNative build in coreclr repo suffers from overallocation of VC compiler instnces\r\n    which is a result of buggy parallelism handling by MSBuild for vcxproj. The machanism\r\n    is such that MSBuild allocates nodes (default number of nodes is equal to number\r\n    of logical processors on machine) which are capable of handling single vcxproj\r\n    from build graph each yet still every node invokes CL compiler passing to it\r\n    /MP option with multiple files which should be compiled in a given project.\r\n\r\nThis triggers parallel compilation mechanism in CL and next group of CL subprocesses\r\n    are spawned equal to number of nodes for each node. Consequently during native compilation\r\n    we can see 64 CL processes on 4 core / 8 thread machine which can consume up to 14 GB\r\n    of memory. Overallocation mechanism is exponential and as a result on 8 core / 16 thread\r\n    machine each processor core will handle 16 CL processess with theoretically 2 times\r\n    higher memory consumption per core - total memory usage would grow from 14 GB to 56 GB.\r\n\r\nMSBuild does not provide any command line switches which could be used to directly\r\n    solve this problem. Setting /m:x will affect both - number of nodes and number of\r\n    CL processess spawned by each node which will be equal to number of nodes. There\r\n    is no direct method to decouple number of MSBuild nodes and number of CL processess\r\n    spawned by each node.\r\n\r\nTo achive this without changing MSBuild and CL code it is necessary to use workaround\r\n    and set values independetly. It is done by using /p:ForceImportBeforeCppTargets MSBuild\r\n    command line switch and setting /m:2 global maximum CPU switch. First switch forces\r\n    import of clr.nativebuild.props file contining maximum CPU settings used by CL compiler\r\n    and set to experimentally optimized number equal to number of enabled processor cores -\r\n    what is rather an expected value. Additionally it bypassess setting of MSBuild parallel\r\n    compilation general switch by setting MultiProcessorCompilation value to true.\r\n\r\nMSBuild /m:2 switch works incorrectly with vcxproj builds since it spawns as expected\r\n    only 2 nodes but the limit of top level CL processes allowed is 3 - spawning is done\r\n    indirectly with Tracker.exe executable. This means that with /m:2 and maximum CL count\r\n    being set to 4 we will get maximum 12 CL processes and not as expected 8 CL processess.\r\n\r\nAfter experimentally determining optimal /m:x and CL process count combinations it was\r\n    found that on i7-4700MQ Intel processor with 16 GB RAM memory consumption could be reduced\r\n    more than 4 times to 2.5 GB from 10.8 GB (during source-build 14 GB), and compilation time\r\n    was reduced from 00:15:19 (average of 3 runs) to 12:54 (average of 4 runs) by 15,7 %.\r\n\r\nIt is possible to further reduce amount of memory used during compilation but it does\r\n    negatively impact compilation time. The next best combination found was /m:3 and CL 3\r\n    with maximum memory usage 2.2 GB and compilation time 13:24 (average of 3 runs)\r\n    - 30 seconds worse than optimum.\r\n\r\nIt is possible to further optimise build process but this would require changes to\r\n    MSBuild and to Tracker or eventually CL executables.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/148842962", "body": "I have removed everything as per @weshaggard suggestion. The property `CLR_CMAKE_CORECLR_TARGETS` is left for future use in creating optimal build graph. If it should be removed as well and added later than I will do it.\r\n\r\nThere is still an open problem of reverting usage of `_add_xxx` wrappers. The question is in my previous comment at point 2: https://github.com/dotnet/coreclr/pull/14578#issuecomment-341141762 \r\n\r\n\r\n\r\n ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/148842962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/148863485", "body": "OK Will do it", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/148863485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "BruceForstall": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15886", "title": "Ubuntu x64 GCStress=C failure: ArrayWithThread_o", "body": "```\r\n20:15:45                BEGIN EXECUTION\r\n20:15:45                /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_gcstress0xc_tst_prtest/bin/tests/Linux.x64.Checked/Tests/Core_Root/corerun ArrayWithThread_o.exe\r\n20:15:45                Test 1 Failed\r\n20:15:45                Test 2 Passed\r\n20:15:45                Expected: 100\r\n20:15:45                Actual: 1\r\n20:15:45                END EXECUTION - FAILED\r\n```\r\n\r\nSeen:\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x64_checked_ubuntu_gcstress0xc_tst_prtest/23/consoleText\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x64_checked_ubuntu_gcstress0xc_jitstress1_tst_prtest/5/consoleText\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x64_checked_ubuntu_gcstress0xc_jitstress2_tst_prtest/5/consoleText\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15883", "title": "Native test components do not build with debug info", "body": "On Windows, I don't see PDBs for the native components in the test build, e.g. baseservices\\exceptions\\regressions\\Dev11\\147911, JIT\\jit64\\hfa\\main\\dll: hfa_*native*.dll.\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15852", "title": "Dev10_535767 fails with GCStress=3", "body": "For x86 Windows with `COMPlus_GCStress=3`, test baseservices\\compilerservices\\dynamicobjectproperties\\Dev10_535767\\Dev10_535767.cmd fails with output like this:\r\n\r\n```\r\n...\r\nRunning test TS:Random CS:Random 10000 entries...\r\nTestError: Node 87 wasn't collected even though it was unreachable\r\n```\r\n\r\nThe periodic job:\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x86_checked_windows_nt_gcstress0x3/\r\n\r\nBoth 58 and 57 show this failure.\r\n\r\nI don't see it on x64.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15851", "title": "SlowTailCallArgs test fails with timeout for GCStress=3", "body": "This recently added test (https://github.com/dotnet/coreclr/commit/1a67e84aca889cf94c716a7847cfe0b4d1ee62d6) fails in GCStress=3 jobs with timeout, e.g.:\r\n\r\nx64 Windows checked:\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x64_checked_windows_nt_gcstress0x3/63/#showFailuresLink\r\n\r\nx86 Windows checked:\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x86_checked_windows_nt_gcstress0x3/58/#showFailuresLink\r\n\r\nSeems like it might need to be marked\r\n```\r\n<GCStressIncompatible>true</GCStressIncompatible>\r\n```\r\nin SlowTailCallArgs.csproj, unless there is a better way to get it to pass in GCStress jobs.\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15851/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15847", "title": "CI machines not configured for dumpling.py", "body": "I've seen this many times, but not consistently:\r\n\r\n```\r\n04:20:27 RUNTEST: Created the runtime layout with all dependencies in D:\\j\\workspace\\x86_checked_w---344a5564\\tests\\..\\bin\\tests\\Windows_NT.x86.Checked\\Tests\\Core_Root\r\n04:20:28 Traceback (most recent call last):\r\n04:20:28   File \"D:\\j\\workspace\\x86_checked_w---344a5564\\Tools/dumpling.py\", line 33, in <module>\r\n04:20:28     import psutil\r\n04:20:28 ImportError: No module named psutil\r\n04:20:28 C:\\Python27\\python.exe: can't open file 'C:\\Users\\dotnet-bot/.dumpling/dumpling.py': [Errno 2] No such file or directory\r\n04:20:28 The system cannot find the drive specified.\r\n```\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x86_checked_windows_nt_gcstress0xc_prtest/30/console\r\n\r\nDo the CI machines need to do something to make sure `psutil` is installed? As a prereq?\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15847/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15843", "title": "Non-Windows GCStress CI setup error", "body": "Setting up the environment in the Jenkins CI for non-Windows GCStress jobs leads to a warning/error:\r\n```\r\n00:23:06 + ./init-tools.sh\r\n00:23:06 Tools are already initialized\r\n00:23:06 ./init-tools.sh: line 20: return: can only `return' from a function or sourced script\r\n```\r\ne.g.,\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x64_checked_ubuntu_gcstress0xc_tst_prtest/22/consoleFull\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x64_checked_osx10.12_gcstress0xc_tst_prtest/1/consoleFull\r\n\r\nThis is from init-tools.sh:\r\n```\r\nif [ -e $__BUILD_TOOLS_SEMAPHORE ]; then\r\n    echo \"Tools are already initialized\"\r\n    return #return instead of exit because this script is inlined in other scripts which we don't want to exit\r\nfi\r\n```\r\n\r\nAnd is due to this in netci.groovy:\r\n```\r\nif (isGCStressRelatedTesting(scenario)) {\r\n    shell('./init-tools.sh')\r\n}\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15843/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15842", "title": "OSX 10.12 GCStress test setup fails", "body": "https://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x64_checked_osx10.12_gcstress0x3_tst_prtest/3/consoleFull\r\n\r\n```\r\n00:14:33 Downloading CoreDisTools package\r\n00:14:33 + /Users/dotnet-bot/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_osx10.12_gcstress0x3_tst_prtest/tests/../Tools/dotnetcli/dotnet restore /Users/dotnet-bot/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_osx10.12_gcstress0x3_tst_prtest/tests/src/Common/stress_dependencies/stress_dependencies.csproj --source https://dotnet.myget.org/F/dotnet-core/ --packages /Users/dotnet-bot/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_osx10.12_gcstress0x3_tst_prtest/tests/../packages\r\n00:14:35   Restoring packages for /Users/dotnet-bot/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_osx10.12_gcstress0x3_tst_prtest/tests/src/Common/stress_dependencies/stress_dependencies.csproj...\r\n00:14:35   Installing Microsoft.NETCore.CoreDisTools 1.0.1-prerelease-00002.\r\n00:14:37   Installing runtime.win7-x86.Microsoft.NETCore.CoreDisTools 1.0.1-prerelease-00002.\r\n00:14:37   Installing runtime.win7-x64.Microsoft.NETCore.CoreDisTools 1.0.1-prerelease-00002.\r\n00:14:37   Installing runtime.ubuntu.14.04-x86.Microsoft.NETCore.CoreDisTools 1.0.1-prerelease-00002.\r\n00:14:37   Installing runtime.ubuntu.14.04-x64.Microsoft.NETCore.CoreDisTools 1.0.1-prerelease-00002.\r\n00:14:37   Generating MSBuild file /Users/dotnet-bot/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_osx10.12_gcstress0x3_tst_prtest/tests/src/Common/stress_dependencies/obj/stress_dependencies.csproj.nuget.g.props.\r\n00:14:37   Generating MSBuild file /Users/dotnet-bot/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_osx10.12_gcstress0x3_tst_prtest/tests/src/Common/stress_dependencies/obj/stress_dependencies.csproj.nuget.g.targets.\r\n00:14:37   Restore completed in 2.14 sec for /Users/dotnet-bot/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_osx10.12_gcstress0x3_tst_prtest/tests/src/Common/stress_dependencies/stress_dependencies.csproj.\r\n00:14:37 Copy library: --> /Users/dotnet-bot/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_osx10.12_gcstress0x3_tst_prtest/bin/tests/OSX.x64.Checked/Tests/Core_Root/\r\n00:14:37 usage: cp [-R [-H | -L | -P]] [-fi | -n] [-apvX] source_file target_file\r\n00:14:37        cp [-R [-H | -L | -P]] [-fi | -n] [-apvX] source_file ... target_directory\r\n00:14:37 Failed to copy the library\r\n```\r\n\r\ntests\\setup-stress-dependencies.sh fails due to missing `$libPath` value, and probably bad `cp` syntax for MacOS:\r\n```\r\n# Get library path\r\nlibPath=`find $packageDir | grep $rid | grep -m 1 libcoredistools`\r\nif [ ! -e $libPath ]; then\r\n    exit_with_error 1 'Failed to locate the downloaded library'\r\nfi\r\n\r\n# Copy library to output directory\r\necho 'Copy library:' $libPath '-->' $libInstallDir/\r\ncp -f $libPath $libInstallDir\r\nif [ $? -ne 0 ]\r\nthen\r\n    exit_with_error 1 \"Failed to copy the library\"\r\nfi\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15733", "title": "[arm32] Add support for Linux/arm32 hardware testing in netci", "body": "We have new Linux/arm32 machines running Ubuntu 14.04 available for testing in the .NET CI. Add support to netci.groovy and elsewhere for automatic testing of various baseline and stress modes.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15552", "title": "[RyuJIT/arm32] ReadyToRun test failures", "body": "Newly added R2R test jobs in Jenkins show many failures.\r\n\r\ne.g.:\r\n1. Basic R2R run (pri-0; probably should be pri-1): https://ci.dot.net/job/dotnet_coreclr/job/master/job/arm_cross_checked_windows_nt_r2r_tst_prtest/1/. 414 failures, 1526 pass.\r\n2. R2R minopts, pri-1. https://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/arm_cross_checked_windows_nt_r2r_jitminopts_tst_prtest/1/. 688 fail, 10492 pass.\r\n3. R2R jitstress=1. https://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/arm_cross_checked_windows_nt_r2r_jitstress1_tst_prtest/1/. 663 fail, 10517 pass.\r\n4. R2R jitstress=2. https://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/arm_cross_checked_windows_nt_r2r_jitstress2_tst_prtest/1/. 651 fail, 10529 pass.\r\n\r\nA spot check of failures shows everything is an access violation.\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15389", "title": "[ARM64] Test failures with JitStress=2, JitStressRegs=2", "body": "On Windows, in CI:\r\n```\r\nTests.lst=UInt64IConvertibleToDecimal.cmd_2785, , , Smrt00000001, , # CoreMangLib\\cti\\system\\uint64\\UInt64IConvertibleToDecimal\\UInt64IConvertibleToDecimal.cmd  CATS: Pri1;RT;EXPECTED_PASS\r\nTests.lst=b113239.cmd_8781, , , Smrt00000001, , # JIT\\Regression\\CLR-x86-JIT\\V1-M13-RTM\\b113239\\b113239\\b113239.cmd  CATS: EXPECTED_PASS;Pri1\r\nTests.lst=b02762.cmd_8868, , , Smrt00000001, , # JIT\\Regression\\CLR-x86-JIT\\V1.2-M01\\b02762\\b02762\\b02762.cmd  CATS: NEED_TRIAGE;EXPECTED_PASS;Pri1\r\n```\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/arm64_cross_checked_windows_nt_jitstress2_jitstressregs2_tst/3/\r\n\r\nOn repro:\r\n```\r\nBEGIN EXECUTION\r\n \"Z:\\gh\\coreclr2\\bin\\tests\\Windows_NT.arm64.checked\\Tests\\Core_Root\\corerun.exe\" UInt64IConvertibleToDecimal.exe \r\nBeginning test case UInt64IConvertibleToDecimal at 12/5/2017 6:06:20 PM\r\nRandom seed: 20010415; set environment variable CORECLR_SEED to this value to repro\r\n\r\n[Positive]\r\nBeginning scenario: PosTest1:UInt64 MaxValue to Decimal\r\nBeginning scenario: PosTest2:UInt64 MinValue to Decimal\r\nBeginning scenario: PosTest3:Random UInt64 between minValue and MaxValue to Decimal\r\nERROR!!!-005: the ActualResult is not the ExpectResult\r\n\r\nEnding test case at 12/5/2017 6:06:25 PM\r\nFAIL\r\nExpected: 100\r\nActual: 0\r\nEND EXECUTION - FAILED\r\nFAILED\r\nBEGIN EXECUTION\r\n \"Z:\\gh\\coreclr2\\bin\\tests\\Windows_NT.arm64.checked\\Tests\\Core_Root\\corerun.exe\" b113239.exe \r\nOPD2_VAL: -123456781234567\r\nwopd3L: 2241278343\r\nwtmp12: 64423304691192\r\nwtmp13: 64423304691192\r\nwtmp14: 826217536\r\nwtmp22: 10475404271\r\nwtmp23 (must be 826247535): 9416152128\r\nFAILED\r\nExpected: 100\r\nActual: -1\r\nEND EXECUTION - FAILED\r\nFAILED\r\nBEGIN EXECUTION\r\n \"Z:\\gh\\coreclr2\\bin\\tests\\Windows_NT.arm64.checked\\Tests\\Core_Root\\corerun.exe\" b02762.exe \r\nOPD2_VAL: -123456781234567\r\nwopd3L: 2241278343\r\nwtmp12: 64423304691192\r\nwtmp13: 64423304691192\r\nwtmp14: 826217536\r\nwtmp22: 10475404271\r\nwtmp23 (must be 826247535): 9416152128\r\nwtmp23!=826247535\r\nExpected: 100\r\nActual: 1\r\nEND EXECUTION - FAILED\r\nFAILED\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15381", "title": "ARM64 GCStress=3 failures", "body": "There are many failures in current Windows ARM64 GCStress=3 runs:\r\n```\r\nTests.lst=try-fault01.cmd_54, , , Smrt00000001, , # baseservices\\exceptions\\generics\\try-fault01\\try-fault01.cmd  CATS: EXPECTED_PASS;Pri1\r\nTests.lst=EnterExit08.cmd_178, , , Smrt00000001, , # baseservices\\threading\\generics\\Monitor\\EnterExit08\\EnterExit08.cmd  CATS: Pri1;LONG_RUNNING;EXPECTED_PASS\r\nTests.lst=TryEnter05.cmd_188, , , Smrt00000001, , # baseservices\\threading\\generics\\Monitor\\TryEnter05\\TryEnter05.cmd  CATS: Pri1;EXPECTED_PASS\r\nTests.lst=thread24.cmd_304, , , Smrt00000001, , # baseservices\\threading\\generics\\WaitCallback\\thread24\\thread24.cmd  CATS: Pri1;EXPECTED_PASS\r\nTests.lst=CompareExchangeTClass.cmd_344, , , Smrt00000001, , # baseservices\\threading\\interlocked\\compareexchange\\CompareExchangeTClass\\CompareExchangeTClass.cmd  CATS: EXPECTED_PASS;Pri1\r\nTests.lst=CompareExchangeTClass_1.cmd_345, , , Smrt00000001, , # baseservices\\threading\\interlocked\\compareexchange\\CompareExchangeTClass_1\\CompareExchangeTClass_1.cmd  CATS: EXPECTED_PASS;Pri1\r\nTests.lst=threadstatic07.cmd_517, , , Smrt00000001, , # baseservices\\threading\\threadstatic\\threadstatic07\\threadstatic07.cmd  CATS: EXPECTED_PASS;Pri1\r\nTests.lst=13662-a.cmd_472, , , Smrt00000001, , # baseservices\\threading\\regressions\\13662\\13662-a\\13662-a.cmd  CATS: EXPECTED_PASS;Pri1\r\nTests.lst=13662-b.cmd_473, , , Smrt00000001, , # baseservices\\threading\\regressions\\13662\\13662-b\\13662-b.cmd  CATS: EXPECTED_PASS;Pri1\r\nTests.lst=437044.cmd_481, , , Smrt00000001, , # baseservices\\threading\\regressions\\beta2\\437044\\437044.cmd  CATS: EXPECTED_PASS;Pri1\r\nTests.lst=ArraySort3.cmd_661, , , Smrt00000001, , # CoreMangLib\\cti\\system\\array\\ArraySort3\\ArraySort3.cmd  CATS: Pri1;RT;LONG_RUNNING;EXPECTED_PASS\r\nTests.lst=ArraySort3b.cmd_662, , , Smrt00000001, , # CoreMangLib\\cti\\system\\array\\ArraySort3b\\ArraySort3b.cmd  CATS: Pri1;RT;EXPECTED_PASS\r\nTests.lst=OpCodesConv_Ovf_U1.cmd_2003, , , Smrt00000001, , # CoreMangLib\\cti\\system\\reflection\\emit\\opcodes\\OpCodesConv_Ovf_U1\\OpCodesConv_Ovf_U1.cmd  CATS: Pri1;RT;EXPECTED_PASS\r\nTests.lst=StringCompare9.cmd_2463, , , Smrt00000001, , # CoreMangLib\\cti\\system\\string\\StringCompare9\\StringCompare9.cmd  CATS: Pri1;RT;EXPECTED_PASS\r\nTests.lst=IntConv.cmd_3595, , , Smrt00000001, , # JIT\\CodeGenBringUpTests\\IntConv\\IntConv.cmd  CATS: JIT;EXPECTED_PASS;Pri1\r\nTests.lst=StringEquals6.cmd_2481, , , Smrt00000001, , # CoreMangLib\\cti\\system\\string\\StringEquals6\\StringEquals6.cmd  CATS: Pri1;RT;EXPECTED_PASS\r\nTests.lst=castclass-generics045.cmd_5730, , , Smrt00000001, , # JIT\\jit64\\valuetypes\\nullable\\castclass\\generics\\castclass-generics045\\castclass-generics045.cmd  CATS: EXPECTED_PASS;Pri1\r\nTests.lst=_il_dbginitializearray_enum.cmd_5848, , , Smrt00000001, , # JIT\\Methodical\\Arrays\\misc\\_il_dbginitializearray_enum\\_il_dbginitializearray_enum.cmd  CATS: JIT;EXPECTED_PASS;Pri1\r\nTests.lst=_dbglcs2.cmd_5809, , , Smrt00000001, , # JIT\\Methodical\\Arrays\\lcs\\_dbglcs2\\_dbglcs2.cmd  CATS: JIT;EXPECTED_PASS\r\nTests.lst=_rellcs2.cmd_5819, , , Smrt00000001, , # JIT\\Methodical\\Arrays\\lcs\\_rellcs2\\_rellcs2.cmd  CATS: JIT;EXPECTED_PASS\r\nTests.lst=_speed_dbglcs2.cmd_5827, , , Smrt00000001, , # JIT\\Methodical\\Arrays\\lcs\\_speed_dbglcs2\\_speed_dbglcs2.cmd  CATS: JIT;EXPECTED_PASS\r\nTests.lst=_speed_rellcs2.cmd_5835, , , Smrt00000001, , # JIT\\Methodical\\Arrays\\lcs\\_speed_rellcs2\\_speed_rellcs2.cmd  CATS: JIT;EXPECTED_PASS\r\nTests.lst=Adams.cmd_7971, , , Smrt00000001, , # JIT\\Performance\\CodeQuality\\BenchF\\Adams\\Adams\\Adams.cmd  CATS: EXPECTED_PASS\r\nTests.lst=BenchMk2.cmd_7972, , , Smrt00000001, , # JIT\\Performance\\CodeQuality\\BenchF\\BenchMk2\\BenchMk2\\BenchMk2.cmd  CATS: EXPECTED_PASS\r\nTests.lst=BenchMrk.cmd_7973, , , Smrt00000001, , # JIT\\Performance\\CodeQuality\\BenchF\\BenchMrk\\BenchMrk\\BenchMrk.cmd  CATS: EXPECTED_PASS\r\nTests.lst=Bisect.cmd_7974, , , Smrt00000001, , # JIT\\Performance\\CodeQuality\\BenchF\\Bisect\\Bisect\\Bisect.cmd  CATS: EXPECTED_PASS\r\nTests.lst=DMath.cmd_7975, , , Smrt00000001, , # JIT\\Performance\\CodeQuality\\BenchF\\DMath\\DMath\\DMath.cmd  CATS: EXPECTED_PASS\r\nTests.lst=FFT.cmd_7976, , , Smrt00000001, , # JIT\\Performance\\CodeQuality\\BenchF\\FFT\\FFT\\FFT.cmd  CATS: EXPECTED_PASS\r\nTests.lst=InProd.cmd_7977, , , Smrt00000001, , # JIT\\Performance\\CodeQuality\\BenchF\\InProd\\InProd\\InProd.cmd  CATS: EXPECTED_PASS\r\nTests.lst=InvMt.cmd_7978, , , Smrt00000001, , # JIT\\Performance\\CodeQuality\\BenchF\\InvMt\\InvMt\\InvMt.cmd  CATS: EXPECTED_PASS\r\nTests.lst=LLoops.cmd_7979, , , Smrt00000001, , # JIT\\Performance\\CodeQuality\\BenchF\\LLoops\\LLoops\\LLoops.cmd  CATS: EXPECTED_PASS\r\nTests.lst=Lorenz.cmd_7980, , , Smrt00000001, , # JIT\\Performance\\CodeQuality\\BenchF\\Lorenz\\Lorenz\\Lorenz.cmd  CATS: EXPECTED_PASS\r\nTests.lst=MatInv4.cmd_7981, , , Smrt00000001, , # JIT\\Performance\\CodeQuality\\BenchF\\MatInv4\\MatInv4\\MatInv4.cmd  CATS: EXPECTED_PASS\r\nTests.lst=NewtE.cmd_7982, , , Smrt00000001, , # JIT\\Performance\\CodeQuality\\BenchF\\NewtE\\NewtE\\NewtE.cmd  CATS: EXPECTED_PASS\r\nTests.lst=NewtR.cmd_7983, , , Smrt00000001, , # JIT\\Performance\\CodeQuality\\BenchF\\NewtR\\NewtR\\NewtR.cmd  CATS: EXPECTED_PASS\r\nTests.lst=Regula.cmd_7984, , , Smrt00000001, , # JIT\\Performance\\CodeQuality\\BenchF\\Regula\\Regula\\Regula.cmd  CATS: EXPECTED_PASS\r\nTests.lst=Romber.cmd_7985, , , Smrt00000001, , # JIT\\Performance\\CodeQuality\\BenchF\\Romber\\Romber\\Romber.cmd  CATS: EXPECTED_PASS\r\nTests.lst=Secant.cmd_7986, , , Smrt00000001, , # JIT\\Performance\\CodeQuality\\BenchF\\Secant\\Secant\\Secant.cmd  CATS: EXPECTED_PASS\r\nTests.lst=Simpsn.cmd_7987, , , Smrt00000001, , # JIT\\Performance\\CodeQuality\\BenchF\\Simpsn\\Simpsn\\Simpsn.cmd  CATS: EXPECTED_PASS\r\nTests.lst=SqMtx.cmd_7988, , , Smrt00000001, , # JIT\\Performance\\CodeQuality\\BenchF\\SqMtx\\SqMtx\\SqMtx.cmd  CATS: EXPECTED_PASS\r\nTests.lst=Trap.cmd_7989, , , Smrt00000001, , # JIT\\Performance\\CodeQuality\\BenchF\\Trap\\Trap\\Trap.cmd  CATS: EXPECTED_PASS\r\nTests.lst=Whetsto.cmd_7990, , , Smrt00000001, , # JIT\\Performance\\CodeQuality\\BenchF\\Whetsto\\Whetsto\\Whetsto.cmd  CATS: EXPECTED_PASS\r\nTests.lst=8Queens.cmd_7991, , , Smrt00000001, , # JIT\\Performance\\CodeQuality\\BenchI\\8Queens\\8Queens\\8Queens.cmd  CATS: EXPECTED_PASS\r\nTests.lst=Ackermann.cmd_7992, , , Smrt00000001, , # JIT\\Performance\\CodeQuality\\BenchI\\Ackermann\\Ackermann\\Ackermann.cmd  CATS: EXPECTED_PASS\r\nTests.lst=AddArray.cmd_7993, , , Smrt00000001, , # JIT\\Performance\\CodeQuality\\BenchI\\AddArray\\AddArray\\AddArray.cmd  CATS: EXPECTED_PASS\r\nTests.lst=AddArray2.cmd_7994, , , Smrt00000001, , # JIT\\Performance\\CodeQuality\\BenchI\\AddArray2\\AddArray2\\AddArray2.cmd  CATS: EXPECTED_PASS\r\nTests.lst=Array1.cmd_7995, , , Smrt00000001, , # JIT\\Performance\\CodeQuality\\BenchI\\Array1\\Array1\\Array1.cmd  CATS: EXPECTED_PASS\r\nTests.lst=Array2.cmd_7996, , , Smrt00000001, , # JIT\\Performance\\CodeQuality\\BenchI\\Array2\\Array2\\Array2.cmd  CATS: EXPECTED_PASS\r\nTests.lst=BenchE.cmd_7997, , , Smrt00000001, , # JIT\\Performance\\CodeQuality\\BenchI\\BenchE\\BenchE\\BenchE.cmd  CATS: EXPECTED_PASS\r\nTests.lst=BubbleSort.cmd_7998, , , Smrt00000001, , # JIT\\Performance\\CodeQuality\\BenchI\\BubbleSort\\BubbleSort\\BubbleSort.cmd  CATS: EXPECTED_PASS\r\nTests.lst=BubbleSort2.cmd_7999, , , Smrt00000001, , # JIT\\Performance\\CodeQuality\\BenchI\\BubbleSort2\\BubbleSort2\\BubbleSort2.cmd  CATS: EXPECTED_PASS\r\nTests.lst=CSieve.cmd_8000, , , Smrt00000001, , # JIT\\Performance\\CodeQuality\\BenchI\\CSieve\\CSieve\\CSieve.cmd  CATS: EXPECTED_PASS\r\nTests.lst=Fib.cmd_8001, , , Smrt00000001, , # JIT\\Performance\\CodeQuality\\BenchI\\Fib\\Fib\\Fib.cmd  CATS: EXPECTED_PASS\r\nTests.lst=HeapSort.cmd_8002, , , Smrt00000001, , # JIT\\Performance\\CodeQuality\\BenchI\\HeapSort\\HeapSort\\HeapSort.cmd  CATS: EXPECTED_PASS\r\nTests.lst=IniArray.cmd_8003, , , Smrt00000001, , # JIT\\Performance\\CodeQuality\\BenchI\\IniArray\\IniArray\\IniArray.cmd  CATS: EXPECTED_PASS\r\nTests.lst=LogicArray.cmd_8004, , , Smrt00000001, , # JIT\\Performance\\CodeQuality\\BenchI\\LogicArray\\LogicArray\\LogicArray.cmd  CATS: EXPECTED_PASS\r\nTests.lst=Midpoint.cmd_8005, , , Smrt00000001, , # JIT\\Performance\\CodeQuality\\BenchI\\Midpoint\\Midpoint\\Midpoint.cmd  CATS: EXPECTED_PASS\r\nTests.lst=MulMatrix.cmd_8006, , , Smrt00000001, , # JIT\\Performance\\CodeQuality\\BenchI\\MulMatrix\\MulMatrix\\MulMatrix.cmd  CATS: EXPECTED_PASS\r\nTests.lst=NDhrystone.cmd_8007, , , Smrt00000001, , # JIT\\Performance\\CodeQuality\\BenchI\\NDhrystone\\NDhrystone\\NDhrystone.cmd  CATS: EXPECTED_PASS\r\nTests.lst=Permutate.cmd_8008, , , Smrt00000001, , # JIT\\Performance\\CodeQuality\\BenchI\\Permutate\\Permutate\\Permutate.cmd  CATS: EXPECTED_PASS\r\nTests.lst=Pi.cmd_8009, , , Smrt00000001, , # JIT\\Performance\\CodeQuality\\BenchI\\Pi\\Pi\\Pi.cmd  CATS: EXPECTED_PASS\r\nTests.lst=Puzzle.cmd_8010, , , Smrt00000001, , # JIT\\Performance\\CodeQuality\\BenchI\\Puzzle\\Puzzle\\Puzzle.cmd  CATS: EXPECTED_PASS\r\nTests.lst=QuickSort.cmd_8011, , , Smrt00000001, , # JIT\\Performance\\CodeQuality\\BenchI\\QuickSort\\QuickSort\\QuickSort.cmd  CATS: EXPECTED_PASS\r\nTests.lst=TreeInsert.cmd_8012, , , Smrt00000001, , # JIT\\Performance\\CodeQuality\\BenchI\\TreeInsert\\TreeInsert\\TreeInsert.cmd  CATS: EXPECTED_PASS\r\nTests.lst=TreeSort.cmd_8013, , , Smrt00000001, , # JIT\\Performance\\CodeQuality\\BenchI\\TreeSort\\TreeSort\\TreeSort.cmd  CATS: EXPECTED_PASS\r\nTests.lst=XposMatrix.cmd_8014, , , Smrt00000001, , # JIT\\Performance\\CodeQuality\\BenchI\\XposMatrix\\XposMatrix\\XposMatrix.cmd  CATS: EXPECTED_PASS\r\nTests.lst=b25701.cmd_8192, , , Smrt00000001, , # JIT\\Regression\\CLR-x86-JIT\\V1-M09.5-PDC\\b25701\\b25701\\b25701.cmd  CATS: JIT;EXPECTED_PASS\r\nTests.lst=b41990.cmd_8396, , , Smrt00000001, , # JIT\\Regression\\CLR-x86-JIT\\V1-M11-Beta1\\b41990\\b41990\\b41990.cmd  CATS: EXPECTED_PASS\r\nTests.lst=_speed_dbgstress1.cmd_7562, , , Smrt00000001, , # JIT\\Methodical\\refany\\_speed_dbgstress1\\_speed_dbgstress1.cmd  CATS: EXPECTED_PASS\r\nTests.lst=_speed_relvirtcall.cmd_7569, , , Smrt00000001, , # JIT\\Methodical\\refany\\_speed_relvirtcall\\_speed_relvirtcall.cmd  CATS: EXPECTED_PASS\r\nTests.lst=b80764.cmd_8762, , , Smrt00000001, , # JIT\\Regression\\CLR-x86-JIT\\V1-M12-Beta2\\b80764\\b80764\\b80764.cmd  CATS: EXPECTED_PASS;Pri1\r\nTests.lst=Generated1272.cmd_11380, , , Smrt00000001, , # Loader\\classloader\\TypeGeneratorTests\\TypeGeneratorTest1272\\Generated1272\\Generated1272.cmd  CATS: EXPECTED_PASS;NEW;Pri1\r\nTests.lst=NoGC.cmd_11700, , , Smrt00000001, , # GC\\API\\NoGCRegion\\NoGC\\NoGC.cmd  CATS: EXPECTED_PASS;NEW\r\n```\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/arm64_cross_checked_windows_nt_gcstress0x3_tst/23/artifact/bin/tests/Windows_NT.arm64.Checked/Smarty.run.0/Smarty.0.fail.smrt/*view*/\r\n\r\nWhile it appears it has never been clean, it also appears there has been a recent regression.\r\n\r\nThe CI job is here:\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/arm64_cross_checked_windows_nt_gcstress0x3_flow/\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15309", "title": "[RyuJIT/arm32][GCStress=3] Failures in GCStress=3 runs", "body": "It's not clear these are JIT bugs or other issues; generally GCStress=3 failures does not imply JIT bugs.\r\n```\r\nTests.lst=_dbglcs2.cmd_803, , , Smrt00000001, , # JIT\\Methodical\\Arrays\\lcs\\_dbglcs2\\_dbglcs2.cmd  CATS: EXPECTED_PASS\r\nTests.lst=_speed_dbglcs2.cmd_1650, , , Smrt00000001, , # JIT\\Methodical\\Arrays\\lcs\\_speed_dbglcs2\\_speed_dbglcs2.cmd  CATS: EXPECTED_PASS\r\nTests.lst=Dev10_535767.cmd_1682, , , Smrt00000001, , # baseservices\\compilerservices\\dynamicobjectproperties\\Dev10_535767\\Dev10_535767.cmd  CATS: EXPECTED_PASS;Pri1\r\nTests.lst=_rellcs2.cmd_2121, , , Smrt00000001, , # JIT\\Methodical\\Arrays\\lcs\\_rellcs2\\_rellcs2.cmd  CATS: EXPECTED_PASS\r\nTests.lst=_speed_rellcs2.cmd_2415, , , Smrt00000001, , # JIT\\Methodical\\Arrays\\lcs\\_speed_rellcs2\\_speed_rellcs2.cmd  CATS: EXPECTED_PASS\r\nTests.lst=ArraySort3.cmd_2866, , , Smrt00000001, , # CoreMangLib\\cti\\system\\array\\ArraySort3\\ArraySort3.cmd  CATS: EXPECTED_PASS;Pri1\r\nTests.lst=CompareExchangeTClass.cmd_3014, , , Smrt00000001, , # baseservices\\threading\\interlocked\\compareexchange\\CompareExchangeTClass\\CompareExchangeTClass.cmd  CATS: EXPECTED_PASS;Pri1\r\nTests.lst=_speed_relvirtcall.cmd_4088, , , Smrt00000001, , # JIT\\Methodical\\refany\\_speed_relvirtcall\\_speed_relvirtcall.cmd  CATS: EXPECTED_PASS\r\nTests.lst=ExternalException.cmd_4406, , , Smrt00000001, , # baseservices\\exceptions\\regressions\\V1\\SEH\\VJ\\ExternalException\\ExternalException.cmd  CATS: EXPECTED_PASS;GCSTRESS_FAIL;13203;Pri1\r\nTests.lst=CompareExchangeTClass_1.cmd_4723, , , Smrt00000001, , # baseservices\\threading\\interlocked\\compareexchange\\CompareExchangeTClass_1\\CompareExchangeTClass_1.cmd  CATS: EXPECTED_PASS;Pri1\r\nTests.lst=Collect0.cmd_5024, , , Smrt00000001, , # GC\\API\\GC\\Collect0\\Collect0.cmd  CATS: EXPECTED_PASS\r\nTests.lst=GCCollect.cmd_5027, , , Smrt00000001, , # CoreMangLib\\cti\\system\\gc\\GCCollect\\GCCollect.cmd  CATS: EXPECTED_PASS;Pri1\r\nTests.lst=objmonhelper.cmd_5924, , , Smrt00000001, , # baseservices\\threading\\regressions\\269336\\objmonhelper\\objmonhelper.cmd  CATS: EXPECTED_PASS;GCSTRESS_FAIL;13200;Pri1\r\nTests.lst=b80737.cmd_10094, , , Smrt00000001, , # JIT\\Regression\\VS-ia64-JIT\\M00\\b80737\\b80737\\b80737.cmd  CATS: EXPECTED_PASS;Pri1\r\nTests.lst=smalloom.cmd_10071, , , Smrt00000001, , # GC\\Coverage\\smalloom\\smalloom.cmd  CATS: EXPECTED_PASS;Pri1\r\nTests.lst=NoGC.cmd_11390, , , Smrt00000001, , # GC\\API\\NoGCRegion\\NoGC\\NoGC.cmd  CATS: EXPECTED_PASS;NEW\r\n```\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/arm_cross_checked_windows_nt_gcstress0x3_tst_prtest/2/\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15309/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15304", "title": "[RyuJIT/arm32] Make altjit corefx runs clean", "body": "The x86_arm_altjit corefx runs have errors that are not asserts. Fix any issues that prevent these runs from being clean.\r\n\r\nFor example, we already needed to disable XSLT tests when running the altjit: https://github.com/dotnet/coreclr/pull/14873.\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15289", "title": "[RyuJIT/arm32/arm64] Enable IL asm round-trip testing in CI", "body": "The following job needs to be enabled for arm/armlb/arm64:\r\n\r\n```\r\n'ilrt'\r\n```\r\n\r\nThis is a similar issue to #15283.\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15287", "title": "[RyuJIT/arm32/arm64] Enable additional GC mode testing in CI", "body": "The following GC jobs need to be enabled for arm/armlb/arm64:\r\n```\r\n'longgc'\r\n'gcsimulator'\r\n'standalone_gc'\r\n'gc_reliability_framework'\r\n```\r\n\r\nThis is similar to #15283 in that the generated test wrappers contain scripting related to this, e.g.:\r\n```\r\nREM Long GC script\r\nif defined RunningLongGCTests (\r\n  echo Skipping execution because this is not a long-running GC test.\r\n  Exit /b 0\r\n)\r\nREM GCSimulator script\r\nif defined RunningGCSimulatorTests (\r\n  echo Skipping execution because this is not a GCSimulator test.\r\n  Exit /b 0\r\n)\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15286", "title": "[RyuJIT/arm32/arm64] Enable illink testing in CI", "body": "This has similar issues to https://github.com/dotnet/coreclr/issues/15283: The current illink testing has significant scripting in the generated test wrappers.\r\n\r\nAlso, need to make sure the ILLINK tool is available on arm32/arm64.\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15284", "title": "[RyuJIT/arm32/arm64] Enable corefx testing in CI", "body": "Enable corefx testing for arm/armlb/arm64 in Jenkins CI, specifically these flavors (to be consistent with other platforms):\r\n```\r\n'corefx_baseline'\r\n'corefx_minopts'\r\n'corefx_tieredcompilation'\r\n'corefx_jitstress1'\r\n'corefx_jitstress2'\r\n'corefx_jitstressregs1'\r\n'corefx_jitstressregs2'\r\n'corefx_jitstressregs3'\r\n'corefx_jitstressregs4'\r\n'corefx_jitstressregs8'\r\n'corefx_jitstressregs0x10'\r\n'corefx_jitstressregs0x80'\r\n'corefx_jitstressregs0x1000'\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15169", "title": "[arm64] GC\\API\\NoGCRegion\\NoGC\\NoGC.cmd is slow on Debug", "body": "On my Windows ARM64 machine, the `GC\\API\\NoGCRegion\\NoGC\\NoGC.cmd` test takes about 3.5 minutes on Checked, but over 20 minutes on Debug. I believe this is why all the ARM64 Debug build and tests CI runs are failing on this test, due to a timeout.\r\n\r\nWhat is the best way to address this long running test? One option: disable the test in tests\\arm64\\tests.lst. This would disable it for all runs. Or, we could add a \"NOT_IN_DEBUG\" category to the test and change the CI to not run tests in this category during Debug test runs.\r\n\r\nI notice the test doesn't have the `<IsLongRunningGCTest>true</IsLongRunningGCTest>` tag in its metadata. Maybe because it is only long running in this one case? (It also turns out arm64 doesn't use this metadata.)\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15169/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15156", "title": "[RyuJIT/arm32][JitStress=2][JitStressRegs=3] Test failure: dlstack.cmd", "body": "Test `GC\\Scenarios\\DoublinkList\\dlstack\\dlstack.cmd` fails with:\r\n\r\n```\r\nCOMPlus_JitStress=2\r\nCOMPlus_JitStressRegs=3\r\n```\r\n\r\noutput:\r\n```\r\nBEGIN EXECUTION\r\n \"c:\\brucefo\\core_root\\Windows_NT.arm.Checked.2017-11-11\\corerun.exe\" dlstack.exe\r\nTest should return with ExitCode 100 ...\r\n Performing Collect/Wait/Collect cycle again\r\n Finalized number stable at 9990\r\n9990 DLinkNodes finalized\r\nTest Failed\r\nExpected: 100\r\nActual: 1\r\n```\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/arm_cross_checked_windows_nt_jitstress2_jitstressregs3_tst_prtest/1/artifact/bin/tests/Windows_NT.arm.Checked/Smarty.run.0/Smarty.0.fail.smrt/*view*/", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15150", "title": "[RyuJIT/arm32] Assert failure: pImportSection == pModule->GetImportSectionForRVA(rva)", "body": "Test failure with Checked ARM run on Release test build, on Windows hardware.\r\n\r\nHappens with JitStressRegs=1 and JitStressRegs=8.\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/arm_cross_checked_windows_nt_jitstressregs1_tst_prtest/2/artifact/bin/tests/Windows_NT.arm.Checked/Smarty.run.0/Smarty.0.fail.smrt/*view*/\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/arm_cross_checked_windows_nt_jitstressregs8_tst_prtest/2/artifact/bin/tests/Windows_NT.arm.Checked/Smarty.run.0/Smarty.0.fail.smrt/*view*/\r\n\r\nSimilar (or identical) bugs: #12659, #12660\r\n\r\nTests:\r\n```\r\nreadytorun\\tests\\mainv1\\mainv1.cmd\r\nreadytorun\\tests\\mainv2\\mainv2.cmd\r\n```\r\n\r\nMessage:\r\n\r\n```\r\nAssert failure(PID 18548 [0x00004874], Thread: 20360 [0x4f88]): pImportSection == pModule->GetImportSectionForRVA(rva)\r\n\r\n<no module>! <no symbol> + 0x0 (0x00000000)\r\n    File: e:\\gh\\coreclr2\\src\\vm\\prestub.cpp Line: 2090\r\n    Image: c:\\brucefo\\core_root\\Windows_NT.arm.Checked.2017-11-11\\CoreRun.exe\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15037", "title": "[RyuJIT/arm64][JitStressRegs=0x80] Assertion failed 'regRecord->assignedInterval == nullptr'", "body": "x64_arm64_altjit, with `COMPlus_JitStressRegs=0x80`:\r\n\r\n```\r\nset COMPlus_JitStressRegs=0x80\r\n\r\nset COMPlus_AltJit=*\r\nset COMPlus_AltJitNgen=*\r\nset COMPlus_AltJitName=protononjit.dll\r\nset COMPlus_NoGuiOnAssert=1\r\nset COMPlus_AltJitAssertOnNYI=1\r\nset COMPlus_AltJitSkipOnAssert=0\r\nset COMPlus_ContinueOnAssert=0\r\n```\r\n\r\nFailure:\r\n\r\n```\r\nAssert failure(PID 18784 [0x00004960], Thread: 11324 [0x2c3c]): Assertion failed 'regRecord->assignedInterval == nullptr' in 'Gen`1[Int32][System.Int32]:Target(ref):this' (IL size 158)\r\n\r\n    File: e:\\gh\\coreclr2\\src\\jit\\lsra.cpp Line: 12846\r\n    Image: E:\\gh\\coreclr2\\bin\\tests\\Windows_NT.x64.checked\\Tests\\Core_Root\\CoreRun.exe\r\n```\r\n\r\nTest:\r\n```\r\nbaseservices\\threading\\generics\\TimerCallback\\tighttimercallback\\tighttimercallback.cmd\r\n```\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x64_arm64_altjit_checked_windows_nt_jitstressregs0x80_prtest/5/consoleText\r\n\r\nThe same test also fails with a different assert with different stress modes: https://github.com/dotnet/coreclr/issues/15036\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15036", "title": "[RyuJIT/arm64][JitStress=1] Assertion failed 'interval->physReg != REG_NA && interval->physReg != REG_STK'", "body": "With x64_arm64_altjit:\r\n\r\n```\r\nset COMPlus_JitStress=1\r\n\r\nset COMPlus_AltJit=*\r\nset COMPlus_AltJitNgen=*\r\nset COMPlus_AltJitName=protononjit.dll\r\nset COMPlus_NoGuiOnAssert=1\r\nset COMPlus_AltJitAssertOnNYI=1\r\nset COMPlus_AltJitSkipOnAssert=0\r\nset COMPlus_ContinueOnAssert=0\r\n```\r\n\r\nfailure:\r\n\r\n```\r\nAssert failure(PID 3976 [0x00000f88], Thread: 13768 [0x35c8]): Assertion failed 'interval->physReg != REG_NA && interval->physReg != REG_STK' in 'Gen`1[__Canon][System.__Canon]:Target(ref):this' (IL size 158)\r\n\r\n    File: e:\\gh\\coreclr2\\src\\jit\\lsra.cpp Line: 7658\r\n    Image: E:\\gh\\coreclr2\\bin\\tests\\Windows_NT.x64.checked\\Tests\\Core_Root\\CoreRun.exe\r\n```\r\n\r\nTest:\r\n```\r\nbaseservices\\threading\\generics\\TimerCallback\\tighttimercallback\\tighttimercallback.cmd \r\n```\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x64_arm64_altjit_checked_windows_nt_jitstress1_prtest/12/consoleText\r\n\r\nAlso, JitStress=2.\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15016", "title": "[ARM64] Failing Debug tests", "body": "The following tests are failing on ARM64 in Debug runs (Windows_NT arm64 Cross Debug Innerloop Build).\r\n\r\n```\r\n[bestfit-threaded.cmd_2934] GC\\Features\\HeapExpansion\\bestfit-threaded\\bestfit-threaded.cmd\r\n[494226.cmd_2987] GC\\Regressions\\v2.0-rtm\\494226\\494226\\494226.cmd\r\n[leakwheel.cmd_3455] GC\\Scenarios\\LeakWheel\\leakwheel\\leakwheel.cmd\r\n[LdfldaHack.cmd_8968] JIT\\Regression\\CLR-x86-JIT\\v2.1\\DDB\\B168384\\LdfldaHack\\LdfldaHack.cmd\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14977", "title": "Tests.lst files need to be regenerated", "body": "The ARM and ARM64 tests.lst files need to be regenerated.\r\n\r\nNamely:\r\n```\r\ntests\\arm\\Tests.lst\r\ntests\\arm64\\Tests.lst\r\n```\r\n\r\nWith https://github.com/dotnet/coreclr/pull/13994, the BenchmarkGame tests were disabled from running on ARM and ARM64 because they were all renamed. We need to get these re-added to the tests.lst files with the correct names, so they will be run.\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14842", "title": "ARM64 Windows build: warning D9002: ignoring unknown option '/diagnostics:classic'", "body": "Something is causing the `/diagnostics:classic` switch to be thrown for the ARM64 Windows build, and the old toolset we use apparently doesn't understand it, leading to thousands of these warnings.\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/256d12a38d9846ffb3ab859a5de360d94f276ba1", "message": "Merge pull request #15944 from BruceForstall/CorefxTestUseCorrectVersion\n\nFor corefx testing, use a matching corefx repo version git hash"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/7f4fbdbbaa6f9874678efa7a2cf7463502480fe6", "message": "Merge pull request #15948 from fiigii/fix-ifdef\n\nFix a minor bug"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/c7c2869ca0def15c25b8043ac78a378e0145bac8", "message": "Merge pull request #15945 from dotnet-bot/from-tfs\n\nMerge changes from TFS"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/79a08ff79ff73fbfb5009236ee9f3201d2226bb4", "message": "Fix desktop build\n\n1. Fix `LEGACY_BACKEND`\n2. `#if FEATURE_HW_INTRINSICS` => `#ifdef FEATURE_HW_INTRINSICS`\n\n[tfs-changeset: 1686599]"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/13b6b8f628a6be3c5890d739549c31f67db4580d", "message": "Add CI support for updated run-corefx-tests.py\n\nChange CI to build a \"GenerateLayoutOnly\" drop for corefx testing,\nspecifically to cause the corefx package to be restored, so we\ncan determine its version."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/96124407444fd130e337f055d9d365e4b761c94e", "message": "For corefx testing, use a matching corefx repo version git hash\n\nIf the user doesn't specify a specific corefx commit hash to use,\ntry to find the matching commit hash in the coreclr repro. If the\nmatching hash can't be found, use 'HEAD'.\n\nWe find the matching corefx commit hash by first parsing file\n'dependencies.props' at the root of the coreclr repro, looking for this:\n   <MicrosoftPrivateCoreFxNETCoreAppPackageVersion>4.5.0-preview1-26112-01</MicrosoftPrivateCoreFxNETCoreAppPackageVersion>\nThis determines the corefx package version that matches. Next, we look for the version.txt\nfile in the package cache, e.g.,\n   <coreclr_root>\\packages\\microsoft.private.corefx.netcoreapp\\4.5.0-preview1-26112-01\\version.txt\nThe contents of this file is exactly the git commit hash\nwe need to use, e.g.:\n   197a0699b08087ea85581679afdd9fd7b5c465c3\nThe version.txt file is created when the corefx package is restored,\nwhich happens when doing one of:\n   Windows: tests\\runtests.cmd GenerateLayoutOnly\n   non-Windows: build-test.sh generatelayoutonly\n\nIt would also be possible to not depend on the package already\nbeing downloaded, but instead download the correct package here,\nusing the determined \"MicrosoftPrivateCoreFxNETCoreAppPackageVersion\"\npackage version, e.g.:\n   https://dotnet.myget.org/F/dotnet-core/api/v2/package/Microsoft.Private.CoreFx.NETCoreApp/4.5.0-preview1-26112-01\nand then extracting the ZIP archive to find the version.txt file.\n\nThis might get easier if the corefx commit hash is added directly to dependencies.props, as\ndiscussed in https://github.com/dotnet/buildtools/issues/1141."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/7718dec89930cc12575f060ee6a0161b7c63765f", "message": "Merge pull request #15920 from BruceForstall/AllowArmJitHaltPopup\n\nAllow COMPlus_JitHalt to display a pop-up on ARM/ARM64"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/8c0e8e3929efd465b931ae13927dd06115609527", "message": "Allow COMPlus_JitHalt to display a pop-up on ARM/ARM64\n\nNote that you need to `set COMPlus_NoGuiOnAssert=0` for the\npop-up to be displayed."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/b76fdf6329aab09e21ad65d4d7497df1ce7b66cf", "message": "Merge pull request #15893 from BruceForstall/FixR2RCrossgen\n\nFix non-Windows R2R testing in CI"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/ef90a3eb883ae9e1860e576c24e83d34cb8e4489", "message": "Merge pull request #15894 from BruceForstall/DisableGetGenerationInGCStress\n\nDisable GetGeneration from GCStress runs"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/17074b276f4ba82132d4e3c6b1f7eb9619e25aed", "message": "Disable GetGeneration from GCStress runs\n\nThis test has exhibited \"random\" failures during GCStress runs\n(which are believed to be due to the test itself, not some\nproduct issue). So, disable it from GCStress runs."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/18108e4306305cb2152203b6c777f799b63f76b5", "message": "Fix non-Windows R2R testing in CI\n\nThe xunit.performance.api.dll assembly depends on\nMicrosoft.3rdpartytools.MarkdownLog, which cannot\nbe found. Add xunit.performance.api.dll to the\nlist of assemblies that are not crossgen'ed\nduring R2R testing."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/19cdca17c21ce4a573ce6c40b3c1befaf4468bd3", "message": "Merge pull request #15850 from BruceForstall/FastGCStress\n\nDo fast GC stress on some extreme tests"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/6af8669318e9cf93daba5351ed89c212467554fd", "message": "Merge pull request #15822 from BruceForstall/FixWriteBarrierHelperKills\n\nFix ARM GCStress hole with byref write barrier helper"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/9348fda637137190eddd66c6a95706019fc65887", "message": "Do fast GC stress on some extreme tests\n\nSet COMPlus_FastGCStress=1 to avoid GC in the\n`CoreCLR!JIT_Stelem_Ref => CoreCLR!ArrayStoreCheck` path."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/3d6da797d1f7dc47d5934189787a4e8006ab3a04", "message": "Merge pull request #15835 from BruceForstall/FixGCKeepAlive\n\nFix GC.KeepAlive test case"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/57ea03473769229286f42af655a8ce916ba9f072", "message": "Merge pull request #15832 from BruceForstall/DisableNoGCInStress\n\nDisable NoGC test in GCStress test runs"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/d087b29b9f68db08e6606a50d8ce2e80fe156dbf", "message": "Fix GC.KeepAlive test case\n\nIn the test, as written, a GC could sneak in between the GC.KeepAlive()\ncall and the subsequent line that checks whether the finalizer\nhas run, especially in GC stress modes. Simply move the GC.KeepAlive()\ncall down."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/ff60c21fb2c963139bd04f8e36eb649d8932c519", "message": "Disable NoGC test in GCStress test runs"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/737b41bb7ae9355e4c981ff02c8f2e84d529ef02", "message": "Fix non-Windows compile error"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/d84eba26320c2400be64bc4ff5dd9157f64a640e", "message": "Fix ARM GCStress hole with byref write barrier helper\n\nWhen unrolling a STOREOBJ, we can generate multiple consecutive\nbyref helper calls. This helper has a unique calling convention\nwhere the dst and src addresses are modified by adding pointer\nsize to their original value (thus allowing consecutive helper\ncalls without reloading the dst/src addresses). So, for liveness\npurposes, the helper call kills the dst/src values. However, for\nGC purposes, it does not, as the registers still contain byref\npointers. We were, in the ARM case, reporting the r0/r1 registers\ndead after the first call, so a GC didn't update them, and a\nsecond call updated garbage.\n\nIn fixing this, I cleaned up the helper call kill handling a bit.\nI also fixed and improved RyuJIT/x86 write barrier kill modeling."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/83a769b5db713895fb26904c3ba6c798b27e7434", "message": "Merge pull request #15706 from dotnet-bot/from-tfs\n\nMerge changes from TFS"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/ec76b8a2df66a5ddfcd5cc373221a6d32a73dbd3", "message": "Merge pull request #15614 from BruceForstall/AddPushPeriodicViews\n\nAdd more Views to Jenkins UI"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/7a586656822e41cb16a069f5471335fa18703988", "message": "Merge pull request #15602 from sdmaclea/PR-HWINT-XARCH-DEP\n\n[Arm64] getBaseTypeAndSizeOfSIMDType"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/c1b2aca2fd9872b378984c7b2d3881df909a1432", "message": "Merge pull request #15698 from mikedn/patch-1\n\nFix minor formatting issue in jit-call-morphing.md"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/0950d37d84bb4af988c56fecd93fb174aece7277", "message": "Merge pull request #15692 from BruceForstall/DisableJitdiffJobs\n\nDisable jitdiff jobs"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/f9683198b1866a3c8ddf0490174323bfcea5c304", "message": "Disable jitdiff jobs\n\nThey are failing now. Disable them until someone puts the effort\nin to make them fully work."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/4d4135e9c8540e811f9668d4b87707b16478ac37", "message": "Merge pull request #15658 from BruceForstall/FixBuildWarnings\n\nFix desktop build warnings"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/6a12b30942531e9342081c46499d40cc8746ff98", "message": "Fix desktop build warnings"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/f1c2c62f28185ab2e789d62bc153988de039b6da", "message": "Make views recursive"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/1f4957e7c36a0b9288a89d5216e4403e86c849e7", "message": "Try Views class"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/222be51f1b12d32c8f8b40b76c91636480de0596", "message": "Mark view variables static"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/99bc7b0db7a17396a24960d9ef59e474af15839b", "message": "Add more Views to Jenkins UI\n\nAdd specific views for:\n1. All push jobs (view named \"Merge\")\n2. All periodic jobs\n3. A view per architecture\n4. A view per OS\n\nThis allows looking at a much smaller subset of the entire set of jobs.\n\nNone of the specific views include PR jobs."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/0f97a82d81c32c388fb69a17fe9dd4d21cd2efd2", "message": "Merge pull request #15610 from BruceForstall/UpBuildOnlyTimeout\n\nIncrease build only job timeouts"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/f5b7a3f814534e27667a4caa7baa68c0802de582", "message": "Increase build only job timeouts\n\nJobs such as checked_windows_nt_bld that now build Pri-1 tests\nare timing out. Increase BuildOnly timeouts to compensate."}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15715", "title": "WIP NO MERGE Dummy change 1", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15383", "title": "[WIP][DO NOT MERGE] Dummy change - arm64 testing", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/14848", "title": "WIP DO NOT MERGE Dummy change: ARM native", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/14802", "title": "[WIP] DO NOT MERGE Dummy change: arm altjit", "body": "arm32 testing", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/12408925", "body": "LGTM. I don't think we have the non-helper call versions of these implemented yet for ARM64 \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/12408925/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/60100311", "body": "I would say this calling convention is fairly set in stone at this point.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/60100311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/69632045", "body": "I agree, but when I wrote this decided to leave them in, since \"the implementation is the spec\" in this case. We could try to formalize it better.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/69632045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/89905427", "body": "typo: accross => across", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/89905427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/92061929", "body": "Obviously, you'll want to be more verbose about the details here when the implementation gets finalized. E.g., that thread abort isn't handled since cloned finally clauses aren't reported.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/92061929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/140357181", "body": "Nit: I would say: `In the JIT, this is encapsulated in the VirtualStubParamInfo class`.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/140357181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "MichalStrehovsky": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15866", "title": "[Default interfaces] Debugger support", "body": "This tracks checking whether we need any work on the debugger side to be able to invoke default interface methods and if any work is needed, this will track the work in question.\r\n\r\nAt minimum, we'll need support for invoking shared instance methods on generic interfaces. Those are kind of special.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15866/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15865", "title": "[Default interfaces] Revise the timing of exception for ambiguous target", "body": "Throwing a `NotSupportedException` at the time the interface method is called (vs. when the problematic type was loaded) doesn't match how the CLR is doing similar kinds of validation: the type loader generally validates everything upfront and throws a `TypeLoadException` when a problem is found.\r\n\r\nNot sure what motivated this. The comments seem to indicate it's perf, but had we cared about perf, we could be validating a lot less at type load time. The precedent has been set to validate everything.\r\n\r\nhttps://github.com/dotnet/coreclr/blob/2f3fa55c05bd4c2c60eb627d41634efaf46d20d3/src/vm/methodtablebuilder.cpp#L10689-L10691\r\n\r\nIt's not clear what kinds of failure modes this can bring (e.g. What does the GetInterfaceMap reflection API return when a type like this is loaded? What impact does this have on AOT compilation?).\r\n\r\nThis issue tracks:\r\n* Checking if this behavior was approved by the appropriate committee and if not,\r\n* This issue is going to track moving the check to the appropriate location", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15864", "title": "[Default interfaces] The exception message on ambiguous target is wrong", "body": "```\r\nUnhandled Exception: System.NotSupportedException: Could not call method 'IFoo' on interface 'IFoo.Frob()' with type 'Fooer' from assembly 'simple, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' because there are more than one incompatible interface method overriding this method.\r\n```\r\n\r\n* Interface name and interface method name are flipped\r\n* One of the `method` occurrences should be plural\r\n\r\n```\r\n.assembly extern mscorlib { }\r\n\r\n.assembly simple { }\r\n\r\n.class interface private abstract auto ansi IFoo\r\n{\r\n  .method public hidebysig newslot abstract virtual instance int32 Frob() cil managed\r\n  {\r\n  }\r\n}\r\n\r\n.class interface private abstract auto ansi IBar\r\n       implements IFoo\r\n{\r\n  .method public hidebysig newslot virtual final instance int32 Frob() cil managed\r\n  {\r\n    .override IFoo::Frob\r\n    ldc.i4.0\r\n    ret\r\n  }\r\n}\r\n\r\n.class interface private abstract auto ansi IBaz\r\n       implements IFoo\r\n{\r\n  .method public hidebysig newslot virtual final instance int32 Frob() cil managed\r\n  {\r\n    .override IFoo::Frob\r\n    ldc.i4.1\r\n    ret\r\n  }\r\n}\r\n\r\n.class private auto ansi beforefieldinit Fooer\r\n       extends [mscorlib]System.Object\r\n       implements IBar, IBaz\r\n{\r\n  .method public hidebysig specialname rtspecialname \r\n          instance void .ctor() cil managed\r\n  {\r\n    ldarg.0\r\n    call instance void [mscorlib]System.Object::.ctor()\r\n    ret\r\n  }\r\n}\r\n\r\n.method public hidebysig static int32 Main() cil managed\r\n{\r\n  .entrypoint\r\n  newobj instance void Fooer::.ctor()\r\n  callvirt instance int32 IFoo::Frob()\r\n  ret\r\n}\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15861", "title": "[Default interfaces] Interfaces implemented by arrays", "body": "The way default interface methods got implemented in CoreCLR likely means we can't add default interface methods to any of the generic interfaces implemented by arrays.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15861/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15683", "title": "[Default interfaces] Interaction with COM interop", "body": "", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15682", "title": "[Default interfaces] NGen support", "body": "", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15682/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15681", "title": "[Default Interfaces] Support constrained interface calls on value types", "body": "", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15650", "title": "[Default interfaces] Define semantics for static initializers", "body": "The way I understand the intent of I.8.9.5 in ECMA-335, the following code should return an exit code of 100, but doesn't.\r\n\r\nIn particular, we might want to mirror the \"first invocation of any instance or virtual method of that type if it is a value type\" rule for interface types since \"first invocation of any constructor for that type\" doesn't cover the interface case (same way it doesn't cover it for valuetypes).\r\n\r\n```\r\n.assembly extern mscorlib { }\r\n.assembly cctor { }\r\n\r\n.class interface private abstract auto ansi IFoo\r\n{\r\n  .method private hidebysig specialname rtspecialname static \r\n          void  .cctor() cil managed\r\n  {\r\n    .maxstack  8\r\n    ldc.i4.s   100\r\n    stsfld int32 s_result\r\n    ret\r\n  }\r\n\r\n  .method public hidebysig newslot virtual \r\n          instance void Frob() cil managed\r\n  {\r\n    .maxstack  8\r\n    ret\r\n  }\r\n}\r\n\r\n.class private auto ansi beforefieldinit Fooer\r\n       extends [mscorlib]System.Object\r\n       implements IFoo\r\n{\r\n  .method public hidebysig specialname rtspecialname \r\n          instance void  .ctor() cil managed\r\n  {\r\n    .maxstack  8\r\n    ldarg.0\r\n    call       instance void [mscorlib]System.Object::.ctor()\r\n    ret\r\n  }\r\n}\r\n\r\n.field public static int32 s_result\r\n\r\n.method private hidebysig static int32 \r\n        Main() cil managed\r\n{\r\n  .entrypoint\r\n  .maxstack  8\r\n  newobj     instance void Fooer::.ctor()\r\n  callvirt   instance void IFoo::Frob()\r\n  ldsfld int32 s_result\r\n  ret\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15649", "title": "[Default interfaces] Add support for default interfaces in type generator", "body": "This is a tool that generates tests a la `Loader\\classloader\\TypeGeneratorTests`. It has proved useful in finding corner case method resolution bugs in the past.\r\n\r\nWe might want to generate tests with this and ensure we have plenty of time to fix found bugs.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15648", "title": "[Default interfaces] Support default interface methods in Reflection.Emit", "body": "Need to be able to generate these dynamically.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15647", "title": "[Default interfaces] Ensure test coverage for static methods and fields on interfaces", "body": "Static members on interfaces have been a supported feature since the beginning, but it's unclear how much test coverage there is for this (I'm pretty sure static methods on generic interfaces don't work right on Project N, for example, and I found out by accident - not because we had failing tests).\r\n\r\nThe C# language is adding support for these as part of the default interfaces feature. We need to make sure there's test coverage for using these statically, and dynamically, with reflection.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15646", "title": "[Default interfaces] Support for DispatchProxy", "body": "We need to make sure when the interface is used with `DispatchProxy`, the default interface implementation is used instead of calling the `Invoke` method on the proxy.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15645", "title": "[Default interfaces] Type.GetInterfaceMap support", "body": "This is a [reflection API](https://msdn.microsoft.com/en-us/library/system.type.getinterfacemap(v=vs.110).aspx) that likely needs to learn about default interfaces.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15645/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15644", "title": "[Default Interfaces] Support for reflection invoke", "body": "This will currently assert in ``MemberInfoCache`1::PopulateMethods``:\r\n\r\n```\r\n.assembly extern mscorlib { }\r\n.assembly simpleinvoke { }\r\n\r\n.class interface private abstract auto ansi IFoo\r\n{\r\n  .method public hidebysig newslot virtual \r\n          instance int32  Frob() cil managed\r\n  {\r\n    .maxstack  8\r\n    ldc.i4.s   100\r\n    ret\r\n  }\r\n}\r\n\r\n.class private auto ansi beforefieldinit Fooer\r\n       extends [mscorlib]System.Object\r\n       implements IFoo\r\n{\r\n  .method public hidebysig specialname rtspecialname \r\n          instance void  .ctor() cil managed\r\n  {\r\n    .maxstack  8\r\n    IL_0000:  ldarg.0\r\n    IL_0001:  call       instance void [mscorlib]System.Object::.ctor()\r\n    IL_0006:  ret\r\n  }\r\n}\r\n\r\n.method private hidebysig static int32 \r\n        Main() cil managed\r\n{\r\n  .entrypoint\r\n  .maxstack  8\r\n  ldtoken    IFoo\r\n  call       class [mscorlib]System.Type [mscorlib]System.Type::GetTypeFromHandle(valuetype [mscorlib]System.RuntimeTypeHandle)\r\n  ldstr      \"Frob\"\r\n  call       instance class [mscorlib]System.Reflection.MethodInfo [mscorlib]System.Type::GetMethod(string)\r\n  newobj     instance void Fooer::.ctor()\r\n  ldnull\r\n  callvirt   instance object [mscorlib]System.Reflection.MethodBase::Invoke(object,\r\n                                                                            object[])\r\n  unbox.any  [mscorlib]System.Int32\r\n  ret\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15591", "title": "[Default interfaces] Retail test failures", "body": "```\r\nLoader\\classloader\\DefaultInterfaceMethods\\diamondshape\\diamondshape\r\nLoader\\classloader\\DefaultInterfaceMethods\\sharedgenerics\\sharedgenerics\r\n```\r\n\r\ntests are failing Retail builds.\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15353", "title": "[Default Interfaces] Loader\\classloader\\DefaultInterfaceMethods\\constrainedcall", "body": "This tests is failing with an assert.\r\n\r\nIt's not clear if this test ever worked. Need an issue to block it for now.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15299", "title": "Define the behavior of ILAsm for unspported features", "body": "The existing behaviors are inconsistent with each other and frustrating at best:\r\n\r\n- [ ] Command line argument asking to produce a PDB is silently ignored\r\n- [ ] Command line argument asking to strong name sign an assembly produces an error\r\n- [ ] Security directives (`.permission`) fail with a cryptic error message (`Failed to define security attribute set for 0x20000001`).\r\n\r\nILAsm should either stick to warnings or errors or silent ignorance.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15241", "title": "[Default Interfaces] Generic context for shared instance methods on generic interfaces", "body": "This is supposed to return a non-zero value, but doesn't because we incorrectly consider instance methods on generic interfaces as not needing a generic context (only the \"default interface methods\" are considered as needing it).\r\n\r\n```\r\n.assembly extern mscorlib { }\r\n\r\n.assembly instancemethods { }\r\n\r\n.class interface private abstract auto ansi IFoo`1<T>\r\n{\r\n  .method public hidebysig newslot virtual instance bool IsInst(valuetype [mscorlib]System.RuntimeTypeHandle a) cil managed\r\n  {\r\n    ldarg.0\r\n    ldarg.1\r\n    call instance bool class IFoo`1<!T>::IsInstImpl(valuetype [mscorlib]System.RuntimeTypeHandle)\r\n    ret\r\n  }\r\n\r\n  .method private hidebysig instance bool IsInstImpl(valuetype [mscorlib]System.RuntimeTypeHandle a) cil managed\r\n  {\r\n    ldarga 1\r\n    ldtoken !T\r\n    call instance bool valuetype [mscorlib]System.RuntimeTypeHandle::Equals(valuetype [mscorlib]System.RuntimeTypeHandle)\r\n    ret\r\n  }\r\n}\r\n\r\n.class private auto ansi beforefieldinit Gen`1<T>\r\n       extends [mscorlib]System.Object\r\n{ }\r\n\r\n.class private auto ansi beforefieldinit Fooer`1<T>\r\n       extends [mscorlib]System.Object\r\n       implements class IFoo`1<class Gen`1<!T>>\r\n{\r\n  .method public hidebysig specialname rtspecialname \r\n          instance void .ctor() cil managed\r\n  {\r\n    ldarg.0\r\n    call instance void [mscorlib]System.Object::.ctor()\r\n    ret\r\n  }\r\n}\r\n\r\n.method public hidebysig static int32  Main() cil managed\r\n{\r\n  .entrypoint\r\n  newobj instance void class Fooer`1<object>::.ctor()\r\n  ldtoken class Gen`1<class [mscorlib]System.Object>\r\n  callvirt instance bool class IFoo`1<class Gen`1<object>>::IsInst(valuetype [mscorlib]System.RuntimeTypeHandle)\r\n  ret\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15059", "title": "Rethink the Microsoft.NETCore.ILAsm NuGet package", "body": "It's really unfortunate that to consume ilasm.exe from the Microsoft.NETCore.ILAsm NuGet package, we need to download 24 MB of garbage* that is Microsoft.NETCore.Runtime.CoreCLR because ILAsm depends on `MetaDataGetDispenser` API exported from coreclr.dll. We should explore static linking or a different factoring of the nugets.\r\n\r\n\\* If the only thing you need is a working ilasm.exe and don't care about the 20+ MB of System.Private.CoreLib, DAC, SOS, JIT, host, etc.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/e83991cf626b81e478cce014d96276ec2993a684", "message": "Stop treating all calls to instance interface methods as callvirt (#15925)\n\nFixes #15827."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/154927363", "body": "I'll need to check if we still need this. If we do... sigh...", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/154927363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/155038606", "body": "Yup, still needed as of VS 2017  v15.4.5.\r\n\r\n@fadimounir Seems like you were involved in some way. Do you know what \"linker dev\" this refers to so that we can find out the shipping vehicle for the fix?", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/155038606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/156646147", "body": "Validated that it works. Good timing of the release. Now we just need to find a way to share this with everyone working in the repo.\r\n\r\nI think we can just merge with this workaround removed. CI and official build machines shouldn't be doing incremental builds and devs can just update their toolchain.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/156646147/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/156656027", "body": "Okay, keeping the workaround then. I didn't know how much we're getting from the incremental linking since I don't normally work in this codebase.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/156656027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "ashishnegi": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15863", "title": "How to debug DllNotFoundException in Linux ", "body": "I have a coreclr project which dynamically loads native library `libabc.so` . This works in Ubuntu.\r\nSo, basic code is fine. However, In RedHat, I am getting error:\r\n\r\n```\r\nUnable to load DLL 'libabc.so': The specified module or one of its dependencies \r\ncould not be found.  (Exception from HRESULT: 0x8007007E)\r\n--\r\n<my_stack_trace>\r\n```\r\n\r\nI have tried adding path of library and dependent assemblies to LD_LIBRARY_PATH. That didn't work.\r\nHow can I debug this ?\r\n\r\nI set `export COREHOST_TRACE=1`.\r\nI am starting executable via :\r\n\r\n```\r\nexport COREHOST_TRACE=1\r\nexec dotnet abc.dll > out.out\r\n```\r\n\r\nBut `out.out` is also empty.\r\n\r\nIn windows, we have Fuslogvw.exe (Assembly Binding Log Viewer) to debug these issues.\r\nHow can I debug this in Linux or RedHat specifically ?", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Petermarcu": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15857", "title": "Debug.Assert causing an application to crash.", "body": "@anpaz-msft commented on [Fri Jan 12 2018](https://github.com/dotnet/core/issues/1216)\n\n# Issue Title\r\n\r\nDebug.Assert causing an application to crash.\r\n\r\n# General\r\n\r\nTypically, Debug.Assert should bring a pop-up with Abort, Retry, Ignore, or if the `assertuienabled` property is `false` then it should just continue, however in version 2.1.2 hitting the assert is causing the app to crash with a `FailFast` message.\r\n\r\nFor a simple console app:\r\n```C#\r\nusing System;\r\nusing System.Diagnostics;\r\n\r\nnamespace ConsoleApp1\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello World!\");\r\n            Debug.Assert(false, \"Assert hit\");\r\n            Console.WriteLine(\"Goodbye World!\");\r\n\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nYou get this:\r\n```\r\nC:\\Users\\anpaz\\source\\repos\\ConsoleApp1\\ConsoleApp1>dotnet run\r\nHello World!\r\nFailFast: Assert hit\r\n\r\n   at System.Diagnostics.Debug.Assert(Boolean condition, String message, String detailMessage)\r\n   at ConsoleApp1.Program.Main(String[] args) in C:\\ConsoleApp1\\ConsoleApp1\\Program.cs:line 11\r\n\r\n   at System.Environment.FailFast(System.String, System.Exception)\r\n   at ConsoleApp1.Program.Main(System.String[])\r\n```\r\n\r\nI'm finding this to be problematic in my xUnit tests: when I run the tests and they (purposely) hit a Debug.Assert the run pauses and eventually fails.\r\n\r\n```\r\n> dotnet --version\r\n2.1.2\r\n```\r\n\n\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15347", "title": "Is possible remove IL code from xxx.ni.dll compiled by CrossGen?", "body": "@hzexe commented on [Sat Dec 02 2017](https://github.com/dotnet/core/issues/1125)\n\nTo software protection\uff0clike .NET Native.\r\n\r\n\r\n\r\n\n\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15347/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14720", "title": "How to debug StackOverflowException", "body": "@Daniel15 commented on [Wed Oct 25 2017](https://github.com/dotnet/core/issues/1047)\n\nI'm getting this error while moving a site from ASP.NET Core 1.1 on Mono to ASP.NET Core 2.0 on .NET Core 2.0:\r\n```\r\ndbug: Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker[2]\r\n      Executed action method Daniel15.Web.Controllers.ShortUrlController.Index (Daniel15.Web), returned result Microsoft.AspNetCore.Mvc.ContentResult.\r\nProcess is terminating due to StackOverflowException.\r\n[1]    12976 abort      LD_LIBRARY_PATH=/tmp/ssltest ASPNETCORE_ENVIRONMENT=Development =\r\n```\r\n\r\nHow do I get a full stack trace for the `StackOverflowException` to determine where it's coming from?\n\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/92955514", "body": "Thanks. I'll fix that.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/92955514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "wfurt": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15812", "title": "SetEnvironmentVariable does not work properly on Unix ", "body": "This is related to #635 and #3140.\r\nIn my case I use \r\n\r\n``` c#\r\nEnvironment.SetEnvironmentVariable(\"all_proxy\",` \"http://10.121.122.110:3128\");\r\n```\r\nand I expect HTTP Handler to honor it same way is if set before process start. \r\nIn this case, we do no fork child process so fix-up for process start is not applicable. \r\n\r\nI understand that setenv() is not thread safe and that we choose not to actually set  environment variables but to work on our copy instead. \r\nWe may perhaps re-consider and fix it. \r\nThere is similar pattern calling openssl where init function is not thread safe. To address that we simply added lock around the call to make it thread safe. \r\nThis would be needed only for Linux (PAL?) and I would think the setenv() call is not likely on performance critical path.  \r\n\r\nI also verified that when i call setnev() via [DllImport] works as expected. \r\nIt is workaround but it would be nice if the SetEnvironmentVariable just work. \r\n\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15812/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/24462688", "body": "lame push by mistake. NULL diff. sorry\r\ngit diff ce196970faef34c1013d01cd12c76bdd7ad53731 282ca07265d43407454cd71240222d83b98c63d7", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/24462688/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/140414144", "body": "I have fresh install of 11.0 and it is not there. \r\nThis is essentially re-incarnation of https://github.com/dotnet/coreclr/commit/38c683c17a19bb7119d7334061f18257d9d6ccbb#diff-0b83f9dedf40d7356e5ca147a077acb4 submitted last yer. ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/140414144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/140539979", "body": "I was wondering about that. I have Python 2.7.13 (default, Apr 29 2017, 01:15:48) which comes with base OS e.g. I did not add any new package. With this we would look for more specific 2.7 first , falling back to what ever python you have. ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/140539979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "nategraf": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15803", "title": "EventPipe emits a call stack on rundown events", "body": "This data is unnecessary and increases the output trace file size\r\n\r\nFound by @vancem", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15656", "title": "Enabling FeaturePerfTracing in mscorlib breaks support for EventListeners on Windows", "body": "If FeaturePerfTracing is enabled in clr.coreclr.props, EventListeners no longer receive events. I should be possible to enable this feature without breaking EventListeners", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15509", "title": "Scripts which generate performance event tracing code are difficult to read and maintain ", "body": "The python scripts in src/scripts to generate C++ code for eventing have become messy and difficult to understand, or expand upon. To ease future maintenance effort and allow better open-source collaboration there scripts should go through a serious round of refactoring.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15494", "title": "EventSource does not send data to EventPipe on Windows", "body": "As part of the [EventPipe design](https://github.com/dotnet/designs/blob/master/accepted/cross-platform-performance-monitoring.md), EventSource should send it's events through to the EventPipe logging when enabled. It currently does not", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15493", "title": "FEATURE_EVENT_TRACE and FEATURE_PERFTRACING macros may be combined", "body": "Following #14772 and as the [EventPipe design](https://github.com/dotnet/designs/blob/master/accepted/cross-platform-performance-monitoring.md) continues to be implemented the seperation of FEATURE_EVENT_TRACE and FEATURE_PERFTRACING is becoming inaccurate and potentially confusing, We may want to merge the two and create one as the implementation progresses. ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15493/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/3abfaf75ea91fa0c89099c44b57c593cebcde73e", "message": "Disable eventpipetrace test due to JIT stress failure (#15927)\n\n* Disable eventpipetrace test due to JIT stress failure\r\n\r\n* Use double wildcard to properly include the right files"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/e275d2dfe18ad1f7db9c35220283001a81a7c669", "message": "Fix incremental build by preventing nonchanging writes (#15817)\n\nFix incremental build by preventing non-changing writes in generated ETW source code"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/8b008aa05ab3572edf8946b95cf3b1fe2a4a2cdc", "message": "Fix size-on-disk benchmark to handle new CLI behavior (#15689)\n\nAdd flag to ensure ensure the compiler server is not used so that the installation can be deleted successfully after the test. Additionally use a more robust deletion strategy to ensure files are deleted and the test does not fail spuriously due to random IO errors."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/c1bbdae7964b19b7063074d36e6af960f0cdc3a0", "message": "Retry: Enable EventPipe across Unix and Windows (#15611)\n\n* Revert \"Revert \"Enable EventPipe across Unix and Windows (#14772)\" (#15609)\"\r\n\r\nThis reverts commit 302005ca8ae14eade37ddf4ac6e900617c1c166a.\r\n\r\n* Fix ARM build break\r\n\r\n* Use more explicit references to resolve build failures\r\n\r\n* Fix compat with python3\r\n\r\n* Disable FeaturePerfTracing on Windows as it is not ready\r\n\r\n* Disable test for incomplete functionality\r\n\r\n* Fix test diabled patterns\r\n\r\n* Add license header\r\n\r\n* Use keyword types for managed code\r\n\r\n* Add message prefix\r\n\r\n* More precisly condition generation of eventing sources\r\n\r\n* Remove erroneously added changes"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/302005ca8ae14eade37ddf4ac6e900617c1c166a", "message": "Revert \"Enable EventPipe across Unix and Windows (#14772)\" (#15609)\n\nThis reverts commit 7524d72d4f0f634fe5407280b83c25181dc8c556."}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15765", "title": "Fix SIGSEGV in EventPipe on Shutdown (#14123)", "body": "This PR fixes a segmentation fault which occurs on EventPipe Shutdown\r\n\r\nFollow-up  #15147", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/25959263", "body": "That was an accident. I am trying to break the old habit of `commit -a` I'll get rid of that", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/25959263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/26152522", "body": "PLATFORM_WINDOWS doesn't actually exist", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/26152522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "benaadams": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15797", "title": "Cap ArrayPool ThreadStatics", "body": "ArrayPool should limit the number of ThreadStatic caches it creates for people that have gone wild and either set the threadpool min threads really high or spew lots of long running Tasks Microsoft/msbuild#2384\r\n\r\nPerhaps they should be held in a finalizable object so when the Thread expires it will continue allocating more. e.g. static max counter incremented on alloc, and decremented on finalize?", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15797/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15796", "title": "Lower ArrayPool defaults for 32bit", "body": "At its most extreme; on 64+ core machine the ArrayPool cab grow to\r\n`byte` pool 871 MB \r\n`char` pool at 1741 MB\r\nFor total of 2613 MB; plus 2MB+4MB per thread - should the defaults be lower for 32 bit processeses?\r\n  ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15770", "title": "[Jit] Overzealous w/ do-not-enreg in presence of EH", "body": "Given the following code\r\n```csharp\r\nusing System;\r\nusing System.Runtime.ExceptionServices;\r\nusing System.Threading;\r\n\r\nclass Program\r\n{\r\n    int _a;\r\n    int _b;\r\n\r\n    int Func1(ContextCallback callback, object state)\r\n    {\r\n        int i = _a;\r\n\r\n        ExceptionDispatchInfo edi = null;\r\n        try\r\n        {\r\n            callback.Invoke(state);\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            edi = ExceptionDispatchInfo.Capture(ex);\r\n        }\r\n\r\n        edi?.Throw();\r\n\r\n        int ii = _b + 1;\r\n        return i + ii;\r\n    }\r\n\r\n    int Func2(ContextCallback callback, object state)\r\n    {\r\n        int i = _a;\r\n\r\n        ExceptionDispatchInfo edi = null;\r\n        try\r\n        {\r\n            callback.Invoke(state);\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            edi = ExceptionDispatchInfo.Capture(ex);\r\n        }\r\n\r\n        edi?.Throw();\r\n\r\n        int ii = _b + i;\r\n        return ii;\r\n    }\r\n\r\n    static void Main(string[] args)\r\n    {\r\n        var p = new Program();\r\n\r\n        Console.WriteLine($\"{p.Func1((o) => { }, null)} {p.Func2((o) => { }, null)}\");\r\n    }\r\n}\r\n```\r\nIn both `Func1` and `Func2` as the variable `i`'s lifetime crosses exception handling it is marked as `do-not-enreg`\r\n\r\nIn neither `Func1` nor `Func2`  does the variable `ii`'s lifetime cross exception handling.\r\n\r\nIn `Func1` `ii`'s lifetime crosses `i`'s lifetime so they cannot share a register; so `ii` is **not** marked as `do-not-enreg` \ud83d\udc4d \r\n\r\nIn `Func2` `ii`'s lifetime **does not** cross `i`'s lifetime so they **can** share a register; which means `ii` inherits `i`s `do-not-enreg` \ud83d\udc4e \r\n\r\nSeen in \"Reduce Execution Context Save+Restore\" https://github.com/dotnet/coreclr/pull/15629\r\n  ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15770/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15675", "title": "Add EventSource for blocking syscalls", "body": "Currently .NET initiated blocking (`Wait`) can be detected either using `SynchronizationContext` and/or tplETW for Tasks.\r\n\r\nHowever, blocking that happens as a result of sys calls cannot be easily detected (`Thread.Sleep`, sync I/O `File.Read`, blocking `Sockets`)\r\n\r\nOn Windows you need to listen to the Kernel `CSwitch` ETW events; however this requires elevated privileges; and only a single listener can be listening per system (rather than per process, listening to its own events) - also it makes it more difficult to pull a StackTrace compared to an `EventSource` based approach.\r\n\r\nAdding an EventSource for blocking calls would assist in detecting them and also be cross platform.\r\n\r\n/cc @stephentoub @vancem ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15476", "title": "[Jit] Loop condition doesn't elide bounds check", "body": "As a condition of a `while` it doesn't elide the check\r\n```csharp\r\nwhile ((uint)i >= (uint)entries.Length)\r\n{    \r\n    // not elided\r\n    if (entries[i].hashCode == hashCode && comparer.Equals(key, entries[i].key))\r\n    {\r\n```\r\nChanging it to an `if` + `break` does elide the check\r\n```csharp\r\ndo\r\n{\r\n    if ((uint)i >= (uint)entries.Length)\r\n    {\r\n        break;\r\n    }\r\n    \r\n    // elided\r\n    if (entries[i].hashCode == hashCode && comparer.Equals(key, entries[i].key))\r\n    {\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15476/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15472", "title": "[Jit] Indexing mod array.Length not recognized as bounds safe", "body": "e.g.\r\n```csharp\r\nvar i = buckets[hashCode % buckets.Length];\r\n```\r\nWill introduce a range check, even though its always safe (though maybe not for Length == 0?)", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15472/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14689", "title": "Many CI Perf Tests Correctness Warnings: about targeting .NETFramework,Version=v4.0", "body": "Build **Windows_NT x64 full_opt ryujit CoreCLR Perf Tests Correctness**\r\n\r\nperf_perflab_Windows_NT_x64_full_opt_ryujit_smoketest_prtest\r\n\r\n> could not be resolved because it has an indirect dependency on the framework assembly \"System.Runtime.Numerics, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" which could not be resolved in the currently targeted framework. \".NETFramework,Version=v4.0\". To resolve this problem, either remove the reference \"D:\\j\\w\\perf_perflab_---89ec9f56\\bin\\TargetingPack\\/Microsoft.CodeAnalysis.dll\" or retarget your application to a framework version which contains \"System.Runtime.Numerics, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\".\r\n\r\n```\r\n02:04:33 C:\\Program Files (x86)\\MSBuild\\14.0\\bin\\Microsoft.Common.CurrentVersion.targets(1820,5): warning MSB3268: The primary reference \"D:\\j\\w\\perf_perflab_---89ec9f56\\bin\\TargetingPack\\/Microsoft.CodeAnalysis.dll\" could not be resolved because it has an indirect dependency on the framework assembly \"System.Runtime.Numerics, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" which could not be resolved in the currently targeted framework. \".NETFramework,Version=v4.0\". To resolve this problem, either remove the reference \"D:\\j\\w\\perf_perflab_---89ec9f56\\bin\\TargetingPack\\/Microsoft.CodeAnalysis.dll\" or retarget your application to a framework version which contains \"System.Runtime.Numerics, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\". [D:\\j\\w\\perf_perflab_---89ec9f56\\tests\\src\\JIT\\IL_Conformance\\Old\\Conformance_Base\\conv_ovf_i8_i.ilproj]\r\n02:04:33 C:\\Program Files (x86)\\MSBuild\\14.0\\bin\\Microsoft.Common.CurrentVersion.targets(1820,5): warning MSB3268: The primary reference \"D:\\j\\w\\perf_perflab_---89ec9f56\\bin\\TargetingPack\\/Microsoft.CodeAnalysis.CSharp.dll\" could not be resolved because it has an indirect dependency on the framework assembly \"System.Runtime.Serialization.Json, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" which could not be resolved in the currently targeted framework. \".NETFramework,Version=v4.0\". To resolve this problem, either remove the reference \"D:\\j\\w\\perf_perflab_---89ec9f56\\bin\\TargetingPack\\/Microsoft.CodeAnalysis.CSharp.dll\" or retarget your application to a framework version which contains \"System.Runtime.Serialization.Json, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\". [D:\\j\\w\\perf_perflab_---89ec9f56\\tests\\src\\JIT\\IL_Conformance\\Old\\Conformance_Base\\conv_ovf_i8_i.ilproj]\r\n02:04:33 C:\\Program Files (x86)\\MSBuild\\14.0\\bin\\Microsoft.Common.CurrentVersion.targets(1820,5): warning MSB3268: The primary reference \"D:\\j\\w\\perf_perflab_---89ec9f56\\bin\\TargetingPack\\/Microsoft.CodeAnalysis.VisualBasic.dll\" could not be resolved because it has an indirect dependency on the framework assembly \"System.Runtime.Serialization.Json, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" which could not be resolved in the currently targeted framework. \".NETFramework,Version=v4.0\". To resolve this problem, either remove the reference \"D:\\j\\w\\perf_perflab_---89ec9f56\\bin\\TargetingPack\\/Microsoft.CodeAnalysis.VisualBasic.dll\" or retarget your application to a framework version which contains \"System.Runtime.Serialization.Json, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\". [D:\\j\\w\\perf_perflab_---89ec9f56\\tests\\src\\JIT\\IL_Conformance\\Old\\Conformance_Base\\conv_ovf_i8_i.ilproj]\r\n02:04:33 C:\\Program Files (x86)\\MSBuild\\14.0\\bin\\Microsoft.Common.CurrentVersion.targets(1820,5): warning MSB3268: The primary reference \"D:\\j\\w\\perf_perflab_---89ec9f56\\bin\\TargetingPack\\/Microsoft.CodeAnalysis.dll\" could not be resolved because it has an indirect dependency on the framework assembly \"System.Runtime.Serialization.Json, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" which could not be resolved in the currently targeted framework. \".NETFramework,Version=v4.0\". To resolve this problem, either remove the reference \"D:\\j\\w\\perf_perflab_---89ec9f56\\bin\\TargetingPack\\/Microsoft.CodeAnalysis.dll\" or retarget your application to a framework version which contains \"System.Runtime.Serialization.Json, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\". [D:\\j\\w\\perf_perflab_---89ec9f56\\tests\\src\\JIT\\IL_Conformance\\Old\\Conformance_Base\\conv_ovf_i8_i.ilproj]\r\n02:04:33 C:\\Program Files (x86)\\MSBuild\\14.0\\bin\\Microsoft.Common.CurrentVersion.targets(1820,5): warning MSB3268: The primary reference \"D:\\j\\w\\perf_perflab_---89ec9f56\\bin\\TargetingPack\\/Microsoft.Diagnostics.Tracing.TraceEvent.dll\" could not be resolved because it has an indirect dependency on the framework assembly \"System.Runtime.InteropServices, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" which could not be resolved in the currently targeted framework. \".NETFramework,Version=v4.0\". To resolve this problem, either remove the reference \"D:\\j\\w\\perf_perflab_---89ec9f56\\bin\\TargetingPack\\/Microsoft.Diagnostics.Tracing.TraceEvent.dll\" or retarget your application to a framework version which contains \"System.Runtime.InteropServices, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\". [D:\\j\\w\\perf_perflab_---89ec9f56\\tests\\src\\JIT\\IL_Conformance\\Old\\Conformance_Base\\conv_ovf_i8_i.ilproj]\r\n02:04:33 C:\\Program Files (x86)\\MSBuild\\14.0\\bin\\Microsoft.Common.CurrentVersion.targets(1820,5): warning MSB3268: The primary reference \"D:\\j\\w\\perf_perflab_---89ec9f56\\bin\\TargetingPack\\/xunit.performance.api.dll\" could not be resolved because it has an indirect dependency on the framework assembly \"System.Runtime.InteropServices, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" which could not be resolved in the currently targeted framework. \".NETFramework,Version=v4.0\". To resolve this problem, either remove the reference \"D:\\j\\w\\perf_perflab_---89ec9f56\\bin\\TargetingPack\\/xunit.performance.api.dll\" or retarget your application to a framework version which contains \"System.Runtime.InteropServices, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\". [D:\\j\\w\\perf_perflab_---89ec9f56\\tests\\src\\JIT\\IL_Conformance\\Old\\Conformance_Base\\conv_ovf_i8_i.ilproj]\r\n02:04:33 C:\\Program Files (x86)\\MSBuild\\14.0\\bin\\Microsoft.Common.CurrentVersion.targets(1820,5): warning MSB3268: The primary reference \"D:\\j\\w\\perf_perflab_---89ec9f56\\bin\\TargetingPack\\/xunit.performance.metrics.dll\" could not be resolved because it has an indirect dependency on the framework assembly \"System.Runtime.InteropServices, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" which could not be resolved in the currently targeted framework. \".NETFramework,Version=v4.0\". To resolve this problem, either remove the reference \"D:\\j\\w\\perf_perflab_---89ec9f56\\bin\\TargetingPack\\/xunit.performance.metrics.dll\" or retarget your application to a framework version which contains \"System.Runtime.InteropServices, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\". [D:\\j\\w\\perf_perflab_---89ec9f56\\tests\\src\\JIT\\IL_Conformance\\Old\\Conformance_Base\\conv_ovf_i8_i.ilproj]\r\n02:04:33 C:\\Program Files (x86)\\MSBuild\\14.0\\bin\\Microsoft.Common.CurrentVersion.targets(1820,5): warning MSB3268: The primary reference \"D:\\j\\w\\perf_perflab_---89ec9f56\\bin\\TargetingPack\\/Microsoft.Diagnostics.Tracing.TraceEvent.dll\" could not be resolved because it has an indirect dependency on the framework assembly \"System.Xml.ReaderWriter, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" which could not be resolved in the currently targeted framework. \".NETFramework,Version=v4.0\". To resolve this problem, either remove the reference \"D:\\j\\w\\perf_perflab_---89ec9f56\\bin\\TargetingPack\\/Microsoft.Diagnostics.Tracing.TraceEvent.dll\" or retarget your application to a framework version which contains \"System.Xml.ReaderWriter, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\". [D:\\j\\w\\perf_perflab_---89ec9f56\\tests\\src\\JIT\\IL_Conformance\\Old\\Conformance_Base\\conv_ovf_i8_i.ilproj]\r\n02:04:33 C:\\Program Files (x86)\\MSBuild\\14.0\\bin\\Microsoft.Common.CurrentVersion.targets(1820,5): warning MSB3268: The primary reference \"D:\\j\\w\\perf_perflab_---89ec9f56\\bin\\TargetingPack\\/xunit.performance.api.dll\" could not be resolved because it has an indirect dependency on the framework assembly \"System.Xml.ReaderWriter, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" which could not be resolved in the currently targeted framework. \".NETFramework,Version=v4.0\". To resolve this problem, either remove the reference \"D:\\j\\w\\perf_perflab_---89ec9f56\\bin\\TargetingPack\\/xunit.performance.api.dll\" or retarget your application to a framework version which contains \"System.Xml.ReaderWriter, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\". [D:\\j\\w\\perf_perflab_---89ec9f56\\tests\\src\\JIT\\IL_Conformance\\Old\\Conformance_Base\\conv_ovf_i8_i.ilproj]\r\n02:04:33 C:\\Program Files (x86)\\MSBuild\\14.0\\bin\\Microsoft.Common.CurrentVersion.targets(1820,5): warning MSB3268: The primary reference \"D:\\j\\w\\perf_perflab_---89ec9f56\\bin\\TargetingPack\\/xunit.performance.metrics.dll\" could not be resolved because it has an indirect dependency on the framework assembly \"System.Xml.ReaderWriter, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" which could not be resolved in the currently targeted framework. \".NETFramework,Version=v4.0\". To resolve this problem, either remove the reference \"D:\\j\\w\\perf_perflab_---89ec9f56\\bin\\TargetingPack\\/xunit.performance.metrics.dll\" or retarget your application to a framework version which contains \"System.Xml.ReaderWriter, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\". [D:\\j\\w\\perf_perflab_---89ec9f56\\tests\\src\\JIT\\IL_Conformance\\Old\\Conformance_Base\\conv_ovf_i8_i.ilproj]\r\n02:04:33 C:\\Program Files (x86)\\MSBuild\\14.0\\bin\\Microsoft.Common.CurrentVersion.targets(1820,5): warning MSB3268: The primary reference \"D:\\j\\w\\perf_perflab_---89ec9f56\\bin\\TargetingPack\\/Microsoft.Diagnostics.Tracing.TraceEvent.dll\" could not be resolved because it has an indirect dependency on the framework assembly \"System.IO.Compression, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" which could not be resolved in the currently targeted framework. \".NETFramework,Version=v4.0\". To resolve this problem, either remove the reference \"D:\\j\\w\\perf_perflab_---89ec9f56\\bin\\TargetingPack\\/Microsoft.Diagnostics.Tracing.TraceEvent.dll\" or retarget your application to a framework version which contains \"System.IO.Compression, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\". [D:\\j\\w\\perf_perflab_---89ec9f56\\tests\\src\\JIT\\IL_Conformance\\Old\\Conformance_Base\\conv_ovf_i8_i.ilproj]\r\n02:04:33 C:\\Program Files (x86)\\MSBuild\\14.0\\bin\\Microsoft.Common.CurrentVersion.targets(1820,5): warning MSB3268: The primary reference \"D:\\j\\w\\perf_perflab_---89ec9f56\\bin\\TargetingPack\\/xunit.performance.api.dll\" could not be resolved because it has an indirect dependency on the framework assembly \"System.IO.Compression, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" which could not be resolved in the currently targeted framework. \".NETFramework,Version=v4.0\". To resolve this problem, either remove the reference \"D:\\j\\w\\perf_perflab_---89ec9f56\\bin\\TargetingPack\\/xunit.performance.api.dll\" or retarget your application to a framework version which contains \"System.IO.Compression, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\". [D:\\j\\w\\perf_perflab_---89ec9f56\\tests\\src\\JIT\\IL_Conformance\\Old\\Conformance_Base\\conv_ovf_i8_i.ilproj]\r\n02:04:33 C:\\Program Files (x86)\\MSBuild\\14.0\\bin\\Microsoft.Common.CurrentVersion.targets(1820,5): warning MSB3268: The primary reference \"D:\\j\\w\\perf_perflab_---89ec9f56\\bin\\TargetingPack\\/xunit.performance.metrics.dll\" could not be resolved because it has an indirect dependency on the framework assembly \"System.IO.Compression, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" which could not be resolved in the currently targeted framework. \".NETFramework,Version=v4.0\". To resolve this problem, either remove the reference \"D:\\j\\w\\perf_perflab_---89ec9f56\\bin\\TargetingPack\\/xunit.performance.metrics.dll\" or retarget your application to a framework version which contains \"System.IO.Compression, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\". [D:\\j\\w\\perf_perflab_---89ec9f56\\tests\\src\\JIT\\IL_Conformance\\Old\\Conformance_Base\\conv_ovf_i8_i.ilproj]\r\n02:04:33 C:\\Program Files (x86)\\MSBuild\\14.0\\bin\\Microsoft.Common.CurrentVersion.targets(1820,5): warning MSB3268: The primary reference \"D:\\j\\w\\perf_perflab_---89ec9f56\\bin\\TargetingPack\\/Microsoft.Diagnostics.Tracing.TraceEvent.dll\" could not be resolved because it has an indirect dependency on the framework assembly \"System.Net.Primitives, Version=4.0.10.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" which could not be resolved in the currently targeted framework. \".NETFramework,Version=v4.0\". To resolve this problem, either remove the reference \"D:\\j\\w\\perf_perflab_---89ec9f56\\bin\\TargetingPack\\/Microsoft.Diagnostics.Tracing.TraceEvent.dll\" or retarget your application to a framework version which contains \"System.Net.Primitives, Version=4.0.10.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\". [D:\\j\\w\\perf_perflab_---89ec9f56\\tests\\src\\JIT\\IL_Conformance\\Old\\Conformance_Base\\conv_ovf_i8_i.ilproj]\r\n```\r\netc\r\n\r\nFollowed by\r\n\r\n```\r\n02:04:33 ..\\common\\common.il(210): warning : Reference to undeclared extern assembly 'system.runtime.extensions'. Attempting autodetect [D:\\j\\w\\perf_perflab_---89ec9f56\\tests\\src\\JIT\\jit64\\mcc\\interop\\mcc_i07.ilproj]\r\n02:04:33 ..\\common\\common.il(210): warning : Reference to undeclared extern assembly 'system.runtime.extensions'. Attempting autodetect [D:\\j\\w\\perf_perflab_---89ec9f56\\tests\\src\\JIT\\jit64\\mcc\\interop\\mcc_i16.ilproj]\r\n02:04:33 ..\\common\\common.il(210): warning : Reference to undeclared extern assembly 'system.runtime.extensions'. Attempting autodetect [D:\\j\\w\\perf_perflab_---89ec9f56\\tests\\src\\JIT\\jit64\\mcc\\interop\\mcc_i17.ilproj]\r\n02:04:33 ..\\common\\common.il(210): warning : Reference to undeclared extern assembly 'system.runtime.extensions'. Attempting autodetect [D:\\j\\w\\perf_perflab_---89ec9f56\\tests\\src\\JIT\\jit64\\mcc\\interop\\mcc_i06.ilproj]\r\n02:04:33 ..\\common\\common.il(210): warning : Reference to undeclared extern assembly 'system.runtime.extensions'. Attempting autodetect [D:\\j\\w\\perf_perflab_---89ec9f56\\tests\\src\\JIT\\jit64\\mcc\\interop\\mcc_i37.ilproj]\r\n02:04:33 ..\\common\\common.il(210): warning : Reference to undeclared extern assembly 'system.runtime.extensions'. Attempting autodetect [D:\\j\\w\\perf_perflab_---89ec9f56\\tests\\src\\JIT\\jit64\\mcc\\interop\\mcc_i36.ilproj]\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/33ce0e2538172287ffea9ad28b5df2cde6de2f60", "message": "Skip EDI boundary for async (#15781)"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/c459b52c0f300860bb877b46165018a882e8ee99", "message": "Allow CALLEE_IS_FORCE_INLINE precedent over CALLEE_DOES_NOT_RETURN (#14586)\n\nAllow CALLEE_IS_FORCE_INLINE precedent over CALLEE_DOES_NOT_RETURN"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/288bd46585fb5334eac31b285eba64e17831df72", "message": "Improve performance for Math.Abs (#15823)\n\n* Improve perf for Math.Abs\r\n\r\n* Inline Math.Abs"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/097e68658c5249eaefff33bd92b044e9ba22c819", "message": "Use Span to drop byte[1] allocations (#15680)"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/0bb37fde2befd38d4a082d5c0eb269ae3e35b546", "message": "Encoding: Don't alloc for zero length array (#13794)"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/f8153eaaf918d336de0ca1071a65ab534169a8e0", "message": "Resolve race in ShimProxyCallback::AddRef (#15643)"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15752", "title": "Storage -> Memory for \"Out of Memory\" error message", "body": "Seen in https://github.com/dotnet/core/issues/1192\r\n\r\nAlso in https://github.com/dotnet/corefx/issues/24139\r\n\r\nBoth `System.Net.Http.WinHttpException`s\r\n  \r\n  ", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15743", "title": "Devirtualize ArrayPool.Shared", "body": "Every call to ArrayPool in crossgen'd System.Private.CoreLib is now devitualized to\r\n```asm\r\ncall     TlsOverPerCoreLockedStacksArrayPool`1:Rent(int):ref:this\r\ncall     TlsOverPerCoreLockedStacksArrayPool`1:Return(ref,bool):this\r\n```\r\nSlight size regression\r\n```asm\r\nTotal bytes of diff: 252 (0.01% of base)\r\n    diff is a regression.\r\n\r\nTotal byte diff includes 178 bytes from reconciling methods\r\n        Base had    0 unique methods,        0 unique bytes\r\n        Diff had    3 unique methods,      178 unique bytes\r\n\r\nTop file regressions by size (bytes):\r\n         252 : System.Private.CoreLib.dasm (0.01% of base)\r\n\r\n1 total files with size differences (0 improved, 1 regressed), 0 unchanged.\r\n\r\nTop method regessions by size (bytes):\r\n         110 : System.Private.CoreLib.dasm - ArrayPools:.cctor() (0/1 methods)\r\n          34 : System.Private.CoreLib.dasm - ArrayPools:get_BytePool():ref (0/1 methods)\r\n          34 : System.Private.CoreLib.dasm - ArrayPools:get_CharPool():ref (0/1 methods)\r\n          16 : System.Private.CoreLib.dasm - BinaryWriter:Write(struct):this (3 methods)\r\n          12 : System.Private.CoreLib.dasm - Stream:Write(struct):this\r\n\r\nTop method improvements by size (bytes):\r\n         -12 : System.Private.CoreLib.dasm - ArrayPool`1:.cctor() (3 methods)\r\n          -3 : System.Private.CoreLib.dasm - Stream:Read(struct):int:this\r\n\r\n27 total methods with size differences (2 improved, 25 regressed), 16743 unchanged.\r\n```\r\nEnabled by https://github.com/dotnet/coreclr/pull/15766\r\n\r\n@stephentoub @jkotas PTAL\r\n  \r\n  ", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15629", "title": "Reduce Execution Context Save+Restore", "body": "x 1.94 speed up for `ExecutionContext.Run(ec, (o) => { }, null);` where `ec == Default`\r\nx 1.57 speed up for `ExecutionContext.Run(ec, (o) => { }, null);` with `AsyncLocal`s (no notifications)\r\n\r\nResults https://github.com/dotnet/coreclr/pull/15629#issuecomment-355708318\r\n\r\nAlternative approach to https://github.com/dotnet/coreclr/pull/11100 as suggested by @kouvel https://github.com/dotnet/coreclr/pull/11100#discussion_r113028941\r\n\r\nWhen `Default` context is used in `Run` use it as `null`; which also counts as Default - rather than having two forms of `Default` context internally (Thread starts will null) and saving and restoring between them.\r\n\r\n```\r\n                Method |   Current |       New |    Change |\r\n---------------------- |----------:|----------:|----------:|\r\n        Run Default EC | 14.134 ns |  7.303 ns |    x 1.94 |\r\n Run w/ AsyncLocals EC | 11.986 ns |  7.631 ns |    x 1.57 | \r\n                 await |  3.152 ns |  3.158 ns |    x 1.00 | \r\n```\r\n\r\nPrevious call tracing\r\n![image](https://user-images.githubusercontent.com/1142958/34344008-fe137eb0-e9d7-11e7-948e-5f78b3d99875.png)\r\n\r\nPost call tracing (`Restore` not invoked)\r\n![image](https://user-images.githubusercontent.com/1142958/34344012-08d400c2-e9d8-11e7-9325-d1ee860ede0e.png)\r\n\r\n\r\nResolves #11126 \r\n  ", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15419", "title": "Dictionary CQ", "body": "Up to x 1.5 speed up for finding value types\r\n\r\n* Improve Dictionary FindEntry CQ https://github.com/dotnet/coreclr/pull/15460\r\n* Improve Dictionary TryInsert CQ https://github.com/dotnet/coreclr/pull/15462\r\n* Use `EqualityComparer<TKey>.Default` (only from #15411)\r\n* 1-bases `_buckets` so the don't be set to `-1` on each resize\r\n\r\nAdds 5kB (0.16% of base) to `System.Private.CoreLib.ni.dll` https://github.com/dotnet/coreclr/pull/15419#issuecomment-353247960\r\n\r\nBefore\r\n```\r\n                                Method |\r\n-------------------------------------- |\r\n    ContainsKeySimplePositive_IntKey   | IEqualityComparer\r\n    ContainsKeySimpleNegative_IntKey   | IEqualityComparer\r\n ContainsKeySimplePositive_StringKey   | IEqualityComparer\r\n ContainsKeySimpleNegative_StringKey   | IEqualityComparer\r\n   ContainsKeySimplePositive_ObjectKey | IEqualityComparer\r\n   ContainsKeySimpleNegative_ObjectKey | IEqualityComparer\r\n```\r\nAfter\r\n```\r\n                                Method |\r\n-------------------------------------- |\r\n    ContainsKeySimplePositive_IntKey   | devirtualized\r\n    ContainsKeySimpleNegative_IntKey   | devirtualized\r\n ContainsKeySimplePositive_StringKey   | IEqualityComparer\r\n ContainsKeySimpleNegative_StringKey   | IEqualityComparer\r\n   ContainsKeySimplePositive_ObjectKey | virtual\r\n   ContainsKeySimpleNegative_ObjectKey | virtual\r\n```\r\n\r\nPerformance, was faster but that increased code-gen by 27kB https://github.com/dotnet/coreclr/pull/15419#issuecomment-352159250\r\n```\r\n                          Method |Items |       Current |   Single func | Change |\r\n-------------------------------- |----- |--------------:|--------------:|-------:|\r\n   ContainsKey_Single_Yes_IntKey | 1000 |     11.231 ns |      7.110 ns | x 1.58 |\r\n    ContainsKey_Single_No_IntKey | 1000 |     10.794 ns |      7.179 ns | x 1.50 |\r\n          ContainsKey_All_IntKey | 1000 | 10,815.405 ns |  7,220.128 ns | x 1.50 |\r\nContainsKey_Single_Yes_StringKey | 1000 |     20.489 ns |     19.925 ns | x 1.03 |\r\n ContainsKey_Single_No_StringKey | 1000 |     12.747 ns |     13.414 ns | x 0.95 |\r\nContainsKey_Single_Yes_ObjectKey | 1000 |     11.233 ns |      9.119 ns | x 1.23 |\r\n ContainsKey_Single_No_ObjectKey | 1000 |     11.192 ns |      8.560 ns | x 1.31 |\r\n                      Add_IntKey | 1000 | 27,573.689 ns | 22,503.652 ns | x 1.23 |\r\n                   Add_StringKey | 1000 | 76,095.748 ns | 77,253.701 ns | x 0.99 |\r\n                   Add_ObjectKey | 1000 | 68,845.402 ns | 67,529.550 ns | x 1.02 |\r\n              PreSizedAdd_IntKey | 1000 | 11,558.450 ns |  9,658.953 ns | x 1.20 |\r\n           PreSizedAdd_StringKey | 1000 | 57,360.936 ns | 57,710.254 ns | x 0.99 |\r\n           PreSizedAdd_ObjectKey | 1000 | 54,780.942 ns | 50,300.463 ns | x 1.09 |\r\n```\r\nPTAL  @jkotas @AndyAyersMS @mikedn @omariom @redknightlois ", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/14655", "title": "Resolve iterators and async methods in stacktrace", "body": "Resolves: https://github.com/dotnet/corefx/issues/24627\r\n\r\nMatches the complier generated containing `Type` to the source method using: \r\n`method.DeclaringType == StateMachineAttribute.StateMachineType` attribute to allow the stack trace to resolve the mangled method name to the correct overload. \r\n\r\nAppends the statemachine method name with `+` for iterators (but not async).\r\n\r\ne.g. converts\r\n```\r\nProgram.<Iterator>d__4.MoveNext()\r\n```\r\nto the correct method signature\r\n```\r\nProgram.Iterator(Int64 count, Int32 value)+MoveNext()\r\n```\r\nThis allows you to determine the correct overload that was called, from the stack trace.\r\n\r\nSample output\r\n```\r\nat System.Linq.Enumerable.SkipWhileIterator[TSource](IEnumerable`1 source, Func`3 predicate)+MoveNext()\r\nat Program.Iterator(Int64 count, Int32 value)+MoveNext()\r\nat Program.ValueTaskAsync(String name)+MoveNext()\r\nat Program.TaskTAsync(Int32 count)+MoveNext()\r\n```\r\nInstead of\r\n```\r\nat System.Linq.Enumerable.<SkipWhileIterator>d__179`1.MoveNext()\r\nat Program.<Iterator>d__4.MoveNext() \r\nat Program.<ValueTaskAsync>d__9.MoveNext() \r\nat Program.<TaskTAsync>d__11.MoveNext() \r\n```\r\nFull stack trace would like like this\r\n```\r\nSystem.Exception: ...\r\n   at System.Collections.Generic.List`1.Enumerator.MoveNextRare()\r\n   at System.Collections.Generic.List`1.Enumerator.MoveNext()\r\n   at Program.FirstException(Int32 value, Int32 index)\r\n   at Program.<>c.<LinqIteration>b__4_0(Int32 x, Int32 i) // lambda\r\n   at System.Linq.Enumerable.SkipWhileIterator[TSource](IEnumerable`1 source, Func`3 predicate)+MoveNext()\r\n   at System.Collections.Generic.LargeArrayBuilder`1.AddRange(IEnumerable`1 items)\r\n   at System.Collections.Generic.EnumerableHelpers.ToArray[T](IEnumerable`1 source)\r\n   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)\r\n   at Program.LinqIteration(Int32 count)\r\n   at Program.NonAsyncValueTask[TName](Int32 count, TName name)\r\n   at Program.ValueTaskAsync(String name)+MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Program.TaskTAsync(Int32 count)+MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Program.MethodAsync(Int32 count)+MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Program.ConfiguredAsync(Int32 count)+MoveNext()\r\n```\r\n\r\nCurrent examples https://github.com/dotnet/coreclr/pull/14655#issuecomment-358638765\r\n\r\n\r\nPTAL @stephentoub @tmat @noahfalk @aelij ", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72918602", "body": "Done\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72918602/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72930549", "body": "Squashed\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72930549/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/18043759", "body": "Changed\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/18043759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/18579528", "body": "Not sure I understand?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/18579528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/26832950", "body": "Had always wondered about this :)", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/26832950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "aviviadi": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15790", "title": "Add madvise with MADV_DONTNEED at GCToOSInterface::VirtualDecommit", "body": "Suggestion:\r\n\r\nIn order to help the OS even better to understand we don't need the memory anymore, I think madvise(address, size, MADV_DONTNEED) in addtion to the mmap call is needed.\r\n\r\nHere : https://github.com/dotnet/corert/blob/f9bf1fc506347c30357a0d708bf69459f142eee4/src/Native/gc/unix/gcenv.unix.cpp#L338", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15790/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AndyAyersMS": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15783", "title": "JIT: see if we can coalesce stack spill and return spill temps", "body": "Some notes from discussion in #15743.\r\n\r\nIn compound call expressions like:\r\n```\r\nA().B(C());\r\n```\r\nwhere `B` is virtual and `A` is inlined, we may well end up generating two spill temps for `A`: one to hold the result of `A` while `C` is invoked, and another as a return spill temp for `A`. This can block type propagation from `A` to the virtual call site and so block devirtualization.\r\n```\r\n;; pre-inline\r\ntmp0 = call A\r\ncall C\r\ncallvirt tmp0\r\n\r\n;; post-inline\r\ntmp1 = ...          // tmp1 may have improved type\r\ntmp0 = tmp1         // tmp0 will have A's declared return type\r\ncall C\r\ncallvirt tmp0;\r\n```\r\n\r\nIt seems plausible that when attempting to inline `A` and seeing that it needs a return spill temp, the jit could try and reuse the existing stack spill temp instead of creating a new temp.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15783/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15492", "title": "JIT: optimize away overflow check in some span non portable casts", "body": "When casting a span to a larger type via `NonPortableCast`, the result should not be able to overflow and the jit should be able to eliminate the check and throw.\r\n\r\nThis came up in some span conversion work over in CoreFx.\r\n\r\nIt might be hard to catch all cases of this since the current code for `NonPortableCast<FromType, ToType>` first multiplies  the length by `sizeof<FromType>` and then divides by `sizeof<ToType>` but when the from type is `char` the resulting length will not overflow an `int`.\r\nFor instance:\r\n```C#\r\nReadOnlySpan<byte> span = ...;\r\nReadOnlySpan<long> longSpan = span.NonPortableCast<byte, long>();\r\n```\r\nCurrently this does a fairly expensive and overflow check;\r\n```asm\r\nG_M41841_IG01:\r\n       4883EC28             sub      rsp, 40\r\n\r\nG_M41841_IG02:\r\n       488B02               mov      rax, bword ptr [rdx]\r\n       8B5208               mov      edx, dword ptr [rdx+8]\r\n       4863D2               movsxd   rdx, edx\r\n       4C8BC2               mov      r8, rdx\r\n       49C1F83F             sar      r8, 63\r\n       4983E007             and      r8, 7\r\n       4C03C2               add      r8, rdx\r\n       49C1F803             sar      r8, 3\r\n       4981F8FFFFFF7F       cmp      r8, 0x7FFFFFFF\r\n       7F1A                 jg       SHORT G_M41841_IG04\r\n       4981F800000080       cmp      r8, 0xFFFFFFFF80000000\r\n       7C11                 jl       SHORT G_M41841_IG04\r\n       498BD0               mov      rdx, r8\r\n       488901               mov      bword ptr [rcx], rax\r\n       895108               mov      dword ptr [rcx+8], edx\r\n       488BC1               mov      rax, rcx\r\n\r\nG_M41841_IG03:\r\n       4883C428             add      rsp, 40\r\n       C3                   ret\r\n\r\nG_M41841_IG04:\r\n       E8895EC75F           call     CORINFO_HELP_OVERFLOW\r\n       CC                   int3\r\n```\r\nWe could probably also fix this in the source code by comparing sizes and only using checked math for the cases where size increases.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15492/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15491", "title": "JIT: optimize away range check in common slice patterns", "body": "Here's an example similar to #15472 that came up in some span conversion efforts in CoreFX:\r\n```C#\r\n    static ReadOnlySpan<char> Slice(ReadOnlySpan<char> s)\r\n    {\r\n        ReadOnlySpan<char> result = s.Slice(s.Length & ~3);\r\n        return result;\r\n    }\r\n```\r\nCurrent asm:\r\n```asm\r\nG_M7513_IG01:\r\n       4883EC28             sub      rsp, 40\r\n\r\nG_M7513_IG02:\r\n       488B02               mov      rax, bword ptr [rdx]\r\n       8B5208               mov      edx, dword ptr [rdx+8]\r\n       448BC2               mov      r8d, edx\r\n       4183E0FC             and      r8d, -4\r\n       443BC2               cmp      r8d, edx\r\n       7718                 ja       SHORT G_M7513_IG05\r\n\r\nG_M7513_IG03:\r\n       412BD0               sub      edx, r8d\r\n       4D63C0               movsxd   r8, r8d\r\n       4A8D0440             lea      rax, bword ptr [rax+2*r8]\r\n       488901               mov      bword ptr [rcx], rax\r\n       895108               mov      dword ptr [rcx+8], edx\r\n       488BC1               mov      rax, rcx\r\n\r\nG_M7513_IG04:\r\n       4883C428             add      rsp, 40\r\n       C3                   ret\r\n\r\nG_M7513_IG05:\r\n       E89DF34A5E           call     ThrowHelper:ThrowArgumentOutOfRangeException()\r\n       CC                   int3\r\n```\r\nSlicing a span with lengths specified by suitable functions of the span length should allow the range check to be optimized away (suitable meaning mods, `&`, guarded subtracts, etc). This should be a very common case as presumably users are almost always looking at the original length when figuring out slices and out of bounds slicing will be rare.\r\n\r\nOr, for an even more blatant example:\r\n```C#\r\n    static ReadOnlySpan<char> Slice(ReadOnlySpan<char> s)\r\n    {\r\n        ReadOnlySpan<char> result = s.Slice(s.Length);\r\n        return result;\r\n    }\r\n```\r\ncurrent asm is kinda sad:\r\n```asm\r\nG_M7513_IG01:\r\n       4883EC28             sub      rsp, 40\r\n\r\nG_M7513_IG02:\r\n       488B02               mov      rax, bword ptr [rdx]\r\n       8B5208               mov      edx, dword ptr [rdx+8]\r\n       448BC2               mov      r8d, edx\r\n       413BD0               cmp      edx, r8d\r\n       771B                 ja       SHORT G_M7513_IG05\r\n\r\nG_M7513_IG03:\r\n       418BD0               mov      edx, r8d\r\n       412BD0               sub      edx, r8d\r\n       4D63C0               movsxd   r8, r8d\r\n       4A8D0440             lea      rax, bword ptr [rax+2*r8]\r\n       488901               mov      bword ptr [rcx], rax\r\n       895108               mov      dword ptr [rcx+8], edx\r\n       488BC1               mov      rax, rcx\r\n\r\nG_M7513_IG04:\r\n       4883C428             add      rsp, 40\r\n       C3                   ret\r\n\r\nG_M7513_IG05:\r\n       E89EF33C5F           call     ThrowHelper:ThrowArgumentOutOfRangeException()\r\n       CC                   int3\r\n```\r\ncc @dotnet/jit-contrib ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15491/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15409", "title": "JIT: don't set morphed flag in gtFoldExpr and friends", "body": "Re #15386. Having these utility methods set the morphed flag when morph is active makes it hard to use them to precondition the code. Instead defer the flag setting to morph proper.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15392", "title": "Have assembly/module load events report if image contains R2R codegen", "body": "Currently it does not seem to be possible to determine if an assembly/module contains R2R codegen from the event stream. This fact is of interest to analysis tools since R2R code has distinctly different performance characteristics.\r\n\r\nIt seems like we could simply add new AssemblyFlag and ModuleFlag values to report on this directly.\r\n\r\nIt would also be nice to know if the R2R code in an image is not being used. I need look at the granularity of the R2R dependence checks to see if this is an assembly/module level thing or whether it also needs to appear for individual methods.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15392/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15256", "title": "JIT: poor CQ in msbuild's SinkWhitespace", "body": "`SinkWhitespace` is one of the hotter methods in msbuild in some scenarios:\r\nhttps://github.com/Microsoft/msbuild/blob/e105a17d3a245c3a97d2be6943ffdbfa5973b34c/src/Build/Evaluation/ExpressionShredder.cs#L691-L697\r\n\r\nCurrent jit produces this assembly:\r\n```asm\r\nG_M58123_IG01:\r\n       57                   push     rdi\r\n       56                   push     rsi\r\n       4883EC28             sub      rsp, 40\r\n       488BF1               mov      rsi, rcx\r\n       488BFA               mov      rdi, rdx\r\n\r\nG_M58123_IG02:\r\n       EB02                 jmp      SHORT G_M58123_IG04\r\n\r\nG_M58123_IG03:\r\n       FF07                 inc      dword ptr [rdi]\r\n\r\nG_M58123_IG04:\r\n       8B0F                 mov      ecx, dword ptr [rdi]\r\n       8B5608               mov      edx, dword ptr [rsi+8]\r\n       3BCA                 cmp      ecx, edx\r\n       7D5A                 jge      SHORT G_M58123_IG10\r\n       3BCA                 cmp      ecx, edx\r\n       735D                 jae      SHORT G_M58123_IG11\r\n       4863C9               movsxd   rcx, ecx\r\n       0FB74C4E0C           movzx    rcx, word  ptr [rsi+2*rcx+12]\r\n       81F9FF000000         cmp      ecx, 255\r\n       7F2A                 jg       SHORT G_M58123_IG07\r\n       83F920               cmp      ecx, 32\r\n       741E                 je       SHORT G_M58123_IG05\r\n       8D51F7               lea      edx, [rcx-9]\r\n       83FA04               cmp      edx, 4\r\n       7616                 jbe      SHORT G_M58123_IG05\r\n       81F9A0000000         cmp      ecx, 160\r\n       740E                 je       SHORT G_M58123_IG05\r\n       81F985000000         cmp      ecx, 133\r\n       0F94C1               sete     cl\r\n       0FB6C9               movzx    rcx, cl\r\n       EB05                 jmp      SHORT G_M58123_IG06\r\n\r\nG_M58123_IG05:\r\n       B901000000           mov      ecx, 1\r\n\r\nG_M58123_IG06:\r\n       EB18                 jmp      SHORT G_M58123_IG09\r\n\r\nG_M58123_IG07:\r\n       33D2                 xor      edx, edx\r\n       E88A65FD55           call     System.Globalization.CharUnicodeInfo:InternalGetCategoryValue(int,int):ubyte\r\n       83C0F5               add      eax, -11\r\n       83F802               cmp      eax, 2\r\n       7707                 ja       SHORT G_M58123_IG08\r\n       B901000000           mov      ecx, 1\r\n       EB02                 jmp      SHORT G_M58123_IG09\r\n\r\nG_M58123_IG08:\r\n       33C9                 xor      ecx, ecx\r\n\r\nG_M58123_IG09:\r\n       85C9                 test     ecx, ecx\r\n       759B                 jne      SHORT G_M58123_IG03\r\n\r\nG_M58123_IG10:\r\n       4883C428             add      rsp, 40\r\n       5E                   pop      rsi\r\n       5F                   pop      rdi\r\n       C3                   ret\r\n\r\nG_M58123_IG11:\r\n       E891DC385F           call     CORINFO_HELP_RNGCHKFAIL\r\n       CC                   int3\r\n```\r\nSome things that could be improved on:\r\n* redundant branch at top of IG04.\r\n* lack of register promotion for the string length\r\n* unnecessary materialization of the boolean value for `Char.IsWhiteSpace`. Note the value of `ecx` is set for all predcessors of IG09, so there's no need to test the value there (see #914).\r\n* likely the Latin1 whitespace test can be better expressed as a compare tree or maybe via some magic branchless hash. The values returning `true` are 0x9-0xD, 0x32, 0x85, and 0xA0. Not whitespace is possibly the case to optimize for.\r\n* stretch: promote the 'ref' param within the loop body.\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15256/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15130", "title": "JIT: poor CQ for list enumeration constructs", "body": "From some discussion over in dotnet/csharplang#1085. Both the `for` and `foreach` cases have suboptimal CQ. \r\n\r\nIn the `for` case there is a redundant branch in the inner loop.\r\n\r\nIn the `foreach` case the enumerator's `MoveNext` is not inlined. If we force this and `MoveNextRare` inline then the jit is not able to optimize away the version check overhead in the inner loop.\r\n\r\nWithout the inlines the `foreach` is rougly 2.9x slower than the `for`; with the inlines this drops to 1.3x or so.\r\n\r\n```C#\r\n    static int SumFor(List<int> l)\r\n    {\r\n        int result = 0;\r\n\r\n        for (int i = 0; i < l.Count; i++)\r\n        {\r\n            result += l[i];\r\n        }\r\n\r\n        return result;\r\n    }\r\n    \r\n    static int SumForeach(List<int> l)\r\n    {\r\n        int result = 0;\r\n\r\n        foreach (int i in l)\r\n        {\r\n            result += i;\r\n        }\r\n\r\n        return result;\r\n    }\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15130/reactions", "total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14890", "title": "JIT: consider optimizing constructor pattern for struct creation", "body": "Currently if you newobj a struct via a constructor call the jit assumes the struct's old value may be read during the construction of the new value. So the pattern emitted is:\r\n```\r\n;; zero temp obj storage\r\n;; call constructor on temp obj\r\n;; copy temp obj to the destination\r\n```\r\n\r\n\r\nWhen the final destination is register promoted all this tends to get cleaned up, but when the final destination can't be register promoted the code the jit produces can be surprisingly large and slow.\r\n\r\nFor instance, given\r\n```C#\r\nValueTask<int> Work() => new ValueTask<int>(42);\r\nValueTaskAwaiter<int> vt = Work().GetAwaiter();\r\n  ... vt.GetResult();\r\n```\r\n\r\nThe jit may produce code like:\r\n```asm\r\n       33C9                 xor      rcx, rcx\r\n       B82A000000           mov      eax, 42\r\n       488D542420           lea      rdx, bword ptr [rsp+20H]\r\n       C4E17957C0           vxorpd   xmm0, xmm0\r\n       C4E17A7F02           vmovdqu  qword ptr [rdx], xmm0\r\n       488D542420           lea      rdx, bword ptr [rsp+20H]\r\n       48890A               mov      gword ptr [rdx], rcx\r\n       894208               mov      dword ptr [rdx+8], eax\r\n       C4E17A6F442420       vmovdqu  xmm0, qword ptr [rsp+20H]\r\n       C4E17A7F442430       vmovdqu  qword ptr [rsp+30H], xmm0\r\n\r\n```\r\nIn most cases the aliasing the jit is worried about does not happen, and the new value could be constructed directly into the destination. And also in most cases this construction will fully write the fields of the struct so the zero initialization is not necessary.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14890/reactions", "total_count": 8, "+1": 6, "-1": 0, "laugh": 0, "hooray": 2, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14592", "title": "JIT: look into some small CQ issues in ValueTuple.GetHashCode", "body": "Couple of things to investigate here:\r\n* why an explicit null check remains after we've dereferenced `rcx`\r\n* what causes the shuffling back and forth between `esi` and `edx`\r\n```asm\r\n;  System.ValueTuple`2[Int32,Int32][System.Int32,System.Int32]:GetHashCode():int:this\r\n\r\nG_M51052_IG01:\r\n       57                   push     rdi\r\n       56                   push     rsi\r\n       4883EC28             sub      rsp, 40\r\n\r\nG_M51052_IG02:\r\n       8B11                 mov      edx, dword ptr [rcx]\r\n       8BF2                 mov      esi, edx\r\n       3909                 cmp      dword ptr [rcx], ecx   // explicit null check?\r\n       4883C104             add      rcx, 4\r\n       8BD6                 mov      edx, esi               // unnecessary?\r\n       8BF2                 mov      esi, edx               // unnecessary?\r\n       8B39                 mov      edi, dword ptr [rcx]\r\n       48B928307235FD7F0000 mov      rcx, 0x7FFD35723028\r\n       BA50010000           mov      edx, 336\r\n       E8B678805F           call     CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE\r\n       8B80F0070000         mov      eax, dword ptr [rax+07F0H]\r\n       8BD0                 mov      edx, eax\r\n       C1C205               rol      edx, 5\r\n       03D0                 add      edx, eax\r\n       8BC2                 mov      eax, edx\r\n       33C6                 xor      eax, esi\r\n       8BD0                 mov      edx, eax\r\n       C1C205               rol      edx, 5\r\n       03D0                 add      edx, eax\r\n       8BC2                 mov      eax, edx\r\n       33C7                 xor      eax, edi\r\n\r\nG_M51052_IG03:\r\n       4883C428             add      rsp, 40\r\n       5E                   pop      rsi\r\n       5F                   pop      rdi\r\n       C3                   ret\r\n```\r\ntest source\r\n```C#\r\nusing System;\r\nusing System.Runtime.CompilerServices;\r\n\r\nclass P\r\n{\r\n    [MethodImpl(MethodImplOptions.NoInlining)]\u00a0\r\n    static int VTHash(int i1, int i2)\u00a0\r\n    {\u00a0\r\n        ValueTuple<int, int> vt = ValueTuple.Create(i1, i2);\u00a0\r\n\r\n        return vt.GetHashCode();\u00a0\r\n    }\u00a0\r\n\r\n    public static void Main()\r\n    {\r\n        VTHash(1,1);\r\n    }\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14592/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/75385b1fa21f14076f05ca1045fc487d09337064", "message": "Update perflab tests to execute in a fixed order\n\nGoal is to pin class init overhead on one test consistently. Also we were\nnot picking up the \"optimize for benchmark\" attribute and so likely risking\nhaving tests execute concurrently."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/a76445568d42b9b7d37d9f6e94ec47393179585e", "message": "JIT: improve return types in cases with spill temps (#15766)\n\nIf the jit sees that an inlinee has multiple return sites or has gc ref locals\r\nit will choose to return the inline result via a temp. The jit was not assigning\r\na type to that temp and so losing track of some type information.\r\n\r\nSo, for inlinees returning ref types, initially type the return spill temp with\r\nthe declared return type of the method.\r\n\r\nWhen importing we may discover that particular return sites will return more\r\nspecific types. If all discovered return sites agree, we can update the return\r\ntype for the spill temp to match the consensus improved type.\r\n\r\nThis can lead to removal of some type checks and also to devirtualization.\r\n\r\nAddresses issues discussed in #9908 and #15743."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/16246c9117aa456eb0786d4e23e827dce585b6c0", "message": "JIT: fix decompose long left shift for overshift cases (#15704)\n\nNeed to reduce the shift amount modulo 64 to match the helper and\r\n`gtFoldExpr` behavior. Since reduced amount must be less than 64\r\nwe can remove handling for that case.\r\n\r\nAlso updating the arm LLSH helper.\r\n\r\nRe-enable the test case disabled by #15567 and also enable for arm/arm64.\r\n\r\nCloses #15566."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/a46475cdacca8beeb02193c2298f1df62328a317", "message": "JIT: fix issue with inline observations (#15713)\n\nIn DEBUG/CHECK builds the jit tries to keep track of failed inlines.\r\n\r\nBecause inlines can be rejected \"early\" (when the parent method\r\nis being imported) as well as \"late\" (when their call site is encountered\r\nby the inliner) there is a tracking mechanism to convey the early observations\r\nthat cause failures to be resurrected later on.\r\n\r\nThese observations sometimes didn't end up in the inline context, leading\r\nto assertions when dumping methods.\r\n\r\nFix is to add a new way to propagate the earlier observation to the context\r\nthat bypasses some of the policy sanity checks and simply record the reason\r\nthat the inline failed."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/acfabcda8a00b9898979d89ae8285edd25843aee", "message": "Fix formatting"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/60f74b3bf12e2993c7f928856b5740cbe03f6612", "message": "Spill the eval stack when storing to a pinned local.\n\nThe jit may not see direct interference between a pinned local and expressions that use the pinned value. So worst case it should assume that such interference exists and spill the stack when storing to a pinned local. Otherwise the jit may reorder unpins and calls that refer to pinned storage.\n\nFixes DevDiv 545749\n\n[tfs-changeset: 1685045]"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15801", "title": "Add ETL flags for ReadyToRun", "body": "Add flags to track the presence of ReadyToRun codegen in an assembly\r\nand module.\r\n\r\nAdd jitting flags to indicate when a method is jitted because the\r\nprecompiled code was rejected, either by a profiler or by ReadyToRun\r\ndependence tracking.\r\n\r\nTogether these can be used to distingish between\r\n* methods jitted because their assemblies were not precompiled\r\n* methods jitted because they were not precompiled in an otherwise\r\nprecompiled assembly", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15744", "title": "JIT: port fix to spill the eval stack when storing to a pinned local to release/2.0", "body": "Port of  #15706\r\n\r\nFixes an issue where the jit might reorder a call and an unpinning store.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/15488652", "body": "Bad merge on my part... will fix.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/15488652/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/15488656", "body": "Yep.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/15488656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/15488663", "body": "Also the declare/define of `vmResult` angers Clang because there are gotos spanning this code. While it's a bit of a hack, splitting this seems to quiet the warnings.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/15488663/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/15488664", "body": "Thanks for catching this.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/15488664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/15488667", "body": "Another merge issue...\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/15488667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/15489335", "body": "Good idea; done.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/15489335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16212413", "body": "The inlininer has some pretty strong assumptions that anything inlineable is a GT_CALL, and that anything that's an inline candidate has been hoisted to a top-level expression. So it's not going to be as simple as just setting a flag. Basically at the point we fail to convert to an intrinsic we need to rewrite as a call and go through the normal call processing.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16212413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/26196602", "body": "So maybe something like this (splitting out the profiler reason)?\r\n```\r\nProfilerRejectedPrecompiledCode=0x20,\r\nReadyToRunRejectedPrecompiledCode=0x40,\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/26196602/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/93463334", "body": "The JIT may actually build, but it probably won't run correctly. Last I knew there were still parts of the jit code that assumed sizeof(void *) was the target pointer size.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/93463334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/94641609", "body": "I can add a jit option to override and enable, sure.\r\n\r\nFWIW the regular desktop tests were passing with finally cloning enabled. I have not yet tried running anything that stresses thread abort.\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/94641609/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "mikedn": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15782", "title": "Implicit conversion from T[] to Span<T> generates poor code", "body": "```C#\r\nstatic Span<int> Test(int[] a) => a;\r\n```\r\ngenerates:\r\n```asm\r\nG_M33790_IG01:\r\nG_M33790_IG02:\r\n       4885D2               test     rdx, rdx\r\n       7507                 jne      SHORT G_M33790_IG03\r\n       33C0                 xor      rax, rax\r\n       4533C0               xor      r8d, r8d\r\n       EB18                 jmp      SHORT G_M33790_IG04\r\nG_M33790_IG03:\r\n       488D4210             lea      rax, bword ptr [rdx+16]\r\n       4C8BC0               mov      r8, rax  ; meh\r\n       498BC0               mov      rax, r8\r\n       4C8BC0               mov      r8, rax\r\n       8B4208               mov      eax, dword ptr [rdx+8]\r\n       8BD0                 mov      edx, eax  ; meh again\r\n       498BC0               mov      rax, r8\r\n       448BC2               mov      r8d, edx\r\nG_M33790_IG04:\r\n       488901               mov      bword ptr [rcx], rax\r\n       44894108             mov      dword ptr [rcx+8], r8d\r\n       488BC1               mov      rax, rcx\r\nG_M33790_IG05:\r\n       C3                   ret\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15108", "title": "[RyuJIT] Improve SSA construction throughput", "body": "I have various pending work that improves `SsaBuilder` & co. memory usage and performance, maybe it's good to have an issue to track all that.\r\n\r\nIt looks like with the changes I have now (some already merged) the memory usage of SsaBuilder can be halved (perhaps even more) and there's also a drop in instruction retired of 0.5-1% (total instructions retired, can't measure just instructions retired during SSA construction).\r\n\r\n- [x] Improve DF/IDF computation and storage (#14965)\r\n- [ ] Stop computing all IDFs up front (looks like there's simply no need to do this, `InsertPhiFunctions` can compute each IDF when needed and that allows reusing a single `BlkVector` for all IDFs) (#15146)\r\n- [ ] Improve SSA dom tree memory usage (#15006)\r\n- [ ] Eliminate duplicate SSA number bookkeeping (#15011)\r\n- [ ] Memory SSA should not reuse `LclSsaVarDsc`, the definition location information is not used and it wastes memory. A `ValueNumPair` is sufficient (possibly wrapped in a `SsaMemDef`)\r\n- [ ] Improve SSA renaming (#15000)\r\n- [ ] Improve `SsaBuilder::TopologicalSort` (we can use a single stack and avoid some object copying) (#15200)\r\n- [ ] Improve dom tree walking (we may be able to stop pushing all the dom tree children of a node and instead use iterators, similar to `TopologicalSort`)\r\n- [ ] Improve `fgExcludeFromSsa`. This is called many times and it's pretty large. `SsaBuilder` should call it once for every variable and then set a bit (looks like there are some spare bits available) in `LclVarDsc` that everyone else checks (#15351)\r\n- [ ] Stop creating SSA numbers (and VNs) for variables that are excluded from SSA. When `compInitMem` is true `SsaBuilder::RenameVariables` assigns SSA numbers to ALL variables (#15351)\r\n- [ ] Consider chaining PHIs and PHI_ARGs manually. Using `gtSetStmtInfo` and `fgSetStmtSeq` is expensive.\r\n\r\nSome of this (dom tree stuff, renaming) may apply to copy propagation as well since in its current form it mirrors SSA construction.\r\n\r\nOnce all of this is done it may be worth investigating extracting dominance related code into a separate class and merging with `fgComputeDoms` & co.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15108/reactions", "total_count": 5, "+1": 5, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/5fc35376ab9226f635c8f8979279614953bfaf47", "message": "Remove some redundant code from TreeNodeInfoInit"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/e79a4d58a433c84a6df9059b210922a5bd2c6690", "message": "Reset lvIsStructField when removing promoted struct vars (#15721)"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/d170e3a035c80567090aa56024f92ad5b532cdcf", "message": "Fix minor formatting issue in jit-call-morphing.md"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/a73638108cf2da7a9ca7ef643c3f71bec621fff4", "message": "Give a proper VN to GT_BOX (#15666)\n\nGT_BOX doesn't do anything so it should just get the VN of its sole operand. This allows assertion prop to see that the result of BOX is not null (since the BOX operand is the result of an object allocation which is never null)."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/a0d9f0f14d5941160f317085ca57562ee870b4e1", "message": "Remove some unnecessary boxing (#15676)"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/64ea34832c4f7417106959f932c746d08dd164a4", "message": "Replace a few for loops with foreach to avoid loop cloning (#15668)\n\nA pattern like\r\nint len = a.Length;\r\nfor (int i = 0; i < len; i++) { ... a[i] ... }\r\nmay result in unnecessary loop cloning.\r\n\r\nAnyway, there's no real reason to use a for loop in any of these case. Avois the need for a cast too.\r\n\r\nAlso remove duplicated code related to AppDomain.OnXResolveEvent method."}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15949", "title": "Fix 64 bit shift inconsistencies (on 32 bit targets)", "body": "Recent shift changes made the `JIT_LLsh` helper mask the shift count to 6 bits. The other 2 helpers (`JIT_LRsh` and `JIT_LRsz`) so now we get inconsistencies such as `(x >> 64) != (x << 64)`.\r\n\r\nThe ECMA spec says that \"the return value is unspecified if shiftAmount is greater than or equal to the width of value\" so the JIT has no obligation to implement a particular behavior. But it seems preferable to have all shift instructions behave similarly, it avoids complications and reduces risks.\r\n\r\nThis also changes `ValueNumStore::EvalOpIntegral` to mask the shift count for 64 bit shifts so it matches `gtFoldExprConst`. Otherwise the produced value depends on the C/C++ compiler's behavior.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15737", "title": "Skip commas when trying to remove some narrowing casts", "body": "In certain cases (assignment to a byte array/span element) the lhs of the assignment happens to be a comma node that wraps the indir.\r\n\r\nFixes #15731", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15690", "title": "[WIP] Delay long mul/div helper creation until decomposition", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15657", "title": "[WIP] Move FP DIV/MUL handling to genCodeForBinary", "body": "Floating point (SSE) MUL/DIV instructions have the same formats as ADD/SUB but they're handled by genCodeForMul and genCodeForDivMod. At least in the case of division, this results in duplicated logic being required in genCodeForDivMod.\r\n\r\nNo diffs.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15654", "title": "Delete unused SSA_FEATURE_USEDEF ifdefs", "body": "I don't see any point in keeping this code around. Keeping track of SSA uses could be useful but this implementation is not efficient and probably predates the `PerSsaArray` from `LclVarDsc` (we could add a vector of uses to `LclSsaVarDsc` if we need to).", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15595", "title": "Remove useless RangeCheck::Limit::keArray", "body": "A `keArray` limit is basically an alternative representation for a `keBinOpArray` limit with a 0 constant. Such limits are only created in `MergeEdgeAssertions` and in many cases they're are immediatly transformed into `keBinOpArray` limits because the range limits are inclusive and the common `i < a.len` assertion needs to be represented as `Limit(keBinOpArray, vn(a.len), - 1)`. Once transformed into `keBinOpArray` a limit never becomes `keArray` again.\r\n\r\nNo jit diffs.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15351", "title": "[WIP] Do not assign SSA numbers to excluded vars", "body": "Also improve `fgExcludeFromSsa`'s performance, it is called many times and does quite a bit of work. `SsaBuilder` can execute the relevant exclusion logic only once per lclvar and store the result in a `lvInSsa` bit in `LclVarDsc`.\r\n\r\nSaves a bit of memory (e.g. now we no longer push all variables onto SSA rename stacks) and 0.37% instruction retired (mostly due to the `fgExcludeFromSsa` change).\r\n\r\nPIN data: https://1drv.ms/x/s!Av4baJYSo5pjgrsOjE-3c5Tow10lFw\r\n\r\nMemStats diff: https://gist.github.com/mikedn/9c9d6d7b40306d9fff18109c3a4b5e9c", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15348", "title": "Remove useless IndirectAssignmentAnnotation", "body": "This annotation is supposed to be used by SSA and VN but that does not actually happen because `fgMorphCopyBlock` also marks the destination local as address exposed. See\r\nhttps://github.com/dotnet/coreclr/blob/3657a8cab68cdbf9990d98ba4e078f444f5fee82/src/jit/morph.cpp#L10871-L10901\r\n\r\nAlso, even if the local wasn't address exposed there are other parts of the JIT that should probably use this annotation but currently they do not:\r\n* Copy propagation attempts to mirror SSA renaming but it ignores `IndirectAssignmentAnnotation`.\r\n* Liveness also doesn't pay attention to `IndirectAssignmentAnnotation`. A comment in `fgMorphCopyBlock` even gives liveness as the reason why the destination local is address exposed.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15329", "title": "Ifdef out Compiler::lvaVarPref", "body": "This legacy data member makes the Compiler objects 4 kbytes larger than it needs to be...\r\n\r\n`nraUsed` drops by 7% and `allocateMemory` by 6%", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15301", "title": "[WIP] Fix inconsistent handling of zero extending casts", "body": "For casts that are supposed to zero extend the `GTF_UNSIGNED` must always be set (and obeyed).\r\n\r\nSome code failed to set the flag (e.g. when importing `add.ovf.un` instructions having `native int` and `int32` operands) and some other code failed to check the flag (e.g. x64 codegen, `gtFoldExprConst`) and instead decided to zero extend based on the cast destination type.\r\n\r\nThis resulted in discrepancies between ARM64 and x64 codegen and between constant folding performed by `gtFoldExprConst` and VN's `EvalCastForConstantArgs`.\r\n\r\nFixes #13501", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15206", "title": "Update memory histogram buckets", "body": "Use values that are more likely to match CPU cache sizes (e.g. L1 = 32K and L2 = 256K)\r\n\r\nExample output from crossgen corelib:\r\n```\r\n---------------------------------------------------\r\nDistribution of total memory allocated per method (in KB):\r\n     <=         64 ===>   11436 count ( 41% of total)\r\n     65 ..     128 ===>   11816 count ( 85% of total)\r\n    129 ..     192 ===>    2339 count ( 93% of total)\r\n    193 ..     256 ===>     823 count ( 96% of total)\r\n    257 ..     512 ===>     670 count ( 99% of total)\r\n    513 ..    1024 ===>     116 count ( 99% of total)\r\n   1025 ..    4096 ===>      55 count (100% of total)\r\n   4097 ..    8192 ===>       0 count (100% of total)\r\n\r\n---------------------------------------------------\r\nDistribution of total memory used      per method (in KB):\r\n     <=         16 ===>       0 count (  0% of total)\r\n     17 ..      32 ===>       7 count (  0% of total)\r\n     33 ..      64 ===>   11442 count ( 42% of total)\r\n     65 ..     128 ===>   11817 count ( 85% of total)\r\n    129 ..     192 ===>    2414 count ( 94% of total)\r\n    193 ..     256 ===>     763 count ( 97% of total)\r\n    257 ..     512 ===>     641 count ( 99% of total)\r\n    513 ..    1024 ===>     130 count ( 99% of total)\r\n   1025 ..    4096 ===>      41 count (100% of total)\r\n   4097 ..    8192 ===>       0 count (100% of total)\r\n```", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15200", "title": "[WIP] Improve SSA topological sort", "body": "Use a single stack (storing a single successor enumerator) instead of 3.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15146", "title": "Do not compute the IDF for all blocks in advance", "body": "`InsertsPhiFunctions` visits each block only once so there's no need to\r\ncompute and store the IDFs for all blocks in advance. The IDF of a given\r\nblock can be computed when the block is visited and discarded after\r\nthat. This way a single `BlkVector` can be reused for all blocks.\r\n\r\nThis saves 12% CMK_SSA memory.\r\n\r\nMemStats diff: https://gist.github.com/mikedn/d5fb13e06f181f29de420510fd07d7d9\r\n\r\nNo jit diffs.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15025", "title": "[WIP] Stop passing CompAllocator pointers around", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15011", "title": "[WIP] Eliminate duplicate SSA number bookkeeping", "body": "During SSA construction `SsaRenameState` keeps a definition count for each variable in an array. But each variable has a `lvPerSsaData` array that does almost the same thing, count definitions. \"Almost\" because `lvPerSsaData` is a `JitExpandArray` that tracks only the array size and not the number of elements actually stored in the array.\r\n\r\nReplace `JitExpandArray` with purposely designed \"array\" that is in charge with allocating new SSA numbers  and handles their intricacies - `RESERVED_SSA_NUM`, `UNINIT_SSA_NUM` and `FIRST_SSA_NUM`.\r\n\r\nThis also allows the removal of the allocator from the array. Allocating new SSA numbers happens only during SSA construction and it's reasonable to pass the allocator to `AllocSsaNum` rather than increase the size of `PerSsaArray` and `LclVarDsc`.\r\n\r\nSaves 0.2% in instructions retired and a bit of SSA and LvaTable memory.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15006", "title": "Improve SSA dom tree memory usage", "body": "This decreases the memory required for dominance trees created by `SsaBuilder`. The children of a block can be stored in a vector instead of a hashtable.\r\n\r\nSaves 10% CMK_SSA memory, 16% CMK_CopyProp memory and 0.1% instructions retired. Some other numbers have gone up a bit, presumably a side effect of changes in ordering that also cause jit diffs. But nraUsed still shows a 0.5% decrease. \r\n\r\nCMK_Generic increased by 1.7%, too bad we don't know what exactly that memory is used for...\r\n\r\nPIN data: https://1drv.ms/x/s!Av4baJYSo5pjgrsIs0UzJL_pVDvQ-Q\r\n\r\nMemStats diff: https://gist.github.com/mikedn/cb4a47a043966cd52c7e6d10513713a2\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15000", "title": "[WIP] Improve SSA renaming memory usage", "body": "I have to do a lot of cleanup before it's ready (there's way too much unrelated refactoring in this) but using plain old singly linked list saves 19% CMK_SSA memory and 0.09% retired instructions without hurting code readability (IMO).", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/14393", "title": "[WIP] Improve FP NEG/ABS codegen", "body": "Remove the need to allocate a temp register to hold the bit mask required by floating point NEG/ABS so we can generate:\r\n```asm\r\nC4E178570504000000   vxorps   xmm0, xmmword ptr [reloc @RWD00]\r\n```\r\ninstead of\r\n```asm\r\nC4E17A100D0C000000   vmovss   xmm1, dword ptr [reloc @RWD00]\r\nC4E17857C1           vxorps   xmm0, xmm1\r\n```\r\nThis requires emitter support to generate 16 byte aligned constants.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/12676", "title": "[WIP] Enable cast operand containment", "body": "This improves code generation for (u)int -> (u)long casts without overflow when the cast operand is a GT_IND node. Currently this is a two step process - first load the value from memory (and widen it to TYP_INT if it's a small int value) and then widen to TYP_LONG. This can be avoided by containing the cast operand.\r\n\r\nFixes #12595", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72804145", "body": "But what is the issue here? That code you link to is not enabled in CoreCLR and AFAIK it's not enabled in the desktop version either.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72804145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72940544", "body": "The column number can be obtained by passing the exception object to the stack trace class, that's trivial. But there's no useful column number that you can get from a PDB, the sequence points generated by the C# (and likely any other) compiler usually track entire statements. One would need to first make the compiler emit sequence points for sub-expressions and that's problematic partly because the debug information would become larger, partly because sub-expressions can overlap and inevitably leads to overlapping sequence points. This may end up requiring changes to the debug format.\n\nThe JIT compiler too seems to track IL offsets at statement level (or an approximation of a statement).\n\nTo me this approach sounds like a non-starter. A lot of work for questionable benefit. And it's likely that it will only work properly with debug binaries.\n\nAnother approach might be to have the runtime figure out what was variable was stored in the base/index register of the memory operand that caused the access violation. The debugger can usually map a variable to a register to display its value so maybe doing the opposite wouldn't be too much trouble. But then again, this will probably work correctly only with debug binaries.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72940544/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72947037", "body": "All .NET JIT compilers I know generate `lock add` and `lock cmpxchg` rather than calls. The only exception I know are 64 bit interlocked operations on x86. Is that what you're talking about? Or do you have some sample code that shows this issue?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72947037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72947260", "body": "I think that the tests you're looking for are in the corefx repository, see this for example: https://github.com/dotnet/corefx/blob/master/src/System.Runtime/tests/System/Enum.cs\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72947260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73002313", "body": "The debugger disables all JIT optimizations, not only inlining.  See Tools\\Options\\Debugging\\General\\Suppress JIT optimization on module load.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73002313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/10417448", "body": "@cmckinsey Unfortunately this change accidentally reverted the fix for the `isinst` null check \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/10417448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/15488139", "body": "`enum class`? With member names such as `SUCCESS` there's a good chance that an unscoped enum will result in conflicts sooner or later.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/15488139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/15488170", "body": "Looks like the message was accidentally changed from `Inlinee is vararg` to `Inlinee has no body`.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/15488170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/15488191", "body": "Brace position doesn't match the style\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/15488191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/15488205", "body": "Seems like this `inlineCandidateInfo` could be moved below the following `if`s.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/15488205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/15488213", "body": "Doesn't seem related to inlining\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/15488213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/15488229", "body": "This change is from a recently merged commit, perhaps a rebase is needed?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/15488229/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/36034603", "body": "Funny thing that I did exactly that initially but then changed my mind thinking it's not worth the trouble. I'll take another look at this.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/36034603/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/36034732", "body": "I'm not a fun of such combined variables, we get more variables for unclear benefit. \n\nBesides, I hope that this particular section will go away or be improved sooner or later. It works but it's kind of ugly. If we find that this issue affects other 32 bit platforms we'll have to commit prebuilt headers for 32 bit anyway.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/36034732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/36098705", "body": "If I use the prebuilt headers then I get the following error while building cee_wks:\n\n> `d:\\projects\\coreclr\\src\\vm\\cominterfacemarshaler.cpp(169): error C2664: 'HRESULT IManagedObject::GetObjectIdentity(BSTR *,int *,__int64 *)' : cannot convert argument 3 from 'INT_PTR *' to '__int64 *' [D:\\Projects\\m\n>        coreclr\\bin\\obj\\Windows_NT.x86.Debug\\src\\vm\\wks\\cee_wks.vcxproj]`\n\nThe issue is that in the prebuilt mscoree.h the type of `pCCW` parameter declared by `IManagedObject::GetObjectIdentity` is `__int64`. cominterfacemarshaler.cpp uses `INT_PTR` so it works on x64 but not on x86.\n\nmscoree.idl contains the following:\n\n``` C++\n#ifdef _WIN64\n    #define CCW_PTR __int64 *\n#else // WIN64\n    #define CCW_PTR int *\n#endif // WIN64\n```\n\nso you get different headers out of the IDL file depending on the target arch.\n\nTo make things even more confusing\n- mscoree.h that ships with the Windows SDK uses `int` for this parameter so it appears that it is x86 specific. But I don't remember ever seeing arch specific headers in the SDK before.\n- the MSDN [documentation](https://msdn.microsoft.com/en-us/library/aa964958%28v=vs.110%29.aspx) says that the type of the parameter is CCW_PTR but that type didn't made it to the header file.\n\nSomething seems wrong but I don't know what and where.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/36098705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/36161408", "body": "Thanks, I reverted all IDL & prebuilt header related changes.\n\nIt builds fine on my machine but the CI server seems to have gone on holiday :tropical_drink:\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/36161408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/46755679", "body": "It's supported in the sense that it builds successfully for x86 (or at least used to when I wrote that if).\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/46755679/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59664198", "body": "> For JIT generated code, it follows the native ABI where the passed-in reference is a pointer to a compiler generated temp local on the stack.\n\nHow set in stone is this convention? In addition to the requirement for GC write barriers this also prevents some compiler optimizations, LICM for example. Passing a byref to the original value and copying the value inside the callee would avoid such issues.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59664198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "meold": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15751", "title": "Runtime exception on android ", "body": "Hi,\r\nI'm facing up with a strange behavior of the compiled HelloWorld app for android coreclr.\r\nSo, first of all, the cross building of the coreclr and corefx had a bunch of issues, but at the end it was built successfully.\r\nSo after that I've compiled a very simple app with a single \"Console.WriteLine(\"Hello World\");\" statement in the Main. Than I prepared necessary files in the dist/helloworld folder (as described in [this](https://github.com/qmfrederik/coredroid) tutorial) and pushed it with adb tool to android device.\r\n\r\nSo, when I run \r\n`coreuser@Ubuntu16D:~/git/coredroid/apps/helloworld$ adb shell LD_LIBRARY_PATH=/data/local/tmp/coredroid/ /data/local/tmp/coredroid/corerun /data/local/tmp/coredroid/helloworld.dll` \r\n\r\nI got a known error \"Couldn't find a valid ICU package installed on the system. Set the configuration flag System.Globalization.Invariant to true if you want to run with no globalization support.\" with the next output:\r\n\r\n`WARNING: linker: /data/local/tmp/coredroid/libcoreclr.so: unused DT entry: type 0xf arg 0x10e2\r\nWARNING: linker: /data/local/tmp/coredroid/libclrjit.so: unused DT entry: type 0xf arg 0xa79\r\nFailFast: Couldn't find a valid ICU package installed on the system. Set the configuration flag System.Globalization.Invariant to true if you want to run with no globalization support.\r\n   at System.Environment.FailFast(System.String)\r\n   at System.Globalization.GlobalizationMode.GetGlobalizationInvariantMode()\r\n   at System.Globalization.GlobalizationMode..cctor()\r\n   at System.Globalization.GlobalizationMode.get_Invariant()\r\n   at System.Globalization.CultureData.CreateCultureWithInvariantData()\r\n   at System.Globalization.CultureData.get_Invariant()\r\n   at System.Globalization.CultureData.GetCultureData(System.String, Boolean)\r\n   at System.Globalization.CultureInfo.InitializeFromName(System.String, Boolean)\r\n   at System.Globalization.CultureInfo..ctor(System.String, Boolean)\r\n   at System.Globalization.CultureInfo.Init()\r\n   at System.Globalization.CultureInfo..cctor()\r\n   at System.Globalization.CultureInfo.get_InvariantCulture()\r\n   at System.IO.TextWriter+NullTextWriter..ctor()\r\n   at System.IO.TextWriter..cctor()\r\n   at System.IO.StreamWriter..ctor(System.IO.Stream, System.Text.Encoding, Int32, Boolean)\r\n   at System.Console.CreateOutputWriter(System.IO.Stream)\r\n   at System.Threading.LazyInitializer.EnsureInitializedCore[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.__Canon ByRef, System.Object ByRef, System.Func1<System.__Canon>)\r\n   at System.Threading.LazyInitializer.EnsureInitialized[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.__Canon ByRef, System.Object ByRef, System.Func1<System.__Canon>)\r\n   at System.Console.WriteLine(System.String)\r\n   at ConsoleApp.Program.Main(System.String[])\r\nAborted`\r\n\r\nThen I've tried to add `CORECLR_GLOBAL_INVARIANT=1` env variable to the previous command, but got another runtime error:\r\n\r\n`WARNING: linker: /data/local/tmp/coredroid/libcoreclr.so: unused DT entry: type 0xf arg 0x10e2\r\nWARNING: linker: /data/local/tmp/coredroid/libclrjit.so: unused DT entry: type 0xf arg 0xa79\r\nUnhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object.\r\n   at System.IO.StreamWriter..ctor(Stream stream, Encoding encoding, Int32 bufferSize, Boolean leaveOpen)\r\n   at System.Console.CreateOutputWriter(Stream outputStream)\r\n   at System.Threading.LazyInitializer.EnsureInitializedCore[T](T& target, Object& syncLock, Func1 valueFactory)\r\n   at System.Threading.LazyInitializer.EnsureInitialized[T](T& target, Object& syncLock, Func1 valueFactory)\r\n   at System.Console.WriteLine(String value)\r\n   at ConsoleApp.Program.Main(String[] args) in /home/padre/git/coredroid/apps/helloworld/Program.cs:line 9\r\nAborted`\r\n\r\nSo I'm wondering how I can to localize this error - is it something wrong with cross-building of the coreclr or some other issue?\r\nAny suggestions would very helpful.\r\nThanks.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15687", "title": "liblttng problem with build for android", "body": "Hello!\r\nAfter i run  cross/build-android-rootfs.sh I have this output. Can you help me please??\r\n\r\n`CMake Error at src/pal/src/configure.cmake:1347 (message):\r\nCannot find liblttng-ust-dev. Try installing liblttng-ust-dev (or the\r\nappropriate packages for your platform)\r\nCall Stack (most recent call first):\r\nsrc/pal/src/CMakeLists.txt:5 (include)\r\n\r\n-- Configuring incomplete, errors occurred!\r\nSee also \"/git/coreclr/bin/obj/Linux.arm64.Debug/CMakeFiles/CMakeOutput.log\".\r\nSee also \"/git/coreclr/bin/obj/Linux.arm64.Debug/CMakeFiles/CMakeError.log\".\r\n~/git/coreclr\r\nFailed to generate CoreCLR component build project!`", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "GrabYourPitchforks": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15731", "title": "[JIT] Unnecessary movzx instruction when writing a value to a Span of byte", "body": "When writing to a `Span<byte>`, the JIT will emit an unnecessary `movzx` instruction if it has also emitted a bounds check for the memory access. Writing code which causes the JIT to elide the bounds check will also remove the extra `movzx` instruction.\r\n\r\nThe samples below show amd64 codegen.\r\n\r\n**Sample code with JIT-included automatic bounds check:**\r\n\r\n```csharp\r\n[MethodImpl(MethodImplOptions.NoInlining)]\r\npublic static void Foo(uint value, Span<byte> buffer)\r\n{\r\n    int index = 0;\r\n    value -= 10;\r\n    buffer[index] = (byte)value;\r\n}\r\n```\r\n```asm\r\n00007FF9BCAA2A10  sub         rsp,28h  \r\n00007FF9BCAA2A14  add         ecx,0FFFFFFF6h  \r\n00007FF9BCAA2A17  cmp         dword ptr [rdx+8],0  \r\n00007FF9BCAA2A1B  jbe         00007FF9BCAA2A2A  \r\n00007FF9BCAA2A1D  mov         rax,qword ptr [rdx]  \r\n00007FF9BCAA2A20  movzx       edx,cl  \r\n00007FF9BCAA2A23  mov         byte ptr [rax],dl  \r\n00007FF9BCAA2A25  add         rsp,28h  \r\n00007FF9BCAA2A29  ret  \r\n00007FF9BCAA2A2A  call        00007FFA1C731C50  \r\n00007FF9BCAA2A2F  int         3  \r\n```\r\n\r\nNote in particular that instead of writing the contents of the _cl_ register directly, the value is bounced through the _edx / dl_ register before being written.\r\n\r\n**Sample code with manual branch which elides JIT's auto bounds check:**\r\n\r\n```csharp\r\n[MethodImpl(MethodImplOptions.NoInlining)]\r\npublic static void Bar(uint value, Span<byte> buffer)\r\n{\r\n    int index = 0;\r\n    value -= 10;\r\n    if ((uint)index >= (uint)buffer.Length) { goto OutOfRange; }\r\n    buffer[index] = (byte)value;\r\n    return;\r\n\r\n    OutOfRange:\r\n    ref byte unused = ref buffer[index]; // will trigger exception\r\n}\r\n```\r\n```asm\r\n00007FF9BCA92A50  sub         rsp,28h  \r\n00007FF9BCA92A54  mov         rax,qword ptr [rdx]  \r\n00007FF9BCA92A57  mov         edx,dword ptr [rdx+8]  \r\n00007FF9BCA92A5A  add         ecx,0FFFFFFF6h  \r\n00007FF9BCA92A5D  test        edx,edx  \r\n00007FF9BCA92A5F  jbe         00007FF9BCA92A68  \r\n00007FF9BCA92A61  mov         byte ptr [rax],cl  \r\n00007FF9BCA92A63  add         rsp,28h  \r\n00007FF9BCA92A67  ret  \r\n00007FF9BCA92A68  cmp         edx,0  \r\n00007FF9BCA92A6B  jbe         00007FF9BCA92A72  \r\n00007FF9BCA92A6D  add         rsp,28h  \r\n00007FF9BCA92A71  ret  \r\n00007FF9BCA92A72  call        00007FFA1C731C50  \r\n00007FF9BCA92A77  int         3\r\n```\r\n\r\nNote the direct write from the _cl_ register to the address in _rax_. (The reason I wrote the _OutOfRange_ label like I did is that it causes the JIT to emit `call 00007FFA1C731C50` in the failure case. Otherwise I'd have to manually throw and it causes the codegen to look wonky.)", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15731/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15723", "title": "[JIT] Elide bounds check for reverse iteration over arrays and spans", "body": "Currently the JITter is smart enough to elide bounds checks when forward-iterating over arrays or spans, as in the below sample.\r\n\r\n```csharp\r\nbyte[] array;\r\nfor (int i = 0; i < array.Length; i++) {\r\n  // consume array[i]\r\n}\r\n```\r\n\r\nIt would help certain tight loops if the JITter could also recognize the reverse-iteration pattern and elide the bounds checks in that scenario as well.\r\n\r\n```csharp\r\nbyte[] array;\r\nfor (int i = array.Length - 1; i >= 0 /* or any non-negative const */; i--) {\r\n  // consume array[i]\r\n}\r\n```\r\n\r\nThis optimization would save a `cmp` and `jae` instruction in these tight loops, _and_ in certain cases it would also allow omitting the stack frame setup that normally accompanies methods that might throw exceptions.\r\n  ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15723/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/e8aef1994dc4bebc95b62c85f03fcc587f9a2510", "message": "Allow implicit conversion of null arrays to empty Memory instances"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15947", "title": "Optimize Span.Copy and Span.TryCopyTo", "body": "See #15076 for perf measurements.\r\n\r\nThere are four specific optimizations being considered here.\r\n\r\n1. Tweak the flow graph of `TryCopyTo` (e.g., single return statement) to encourage code gen to inline the method.\r\n2. Remove the _fixed_ statement from the `CopyTo` core implementation in order to avoid the overhead of setting up pinned locals on the stack. This also allows code gen to perform a tail call rather than a standard call into the core _Memmove_ implementation.\r\n3. Accept `nuint` as a parameter to the `CopyTo` core implementation to take advantage of `TryCopyTo` being inlined, allowing code gen to be more efficient with how it emits `mov` / `movsxd` instructions.\r\n4. Create a ref-based `Memmove` implementation which is a sister to the pointer-based implementation. Right now only `Span` calls into this, but presumably other types like `Array` could be changed to do so.\r\n\r\nThe perf measurements in #15076 show how some of these interplay with each other. For example, the test case which copies a `Span<object>` doesn't benefit from removing _fixed_ (since code gen would've pruned that path), but it does benefit from the flow graph changes, so that can be used as an estimate for how much the flow graph changes alone contribute to the total performance profile of all test cases.\r\n\r\nI've done some basic correctness tests but **have not** performed proper testing of the _Memmove_ implementation. I've also not yet profiled this PR with overlapping buffers.\r\n\r\nFinally, like the earlier `Array.Reverse` proposal, this leverages `ByReference<T>` to mimic a mutable ref. Presumably the ref reassignment feature of C# 7.3 will allow us to get rid of this. But the perf gain from using `ByReference<T>` in this manner might make it worthwhile to do this while waiting for the language feature to come online.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "danmosemsft": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15719", "title": "ARM legs are failing in CI in release/2.0.0", "body": "It looks like these have never passed? \r\n\r\n```\r\n15:54:41 BUILDTEST: Commencing build of native test components for arm/Release\r\n15:54:41 BUILDTEST: Using environment: \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\Tools\\\\..\\..\\VC\\Auxiliary\\Build\\vcvarsall.bat\" x86_arm\r\n15:54:41 **********************************************************************\r\n15:54:41 ** Visual Studio 2017 Developer Command Prompt v15.0.26730.16\r\n15:54:41 ** Copyright (c) 2017 Microsoft Corporation\r\n15:54:41 **********************************************************************\r\n15:54:42 The input line is too long.\r\n15:54:42 :export_x86\r\n15:54:42  was unexpected at this time.\r\n15:54:42 \r\n```\r\n\r\nhttps://github.com/dotnet/coreclr/pull/15686\r\n\r\nI don't see a line like `:export_x86` in the vcvars related batch files.\r\n\r\n@RussKeldorph who sponsors the ARM legs? ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/88066c546d826b00f361e91df9f9591fce549a2c", "message": "Remove .NET limit on env var name and value length\n\nSigned-off-by: dotnet-bot <dotnet-bot@microsoft.com>"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/dd651509b9082f3117000e168007d5e1e1e72d32", "message": "Update filetimes to nsec (#15872)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/26516081", "body": "This does not call the new VslueStringBuilder ctor overload I suggested, can your please add that? Does the reasoning make sense?", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/26516081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "gregg-miskelly": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15709", "title": "Debugger exited with COR_E_EXECUTIONENGINE(0x80131506) on netcoreapp2.0 with special code", "body": "_From @yyjdelete on December 19, 2017 6:41_\n\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET \u547d\u4ee4\u884c\u5de5\u5177 (2.1.3)\r\n\r\nProduct Information:\r\n Version:            2.1.3\r\n Commit SHA-1 hash:  a0ca411ca5\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17046\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.3\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.4\r\n  Build    : 7f262f453d8c8479b9af91d34c013b3aa05bc1ff\r\n```\r\nVS Code version:`1.18.1_x64/1.20.0-insider_x64`\r\nC# Extension version:`1.13.1`\r\n\r\n## Steps to reproduce\r\n1. Add the attached file, and target `netcoreapp2.0`\r\n2. Change configuration from Debug to Release\r\n3. Disable JustMyCode\r\n4. Set an breakpoint at base.Test()\r\n5. Start Debug\r\n6. Add watch to this.Data or this.ToString() or just expand this\r\n7. See debuger exit with COR_E_EXECUTIONENGINE(0x80131506) on netcoreapp2.0\r\n\r\n<details>\r\n<summary>Program.cs</summary>\r\n\r\n```cs\r\nusing System;\r\nclass Program\r\n{\r\n    public abstract class T1\r\n    {\r\n        public byte data = 1;\r\n        public virtual byte Data => data;\r\n        public virtual void Test()\r\n        {\r\n            Console.WriteLine(\"T1\");\r\n            //Not happen after uncomment this\r\n            //Console.WriteLine(Environment.StackTrace);\r\n        }\r\n    }\r\n    public class T2 : T1\r\n    {\r\n        public override void Test()\r\n        {\r\n            //new csproj format, and TargetFramework: net461 or netcoreapp2.0\r\n            //1. Set an breakpoint here, disable `Just My Code`, and debug with Release build(Debug works well)\r\n            //2.1 Expand `this` or wath `this.Data`, `this.ToString()` or some others\r\n            //2.2 Or type `this.Data`/`this.GetType().Name` in immediately window(System.ExecutionEngineException, exit after continue, but if you don't contine and type again, you can get the result).\r\n            base.Test();\r\n            //Not happen after uncomment this\r\n            //Console.WriteLine(\"T2\");\r\n        }\r\n    }\r\n    private static T1 t1 = new T2();\r\n    private static void Main(string[] args)\r\n    {\r\n        try {\r\n            t1.Test();\r\n        }catch(Exception e){\r\n            Console.Error.WriteLine(e);\r\n        }\r\n        Console.ReadLine();\r\n    }\r\n}\r\n```\r\n</details>\r\n\r\n---\r\n\r\nNOTE: \r\n1. When set another breakpoint at t1.Test(), and watch t1.Data first and continue to next breakpoint, it works well.\r\n2. This also happen in VS2017.6p1 and net471/netcoreapp2.0.\r\n3. This don't happen with netcoreapp1.1 with all debugger.\r\n4. This not happen on `JetBrains Rider` nor `dnSpy`, maybe only an issue with VS's debugger?\r\n5. Not tested on linux.\r\n\r\n## Expected  behavior\r\nNot crash.\r\n\r\n## Actual behavior\r\nThe target process corrupts itself and exits.\r\n\r\n----\r\nAlready post an issue at https://developercommunity.visualstudio.com/content/problem/166880/debugger-crash-with-systemexecutionengineexception.html , but found the same thing also happen with vscode, so also report it here. \r\n  \n\n_Copied from original issue: OmniSharp/omnisharp-vscode#1927_", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "stevehayles": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15693", "title": "Dotnet 'myApp.dll' hang in lttng running on arm32", "body": "Running a very framework dependent console application with the command 'dotnet myapp.dll' causes a hang running on a simple yocto image on an Rpi3 (arm32)\r\n\r\nRunning dotnet --info produces the expected output of \r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\nbut running any application including a very basic app that simply writes to the console completely hangs with zero output to the terminal.\r\n\r\nRunning with COREHOST_TRACE=1 produces similar output to what is seen running the app on another Linux machine but it hangs before the expected line \"Property TRUSTED_PLATFORM_ASSEMBLIES = ....\"\r\n\r\nThe 'installation' has been from the binary release at [https://dotnetcli.blob.core.windows.net/dotnet/Runtime/2.0.0/dotnet-runtime-2.0.0-linux-arm.tar.gz](url)\r\n\r\nThe final few lines of output before hanging are\r\n\r\n`Considering entry [runtime.linux-arm.Microsoft.NETCore.DotNetHostPolicy/2.0.0/runtimes/linux-arm/native/libhostpolicy.so] and probe dir [/opt/dotnet/shared/Microsoft.NETCore.App/2.0.0]\r\n    Local path query exists /opt/dotnet/shared/Microsoft.NETCore.App/2.0.0/libhostpolicy.so\r\n    Probed deps json and matched '/opt/dotnet/shared/Microsoft.NETCore.App/2.0.0/libhostpolicy.so'\r\nThe resolved JIT path is '/opt/dotnet/shared/Microsoft.NETCore.App/2.0.0/libclrjit.so'\r\nCoreCLR path = '/opt/dotnet/shared/Microsoft.NETCore.App/2.0.0/libcoreclr.so', CoreCLR dir = '/opt/dotnet/shared/Microsoft.NETCore.App/2.0.0/'`\r\n\r\nAt this stage ctrl+c has no effect and the process needs to be killed to recover the terminal\r\n\r\nThe full output is attached along with the application\r\n\r\n[output.txt](https://github.com/dotnet/coreclr/files/1599325/output.txt)\r\n[testApp.zip](https://github.com/dotnet/coreclr/files/1599326/testApp.zip)\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15693/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "RussellHaley": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15674", "title": "FreeBSD tests fail to build on Windows 10. Suspect is System.Private.mscorlib.dll", "body": "I submitted a pull request some days back with no comments yet (7days). I am splitting out the issue I am having into a separate er, issue. I modified the build-test.cmd to get them to run, but the build failure seems to be with missing portions of the mscorlib. (see pull request https://github.com/dotnet/coreclr/pull/15627 for changes)\r\n\r\nI have not been able to get the FreeBSD tests to successfully build on Windows 10. First I build the FreeBSD corlib, then build the tests:\r\n\r\nbuild.cmd -freebsdmscorlib\r\nWhich builds successfully. Running build-test.cmd -buildos FreeBSD sets __buildOS=FreeBSD, __noCrossgen=1, __targetWindows=0\r\n\r\nbuild-test.cmd -buildos FreeBSD\r\n...\r\nbaseservices.compilerservices.XUnitWrapper.cs(20,83): error CS0117: 'Assembly' does not contain a definition for 'GetExecutingAssembly' \r\n\r\n[c:\\Users\\russh\\Git\\dotnet\\coreclr\\bin\\tests\\FreeBSD.x64.Debug\\TestWrappers\\baseservices.compilerservices\\baseservices.compilerservices.XUnitWrapper.csproj]\r\n\r\nMy conjecture at this point is that the correct partial classes for Assembly.cs are not being added when building the FreeBSD System.Private.MsCorlib.dll via build.cmd -freebsdmscorlib\r\n\r\nThoughts? Please let me know which build outputs you would like (pertaining to the aforementioned error).", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15674/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15627", "title": "Changes to build-test system for FreeBSD integration ", "body": "This is a preliminary review of the changes that I have made to progress the coreclr FreeBSD tests. I modified the build-test.cmd to expose the __buildOS variable (and set others) to allow the tests to build on Windows 10. I modified the runtest.proj as the original was throwing an error (I am unsure if my changes are valid). I modified run-test.sh to allow the tests to run on FreeBSD 11. \r\n\r\nUpdate: I have split out the error I am getting into a separate issue:\r\nhttps://github.com/dotnet/coreclr/issues/15674\r\n\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "iskiselev": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15669", "title": "Resolve entry-point assembly on profiler initialization", "body": "Looks like there is no any simple way to resolve entry-point assembly path in `ICorProfilerCallback::Initialize` to take a decision, if application should be profiled or not in case if application is started using dotnet. The only way will I see now is to parse command-line arguments within profiler, which is bad - as some command-line arguments treated as \"internal implementation details\" (see dotnet/cli#2243) and in any case require repeating many part of CoreCLI command-line parser.\r\nI'm not sure which repository is best for this issue. It looks related to dotnet/core-setup#2007 and some discussions in dotnet/cli#6237.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Dmitry-Me": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15632", "title": "Use of delete[] inside ComCallWrapperTemplate::Cleanup() yields undefined behavior", "body": "`ComCallWrapperTemplate::Cleanup()` invokes `delete[] this`. Here's how the object memory is allocated inside `ComCallWrapperTemplate::CreateTemplate()`:\r\n\r\n    pTemplate = (ComCallWrapperTemplate*)new BYTE[sizeof(ComCallWrapperTemplate) + numInterfaces * sizeof(SLOT)];\r\n\r\nWhen `delete[] this` is invoked `this` has type `ComCallWrapperTemplate*` and it's undefined behavior to use `delete[]` on a pointer which has type unrelated to the type used with `new[]`. `this` must be first cast to `BYTE*`.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15632/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Budenniy": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15625", "title": "Path.GetDirectoryName missing/excess quotation mark?", "body": "Ran into an issue with System.IO.Path.GetDirectoryName(string path):\r\nIf 'path' is enclosed in (double) quotation marks, the result still contains quotation mark at 0 position, but no the trailing one.\r\n\r\nCode:\r\n\r\n```c#\r\nusing System;\r\nusing System.IO;\r\n\r\nnamespace Path_with_spaces\r\n{\r\n\tclass Program\r\n\t{\r\n\t\tstatic void Main(string[] args)\r\n\t\t{\r\n\t\t\tConsole.WriteLine(Environment.CommandLine);\r\n\t\t\tConsole.WriteLine(Path.GetDirectoryName(Environment.CommandLine));\r\n\t\t}\r\n\t}\r\n}\r\n```\r\nOutput:\r\n```\r\nC:\\Development\\Temp\\Path with spaces>dotnet run\r\n\"C:\\Development\\Temp\\Path with spaces\\bin\\Debug\\netcoreapp2.0\\Path with spaces.dll\"\r\n\"C:\\Development\\Temp\\Path with spaces\\bin\\Debug\\netcoreapp2.0\r\n```\r\nVersion: \r\nAssembly netstandard 2.0.0.0\r\n\r\nExpected result: \r\nEither both or no quotation marks - or - an ArgumentException mentioning 'path' format not being supported.\r\n\r\nAm I missing anything?\r\n\r\n[edited by @danmosemsft for formatting only]", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15625/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "swgillespie": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15589", "title": "[Local GC] CoreFX test failure: System.Tests.GCTests.LatencyRoundtrips_LowLatency", "body": "This is the one (!) CoreFX test failure that arises when using a standalone GC:\r\n\r\n```\r\n     System.Tests.GCTests.LatencyRoundtrips_LowLatency(value: LowLatency) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: LowLatency\r\n        Actual:   Interactive\r\n        Stack Trace:\r\n           E:\\GitHub\\corefx\\src\\System.Runtime\\tests\\System\\GCTests.cs(407,0): at System.Tests.GCTests.LatencyRoundtrips(GCLatencyMode value)\r\n           E:\\GitHub\\corefx\\src\\System.Runtime\\tests\\System\\GCTests.cs(420,0): at System.Tests.GCTests.LatencyRoundtrips_LowLatency(GCLatencyMode value)\r\n```\r\n\r\nWill need to be fixed before shipping. cc @Maoni0 @sergiy-k ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14910", "title": "[Local GC] GCToOSInterface TODO: GetLogicalCpuCount", "body": "Implementations need to be:\r\n* [Windows](https://github.com/dotnet/coreclr/blob/master/src/gc/windows/gcenv.windows.cpp#L231-L236)\r\n\r\nThe number of logical CPUs influences the size of Gen 0.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14909", "title": "[Local GC] GCToOSInterface TODO: GetLargestOnDieCacheSize ", "body": "Implementations need to be:\r\n* [POSIX](https://github.com/dotnet/coreclr/blob/master/src/gc/unix/gcenv.unix.cpp#L399-L403)\r\n* [Windows](https://github.com/dotnet/coreclr/blob/master/src/gc/windows/gcenv.windows.cpp#L378-L388)\r\n\r\nThe largest on die cache size influences the size of gen0 and thus this is a performance feature.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14909/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14701", "title": "[Local GC] Compile without FEATURE_REDHAWK", "body": "Accomplishing this will produce a GC largely equivalent to the one that is linked-in to `coreclr.dll` by default. Today, `clrgc.dll` compiles with `FEATURE_REDHAWK` to paper over some problems, namely:\r\n\r\n* Use of `_ASSERTE`\r\n* Use of `nativeoverlapped.h` in the handle table for Overlapped I/O\r\n* Use of `S_SIZE_T`\r\n* `Ref_InitializeHandleTableBucket` making use of `NewHolder`\r\n\r\nFinal milestone of https://github.com/dotnet/coreclr/issues/11518.\r\n\r\ncc @Maoni0 @sergiy-k @jkotas", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/50dd8346635c61efa9b0aaf121a888c9c93b3c66", "message": "[Local GC] Introduce standalone eventing design document (#15570)\n\n* Typing\r\n\r\n* First draft\r\n\r\n* Update the doc based on feedback\r\n\r\n* Next iteration based on feedback\r\n\r\n* Iteration feedback"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15957", "title": "[Local GC] FEATURE_EVENT_TRACE 2/n: Scaffolding for emitting known events ", "body": "Non-WIP version of https://github.com/dotnet/coreclr/pull/15905, with the code porting `GCAllocationTick_V3` removed and the branch renamed. This PR still depends on https://github.com/dotnet/coreclr/pull/15873 and currently branches off that branch.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15873", "title": "[Local GC] FEATURE_EVENT_TRACE 1/n: Tracking Event State", "body": "This PR is the first of several PRs implementing [this design](https://github.com/dotnet/coreclr/blob/master/Documentation/design-docs/standalone-gc-eventing.md) bringing FEATURE_EVENT_TRACE to standalone GCs. This PR implements the portion of the design that [keeps track of what events are enabled](https://github.com/dotnet/coreclr/blob/master/Documentation/design-docs/standalone-gc-eventing.md#querying-whether-events-are-enabled).\r\n\r\nThe approach taken in this PR is fundamentally the same as the one described in the design document, with some minor tweaks to `GCEventState`.\r\n\r\nThe `GCEventState` class described in the spec was simplified somewhat, based on some insights I had when experimenting with ETW. There is no need to draw any distinction between enabling\r\nor disabling a provider, since the `EtwCallback` installed by the runtime receives the level and keyword state after applying the delta that a log enabler (e.g. logman) has created. For example, for the following sequence of events:\r\n\r\n```\r\nlogman start trace1 -p {clr-provider-guid} 0x1 0x5 -ets\r\nlogman start trace2 -p {clr-provider-guid} 0x2 0x4 -ets\r\nlogman stop trace1 -ets\r\nlogman stop trace2 -ets\r\n```\r\n\r\n`EtwCallback` is invoked four times, with the following arguments:\r\n\r\n```\r\nEtwCallback(Level=5, Keyword=1, EVENT_CONTROL_CODE_ENABLE_PROVIDER)\r\nEtwCallback(Level=5, Keyword=3, EVENT_CONTROL_CODE_ENABLE_PROVIDER)\r\nEtwCallback(Level=4, Keyword=2, EVENT_CONTROL_CODE_ENABLE_PROVIDER)\r\nEtwCallback(Level=0, Keyword=0, EVENT_CONTROL_CODE_DISABLE_PROVIDER)\r\n```\r\n\r\nWe can pass the level and keyword information verbatim to the GC and no additional logic is\r\nnecessary; the ETW subsystem is already keeping track of which trace client has what level and keyword enabled so the GC doesn't need to do it. The GC doesn't even need to know if a provider\r\nis being enabled or disabled since it can just take the information ETW gives it.\r\n\r\nInstead of having separate `Enable` and `Disable` code paths on `GCEventState`, as written in the spec, this PR has a single `Set` entry point that sets the GC's level and keyword state for a provider to exactly what is given to `Set` as arguments, which in turn comes directly from ETW.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/14907", "title": "[Local GC] Refactor calls involving thread modes, suspension, and all\u2026", "body": "\u2026oc contexts to always operate on current thread. Fixes https://github.com/dotnet/coreclr/issues/12043.\r\n\r\nThese methods on the GC/EE interface always act on the current thread, so it is not necessary to perform another interface call to get the current thread - the implementations of these functions can instead get the current thread and potentially act on it if it is not-null. With this change, many calls to `GCToEEInterface::GetThread` are now unnecessary within `gc.cpp`, since the only reason GetThread was called was to obtain the current thread to pass to functions that operate on the thread passed as an argument.\r\n\r\nThis PR is quite large so I'm putting it out early to begin the validation process. There are many diffs within `gc.cpp` so I'd like leave this PR open until @Maoni0 gets a chance to review it (and to get CI cycles).\r\n\r\ncc @jkotas @sergiy-k PTAL? thoughts on the general approach?", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/26727747", "body": "it's not - fine with me.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/26727747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/26727751", "body": "yes, absolutely.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/26727751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/26727754", "body": "yeah - thanks!", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/26727754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/26727764", "body": "true!", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/26727764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/96760632", "body": "looks like I can - will do!", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/96760632/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/96761101", "body": "looks like I have to build the GC pal before the CoreCLR PAL, but I can move the definitions back to their original place. ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/96761101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/96762766", "body": "Looking at this again I think I misunderstood the CMake file - I am building the GC PAL after the CoreCLR PAL, but before we are adding the CoreCLR PAL header directories to the inclusion paths. Adding the PAL headers to the inclusion path is what causes problems for the GC PAL, since the GC PAL is trying to use system headers.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/96762766/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/130503893", "body": "The idea here is to move the inclusion of `clrdefinitions.cmake` up here to create an area of the CMake file where these definitions are active, but we have not yet included the PAL. This space (with CLR feature defs, but no PAL defs) is used to build the standalone GC.\r\n\r\nThere aren't any subdirectories being added between the old and new positions of `clrdefinitions.cmake`, so I don't think this has any side effects.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/130503893/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "jorive": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15587", "title": "[Perf] It is hard to keep the benchmarks in sync across different branches/releases.", "body": "We need to have the benchmarks (and the infrastructure around them) in sync across different branches/releases in order to keep track of improvements/regressions during the product life cycle.\r\n\r\nCurrently, we need to manually cherry-pick changes from master to the other release branches every now and then. The amount of changes that needs to be ported to keep the branches in sync can vary. By moving the benchmarks to a different repo, we abstract these changes to a version or hash sync across branches, thus reducing the amount of work we do in this continuous integration across branches.\r\n\r\nTo conclude, I am proposing that the benchmarks are moved the into their own repo. Then, we could add the newly created benchmarks repo as a submodule of coreclr.\r\n\r\nI understand that there might be more work related to the CoreFX library versions or dependencies within the repo, but I wanted to start the conversation and find a solution.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/064136ca259dcf47dc8cb34516a44ba057eb01f1", "message": "Fixing https://github.com/aspnet/JitBench/issues/80 (#15764)\n\n- Issue was fixed with this: https://github.com/aspnet/JitBench/pull/82\r\n- Set the UseSharedCompilation=false to avoid that the `VBCSCompiler.exe` stays running."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/e5600842b9839552e2ffa5ba2526b43b4db737f3", "message": "Update the version of the xUnit Performance Api (#15620)\n\n- This version fail broken benchmarks, so we can catch bad codegen and bug earlier.\r\n- Changed the harness to exit with non-zero code when an exception is thrown."}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15929", "title": "Disable the TP perf legs from release/1.1.0", "body": "- There are not TP runs/scripts in this branch.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tmds": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15576", "title": "suggestion DllImport: order and adding suffix", "body": "The below example shows the behavior of DllImport of fakelib.\r\nTwo things that can improve:\r\n- first try lookup including extension\r\n- the order of lookup changes when trying variations. The first lookup tries: netcore, assembly, system; the variations use: assembly, netcore, system.\r\n\r\n```\r\nnetcore:\r\nopen(\"/usr/lib64/dotnet/shared/Microsoft.NETCore.App/2.0.3/fakelib\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\nassembly:\r\nopen(\"/tmp/console/bin/Debug/netcoreapp2.0/fakelib\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\nsystem:\r\nopen(\"/lib64/tls/fakelib\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\nopen(\"/lib64/fakelib\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\nopen(\"/usr/lib64/tls/fakelib\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\nopen(\"/usr/lib64/fakelib\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\n\r\nassembly:\r\nopen(\"/tmp/console/bin/Debug/netcoreapp2.0/libfakelib.so\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\nnetcore:\r\nopen(\"/usr/lib64/dotnet/shared/Microsoft.NETCore.App/2.0.3/libfakelib.so\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\nsystem:\r\nopen(\"/lib64/tls/libfakelib.so\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\nopen(\"/lib64/libfakelib.so\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\nopen(\"/usr/lib64/tls/libfakelib.so\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\nopen(\"/usr/lib64/libfakelib.so\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\n```\r\n\r\nFirst trying the filename with extension will also result in immediate success for native libs included with .NET Core:\r\n```\r\nnetcore:\r\n[pid  5531] open(\"/usr/lib64/dotnet/shared/Microsoft.NETCore.App/2.0.3/System.Globalization.Native\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\nsystem:\r\n[pid  5531] open(\"/etc/ld.so.cache\", O_RDONLY|O_CLOEXEC) = 14\r\n[pid  5531] open(\"/lib64/tls/x86_64/System.Globalization.Native\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\n[pid  5531] open(\"/lib64/tls/System.Globalization.Native\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\n[pid  5531] open(\"/lib64/x86_64/System.Globalization.Native\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\n[pid  5531] open(\"/lib64/System.Globalization.Native\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\n[pid  5531] open(\"/usr/lib64/tls/x86_64/System.Globalization.Native\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\n[pid  5531] open(\"/usr/lib64/tls/System.Globalization.Native\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\n[pid  5531] open(\"/usr/lib64/x86_64/System.Globalization.Native\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\n[pid  5531] open(\"/usr/lib64/System.Globalization.Native\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\nnetcore:\r\n[pid  5531] open(\"/usr/lib64/dotnet/shared/Microsoft.NETCore.App/2.0.3/libSystem.Globalization.Native.so\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15576/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15522", "title": "RuntimeHelpers.PrepareDelegate/PrepareMethod should JIT the given method", "body": "There is a comment here:\r\n\r\nhttps://github.com/dotnet/coreclr/blob/b9affb49f79ed8319923c2f5b07b4aeeb04efe36/src/mscorlib/src/System/Runtime/CompilerServices/RuntimeHelpers.cs#L147-L149\r\n\r\nBut I can't figure out if it is supported or not.\r\n\r\nIn case it isn't supported, is there another way to ensure certain methods in a call graph are jitted? Or to jit a method without calling it?", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14991", "title": ".NET Core 2.0.3 runs OOM in docker", "body": "As reported by @emanuelbalea here: https://github.com/dotnet/coreclr/issues/13489#issuecomment-343416765", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14991/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/845da035a50199f53ae805840c92845d0a3573c7", "message": "icushim: try using the build-time libicu version (#15562)\n\n* icushim: try using the build-time libicu version\r\n\r\n* Based on ICU packaging doc, use major instead of (major, minor)\r\n\r\n* Verify we can look-up symbols on the build version\r\n\r\n* First find Major; add FEATURE_FIXED_ICU_VERSION\r\n\r\n* Move FindSymbolVersion check in OpenICULibraries\r\n\r\n* Remove FEATURE_FIXED_ICU_VERSION"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15912", "title": "improve DllImport library name variation trying", "body": "Implements https://github.com/dotnet/coreclr/issues/15576\r\n\r\nThe dllName is first tried with _LoadFromNativeDllSearchDirectories_ and then with _LocalLoadLibraryHelper_, while variations are using the opposite order.\r\n\r\nThis PR uses the same order for the dllName and its variations.\r\n\r\nWhen the dllName does not contain a suffix, first variations that include a suffix are tried.\r\n\r\nCC @janvorli", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15787", "title": "Replace some ETW_TRACING_CATEGORY_ENABLED checks with ETW_EVENT_ENABLED", "body": "Contributes to https://github.com/dotnet/coreclr/issues/14327\r\n\r\n@brianrob this is replacing some ewt checks. Does this match with what you suggested here https://github.com/dotnet/coreclr/issues/14327#issuecomment-347647106?", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "GalSvirin1": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15559", "title": "CLR profiling: DoStackSnapshot returns wrong Instruction Pointer", "body": "I'm currently writing a CLR profiler, and I came across something very odd. When throwing two different exceptions, one from the try clause and one from the catch clause, the CLR notifies me of the same instruction pointer.\r\n\r\nI'm registered to receive the ExceptionThrown callback\r\nWhile inside that callback, I start a DoStackSnapshot on the current thread.\r\n\r\n`HRESULT stackSnapshotCallback(FunctionID funcId, UINT_PTR ip, COR_PRF_FRAME_INFO,\r\n    ULONG32, BYTE context[], void *clientData)`\r\n\r\n(https://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/profiling/icorprofilerinfo2-dostacksnapshot-method)\r\n\r\nI have an exception thrown from a try clause and the corresponding catch clause. StackSnapshotCallback returns the SAME ip for both (UINT_PTR ip)\r\n\r\nc# code that reproduces the issue\r\n```\r\ntry\r\n{\r\n    try\r\n    {\r\n        throw new Exception(\"A\");\r\n    }\r\n    catch (Exception)\r\n    {\r\n        throw new Exception(\"B\");\r\n    }\r\n}\r\ncatch (Exception)\r\n{\r\n}\r\n```\r\n\r\nI'll also mention that this is not a case of a rethrow, when this is expected.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "maryamariyan": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15544", "title": "AssemblyName.GetAssemblyName on zero byte file segfaults on all unix distros ", "body": "Running the following code snippet is expected to throw with BadImageFormatException but causes segmentation fault on every unix distribution\r\n\r\n```\r\n            try\r\n            {\r\n                string filename = Path.GetTempFileName();\r\n                AssemblyName.GetAssemblyName(filename);\r\n            }\r\n            catch (BadImageFormatException)\r\n            {\r\n                throw;\r\n            }\r\n```\r\n\r\n```\r\n    frame #5: 0x00007f5d630f46d3 libcoreclr.so`PEDecoder::HasWriteableSections() const [inlined] PEDecoder::FindNTHeaders(this=0x00007f5cac00c928) const + 3 at pedecoder.inl:1211\r\n    frame #6: 0x00007f5d630f46d0 libcoreclr.so`PEDecoder::HasWriteableSections(this=0x00007f5cac00c928) const at pedecoder.cpp:456\r\n    frame #7: 0x00007f5d62d9bd66 libcoreclr.so`PEImage::GetLayoutInternal(unsigned int, unsigned int) [inlined] PEImage::CreateLayoutFlat(this=0x00007f5cac00c5d0) + 36 at peimage.cpp:1032\r\n    frame #8: 0x00007f5d62d9bd42 libcoreclr.so`PEImage::GetLayoutInternal(this=0x00007f5cac00c5d0, imageLayoutMask=<unavailable>, flags=<unavailable>) + 98 at peimage.cpp:934\r\n    frame #9: 0x00007f5d62d9a767 libcoreclr.so`PEImage::GetLayout(this=0x00007f5cac00c5d0, imageLayoutMask=<unavailable>, flags=<unavailable>) + 231 at peimage.cpp:875\r\n    frame #10: 0x00007f5d62f550b2 libcoreclr.so`AssemblyNameNative::GetFileInformation(StringObject*) [inlined] PEImage::HasNTHeaders(this=0x00007f5cac00c5d0) + 33 at peimage.inl:204\r\n    frame #11: 0x00007f5d62f55091 libcoreclr.so`AssemblyNameNative::GetFileInformation(filenameUNSAFE=<unavailable>) + 113 at assemblyname.cpp:60\r\n```\r\n\r\nin pedecoder.inl m_base seems to be null:\r\n```\r\nframe #5: 0x00007f5d630f46d3 libcoreclr.so`PEDecoder::HasWriteableSections() const [inlined] PEDecoder::FindNTHeaders(this=0x00007f5cac00c928) const + 3 at pedecoder.inl:1211\r\n(lldb) frame variable\r\n(const PEDecoder *) this = 0x00007f5cac00c928\r\n(lldb) expr this->m_base\r\n(TADDR) $0 = 0\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15544/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/391be015430d213365a1a5d09230f99f24a80de3", "message": "Adding EnsureCapacity implementation for Dictionary (#15729)\n\nAdding EnsureCapacity implementation for Dictionary"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15793", "title": "Adding TrimExcess Implementation to Dictionary", "body": "Issue is: https://github.com/dotnet/corefx/issues/24445\r\nTests and the ref changes are made in a corefx PR separately here dotnet/corefx#26239.\r\n\r\ncc: @danmosemsft @benaadams \r\n\r\nTODO Next in a separate PR:\r\n- Will add EnsureCapacity to SortedSet and HashSet\r\n- Will add TrimExcess to SortedSet\r\n  \r\n  ", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "iSazonov": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15542", "title": "Q: How set a thread stack size?", "body": "In PowerShell repo we catch [an recursion Issue](https://github.com/PowerShell/PowerShell/issues/4268) likely with thread stack size. PowerShell code create threads with default stack size so I tried to set a thread stack size by [COMPlus_DefaultStackSize](https://github.com/dotnet/coreclr/blob/08d39ddf02c81c99bd49c19b808c855235cbabdc/src/pal/src/init/pal.cpp#L213) env variable on Windows. But it seems the env variable is ignored - VMMap utility show 1536 KB thread stack size.\r\nAlso we have report that direct size setting in C# code does not resolve our Issue on MacOS.\r\n\r\n1. What do we wrong? How can we set thread stack size?\r\n2. How we can enable and see [the trace](https://github.com/dotnet/coreclr/blob/c440335be80ee0762856d0be6e91ec3ea2f90504/src/pal/src/thread/thread.cpp#L663) for threads?\r\n3. Does COMPlus_DefaultStackSize really work?\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alpencolt": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15540", "title": "ASAN false positive", "body": "There are a lot of false-positive cases in CoreCLR when it executed with enabled ASAN caused by custom stack unwinding and memory allocation, e.g.:\r\n```\r\nAddress 0x961fa700 is located in stack of thread T12 at offset 0 in frame\r\n    #0 0xac012a1f in ExceptionTracker::ResumeExecution(_CONTEXT*, _EXCEPTION_RECORD*) /usr/src/debug/coreclr-2.0.0.12082/src/vm/exceptionhandling.cpp:4017:0\r\n\r\n  This frame has 1 object(s):\r\n    [16, 36) '_check' <== Memory access at offset 0 partially underflows this variable\r\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext\r\n      (longjmp and C++ exceptions *are* supported)\r\nThread T12 created by T11 here: \r\n```\r\n\r\nIt is needed to add annotions to handle such cases correct:\r\nhttps://github.com/google/sanitizers/wiki/AddressSanitizerManualPoisoning\r\nand fake stack API: https://github.com/llvm-mirror/compiler-rt/blob/master/include/sanitizer/asan_interface.h#L135\r\n\r\ncc @Dmitri-Botcharnikov @kbaladurin ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15394", "title": "[ARM32] Detection of race conditions", "body": "There are several bugs related to multi threading (#12421, #13651, some our proprietary code also failed in this field).\r\n@dotnet/arm32-contrib have you tried to use some tool like [ThreadSanitizer](https://a.llvm.org/docs/ThreadSanitizer.html) from clang for ARM platfrom?", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "morganbr": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15508", "title": "Replace HashHelpers.Combine with HashCode.Combine", "body": "```System.HashCode``` was recently added in order to make high-quality fast hashing easy. We should replace usage of ```HashHelpers.Combine```, an internal low-quality hash combiner with ```HashCode.Combine```. It should lead to better distribution in dictionaries and the hashing should be nearly as fast.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "eerhardt": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15467", "title": "Investigate and implement better codegen for Matrix4x4", "body": "Using Matrix4x4 by value methods are significantly slower than using corresponding `ref` overloads.  See https://github.com/dotnet/corefx/pull/25388#issuecomment-348360835.\r\n\r\nWe've rejected adding these `ref` overloads to System.Numerics.Vectors to avoid API clutter and because the performance benefit of the `ref` overloads is not significant.\r\n\r\nHowever, the benchmarks showed a benefit for Matrix4x4.  We should investigate how much of the Matrix4x4ByRef benefit can be matched with better codegen for the ByValue case. And then implement any improvements.\r\n\r\ncc @CarolEidt ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15467/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14926", "title": "Debugging a stackalloc line takes multiple F10s", "body": "I\u2019ve been debugging some code that looks like:\r\n\r\n```C#\r\nfloat *ptr = stackalloc float[10];\r\n\r\nSpan<float> span1 = stackalloc float[20];\r\nspan1[0] = 9.5f;\r\nspan1[1] = 8.5f;\r\nspan1[2] = 7.5f;\r\nspan1[3] = 6.5f;\r\n\r\nSpan<float> span2 = stackalloc float[4];\r\nspan2[0] = .5f;\r\nspan2[1] = 10.5f;\r\nspan2[2] = 10.5f;\r\nspan2[3] = 10.5f;\r\n```\r\n\r\nWhen debugging, it is taking multiple \u201cF10\u201ds in the debugger to get over the stackalloc lines.  I\u2019ve noticed that it grows as the more memory is alloc\u2019d.  But even in the small case (alloc\u2019ing 1 element), it still takes roughly 5 times of hitting \u201cF10\u201d to get past the line.\r\n\r\nI\u2019m using:\r\n- .Net Core 2.1.0-preview1-25907-02\r\n- Microsoft Visual Studio Enterprise 2017 Int Preview (2)\r\n  - Version 15.5.0 Preview 4.0 [27106.0.d15rel]\r\n  - VisualStudio.15.IntPreview/15.5.0-pre.4.0+27106.0.d15rel\r\n\r\n/cc @AndyAyersMS @mikem8361 @VSadov @stephentoub ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/24744096", "body": "Do you need to move the NuGet sources to MSBuild so they can respect the property being passed in by source-build?", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/24744096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "kbaladurin": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15466", "title": "Printing error messages in CoreCLR", "body": "Now when unhandled exception occurs coreclr prints information about it to stderr. It is suitable for console applications but not for applications with gui (for example mobile applications).\r\n\r\nWhat is the best approach to print such messages also to syslog or other OS specific log in coreclr?\r\n\r\nThank you!", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/02f172c7f0476df791ebc364344b73464b83a73c", "message": "LoaderHeap: remove LHF_ZEROINIT option.\n\nThis option was used for UMEntryThunkCode::Poison. Now we use own free list\nto store freed thunks and don't return allocated memory to the LoaderHeap.\nSo reused thunks are always uninitialized."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/f2e52524fe421ac050b8a693438f662b40214074", "message": "dllimportcallback: remove code for CallbackOnCollectedDelegate MDA"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/b0a10f69a85404bcc9c377c80dc2950f927f8731", "message": "UMEntryThunk: store freed thunks into FIFO free list\n\nUse free list to delay reusing deleted thunks. It improves\ncollected delegate calls diagnostic."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/28839fc0b2dcaf89b7217741291c8c3f578f38a0", "message": "Improve UMEntryThunkCode::Poison method.\n\nImprove UMEntryThunkCode::Poison to produce diagnostic message\nwhen collected delegate was called."}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15563", "title": "Fix asan false-positive errors", "body": "Fix asan false-positive errors:\r\n- Call __asan_handle_no_return in RtlRestoreContext if it doesn't return;\r\n- Increase alternate signal stack size and use it also for asan.\r\n\r\nFixes false-positive buffer-overflow (buffer-underflow) errors during stack unwinding (#15540)", "author_association": "COLLABORATOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "chunseoklee": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15436", "title": "EventPipe crash during DestroyThread ", "body": "Current DestroyThread function is like below. \r\nhttps://github.com/dotnet/coreclr/blob/master/src/vm/threads.cpp#L907\r\n```\r\nvoid DestroyThread(Thread *th)\r\n...\r\n    if (g_fEEShutDown == 0) \r\n    {\r\n        th->SetThreadState(Thread::TS_ReportDead);\r\n        th->OnThreadTerminate(FALSE);\r\n    }\r\n\r\n#ifdef FEATURE_PERFTRACING\r\n    // Before the thread dies, mark its buffers as no longer owned\r\n    // so that they can be cleaned up after the thread dies.\r\n    EventPipeBufferList *pBufferList = th->GetEventPipeBufferList();\r\n    if(pBufferList != NULL)\r\n    {\r\n        pBufferList->SetOwnedByThread(false);\r\n    }\r\n#endif // FEATURE_PERFTRACING\r\n}\r\n```\r\n\r\nOn tizen arm machine, seg fault occurs at https://github.com/dotnet/coreclr/blob/master/src/vm/threads.cpp#L1019.\r\n```\r\nEventPipeBufferList *pBufferList = th->GetEventPipeBufferList();\r\n```\r\n\r\nIs this normal flow during DestroyThread ? I am not familair with semantic of destroying thread. ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15228", "title": "Disable FEATURE_PERFTRACING", "body": "Is there any way to disable `FEATURE_PERFTRACING` ? \r\nIt seems that undefining `FEATURE_PERFTRACING`  as follows does not work on build since definitions from `FEATURE_PERFTRACING` block are used on python-generated cpp files.\r\n```\r\ndiff --git a/clr.coreclr.props b/clr.coreclr.props\r\nindex 059fb3a..4fbe500 100644\r\n--- a/clr.coreclr.props\r\n+++ b/clr.coreclr.props\r\n@@ -90,6 +90,6 @@\r\n\r\n   <PropertyGroup Condition=\"'$(TargetsLinux)' == 'true'\">\r\n     <FeatureManagedEtw>true</FeatureManagedEtw>\r\n-    <FeaturePerfTracing>true</FeaturePerfTracing>\r\n+    <FeaturePerfTracing>false</FeaturePerfTracing>\r\n   </PropertyGroup>\r\n </Project>\r\ndiff --git a/clrdefinitions.cmake b/clrdefinitions.cmake\r\nindex 6db2b24..2408e05 100644\r\n--- a/clrdefinitions.cmake\r\n+++ b/clrdefinitions.cmake\r\n@@ -111,9 +111,6 @@ endif(FEATURE_DBGIPC)\r\n if(FEATURE_EVENT_TRACE)\r\n     add_definitions(-DFEATURE_EVENT_TRACE=1)\r\n endif(FEATURE_EVENT_TRACE)\r\n-if(CLR_CMAKE_PLATFORM_LINUX)\r\n-    add_definitions(-DFEATURE_PERFTRACING)\r\n-endif(CLR_CMAKE_PLATFORM_LINUX)\r\n if(CLR_CMAKE_PLATFORM_UNIX)\r\n     add_definitions(-DFEATURE_EVENTSOURCE_XPLAT=1)\r\n endif(CLR_CMAKE_PLATFORM_UNIX)\r\n```\r\nIs there any good way to disable `FEATURE_PERFTRACING` ?", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "adiaaida": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15430", "title": "[Perf][Infrastructure] Turn outerloop tests back on for per-commit perf testing", "body": "", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15308", "title": "[Perf][Infrastructure] Short-circuit perf job to only run on changes where src or test assets have been changed", "body": "We do not want to run the perf job on PRs where src or test assets have not been modified (ie non-pipeline build groovy changes, doc changes, etc). Add short-circuiting to the pipeline job such that if we haven't modified src or test files we do not do the build/test.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15307", "title": "[Perf][Infrastructure] Add final accountability leg to perf pipeline pr job", "body": "We want to make sure that all slices are within a certain runtime, so we would do something like:\r\n\r\n1. During the run of the test, get a start timestamp and end timestamp and write them to a file, which is then stashed.\r\n2. In a final stage, unstash all the timestamp files and parse them in another script.\r\n3. If any test leg was longer than some threshold, fail the job so we know we need to reapportion the slices.\r\n\r\nThis would only be run on PRs where the test assets had potentially been changed. We can do this by doing a git diff --name-only run and test the names of the files that have been modified.\r\n\r\nWe also would want to make sure that if any new tests were added to the perf suite, they have been added to the slice config file. This script would use the results of the git diff and compare them to the folders listed in the slice config file.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/e435c5048c44978208c2a0dc45444a18415be272", "message": "Convert perf.groovy to use run-xunit-perf.py (#15881)\n\n* Convert perf.groovy to use run-xunit-perf.py\r\n\r\nAlso removes run-xunit-perf.cmd and run-xunit-perf.sh. This change moves us to using build-tests.sh to generate the layout (ie pull down corefx), so this change fixes #12143."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/5378afc7c2406074972c415a2ccabfc43273db49", "message": "Convert run-xunit-perf to py script (#15568)\n\n* Convert run-xunit-perf to python script\r\n\r\nThis change merges the two run-xunit-perf scripts (.sh and .cmd) into\r\none unified python script and updates the pipeline job to use the\r\npythong script. This change also updates the linux jobs to use the new\r\nbuild-tests.sh generatelayoutonly command so that we don't need to pull\r\ndown corefx from the cloud anymore. The unified python script enables us\r\nto more easily update both linux scripting and windows scripting at the\r\nsame time so that one does not lag behind the other (such as when we add\r\nnew configurations or options like slicing). This change also turns\r\nlinux testing back on by default for PRs."}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15939", "title": "Remove hardcoded paths in linkbench scripts", "body": "Linkbench has hardcoded paths based off of VS140COMNTOOLS, which not all\r\nmachines will have (ie, machines with only VS2017 installed). This\r\nchange removes the hardcoded paths, and replaces them with checks to\r\nmake sure the tool is on the path (which they will be if we are in a VS\r\nenvironment of any kind - which we would have been in if\r\nVS140COMNTOOLS was already set).", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15366", "title": "Move perf configurations to slice json file", "body": "", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/14823", "title": "Add perf pipeline pr triggers", "body": "", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sdmaclea": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15427", "title": "Discussion: Crossgen platform capabilities SIMD/hwintrinsics and tiered compilation.", "body": "@dotnet/jit-contrib \r\n\r\nAs I think about ARM64 platform capabilities and how they will impact crossgen/R2R code.  I am thinking tiered compilation might help.\r\n\r\nDuring crossgen if the minimal supported platform flags are enabled, that would allow all platforms to startup quickly.\r\n\r\nIf code which is platform dependent during crossgen is detected, the generated code would be functional but sub-optimal.  If this was noted in the generated code, then tiered compilation would have the opportunity to re JIT hot code with platform specific flags enabled.\r\n\r\nI really do not understand the status of tiered compilation or how it interacts with crossgen already, but I thought this might be worth discussing and possibly adding to the tiered jit plans.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15303", "title": "[Arm64] Design Implement Intrinsic Support", "body": "Design and implement intrinsics", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15293", "title": "[Arm64] JITMinopts=1 GC/LargeMemory/Allocation/finalizertest/finalizertest failing", "body": "GC/LargeMemory/Allocation/finalizertest/finalizertest.sh\r\n\r\n```\r\ncorerun finalizertest.exe 2048\r\n0 2147483648\r\nallocateInFinalizerTest failed\r\nressurectionTest passed\r\nTest failed\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/54b5fd094638002bdf9545df617c7d4abef59ec6", "message": "[Arm64] Set Instruction set flags"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/a4d79943d8c62e9edaab0ac043784b7936a3c42c", "message": "[Arm64] Remove irregular vector not handling"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/37f018815bdc8bac0680eb8fe0cb082a5d919a2e", "message": "[Arm64] Add compare vector to zero emitters"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/c3f97703af7c5ab84c6a64eabc6bebf509a2175a", "message": "[Arm64] Add arm64-intrinsics.md (#15343)\n\n* [Arm64] Add arm64-intrinsics.md\r\n\r\n* Revise arm64-intrinsics\r\n\r\nRespond to feedback\r\nRevise namespace recommendations\r\nAdd goals\r\nFix namespace vs. class issues\r\nAdd API review details\r\n\r\n* Revise arm64-intrinsics doc\r\n\r\nRespond to feedback\r\nAdd specific class table\r\nClean up typos and whitespace\r\n\r\n* Revise review process proposal\r\n\r\n* [Arm64] Add 8.2 extensions and cleanup\r\n\r\n* Add Jscvt, Lrcpc ...\r\n\r\n* Revise doc based on feedback\r\n\r\n* Further doc revisions\r\n\r\n* More review fixes"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/41ed1d77a3650823269fb2b008a806acbbc6846d", "message": "[Arm64] Use is16Byte\n\nRename is16B to is16Byte"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/44a7dc7421a0d54f502233ec501b4e194f67c357", "message": "[Arm64] Add Vector64 HW Intrinsic support"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/3632bcd4734b8b5529a10d1f925fe94010f71080", "message": "Normalize lsra.h line endings"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/d70e11bb0c5aec9b65df5abe102ed3b6418abb4b", "message": "[Arm64] getBaseTypeAndSizeOfSIMDType\n\nRemove XARCH platform dependencies\nDisable Vector256 support on Arm64 until needed"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/adbfd2c48f418091b38d04ef615a5e628d14dbca", "message": "[Arm64] Disable HW Intrinsic NGEN (#15603)"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15833", "title": "[Arm64] Initial HW intrinsic framework", "body": "This is the basic framework for a table driven ARM64 HW Intrinsic framework\r\n\r\nIt has only been tested for the SIMD add case, but it does work end to end\r\n\r\n@CarolEidt @tannergooding @4creators \r\ncc/ @fiigii @dotnet/jit-contrib ", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/100822222", "body": "With newer versions of cmake if the ninja option is set, A warning is generated if this policy if not set  one way or the other.\r\n\r\nI was seeing this issue when I was trying debian sid unstable branch, so it may not be on any stable distros yet.\r\n\r\nFor stability reasons I went back to stock Ubuntu 16.04.  So I can no longer reproduce this issue as cmake ninja is not supported in stock Ubuntu 16.04", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/100822222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/100867722", "body": "Also, I think cmake ninja was able to detect some of our custom build commands generate byproducts and implicitly set BYPRODUCTS.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/100867722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "Chrisboh": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15426", "title": "CoreCLR build: Unify arguments for each leg", "body": "@karajas commented on [Fri Nov 10 2017](https://github.com/dotnet/core-eng/issues/2077)\n\nThis is feedback from the arm64 toolsets argument change.\r\n\r\nQuestions to address: \r\n - Is there a way to simplify the pipeline in anyway? (no. of pipelines, no. of legs, no. of jsons to maintain)\r\n - Is there a way to simplify the arguments passed to each build?\r\n - Is there a way to test any change to the arguments and validate before merging?\n\n---\n\n@maririos commented on [Thu Nov 16 2017](https://github.com/dotnet/core-eng/issues/2077#issuecomment-345066095)\n\nIs there a way this could be applied to all the repos instead of just CoreCLR?\n\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lt72": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15423", "title": "Callstacks are not available after profiler rejit", "body": "This is a high priority for snapshot debugging testing and validation.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14819", "title": "Debugging instructions should clearly carry information as to how acquire symbols", "body": "[Debugging instructions](https://github.com/dotnet/coreclr/blob/master/Documentation/building/debugging-instructions.md) should carry the information on how to acquire symbols. Whether that happens through a tool, or by manual download, or both, all locations of the symbols should be clearly documented.\r\nE.g.: the debugging instruction page should carry a link to the [core-setup](https://github.com/dotnet/core-setup) and the download links page on [DLC](https://www.microsoft.com/net/download/windows).\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14819/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14794", "title": "Add command to dotnet CLI to download symbols for runtime and libraries", "body": "How about something like:\r\n\r\n```dotnet get-runtime-symbols``` (defaults to runtime and libraries that best match the CLI version)\r\n```dotnet get-runtime-symbols 2.0.3```", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14794/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mmitche": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15414", "title": "Intermittent C1076 in official builds", "body": "2017-12-06T23:10:58.4661810Z c1xx : fatal error C1076: compiler limit: internal heap limit reached; use /Zm to specify a higher limit [E:\\A\\_work\\632\\s\\bin\\obj\\Windows_NT.x64.Debug\\src\\vm\\wks\\cee_wks.vcxproj]\r\n2017-12-06T23:10:58.4661810Z c1xx : error C3859: virtual memory range for PCH exceeded; please recompile with a command line option of '-Zm70' or greater [E:\\A\\_work\\632\\s\\bin\\obj\\Windows_NT.x64.Debug\\src\\vm\\wks\\cee_wks.vcxproj]", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72487429", "body": "@dotnet-bot test this please\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72487429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72495588", "body": "@dotnet-bot test this please\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72495588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72497466", "body": "test this please\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72497466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72499761", "body": "@dotnet-bot test this please\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72499761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72500930", "body": "@dotnet-bot test this please\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72500930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72501499", "body": "test this please\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72501499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72503128", "body": "test this please\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72503128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72508393", "body": "test this please\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72508393/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72509137", "body": "test this please\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72509137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72521389", "body": "@dotnet-bot test this please\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72521389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72521442", "body": "@dotnet test this please\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72521442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72521470", "body": "@dotnet test this please\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72521470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72551687", "body": "@dotnet-bot test this please (odd PDB error in log)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72551687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72570766", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72570766/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72681697", "body": "Hey that makes an awesome difference.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72681697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72697900", "body": "Don't worry about this, I have a PR about to go out to change the names too.  I have it fixed there.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72697900/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72897618", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72897618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72955585", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72955585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/38956450", "body": "I would just make this an error for now, so it doesn't accidentally get swallowed at some point in time.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/38956450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/38988433", "body": "We have this elsewhere I think too then...see the root CMakeLists.txt\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/38988433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/48172416", "body": "Is there a reason there is NOVCFEATURE here for Checked but not for Release?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/48172416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/52038590", "body": "Should these zero out of the linker and shared linker flags be removed too?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/52038590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "omariom": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15357", "title": "[JIT] Range check elimination", "body": "I don't think there is perf impact. Just an interesting case which may  point to something important.\r\n\r\nThe difference is in this lines:\r\n```ASM\r\nmov      dword ptr [rcx+rax+16], r8d\r\nlea      rax, bword ptr [rcx+rax+16]\r\n;vs\r\nlea      rax, bword ptr [rcx+rax+16]\r\nmov      dword ptr [rax], r8d\r\n```\r\n\r\n```C#\r\n[MethodImpl(MethodImplOptions.NoInlining)]\r\nprivate static void TestRangeCheckElimination(Entry[] entries, int index, int value)\r\n{\r\n    entries[index].hashCode = value;\r\n    entries[index].next     = value;\r\n    entries[index].key      = value;\r\n    entries[index].value    = value;\r\n}\r\n\r\n[MethodImpl(MethodImplOptions.NoInlining)]\r\nprivate static void TestRangeCheckEliminationWithRef(Entry[] entries, int index, int value)\r\n{\r\n    ref Entry entry = ref entries[index];\r\n\r\n    entry.hashCode = value;\r\n    entry.next     = value;\r\n    entry.key      = value;\r\n    entry.value    = value;\r\n}\r\n```\r\n<details><summary>Assembly for TestRangeCheckElimination</summary>\r\n<p>\r\n\r\n```ASM\r\n; Assembly listing for method TestDotNetCore.Program:TestRangeCheckElimination(ref,int,int)\r\n; Emitting BLENDED_CODE for X64 CPU with AVX\r\n; optimized code\r\n; rsp based frame\r\n; partially interruptible\r\n; Final local variable assignments\r\n;\r\n;  V00 arg0         [V00,T00] ( 15, 15   )     ref  ->  rcx         class-hnd\r\n;  V01 arg1         [V01,T03] ( 12, 12   )     int  ->  rdx        \r\n;  V02 arg2         [V02,T01] ( 14, 14   )     int  ->   r8        \r\n;  V03 OutArgs      [V03    ] (  1,  1   )  lclBlk (32) [rsp+0x00]  \r\n;  V04 cse0         [V04,T02] ( 14, 14   )   byref  ->  rax        \r\n;  V05 cse1         [V05,T04] ( 10, 10   )    long  ->  rax        \r\n;  V06 cse2         [V06,T05] (  5,  5   )     int  ->  rax        \r\n;\r\n; Lcl frame size = 40\r\n\r\nG_M10648_IG01:\r\n       4883EC28             sub      rsp, 40\r\n\r\nG_M10648_IG02:\r\n       8B4108               mov      eax, dword ptr [rcx+8]\r\n       3BD0                 cmp      edx, eax\r\n       7322                 jae      SHORT G_M10648_IG04\r\n       4863C2               movsxd   rax, edx\r\n       48C1E004             shl      rax, 4\r\n       4489440110           mov      dword ptr [rcx+rax+16], r8d\r\n       488D440110           lea      rax, bword ptr [rcx+rax+16]\r\n       44894004             mov      dword ptr [rax+4], r8d\r\n       44894008             mov      dword ptr [rax+8], r8d\r\n       4489400C             mov      dword ptr [rax+12], r8d\r\n\r\nG_M10648_IG03:\r\n       4883C428             add      rsp, 40\r\n       C3                   ret      \r\n\r\nG_M10648_IG04:\r\n       E86E50305F           call     CORINFO_HELP_RNGCHKFAIL\r\n       CC                   int3     \r\n\r\n; Total bytes of code 51, prolog size 4 for method \r\n```\r\n</p>\r\n</details>\r\n\r\n<details><summary>Assembly for TestRangeCheckEliminationWithRe</summary>\r\n<p>\r\n\r\n```ASM\r\n; Assembly listing for method TestDotNetCore.Program:TestRangeCheckEliminationWithRef(ref,int,int)\r\n; Emitting BLENDED_CODE for X64 CPU with AVX\r\n; optimized code\r\n; rsp based frame\r\n; partially interruptible\r\n; Final local variable assignments\r\n;\r\n;  V00 arg0         [V00,T02] (  4,  4   )     ref  ->  rcx         class-hnd\r\n;  V01 arg1         [V01,T03] (  4,  4   )     int  ->  rdx        \r\n;  V02 arg2         [V02,T01] (  6,  6   )     int  ->   r8        \r\n;  V03 tmp0         [V03,T00] (  5, 10   )   byref  ->  rax        \r\n;  V04 OutArgs      [V04    ] (  1,  1   )  lclBlk (32) [rsp+0x00]  \r\n;\r\n; Lcl frame size = 40\r\n\r\nG_M60939_IG01:\r\n       4883EC28             sub      rsp, 40\r\n\r\nG_M60939_IG02:\r\n       3B5108               cmp      edx, dword ptr [rcx+8]\r\n       7320                 jae      SHORT G_M60939_IG04\r\n       4863C2               movsxd   rax, edx\r\n       48C1E004             shl      rax, 4\r\n       488D440110           lea      rax, bword ptr [rcx+rax+16]\r\n       448900               mov      dword ptr [rax], r8d\r\n       44894004             mov      dword ptr [rax+4], r8d\r\n       44894008             mov      dword ptr [rax+8], r8d\r\n       4489400C             mov      dword ptr [rax+12], r8d\r\n\r\nG_M60939_IG03:\r\n       4883C428             add      rsp, 40\r\n       C3                   ret      \r\n\r\nG_M60939_IG04:\r\n       E82250305F           call     CORINFO_HELP_RNGCHKFAIL\r\n       CC                   int3     \r\n\r\n; Total bytes of code 47, prolog size 4 for method\r\n```\r\n</p>\r\n</details>\r\n\r\n\r\ncc @mikedn ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jcagme": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15335", "title": "CoreCLR build: Deprecate unused variables used in the build", "body": "@karajas commented on [Fri Nov 10 2017](https://github.com/dotnet/core-eng/issues/2076)\n\nThis would include \r\n- defaults in each leg where the value should be coming in from pipebuild\r\n- publish.proj, syncAzure.proj\r\n- Conditions that can be handled by VSTS conditions.\r\n- dead variables in pipebuild and build legs\n\n---\n\n@karajas commented on [Fri Nov 10 2017](https://github.com/dotnet/core-eng/issues/2076#issuecomment-343603136)\n\nThis could also be the work to standardize the variable names as seen in https://github.com/dotnet/coreclr/pull/14835 and https://github.com/dotnet/coreclr/pull/14787 \r\n@weshaggard fyi \n\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15334", "title": "CoreCLR build: Ensure all paths follow a pattern.", "body": "@karajas commented on [Fri Nov 10 2017](https://github.com/dotnet/core-eng/issues/2075)\n\nThis includes\r\n - All file paths should be fully qualified through msbuild.\r\n - Publishing search paths should be standardized on.\r\n - Publishing urls should follow a agreed upon schema.\r\n\n\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15333", "title": "CoreCLR build: Setup Dumpling in CoreCLR Linux builds", "body": "@karajas commented on [Fri Nov 10 2017](https://github.com/dotnet/core-eng/issues/2074)\n\nThis would help use diagnose any seg faults that we see happening in coreclr builds. The Linux builds happen in Docker and get copied to the staging directory adjacent to the source directory on the VSTS build agent.\r\n\r\n@DrewScoggins \n\n---\n\n@maririos commented on [Thu Nov 30 2017](https://github.com/dotnet/core-eng/issues/2074#issuecomment-348353006)\n\n@karajas could you please move this and the other CoreCLR issues to their repo?\n\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/149571618", "body": "Just make sure we update this to the version that has the new download logic", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/149571618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/150698189", "body": "Latest version which includes the parallel download of files from Azure is 2.0.0-servicing-02213-03", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/150698189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/151271387", "body": "Version with added logging is 2.0.0-servicing-02215-02", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/151271387/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "leculver": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15331", "title": "[Watson] Reliability crash in coreclr.dll!PEFile::LoadAssembly", "body": "There is a crash accounting for 18.5% of our external failures in this callstack:\r\n```\r\n0 coreclr!AssemblySpec::Bind\r\n1 coreclr!AppDomain::BindAssemblySpec\r\n2 coreclr!PEFile::LoadAssembly\r\n3 coreclr!Module::LoadAssembly\r\n4 coreclr!Assembly::FindModuleByTypeRef\r\n5 coreclr!ClassLoader::LoadTypeDefOrRefThrowing\r\n6 coreclr!SigPointer::GetTypeHandleThrowing\r\n7 coreclr!MemberLoader::GetDescFromMemberRef\r\n8 coreclr!CEEInfo::resolveToken \r\n```\r\n\r\nI have not dug deeply into this issue.  I have requested heap dumps be collected for this bucket.\r\n\r\nYou can find the Watson bucket here:  https://watson/Failure?FailureSearchText=51ff1255-3178-91e0-9571-43a1f7add6b2", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15330", "title": "[Watson] Reliability crash in coreclr.dll!ClassLoader::AddAvailableClassHaveLock", "body": "There is a crash accounting for 69.5% of our external failures in this callstack:\r\n```\r\ncoreclr!NgenHashTable_EEClassHashTable,EEClassHashEntry,4_::FindPersistedEntryByHash\r\ncoreclr!EEClassHashTable::FindItem\r\ncoreclr!ClassLoader::AddAvailableClassHaveLock\r\ncoreclr!ClassLoader::AddAvailableClassDontHaveLock\r\ncoreclr!Assembly::AddType\r\ncoreclr!Module::NotifyProfilerLoadFinished\r\ncoreclr!DomainFile::PostLoadLibrary\r\ncoreclr!DomainFile::DoIncrementalLoad\r\ncoreclr!AppDomain::TryIncrementalLoad\r\ncoreclr!AppDomain::LoadDomainFile\r\ncoreclr!AppDomain::LoadDomainAssemblyInternal\r\ncoreclr!AppDomain::LoadDomainAssembly\r\ncoreclr!Module::LoadAssembly\r\n```\r\n\r\nDespite the blamed symbol in the title, I suspect we have an issue where NGEN hashtable is corrupted.  We've seen concurrency issues here before (and recently).  It's also possible that the image was corrupted on disk, so it will be difficult to figure out which case is the root cause.\r\n\r\nHere is a link to the watson bucket (with heap dumps):  https://watson/Failure?FailureSearchText=53b8f2f3-edc4-ff73-1e50-1c25893a644b\r\n\r\nDesktop CLR seems to have the same issue, tracked by this bucket:  https://watson/Failure?FailureSearchText=d42d1953-5930-bb15-0c3c-3784ac216487\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ans-ashkan": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15319", "title": "Different code behavior in Release and Debug mode.", "body": "Executing the following code:\r\n\r\n```\r\nprivate static void Main(string[] args)\r\n{\r\n\r\n    var ar = new double[]\r\n    {\r\n        100\r\n    };\r\n\r\n    FillTo1(ref ar, 5);\r\n    Console.WriteLine(string.Join(\",\", ar.Select(a => a.ToString()).ToArray()));\r\n}\r\n\r\npublic static void FillTo1(ref double[] dd, int N)\r\n{\r\n    if (dd.Length >= N)\r\n        return;\r\n\r\n    double[] Old = dd;\r\n    double d = double.NaN;\r\n    if (Old.Length > 0)\r\n        d = Old[0];\r\n\r\n    dd = new double[N];\r\n\r\n    for (int i = 0; i < Old.Length; i++)\r\n    {\r\n        dd[N - Old.Length + i] = Old[i];\r\n    }\r\n    for (int i = 0; i < N - Old.Length; i++)\r\n        dd[i] = d;\r\n}\r\n```\r\nThe result in Debug mode is: 100,100,100,100,100 but in Release mode is: 100,100,100,100,0\r\n\r\nTested on .net framework 4.7.1 and .net core 2.0.0\r\n\r\nAlso posted to Stack Overflow (https://stackoverflow.com/questions/47591915/why-code-behavior-is-different-in-release-debug-mode).", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15319/reactions", "total_count": 4, "+1": 3, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "crozone": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15316", "title": "DateTimeParse.Parse lacks full ISO8601 support", "body": "`DateTimeParse.Parse()` (which powers `DateTime.Parse()` and `DateTimeOffset.Parse()`) currently only partially supports the ISO8601 standard. ISO8601 is heavily used in industry and having greater support for it significantly increases the usability of the `DateTime.Parse` methods.\r\n\r\nCurrently, the bits of ISO8601 that are supported are:\r\n\r\n* Sortable date/time pattern (\"s\"). **2009-06-15T13:45:30** = ISO8601 without timezone.\r\n\r\n* Round-trip date/time pattern. (\"O\"/\"o\"). **2009-06-15T13:45:30.0000000-07:00** = ISO 8601 with timezone offset.\r\n\r\nNotable formats that are currently omitted:\r\n\r\n* Dates, Times, or DateTimes without dash or colon separators: **20171201**, **123031**,  **20090615T134530+1100**\r\n\r\n* Datetimes that have a decimal fraction added to the lowest order time element when it isn't seconds:\r\n**2009-06-15T13:45.5** or **2009-06-15T13.5**\r\n\r\n* Week notation (with day): **2017-W48** or **2017-W48-4**\r\n\r\n* Ordinal date notation: **2017-001** - **2017-334**\r\n\r\n* Yearless date notation: **--10-31**, **--1031**.\r\n\r\n* Times that use a comma (',') as a decimal separator for the lowest time element. ISO8601 universally allows the use of both a comma (',') or a period ('.') as a decimal separator, independent of current culture. Currently, only a period ('.') is supported, regardless of the `CultureInfo.NumberFormat.NumberDecimalSeparator` provided (although both should be allowed irrespective of culture).", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "xiaomi7732": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15302", "title": "EventPipe doesn't catch ActivityId set by EventSource", "body": "The following issue is reproduced on .NET Core for Linux.\r\n\r\n**Reproduce steps:**\r\n1. Enable eventpipe. (referenced control code: https://github.com/dotnet/coreclr/blob/bac965ea8d3977a08257ee6758e14ccda34547e3/tests/src/tracing/common/TraceControl.cs)\r\n2. Set a new activity id for current thread upon EventSource:\r\n```csharp\r\n// Switch to a new activity.\r\nEventSource.SetCurrentThreadActivityId(Guid.NewGuid());\r\n// Write event source so that EventPipe is listen upon.\r\nSomeEventSource.Log.WriteRequest(\"Any\", \"any\");\r\n```\r\n3. Inspect the generated trace log file.\r\n\r\n**Expected:** AcitivityID will be on the events being caught.\r\n**Actual:** ActivityID is empty.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "TyOverby": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15273", "title": "Debugging Instructions docs don't say which versions of dotnet core work with lldb", "body": "I've followed the instructions from https://github.com/dotnet/coreclr/blob/master/Documentation/building/debugging-instructions.md and installed llvm-3.9\r\n\r\nTyping any SOS command into lldb after attaching to a process causes lldb to segfault.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jeffschwMSFT": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15271", "title": "ETW method/jitstarting events for dynamic methods", "body": "Currently ETW method/jitstarting events are not fired for dynamic methods, though the corresponding method/loadverbose are fired.  Having a matching pair of events is important since the start event indicates the IL size, the end event indicates the native size, and the pair provide insight into how long it took to JIT.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "natemcmaster": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15243", "title": "CoreCLR fails to initialize when running from a Docker read-only filesystem", "body": "Originally reported here https://github.com/aspnet/aspnet-docker/issues/331 by @RehanSaeed. I confirmed this issue appears in the microsoft/dotnet base images.\r\n\r\nCoreCLR fails to initalize when using the read-only filesystem in Docker.\r\n\r\n# Repro\r\n1. Create a Dockerfile with these contents\r\n```dockerfile\r\nFROM microsoft/dotnet:2.0.3-sdk-stretch AS builder\r\nWORKDIR /code/MyApp\r\nRUN dotnet new console && dotnet publish --output /app --configuration Release\r\n\r\nFROM microsoft/dotnet:2.0.3-runtime-stretch\r\nCOPY --from=builder /app /app\r\nENTRYPOINT [ \"dotnet\", \"/app/MyApp.dll\" ]\r\n```\r\n2. From command-line in the folder containing this dockerfile\r\n```\r\ndocker build --tag read-only-test ./\r\n```\r\n3. Launch the container with a read-only filesystem\r\n```\r\ndocker run --rm -it --read-only read-only-test\r\n```\r\n\r\n# Result\r\nApp fails with\r\n```\r\nFailed to initialize CoreCLR, HRESULT: 0x80004005\r\n```\r\n\r\nYou can gather a trace by executing `docker run --rm -it --read-only -e COREHOST_TRACE=1 read-only-test`\r\nCorehost trace: [log.txt](https://github.com/dotnet/coreclr/files/1510872/log.txt)\r\n\r\nFrom the trace, it appears the initialization reaches this point, and fails when calling `coreclr_initialize`: https://github.com/dotnet/core-setup/blob/v2.0.3/src/corehost/cli/hostpolicy.cpp#L181-L199\r\n\r\n# Details\r\n\r\nThe readonly flag:\r\n\r\n> The --read-only flag mounts the container\u2019s root filesystem as read only prohibiting writes to locations other than the specified volumes for the container.\r\n\r\nhttps://docs.docker.com/engine/reference/commandline/run/#mount-volume--v-read-only\r\n\r\n`docker info`\r\n\r\n```\r\nContainers: 13\r\n Running: 0\r\n Paused: 0\r\n Stopped: 13\r\nImages: 211\r\nServer Version: 17.09.0-ce\r\nStorage Driver: overlay2\r\n Backing Filesystem: extfs\r\n Supports d_type: true\r\n Native Overlay Diff: true\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins:\r\n Volume: local\r\n Network: bridge host ipvlan macvlan null overlay\r\n Log: awslogs fluentd gcplogs gelf journald json-file logentries splunk syslog\r\nSwarm: inactive\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nInit Binary: docker-init\r\ncontainerd version: 06b9cb35161009dcb7123345749fef02f7cea8e0\r\nrunc version: 3f2f8b84a77f73d38244dd690525642a72156c64\r\ninit version: 949e6fa\r\nSecurity Options:\r\n seccomp\r\n  Profile: default\r\nKernel Version: 4.9.49-moby\r\nOperating System: Alpine Linux v3.5\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 2\r\nTotal Memory: 1.934GiB\r\nName: moby\r\nID: 7HYI:PRKR:5ASJ:6UAU:SPUF:SA42:PGMK:VAJH:A5JQ:4DCB:XK6U:6CG7\r\nDocker Root Dir: /var/lib/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): true\r\n File Descriptors: 18\r\n Goroutines: 26\r\n System Time: 2017-11-28T16:58:34.2150442Z\r\n EventsListeners: 0\r\nRegistry: https://index.docker.io/v1/\r\nExperimental: true\r\nInsecure Registries:\r\n 127.0.0.0/8\r\nLive Restore Enabled: false\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15243/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kouvel": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15232", "title": "Consider reducing the sudden negative impact of thread pool worker thread starvation", "body": "Consider the following:\r\n- Lower initial delay between adding threads when there is starvation (maybe 100 ms instead of 500 ms)\r\n- Increase the number of threads that are added per delay initially (maybe as function of proc count instead of 1)\r\n- As the current number of worker threads increases beyond the minimum configured worker thread count:\r\n  - Increase the delay between adding threads up to a max (which could be the current default delay)\r\n  - Decrease the number of threads that are added per delay up to a min of 1", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15232/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15095", "title": "Clean up Monitor code", "body": "Examples:\r\n- See comments in https://github.com/dotnet/coreclr/pull/14216\r\n- Refactor EnterObjMonitorHelper and EnterObjMonitorHelperSpin to simplify them\r\n- Move AwareLock-relevant logic into member functions of AwareLock\r\n- Consider adding a ThinLock helper class that handles thin lock case conditions and transitions to AwareLock", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15072", "title": "Tests seem to time out before the default timeout expires", "body": "According to:\r\nhttps://github.com/dotnet/coreclr/blob/master/tests/src/Common/Coreclr.TestWrapper/CoreclrTestWrapperLib.cs#L99\r\nThe default timeout should be 10 minutes. It doesn't look like the following tests override that default timeout, and yet they seem to be timing out in less than or around one minute in the CI. From under tests/src/baseservices/threading/generics/Monitor:\r\n\r\nEnterExit14 and waitone2:\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x86_arm_altjit_checked_windows_nt_jitstress2_jitstressregs0x1000_prtest/8/\r\n\r\nEnterExit14:\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x86_arm_altjit_checked_windows_nt_jitstress2_jitstressregs2_prtest/9/\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x86_arm_altjit_checked_windows_nt_jitstress2_jitstressregs3_prtest/9/\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x86_arm_altjit_checked_windows_nt_tailcallstress_prtest/21/\r\n\r\nEnterExit14, EnterExit12:\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x86_arm_altjit_checked_windows_nt_jitstress2_jitstressregs4_prtest/9/\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x86_arm_altjit_checked_windows_nt_jitstressregs8_prtest/15/", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/b5a755ef274fa182cd17317208be4cb4dc3896de", "message": "Change monitor test (#15727)\n\nRelevant to https://github.com/dotnet/coreclr/issues/15592:\r\n- Not sure what is actually happening, guessing there is an exception during TryEnter() and the exception from Exit() from the finally block is hiding the actual exception\r\n- Moved TryEnter() to before the try block\r\n- Fixed pass/fail condition for some similar monitor tests"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/f3796c748b6fe561797d59307e0671f02eebd391", "message": "Fix waitone test (#15728)\n\nFixes https://github.com/dotnet/coreclr/issues/15098:\r\n- Probably a timing issue, changed to use Thread.Join() instead of sleeps"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15967", "title": "Enable tiered jitting for R2R methods", "body": "- Included R2R methods and generics over value types in CoreLib for tiered jitting. Tier 0 for R2R methods is the precompiled code if available, and tier 1 is selectively scheduled based on call counting.\r\n- Added a delay before starting to count calls for tier 1 promotion. The delay is a short duration after frequent tier 0 jitting stops (current heuristic for identifying startup).\r\n- Startup time and steady-state performance have improved on JitBench. There is a regression shortly following startup due to call counting and tier 1 jitting, for a short duration before steady-state performance stabilizes.\r\n- Added two new config values, one for configuring the call count threshold for promoting to tier 1, and another for specifying the delay from the last tier 0 JIT invocation before starting to count calls", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/20668063", "body": "Apparently, it's the standard and portable size specifier for size_t:\r\n- https://en.wikipedia.org/wiki/Printf_format_string#Length_field\r\n- http://stackoverflow.com/questions/2524611/how-can-one-print-a-size-t-variable-portably-using-the-printf-family\r\n\r\n%Iu as documented on MSDN doesn't work with some compilers on Unix and I had run into that issue before. Maybe not an issue anymore though, as there are uses of it in some places.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20668063/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20668077", "body": "https://blogs.msdn.microsoft.com/vcblog/2014/06/03/visual-studio-14-ctp/#div-comment-77733", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20668077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20668410", "body": "I see, fixed", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20668410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "pgodeq": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15224", "title": "[ARM64/Win] CoreCLR raises System.InvalidOperationException with asp.net benchmark", "body": "While I was executing asp.net bechmark plaintext on Windows-ARM64 with the latest coreclr, an exception is raised.  Following is the failure log. \r\n\r\n```\r\nc:\\DATA\\aspnet_benchmark\\publish_24nov_rel_newasp>CoreRun.exe Benchmarks.dll --scenarios=\"Plaintext\" --threadCount=12\r\n\r\nASP.NET Core Benchmarks\r\n-----------------------\r\nCurrent directory: c:\\DATA\\aspnet_benchmark\\publish_24nov_rel_newasp\r\nWebHostBuilder loading from: c:\\DATA\\aspnet_benchmark\\publish_24nov_rel_newasp\\microsoft.aspnetcore.hosting.dll\r\nScenario configuration found in scenarios.json and/or command line args\r\n\r\nThe following scenarios were enabled:\r\n  Plaintext -> /plaintext\r\n\r\nDatabase: None\r\nUsing server Kestrel\r\nServer GC is currently DISABLED\r\nPress 'C' to force GC or any other key to display GC stats\r\n\r\nHosting environment: Production\r\nContent root path: c:\\DATA\\aspnet_benchmark\\publish_24nov_rel_newasp\r\nNow listening on: http://10.131.5.101:5000\r\nApplication started. Press Ctrl+C to shut down.\r\n\r\nUnhandled Exception: System.InvalidOperationException: An attempt was made to transition a task to a final state when it had already completed.\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.HttpConnection.<ProcessRequestsAsync>d__47`1.MoveNext()\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state) in c:\\DATA\\ci\\2017-23-11\\coreclr\\src\\mscorlib\\shared\\System\\Threading\\ExecutionContext.cs:line 151\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext() in c:\\DATA\\ci\\2017-23-11\\coreclr\\src\\mscorlib\\src\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 556\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch() in c:\\DATA\\ci\\2017-23-11\\coreclr\\src\\mscorlib\\src\\System\\Threading\\ThreadPool.cs:line 586\r\n\r\n\r\n```\r\nLoad generator 'wrk' (set up on a different machine) is used to generate workload, with below arguments: \r\n`./wrk -c 16  -t 16 -d 60 http://10.131.5.101:5000/plaintext -s ./scripts/pipeline.lua -- 16`\r\n\r\nI created a setup to host this asp.net benchmark on Windows-ARM64 by \r\n1. copying all Core_Root (coreclr\\bin\\tests\\Windows_NT.arm64.Release\\Tests\\Core_Root) contents \r\n2. copying System.Memory from CoreFx build (bin\\Windows_NT.AnyCPU.Release\\System.Memory\\netcoreapp), along with asp.net benchmark compiled Benchmarks.dll ( [](https://github.com/aspnet/benchmarks))\r\n3. copying asp.net benchmark dll from (benchmarks\\src\\Benchmarks\\bin\\Release\\netcoreapp2.0\\publish)\r\n4. setting gcServer\r\n`set COMPlus_gcServer=1 `\r\n\r\n5. Executing below command\r\n`c:\\DATA\\aspnet_benchmark\\publish_24nov_rel_newasp>CoreRun.exe Benchmarks.dll --scenarios=\"Plaintext\" --threadCount=6`\r\n\r\nI do not observe this exception when I do the same run on Windows-x64, Linux-x64 or Linux-ARM64.\r\nIs there any setting I have missed or is it a genuine failure ? \r\n\r\nI tried debugging with Windbg.exe for ARM64 and I could collect following information when exception occurs:\r\n```\r\n0:043> sxe clr\r\n0:043> sxd av\r\n0:043> .loadby sos coreclr\r\n0:043> !pe\r\n*** WARNING: Unable to verify checksum for C:\\DATA\\aspnet_benchmark\\publish_24nov_rel_newasp\\CoreCLR.dll\r\nException object: 0000025ac7d52508\r\nException type:   System.InvalidOperationException\r\nMessage:          An attempt was made to transition a task to a final state when it had already completed.\r\nInnerException:   <none>\r\nStackTrace (generated):\r\n    SP               IP               Function\r\n    00000083E3ABF1A0 00007FFB35CDE298 System_Private_CoreLib!System.ThrowHelper.ThrowInvalidOperationException(System.ExceptionResource)+0x38\r\n    00000083E3ABF250 00007FFAD706AE84 microsoft_aspnetcore_server_kestrel_core!Microsoft.AspNetCore.Server.Kestrel.Core.Internal.HttpConnection+<ProcessRequestsAsync>d__47`1[[Microsoft.AspNetCore.Hosting.Internal.HostingApplication+Context, Microsoft.AspNetCore.Hosting]].MoveNext()+0x7ec\r\n    00000083E3ABF2A0 00007FFB35D37438 System_Private_CoreLib!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)+0x128\r\n    00000083E3ABF2C0 00007FFAD707F534 System_Private_CoreLib!System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib],[Microsoft.AspNetCore.Server.Kestrel.Core.Internal.HttpConnection+<ProcessRequestsAsync>d__47`1[[Microsoft.AspNetCo+0x54\r\n    00000083E3ABF330 00007FFB35E4072C System_Private_CoreLib!System.Threading.ThreadPoolWorkQueue.Dispatch()+0x19c\r\n\r\nStackTraceString: <none>\r\nHResult: 80131509\r\nThere are nested exceptions on this thread. Run with -nested for details\r\n\r\n0:043> !dso\r\nOS Thread Id: 0x884 (43)\r\nSP/REG           Object           Name\r\nx13              0000025ac7c1b448 System.Threading.ExecutionContext\r\nx14              0000025ac7ce7ac8 System.Threading.ContextCallback\r\nx16              0000025ac7cea638 System.Threading.ThreadPoolWorkQueueThreadLocals\r\n00000083E3ABD438 0000025ac7ce7ac8 System.Threading.ContextCallback\r\n00000083E3ABD448 0000025ac7cea638 System.Threading.ThreadPoolWorkQueueThreadLocals\r\n00000083E3ABD4C8 0000025ac7c1b448 System.Threading.ExecutionContext\r\n00000083E3ABD4D0 0000025ac7ce7ac8 System.Threading.ContextCallback\r\n00000083E3ABD4E0 0000025ac7cea638 System.Threading.ThreadPoolWorkQueueThreadLocals\r\n00000083E3ABD5A0 0000025ac7c1b448 System.Threading.ExecutionContext\r\n00000083E3ABD5C8 0000025ac7c1b448 System.Threading.ExecutionContext\r\n00000083E3ABD5D0 0000025ac7ce7ac8 System.Threading.ContextCallback\r\n00000083E3ABD898 0000025ac7cea638 System.Threading.ThreadPoolWorkQueueThreadLocals\r\n00000083E3ABD988 0000025ac7c1b448 System.Threading.ExecutionContext\r\n00000083E3ABD998 0000025ac7cea638 System.Threading.ThreadPoolWorkQueueThreadLocals\r\n00000083E3ABDAC0 0000025ac7c1b448 System.Threading.ExecutionContext\r\n00000083E3ABDAC8 0000025ac7ce7ac8 System.Threading.ContextCallback\r\n00000083E3ABDAD8 0000025ac7cea638 System.Threading.ThreadPoolWorkQueueThreadLocals\r\n00000083E3ABDD18 0000025ac7c1b448 System.Threading.ExecutionContext\r\n00000083E3ABDD28 0000025ac7cea638 System.Threading.ThreadPoolWorkQueueThreadLocals\r\n00000083E3ABDDB0 0000025ac7c1b448 System.Threading.ExecutionContext\r\n00000083E3ABDDB8 0000025ac7ce7ac8 System.Threading.ContextCallback\r\n00000083E3ABDDC8 0000025ac7cea638 System.Threading.ThreadPoolWorkQueueThreadLocals\r\n00000083E3ABDF68 0000025ac7c1b448 System.Threading.ExecutionContext\r\n00000083E3ABDF78 0000025ac7cea638 System.Threading.ThreadPoolWorkQueueThreadLocals\r\n00000083E3ABE388 0000025ac7cea638 System.Threading.ThreadPoolWorkQueueThreadLocals\r\n00000083E3ABE5B8 0000025ac7c1b448 System.Threading.ExecutionContext\r\n00000083E3ABE5C8 0000025ac7cea638 System.Threading.ThreadPoolWorkQueueThreadLocals\r\n00000083E3ABE8A0 0000025ac7c1b448 System.Threading.ExecutionContext\r\n00000083E3ABE8A8 0000025ac7ce7ac8 System.Threading.ContextCallback\r\n00000083E3ABE8B8 0000025ac7cea638 System.Threading.ThreadPoolWorkQueueThreadLocals\r\n00000083E3ABEE78 0000025ac7cea498 System.Char[]\r\n00000083E3ABEEE8 0000025ac7cea298 System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib],[System.Resources.ResourceLocator, System.Private.CoreLib]]\r\n00000083E3ABEF58 0000025ac7cea2e8 System.Resources.ResourceReader\r\n00000083E3ABEF78 0000025ac7cea638 System.Threading.ThreadPoolWorkQueueThreadLocals\r\n00000083E3ABF000 0000025ac7c04110 System.Globalization.CultureInfo\r\n00000083E3ABF0A0 0000025ac7cea638 System.Threading.ThreadPoolWorkQueueThreadLocals\r\n00000083E3ABF1B0 0000025ac816f820 System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib],[Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.LibuvOutputConsumer+<WriteOutputAsync>d__6, Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv]]\r\n00000083E3ABF200 0000025ac7c28960 System.Threading.Tasks.Task\r\n00000083E3ABF230 0000025ac7c1b448 System.Threading.ExecutionContext\r\n00000083E3ABF238 0000025ac7ce7ac8 System.Threading.ContextCallback\r\n00000083E3ABF248 0000025ac7cea638 System.Threading.ThreadPoolWorkQueueThreadLocals\r\n00000083E3ABF268 0000025ac7cea7b0 System.Threading.Thread\r\n00000083E3ABF288 0000025ac7d44d50 System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib],[Microsoft.AspNetCore.Server.Kestrel.Core.Internal.HttpConnection+<ProcessRequestsAsync>d__47`1[[Microsoft.AspNetCore.Hosting.Internal.HostingApplication+Context, Microsoft.AspNetCore.Hosting]], Microsoft.AspNetCore.Server.Kestrel.Core]]\r\n00000083E3ABF290 0000025ac7c1b448 System.Threading.ExecutionContext\r\n00000083E3ABF2D8 0000025ac7ceebd8 System.Threading.Tasks.CompletionActionInvoker\r\n00000083E3ABF2E0 0000025ac7c28ee0 System.Threading.ThreadPoolWorkQueue\r\n\r\n\r\n!dumpheap -type Exception\r\n\r\nStatistics:\r\n              MT    Count    TotalSize Class Name\r\n00007ffb361ccc30        1           24 System.Text.EncoderExceptionFallback\r\n00007ffb361cc900        1           24 System.Text.DecoderExceptionFallback\r\n00007ffad70a69f0        1           64 System.Action`5[[Microsoft.Extensions.Logging.ILogger, Microsoft.Extensions.Logging.Abstractions],[System.String, System.Private.CoreLib],[System.String, System.Private.CoreLib],[System.Double, System.Private.CoreLib],[System.Exception, System.Private.CoreLib]]\r\n00007ffad70a6780        1           64 System.Action`4[[Microsoft.Extensions.Logging.ILogger, Microsoft.Extensions.Logging.Abstractions],[System.TimeSpan, System.Private.CoreLib],[System.DateTimeOffset, System.Private.CoreLib],[System.Exception, System.Private.CoreLib]]\r\n00007ffad70a65b8        1           64 System.Action`4[[Microsoft.Extensions.Logging.ILogger, Microsoft.Extensions.Logging.Abstractions],[System.String, System.Private.CoreLib],[System.Int64, System.Private.CoreLib],[System.Exception, System.Private.CoreLib]]\r\n00007ffad7048040        1           64 System.Action`4[[Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.Networking.UvConnectRequest, Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv],[System.Int32, System.Private.CoreLib],[Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.Networking.UvException, Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv],[System.Object, System.Private.CoreLib]]\r\n00007ffad6c9da78        1           64 System.Func`3[[System.Object, System.Private.CoreLib],[System.Exception, System.Private.CoreLib],[System.String, System.Private.CoreLib]]\r\n00007ffad70a6c58        2          128 System.Action`4[[Microsoft.Extensions.Logging.ILogger, Microsoft.Extensions.Logging.Abstractions],[System.String, System.Private.CoreLib],[System.Int32, System.Private.CoreLib],[System.Exception, System.Private.CoreLib]]\r\n00007ffad70a6388        2          128 System.Action`2[[Microsoft.Extensions.Logging.ILogger, Microsoft.Extensions.Logging.Abstractions],[System.Exception, System.Private.CoreLib]]\r\n00007ffad70495a8        2          128 System.Action`4[[Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.Networking.UvWriteReq, Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv],[System.Int32, System.Private.CoreLib],[Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.Networking.UvException, Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv],[System.Object, System.Private.CoreLib]]\r\n00007ffad7044210        2          128 System.Action`4[[Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.Networking.UvStreamHandle, Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv],[System.Int32, System.Private.CoreLib],[Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.Networking.UvException, Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv],[System.Object, System.Private.CoreLib]]\r\n00007ffb361c39a0        1          144 System.StackOverflowException\r\n00007ffb361c2e38        1          144 System.ExecutionEngineException\r\n00007ffb361ade28        1          144 System.OutOfMemoryException\r\n00007ffb361adae8        1          144 System.InvalidOperationException\r\n00007ffb361c7d10        2          288 System.Threading.ThreadAbortException\r\n00007ffb361ad7a8        2          288 System.Exception\r\n00007ffad70a6240        5          320 System.Action`4[[Microsoft.Extensions.Logging.ILogger, Microsoft.Extensions.Logging.Abstractions],[System.String, System.Private.CoreLib],[System.String, System.Private.CoreLib],[System.Exception, System.Private.CoreLib]]\r\n00007ffad70a5cf0       17         1088 System.Action`3[[Microsoft.Extensions.Logging.ILogger, Microsoft.Extensions.Logging.Abstractions],[System.String, System.Private.CoreLib],[System.Exception, System.Private.CoreLib]]\r\n00007ffb35786ab8       77         2464 System.Collections.ObjectModel.ReadOnlyCollection`1[[System.Exception, System.Private.CoreLib]]\r\n00007ffb3618eb50       78         2488 System.Exception[]\r\n00007ffb3619ee68       99         3168 System.Runtime.ExceptionServices.ExceptionDispatchInfo[]\r\n00007ffb35778b98       99         3960 System.Collections.Generic.List`1[[System.Runtime.ExceptionServices.ExceptionDispatchInfo, System.Private.CoreLib]]\r\n00007ffb361b6f30       99         4752 System.Threading.Tasks.TaskExceptionHolder\r\n00007ffb361b99c0       99         6336 System.Runtime.ExceptionServices.ExceptionDispatchInfo\r\n00007ffad6c9dbb8      116         7424 System.Action`2[[System.Exception, System.Private.CoreLib],[System.Object, System.Private.CoreLib]]\r\n00007ffb361addb8       77        11704 System.AggregateException\r\n00007ffb361b4048       79        13272 System.TypeLoadException\r\n00007ffad70a2248      102        15504 Microsoft.AspNetCore.Protocols.ConnectionAbortedException\r\nTotal 970 objects\r\n\r\n\r\n0:043> !clrstack\r\nOS Thread Id: 0x884 (43)\r\n        Child SP               IP Call Site\r\n00000083e3abd498 00007ffb50bc76a0 [HelperMethodFrame: 00000083e3abd498] \r\n00000083e3abd5b0 00007ffb35d3743c SOS Error: Unable to CoCreateInstance class=CLSID_CorSymBinder_SxS, interface=IID_ISymUnmanagedBinder3, hr=0x80040154\r\nThis usually means the installation of .Net Framework on your machine is missing or needs repair\r\nSystem.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object) [c:\\DATA\\clr\\ci\\2017-23-11\\coreclr\\src\\mscorlib\\shared\\System\\Threading\\ExecutionContext.cs @ 133]\r\n00000083e3abf058 00007ffb363a18a8 [HelperMethodFrame: 00000083e3abf058] \r\n00000083e3abf180 00007ffb35cde29c SOS Error: Unable to CoCreateInstance class=CLSID_CorSymBinder_SxS, interface=IID_ISymUnmanagedBinder3, hr=0x80040154\r\nThis usually means the installation of .Net Framework on your machine is missing or needs repair\r\nSystem.ThrowHelper.ThrowInvalidOperationException(System.ExceptionResource) [c:\\DATA\\clr\\ci\\2017-23-11\\coreclr\\src\\mscorlib\\src\\System\\ThrowHelper.cs @ 175]\r\n00000083e3abf1a0 00007ffad706ae88 SOS Error: Unable to CoCreateInstance class=CLSID_CorSymBinder_SxS, interface=IID_ISymUnmanagedBinder3, hr=0x80040154\r\nThis usually means the installation of .Net Framework on your machine is missing or needs repair\r\nMicrosoft.AspNetCore.Server.Kestrel.Core.Internal.HttpConnection+d__47`1[[Microsoft.AspNetCore.Hosting.Internal.HostingApplication+Context, Microsoft.AspNetCore.Hosting]].MoveNext()\r\n00000083e3abf250 00007ffb35d3738c SOS Error: Unable to CoCreateInstance class=CLSID_CorSymBinder_SxS, interface=IID_ISymUnmanagedBinder3, hr=0x80040154\r\nThis usually means the installation of .Net Framework on your machine is missing or needs repair\r\nSystem.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object) [c:\\DATA\\clr\\ci\\2017-23-11\\coreclr\\src\\mscorlib\\shared\\System\\Threading\\ExecutionContext.cs @ 153]\r\n00000083e3abf2a0 00007ffad707f538 SOS Error: Unable to CoCreateInstance class=CLSID_CorSymBinder_SxS, interface=IID_ISymUnmanagedBinder3, hr=0x80040154\r\nThis usually means the installation of .Net Framework on your machine is missing or needs repair\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib],[Microsoft.AspNetCore.Server.Kestrel.Core.Internal.HttpConnection+d__47`1[[Microsoft.AspNetCore.Hosting.Internal.HostingApplication+Context, Microsoft.AspNetCore.Hosting]], Microsoft.AspNetCore.Server.Kestrel.Core]].MoveNext() [c:\\DATA\\clr\\ci\\2017-23-11\\coreclr\\src\\mscorlib\\src\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs @ 566]\r\n00000083e3abf2c0 00007ffb35e40730 SOS Error: Unable to CoCreateInstance class=CLSID_CorSymBinder_SxS, interface=IID_ISymUnmanagedBinder3, hr=0x80040154\r\nThis usually means the installation of .Net Framework on your machine is missing or needs repair\r\nSystem.Threading.ThreadPoolWorkQueue.Dispatch() [c:\\DATA\\clr\\ci\\2017-23-11\\coreclr\\src\\mscorlib\\src\\System\\Threading\\ThreadPool.cs @ 588]\r\n00000083e3abf7d0 00007ffb363a2100 [DebuggerU2MCatchHandlerFrame: 00000083e3abf7d0] \r\n\r\n\r\n0:043> !threads\r\nThreadCount:      43\r\nUnstartedThread:  0\r\nBackgroundThread: 42\r\nPendingThread:    0\r\nDeadThread:       0\r\nHosted Runtime:   no\r\n                                                                                                        Lock  \r\n       ID OSID ThreadOBJ           State GC Mode     GC Alloc Context                  Domain           Count Apt Exception\r\n   0    1  7b0 0000025ac623d660  202a020 Preemptive  0000000000000000:0000000000000000 0000025ac6223540 0     MTA \r\n  12    2 16cc 0000025ac6243f00    2b220 Preemptive  0000000000000000:0000000000000000 0000025ac6223540 0     MTA (Finalizer) \r\n  16    3  6ac 0000025ae144f150  1029220 Preemptive  0000025AC80DE8F8:0000025AC80DEA30 0000025ac6223540 0     MTA (Threadpool Worker) \r\n  18    4 12ac 0000025ae1453710  1029220 Preemptive  0000025AC7F3BC38:0000025AC7F3BCB0 0000025ac6223540 0     MTA (Threadpool Worker) \r\n  19    5 1aac 0000025ae1455d90  8029220 Preemptive  0000000000000000:0000000000000000 0000025ac6223540 0     MTA (Threadpool Completion Port) \r\n  21    7  d24 0000025ae1460180    2b220 Preemptive  0000000000000000:0000000000000000 0000025ac6223540 1     MTA \r\n  22    8 1b94 0000025ae146f8a0  102a220 Preemptive  0000000000000000:0000000000000000 0000025ac6223540 0     MTA (Threadpool Worker) \r\n  23    9  d20 0000025ae14b3630    2b220 Preemptive  0000025AC839C500:0000025AC839E230 0000025ac6223540 0     MTA \r\n  24   10 1ac0 0000025ae14b42c0    2b220 Preemptive  0000025AC837F090:0000025AC8380130 0000025ac6223540 0     MTA \r\n  25   11  d1c 0000025ae14b4f50    2b220 Preemptive  0000025AC838DB90:0000025AC838E1B0 0000025ac6223540 0     MTA \r\n  26   12 11d8 0000025ae14b59b0    2b220 Preemptive  0000025AC839B190:0000025AC839C230 0000025ac6223540 0     MTA \r\n  27   13 1574 0000025ae14b6050    2b220 Preemptive  0000025AC83AB2A0:0000025AC83AC2B0 0000025ac6223540 0     MTA \r\n  28   14  4d4 0000025ae14b66f0    2b220 Preemptive  0000025AC83629B8:0000025AC8364030 0000025ac6223540 0     MTA \r\n  29   15  d08 0000025ae14e62a0  1029220 Preemptive  0000025AC81C9908:0000025AC81CB230 0000025ac6223540 0     MTA (Threadpool Worker) \r\n  30   16  ca0 0000025ae14e6940  1029220 Preemptive  0000025AC82DC000:0000025AC82DDBB0 0000025ac6223540 0     MTA (Threadpool Worker) System.TypeLoadException 0000025ac82dbda8\r\n  31   17  6ec 0000025ae14fe200  1029220 Preemptive  0000025AC7FC3F28:0000025AC7FC40B0 0000025ac6223540 0     MTA (Threadpool Worker) \r\n  32   18 1588 0000025ae14ff640  1029220 Preemptive  0000025AC83551F0:0000025AC8355FB0 0000025ac6223540 0     MTA (Threadpool Worker) \r\n  33   19  4d0 0000025ae14fc040  1029220 Preemptive  0000025AC8294118:0000025AC8295930 0000025ac6223540 0     MTA (Threadpool Worker) \r\n  36   20 1a38 0000025ae14fef80  1029220 Preemptive  0000025AC7F4DB58:0000025AC7F4DD30 0000025ac6223540 0     MTA (Threadpool Worker) \r\n  34   21  990 0000025ae14fe8c0  1029220 Preemptive  0000025AC7F6F5D8:0000025AC7F6FE30 0000025ac6223540 0     MTA (Threadpool Worker) \r\n  49   22 1668 0000025ae14fdb40  1029220 Preemptive  0000025AC81BA4D8:0000025AC81BB1B0 0000025ac6223540 0     MTA (Threadpool Worker) \r\n  47   23  c48 0000025ae14fc700  1029220 Preemptive  0000025AC82FE0E8:0000025AC82FFCB0 0000025ac6223540 0     MTA (Threadpool Worker) \r\n  45   24 1164 0000025ae14fcdc0  1029220 Preemptive  0000025AC7F333A8:0000025AC7F33CB0 0000025ac6223540 0     MTA (Threadpool Worker) \r\n  46   25  9c8 0000025ae14fd480  1029220 Preemptive  0000025AC7FD4088:0000025AC7FD4130 0000025ac6223540 0     MTA (Threadpool Worker) \r\n  41   26  458 0000025ae232e050  1029220 Preemptive  0000025AC8006288:0000025AC80062B0 0000025ac6223540 0     MTA (Threadpool Worker) \r\n  43   27  884 0000025ae232f490  1029220 Preemptive  0000025AC83ADFA0:0000025AC83AE2B0 0000025ac6223540 0     MTA (Threadpool Worker) System.InvalidOperationException 0000025ac7d52508 (nested exceptions)\r\n  38   28  540 0000025ae232fb50  1029220 Preemptive  0000025AC824C488:0000025AC824D6B0 0000025ac6223540 0     MTA (Threadpool Worker) \r\n  40   29 1ad0 0000025ae2331d10  1029220 Preemptive  0000025AC7F5F448:0000025AC7F5FDB0 0000025ac6223540 0     MTA (Threadpool Worker) \r\n  39   30 11b8 0000025ae2330210  1029220 Preemptive  0000025AC7F39AE8:0000025AC7F39CB0 0000025ac6223540 0     MTA (Threadpool Worker) \r\n  37   31 1b70 0000025ae23308d0  1029220 Preemptive  0000025AC803EF18:0000025AC80404B0 0000025ac6223540 0     MTA (Threadpool Worker) \r\n  35   32  224 0000025ae232edd0  1029220 Preemptive  0000025AC7F934A8:0000025AC7F93F30 0000025ac6223540 0     MTA (Threadpool Worker) \r\n  42   33  b10 0000025ae2330f90  1029220 Preemptive  0000025AC810B7A8:0000025AC810CBB0 0000025ac6223540 0     MTA (Threadpool Worker) \r\n  44   34  764 0000025ae2331650  1029220 Preemptive  0000000000000000:0000000000000000 0000025ac6223540 0     MTA (Threadpool Worker) \r\n  48   35  744 0000025ae232e710  1029220 Preemptive  0000000000000000:0000000000000000 0000025ac6223540 0     MTA (Threadpool Worker) \r\n  50   36 154c 0000025ae23323d0  1029220 Preemptive  0000000000000000:0000000000000000 0000025ac6223540 0     MTA (Threadpool Worker) \r\n  51   37  7a0 0000025ae2334c50  1029220 Preemptive  0000000000000000:0000000000000000 0000025ac6223540 0     MTA (Threadpool Worker) \r\n  52   38  264 0000025ae2332a90  1029220 Preemptive  0000000000000000:0000000000000000 0000025ac6223540 0     MTA (Threadpool Worker) \r\n  53   39  250 0000025ae2333150  1029220 Preemptive  0000000000000000:0000000000000000 0000025ac6223540 0     MTA (Threadpool Worker) \r\n  54   40  254 0000025ae2335310  1029220 Preemptive  0000000000000000:0000000000000000 0000025ac6223540 0     MTA (Threadpool Worker) \r\n  55   41  260 0000025ae2333810  1029220 Preemptive  0000000000000000:0000000000000000 0000025ac6223540 0     MTA (Threadpool Worker) \r\n  65   46  4b4 0000025ae234bb50  1029220 Preemptive  0000000000000000:0000000000000000 0000025ac6223540 0     MTA (Threadpool Worker) \r\n  60   47  54c 0000025ae234cf90  1029220 Preemptive  0000000000000000:0000000000000000 0000025ac6223540 0     MTA (Threadpool Worker) \r\n  64   49 1614 0000025ae234c8d0  1029220 Preemptive  0000000000000000:0000000000000000 0000025ac6223540 0     MTA (Threadpool Worker) \r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ViktorHofer": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15203", "title": "FailFast logging should include inner exception details and stacktrace", "body": "We introduced FailFast logging with this change: https://github.com/dotnet/coreclr/commit/0c4a490 but are currently ignoring the passed exception data and stacktrace when calling `FailFast(string,Exception)`. We currently output the stacktrace that originates from the FailFast call.\r\n\r\nThis issue was reported here: https://github.com/dotnet/corefx/issues/25477\r\nRelated issue:\r\n- https://github.com/dotnet/coreclr/issues/14037\r\n- https://github.com/dotnet/coreclr/issues/14867\r\n\r\ncc @danmosemsft @jkotas ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bording": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15189", "title": "AssemblyName.GetAssemblyName throws exceptions on Linux and macOS", "body": "Given the following program:\r\n```csharp\r\nclass Program\r\n{\r\n    static Task Main()\r\n    {\r\n        var assembliesString = (string)AppContext.GetData(\"TRUSTED_PLATFORM_ASSEMBLIES\");\r\n        var assemblies = assembliesString.Split(Path.PathSeparator);\r\n\r\n        var tasks = new List<Task>();\r\n\r\n        for (int i = 0; i < 100; i++)\r\n        {\r\n            tasks.Add(Task.Run(() => GetAssemblyNames(assemblies)));\r\n        }\r\n\r\n        return Task.WhenAll(tasks);\r\n    }\r\n\r\n    static void GetAssemblyNames(string[] assemblies)\r\n    {\r\n        foreach (var assembly in assemblies)\r\n        {\r\n            var assemblyName = AssemblyName.GetAssemblyName(assembly);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThe behavior varies depending on what OS it is run on. It works perfectly on Windows. On Linux and macOS, the calls to GetAssemblyName eventually start failing. I've seen a variety of exceptions.\r\n\r\non macOS I've see the following exceptions:\r\n```\r\nSystem.IO.FileLoadException: Could not load file or assembly '/usr/local/share/dotnet/shared/Microsoft.NETCore.App/2.0.3/System.Security.Cryptography.Encoding.dll'. A device attached to the system is not functioning.\r\n (Exception from HRESULT: 0x8007001F)\r\n```\r\n```\r\nSystem.IO.FileLoadException: Could not load file or assembly '/usr/local/share/dotnet/shared/Microsoft.NETCore.App/2.0.3/System.Diagnostics.FileVersionInfo.dll'. The system cannot open the file.\r\n (Exception from HRESULT: 0x80070004)\r\n```\r\n\r\non Linux I've seen:\r\n```\r\nSystem.Runtime.InteropServices.COMException (0x8007000C) : The access code is invalid.\r\n(Exception from HRESULT: 0x8007000C)\r\n```\r\n```\r\nSystem.OutOfMemoryException : Exception of type 'System.OutOfMemoryException' was thrown.\r\n```\r\n\r\nThe stack traces all show the exceptions coming from `System.Reflection.AssemblyName.nGetFileInformation(String s)`. The assemblies that end up throwing vary from run to run, so the ones listed above are just examples.\r\n\r\n\r\nI've run my tests using the 2.0.3 SDK and runtime, on the following OSes:\r\n- Windows 10 1709 16299.64\r\n- macOS 10.13\r\n- Ubuntu 16.04\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ravimeda": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15183", "title": "BinSkim BA2021 on System.Private.CoreLib.dll", "body": "Repro steps:\r\n\r\n1. Build CoreCLR (`build.cmd`)\r\n2. Run BinSkim (https://github.com/Microsoft/binskim/blob/master/README.md#for-users)\r\n\r\n**Expected**: No issues\r\n\r\n**Actual**: Defect Id BA2021 is reported on System.Private.CoreLib.dll\r\n\r\nDetails: PE sections should not be marked as both writable and executable. This condition makes it easier for an attacker to exploit memory corruption vulnerabilities, as it may provide an attacker executable location(s) to inject shellcode. To resolve this issue, configure your tools to not emit memory sections that are writable and executable. For example, look for uses of /SECTION on the linker command line for C and C++ programs, or #pragma section in C and C++ source code, which mark a section with both attributes. Be sure to disable incremental linking in release builds, as this feature creates a writable and executable section named '.textbss' in order to function.'System.Private.CoreLib.dll' contains PE section(s) (.xdata) that are both writable and executable. Writable and executable memory segments make it easier for an attacker to exploit memory corruption vulnerabilities, because it may provide an attacker executable location(s) to inject shellcode. To resolve this issue, configure your tools to not emit memory sections that are writable and executable. For example, look for uses of /SECTION on the linker command line for C and C++ programs, or #pragma section in C and C++ source code, which mark a section with both attributes. Enabling incremental linking via the /INCREMENTAL argument (the default for Microsoft Visual Studio debug build) can also result in a writable and executable section named 'textbss'. For this case, disable incremental linking (or analyze an alternate build configuration that disables this feature) to resolve the problem.\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mfkl": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15163", "title": "marshalling va_list crossplatform p/invoke binding", "body": "Hello from VideoLAN!\r\n\r\nWe're currently implementing a new crossplatform .NET binding over `libvlc` and have ran into a bit of an issue. Our libvlc log callback prototype looks like this:\r\n\r\n`typedef void(* libvlc_log_cb) (void *data, int level, const libvlc_log_t *ctx, const char *fmt, va_list args)`\r\n\r\nWe need to marshal this from native to managed in a crossplatform way.\r\n\r\nWhat is the recommended way to perform `va_list` marshalling with P/Invoke in a crossplatform way (i.e. Xamarin platforms + friends)?\r\n\r\nFrom what we see in [clrvarargs.cpp](https://github.com/dotnet/coreclr/blob/master/src/vm/clrvarargs.cpp), we assume this is currently unsupported on Linux. What is needed to be done to be able to support this?\r\n\r\nRelated issues:\r\nhttps://github.com/dotnet/coreclr/issues/9204\r\nhttps://github.com/dotnet/standard/issues/20\r\n\r\nThanks for any pointers you may provide.\r\n\r\n/cc @jeremyVignelles", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "noahfalk": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15136", "title": "Profiler Interest Group - Announcements", "body": "I'm making this issue as an informal way to flag other issues and discussions that might be relevant to Building .NET profiling tools. This is similar to the .NET announcements repo, but given that profiling is a small crowd I didn't want to create noise for everyone or be very formal about it. Follow the issue if this is something you care about. Hopefully it works well but if not we can try something else.\r\n\r\nPlease don't do discussion directly in this issue, just links. Thanks!\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15136/reactions", "total_count": 11, "+1": 11, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15033", "title": "Null reference in JITCompilationFinished", "body": "@sillyousu reported a crash in the profiler in thread #445 - I am creating a new issue for that discussion here.\r\n\r\nMy suggestion to investigate this is either to manually map the disassembly to source, or to build your own coreclr with symbols so the debugger will do it for you. The function where it failed is fairly small so if you are familiar with disassembly it shouldn't be too bad:\r\nhttps://github.com/dotnet/coreclr/blob/67a66156d0307b49522a13618522d289268bc1f9/src/vm/eetoprofinterfaceimpl.cpp#L3184\r\n\r\nThat will narrow the issue from the method to the particular operation that encountered the NULL.\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14579", "title": "Multiple JITCompilationFinished events should not be generated", "body": "While doing some code review I noticed that the new code paths in the prestub appear to have a race condition that would allow JITCompilationFinished to be invoked more than once for the same method. This looks like it could happen whenever we hit the circular static class constructor race that bypasses the jit lock. Previously when the prestub ultimately called SetNativeCodeInterlocked we would skip the remaining events when that showed code was already jitted, but now we return to JitCompileCodeEventWrapper which still emits the remaining events.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14579/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15151", "title": "JitBench harness improvements", "body": "This is work in progress on JitBench before I head off on vacation. It consumes the changes in https://github.com/aspnet/JitBench/pull/79 once they are checked in. After that happens this PR would need to be merged up and the hardcoded JitBench repo commit SHA to download would need to be updated. Testing with all those changes locally everything appeared to work and it did fix issues I was hitting where the test was failing part way through with versioning related errors.\r\n\r\n---\r\n\r\n\r\nUse a shared framework version that is pinned to the CoreCLR package version in dependencies.props instead of using open-ended latest build versions. This should help make results more predictable. If two runs have CoreCLR synced to the same point they should use all the same .Net Core component versions, regardless of the passage of time.\r\n\r\nUse the RunBenchmark.ps1 script maintained by the JitBench repo rather than hard-coding all the different setup, install, restore, publish steps here.\r\n\r\nAdded a new option to grab JitBench repo from a local folder on the machine instead of downloading it from github to make local development easier. It still has some issues trying to overwrite the previous folder if you run the full benchmark multiple times in this mode, but it can be worked around manually be deleting the previous folder yourself, or use the 'Use-Existing-Setup option' to avoid making redundant copies.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/10858541", "body": "You changed the ifdef to be transport related, but the comment is xplat related. Perhaps you want to nest something like this inside the ifdef FEATURE_DBGIPC_TRANSPORT_DI:\n# ifdef FEATURE_PAL\n\n  //GetThreadContext() is currently ...\n  ZeroMemory(...)\n# else\n\n   #error DBGIPC_TRANSPORT_DI is only supported if FEATURE_PAL is also turned on\n# endif\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/10858541/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/10859110", "body": "If we are implementing FindLoadedCLR, that suggests we now have a scenario that needs it be implemented. Historically I think our startup for CoreCLR would have called CoreCLRCreateCordbObject which eliminates the need for this. Can you explain the new scenario that requires this to be implemented now?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/10859110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/10862091", "body": "So what I'm hearing is this scenario temporary for bring up? If so, go for it.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/10862091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "Buyduck": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15074", "title": "[ARM32] CompareExchange working wrong with clang3.9", "body": "With next C# code:\r\n```\r\nusing System;\r\nusing System.Threading;\r\n\r\nclass Test\r\n{\r\n    static void Main()\r\n    {\r\n        long x = 322;\r\n        Console.WriteLine(x);\r\n        Interlocked.CompareExchange(ref x, 0, 0);\r\n        Console.WriteLine(x);\r\n    }\r\n}\r\n```\r\n\r\nWhile cross building debug version CoreCLR for ARM32 with clang3.9 got next result:\r\n```\r\njenkins@hoult-odroid:~/dotnet-arm$ ./overlayDBG39/corerun test.exe\r\n322\r\n0\r\n```\r\nAnd, while building with clang4.0 - everything is ok:\r\n```\r\njenkins@hoult-odroid:~/dotnet-arm$ ./overlayDBG40/corerun test.exe \r\n322\r\n322\r\n```\r\n\r\nWith Release version everything is ok. Seems, like in pal.h __sync_val_compare_and_swap() for some reason working wrong:\r\n```\r\n// See the 32-bit variant in interlock2.s\r\nEXTERN_C\r\nPALIMPORT\r\ninline\r\nLONGLONG\r\nPALAPI\r\nInterlockedCompareExchange64(\r\n    IN OUT LONGLONG volatile *Destination,\r\n    IN LONGLONG Exchange,\r\n    IN LONGLONG Comperand)\r\n{\r\n    return __sync_val_compare_and_swap(\r\n        Destination, /* The pointer to a variable whose value is to be compared with. */\r\n        Comperand, /* The value to be compared */\r\n        Exchange /* The value to be stored */);\r\n}\r\n```\r\n@alpencolt ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "unicomp21": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15073", "title": "Add support for detecting page faults within async/await coroutines", "body": "Something similar to structured exception handling which can bubble up along the async/await exception handling chain.  Possible use case:\r\n\r\nTask taskHasPageFaulted = Task.RunInPageFaultScheduler(MyCoroutine);\r\n\r\nTask nextPageFaultedCoroutine = await Task.WaitAny(arrayOfAboveCoroutines);\r\n// run a coroutine which is ready\r\n\r\nThe dream setup would be using UMS (User Mode Scheduler) from .Net Core.  UMS nailed the page fault thing, when combined w/ structured exception handling.\r\n\r\nThe intention is being able to multiplex 100k+ coroutines efficiently.\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "chsienki": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15062", "title": "PAL_VirtualUnwindOutOfProc isn't implemented for non x64 platforms", "body": "On platforms other than x64 _PAL_VirtualUnwindOutOfProc(...)_ is stubbed out to return FALSE  ([remote-unwind.cpp#L1081](https://github.com/dotnet/coreclr/blob/88527bb6bdec8662a5cef5efcadb22c7fcabae50/src/pal/src/exception/remote-unwind.cpp#L1081)).\r\n\r\nThe current implementation falls back to using DataTarget4->VirtualUnwind on platforms where the PAL method is not implemented, but this will not work in the dump debugging scenario.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "philippweidhas": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/15004", "title": "How to integrate CoreClr Binaries manually in a Linux System", "body": "\r\nHallo .Net Core Community,\r\n\r\nim looking for a way to integrate my selfbuild Binaries of coreclr and corefx in an UbuntuSystem. I build the binaries for x86 to get .Net Core running on a x86 Ubuntu System. Now i need a guide where and how to place the binaries in this UbuntuSystem. Can someone give me a instruction or a link to an guide wich i was not able to find.\r\n\r\nGreetings\r\nPhilipp", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/15004/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Const-me": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/14997", "title": "ARM Linux, .NET Core 2.0.4 crashes on shutdown", "body": "It happens after the control leaves my Program.Main method.\r\n\r\nI\u2019ve tried running my app with gdb, here\u2019s the output:\r\n\r\n```\r\nThread 14 \"dotnet\" received signal SIGSEGV, Segmentation fault.\r\n[Switching to Thread 0xaa4cb450 (LWP 2405)]\r\n0xb6781b9e in EventPipeConfiguration::RegisterProvider(EventPipeProvider&) ()\r\n   from /opt/dotnet/shared/Microsoft.NETCore.App/2.0.4-servicing-25831-01/libcoreclr.so\r\n```\r\n\r\nApparently, the previous fix doesn\u2019t work: https://github.com/dotnet/coreclr/issues/13689", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aarcarons": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/14993", "title": "[ARM] SIGSEGV when enabling tracing on a Raspberry Pi", "body": "Hi,\r\n\r\nI have a simple .NET Core application which I want to execute on Raspberry Pi. I'm noticing strange behaviours when using the ```HttpClient``` class, so I followed this [guide](http://blogs.microsoft.co.il/sasha/2017/03/30/tracing-runtime-events-in-net-core-on-linux/) to enable tracing events and collect them using LTTng with the purpose of filing an issue with detailed info.\r\n\r\nThe problem I'm facing now is that once I enable tracing, and then run my application, the SO tells me that a SIGSEGV has been produced. To isolate other problems, I'm reproducing this with a trivial .NET Core 2.0 \"Hello world\" app.\r\n\r\nThe steps to reproduce are these:\r\n1. Enable tracing via ```export COMPlus_EnableEventLog=1```\r\n2. Create a LTTng session that listens to all user-space events\r\n```\r\nlttng create mysession\r\nlttng enable-event -u -a\r\nlttng start\r\n```\r\n3. Run the application\r\n\r\nNotice that without having a LTTng session enabled (step 2), the problem is not reproduced.\r\n\r\nThis is the stacktrace that GDB gives me:\r\n\r\n```\r\n[Thread debugging using libthread_db enabled]\r\nUsing host libthread_db library \"/lib/arm-linux-gnueabihf/libthread_db.so.1\".\r\n[New Thread 0x7645c450 (LWP 2462)]\r\n[New Thread 0x75c5c450 (LWP 2463)]\r\n[New Thread 0x74f19450 (LWP 2464)]\r\n\r\nProgram received signal SIGSEGV, Segmentation fault.\r\n0x00000000 in ?? ()\r\n(gdb) bt\r\n#0  0x00000000 in ?? ()\r\n#1  0x7654ce1c in __event_probe__DotNETRuntime___RuntimeInformation (__tp_data=<optimized out>, length=<optimized out>, __data__=<optimized out>)\r\n    at /root/coreclr/bin/obj/Linux.arm.Release/Generated/eventprovider/lttng/./tpdotnetruntime.h:673\r\n#2  0x76998be2 in __tracepoint_cb_DotNETRuntime___RuntimeInformationStart (length=<optimized out>, __data__=<optimized out>)\r\n    at /root/coreclr/bin/obj/Linux.arm.Release/Generated/eventprovider/lttng/tpdotnetruntime.h:2673\r\n#3  FireEtXplatRuntimeInformationStart (ClrInstanceID=<optimized out>, Sku=<optimized out>, BclMajorVersion=<optimized out>, BclMinorVersion=<optimized out>,\r\n    BclBuildNumber=<optimized out>, BclQfeNumber=<optimized out>, VMMajorVersion=<optimized out>, VMMinorVersion=<optimized out>, VMBuildNumber=<optimized out>,\r\n    VMQfeNumber=<optimized out>, StartupFlags=<optimized out>, StartupMode=<optimized out>, CommandLine=<optimized out>, ComObjectGuid=<optimized out>,\r\n    RuntimeDllPath=<optimized out>) at /root/coreclr/bin/obj/Linux.arm.Release/Generated/eventprovider/lttng/eventprovdotnetruntime.cpp:4398\r\n#4  0x7679f59a in FireEtwRuntimeInformationStart (Sku=2, BclMajorVersion=4, BclMinorVersion=0, BclBuildNumber=0, BclQfeNumber=0, VMMajorVersion=4, VMMinorVersion=0,\r\n    VMBuildNumber=22220, VMQfeNumber=0, StartupFlags=0, ComObjectGuid=<optimized out>, RuntimeDllPath=0x7effe3c4 u\"/home/pi/netcore3/libcoreclr.so\",\r\n    ClrInstanceID=<optimized out>, StartupMode=<optimized out>, CommandLine=<optimized out>) at /root/coreclr/bin/obj/Linux.arm.Release/src/inc/clretwallmain.h:2741\r\n#5  ETW::InfoLog::RuntimeInformation (type=<optimized out>) at /root/coreclr/src/vm/eventtrace.cpp:4974\r\n#6  0x7671ce7a in EEStartupHelper (fFlags=<optimized out>) at /root/coreclr/src/vm/ceemain.cpp:770\r\n#7  0x7671c802 in operator() (this=<optimized out>, pfFlags=<optimized out>) at /root/coreclr/src/vm/ceemain.cpp:1236\r\n#8  EEStartup (fFlags=<optimized out>) at /root/coreclr/src/vm/ceemain.cpp:1238\r\n#9  0x7671c71e in EnsureEEStarted (flags=<optimized out>) at /root/coreclr/src/vm/ceemain.cpp:374\r\n#10 0x7669a714 in Start (this=<optimized out>) at /root/coreclr/src/vm/corhost.cpp:242\r\n#11 CorHost2::Start (this=<optimized out>) at /root/coreclr/src/vm/corhost.cpp:189\r\n#12 0x76681914 in coreclr_initialize (exePath=<optimized out>, appDomainFriendlyName=<optimized out>, propertyCount=<optimized out>, propertyKeys=<optimized out>,\r\n    propertyValues=<optimized out>, hostHandle=0x3ef20, domainId=0x7effe200) at /root/coreclr/src/dlls/mscoree/unixinterface.cpp:216\r\n#13 0x76c02b30 in coreclr::initialize(char const*, char const*, char const**, char const**, int, void**, unsigned int*) () from /home/pi/netcore3/libhostpolicy.so\r\n#14 0x76bfa700 in run(arguments_t const&) () from /home/pi/netcore3/libhostpolicy.so\r\n#15 0x76bfaf1e in corehost_main () from /home/pi/netcore3/libhostpolicy.so\r\n#16 0x76c88420 in execute_app(std::string const&, corehost_init_t*, int, char const**) () from /home/pi/netcore3/libhostfxr.so\r\n#17 0x76c8e726 in fx_muxer_t::read_config_and_execute(std::string const&, std::string const&, std::unordered_map<std::string, std::vector<std::string, std::allocator<std::string> >, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<std::string const, std::vector<std::string, std::allocator<std::string> > > > > const&, int, char const**, host_mode_t) () from /home/pi/netcore3/libhostfxr.so\r\nCannot access memory at address 0x597df800\r\n#18 0x7efff794 in ?? ()\r\nCannot access memory at address 0x597df800\r\nBacktrace stopped: previous frame identical to this frame (corrupt stack?)\r\n```\r\n\r\nContext details:\r\n- I installed the .NET Core runtime in my Pi following this [guide](https://blogs.msdn.microsoft.com/david/2017/07/20/setting_up_raspian_and_dotnet_core_2_0_on_a_raspberry_pi/)\r\n- Version of the runtime installed in Pi is ```2.0.4-servicing-25910-01``` (https://github.com/dotnet/core-setup)\r\n- I'm compiling the application from a Windows machine targeting the ```linux-arm``` platform. This machine has .NET Core SDK version 2.0.2\r\n- Device is a Raspberry Pi 3 Model B Rev 1.2\r\n- Installed OS is ```Linux raspberrypi 4.9.35-v7+ armv7l GNU/Linux```\r\n- ```LTTng``` compiled from source, in version 2.8.8\r\n- ```libunwind``` compiled from [source](https://github.com/libunwind/libunwind), in version 1.2\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14993/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "stilettk": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/14876", "title": "List<T>: Improve InsertRange performance of lazy IEnumerable", "body": "### Description\r\nCurrently when passing `IEnumerable` to `InsertRange` the following algorithm is used:\r\n\r\n- If `IEnumerable` is inserted to the end of a list (`index == _size`), it enumerates it and appends elements to the end of underlying array.\r\n- If `IEnumerable` is inserted in the middle of list (`index < _size`), it simply enumerates it and calls `Insert` for each element.\r\n\r\nThe second approach is quite complex. Suppose that we insert `IEnumerable` with M elements to the `List` with N elements to the position `k < N`. In each `Insert` there is an `Array.Copy` call, which is O(N-k). So, the **current complexity is O(M*N)**.\r\n\r\n### Suggestion\r\nThere are faster algorithm to accomplish this:\r\n\r\n1. `IEnumerable` is enumerated and added to the end of the `List` (like when adding to the end). This in O(M).\r\n3. Swap array's segments (k, N) and (N, N+M). For example, [this](http://codinghelmet.com/?path=exercises/rotating-array) algorithm has O(N-k+M)=O(N+M) complexity. So, the **resulting complexity will be O(N) + O(N+M) = O(max(M, N))**.\r\n\r\nFor example: `a,b,c` is being inserted in `1,2,3,4,5` to the position `k = 3`. The algorithm steps will be `1,2,3,4,5` -> `1,2,3,4,5,a,b,c` -> `1,2,3,a,b,c,4,5`.\r\n\r\n### Things to consider\r\n\r\nUnlike current algorithm, there is no \"intermediate\" results. In case of exception `List` might end up in incorrect state (right now just part of `IEnumerable` will be added). On the other hand, some other methods may have the same behavior as well (for example, `Array.Reverse`).\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jcdickinson": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/14866", "title": "[Jit x86] Checked Constraint Doesn't Participate in Dead Code Elimination", "body": "[Live Demo](https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQxNMSAmIDUAfAAQAYACAgRgG4BYAKGLPIDoAlAVwDsYBLMOJgMIB7MAAduAG0QBlRADduAYzhQatOgQDMJWAjaKYJaSQDedEhZLnLohNzkR4JNty4kA+oogSJq6xdt7RzhnV0N3Bwk2ODVLK1o4gG0AWTgYAAshTABJMQkAClSMrNzRCQB5UR4hDigmADkhbI4JV1cAcwBKAF1/Mm0KADZQtwAVFRh8ztM+uIcEHRIAXhIOOAB3IynYuMs65ta11O3ZywIAdh0mA9c4Y86diwBfPr6UtMycvMKPkrzK6q1JgAQXa7QQKig9jgNw4HR6fS0I0MsLucCmMwSuwspws8xIkWWHi8PigJAAZCQiAAPKi4+LYizcABmJHyhKWKyI0zMWOxAEgIt5oiQcCtPN5fCQAFQkcgAJk0j12TxIcF8IRZbI5K3IPPpcSFURCYuJkrJsoALABWQbKuIvPm7emKdJwRQAazgmHpvMZuwlpJwOEolnpjv99IuHki0WVjqeQA==) | [JIT and ASM dumps](https://gist.github.com/jcdickinson/04171181d9327c902ed15d307638636b)\r\n\r\nIt looks like `checked` is preventing value range optimization when it's statically known that no overflow can occur.\r\n\r\n## Code\r\n\r\n```c#\r\npublic struct S {\r\n    \r\n    private uint _calls;\r\n    private uint _value;\r\n    \r\n    [MethodImpl(MethodImplOptions.NoInlining)]\r\n    public static uint Test() {\r\n        var s = new S();\r\n        s.InlineMe();\r\n        return s.InlineMe();\r\n    }\r\n    \r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public uint InlineMe() {\r\n        \r\n        var val = _calls & 0x1;\r\n        \r\n        if (val == 0) {\r\n        \t_value += _calls * 123;\r\n        } else if (val == 1) {\r\n            _value += _calls * 456;\r\n        }\r\n        \r\n        checked\r\n        {\r\n            _calls++;   \r\n        }\r\n        \r\n        return _value;\r\n    }\r\n\r\n    public static void Main() {\r\n        Test();\r\n    }\r\n}\r\n```\r\n\r\n## Investigation\r\n\r\n`_calls` is always less than 2 and the checked is dead code, yet there is still a branch to a throw in the [final code](https://gist.github.com/jcdickinson/04171181d9327c902ed15d307638636b#file-test-asm-L45). Removing `checked` results in *much* smaller code:\r\n\r\n```asm\r\n       mov      eax, 456\r\n```\r\n\r\nThe problem seems to be that [`fgMorphTree` is unaware that the value cannot overflow.](https://gist.github.com/jcdickinson/04171181d9327c902ed15d307638636b#file-test-ildump-L1325)\r\n\r\nI'd love to have a go at improving this but I can't find any documentation on how to get a .sln up and running.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14866/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15575", "title": "[WIP] Replace HashHelpers.Combine with HashCode.Combine", "body": "Fixes #15508\r\n\r\nAll instances of HashHelpers.Combine and NumericsHelpers.CombineHash have been replaced. Copied code has also been replaced as far as grep is concerned. The helpers have been deleted.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "stephentoub": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/14770", "title": "Coalescing calls to non-returning throw helpers?", "body": "Repro:\r\n```C#\r\nusing System;\r\n\r\nclass Program\r\n{\r\n    public static void Main()\r\n    {\r\n        var arr = new int[20];\r\n        var s0 = new Span<int>(arr, 0, 1);\r\n        var s1 = new Span<int>(arr, 1, 1);\r\n        var s2 = new Span<int>(arr, 2, 1);\r\n        var s3 = new Span<int>(arr, 3, 1);\r\n        var s4 = new Span<int>(arr, 4, 1);\r\n        var s5 = new Span<int>(arr, 5, 1);\r\n    }\r\n}\r\n```\r\n\r\nThe generated asm includes this at the end:\r\n```\r\nG_M45847_IG05:\r\n       E84B8ECC5D           call     System.ThrowHelper:ThrowArgumentOutOfRangeException()\r\n\r\nG_M45847_IG06:\r\n       E8468ECC5D           call     System.ThrowHelper:ThrowArgumentOutOfRangeException()\r\n\r\nG_M45847_IG07:\r\n       E8418ECC5D           call     System.ThrowHelper:ThrowArgumentOutOfRangeException()\r\n\r\nG_M45847_IG08:\r\n       E83C8ECC5D           call     System.ThrowHelper:ThrowArgumentOutOfRangeException()\r\n\r\nG_M45847_IG09:\r\n       E8378ECC5D           call     System.ThrowHelper:ThrowArgumentOutOfRangeException()\r\n\r\nG_M45847_IG10:\r\n       E8328ECC5D           call     System.ThrowHelper:ThrowArgumentOutOfRangeException()\r\n       CC                   int3\r\n```\r\n\r\nCan/should these be coalesced into a common call point?", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14770/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72726825", "body": "@troydai, thanks for the issue, but this should be closed and instead opened on the CoreFX repo:\nhttps://github.com/dotnet/corefx\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72726825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72727824", "body": "Thanks\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72727824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72875209", "body": "Thanks, @russgray.  The fix LGTM. Stylewise, I'd prefer to see this simplified to avoid multiple return statements for the same thing, e.g. instead of:\n\n``` C#\nTValue resultingValue;\nif (TryGetValue(key, out resultingValue))\n{\n    return resultingValue;\n}\nTryAddInternal(key, value, false, true, out resultingValue);\nreturn resultingValue;\n```\n\ndoing:\n\n``` C#\nTValue resultingValue;\nif (!TryGetValue(key, out resultingValue))\n{\n    TryAddInternal(key, value, false, true, out resultingValue);\n}\nreturn resultingValue;\n```\n\nI realize you were just copying the style that was already there for the other overload.  Want to change both?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72875209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72875730", "body": "Actually, scratch that.  This should be on the CoreFX repository, not in CoreCLR (I didn't notice which repository we were talking about).  Can you close this PR and reopen an appropriate one over on CoreFX for the ConcurrentDictionary there rather than the ConcurrentDictionary in mscorlib?\n\n(Note that the ConcurrentDictionary in CoreFX has evolved from the one here, so you'll see some slightly different code involving TryGetValueInternal in order to avoid duplicate hashcode generation.)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72875730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72876521", "body": "Thanks.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72876521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/21343827", "body": "This change is breaking a CoreFx test that's testing the function with an empty array:\r\nhttps://ci.dot.net/job/dotnet_corefx/job/master/job/windows_nt_debug_prtest/4706/\r\n```\r\n     System.Tests.ConvertFromBase64Tests.EmptyString [FAIL]\r\n        System.IndexOutOfRangeException : Index was outside the bounds of the array.\r\n        Stack Trace:\r\n              at System.Convert.FromBase64CharArray(Char[] inArray, Int32 offset, Int32 length)\r\n           /mnt/resource/j/workspace/dotnet_corefx/master/portablelinux_debug_prtest/src/System.Runtime.Extensions/tests/System/Convert.FromBase64.cs(255,0): at System.Tests.ConvertFromBase64Tests.Verify(String input, Action`1 action)\r\n           /mnt/resource/j/workspace/dotnet_corefx/master/portablelinux_debug_prtest/src/System.Runtime.Extensions/tests/System/Convert.FromBase64.cs(47,0): at System.Tests.ConvertFromBase64Tests.EmptyString()\r\n```\r\ncc: @jkotas, @alexperovich ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/21343827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/22049175", "body": "Maybe add a comment so no one else tries to remove it?", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/22049175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/27571278", "body": "If there's a better place to define this, let me know. I see it defined in another makefile, but that doesn't appear to be affecting all relevant areas.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/27571278/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/27582950", "body": "Deleted.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/27582950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "vancem": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/14728", "title": "EventSource executes deferred commands in the wrong order.  ", "body": "In the attached program that uses EventSource  [Program.cs.txt](https://github.com/dotnet/coreclr/files/1423398/Program.cs.txt) should emit the message 'Hey!'  but does not.  \r\n\r\nThe reason is that EventSource has the concept of a 'deferred' command and these commands are executed in the wrong order (they are executed last first).    Basically if an EventListener exists before an EventSource exists, then when that EventSource gets created, it calls the EventListener to ask if wants to subscribe.    However because the EventSource is being created, it is not actually ready for the commands the EventListener might give to it.    So it remembers these commands and executes them just after it is fully initialized.   \r\n\r\nThere is bug in this logic, as the commands are inserted on linked list that naturally forms a STACK (see  https://github.com/dotnet/coreclr/blob/master/src/mscorlib/shared/System/Diagnostics/Tracing/EventSource.cs#L2682).  The result is that the deferred commands are executed in reverse order.  \r\n\r\nIt is a easy fix (insert the new entries at the end of the list rather than the beginning).   \r\n\r\n\r\nWork-arounds:  Not that different EventListeners have their own set of filtering state, so the order AMONG eventListeners is not important (there are no guarentees there).   Thus this only becomes an issue if you execute multiple commands in the OnEventSourceCreated (which is unusual).  Also this is only a problem for deferred commands.  If the EventSource exists before the EventListener, there is also no problem (thus in the original repro, if you put a 'AlphaSource.Log.IsEnabled() in the begnning of main (which forces the EventSource to be created), the problem will go away. \r\n\r\nThis is reported to work properly on Desktop, but it is unclear why as the code is the same (I think).   It should be fixed in both runtimes.   ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14728/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sywhang": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/14724", "title": "Test ARM32 tailcalls for profiler", "body": "Profiler ELT hooks for ARM32 tailcall has not been tested yet, because JIT optimizations for tailcall is missing on ARM32. The tailcall hook for arm32 has already been added by @rartemev with #14713, so once JIT optimizations are added in, we need to test this hook. \r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/2efb857f0e904f829e71597875409abd0717fc48", "message": "Update profiling API status (#15659)\n\n* Update profiling API status\r\n\r\n* Fix wording for ARM ReJIT issue"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/9f5da3a5e53529880907efd6c30d0abdeba0ba29", "message": "Remove duplicate callback to AppDomainCreationFinished in profiler (#15691)"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15895", "title": "Fix failfast stacktrace", "body": "This addresses issue #14867, by adding another Environment.FailFast FCall that gets passed in an UINT type that specifies the error source, to print the correct title for stack trace.\r\n\r\nThe stack getting printed twice is also addressed here.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "RussKeldorph": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/14711", "title": "ARM JIT support for \"jump stamps\" for ReJIT", "body": "ReJIT sometimes needs to replace the first bytes of a JIT-generated method's prologue with a branch to replacement code.  We need to decide what that branch looks like to determine the minimum size of a prologue when ReJIT support is required.  Also, enable support for generating said minimum-sized prologues.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14711/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/127353024", "body": "I would capitalize the `X` in `Hostx86` to match what gets installed.  I realize it doesn't matter on Windows, so your call.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/127353024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/69608369", "body": "(optional) You could call out implementation details like actual function references (e.g. GetFirstBaseSPslotPtr) as asides/author's notes since they are possibly not critical to an \"interface\" doc, though they are immensely helpful.  Not sure if MD offers a convenient formatting for this concept, though.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/69608369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "iburman": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/14690", "title": "Failed to create memory dump /mA - GenInvokeEnumStackProviders failed, 0x8007007f", "body": "I posted this in the windbg public forum a few days ago but didn't get any reply so far. As it seems that the issue is caused by some .Net component, I'm posting it here, may be someone can help.\r\n\r\nBelow is my original post:\r\nTrying to troubleshoot a high cpu issue and we fail to create memory dumps with windbg with the following messages:\r\n\r\n\r\n\r\n0:000> .dump -u /mA /c HangMode  ${AdpDumpDir}\\FULLDUMP_HangMode_${AdpProcName}_.dmp\r\n Creating x:\\dumps\\20171020_082223_Hang_Mode\\FULLDUMP_HangMode_w3wp.exe__16ec_2017-10-20_08-22-26-210_1e18.dmp - mini user dump\r\n GenInvokeEnumStackProviders(C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\mscordacwks.dll) failed, 0x8007007f\r\n WriteFullMemory.Memory.Read(0x7ffb97221000, 0x10000) failed 0x8007012b, skip.\r\n WriteFullMemory.QueryVirtual(0x0) for info failed, 0x80070005\r\n Dump creation failed, Win32 error 0n5\r\n     \"Access is denied.\"\r\n\r\nThe process is a w3wp.exe on a Windows 2012 server.\r\n\r\nAny idea what could be causing this? \r\n\r\nThanks\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14690/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "masonwheeler": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/14681", "title": "[Proposal] Provide a \"logical stacktrace\" when assemblies fail to load.", "body": "We've all had it happen.  We go to load a program, or load an assembly into our program, and it fails with an \"assembly not found\" error on some assembly we didn't ask for, that doesn't look at first glance like it has anything to do with what we're trying to load.  Generally it's a dependency of a dependency of a dependency of a dependency of what we actually care about, and the actual problem to be fixed could lie at any point along that dependency chain.\r\n\r\nKnowing what this chain is is the information that we need to resolve the issue, but it's not provided, which makes fixing these problems like pulling teeth sometimes.\r\n\r\nIt would be great if we could get a \"stacktrace\" of the dependency chain, so that instead of simply saying:\r\n\r\n    Could not load file or assembly 'Foo, Version=0.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'. The system cannot find the file specified.\r\n\r\nit would then continue on and say:\r\n\r\n    while loading assembly Bar, Version=0.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\r\n    while loading assembly Baz, Version=0.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\r\n    while loading assembly Qux, Version=0.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\r\n\r\nHow much work would it be to fix this up?", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14681/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "myarichuk": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/14672", "title": "In certain cases, IEnumerator::MoveNext() throws System.InvalidProgramException", "body": "Reproduction of this exception is in the following **gist**:\r\nhttps://gist.github.com/myarichuk/db2a290ec8ae5ea0faf2698b0c5b02c2\r\n\r\nIn this case, **InvalidProgramException** exception is thrown when the anonymous object in in the **Map_0()** function has more than 43 fields. \r\n\r\nThe code in the **gist** runs fine in a .Net 4.7 project.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "janvorli": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/14659", "title": "Refactor build scripts to have common code in a common script file", "body": "Currently, the build.sh, init-tools.sh, build-packages.sh and build-test.sh contains copies of the same code e.g. for host rid detection. We should move the shared code to a shared shell script file so that we have just one copy of that code. \r\nLater on, it would be ideal to share that code even between all of our repos.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14659/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/1ae6cae97bc912cedb7284ef61a8dbe4b6de9fff", "message": "Add missing config.h.in entry for HAVE_LIBINTL_H (#15887)\n\nIn my change yesterday, I have added HAVE_LIBINTL_H to the\r\nconfigure.cmake file, but forgotten to add the corresponding define to\r\nthe config.h.in file. This fixes it."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/5424bc69242a3cead6e1ed84c442a178a1ec8fe7", "message": "Fix one missing check for NULL after malloc (#15877)\n\nWhen making the last change to the numa.cpp, I have made a\r\nmistake and forgotten to check return value of one of the mallocs.\r\nThis change fixes that and also changes the code pattern to use\r\ngoto for the cleanup purposes instead of the nested ifs."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/795d9c05ad2670ae2f1d9b0353fd9d398688db99", "message": "Fix mismatch between new and free in numa.cpp (#15870)\n\n* Fix mismatch between new and free in numa.cpp\r\n\r\nOne of the allocations in the numa.cpp uses new to allocate an array,\r\nbut it incorrectly uses free to free the memory. This change fixes it."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/8b8b3b95adada2a9cb2b00876c6d11ef3e4438f7", "message": "Fix Android build (#15868)\n\nThere were the following issues:\r\n* The current versions of packages available at the termux site were obsolete.\r\n* The libintl.h was removed from the Android SDK, so the dgettext and bindtextdomain\r\n  are not available. But they were dummy implementations before anyways, so we can remove\r\n  their usage on Android.\r\n* The detection of the ucol_setMaxVariable needs to be done using the\r\n  check_cxx_symbol_exists instead of check_symbol_exists, since on Android, the\r\n  ICU libraries now depend on C++ runtime.\r\n* The SIZE_T_MAX is already defined in Android headers, so the definition in cgroup.cpp was\r\n  colliding with it.\r\n* The pthread_condattr_setclock detection was using pthread library, but on Android, it is\r\n  located in the \"c\" library instead. So it was not being detected."}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15521", "title": "Cleanup Alpine CI", "body": "Remove unnecessary parameters that were an artefact of copying the\r\noriginals of these files from corefx and make the alpine groovy file use\r\nAGroup instead of hardcoded x64 to make it future proof.", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72563072", "body": "It looks good to me too\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72563072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72645652", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72645652/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72741319", "body": "We used to have the problem with the llvm-ar not being found by the cmake at the beginning, but it was mitigated by adding the -D_CMAKE_TOOLCHAIN_SUFFIX=-3.5 option to the cmake command line. \nThe problem was that there was no llvm-ar, but only llvm-ar-3.5 installed after we've installed LLVM package on the Ubuntu 14.04 that we use for our development.\nBtw, are you using the gen-buildsys-clang.sh to run cmake?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72741319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72742290", "body": "@xyziemba LLVM / clang 3.5 are currently the only supported one\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72742290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72744546", "body": "\"which llvm-ar\" doesn't show anything on my Ubuntu 14.04 with LLVM 3.5 installed. There is no llvm-ar on the system, just llvm-ar-3.5.\nI've tried your change and it breaks the build on my Ubuntu due to this. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72744546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72746591", "body": "Yes, all of them have the suffix except of the llvm-clang. The package we install on Linux is called llvm-3.5\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72746591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72747495", "body": "So the package that you have installed is called just llvm? That one on Ubuntu contains an old version (3.4.0-ubuntu1).\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72747495/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72755338", "body": "It works fine on my Ubuntu and the change looks good to me. Thank you very much for fixing the issue!\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72755338/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72756771", "body": "@sergeyk @jkotas Could you please take a look as well?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72756771/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72894718", "body": "We also use cmake generator expressions like in the following example:\nset_property(DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$CONFIG:RELWITHDEBINFO:${Definition}>)\nI wonder if a differently cased build type specified via the cmake command line would still work correctly with these. Please let me check that before merging.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72894718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72929762", "body": "Ok, cmake doc says the generator expressions uses case insensitive comparison, so there is no problem in that.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72929762/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72947369", "body": "This is strange, the libcoreclr.so should load fine. I've seen people from the community reporting that in the GIT forums - they get ExecuteAssembly failed - status: 0x80004005, which means that the libcoreclr.so was loaded successfully. The CHAIN_SUCCESS_COUNTER resides in the src\\vm\\amd64\\virtualcallstubamd64.S, so I wonder if it is possible that these files are not being assembled / added to the cee_wks library. \nCould you please try to modify the CMakeLists.txt in src/vm folder by adding \nmessage(\"Assembler files: ${VM_SOURCES_WKS_AMD64_ASM}\") \nbefore the add_subdirectory(dac) by the end of the file and run make to see what cmake displays? (cmake will be automatically run by make if there is a change in a CMakeLists.txt)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72947369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73015205", "body": "@pgavling The g_GCShadow is not a BYTE, but a BYTE\\* (see gccommon.cpp), so the cmp instruction change is not correct. It should be QWORD PTR.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73015205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73015341", "body": "@pgavlin Sorry for the typo in your GIT alias\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73015341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73048195", "body": "I understand it looks strange, but ASSERT in the PAL is not checking any condition, but unconditionally asserting and printing the parameter message. See src\\pal\\src\\include\\pal\\dbgmsg.h@368.\nTo assert on a condition, there are _ASSERT, _ASSERTE and _ASSERT_MSG macros.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73048195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73061715", "body": "Regarding the sxs.cpp, it is a developer's error to call the function on a wrong thread. As such, it should be caught during debugging and fixed. Or maybe the PAL data structures got into an inconsistent state due to a bug in the PAL. Even if we returned an error status here, there would be no reasonable way for the developer to recover from that - other than reporting an error or asserting. Trying to handle it somehow would lead to a problem few steps further when another call would expect a correct state of the system.\nAs for the SHMAddNamedObject in the shmemory.cpp, it is the same case. I also don't see a reasonable way to recover. Either the developer has called the method with an invalid parameter or the consistency of the PAL data structures was compromised. If we returned an error status and the developer wanted to handle that - what could he / she do other than fail here? \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73061715/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/9785420", "body": "I'd put this ifdef out of the function so that either the WinContextToUnwindContext or WinContextToUnwindCursor are compiled.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9785420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9785430", "body": "This one should be named XXXXContext, right? Based on its usage below ...\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9785430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9785517", "body": "There is a bug here - Setting SP to the value of winContext->Rip\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9785517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/12102736", "body": "I believe you cannot use the conditional blx in the middle of the conditional block, the ARM Architecture reference manual says:\n\n> Instructions that can complete their normal execution by branching are only permitted in an IT block as its\n> last instruction, and so always result in ITSTATE advancing to normal execution.\n\nThe problem is that after returning from the blx, the ITSTATE would be already cleared.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/12102736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/12102844", "body": "It looks like we can actually use platform independent __debugbreak() since we are compiling with `-fms-extensions` option.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/12102844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/12108998", "body": "The flags will likely be destroyed by the memcpy, so it seems this would not work.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/12108998/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/12109095", "body": "It seems like it would be cleaner to use GetLogicalProcessorCacheSizeFromOS in both cases and `#define` GetLogicalProcessorCacheSizeFromOS  as PAL_GetLogicalProcessorCacheSizeFromOS in pal.h.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/12109095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/12109529", "body": "The it eq is now not necessary anymore. There is direct encoding for beq in the thumb instruction set.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/12109529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/12109589", "body": "Can you please wrap the label in LOCAL_LABEL? In both the invocation and definition. Or use a numeric label. I'm not sure if that's the same for ARM, but for amd64, GDB shows the label as the current function instead of the actual function if the current PC is after the label.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/12109589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/12457899", "body": "@jkotas You are right. The CorInfoTypeIsFloatingPoint returns true for both double and float.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/12457899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/12457906", "body": "But it looks like the original condition was wrong too. It should compare to CORINFO_TYPE_FLOAT, not ELEMENT_TYPE_R4\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/12457906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/18043643", "body": "Can we use this instead?\n\n``` C#\nVolatile.Write(ref freeSegment, Interlocked.Exchange(ref hazardSegment, tail));\n```\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/18043643/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/18932088", "body": "A nit - could you please move this line to the place where we have all the others like this? The block starts at line 5713.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/18932088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/19920019", "body": "It should say \"on Unix\" instead of \"Linux Ubuntu\"", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/19920019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/19920062", "body": "The table formatting is broken (look at the file here in the view mode). It seems that the problem is that you cannot have two lines in the table header.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/19920062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20194823", "body": "Maybe you've missed that in my previous comment. There is no need to save ESI and EDI. They are not argument registers. Only ECX and EDX are. And we should name the offsets to indicate that we are storing the argument registers in there, like we do on AMD64.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20194823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20497958", "body": "This code should only be called for managed code, so there is no need to make this check.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20497958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20498040", "body": "This is not correct. You need to get the rd.pXXX from the ContextPointers, instead of setting them to  the addresses of the registers in the ContextRecord. And after the UnwindStackFrame call, you need to set all the registers in the ContextRecord to the values of dereferenced rd.pXXX and update the ContextPointers to the values from rd.pXXX.\r\nYou need to do that only for the callee saved registers, pEbx, pEsi, pEdi and pEbp. No other pointers are touched by the UnwindStackFrame.\r\nBasically, the ContextRecord contains the values of the registers and the ContextPointers contains pointers to stack locations where the related callee saved registers are pushed when saving the registers. The ContextPointers are initialized to point to the ContextRecord members at the beginning of the unwinding, but as it walks through frames, the context pointers are updated whenever there is a pushed callee saved register in the frame it was processing. And the context pointers need to point to that location until another push of the same register is encountered at another stack frame and the context pointer is updated.\r\n\r\nThe way you did it, GC would never know where a callee saved register was saved and so it would miss a reference in a register.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20498040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20498044", "body": "It would be interesting to see the call stack when it happened. That would explain how it got there with native frame. I assume we are missing some check upstream.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20498044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20500517", "body": "The test for ContextPointers != NULL can be done just once instead of for each register.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20500517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20500956", "body": "I have just realized that on contrary to what I've said before, it is not necessarily true that the ContextPointers are always initialized to point into the ContextRecord members. I think that in some cases, they can be NULL. So\r\nif the rd.pEbp points to the ContextRecord->Ebp now, we should not set the ContextPointers->Ebp, since it means that it was not updated by the unwinder and the ContextPointer should stay untouched.\r\nTo avoid specific check for Ebp here, you can just change the assignment in the macro to \r\nif (rd.p##reg != &(ContextRecord->reg)) ContextPointers->reg = rd.p##reg;", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20500956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20501165", "body": "This was correct, there is no need to change this place. My comment was on setting the ContextPointers->reg.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20501165/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20630011", "body": "I would recommend removing the _getw and _putw completely including the corresponding tests instead. They are not used anywhere. The PAL still contains some historical stuff that I am trying to remove bit by bit when I have a spare time.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20630011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20634731", "body": "You'll need to use ${PTHREAD_LIBRARY}", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20634731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20667932", "body": "What is the \"z\" in the formatting string? I have not found such character in MSDN printf format description doc.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20667932/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20668279", "body": "This uses our implementation of string formatting in PAL, not the unix one. And I don't think we support this formatting character. That's why I was referring to the MSDN doc, since our string formatting mimics the windows one.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20668279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20958920", "body": "@jkotas this would not work. I need to create the artificial red zone below the stack frame where the exception has occured. That is done by setting the .cfi_def_cfa_offset to 136 or 144 above the current SP (based on the alignment) and the instruction only allows constant offset. This makes the RSP after the unwind to have the value it had at the exception point. \r\nHowever, after thinking about other options here, I have figured out a way that works without the explicit offset in the code. I can use `.cfi_register rsp, rbx` to tell the unwinder that rsp should be restored from the rbx. Then I set the rbx in the context to the rsp at the failure point and the unwinder can do the right thing.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20958920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/21800938", "body": "@wateret could you please explain this change to me? There seem to be places in the JIT code where it checks for some specific values of this offset, so maybe that could be the cause of the issue you are seeing.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/21800938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/21817768", "body": "This preexisting code is very strange. I would expect this loop to increment `i` by `sizeof(void*)` instead of 1 or to see `(i*sizeof(void*))` added to the pPendingArgFirst. A stack argument cannot be an an address that's not aligned to the `sizeof(void*)`. @jkotas am I missing something here? ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/21817768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/21817804", "body": "@wateret thank you for the details, it makes sense. Moreover, using the offset instead of offset / 4 would result in less effective encoding of the GC info. Looking at the code, I can see that the places that I've seen checking for specific values of the offset before were actually checking if the offset can be encoded using the small encoding or not.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/21817804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/21817998", "body": "@wateret why is this different? I was thinking about it and I cannot see a reason why the x86 with FEATURE_FIXED_OUT_ARGS should be handled differently.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/21817998/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/21818264", "body": "@wateret oh, I am sorry, I have missed that.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/21818264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/21833911", "body": "@wateret and did reverting it break anything else? In your previous comment, you've said you think it didn't work without this change.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/21833911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/21834009", "body": " A nit - could you please name it GetVirtualPageSize? We use such naming convention at many places.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/21834009/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/21836132", "body": "@wateret that makes sense. Can you please share the list of tests that fail with this change and don't fail with only @seanshpark's commits?", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/21836132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/22353879", "body": "I would prefer the convention that I've suggested and that's already used for x86 - have defines ARGUMENT_kREG1 and ARGUMENT_kREG2 and define them here: https://github.com/dotnet/coreclr/blob/master/src/vm/amd64/cgencpu.h#L263-L269\r\nI don't see a benefit in extracting them from an array at runtime.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/22353879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/23263911", "body": "@cydhaselton, the symbol to detect clang is `__clang__`, not  `__CLANG__`", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/23263911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/23308058", "body": "This doesn't seem correct.  It generates an empty string instead of a string containing character `0`.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/23308058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/23309573", "body": "Well, this is what the consumer of the `_ecvt` the DoubleToNumber function foes, but the `_ecvt` itself is supposed to generate the `0` character there. Or it should not be named ecvt.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/23309573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/23312762", "body": "The DoubleToNumber is just a thin wrapper around the ecvt and ecvt is not used anywhere else, so maybe we can just move all the code into this function.\r\nBut if we go with the renaming of ecvt, Let's name it DoubleToNumberInternal instead of DoubleToNumber_Internal, that's the convention we use elsewhere. Or use \"Worker\" suffix instead of \"Internal\", that's even more widespread.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/23312762/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/26188887", "body": "The `#ifndef FEATURE_PAL` is the right define to use. We use this ifdef all over the codebase to differentiate between windows and non-windows code.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/26188887/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/31681536", "body": "What was the reason for creating the cpp subfolder in the src/pal/inc/rt?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/31681536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/34193283", "body": "We are. Anything non-windows will use the PAL. So I think it is fine to define it across the board.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/34193283/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/38988287", "body": "This won't work as you expect for generating VS projects on Windows or any other multi-target generator. You cannot test for the build type in the CMakeLists.txt files, since the CMake passes through the CMakeLists.txt just once for all the build types.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/38988287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/38989767", "body": "The stuff we already have in differentiates between windows and Unix, considering windows multi-target and Unix single-target. So it behaves correctly in both cases.\nWe should actually modify that at some point to make it work with multi-target generators on Unix as well, but it is a low prio at this moment.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/38989767/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/38991258", "body": "I wonder if the -fPIC really needs to be added here. We already set it for all libraries we build.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/38991258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/38991415", "body": "I can see now that we enable the coverage builds for Unix only now. Given the fact that we consider Unix builds to be always using single-target generators, I would suggest moving the check for the build type inside of the `if(CLR_CMAKE_PLATFORM_UNIX)` below. That would fix my concern.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/38991415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/39082535", "body": "@Sridhar-MS What target is being linked when you get the error?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/39082535/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/39083172", "body": "@Sridhar-MS One more nit - the add_definitions is intended to be used to add definitions (-Dxxxx), although it works for general options too. For the general options, I'd prefer using the `add_compile_options` instead. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/39083172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/39090905", "body": "Ok, thanks. So the compilation of the libcorguids.a with code coverage adds a dependency that makes it necessary to be built with the -fPIC. Could you please try to add `add_compile_options(-fPIC)` to `src\\inc\\CMakeLists.txt` before the `endif(WIN32)`? It would be nice to fix the single place where we were missing the option instead of adding it globally.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/39090905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/39092393", "body": "No, before, since the endif(WIN32) is after an else branch, so the code before it is for Unix\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/39092393/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/39950162", "body": "I'd prefer using \"OR\" in the condition instead of haveing two ifs for the same definition.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/39950162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/42914008", "body": "A nit: I would prefer the message to be up together with the other messages printing the detected platform, I would leave just the add_definitions here.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/42914008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/44578157", "body": "I am not sure this is correct. When linking libcoreclrpal.a into e.g. libcoreclr.so, we explicitly include everything (I had to add a linker option to do so in the past), otherwise linker could remove functions that are pinvoked from mscorlib, but not called from anywhere else. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/44578157/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/44579275", "body": "Are you sure we need to set the -fPIC option globally? We set it in the specific CMakeLists.txt for libraries where it is needed, but not everywhere. \nAlso, the -fno-omit-frame-pointer is already set further in this CMakeLists.txt (both for release and debug builds), but it is true it is not set for the build of stuff that's not using PAL, inclusing PAL itself (all the stuff around line 292 below), so it might be good to move that setting up and keeping the option for both release and debug builds.\nAlso, it is not clear to me why would the -fPIC /  -fno-omit-frame-pointer be in the CLR_SANITIZE_CXX_FLAGS when they are not specific to the sanitize. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/44579275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/44579830", "body": "Please do not lower this limit. It is better to see as much errors as possible during the build.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/44579830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/44580389", "body": "The optimization flag should not be set here. This flags is set in `src\\pal\\tools\\clang-compiler-override.txt` to -O0. Would the sanitizer have problem with it? It is also not clear to me which one would the compiler use if you add the -O1 here.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/44580389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/44598166", "body": "Is this option necessary for the sanitizer?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/44598166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/44606193", "body": "The point to use -O0 was to make sure the debug build is easily debuggable without surprises caused by optimizations.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/44606193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/44606618", "body": "Unfortunatelly, it is not the case. Even if you add a function as an export, the linker can happily eliminate it if it comes from a static library. I've bumped into this problem in the past, that was the primary reason why the hosting APIs in the past when they were just a thin wrapper around the COM ones needed to be in a separate unixinterface.cpp.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/44606618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/45949482", "body": "We should not hardcode the cl.exe. What is the problem with using the CMAKE_CXX_COMPILER?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/45949482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/45949838", "body": "I know that this comment was there before, but it sounds weird. Could you please change it to \"Enable edit and continue\"? We don't need to enumerate the platforms, the surrounding ifs are descriptive enough.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/45949838/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/50368481", "body": "Could you please remove this commented out line? I have forgotten to do so, it was just for debugging purposes.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/50368481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/52042404", "body": "I have originally considered that, since it is not necessary - these variables are not defined at all and so if anyone used those, they would behave as if they were empty. But I have decided to keep them in just as a place where if someone needed to modify them, there was already a place ready for that.\nDoes it make sense?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/52042404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/53100009", "body": "I have not found an option to specify type in the cmake doc. I can only see that you can specify type on cached variables, but the syntax is different.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/53100009/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59464907", "body": "The CLR_DIR is not needed here, since it is the current directory.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59464907/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59845905", "body": "The comment here and similar ones below seem unnecessary - I believe the variable names are selft explanatory enough\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59845905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59845978", "body": "The comment here seems unnecessary - I believe the variable name is self explanatory enough\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59845978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59846142", "body": "The comments here also doesn't seem to add value\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59846142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59846360", "body": "Could you please eliminate the unnecessary shuffling of lines in this file? It makes the diff difficult to read (except for the policy check that makes sense to be at the top of the file.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59846360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59945103", "body": "I didn't mean the large comment, I agree that that one is important. I meant the small comments when you say e.g. \"host arch is arm\" and two lines later, you have set(CLR_CMAKE_HOST_ARCH \"arm\") which basically says the same.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59945103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59945802", "body": "Maybe we are talking about different comment. I have meant the \"# amd64 arch and unix OS\", \"# arm arch and unix OS\" and \" # arm64 arch and unix OS\". These were added by your change\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59945802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59947032", "body": "See the following commit for the details of why it was needed:\nhttps://github.com/ellismg/coreclr/commit/abb7b0ecfd7b7c589b2e9d775da615416343a19f\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59947032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59948402", "body": "Typo - the actual name is compileoptions.cmake (here you have compile**r**options.cmake)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59948402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59948574", "body": "Typo: shoul -> should (plus the compile**r**options.cmake again)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59948574/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59948945", "body": "Actually, you are right. Looking at the view of the file instead of the diff was a much better way and now I can see the point in the reordering. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59948945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/60316699", "body": "I think we should generate the version file to the CMAKE_BINARY_DIR directly, not one level below. All generated files for a configuration (release, debug, ...) should be contained to the CMAKE_BINARY_DIR.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/60316699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/81642524", "body": "Good point. I have assumed file read just returns an empty variable, but it actually fails instead. So I am adding a check for the file existence.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/81642524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/93407424", "body": "I believe that at the moment, 64 bit cross components build will not work for 32 bit target and so the x86 host is the only option for target ARM.  See the comment from @AndyAyersMS here:\r\nhttps://github.com/dotnet/corert/issues/2381#issuecomment-268010021", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/93407424/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/96553750", "body": "Moving the definitions here would cause problems for PAL build. They were intentionally included after the PAL directories. Can you build the src/gc/pal after the CoreCLR pal  instead?", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/96553750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/96762360", "body": "Why does it need to be built before the CoreCLR PAL? Looks like there is some problem elsewhere. I don't see a reason for this ordering.  The defined symbols, compiler setting etc should be the same whether you build it before or after the CoreCLR PAL.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/96762360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/100769726", "body": "Why do we set this policy when we don't use the BYPRODUCTS option anywhere?", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/100769726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/101475344", "body": "I don't like using env vars for configuring cmake options. This should be done by adding a new option to the build.cmd that will append extra cmake argument (`-DCLR_CMAKE_WIN32_FORCE_STATIC_LINK=1`).\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/101475344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/107620964", "body": "I prefer not to use env vars as switches controlling cmake scripts. Especially here where we alredy have a similar switch passed by CLR_CROSS_COMPONENTS_BUILD cmake variable. \r\nCould you please change it to use CLR_CROSSCOMPILE cmake variable and set / pass it to cmake in `gen-buildsys-clang.sh` similarly to how we set / pass the CLR_CROSS_COMPONENTS_BUILD?", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/107620964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/119730484", "body": "Can you please name the option CLR_CMAKE_WARNINGS_ARE_ERRORS instead? Besides that option above that I've not noticed during past PRs, we don't use options starting with CMAKE_, since that is reserved for variables of the cmake itself. And if you could also rename the CMAKE_ENABLE_CODE_COVERAGE, it would be awesome.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/119730484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/120764558", "body": "@ellismg there is one additional change #12106 that modifies the CMAKE_ENABLE_CODE_COVERAGE to CLR_CMAKE_ENABLE_CODE_COVERAGE which would be nice to pick with this. ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/120764558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/138664197", "body": "@jkotas I think we should add a distro with PAX enabled to our testing matrix. ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/138664197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/140375112", "body": "I didn't need to change this on my FreeBSD 11.0, when I run \"python --version\", it prints 2.7.13. I wonder what is different on your instance that causes this to be required. But the change doesn't hurt and can possibly help on some new platforms.\r\nBtw, I have:\r\n```\r\n$ which python\r\n/usr/local/bin/python\r\n$ ls -la /usr/local/bin/python\r\nlrwxr-xr-x  1 root  wheel  7 Feb 25  2017 /usr/local/bin/python -> python2\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/140375112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/140440211", "body": "Just FYI, I have installed the python-2.7_3,2 package using the pkg tool, that one includes the link I've mentioned above. ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/140440211/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/148030372", "body": "A nit - prallelism -> parallelism", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/148030372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/148030586", "body": "I guess this was just your debugging message, can you please remove it?", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/148030586/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/148841614", "body": "With your latest change, you don't use the property for anything - you just fill it in. So I am a bit confused about this change. ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/148841614/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/148846038", "body": "@4creators \r\n> This may be very useful in optimization of project build graph.\r\n\r\nI am not sure how we would do that. The build orchestration is fully in the hands of cmake. The difference in the build time between Windows and Linux is likely due to the difference between the performance of the compilers and the underlying build tools (make vs msbuild). \r\n\r\nSo I think that we should remove the added property, the related changes in the _add_xxx functions and also the _add_custom_target function. As for the new usages of the _add_library and _add_executable wrappers that you've added and the related additions to the CLR_CROSS_COMPONENTS_LIST, I would keep these.\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/148846038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59461907", "body": "Please use only lowercase letters for filenames. That is a convention that we have picked for coreclr at the beginning.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59461907/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/104884615", "body": "@parjong why doesn't it sound right to you?", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/104884615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/104893033", "body": "No, CFA is the SP before the call is made, so caller SP is CFA. ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/104893033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/104896980", "body": "Yes, it means that. What was your former understanding?", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/104896980/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "et1975": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/14613", "title": "dotnet process crash on OSX", "body": "While trying to compile a SDK 2.0 console project, targeting net462 the process crashes with this:\r\n\r\n```\r\nProcess:               dotnet [27481]\r\nPath:                  /usr/local/share/dotnet/dotnet\r\nIdentifier:            dotnet\r\nVersion:               0\r\nCode Type:             X86-64 (Native)\r\nParent Process:        bash [27477]\r\nResponsible:           Terminal [314]\r\nUser ID:               501\r\n\r\nDate/Time:             2017-10-19 11:41:34.647 -0400\r\nOS Version:            Mac OS X 10.12.6 (16G29)\r\nReport Version:        12\r\nAnonymous UUID:        98EDBA7A-DB2D-DF7C-3856-B99944FFF87F\r\n\r\nSleep/Wake UUID:       DFA79EED-2C1B-4BC9-BC02-BA1066DE6E3E\r\n\r\nTime Awake Since Boot: 610000 seconds\r\nTime Since Wake:       13000 seconds\r\n\r\nSystem Integrity Protection: enabled\r\n\r\nCrashed Thread:        6\r\n\r\nException Type:        EXC_CRASH (SIGABRT)\r\nException Codes:       0x0000000000000000, 0x0000000000000000\r\n\r\nApplication Specific Information:\r\nabort() called\r\n\r\nThread 0:: Dispatch queue: com.apple.main-thread\r\n0   libcoreclr.dylib              \t0x000000010766bccc PAL_VirtualUnwind + 60\r\n1   libcoreclr.dylib              \t0x00000001079778ef LazyMachState::unwindLazyState(LazyMachState*, MachState*, unsigned int, int, HostCallPreference) + 271\r\n2   libcoreclr.dylib              \t0x00000001077b0d3e HelperMethodFrame::InsureInit(bool, MachState*, HostCallPreference) + 190\r\n3   libcoreclr.dylib              \t0x00000001077b0c72 HelperMethodFrame::GetFunction() + 18\r\n4   libcoreclr.dylib              \t0x00000001078183de StackFrameIterator::ProcessCurrentFrame() + 606\r\n5   libcoreclr.dylib              \t0x00000001078199bd StackFrameIterator::NextRaw() + 1629\r\n6   libcoreclr.dylib              \t0x0000000107818f68 StackFrameIterator::Filter() + 2872\r\n7   libcoreclr.dylib              \t0x0000000107817bab StackFrameIterator::Init(Thread*, Frame*, REGDISPLAY*, unsigned int) + 427\r\n8   libcoreclr.dylib              \t0x0000000107817805 Thread::StackWalkFramesEx(REGDISPLAY*, StackWalkAction (*)(CrawlFrame*, void*), void*, unsigned int, Frame*) + 389\r\n9   libcoreclr.dylib              \t0x0000000107817d2a Thread::StackWalkFrames(StackWalkAction (*)(CrawlFrame*, void*), void*, unsigned int, Frame*) + 218\r\n10  libcoreclr.dylib              \t0x0000000107723306 SystemDomain::GetCallersModule(StackCrawlMark*, AppDomain**) + 134\r\n11  libcoreclr.dylib              \t0x00000001077233e9 SystemDomain::GetCallersAssembly(StackCrawlMark*, AppDomain**) + 9\r\n12  libcoreclr.dylib              \t0x000000010785e138 AssemblyNative::Load(AssemblyNameBaseObject*, StringObject*, Object*, AssemblyBaseObject*, StackCrawlMark*, ICLRPrivBinder*, bool, bool, bool, long) + 536\r\n13  ???                           \t0x000000010e08214e 0 + 4530381134\r\n14  ???                           \t0x000000010e0aeb88 0 + 4530563976\r\n15  ???                           \t0x000000010e10d4e4 0 + 4530951396\r\n16  ???                           \t0x000000010e10d440 0 + 4530951232\r\n17  ???                           \t0x000000010e10d27c 0 + 4530950780\r\n18  libcoreclr.dylib              \t0x000000010797b911 CallDescrWorkerInternal + 124\r\n19  libcoreclr.dylib              \t0x000000010786b7ed MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 941\r\n20  libcoreclr.dylib              \t0x00000001077346fd RuntimeInvokeHostAssemblyResolver(long, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::AssemblyName*, ICLRPrivAssembly**) + 637\r\n21  libcoreclr.dylib              \t0x0000000107a90e16 BINDER_SPACE::AssemblyBinder::BindUsingHostAssemblyResolver(long, BINDER_SPACE::AssemblyName*, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::Assembly**) + 38\r\n22  libcoreclr.dylib              \t0x0000000107a9bf69 CLRPrivBinderAssemblyLoadContext::BindAssemblyByName(IAssemblyName*, ICLRPrivAssembly**) + 329\r\n23  libcoreclr.dylib              \t0x0000000107778049 AssemblySpec::Bind(AppDomain*, int, CoreBindResult*, int, int, StackCrawlMark*) + 1609\r\n24  libcoreclr.dylib              \t0x000000010772b898 AppDomain::BindAssemblySpec(AssemblySpec*, int, int, StackCrawlMark*, AssemblyLoadSecurity*, int) + 424\r\n25  libcoreclr.dylib              \t0x0000000107868067 AssemblySpec::LoadDomainAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 423\r\n26  libcoreclr.dylib              \t0x0000000107867ea9 AssemblySpec::LoadAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 9\r\n27  libcoreclr.dylib              \t0x000000010785e358 AssemblyNative::Load(AssemblyNameBaseObject*, StringObject*, Object*, AssemblyBaseObject*, StackCrawlMark*, ICLRPrivBinder*, bool, bool, bool, long) + 1080\r\n28  ???                           \t0x000000010e08214e 0 + 4530381134\r\n29  ???                           \t0x000000010e0aeb88 0 + 4530563976\r\n30  ???                           \t0x000000010e10d4e4 0 + 4530951396\r\n31  ???                           \t0x000000010e10d440 0 + 4530951232\r\n32  ???                           \t0x000000010e10d27c 0 + 4530950780\r\n33  libcoreclr.dylib              \t0x000000010797b911 CallDescrWorkerInternal + 124\r\n34  libcoreclr.dylib              \t0x000000010786b7ed MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 941\r\n35  libcoreclr.dylib              \t0x00000001077346fd RuntimeInvokeHostAssemblyResolver(long, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::AssemblyName*, ICLRPrivAssembly**) + 637\r\n36  libcoreclr.dylib              \t0x0000000107a90e16 BINDER_SPACE::AssemblyBinder::BindUsingHostAssemblyResolver(long, BINDER_SPACE::AssemblyName*, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::Assembly**) + 38\r\n37  libcoreclr.dylib              \t0x0000000107a9bf69 CLRPrivBinderAssemblyLoadContext::BindAssemblyByName(IAssemblyName*, ICLRPrivAssembly**) + 329\r\n38  libcoreclr.dylib              \t0x0000000107778049 AssemblySpec::Bind(AppDomain*, int, CoreBindResult*, int, int, StackCrawlMark*) + 1609\r\n39  libcoreclr.dylib              \t0x000000010772b898 AppDomain::BindAssemblySpec(AssemblySpec*, int, int, StackCrawlMark*, AssemblyLoadSecurity*, int) + 424\r\n40  libcoreclr.dylib              \t0x0000000107868067 AssemblySpec::LoadDomainAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 423\r\n41  libcoreclr.dylib              \t0x0000000107867ea9 AssemblySpec::LoadAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 9\r\n42  libcoreclr.dylib              \t0x000000010785e358 AssemblyNative::Load(AssemblyNameBaseObject*, StringObject*, Object*, AssemblyBaseObject*, StackCrawlMark*, ICLRPrivBinder*, bool, bool, bool, long) + 1080\r\n43  ???                           \t0x000000010e08214e 0 + 4530381134\r\n44  ???                           \t0x000000010e0aeb88 0 + 4530563976\r\n45  ???                           \t0x000000010e10d4e4 0 + 4530951396\r\n46  ???                           \t0x000000010e10d440 0 + 4530951232\r\n47  ???                           \t0x000000010e10d27c 0 + 4530950780\r\n48  libcoreclr.dylib              \t0x000000010797b911 CallDescrWorkerInternal + 124\r\n49  libcoreclr.dylib              \t0x000000010786b7ed MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 941\r\n50  libcoreclr.dylib              \t0x00000001077346fd RuntimeInvokeHostAssemblyResolver(long, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::AssemblyName*, ICLRPrivAssembly**) + 637\r\n51  libcoreclr.dylib              \t0x0000000107a90e16 BINDER_SPACE::AssemblyBinder::BindUsingHostAssemblyResolver(long, BINDER_SPACE::AssemblyName*, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::Assembly**) + 38\r\n52  libcoreclr.dylib              \t0x0000000107a9bf69 CLRPrivBinderAssemblyLoadContext::BindAssemblyByName(IAssemblyName*, ICLRPrivAssembly**) + 329\r\n53  libcoreclr.dylib              \t0x0000000107778049 AssemblySpec::Bind(AppDomain*, int, CoreBindResult*, int, int, StackCrawlMark*) + 1609\r\n54  libcoreclr.dylib              \t0x000000010772b898 AppDomain::BindAssemblySpec(AssemblySpec*, int, int, StackCrawlMark*, AssemblyLoadSecurity*, int) + 424\r\n55  libcoreclr.dylib              \t0x0000000107868067 AssemblySpec::LoadDomainAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 423\r\n56  libcoreclr.dylib              \t0x0000000107867ea9 AssemblySpec::LoadAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 9\r\n57  libcoreclr.dylib              \t0x000000010785e358 AssemblyNative::Load(AssemblyNameBaseObject*, StringObject*, Object*, AssemblyBaseObject*, StackCrawlMark*, ICLRPrivBinder*, bool, bool, bool, long) + 1080\r\n58  ???                           \t0x000000010e08214e 0 + 4530381134\r\n59  ???                           \t0x000000010e0aeb88 0 + 4530563976\r\n60  ???                           \t0x000000010e10d4e4 0 + 4530951396\r\n61  ???                           \t0x000000010e10d440 0 + 4530951232\r\n62  ???                           \t0x000000010e10d27c 0 + 4530950780\r\n63  libcoreclr.dylib              \t0x000000010797b911 CallDescrWorkerInternal + 124\r\n64  libcoreclr.dylib              \t0x000000010786b7ed MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 941\r\n65  libcoreclr.dylib              \t0x00000001077346fd RuntimeInvokeHostAssemblyResolver(long, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::AssemblyName*, ICLRPrivAssembly**) + 637\r\n66  libcoreclr.dylib              \t0x0000000107a90e16 BINDER_SPACE::AssemblyBinder::BindUsingHostAssemblyResolver(long, BINDER_SPACE::AssemblyName*, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::Assembly**) + 38\r\n67  libcoreclr.dylib              \t0x0000000107a9bf69 CLRPrivBinderAssemblyLoadContext::BindAssemblyByName(IAssemblyName*, ICLRPrivAssembly**) + 329\r\n68  libcoreclr.dylib              \t0x0000000107778049 AssemblySpec::Bind(AppDomain*, int, CoreBindResult*, int, int, StackCrawlMark*) + 1609\r\n69  libcoreclr.dylib              \t0x000000010772b898 AppDomain::BindAssemblySpec(AssemblySpec*, int, int, StackCrawlMark*, AssemblyLoadSecurity*, int) + 424\r\n70  libcoreclr.dylib              \t0x0000000107868067 AssemblySpec::LoadDomainAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 423\r\n71  libcoreclr.dylib              \t0x0000000107867ea9 AssemblySpec::LoadAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 9\r\n72  libcoreclr.dylib              \t0x000000010785e358 AssemblyNative::Load(AssemblyNameBaseObject*, StringObject*, Object*, AssemblyBaseObject*, StackCrawlMark*, ICLRPrivBinder*, bool, bool, bool, long) + 1080\r\n73  ???                           \t0x000000010e08214e 0 + 4530381134\r\n74  ???                           \t0x000000010e0aeb88 0 + 4530563976\r\n75  ???                           \t0x000000010e10d4e4 0 + 4530951396\r\n76  ???                           \t0x000000010e10d440 0 + 4530951232\r\n77  ???                           \t0x000000010e10d27c 0 + 4530950780\r\n78  libcoreclr.dylib              \t0x000000010797b911 CallDescrWorkerInternal + 124\r\n79  libcoreclr.dylib              \t0x000000010786b7ed MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 941\r\n80  libcoreclr.dylib              \t0x00000001077346fd RuntimeInvokeHostAssemblyResolver(long, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::AssemblyName*, ICLRPrivAssembly**) + 637\r\n81  libcoreclr.dylib              \t0x0000000107a90e16 BINDER_SPACE::AssemblyBinder::BindUsingHostAssemblyResolver(long, BINDER_SPACE::AssemblyName*, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::Assembly**) + 38\r\n82  libcoreclr.dylib              \t0x0000000107a9bf69 CLRPrivBinderAssemblyLoadContext::BindAssemblyByName(IAssemblyName*, ICLRPrivAssembly**) + 329\r\n83  libcoreclr.dylib              \t0x0000000107778049 AssemblySpec::Bind(AppDomain*, int, CoreBindResult*, int, int, StackCrawlMark*) + 1609\r\n84  libcoreclr.dylib              \t0x000000010772b898 AppDomain::BindAssemblySpec(AssemblySpec*, int, int, StackCrawlMark*, AssemblyLoadSecurity*, int) + 424\r\n85  libcoreclr.dylib              \t0x0000000107868067 AssemblySpec::LoadDomainAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 423\r\n86  libcoreclr.dylib              \t0x0000000107867ea9 AssemblySpec::LoadAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 9\r\n87  libcoreclr.dylib              \t0x000000010785e358 AssemblyNative::Load(AssemblyNameBaseObject*, StringObject*, Object*, AssemblyBaseObject*, StackCrawlMark*, ICLRPrivBinder*, bool, bool, bool, long) + 1080\r\n88  ???                           \t0x000000010e08214e 0 + 4530381134\r\n89  ???                           \t0x000000010e0aeb88 0 + 4530563976\r\n90  ???                           \t0x000000010e10d4e4 0 + 4530951396\r\n91  ???                           \t0x000000010e10d440 0 + 4530951232\r\n92  ???                           \t0x000000010e10d27c 0 + 4530950780\r\n93  libcoreclr.dylib              \t0x000000010797b911 CallDescrWorkerInternal + 124\r\n94  libcoreclr.dylib              \t0x000000010786b7ed MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 941\r\n95  libcoreclr.dylib              \t0x00000001077346fd RuntimeInvokeHostAssemblyResolver(long, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::AssemblyName*, ICLRPrivAssembly**) + 637\r\n96  libcoreclr.dylib              \t0x0000000107a90e16 BINDER_SPACE::AssemblyBinder::BindUsingHostAssemblyResolver(long, BINDER_SPACE::AssemblyName*, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::Assembly**) + 38\r\n97  libcoreclr.dylib              \t0x0000000107a9bf69 CLRPrivBinderAssemblyLoadContext::BindAssemblyByName(IAssemblyName*, ICLRPrivAssembly**) + 329\r\n98  libcoreclr.dylib              \t0x0000000107778049 AssemblySpec::Bind(AppDomain*, int, CoreBindResult*, int, int, StackCrawlMark*) + 1609\r\n99  libcoreclr.dylib              \t0x000000010772b898 AppDomain::BindAssemblySpec(AssemblySpec*, int, int, StackCrawlMark*, AssemblyLoadSecurity*, int) + 424\r\n100 libcoreclr.dylib              \t0x0000000107868067 AssemblySpec::LoadDomainAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 423\r\n101 libcoreclr.dylib              \t0x0000000107867ea9 AssemblySpec::LoadAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 9\r\n102 libcoreclr.dylib              \t0x000000010785e358 AssemblyNative::Load(AssemblyNameBaseObject*, StringObject*, Object*, AssemblyBaseObject*, StackCrawlMark*, ICLRPrivBinder*, bool, bool, bool, long) + 1080\r\n103 ???                           \t0x000000010e08214e 0 + 4530381134\r\n104 ???                           \t0x000000010e0aeb88 0 + 4530563976\r\n105 ???                           \t0x000000010e10d4e4 0 + 4530951396\r\n106 ???                           \t0x000000010e10d440 0 + 4530951232\r\n107 ???                           \t0x000000010e10d27c 0 + 4530950780\r\n108 libcoreclr.dylib              \t0x000000010797b911 CallDescrWorkerInternal + 124\r\n109 libcoreclr.dylib              \t0x000000010786b7ed MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 941\r\n110 libcoreclr.dylib              \t0x00000001077346fd RuntimeInvokeHostAssemblyResolver(long, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::AssemblyName*, ICLRPrivAssembly**) + 637\r\n111 libcoreclr.dylib              \t0x0000000107a90e16 BINDER_SPACE::AssemblyBinder::BindUsingHostAssemblyResolver(long, BINDER_SPACE::AssemblyName*, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::Assembly**) + 38\r\n112 libcoreclr.dylib              \t0x0000000107a9bf69 CLRPrivBinderAssemblyLoadContext::BindAssemblyByName(IAssemblyName*, ICLRPrivAssembly**) + 329\r\n113 libcoreclr.dylib              \t0x0000000107778049 AssemblySpec::Bind(AppDomain*, int, CoreBindResult*, int, int, StackCrawlMark*) + 1609\r\n114 libcoreclr.dylib              \t0x000000010772b898 AppDomain::BindAssemblySpec(AssemblySpec*, int, int, StackCrawlMark*, AssemblyLoadSecurity*, int) + 424\r\n115 libcoreclr.dylib              \t0x0000000107868067 AssemblySpec::LoadDomainAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 423\r\n116 libcoreclr.dylib              \t0x0000000107867ea9 AssemblySpec::LoadAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 9\r\n117 libcoreclr.dylib              \t0x000000010785e358 AssemblyNative::Load(AssemblyNameBaseObject*, StringObject*, Object*, AssemblyBaseObject*, StackCrawlMark*, ICLRPrivBinder*, bool, bool, bool, long) + 1080\r\n118 ???                           \t0x000000010e08214e 0 + 4530381134\r\n119 ???                           \t0x000000010e0aeb88 0 + 4530563976\r\n120 ???                           \t0x000000010e10d4e4 0 + 4530951396\r\n121 ???                           \t0x000000010e10d440 0 + 4530951232\r\n122 ???                           \t0x000000010e10d27c 0 + 4530950780\r\n123 libcoreclr.dylib              \t0x000000010797b911 CallDescrWorkerInternal + 124\r\n124 libcoreclr.dylib              \t0x000000010786b7ed MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 941\r\n125 libcoreclr.dylib              \t0x00000001077346fd RuntimeInvokeHostAssemblyResolver(long, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::AssemblyName*, ICLRPrivAssembly**) + 637\r\n126 libcoreclr.dylib              \t0x0000000107a90e16 BINDER_SPACE::AssemblyBinder::BindUsingHostAssemblyResolver(long, BINDER_SPACE::AssemblyName*, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::Assembly**) + 38\r\n127 libcoreclr.dylib              \t0x0000000107a9bf69 CLRPrivBinderAssemblyLoadContext::BindAssemblyByName(IAssemblyName*, ICLRPrivAssembly**) + 329\r\n128 libcoreclr.dylib              \t0x0000000107778049 AssemblySpec::Bind(AppDomain*, int, CoreBindResult*, int, int, StackCrawlMark*) + 1609\r\n129 libcoreclr.dylib              \t0x000000010772b898 AppDomain::BindAssemblySpec(AssemblySpec*, int, int, StackCrawlMark*, AssemblyLoadSecurity*, int) + 424\r\n130 libcoreclr.dylib              \t0x0000000107868067 AssemblySpec::LoadDomainAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 423\r\n131 libcoreclr.dylib              \t0x0000000107867ea9 AssemblySpec::LoadAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 9\r\n132 libcoreclr.dylib              \t0x000000010785e358 AssemblyNative::Load(AssemblyNameBaseObject*, StringObject*, Object*, AssemblyBaseObject*, StackCrawlMark*, ICLRPrivBinder*, bool, bool, bool, long) + 1080\r\n133 ???                           \t0x000000010e08214e 0 + 4530381134\r\n134 ???                           \t0x000000010e0aeb88 0 + 4530563976\r\n135 ???                           \t0x000000010e10d4e4 0 + 4530951396\r\n136 ???                           \t0x000000010e10d440 0 + 4530951232\r\n137 ???                           \t0x000000010e10d27c 0 + 4530950780\r\n138 libcoreclr.dylib              \t0x000000010797b911 CallDescrWorkerInternal + 124\r\n139 libcoreclr.dylib              \t0x000000010786b7ed MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 941\r\n140 libcoreclr.dylib              \t0x00000001077346fd RuntimeInvokeHostAssemblyResolver(long, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::AssemblyName*, ICLRPrivAssembly**) + 637\r\n141 libcoreclr.dylib              \t0x0000000107a90e16 BINDER_SPACE::AssemblyBinder::BindUsingHostAssemblyResolver(long, BINDER_SPACE::AssemblyName*, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::Assembly**) + 38\r\n142 libcoreclr.dylib              \t0x0000000107a9bf69 CLRPrivBinderAssemblyLoadContext::BindAssemblyByName(IAssemblyName*, ICLRPrivAssembly**) + 329\r\n143 libcoreclr.dylib              \t0x0000000107778049 AssemblySpec::Bind(AppDomain*, int, CoreBindResult*, int, int, StackCrawlMark*) + 1609\r\n144 libcoreclr.dylib              \t0x000000010772b898 AppDomain::BindAssemblySpec(AssemblySpec*, int, int, StackCrawlMark*, AssemblyLoadSecurity*, int) + 424\r\n145 libcoreclr.dylib              \t0x0000000107868067 AssemblySpec::LoadDomainAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 423\r\n146 libcoreclr.dylib              \t0x0000000107867ea9 AssemblySpec::LoadAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 9\r\n147 libcoreclr.dylib              \t0x000000010785e358 AssemblyNative::Load(AssemblyNameBaseObject*, StringObject*, Object*, AssemblyBaseObject*, StackCrawlMark*, ICLRPrivBinder*, bool, bool, bool, long) + 1080\r\n148 ???                           \t0x000000010e08214e 0 + 4530381134\r\n149 ???                           \t0x000000010e0aeb88 0 + 4530563976\r\n150 ???                           \t0x000000010e10d4e4 0 + 4530951396\r\n151 ???                           \t0x000000010e10d440 0 + 4530951232\r\n152 ???                           \t0x000000010e10d27c 0 + 4530950780\r\n153 libcoreclr.dylib              \t0x000000010797b911 CallDescrWorkerInternal + 124\r\n154 libcoreclr.dylib              \t0x000000010786b7ed MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 941\r\n155 libcoreclr.dylib              \t0x00000001077346fd RuntimeInvokeHostAssemblyResolver(long, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::AssemblyName*, ICLRPrivAssembly**) + 637\r\n156 libcoreclr.dylib              \t0x0000000107a90e16 BINDER_SPACE::AssemblyBinder::BindUsingHostAssemblyResolver(long, BINDER_SPACE::AssemblyName*, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::Assembly**) + 38\r\n157 libcoreclr.dylib              \t0x0000000107a9bf69 CLRPrivBinderAssemblyLoadContext::BindAssemblyByName(IAssemblyName*, ICLRPrivAssembly**) + 329\r\n158 libcoreclr.dylib              \t0x0000000107778049 AssemblySpec::Bind(AppDomain*, int, CoreBindResult*, int, int, StackCrawlMark*) + 1609\r\n159 libcoreclr.dylib              \t0x000000010772b898 AppDomain::BindAssemblySpec(AssemblySpec*, int, int, StackCrawlMark*, AssemblyLoadSecurity*, int) + 424\r\n160 libcoreclr.dylib              \t0x0000000107868067 AssemblySpec::LoadDomainAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 423\r\n161 libcoreclr.dylib              \t0x0000000107867ea9 AssemblySpec::LoadAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 9\r\n162 libcoreclr.dylib              \t0x000000010785e358 AssemblyNative::Load(AssemblyNameBaseObject*, StringObject*, Object*, AssemblyBaseObject*, StackCrawlMark*, ICLRPrivBinder*, bool, bool, bool, long) + 1080\r\n163 ???                           \t0x000000010e08214e 0 + 4530381134\r\n164 ???                           \t0x000000010e0aeb88 0 + 4530563976\r\n165 ???                           \t0x000000010e10d4e4 0 + 4530951396\r\n166 ???                           \t0x000000010e10d440 0 + 4530951232\r\n167 ???                           \t0x000000010e10d27c 0 + 4530950780\r\n168 libcoreclr.dylib              \t0x000000010797b911 CallDescrWorkerInternal + 124\r\n169 libcoreclr.dylib              \t0x000000010786b7ed MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 941\r\n170 libcoreclr.dylib              \t0x00000001077346fd RuntimeInvokeHostAssemblyResolver(long, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::AssemblyName*, ICLRPrivAssembly**) + 637\r\n171 libcoreclr.dylib              \t0x0000000107a90e16 BINDER_SPACE::AssemblyBinder::BindUsingHostAssemblyResolver(long, BINDER_SPACE::AssemblyName*, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::Assembly**) + 38\r\n172 libcoreclr.dylib              \t0x0000000107a9bf69 CLRPrivBinderAssemblyLoadContext::BindAssemblyByName(IAssemblyName*, ICLRPrivAssembly**) + 329\r\n173 libcoreclr.dylib              \t0x0000000107778049 AssemblySpec::Bind(AppDomain*, int, CoreBindResult*, int, int, StackCrawlMark*) + 1609\r\n174 libcoreclr.dylib              \t0x000000010772b898 AppDomain::BindAssemblySpec(AssemblySpec*, int, int, StackCrawlMark*, AssemblyLoadSecurity*, int) + 424\r\n175 libcoreclr.dylib              \t0x0000000107868067 AssemblySpec::LoadDomainAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 423\r\n176 libcoreclr.dylib              \t0x0000000107867ea9 AssemblySpec::LoadAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 9\r\n177 libcoreclr.dylib              \t0x000000010785e358 AssemblyNative::Load(AssemblyNameBaseObject*, StringObject*, Object*, AssemblyBaseObject*, StackCrawlMark*, ICLRPrivBinder*, bool, bool, bool, long) + 1080\r\n178 ???                           \t0x000000010e08214e 0 + 4530381134\r\n179 ???                           \t0x000000010e0aeb88 0 + 4530563976\r\n180 ???                           \t0x000000010e10d4e4 0 + 4530951396\r\n181 ???                           \t0x000000010e10d440 0 + 4530951232\r\n182 ???                           \t0x000000010e10d27c 0 + 4530950780\r\n183 libcoreclr.dylib              \t0x000000010797b911 CallDescrWorkerInternal + 124\r\n184 libcoreclr.dylib              \t0x000000010786b7ed MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 941\r\n185 libcoreclr.dylib              \t0x00000001077346fd RuntimeInvokeHostAssemblyResolver(long, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::AssemblyName*, ICLRPrivAssembly**) + 637\r\n186 libcoreclr.dylib              \t0x0000000107a90e16 BINDER_SPACE::AssemblyBinder::BindUsingHostAssemblyResolver(long, BINDER_SPACE::AssemblyName*, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::Assembly**) + 38\r\n187 libcoreclr.dylib              \t0x0000000107a9bf69 CLRPrivBinderAssemblyLoadContext::BindAssemblyByName(IAssemblyName*, ICLRPrivAssembly**) + 329\r\n188 libcoreclr.dylib              \t0x0000000107778049 AssemblySpec::Bind(AppDomain*, int, CoreBindResult*, int, int, StackCrawlMark*) + 1609\r\n189 libcoreclr.dylib              \t0x000000010772b898 AppDomain::BindAssemblySpec(AssemblySpec*, int, int, StackCrawlMark*, AssemblyLoadSecurity*, int) + 424\r\n190 libcoreclr.dylib              \t0x0000000107868067 AssemblySpec::LoadDomainAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 423\r\n191 libcoreclr.dylib              \t0x0000000107867ea9 AssemblySpec::LoadAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 9\r\n192 libcoreclr.dylib              \t0x000000010785e358 AssemblyNative::Load(AssemblyNameBaseObject*, StringObject*, Object*, AssemblyBaseObject*, StackCrawlMark*, ICLRPrivBinder*, bool, bool, bool, long) + 1080\r\n193 ???                           \t0x000000010e08214e 0 + 4530381134\r\n194 ???                           \t0x000000010e0aeb88 0 + 4530563976\r\n195 ???                           \t0x000000010e10d4e4 0 + 4530951396\r\n196 ???                           \t0x000000010e10d440 0 + 4530951232\r\n197 ???                           \t0x000000010e10d27c 0 + 4530950780\r\n198 libcoreclr.dylib              \t0x000000010797b911 CallDescrWorkerInternal + 124\r\n199 libcoreclr.dylib              \t0x000000010786b7ed MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 941\r\n200 libcoreclr.dylib              \t0x00000001077346fd RuntimeInvokeHostAssemblyResolver(long, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::AssemblyName*, ICLRPrivAssembly**) + 637\r\n201 libcoreclr.dylib              \t0x0000000107a90e16 BINDER_SPACE::AssemblyBinder::BindUsingHostAssemblyResolver(long, BINDER_SPACE::AssemblyName*, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::Assembly**) + 38\r\n202 libcoreclr.dylib              \t0x0000000107a9bf69 CLRPrivBinderAssemblyLoadContext::BindAssemblyByName(IAssemblyName*, ICLRPrivAssembly**) + 329\r\n203 libcoreclr.dylib              \t0x0000000107778049 AssemblySpec::Bind(AppDomain*, int, CoreBindResult*, int, int, StackCrawlMark*) + 1609\r\n204 libcoreclr.dylib              \t0x000000010772b898 AppDomain::BindAssemblySpec(AssemblySpec*, int, int, StackCrawlMark*, AssemblyLoadSecurity*, int) + 424\r\n205 libcoreclr.dylib              \t0x0000000107868067 AssemblySpec::LoadDomainAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 423\r\n206 libcoreclr.dylib              \t0x0000000107867ea9 AssemblySpec::LoadAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 9\r\n207 libcoreclr.dylib              \t0x000000010785e358 AssemblyNative::Load(AssemblyNameBaseObject*, StringObject*, Object*, AssemblyBaseObject*, StackCrawlMark*, ICLRPrivBinder*, bool, bool, bool, long) + 1080\r\n208 ???                           \t0x000000010e08214e 0 + 4530381134\r\n209 ???                           \t0x000000010e0aeb88 0 + 4530563976\r\n210 ???                           \t0x000000010e10d4e4 0 + 4530951396\r\n211 ???                           \t0x000000010e10d440 0 + 4530951232\r\n212 ???                           \t0x000000010e10d27c 0 + 4530950780\r\n213 libcoreclr.dylib              \t0x000000010797b911 CallDescrWorkerInternal + 124\r\n214 libcoreclr.dylib              \t0x000000010786b7ed MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 941\r\n215 libcoreclr.dylib              \t0x00000001077346fd RuntimeInvokeHostAssemblyResolver(long, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::AssemblyName*, ICLRPrivAssembly**) + 637\r\n216 libcoreclr.dylib              \t0x0000000107a90e16 BINDER_SPACE::AssemblyBinder::BindUsingHostAssemblyResolver(long, BINDER_SPACE::AssemblyName*, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::Assembly**) + 38\r\n217 libcoreclr.dylib              \t0x0000000107a9bf69 CLRPrivBinderAssemblyLoadContext::BindAssemblyByName(IAssemblyName*, ICLRPrivAssembly**) + 329\r\n218 libcoreclr.dylib              \t0x0000000107778049 AssemblySpec::Bind(AppDomain*, int, CoreBindResult*, int, int, StackCrawlMark*) + 1609\r\n219 libcoreclr.dylib              \t0x000000010772b898 AppDomain::BindAssemblySpec(AssemblySpec*, int, int, StackCrawlMark*, AssemblyLoadSecurity*, int) + 424\r\n220 libcoreclr.dylib              \t0x0000000107868067 AssemblySpec::LoadDomainAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 423\r\n221 libcoreclr.dylib              \t0x0000000107867ea9 AssemblySpec::LoadAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 9\r\n222 libcoreclr.dylib              \t0x000000010785e358 AssemblyNative::Load(AssemblyNameBaseObject*, StringObject*, Object*, AssemblyBaseObject*, StackCrawlMark*, ICLRPrivBinder*, bool, bool, bool, long) + 1080\r\n223 ???                           \t0x000000010e08214e 0 + 4530381134\r\n224 ???                           \t0x000000010e0aeb88 0 + 4530563976\r\n225 ???                           \t0x000000010e10d4e4 0 + 4530951396\r\n226 ???                           \t0x000000010e10d440 0 + 4530951232\r\n227 ???                           \t0x000000010e10d27c 0 + 4530950780\r\n228 libcoreclr.dylib              \t0x000000010797b911 CallDescrWorkerInternal + 124\r\n229 libcoreclr.dylib              \t0x000000010786b7ed MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 941\r\n230 libcoreclr.dylib              \t0x00000001077346fd RuntimeInvokeHostAssemblyResolver(long, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::AssemblyName*, ICLRPrivAssembly**) + 637\r\n231 libcoreclr.dylib              \t0x0000000107a90e16 BINDER_SPACE::AssemblyBinder::BindUsingHostAssemblyResolver(long, BINDER_SPACE::AssemblyName*, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::Assembly**) + 38\r\n232 libcoreclr.dylib              \t0x0000000107a9bf69 CLRPrivBinderAssemblyLoadContext::BindAssemblyByName(IAssemblyName*, ICLRPrivAssembly**) + 329\r\n233 libcoreclr.dylib              \t0x0000000107778049 AssemblySpec::Bind(AppDomain*, int, CoreBindResult*, int, int, StackCrawlMark*) + 1609\r\n234 libcoreclr.dylib              \t0x000000010772b898 AppDomain::BindAssemblySpec(AssemblySpec*, int, int, StackCrawlMark*, AssemblyLoadSecurity*, int) + 424\r\n235 libcoreclr.dylib              \t0x0000000107868067 AssemblySpec::LoadDomainAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 423\r\n236 libcoreclr.dylib              \t0x0000000107867ea9 AssemblySpec::LoadAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 9\r\n237 libcoreclr.dylib              \t0x000000010785e358 AssemblyNative::Load(AssemblyNameBaseObject*, StringObject*, Object*, AssemblyBaseObject*, StackCrawlMark*, ICLRPrivBinder*, bool, bool, bool, long) + 1080\r\n238 ???                           \t0x000000010e08214e 0 + 4530381134\r\n239 ???                           \t0x000000010e0aeb88 0 + 4530563976\r\n240 ???                           \t0x000000010e10d4e4 0 + 4530951396\r\n241 ???                           \t0x000000010e10d440 0 + 4530951232\r\n242 ???                           \t0x000000010e10d27c 0 + 4530950780\r\n243 libcoreclr.dylib              \t0x000000010797b911 CallDescrWorkerInternal + 124\r\n244 libcoreclr.dylib              \t0x000000010786b7ed MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 941\r\n245 libcoreclr.dylib              \t0x00000001077346fd RuntimeInvokeHostAssemblyResolver(long, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::AssemblyName*, ICLRPrivAssembly**) + 637\r\n246 libcoreclr.dylib              \t0x0000000107a90e16 BINDER_SPACE::AssemblyBinder::BindUsingHostAssemblyResolver(long, BINDER_SPACE::AssemblyName*, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::Assembly**) + 38\r\n247 libcoreclr.dylib              \t0x0000000107a9bf69 CLRPrivBinderAssemblyLoadContext::BindAssemblyByName(IAssemblyName*, ICLRPrivAssembly**) + 329\r\n248 libcoreclr.dylib              \t0x0000000107778049 AssemblySpec::Bind(AppDomain*, int, CoreBindResult*, int, int, StackCrawlMark*) + 1609\r\n249 libcoreclr.dylib              \t0x000000010772b898 AppDomain::BindAssemblySpec(AssemblySpec*, int, int, StackCrawlMark*, AssemblyLoadSecurity*, int) + 424\r\n250 libcoreclr.dylib              \t0x0000000107868067 AssemblySpec::LoadDomainAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 423\r\n251 libcoreclr.dylib              \t0x0000000107867ea9 AssemblySpec::LoadAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 9\r\n252 libcoreclr.dylib              \t0x000000010785e358 AssemblyNative::Load(AssemblyNameBaseObject*, StringObject*, Object*, AssemblyBaseObject*, StackCrawlMark*, ICLRPrivBinder*, bool, bool, bool, long) + 1080\r\n253 ???                           \t0x000000010e08214e 0 + 4530381134\r\n254 ???                           \t0x000000010e0aeb88 0 + 4530563976\r\n255 ???                           \t0x000000010e10d4e4 0 + 4530951396\r\n256 ???                           \t0x000000010e10d440 0 + 4530951232\r\n257 ???                           \t0x000000010e10d27c 0 + 4530950780\r\n258 libcoreclr.dylib              \t0x000000010797b911 CallDescrWorkerInternal + 124\r\n259 libcoreclr.dylib              \t0x000000010786b7ed MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 941\r\n260 libcoreclr.dylib              \t0x00000001077346fd RuntimeInvokeHostAssemblyResolver(long, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::AssemblyName*, ICLRPrivAssembly**) + 637\r\n261 libcoreclr.dylib              \t0x0000000107a90e16 BINDER_SPACE::AssemblyBinder::BindUsingHostAssemblyResolver(long, BINDER_SPACE::AssemblyName*, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::Assembly**) + 38\r\n262 libcoreclr.dylib              \t0x0000000107a9bf69 CLRPrivBinderAssemblyLoadContext::BindAssemblyByName(IAssemblyName*, ICLRPrivAssembly**) + 329\r\n263 libcoreclr.dylib              \t0x0000000107778049 AssemblySpec::Bind(AppDomain*, int, CoreBindResult*, int, int, StackCrawlMark*) + 1609\r\n264 libcoreclr.dylib              \t0x000000010772b898 AppDomain::BindAssemblySpec(AssemblySpec*, int, int, StackCrawlMark*, AssemblyLoadSecurity*, int) + 424\r\n265 libcoreclr.dylib              \t0x0000000107868067 AssemblySpec::LoadDomainAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 423\r\n266 libcoreclr.dylib              \t0x0000000107867ea9 AssemblySpec::LoadAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 9\r\n267 libcoreclr.dylib              \t0x000000010785e358 AssemblyNative::Load(AssemblyNameBaseObject*, StringObject*, Object*, AssemblyBaseObject*, StackCrawlMark*, ICLRPrivBinder*, bool, bool, bool, long) + 1080\r\n268 ???                           \t0x000000010e08214e 0 + 4530381134\r\n269 ???                           \t0x000000010e0aeb88 0 + 4530563976\r\n270 ???                           \t0x000000010e10d4e4 0 + 4530951396\r\n271 ???                           \t0x000000010e10d440 0 + 4530951232\r\n272 ???                           \t0x000000010e10d27c 0 + 4530950780\r\n273 libcoreclr.dylib              \t0x000000010797b911 CallDescrWorkerInternal + 124\r\n274 libcoreclr.dylib              \t0x000000010786b7ed MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 941\r\n275 libcoreclr.dylib              \t0x00000001077346fd RuntimeInvokeHostAssemblyResolver(long, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::AssemblyName*, ICLRPrivAssembly**) + 637\r\n276 libcoreclr.dylib              \t0x0000000107a90e16 BINDER_SPACE::AssemblyBinder::BindUsingHostAssemblyResolver(long, BINDER_SPACE::AssemblyName*, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::Assembly**) + 38\r\n277 libcoreclr.dylib              \t0x0000000107a9bf69 CLRPrivBinderAssemblyLoadContext::BindAssemblyByName(IAssemblyName*, ICLRPrivAssembly**) + 329\r\n278 libcoreclr.dylib              \t0x0000000107778049 AssemblySpec::Bind(AppDomain*, int, CoreBindResult*, int, int, StackCrawlMark*) + 1609\r\n279 libcoreclr.dylib              \t0x000000010772b898 AppDomain::BindAssemblySpec(AssemblySpec*, int, int, StackCrawlMark*, AssemblyLoadSecurity*, int) + 424\r\n280 libcoreclr.dylib              \t0x0000000107868067 AssemblySpec::LoadDomainAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 423\r\n281 libcoreclr.dylib              \t0x0000000107867ea9 AssemblySpec::LoadAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 9\r\n282 libcoreclr.dylib              \t0x000000010785e358 AssemblyNative::Load(AssemblyNameBaseObject*, StringObject*, Object*, AssemblyBaseObject*, StackCrawlMark*, ICLRPrivBinder*, bool, bool, bool, long) + 1080\r\n283 ???                           \t0x000000010e08214e 0 + 4530381134\r\n284 ???                           \t0x000000010e0aeb88 0 + 4530563976\r\n285 ???                           \t0x000000010e10d4e4 0 + 4530951396\r\n286 ???                           \t0x000000010e10d440 0 + 4530951232\r\n287 ???                           \t0x000000010e10d27c 0 + 4530950780\r\n288 libcoreclr.dylib              \t0x000000010797b911 CallDescrWorkerInternal + 124\r\n289 libcoreclr.dylib              \t0x000000010786b7ed MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 941\r\n290 libcoreclr.dylib              \t0x00000001077346fd RuntimeInvokeHostAssemblyResolver(long, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::AssemblyName*, ICLRPrivAssembly**) + 637\r\n291 libcoreclr.dylib              \t0x0000000107a90e16 BINDER_SPACE::AssemblyBinder::BindUsingHostAssemblyResolver(long, BINDER_SPACE::AssemblyName*, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::Assembly**) + 38\r\n292 libcoreclr.dylib              \t0x0000000107a9bf69 CLRPrivBinderAssemblyLoadContext::BindAssemblyByName(IAssemblyName*, ICLRPrivAssembly**) + 329\r\n293 libcoreclr.dylib              \t0x0000000107778049 AssemblySpec::Bind(AppDomain*, int, CoreBindResult*, int, int, StackCrawlMark*) + 1609\r\n294 libcoreclr.dylib              \t0x000000010772b898 AppDomain::BindAssemblySpec(AssemblySpec*, int, int, StackCrawlMark*, AssemblyLoadSecurity*, int) + 424\r\n295 libcoreclr.dylib              \t0x0000000107868067 AssemblySpec::LoadDomainAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 423\r\n296 libcoreclr.dylib              \t0x0000000107867ea9 AssemblySpec::LoadAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 9\r\n297 libcoreclr.dylib              \t0x000000010785e358 AssemblyNative::Load(AssemblyNameBaseObject*, StringObject*, Object*, AssemblyBaseObject*, StackCrawlMark*, ICLRPrivBinder*, bool, bool, bool, long) + 1080\r\n298 ???                           \t0x000000010e08214e 0 + 4530381134\r\n299 ???                           \t0x000000010e0aeb88 0 + 4530563976\r\n300 ???                           \t0x000000010e10d4e4 0 + 4530951396\r\n301 ???                           \t0x000000010e10d440 0 + 4530951232\r\n302 ???                           \t0x000000010e10d27c 0 + 4530950780\r\n303 libcoreclr.dylib              \t0x000000010797b911 CallDescrWorkerInternal + 124\r\n304 libcoreclr.dylib              \t0x000000010786b7ed MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 941\r\n305 libcoreclr.dylib              \t0x00000001077346fd RuntimeInvokeHostAssemblyResolver(long, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::AssemblyName*, ICLRPrivAssembly**) + 637\r\n306 libcoreclr.dylib              \t0x0000000107a90e16 BINDER_SPACE::AssemblyBinder::BindUsingHostAssemblyResolver(long, BINDER_SPACE::AssemblyName*, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::Assembly**) + 38\r\n307 libcoreclr.dylib              \t0x0000000107a9bf69 CLRPrivBinderAssemblyLoadContext::BindAssemblyByName(IAssemblyName*, ICLRPrivAssembly**) + 329\r\n308 libcoreclr.dylib              \t0x0000000107778049 AssemblySpec::Bind(AppDomain*, int, CoreBindResult*, int, int, StackCrawlMark*) + 1609\r\n309 libcoreclr.dylib              \t0x000000010772b898 AppDomain::BindAssemblySpec(AssemblySpec*, int, int, StackCrawlMark*, AssemblyLoadSecurity*, int) + 424\r\n310 libcoreclr.dylib              \t0x0000000107868067 AssemblySpec::LoadDomainAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 423\r\n311 libcoreclr.dylib              \t0x0000000107867ea9 AssemblySpec::LoadAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 9\r\n312 libcoreclr.dylib              \t0x000000010785e358 AssemblyNative::Load(AssemblyNameBaseObject*, StringObject*, Object*, AssemblyBaseObject*, StackCrawlMark*, ICLRPrivBinder*, bool, bool, bool, long) + 1080\r\n313 ???                           \t0x000000010e08214e 0 + 4530381134\r\n314 ???                           \t0x000000010e0aeb88 0 + 4530563976\r\n315 ???                           \t0x000000010e10d4e4 0 + 4530951396\r\n316 ???                           \t0x000000010e10d440 0 + 4530951232\r\n317 ???                           \t0x000000010e10d27c 0 + 4530950780\r\n318 libcoreclr.dylib              \t0x000000010797b911 CallDescrWorkerInternal + 124\r\n319 libcoreclr.dylib              \t0x000000010786b7ed MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 941\r\n320 libcoreclr.dylib              \t0x00000001077346fd RuntimeInvokeHostAssemblyResolver(long, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::AssemblyName*, ICLRPrivAssembly**) + 637\r\n321 libcoreclr.dylib              \t0x0000000107a90e16 BINDER_SPACE::AssemblyBinder::BindUsingHostAssemblyResolver(long, BINDER_SPACE::AssemblyName*, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::Assembly**) + 38\r\n322 libcoreclr.dylib              \t0x0000000107a9bf69 CLRPrivBinderAssemblyLoadContext::BindAssemblyByName(IAssemblyName*, ICLRPrivAssembly**) + 329\r\n323 libcoreclr.dylib              \t0x0000000107778049 AssemblySpec::Bind(AppDomain*, int, CoreBindResult*, int, int, StackCrawlMark*) + 1609\r\n324 libcoreclr.dylib              \t0x000000010772b898 AppDomain::BindAssemblySpec(AssemblySpec*, int, int, StackCrawlMark*, AssemblyLoadSecurity*, int) + 424\r\n325 libcoreclr.dylib              \t0x0000000107868067 AssemblySpec::LoadDomainAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 423\r\n326 libcoreclr.dylib              \t0x0000000107867ea9 AssemblySpec::LoadAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 9\r\n327 libcoreclr.dylib              \t0x000000010785e358 AssemblyNative::Load(AssemblyNameBaseObject*, StringObject*, Object*, AssemblyBaseObject*, StackCrawlMark*, ICLRPrivBinder*, bool, bool, bool, long) + 1080\r\n328 ???                           \t0x000000010e08214e 0 + 4530381134\r\n329 ???                           \t0x000000010e0aeb88 0 + 4530563976\r\n330 ???                           \t0x000000010e10d4e4 0 + 4530951396\r\n331 ???                           \t0x000000010e10d440 0 + 4530951232\r\n332 ???                           \t0x000000010e10d27c 0 + 4530950780\r\n333 libcoreclr.dylib              \t0x000000010797b911 CallDescrWorkerInternal + 124\r\n334 libcoreclr.dylib              \t0x000000010786b7ed MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 941\r\n335 libcoreclr.dylib              \t0x00000001077346fd RuntimeInvokeHostAssemblyResolver(long, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::AssemblyName*, ICLRPrivAssembly**) + 637\r\n336 libcoreclr.dylib              \t0x0000000107a90e16 BINDER_SPACE::AssemblyBinder::BindUsingHostAssemblyResolver(long, BINDER_SPACE::AssemblyName*, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::Assembly**) + 38\r\n337 libcoreclr.dylib              \t0x0000000107a9bf69 CLRPrivBinderAssemblyLoadContext::BindAssemblyByName(IAssemblyName*, ICLRPrivAssembly**) + 329\r\n338 libcoreclr.dylib              \t0x0000000107778049 AssemblySpec::Bind(AppDomain*, int, CoreBindResult*, int, int, StackCrawlMark*) + 1609\r\n339 libcoreclr.dylib              \t0x000000010772b898 AppDomain::BindAssemblySpec(AssemblySpec*, int, int, StackCrawlMark*, AssemblyLoadSecurity*, int) + 424\r\n340 libcoreclr.dylib              \t0x0000000107868067 AssemblySpec::LoadDomainAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 423\r\n341 libcoreclr.dylib              \t0x0000000107867ea9 AssemblySpec::LoadAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 9\r\n342 libcoreclr.dylib              \t0x000000010785e358 AssemblyNative::Load(AssemblyNameBaseObject*, StringObject*, Object*, AssemblyBaseObject*, StackCrawlMark*, ICLRPrivBinder*, bool, bool, bool, long) + 1080\r\n343 ???                           \t0x000000010e08214e 0 + 4530381134\r\n344 ???                           \t0x000000010e0aeb88 0 + 4530563976\r\n345 ???                           \t0x000000010e10d4e4 0 + 4530951396\r\n346 ???                           \t0x000000010e10d440 0 + 4530951232\r\n347 ???                           \t0x000000010e10d27c 0 + 4530950780\r\n348 libcoreclr.dylib              \t0x000000010797b911 CallDescrWorkerInternal + 124\r\n349 libcoreclr.dylib              \t0x000000010786b7ed MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 941\r\n350 libcoreclr.dylib              \t0x00000001077346fd RuntimeInvokeHostAssemblyResolver(long, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::AssemblyName*, ICLRPrivAssembly**) + 637\r\n351 libcoreclr.dylib              \t0x0000000107a90e16 BINDER_SPACE::AssemblyBinder::BindUsingHostAssemblyResolver(long, BINDER_SPACE::AssemblyName*, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::Assembly**) + 38\r\n352 libcoreclr.dylib              \t0x0000000107a9bf69 CLRPrivBinderAssemblyLoadContext::BindAssemblyByName(IAssemblyName*, ICLRPrivAssembly**) + 329\r\n353 libcoreclr.dylib              \t0x0000000107778049 AssemblySpec::Bind(AppDomain*, int, CoreBindResult*, int, int, StackCrawlMark*) + 1609\r\n354 libcoreclr.dylib              \t0x000000010772b898 AppDomain::BindAssemblySpec(AssemblySpec*, int, int, StackCrawlMark*, AssemblyLoadSecurity*, int) + 424\r\n355 libcoreclr.dylib              \t0x0000000107868067 AssemblySpec::LoadDomainAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 423\r\n356 libcoreclr.dylib              \t0x0000000107867ea9 AssemblySpec::LoadAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 9\r\n357 libcoreclr.dylib              \t0x000000010785e358 AssemblyNative::Load(AssemblyNameBaseObject*, StringObject*, Object*, AssemblyBaseObject*, StackCrawlMark*, ICLRPrivBinder*, bool, bool, bool, long) + 1080\r\n358 ???                           \t0x000000010e08214e 0 + 4530381134\r\n359 ???                           \t0x000000010e0aeb88 0 + 4530563976\r\n360 ???                           \t0x000000010e10d4e4 0 + 4530951396\r\n361 ???                           \t0x000000010e10d440 0 + 4530951232\r\n362 ???                           \t0x000000010e10d27c 0 + 4530950780\r\n363 libcoreclr.dylib              \t0x000000010797b911 CallDescrWorkerInternal + 124\r\n364 libcoreclr.dylib              \t0x000000010786b7ed MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 941\r\n365 libcoreclr.dylib              \t0x00000001077346fd RuntimeInvokeHostAssemblyResolver(long, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::AssemblyName*, ICLRPrivAssembly**) + 637\r\n366 libcoreclr.dylib              \t0x0000000107a90e16 BINDER_SPACE::AssemblyBinder::BindUsingHostAssemblyResolver(long, BINDER_SPACE::AssemblyName*, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::Assembly**) + 38\r\n367 libcoreclr.dylib              \t0x0000000107a9bf69 CLRPrivBinderAssemblyLoadContext::BindAssemblyByName(IAssemblyName*, ICLRPrivAssembly**) + 329\r\n368 libcoreclr.dylib              \t0x0000000107778049 AssemblySpec::Bind(AppDomain*, int, CoreBindResult*, int, int, StackCrawlMark*) + 1609\r\n369 libcoreclr.dylib              \t0x000000010772b898 AppDomain::BindAssemblySpec(AssemblySpec*, int, int, StackCrawlMark*, AssemblyLoadSecurity*, int) + 424\r\n370 libcoreclr.dylib              \t0x0000000107868067 AssemblySpec::LoadDomainAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 423\r\n371 libcoreclr.dylib              \t0x0000000107867ea9 AssemblySpec::LoadAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 9\r\n372 libcoreclr.dylib              \t0x000000010785e358 AssemblyNative::Load(AssemblyNameBaseObject*, StringObject*, Object*, AssemblyBaseObject*, StackCrawlMark*, ICLRPrivBinder*, bool, bool, bool, long) + 1080\r\n373 ???                           \t0x000000010e08214e 0 + 4530381134\r\n374 ???                           \t0x000000010e0aeb88 0 + 4530563976\r\n375 ???                           \t0x000000010e10d4e4 0 + 4530951396\r\n376 ???                           \t0x000000010e10d440 0 + 4530951232\r\n377 ???                           \t0x000000010e10d27c 0 + 4530950780\r\n378 libcoreclr.dylib              \t0x000000010797b911 CallDescrWorkerInternal + 124\r\n379 libcoreclr.dylib              \t0x000000010786b7ed MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 941\r\n380 libcoreclr.dylib              \t0x00000001077346fd RuntimeInvokeHostAssemblyResolver(long, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::AssemblyName*, ICLRPrivAssembly**) + 637\r\n381 libcoreclr.dylib              \t0x0000000107a90e16 BINDER_SPACE::AssemblyBinder::BindUsingHostAssemblyResolver(long, BINDER_SPACE::AssemblyName*, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::Assembly**) + 38\r\n382 libcoreclr.dylib              \t0x0000000107a9bf69 CLRPrivBinderAssemblyLoadContext::BindAssemblyByName(IAssemblyName*, ICLRPrivAssembly**) + 329\r\n383 libcoreclr.dylib              \t0x0000000107778049 AssemblySpec::Bind(AppDomain*, int, CoreBindResult*, int, int, StackCrawlMark*) + 1609\r\n384 libcoreclr.dylib              \t0x000000010772b898 AppDomain::BindAssemblySpec(AssemblySpec*, int, int, StackCrawlMark*, AssemblyLoadSecurity*, int) + 424\r\n385 libcoreclr.dylib              \t0x0000000107868067 AssemblySpec::LoadDomainAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 423\r\n386 libcoreclr.dylib              \t0x0000000107867ea9 AssemblySpec::LoadAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 9\r\n387 libcoreclr.dylib              \t0x000000010785e358 AssemblyNative::Load(AssemblyNameBaseObject*, StringObject*, Object*, AssemblyBaseObject*, StackCrawlMark*, ICLRPrivBinder*, bool, bool, bool, long) + 1080\r\n388 ???                           \t0x000000010e08214e 0 + 4530381134\r\n389 ???                           \t0x000000010e0aeb88 0 + 4530563976\r\n390 ???                           \t0x000000010e10d4e4 0 + 4530951396\r\n391 ???                           \t0x000000010e10d440 0 + 4530951232\r\n392 ???                           \t0x000000010e10d27c 0 + 4530950780\r\n393 libcoreclr.dylib              \t0x000000010797b911 CallDescrWorkerInternal + 124\r\n394 libcoreclr.dylib              \t0x000000010786b7ed MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 941\r\n395 libcoreclr.dylib              \t0x00000001077346fd RuntimeInvokeHostAssemblyResolver(long, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::AssemblyName*, ICLRPrivAssembly**) + 637\r\n396 libcoreclr.dylib              \t0x0000000107a90e16 BINDER_SPACE::AssemblyBinder::BindUsingHostAssemblyResolver(long, BINDER_SPACE::AssemblyName*, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::Assembly**) + 38\r\n397 libcoreclr.dylib              \t0x0000000107a9bf69 CLRPrivBinderAssemblyLoadContext::BindAssemblyByName(IAssemblyName*, ICLRPrivAssembly**) + 329\r\n398 libcoreclr.dylib              \t0x0000000107778049 AssemblySpec::Bind(AppDomain*, int, CoreBindResult*, int, int, StackCrawlMark*) + 1609\r\n399 libcoreclr.dylib              \t0x000000010772b898 AppDomain::BindAssemblySpec(AssemblySpec*, int, int, StackCrawlMark*, AssemblyLoadSecurity*, int) + 424\r\n400 libcoreclr.dylib              \t0x0000000107868067 AssemblySpec::LoadDomainAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 423\r\n401 libcoreclr.dylib              \t0x0000000107867ea9 AssemblySpec::LoadAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 9\r\n402 libcoreclr.dylib              \t0x000000010785e358 AssemblyNative::Load(AssemblyNameBaseObject*, StringObject*, Object*, AssemblyBaseObject*, StackCrawlMark*, ICLRPrivBinder*, bool, bool, bool, long) + 1080\r\n403 ???                           \t0x000000010e08214e 0 + 4530381134\r\n404 ???                           \t0x000000010e0aeb88 0 + 4530563976\r\n405 ???                           \t0x000000010e10d4e4 0 + 4530951396\r\n406 ???                           \t0x000000010e10d440 0 + 4530951232\r\n407 ???                           \t0x000000010e10d27c 0 + 4530950780\r\n408 libcoreclr.dylib              \t0x000000010797b911 CallDescrWorkerInternal + 124\r\n409 libcoreclr.dylib              \t0x000000010786b7ed MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 941\r\n410 libcoreclr.dylib              \t0x00000001077346fd RuntimeInvokeHostAssemblyResolver(long, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::AssemblyName*, ICLRPrivAssembly**) + 637\r\n411 libcoreclr.dylib              \t0x0000000107a90e16 BINDER_SPACE::AssemblyBinder::BindUsingHostAssemblyResolver(long, BINDER_SPACE::AssemblyName*, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::Assembly**) + 38\r\n412 libcoreclr.dylib              \t0x0000000107a9bf69 CLRPrivBinderAssemblyLoadContext::BindAssemblyByName(IAssemblyName*, ICLRPrivAssembly**) + 329\r\n413 libcoreclr.dylib              \t0x0000000107778049 AssemblySpec::Bind(AppDomain*, int, CoreBindResult*, int, int, StackCrawlMark*) + 1609\r\n414 libcoreclr.dylib              \t0x000000010772b898 AppDomain::BindAssemblySpec(AssemblySpec*, int, int, StackCrawlMark*, AssemblyLoadSecurity*, int) + 424\r\n415 libcoreclr.dylib              \t0x0000000107868067 AssemblySpec::LoadDomainAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 423\r\n416 libcoreclr.dylib              \t0x0000000107867ea9 AssemblySpec::LoadAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 9\r\n417 libcoreclr.dylib              \t0x000000010785e358 AssemblyNative::Load(AssemblyNameBaseObject*, StringObject*, Object*, AssemblyBaseObject*, StackCrawlMark*, ICLRPrivBinder*, bool, bool, bool, long) + 1080\r\n418 ???                           \t0x000000010e08214e 0 + 4530381134\r\n419 ???                           \t0x000000010e0aeb88 0 + 4530563976\r\n420 ???                           \t0x000000010e10d4e4 0 + 4530951396\r\n421 ???                           \t0x000000010e10d440 0 + 4530951232\r\n422 ???                           \t0x000000010e10d27c 0 + 4530950780\r\n423 libcoreclr.dylib              \t0x000000010797b911 CallDescrWorkerInternal + 124\r\n424 libcoreclr.dylib              \t0x000000010786b7ed MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 941\r\n425 libcoreclr.dylib              \t0x00000001077346fd RuntimeInvokeHostAssemblyResolver(long, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::AssemblyName*, ICLRPrivAssembly**) + 637\r\n426 libcoreclr.dylib              \t0x0000000107a90e16 BINDER_SPACE::AssemblyBinder::BindUsingHostAssemblyResolver(long, BINDER_SPACE::AssemblyName*, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::Assembly**) + 38\r\n427 libcoreclr.dylib              \t0x0000000107a9bf69 CLRPrivBinderAssemblyLoadContext::BindAssemblyByName(IAssemblyName*, ICLRPrivAssembly**) + 329\r\n428 libcoreclr.dylib              \t0x0000000107778049 AssemblySpec::Bind(AppDomain*, int, CoreBindResult*, int, int, StackCrawlMark*) + 1609\r\n429 libcoreclr.dylib              \t0x000000010772b898 AppDomain::BindAssemblySpec(AssemblySpec*, int, int, StackCrawlMark*, AssemblyLoadSecurity*, int) + 424\r\n430 libcoreclr.dylib              \t0x0000000107868067 AssemblySpec::LoadDomainAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 423\r\n431 libcoreclr.dylib              \t0x0000000107867ea9 AssemblySpec::LoadAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 9\r\n432 libcoreclr.dylib              \t0x000000010785e358 AssemblyNative::Load(AssemblyNameBaseObject*, StringObject*, Object*, AssemblyBaseObject*, StackCrawlMark*, ICLRPrivBinder*, bool, bool, bool, long) + 1080\r\n433 ???                           \t0x000000010e08214e 0 + 4530381134\r\n434 ???                           \t0x000000010e0aeb88 0 + 4530563976\r\n435 ???                           \t0x000000010e10d4e4 0 + 4530951396\r\n436 ???                           \t0x000000010e10d440 0 + 4530951232\r\n437 ???                           \t0x000000010e10d27c 0 + 4530950780\r\n438 libcoreclr.dylib              \t0x000000010797b911 CallDescrWorkerInternal + 124\r\n439 libcoreclr.dylib              \t0x000000010786b7ed MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 941\r\n440 libcoreclr.dylib              \t0x00000001077346fd RuntimeInvokeHostAssemblyResolver(long, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::AssemblyName*, ICLRPrivAssembly**) + 637\r\n441 libcoreclr.dylib              \t0x0000000107a90e16 BINDER_SPACE::AssemblyBinder::BindUsingHostAssemblyResolver(long, BINDER_SPACE::AssemblyName*, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::Assembly**) + 38\r\n442 libcoreclr.dylib              \t0x0000000107a9bf69 CLRPrivBinderAssemblyLoadContext::BindAssemblyByName(IAssemblyName*, ICLRPrivAssembly**) + 329\r\n443 libcoreclr.dylib              \t0x0000000107778049 AssemblySpec::Bind(AppDomain*, int, CoreBindResult*, int, int, StackCrawlMark*) + 1609\r\n444 libcoreclr.dylib              \t0x000000010772b898 AppDomain::BindAssemblySpec(AssemblySpec*, int, int, StackCrawlMark*, AssemblyLoadSecurity*, int) + 424\r\n445 libcoreclr.dylib              \t0x0000000107868067 AssemblySpec::LoadDomainAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 423\r\n446 libcoreclr.dylib              \t0x0000000107867ea9 AssemblySpec::LoadAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 9\r\n447 libcoreclr.dylib              \t0x000000010785e358 AssemblyNative::Load(AssemblyNameBaseObject*, StringObject*, Object*, AssemblyBaseObject*, StackCrawlMark*, ICLRPrivBinder*, bool, bool, bool, long) + 1080\r\n448 ???                           \t0x000000010e08214e 0 + 4530381134\r\n449 ???                           \t0x000000010e0aeb88 0 + 4530563976\r\n450 ???                           \t0x000000010e10d4e4 0 + 4530951396\r\n451 ???                           \t0x000000010e10d440 0 + 4530951232\r\n452 ???                           \t0x000000010e10d27c 0 + 4530950780\r\n453 libcoreclr.dylib              \t0x000000010797b911 CallDescrWorkerInternal + 124\r\n454 libcoreclr.dylib              \t0x000000010786b7ed MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 941\r\n455 libcoreclr.dylib              \t0x00000001077346fd RuntimeInvokeHostAssemblyResolver(long, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::AssemblyName*, ICLRPrivAssembly**) + 637\r\n456 libcoreclr.dylib              \t0x0000000107a90e16 BINDER_SPACE::AssemblyBinder::BindUsingHostAssemblyResolver(long, BINDER_SPACE::AssemblyName*, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::Assembly**) + 38\r\n457 libcoreclr.dylib              \t0x0000000107a9bf69 CLRPrivBinderAssemblyLoadContext::BindAssemblyByName(IAssemblyName*, ICLRPrivAssembly**) + 329\r\n458 libcoreclr.dylib              \t0x0000000107778049 AssemblySpec::Bind(AppDomain*, int, CoreBindResult*, int, int, StackCrawlMark*) + 1609\r\n459 libcoreclr.dylib              \t0x000000010772b898 AppDomain::BindAssemblySpec(AssemblySpec*, int, int, StackCrawlMark*, AssemblyLoadSecurity*, int) + 424\r\n460 libcoreclr.dylib              \t0x0000000107868067 AssemblySpec::LoadDomainAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 423\r\n461 libcoreclr.dylib              \t0x0000000107867ea9 AssemblySpec::LoadAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 9\r\n462 libcoreclr.dylib              \t0x000000010785e358 AssemblyNative::Load(AssemblyNameBaseObject*, StringObject*, Object*, AssemblyBaseObject*, StackCrawlMark*, ICLRPrivBinder*, bool, bool, bool, long) + 1080\r\n463 ???                           \t0x000000010e08214e 0 + 4530381134\r\n464 ???                           \t0x000000010e0aeb88 0 + 4530563976\r\n465 ???                           \t0x000000010e10d4e4 0 + 4530951396\r\n466 ???                           \t0x000000010e10d440 0 + 4530951232\r\n467 ???                           \t0x000000010e10d27c 0 + 4530950780\r\n468 libcoreclr.dylib              \t0x000000010797b911 CallDescrWorkerInternal + 124\r\n469 libcoreclr.dylib              \t0x000000010786b7ed MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 941\r\n470 libcoreclr.dylib              \t0x00000001077346fd RuntimeInvokeHostAssemblyResolver(long, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::AssemblyName*, ICLRPrivAssembly**) + 637\r\n471 libcoreclr.dylib              \t0x0000000107a90e16 BINDER_SPACE::AssemblyBinder::BindUsingHostAssemblyResolver(long, BINDER_SPACE::AssemblyName*, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::Assembly**) + 38\r\n472 libcoreclr.dylib              \t0x0000000107a9bf69 CLRPrivBinderAssemblyLoadContext::BindAssemblyByName(IAssemblyName*, ICLRPrivAssembly**) + 329\r\n473 libcoreclr.dylib              \t0x0000000107778049 AssemblySpec::Bind(AppDomain*, int, CoreBindResult*, int, int, StackCrawlMark*) + 1609\r\n474 libcoreclr.dylib              \t0x000000010772b898 AppDomain::BindAssemblySpec(AssemblySpec*, int, int, StackCrawlMark*, AssemblyLoadSecurity*, int) + 424\r\n475 libcoreclr.dylib              \t0x0000000107868067 AssemblySpec::LoadDomainAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 423\r\n476 libcoreclr.dylib              \t0x0000000107867ea9 AssemblySpec::LoadAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 9\r\n477 libcoreclr.dylib              \t0x000000010785e358 AssemblyNative::Load(AssemblyNameBaseObject*, StringObject*, Object*, AssemblyBaseObject*, StackCrawlMark*, ICLRPrivBinder*, bool, bool, bool, long) + 1080\r\n478 ???                           \t0x000000010e08214e 0 + 4530381134\r\n479 ???                           \t0x000000010e0aeb88 0 + 4530563976\r\n480 ???                           \t0x000000010e10d4e4 0 + 4530951396\r\n481 ???                           \t0x000000010e10d440 0 + 4530951232\r\n482 ???                           \t0x000000010e10d27c 0 + 4530950780\r\n483 libcoreclr.dylib              \t0x000000010797b911 CallDescrWorkerInternal + 124\r\n484 libcoreclr.dylib              \t0x000000010786b7ed MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 941\r\n485 libcoreclr.dylib              \t0x00000001077346fd RuntimeInvokeHostAssemblyResolver(long, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::AssemblyName*, ICLRPrivAssembly**) + 637\r\n486 libcoreclr.dylib              \t0x0000000107a90e16 BINDER_SPACE::AssemblyBinder::BindUsingHostAssemblyResolver(long, BINDER_SPACE::AssemblyName*, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::Assembly**) + 38\r\n487 libcoreclr.dylib              \t0x0000000107a9bf69 CLRPrivBinderAssemblyLoadContext::BindAssemblyByName(IAssemblyName*, ICLRPrivAssembly**) + 329\r\n488 libcoreclr.dylib              \t0x0000000107778049 AssemblySpec::Bind(AppDomain*, int, CoreBindResult*, int, int, StackCrawlMark*) + 1609\r\n489 libcoreclr.dylib              \t0x000000010772b898 AppDomain::BindAssemblySpec(AssemblySpec*, int, int, StackCrawlMark*, AssemblyLoadSecurity*, int) + 424\r\n490 libcoreclr.dylib              \t0x0000000107868067 AssemblySpec::LoadDomainAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 423\r\n491 libcoreclr.dylib              \t0x0000000107867ea9 AssemblySpec::LoadAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 9\r\n492 libcoreclr.dylib              \t0x000000010785e358 AssemblyNative::Load(AssemblyNameBaseObject*, StringObject*, Object*, AssemblyBaseObject*, StackCrawlMark*, ICLRPrivBinder*, bool, bool, bool, long) + 1080\r\n493 ???                           \t0x000000010e08214e 0 + 4530381134\r\n494 ???                           \t0x000000010e0aeb88 0 + 4530563976\r\n495 ???                           \t0x000000010e10d4e4 0 + 4530951396\r\n496 ???                           \t0x000000010e10d440 0 + 4530951232\r\n497 ???                           \t0x000000010e10d27c 0 + 4530950780\r\n498 libcoreclr.dylib              \t0x000000010797b911 CallDescrWorkerInternal + 124\r\n499 libcoreclr.dylib              \t0x000000010786b7ed MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 941\r\n500 libcoreclr.dylib              \t0x00000001077346fd RuntimeInvokeHostAssemblyResolver(long, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::AssemblyName*, ICLRPrivAssembly**) + 637\r\n501 libcoreclr.dylib              \t0x0000000107a90e16 BINDER_SPACE::AssemblyBinder::BindUsingHostAssemblyResolver(long, BINDER_SPACE::AssemblyName*, IAssemblyName*, CLRPrivBinderCoreCLR*, BINDER_SPACE::Assembly**) + 38\r\n502 libcoreclr.dylib              \t0x0000000107a9bf69 CLRPrivBinderAssemblyLoadContext::BindAssemblyByName(IAssemblyName*, ICLRPrivAssembly**) + 329\r\n503 libcoreclr.dylib              \t0x0000000107778049 AssemblySpec::Bind(AppDomain*, int, CoreBindResult*, int, int, StackCrawlMark*) + 1609\r\n504 libcoreclr.dylib              \t0x000000010772b898 AppDomain::BindAssemblySpec(AssemblySpec*, int, int, StackCrawlMark*, AssemblyLoadSecurity*, int) + 424\r\n505 libcoreclr.dylib              \t0x0000000107868067 AssemblySpec::LoadDomainAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 423\r\n506 libcoreclr.dylib              \t0x0000000107867ea9 AssemblySpec::LoadAssembly(FileLoadLevel, AssemblyLoadSecurity*, int, int, StackCrawlMark*) + 9\r\n507 libcoreclr.dylib              \t0x000000010785e358 AssemblyNative::Load(AssemblyNameBaseObject*, StringObject*, Object*, AssemblyBaseObject*, StackCrawlMark*, ICLRPrivBinder*, bool, bool, bool, long) + 1080\r\n508 ???                           \t0x000000010e08214e 0 + 4530381134\r\n509 ???                           \t0x000000010e0aeb88 0 + 4530563976\r\n510 ???                           \t0x000000010e10d4e4 0 + 4530951396\r\n511 ???                           \t0x000000010e10d440 0 + 4530951232\r\n\r\nThread 1:\r\n0   libsystem_kernel.dylib        \t0x00007fffa43b934a mach_msg_trap + 10\r\n1   libsystem_kernel.dylib        \t0x00007fffa43b8797 mach_msg + 55\r\n2   libcoreclr.dylib              \t0x00000001076ad61a MachMessage::Receive(unsigned int) + 74\r\n3   libcoreclr.dylib              \t0x00000001076ac4c9 SEHExceptionThread(void*) + 105\r\n4   libsystem_pthread.dylib       \t0x00007fffa44ab93b _pthread_body + 180\r\n5   libsystem_pthread.dylib       \t0x00007fffa44ab887 _pthread_start + 286\r\n6   libsystem_pthread.dylib       \t0x00007fffa44ab08d thread_start + 13\r\n\r\nThread 2:\r\n0   libsystem_kernel.dylib        \t0x00007fffa43c1d96 kevent + 10\r\n1   libcoreclr.dylib              \t0x00000001076a1c63 CorUnix::CPalSynchronizationManager::ReadBytesFromProcessPipe(int, unsigned char*, int) + 499\r\n2   libcoreclr.dylib              \t0x00000001076a11c3 CorUnix::CPalSynchronizationManager::WorkerThread(void*) + 147\r\n3   libcoreclr.dylib              \t0x00000001076a9dd8 CorUnix::CPalThread::ThreadEntry(void*) + 328\r\n4   libsystem_pthread.dylib       \t0x00007fffa44ab93b _pthread_body + 180\r\n5   libsystem_pthread.dylib       \t0x00007fffa44ab887 _pthread_start + 286\r\n6   libsystem_pthread.dylib       \t0x00007fffa44ab08d thread_start + 13\r\n\r\nThread 3:\r\n0   libsystem_kernel.dylib        \t0x00007fffa43c0bf2 __psynch_cvwait + 10\r\n1   libsystem_pthread.dylib       \t0x00007fffa44ac7fa _pthread_cond_wait + 712\r\n2   libcoreclr.dylib              \t0x000000010769f312 CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData*, unsigned int, CorUnix::ThreadWakeupReason*, unsigned int*) + 338\r\n3   libcoreclr.dylib              \t0x000000010769ef38 CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread*, unsigned int, bool, bool, CorUnix::ThreadWakeupReason*, unsigned int*) + 440\r\n4   libcoreclr.dylib              \t0x00000001076a3e59 CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread*, unsigned int, void* const*, int, unsigned int, int) + 1833\r\n5   libcoreclr.dylib              \t0x00000001078ad57e FinalizerThread::WaitForFinalizerEvent(CLREvent*) + 158\r\n6   libcoreclr.dylib              \t0x00000001078ad673 FinalizerThread::FinalizerThreadWorker(void*) + 115\r\n7   libcoreclr.dylib              \t0x000000010782d6da ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) + 378\r\n8   libcoreclr.dylib              \t0x000000010782dde9 ManagedThreadBase::FinalizerBase(void (*)(void*)) + 73\r\n9   libcoreclr.dylib              \t0x00000001078ada4c FinalizerThread::FinalizerThreadStart(void*) + 188\r\n10  libcoreclr.dylib              \t0x00000001076a9dd8 CorUnix::CPalThread::ThreadEntry(void*) + 328\r\n11  libsystem_pthread.dylib       \t0x00007fffa44ab93b _pthread_body + 180\r\n12  libsystem_pthread.dylib       \t0x00007fffa44ab887 _pthread_start + 286\r\n13  libsystem_pthread.dylib       \t0x00007fffa44ab08d thread_start + 13\r\n\r\nThread 4:\r\n0   libsystem_kernel.dylib        \t0x00007fffa43c0a3e __open + 10\r\n1   libcoreclr.dylib              \t0x000000010771bdaf TwoWayPipe::WaitForConnection() + 31\r\n2   libcoreclr.dylib              \t0x0000000107713be1 DbgTransportSession::TransportWorker() + 1569\r\n3   libcoreclr.dylib              \t0x00000001077120d9 DbgTransportSession::TransportWorkerStatic(void*) + 9\r\n4   libcoreclr.dylib              \t0x00000001076a9dd8 CorUnix::CPalThread::ThreadEntry(void*) + 328\r\n5   libsystem_pthread.dylib       \t0x00007fffa44ab93b _pthread_body + 180\r\n6   libsystem_pthread.dylib       \t0x00007fffa44ab887 _pthread_start + 286\r\n7   libsystem_pthread.dylib       \t0x00007fffa44ab08d thread_start + 13\r\n\r\nThread 5:\r\n0   libsystem_kernel.dylib        \t0x00007fffa43c0bf2 __psynch_cvwait + 10\r\n1   libsystem_pthread.dylib       \t0x00007fffa44ac7fa _pthread_cond_wait + 712\r\n2   libcoreclr.dylib              \t0x000000010769f312 CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData*, unsigned int, CorUnix::ThreadWakeupReason*, unsigned int*) + 338\r\n3   libcoreclr.dylib              \t0x000000010769ef38 CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread*, unsigned int, bool, bool, CorUnix::ThreadWakeupReason*, unsigned int*) + 440\r\n4   libcoreclr.dylib              \t0x00000001076a3e59 CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread*, unsigned int, void* const*, int, unsigned int, int) + 1833\r\n5   libcoreclr.dylib              \t0x00000001077105da DebuggerRCThread::MainLoop() + 266\r\n6   libcoreclr.dylib              \t0x0000000107710477 DebuggerRCThread::ThreadProc() + 263\r\n7   libcoreclr.dylib              \t0x0000000107710124 DebuggerRCThread::ThreadProcStatic(void*) + 132\r\n8   libcoreclr.dylib              \t0x00000001076a9dd8 CorUnix::CPalThread::ThreadEntry(void*) + 328\r\n9   libsystem_pthread.dylib       \t0x00007fffa44ab93b _pthread_body + 180\r\n10  libsystem_pthread.dylib       \t0x00007fffa44ab887 _pthread_start + 286\r\n11  libsystem_pthread.dylib       \t0x00007fffa44ab08d thread_start + 13\r\n\r\nThread 6 Crashed:\r\n0   libsystem_kernel.dylib        \t0x00007fffa43c0d42 __pthread_kill + 10\r\n1   libsystem_pthread.dylib       \t0x00007fffa44ae457 pthread_kill + 90\r\n2   libsystem_c.dylib             \t0x00007fffa4326420 abort + 129\r\n3   libclrjit.dylib               \t0x000000010860bcb0 SEHExceptionThread(void*) + 1856\r\n4   libsystem_pthread.dylib       \t0x00007fffa44ab93b _pthread_body + 180\r\n5   libsystem_pthread.dylib       \t0x00007fffa44ab887 _pthread_start + 286\r\n6   libsystem_pthread.dylib       \t0x00007fffa44ab08d thread_start + 13\r\n\r\nThread 6 crashed with X86 Thread State (64-bit):\r\n  rax: 0x0000000000000000  rbx: 0x0000000000000006  rcx: 0x000070000a239508  rdx: 0x0000000000000000\r\n  rdi: 0x0000000000001603  rsi: 0x0000000000000006  rbp: 0x000070000a239530  rsp: 0x000070000a239508\r\n   r8: 0x0000000000000048   r9: 0xffffffffffffffb8  r10: 0x0000000008000000  r11: 0x0000000000000206\r\n  r12: 0x0000000000000000  r13: 0x00007fff57f8b000  r14: 0x000070000a23b000  r15: 0x00000000c0000005\r\n  rip: 0x00007fffa43c0d42  rfl: 0x0000000000000206  cr2: 0x00007fffad191128\r\n  \r\nLogical CPU:     0\r\nError Code:      0x02000148\r\nTrap Number:     133\r\n\r\n\r\nBinary Images:\r\n       0x107474000 -        0x107492ff7 +dotnet (0) <C24B1436-686C-30F9-A727-B02B09F3A26B> /usr/local/share/dotnet/dotnet\r\n       0x1074cc000 -        0x10757aff7 +libhostfxr.dylib (0) <A85A8494-C374-303C-9180-48225F5699F1> /usr/local/share/dotnet/host/fxr/2.0.0/libhostfxr.dylib\r\n       0x107588000 -        0x107651ff7 +libhostpolicy.dylib (0) <9C839BC7-3040-3831-90D4-0EA05DF86148> /usr/local/share/dotnet/shared/Microsoft.NETCore.App/2.0.0/libhostpolicy.dylib\r\n       0x107660000 -        0x107b7dff7 +libcoreclr.dylib (0) <FBCAF87E-7DF4-3360-BAD5-50F482435316> /usr/local/share/dotnet/shared/Microsoft.NETCore.App/2.0.0/libcoreclr.dylib\r\n       0x107f16000 -        0x107f21ff7 +System.Globalization.Native.dylib (0) <ECEABFB4-4FFE-3339-9E1B-1E779A66072D> /usr/local/share/dotnet/shared/Microsoft.NETCore.App/2.0.0/System.Globalization.Native.dylib\r\n       0x107f28000 -        0x107f30ff7 +System.Native.dylib (0) <7395F3BE-4BD9-384F-B1EE-73E99E36C0FC> /usr/local/share/dotnet/shared/Microsoft.NETCore.App/2.0.0/System.Native.dylib\r\n       0x108039000 -        0x108076dc7  dyld (433.5) <322C06B7-8878-311D-888C-C8FD2CA96FF3> /usr/lib/dyld\r\n       0x10843d000 -        0x108653ff7 +libclrjit.dylib (0) <086DFAF9-6643-349C-8E1B-F6B9F4E9A530> /usr/local/share/dotnet/shared/Microsoft.NETCore.App/2.0.0/libclrjit.dylib\r\n    0x7fff8b5df000 -     0x7fff8b5dffff  com.apple.Accelerate (1.11 - Accelerate 1.11) <916E360F-323C-3AE1-AB3D-D1F3B284AEE9> /System/Library/Frameworks/Accelerate.framework/Versions/A/Accelerate\r\n    0x7fff8b5f8000 -     0x7fff8bb11feb  com.apple.vImage (8.1 - ???) <B58A7937-BEE2-38FE-87F4-5D5F40D31DC9> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vImage.framework/Versions/A/vImage\r\n    0x7fff8bb12000 -     0x7fff8bc83ff3  libBLAS.dylib (1185.50.4) <4087FFE0-627E-3623-96B4-F0A9A1991E09> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib\r\n    0x7fff8bc84000 -     0x7fff8bc98ffb  libBNNS.dylib (15) <254698C7-7D36-3FFF-864E-ADEEEE543076> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBNNS.dylib\r\n    0x7fff8bc99000 -     0x7fff8c08ffef  libLAPACK.dylib (1185.50.4) <C35FFB2F-A0E6-3903-8A3C-113A74BCBCA2> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLAPACK.dylib\r\n    0x7fff8c090000 -     0x7fff8c0a6fff  libLinearAlgebra.dylib (1185.50.4) <345CAACF-7263-36EF-B69B-793EA8B390AF> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLinearAlgebra.dylib\r\n    0x7fff8c0a7000 -     0x7fff8c0adfff  libQuadrature.dylib (3) <EF56C8E6-DE22-3C69-B543-A8648F335FDD> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libQuadrature.dylib\r\n    0x7fff8c0ae000 -     0x7fff8c0c2ff7  libSparseBLAS.dylib (1185.50.4) <67BA432E-FB59-3C78-A8BE-ED4274CBC359> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libSparseBLAS.dylib\r\n    0x7fff8c0c3000 -     0x7fff8c24afe7  libvDSP.dylib (600.60.1) <4155F45B-41CD-3782-AE8F-7AE740FD83C3> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libvDSP.dylib\r\n    0x7fff8c24b000 -     0x7fff8c2fdfff  libvMisc.dylib (600.60.1) <E18365D7-DCC4-3304-A8D1-395E656D7B99> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libvMisc.dylib\r\n    0x7fff8c2fe000 -     0x7fff8c2fefff  com.apple.Accelerate.vecLib (3.11 - vecLib 3.11) <7C5733E7-0568-3E7D-AF61-160F19FED544> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/vecLib\r\n    0x7fff8d3a8000 -     0x7fff8d3a8fff  com.apple.ApplicationServices (48 - 48) <DA687F9A-7B2D-342B-8796-16E45344F853> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/ApplicationServices\r\n    0x7fff8d3a9000 -     0x7fff8d417ff7  com.apple.ApplicationServices.ATS (377 - 422.2) <A31D17BE-F747-39FB-9A84-5F2F8891204C> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/ATS\r\n    0x7fff8d4b1000 -     0x7fff8d5e0ff7  libFontParser.dylib (194.12) <73C3946D-EF92-3AC1-89C3-0E75B2A85325> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/Resources/libFontParser.dylib\r\n    0x7fff8d5e1000 -     0x7fff8d62bfff  libFontRegistry.dylib (196.4) <EA96AE47-3369-3DEA-BB82-98348ADBD85B> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/Resources/libFontRegistry.dylib\r\n    0x7fff8d728000 -     0x7fff8d7d2ff7  com.apple.ColorSync (4.12.0 - 502.2) <ACA4001E-A0E3-33F6-9CD6-EEC2AA15E322> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ColorSync.framework/Versions/A/ColorSync\r\n    0x7fff8d7d3000 -     0x7fff8d824fff  com.apple.HIServices (1.22 - 593) <045870A9-1D92-3FEF-8722-671E99A35E71> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/HIServices.framework/Versions/A/HIServices\r\n    0x7fff8d825000 -     0x7fff8d834ff3  com.apple.LangAnalysis (1.7.0 - 1.7.0) <2CBE7F61-2056-3F96-99A1-0D527796AFA6> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/LangAnalysis.framework/Versions/A/LangAnalysis\r\n    0x7fff8d835000 -     0x7fff8d882fff  com.apple.print.framework.PrintCore (12 - 491) <5027FD58-F0EE-33E4-8577-934CA06CD2AF> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/PrintCore\r\n    0x7fff8d883000 -     0x7fff8d8befff  com.apple.QD (3.12 - 313) <B339C41D-8CDF-3342-8414-F9717DCCADD4> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/QD.framework/Versions/A/QD\r\n    0x7fff8d8bf000 -     0x7fff8d8cafff  com.apple.speech.synthesis.framework (6.6.2 - 6.6.2) <7853EFF4-62B9-394E-B7B8-41A645656820> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/SpeechSynthesis.framework/Versions/A/SpeechSynthesis\r\n    0x7fff8d8cb000 -     0x7fff8dad7ff7  com.apple.audio.toolbox.AudioToolbox (1.14 - 1.14) <01518CAB-7DAD-3F09-83F8-B9FE0ABE998F> /System/Library/Frameworks/AudioToolbox.framework/Versions/A/AudioToolbox\r\n    0x7fff8dc41000 -     0x7fff8e01bfff  com.apple.CFNetwork (811.5.4 - 811.5.4) <46B1227B-F38C-3F8E-B0B5-5D9861ABF36B> /System/Library/Frameworks/CFNetwork.framework/Versions/A/CFNetwork\r\n    0x7fff8e637000 -     0x7fff8e6c4fff  com.apple.audio.CoreAudio (4.3.0 - 4.3.0) <78767F88-91D4-31CE-AAC6-1F9407F479BB> /System/Library/Frameworks/CoreAudio.framework/Versions/A/CoreAudio\r\n    0x7fff8e6d9000 -     0x7fff8e9d4fff  com.apple.CoreData (120 - 754.2) <4C9CAB2C-60D4-3694-A0A0-5B04B14BD14E> /System/Library/Frameworks/CoreData.framework/Versions/A/CoreData\r\n    0x7fff8ea83000 -     0x7fff8ef1cff7  com.apple.CoreFoundation (6.9 - 1349.8) <09ED473E-5DE8-307F-B55C-16F6419236D5> /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation\r\n    0x7fff8ef1d000 -     0x7fff8f59ffff  com.apple.CoreGraphics (2.0 - 1070.22) <FAB476BB-B5CD-3936-8AFC-41229DBDF0E8> /System/Library/Frameworks/CoreGraphics.framework/Versions/A/CoreGraphics\r\n    0x7fff8f948000 -     0x7fff8f948fff  com.apple.CoreServices (775.19 - 775.19) <7255917D-EFBB-3BE2-A8FD-DAD631BC0949> /System/Library/Frameworks/CoreServices.framework/Versions/A/CoreServices\r\n    0x7fff8f949000 -     0x7fff8f99afff  com.apple.AE (712.5 - 712.5) <61F2AE2C-E04E-3FDF-9E88-201325136C83> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/AE.framework/Versions/A/AE\r\n    0x7fff8f99b000 -     0x7fff8fc76ff7  com.apple.CoreServices.CarbonCore (1159.6 - 1159.6) <08AC074C-965B-3EDF-8E45-0707C8DE9EAD> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/CarbonCore.framework/Versions/A/CarbonCore\r\n    0x7fff8fc77000 -     0x7fff8fcaafff  com.apple.DictionaryServices (1.2 - 274) <D23866E2-F7C8-3984-A9D4-96552CCDE573> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/DictionaryServices.framework/Versions/A/DictionaryServices\r\n    0x7fff8fcab000 -     0x7fff8fcb3ff3  com.apple.CoreServices.FSEvents (1230.50.1 - 1230.50.1) <2AD1B0E5-7214-37C4-8D11-A27C9CAC0F74> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/FSEvents.framework/Versions/A/FSEvents\r\n    0x7fff8fcb4000 -     0x7fff8fe20ff7  com.apple.LaunchServices (775.19 - 775.19) <B75A0C49-E376-358C-81EE-6EFB0F605801> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/LaunchServices\r\n    0x7fff8fe21000 -     0x7fff8fed1ffb  com.apple.Metadata (10.7.0 - 1075.40) <B2FFCC10-5A9E-396B-B495-3D6C867669EE> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/Metadata.framework/Versions/A/Metadata\r\n    0x7fff8fed2000 -     0x7fff8ff31fff  com.apple.CoreServices.OSServices (775.19 - 775.19) <4140569A-1848-3765-A52B-BB61C35CF88F> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/OSServices.framework/Versions/A/OSServices\r\n    0x7fff8ff32000 -     0x7fff8ffa2fff  com.apple.SearchKit (1.4.0 - 1.4.0) <7A6DDA2B-03F1-3137-BA9E-1CC211973E26> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/SearchKit.framework/Versions/A/SearchKit\r\n    0x7fff8ffa3000 -     0x7fff8ffe8ff7  com.apple.coreservices.SharedFileList (38 - 38) <DA096678-93AB-3291-BDE2-482F1D544589> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/SharedFileList.framework/Versions/A/SharedFileList\r\n    0x7fff90071000 -     0x7fff901beffb  com.apple.CoreText (352.0 - 544.15) <BF0EE575-BB7E-3BF9-9029-232B4ADC24E4> /System/Library/Frameworks/CoreText.framework/Versions/A/CoreText\r\n    0x7fff90364000 -     0x7fff90369fff  com.apple.DiskArbitration (2.7 - 2.7) <70F56042-EF04-3BAF-9E04-90F423FB2BCC> /System/Library/Frameworks/DiskArbitration.framework/Versions/A/DiskArbitration\r\n    0x7fff904fb000 -     0x7fff908a1fff  com.apple.Foundation (6.9 - 1349.91) <A37CB4EC-0730-3DD6-9358-60491BF40EF2> /System/Library/Frameworks/Foundation.framework/Versions/C/Foundation\r\n    0x7fff908cd000 -     0x7fff908feff7  com.apple.GSS (4.0 - 2.0) <6FADED0B-0425-3567-A75A-040C5A4638EB> /System/Library/Frameworks/GSS.framework/Versions/A/GSS\r\n    0x7fff90a62000 -     0x7fff90af8ff7  com.apple.framework.IOKit (2.0.2 - 1324.60.3) <7CE4C98B-107C-3AAA-B49A-F2ACFCBBF526> /System/Library/Frameworks/IOKit.framework/Versions/A/IOKit\r\n    0x7fff90af9000 -     0x7fff90affffb  com.apple.IOSurface (159.9 - 159.9) <08F1A246-1367-32EC-B3CE-724379409729> /System/Library/Frameworks/IOSurface.framework/Versions/A/IOSurface\r\n    0x7fff90b52000 -     0x7fff90cb2fef  com.apple.ImageIO.framework (3.3.0 - 1599.12) <E54ADBF0-6001-3DEB-AEB0-3F857A781E06> /System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO\r\n    0x7fff90cb3000 -     0x7fff90cb7fff  libGIF.dylib (1599.12) <A0836C44-9566-32A3-ACCF-82A5BAF2E521> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libGIF.dylib\r\n    0x7fff90cb8000 -     0x7fff90da8ff7  libJP2.dylib (1599.12) <0DB4F152-B36D-365C-97B1-34F1C114982B> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libJP2.dylib\r\n    0x7fff90da9000 -     0x7fff90dccffb  libJPEG.dylib (1599.12) <2F66BA16-D569-35AD-A4BB-7A1909F1BF11> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libJPEG.dylib\r\n    0x7fff90dcd000 -     0x7fff90df4ff7  libPng.dylib (1599.12) <A068239E-7DB3-33AD-BEA9-499D8DEF771B> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libPng.dylib\r\n    0x7fff90df5000 -     0x7fff90df7ff3  libRadiance.dylib (1599.12) <D26D6FC9-1175-38AB-ACAA-0CA073FD3978> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libRadiance.dylib\r\n    0x7fff90df8000 -     0x7fff90e46ffb  libTIFF.dylib (1599.12) <5D161E6A-D279-37A0-9F5F-A71A4C13BB09> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libTIFF.dylib\r\n    0x7fff91baf000 -     0x7fff91bc8ff7  com.apple.Kerberos (3.0 - 1) <B9D242EB-E325-3A21-9812-C77CBBFB0D51> /System/Library/Frameworks/Kerberos.framework/Versions/A/Kerberos\r\n    0x7fff92cec000 -     0x7fff92cf4fff  com.apple.NetFS (6.0 - 4.0) <14A24D00-5673-330A-959D-87F72040DEFF> /System/Library/Frameworks/NetFS.framework/Versions/A/NetFS\r\n    0x7fff92f23000 -     0x7fff92f3cffb  com.apple.CFOpenDirectory (10.12 - 194) <A64E9A01-3F6E-36EA-9C10-88C564A68C9D> /System/Library/Frameworks/OpenDirectory.framework/Versions/A/Frameworks/CFOpenDirectory.framework/Versions/A/CFOpenDirectory\r\n    0x7fff92f3d000 -     0x7fff92f48ff7  com.apple.OpenDirectory (10.12 - 194) <4298FFD0-B1A7-3064-AF5B-708B3FA38671> /System/Library/Frameworks/OpenDirectory.framework/Versions/A/OpenDirectory\r\n    0x7fff94d8f000 -     0x7fff95091ff7  com.apple.security (7.0 - 57740.60.18) <005E8C96-40B6-35E3-B58B-888A5F5957C2> /System/Library/Frameworks/Security.framework/Versions/A/Security\r\n    0x7fff95092000 -     0x7fff95107fff  com.apple.securityfoundation (6.0 - 55132.50.7) <15C53957-A9DE-31AE-A192-949244F47CD7> /System/Library/Frameworks/SecurityFoundation.framework/Versions/A/SecurityFoundation\r\n    0x7fff95132000 -     0x7fff95135ff3  com.apple.xpc.ServiceManagement (1.0 - 1) <BE0F9708-0B55-3E78-A15E-C287B8ED13BA> /System/Library/Frameworks/ServiceManagement.framework/Versions/A/ServiceManagement\r\n    0x7fff954bc000 -     0x7fff9552bff7  com.apple.SystemConfiguration (1.14 - 1.14) <3FFD3930-B307-3E31-9FA6-12221EB0F969> /System/Library/Frameworks/SystemConfiguration.framework/Versions/A/SystemConfiguration\r\n    0x7fff97ecc000 -     0x7fff97f5797f  com.apple.AppleJPEG (1.0 - 1) <B9E9570D-04A4-34E4-B756-D200043B25B8> /System/Library/PrivateFrameworks/AppleJPEG.framework/Versions/A/AppleJPEG\r\n    0x7fff999df000 -     0x7fff999e8ffb  com.apple.CommonAuth (4.0 - 2.0) <216950CB-269F-3476-BA17-D6363AC49FBC> /System/Library/PrivateFrameworks/CommonAuth.framework/Versions/A/CommonAuth\r\n    0x7fff9a131000 -     0x7fff9a141fff  com.apple.CoreEmoji (1.0 - 40.3.3) <E9A28301-2D79-3A97-A046-028258A6ABE5> /System/Library/PrivateFrameworks/CoreEmoji.framework/Versions/A/CoreEmoji\r\n    0x7fff9d1c8000 -     0x7fff9d23eff3  com.apple.Heimdal (4.0 - 2.0) <8F9C9041-66D5-36C9-8A4C-1658035C311D> /System/Library/PrivateFrameworks/Heimdal.framework/Versions/A/Heimdal\r\n    0x7fff9d980000 -     0x7fff9db37fff  com.apple.LanguageModeling (1.0 - 123.2.5) <A8CA965F-0399-310D-91C3-B93DDDE9A442> /System/Library/PrivateFrameworks/LanguageModeling.framework/Versions/A/LanguageModeling\r\n    0x7fff9e654000 -     0x7fff9e67cff7  com.apple.MultitouchSupport.framework (368.16 - 368.16) <9E602B4A-22CD-3CF3-B284-78D5123C9AE8> /System/Library/PrivateFrameworks/MultitouchSupport.framework/Versions/A/MultitouchSupport\r\n    0x7fff9e72e000 -     0x7fff9e739fff  com.apple.NetAuth (6.2 - 6.2) <97F487D6-8089-31A8-B68C-6C1EAC6ED1B5> /System/Library/PrivateFrameworks/NetAuth.framework/Versions/A/NetAuth\r\n    0x7fffa158a000 -     0x7fffa1590ff7  com.apple.TCC (1.0 - 1) <911B534B-4AC7-34E4-935E-E42ECD008CBC> /System/Library/PrivateFrameworks/TCC.framework/Versions/A/TCC\r\n    0x7fffa2999000 -     0x7fffa299bffb  com.apple.loginsupport (1.0 - 1) <F3140B97-12C3-35A7-9D3D-43DA2D13C113> /System/Library/PrivateFrameworks/login.framework/Versions/A/Frameworks/loginsupport.framework/Versions/A/loginsupport\r\n    0x7fffa29f0000 -     0x7fffa2a0bff7  libCRFSuite.dylib (34) <F78B7F5F-0B4F-35C6-AA2F-84EE9CB22137> /usr/lib/libCRFSuite.dylib\r\n    0x7fffa2a0c000 -     0x7fffa2a17fff  libChineseTokenizer.dylib (21) <0886E908-A825-36AF-B94B-2361FD8BC2A1> /usr/lib/libChineseTokenizer.dylib\r\n    0x7fffa2aa9000 -     0x7fffa2aaaff3  libDiagnosticMessagesClient.dylib (102) <84A04D24-0E60-3810-A8C0-90A65E2DF61A> /usr/lib/libDiagnosticMessagesClient.dylib\r\n    0x7fffa2ce2000 -     0x7fffa2ce2fff  libOpenScriptingUtil.dylib (172) <90743888-C1E8-34E3-924E-1A754B2B63B9> /usr/lib/libOpenScriptingUtil.dylib\r\n    0x7fffa2ce8000 -     0x7fffa2ce9ffb  libSystem.B.dylib (1238.60.2) <F18AC1E7-C6F1-34B1-8069-BE571B3231D4> /usr/lib/libSystem.B.dylib\r\n    0x7fffa2d55000 -     0x7fffa2d80ff3  libarchive.2.dylib (41.70.1) <A3FA7D6E-3D68-3524-8B48-EB2ECA44B13B> /usr/lib/libarchive.2.dylib\r\n    0x7fffa2e01000 -     0x7fffa2e01ff3  libauto.dylib (187) <34388D0B-C539-3C1B-9408-2BC152162E43> /usr/lib/libauto.dylib\r\n    0x7fffa2e02000 -     0x7fffa2e12ff3  libbsm.0.dylib (34) <20084796-B04D-3B35-A003-EA11459557A9> /usr/lib/libbsm.0.dylib\r\n    0x7fffa2e13000 -     0x7fffa2e21ff7  libbz2.1.0.dylib (38) <ADFA329A-DCE7-356D-8F09-A3168DFC6610> /usr/lib/libbz2.1.0.dylib\r\n    0x7fffa2e22000 -     0x7fffa2e78ff7  libc++.1.dylib (307.5) <0B43BB5D-E6EB-3464-8DE9-B41AC8ED9D1C> /usr/lib/libc++.1.dylib\r\n    0x7fffa2e79000 -     0x7fffa2ea2ff7  libc++abi.dylib (307.4) <BC271AD3-831B-362A-9DA7-E8C51F285FE4> /usr/lib/libc++abi.dylib\r\n    0x7fffa2ea3000 -     0x7fffa2eb3ffb  libcmph.dylib (6) <2B5D405E-2D0B-3320-ABD6-622934C86ABE> /usr/lib/libcmph.dylib\r\n    0x7fffa2eb4000 -     0x7fffa2ecafcf  libcompression.dylib (39) <F2726F95-F54E-3B21-BCB5-F7151DEFDC2F> /usr/lib/libcompression.dylib\r\n    0x7fffa2ecb000 -     0x7fffa2ecbff7  libcoretls.dylib (121.50.4) <64B1001E-10F6-3542-A3B2-C4B49F51817F> /usr/lib/libcoretls.dylib\r\n    0x7fffa2ecc000 -     0x7fffa2ecdff3  libcoretls_cfhelpers.dylib (121.50.4) <1A10303E-5EB0-3C7C-9165-021FCDFD934D> /usr/lib/libcoretls_cfhelpers.dylib\r\n    0x7fffa320a000 -     0x7fffa325dff7  libcups.2.dylib (450) <9950BFCB-7882-33C9-9ECF-CE66773C5657> /usr/lib/libcups.2.dylib\r\n    0x7fffa32da000 -     0x7fffa32dafff  libenergytrace.dylib (15) <A1B040A2-7977-3097-9ADF-34FF181EB970> /usr/lib/libenergytrace.dylib\r\n    0x7fffa32ea000 -     0x7fffa32efff7  libheimdal-asn1.dylib (498.50.8) <A40E3196-235E-34CE-AD9A-8D1AFC5DE004> /usr/lib/libheimdal-asn1.dylib\r\n    0x7fffa32f0000 -     0x7fffa33e2ff7  libiconv.2.dylib (50) <42125B35-81D7-3FC4-9475-A26DBE10884D> /usr/lib/libiconv.2.dylib\r\n    0x7fffa33e3000 -     0x7fffa3608ffb  libicucore.A.dylib (57166.0.1) <CCD2ED24-3071-383B-925D-8D763BB12A6F> /usr/lib/libicucore.A.dylib\r\n    0x7fffa360e000 -     0x7fffa360ffff  liblangid.dylib (126) <2085E7A7-9A34-3735-87F4-F174EF8EABF0> /usr/lib/liblangid.dylib\r\n    0x7fffa3610000 -     0x7fffa3629ffb  liblzma.5.dylib (10) <44BD0279-99DD-36B5-8A6E-C11432E2098D> /usr/lib/liblzma.5.dylib\r\n    0x7fffa362a000 -     0x7fffa3640ff7  libmarisa.dylib (5) <9030D214-5D0F-30CB-AC03-902C63909362> /usr/lib/libmarisa.dylib\r\n    0x7fffa3641000 -     0x7fffa38e9ff7  libmecabra.dylib (744.8) <D429FCC9-42A4-38B3-8784-44024BC859EF> /usr/lib/libmecabra.dylib\r\n    0x7fffa391c000 -     0x7fffa3996ff3  libnetwork.dylib (856.60.1) <191E99F5-4723-3180-8013-02AF2F9AE4B8> /usr/lib/libnetwork.dylib\r\n    0x7fffa3997000 -     0x7fffa3d69047  libobjc.A.dylib (709.1) <70614861-0340-32E2-85ED-FE65759CDFFA> /usr/lib/libobjc.A.dylib\r\n    0x7fffa3d6c000 -     0x7fffa3d70fff  libpam.2.dylib (21.30.1) <71EB0D88-DE84-3C8D-A2C5-58AA282BC5BC> /usr/lib/libpam.2.dylib\r\n    0x7fffa3d71000 -     0x7fffa3da2fff  libpcap.A.dylib (67.60.1) <F6BC6ED6-AEE4-3520-B248-0C342636E2B0> /usr/lib/libpcap.A.dylib\r\n    0x7fffa3dbf000 -     0x7fffa3ddbffb  libresolv.9.dylib (64) <A244AE4C-00B0-396C-98FF-97FE4DB3DA30> /usr/lib/libresolv.9.dylib\r\n    0x7fffa3e2b000 -     0x7fffa3f79ff7  libsqlite3.dylib (254.8) <1ECF7DF7-7A07-3B4B-A63B-F4EFF6BC7ACF> /usr/lib/libsqlite3.dylib\r\n    0x7fffa406e000 -     0x7fffa407bfff  libxar.1.dylib (357) <69547C64-E811-326F-BBED-490C6361BDCB> /usr/lib/libxar.1.dylib\r\n    0x7fffa407c000 -     0x7fffa416bfff  libxml2.2.dylib (30.17) <D4C3E467-37C6-34DE-8A1B-E7BFC29985E9> /usr/lib/libxml2.2.dylib\r\n    0x7fffa416c000 -     0x7fffa4195fff  libxslt.1.dylib (15.9) <00735AD5-B62D-3E83-86AC-5533E4E2B102> /usr/lib/libxslt.1.dylib\r\n    0x7fffa4196000 -     0x7fffa41a7ff3  libz.1.dylib (67) <46E3FFA2-4328-327A-8D34-A03E20BFFB8E> /usr/lib/libz.1.dylib\r\n    0x7fffa41b6000 -     0x7fffa41baff7  libcache.dylib (79) <093A4DAB-8385-3D47-A350-E20CB7CCF7BF> /usr/lib/system/libcache.dylib\r\n    0x7fffa41bb000 -     0x7fffa41c5fff  libcommonCrypto.dylib (60092.50.5) <8A64D1B0-C70E-385C-92F0-E669079FDA90> /usr/lib/system/libcommonCrypto.dylib\r\n    0x7fffa41c6000 -     0x7fffa41cdfff  libcompiler_rt.dylib (62) <55D47421-772A-32AB-B529-1A46C2F43B4D> /usr/lib/system/libcompiler_rt.dylib\r\n    0x7fffa41ce000 -     0x7fffa41d6fff  libcopyfile.dylib (138) <819BEA3C-DF11-3E3D-A1A1-5A51C5BF1961> /usr/lib/system/libcopyfile.dylib\r\n    0x7fffa41d7000 -     0x7fffa425afdf  libcorecrypto.dylib (442.50.19) <65D7165E-2E71-335D-A2D6-33F78E2DF0C1> /usr/lib/system/libcorecrypto.dylib\r\n    0x7fffa425b000 -     0x7fffa428cfff  libdispatch.dylib (703.50.37) <6582BAD6-ED27-3B30-B620-90B1C5A4AE3C> /usr/lib/system/libdispatch.dylib\r\n    0x7fffa428d000 -     0x7fffa4292ffb  libdyld.dylib (433.5) <9B2AC56D-107C-3541-A127-9094A751F2C9> /usr/lib/system/libdyld.dylib\r\n    0x7fffa4293000 -     0x7fffa4293ffb  libkeymgr.dylib (28) <7AA011A9-DC21-3488-BF73-3B5B14D1FDD6> /usr/lib/system/libkeymgr.dylib\r\n    0x7fffa4294000 -     0x7fffa42a0fff  libkxld.dylib (3789.70.16) <BD02EF3F-6E09-3A64-AB21-553D5B1D2859> /usr/lib/system/libkxld.dylib\r\n    0x7fffa42a1000 -     0x7fffa42a1fff  liblaunch.dylib (972.70.1) <B856ABD2-896E-3DE0-B2C8-146A6AF8E2A7> /usr/lib/system/liblaunch.dylib\r\n    0x7fffa42a2000 -     0x7fffa42a7ff3  libmacho.dylib (898) <17D5D855-F6C3-3B04-B680-E9BF02EF8AED> /usr/lib/system/libmacho.dylib\r\n    0x7fffa42a8000 -     0x7fffa42aaff3  libquarantine.dylib (85.50.1) <12448CC2-378E-35F3-BE33-9DC395A5B970> /usr/lib/system/libquarantine.dylib\r\n    0x7fffa42ab000 -     0x7fffa42acffb  libremovefile.dylib (45) <38D4CB9C-10CD-30D3-8B7B-A515EC75FE85> /usr/lib/system/libremovefile.dylib\r\n    0x7fffa42ad000 -     0x7fffa42c5ff7  libsystem_asl.dylib (349.50.5) <096E4228-3B7C-30A6-8B13-EC909A64499A> /usr/lib/system/libsystem_asl.dylib\r\n    0x7fffa42c6000 -     0x7fffa42c6ff7  libsystem_blocks.dylib (67) <10DC5404-73AB-35B3-A277-A8AFECB476EB> /usr/lib/system/libsystem_blocks.dylib\r\n    0x7fffa42c7000 -     0x7fffa4354fef  libsystem_c.dylib (1158.50.2) <E5AE5244-7D0C-36AC-8BB6-C7AE7EA52A4B> /usr/lib/system/libsystem_c.dylib\r\n    0x7fffa4355000 -     0x7fffa4358ffb  libsystem_configuration.dylib (888.60.2) <BECC01A2-CA8D-31E6-BCDF-D452965FA976> /usr/lib/system/libsystem_configuration.dylib\r\n    0x7fffa4359000 -     0x7fffa435cfff  libsystem_coreservices.dylib (41.4) <7D26DE79-B424-3450-85E1-F7FAB32714AB> /usr/lib/system/libsystem_coreservices.dylib\r\n    0x7fffa435d000 -     0x7fffa4375fff  libsystem_coretls.dylib (121.50.4) <EC6FCF07-DCFB-3A03-9CC9-6DD3709974C6> /usr/lib/system/libsystem_coretls.dylib\r\n    0x7fffa4376000 -     0x7fffa437cfff  libsystem_dnssd.dylib (765.50.9) <CC960215-0B1B-3822-A13A-3DDE96FA796F> /usr/lib/system/libsystem_dnssd.dylib\r\n    0x7fffa437d000 -     0x7fffa43a6ff7  libsystem_info.dylib (503.50.4) <611DB84C-BF70-3F92-8702-B9F28A900920> /usr/lib/system/libsystem_info.dylib\r\n    0x7fffa43a7000 -     0x7fffa43c9ff7  libsystem_kernel.dylib (3789.70.16) <34B1F16C-BC9C-3C5F-9045-0CAE91CB5914> /usr/lib/system/libsystem_kernel.dylib\r\n    0x7fffa43ca000 -     0x7fffa4411fe7  libsystem_m.dylib (3121.6) <86D499B5-BBDC-3D3B-8A4E-97AE8E6672A4> /usr/lib/system/libsystem_m.dylib\r\n    0x7fffa4412000 -     0x7fffa4430ff7  libsystem_malloc.dylib (116.50.8) <A3D15F17-99A6-3367-8C7E-4280E8619C95> /usr/lib/system/libsystem_malloc.dylib\r\n    0x7fffa4431000 -     0x7fffa448affb  libsystem_network.dylib (856.60.1) <369D0221-56CA-3C3E-9EDE-94B41CAE77B7> /usr/lib/system/libsystem_network.dylib\r\n    0x7fffa448b000 -     0x7fffa4494ff3  libsystem_networkextension.dylib (563.60.2) <B021F2B3-8A75-3633-ABB0-FC012B8E9B0C> /usr/lib/system/libsystem_networkextension.dylib\r\n    0x7fffa4495000 -     0x7fffa449eff3  libsystem_notify.dylib (165.20.1) <B8160190-A069-3B3A-BDF6-2AA408221FAE> /usr/lib/system/libsystem_notify.dylib\r\n    0x7fffa449f000 -     0x7fffa44a7fe7  libsystem_platform.dylib (126.50.8) <897462FD-B318-321B-A554-E61982630F7E> /usr/lib/system/libsystem_platform.dylib\r\n    0x7fffa44a8000 -     0x7fffa44b2ff7  libsystem_pthread.dylib (218.60.3) <B8FB5E20-3295-39E2-B5EB-B464D1D4B104> /usr/lib/system/libsystem_pthread.dylib\r\n    0x7fffa44b3000 -     0x7fffa44b6ff7  libsystem_sandbox.dylib (592.70.1) <4B92EC49-ACD0-36AE-B07A-A2B8152EAF9D> /usr/lib/system/libsystem_sandbox.dylib\r\n    0x7fffa44b7000 -     0x7fffa44b8ff3  libsystem_secinit.dylib (24.50.4) <F78B847B-3565-3E4B-98A6-F7AD40392E2D> /usr/lib/system/libsystem_secinit.dylib\r\n    0x7fffa44b9000 -     0x7fffa44c0ffb  libsystem_symptoms.dylib (532.50.47) <3390E07C-C1CE-348F-ADBD-2C5440B45EAA> /usr/lib/system/libsystem_symptoms.dylib\r\n    0x7fffa44c1000 -     0x7fffa44d4ff7  libsystem_trace.dylib (518.70.1) <AC63A7FE-50D9-3A30-96E6-F6B7FF16E465> /usr/lib/system/libsystem_trace.dylib\r\n    0x7fffa44d5000 -     0x7fffa44daffb  libunwind.dylib (35.3) <3D50D8A8-C460-334D-A519-2DA841102C6B> /usr/lib/system/libunwind.dylib\r\n    0x7fffa44db000 -     0x7fffa4504ff7  libxpc.dylib (972.70.1) <BF896DF0-D8E9-31A8-A4B3-01120BFEEE52> /usr/lib/system/libxpc.dylib\r\n\r\nExternal Modification Summary:\r\n  Calls made by other processes targeting this process:\r\n    task_for_pid: 0\r\n    thread_create: 0\r\n    thread_set_state: 0\r\n  Calls made by this process:\r\n    task_for_pid: 0\r\n    thread_create: 0\r\n    thread_set_state: 0\r\n  Calls made by all processes on this machine:\r\n    task_for_pid: 4387680\r\n    thread_create: 0\r\n    thread_set_state: 0\r\n\r\nVM Region Summary:\r\nReadOnly portion of Libraries: Total=202.9M resident=0K(0%) swapped_out_or_unallocated=202.9M(100%)\r\nWritable regions: Total=149.3M written=0K(0%) resident=0K(0%) swapped_out=0K(0%) unallocated=149.3M(100%)\r\n \r\n                                VIRTUAL   REGION \r\nREGION TYPE                        SIZE    COUNT (non-coalesced) \r\n===========                     =======  ======= \r\nKernel Alloc Once                    8K        2 \r\nMALLOC                            59.1M       12 \r\nMALLOC guard page                   16K        4 \r\nSTACK GUARD                       56.0M        8 \r\nStack                             11.0M       14 \r\nVM_ALLOCATE                        2.2G      172 \r\nVM_ALLOCATE (reserved)              64K        2         reserved VM address space (unallocated)\r\n__DATA                            9936K      149 \r\n__LINKEDIT                       116.0M       10 \r\n__TEXT                            86.9M      149 \r\n__UNICODE                          556K        2 \r\nmapped file                       65.3M       85 \r\nshared memory                       12K        4 \r\n===========                     =======  ======= \r\nTOTAL                              2.6G      600 \r\nTOTAL, minus reserved VM space     2.6G      600 \r\n\r\nModel: MacBookPro11,5, BootROM MBP114.0172.B25, 4 processors, Intel Core i7, 2.5 GHz, 16 GB, SMC 2.30f2\r\nGraphics: AMD Radeon R9 M370X, AMD Radeon R9 M370X, PCIe, 2048 MB\r\nGraphics: Intel Iris Pro, Intel Iris Pro, Built-In\r\nMemory Module: BANK 0/DIMM0, 8 GB, DDR3, 1600 MHz, 0x802C, 0x31364B544631473634485A2D314736453120\r\nMemory Module: BANK 1/DIMM0, 8 GB, DDR3, 1600 MHz, 0x802C, 0x31364B544631473634485A2D314736453120\r\nAirPort: spairport_wireless_card_type_airport_extreme (0x14E4, 0x152), Broadcom BCM43xx 1.0 (7.21.171.130.1a1)\r\nBluetooth: Version 5.0.5f1, 3 services, 27 devices, 1 incoming serial ports\r\nNetwork Service: Wi-Fi, AirPort, en0\r\nSerial ATA Device: APPLE SSD SM0512G, 500.28 GB\r\nUSB Device: USB 3.0 Bus\r\nUSB Device: Apple Internal Keyboard / Trackpad\r\nUSB Device: Bluetooth USB Host Controller\r\nUSB Device: Hub\r\nUSB Device: Comfort Curve Keyboard 3000\r\nUSB Device: Gaming Mouse G402\r\nThunderbolt Bus: MacBook Pro, Apple Inc., 27.1\r\n```\r\n\r\nMSBuild (I guess from mono 5.4) compiles it, no problem. \r\nI can provide the project link, if needed.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nathanaeljones": {"issues": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/14611", "title": "How to locate executables in nuget packages", "body": "I'm looking for a way to access a nuget-packaged native executable (similar to how unmanaged dlls are loaded from the `runtimes/[rid]/native` folders of nuget packages because the DLL search path is modified). \r\n\r\nIf there's a way to determine or access these search paths, then it should be possible to locate an executable from a (or any) NuGet package.\r\n\r\nHopefully this is the right repo?", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/14611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "weshaggard": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/376fe3b645be95c905d24cdcbba44a731c70ce90", "message": "Merge pull request #15966 from weshaggard/MoveTo21Preview2\n\nMove from preview1 to preview2 in master branches"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/d4f7c7b8853c83c2dd937a5055d02dcb7816b65f", "message": "Move from preview1 to preview2 in master branches\n\npreview1 will be produced from the release/2.1 branch"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15067", "title": "[WIP] Attempt to fix the ARM test builds", "body": "cc @RussKeldorph @jashook @4creators \r\n\r\nContinuation on the ARM builds. I sure my first commit isn't going to do but hopefully it will help figure out if the directory change is causing the issue. ", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/23709833", "body": "@wtgodbe Is it on your list of tasks to eliminate this list of RID's? It is causing a lot more work to happen on each test leg then is needed and it also makes it difficult to bring up new platforms because it requires a build of the new platform before tests can happen. ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/23709833/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/24766823", "body": "I think so I left @dagood a similar comment on his corefx changes. ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/24766823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/25213181", "body": "@dpodder can you remember why you needed to explicitly call init-tools here? ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/25213181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/25216037", "body": "Is there a reason you couldn't call run.sh instead of directly calling dotnetcli msbuild? That would have correctly wrapped you and ensured you had the cli. ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/25216037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/25221195", "body": "I don't suggest you do that by parsing the output then that is a bad idea and very error prone. If you don't have a common way to share the version then I suggest you have the target you are calling take the msbuild versions and dump them to a .sh file or txt file that CMake can import. ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/25221195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/25238721", "body": "I know this has been in there a few months but I'm doing some infra work and I noticed this and think we should fix it. Can you please file an issue to clean this up? Thanks.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/25238721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/94507287", "body": "Why is this needed?", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/94507287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/94508055", "body": "I don't even know where those are coming from. @karajas do you think this is a side-effect of your build tools change?", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/94508055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/138183209", "body": "No longer needed. ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/138183209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/138183277", "body": "Why is this tmp folder needed?", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/138183277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/138186117", "body": "I believe you can pass the intermediate path to the task to avoid this. https://github.com/dotnet/buildtools/blob/master/src/Microsoft.DotNet.Build.Tasks.Feed/PushToBlobFeed.cs#L31 I suggest doing that.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/138186117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/138208603", "body": "IndexDirectory is essentially the temp directory where index files get written so you can pass it a path under intermediate root to keep those files isolated out of the source tree. ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/138208603/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/139015722", "body": "I don't you passing in the IndexDirectory yet. ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/139015722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/139039055", "body": "This ignore shouldn't be needed any longer. ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/139039055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/149804446", "body": "Updating. Thanks Davis. ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/149804446/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "jashook": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/b193c9eabbe56143f254bddab4a3c541f2c5ea08", "message": "Merge pull request #15959 from jashook/remove_arm_pr_trigger\n\nTurn off arm pr trigger"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/b16e4ca7785a27a0b05318b1f1ec66590b5682f4", "message": "Turn off arm pr trigger"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/140ba024bf6edb61744fe6b84bd635d389fe1413", "message": "Merge pull request #15815 from jashook/fix_helix_publish\n\nFix overwriting os/arch when publishing to helix"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/ed7cab5604c1bf49ea74f4b82c08eb0da41df64c", "message": "Fix overwriting os/arch when publishing to helix"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/240c607d3f5dcea6fa6aa642a4d9584e3b06b738", "message": "Merge pull request #15784 from fiigii/hwci\n\nAdd new CI mode for Intel HW intrinsics"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15813", "title": "Add innerloop tag for pri0 jobs", "body": "Everything that is not innerloop will run priority 1.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/46761844", "body": "Also we are working on x86 JIT bring up at the moment.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/46761844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59916301", "body": "A short comment here to explain what this does and why it is necessary would be nice.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59916301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59916979", "body": "Watch to make sure this is correct on mac. uname -p on OSX returns i386\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59916979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59928075", "body": "Ya I had to look it up as well. Which is why the comment is probably necessary.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59928075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "antofik": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/59714b683f40fac869050ca08acc5503e84dc776", "message": "Remove AppDomainLeaks configuration option (#15956)\n\nRemoved all usages of AppDomainLeaks configuration option and\r\nCHECK_APP_DOMAIN_LEAKS feature\r\n\r\nFix #12094"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bartonjs": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/af6388558f6723bd04dde5399e66bbb9cbb27964", "message": "Merge pull request #15936 from GrabYourPitchforks/levib/memory_nullref\n\nAllow implicit conversion of null arrays to empty Memory instances"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ufcpp": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/11bca94b4b0374ee8f1e4ec28d7140abf4521583", "message": "CharUnicodeInfo.GetUnicodeCategory(int codePoint) (#15911)\n\n* CharUnicodeInfo.GetUnicodeCategory(int codePoint)\r\n\r\nhttps://github.com/dotnet/corefx/issues/26173\r\n\r\n- renamed UnicodeCategory.InternalGetUnicodeCategory to GetUnicodeCategory\r\n- renamed its parameter ch to codePoint\r\n- made it public\r\n\r\n* fix build break"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tarekgh": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/09ac422897051e0ac143917b093b125f04277f90", "message": "Remove Redundant Resource entry (#15928)"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/dce9085e36908c076417ae56b5b8ce69480a29f2", "message": "Port servicing fix (#15802)\n\n* Port the servicing fix\r\n\r\nThis is porting the servcing fix https://github.com/dotnet/coreclr/commit/8ce622d569fae9feb160399db03dc2b86577be1b  with a small change to get rid of unsafe code in CultureData per Jan recommendation\r\n\r\n* remove un-needed lines\r\n\r\n* rename the variable name as it is not a pointer anymore"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/20596698", "body": "could you please add assert here? index > s.Length - count", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20596698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "mikem8361": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/37358edeb2bd2f2cd4e4ee0ebd7ecc021f1aee27", "message": "Revert \"Change just-in-time debugging registry keys. (#15722)\" (#15921)\n\nThis reverts commit 8b2cac974db3edde38e1a555455f53592d03b68e."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/5bcfde404803f85451cf0ee9fd6406734cb878ff", "message": "Add environment variable (COMPlus_EnableDiagnostics) to disable debugging and profiling. (#15878)\n\nTo disable the named pipes and semaphores created on linux execute \"export COMPlus_EnableDiagnostics=0\" before start the .NET Core program.\r\n\r\nOn Windows execute \"set COMPlus_EnableDiagnostics=0\" and on Linux execute \"export \"COMPlus_EnableDiagnostics=0\"\r\n\r\nRemoved the \"Telesto\" registry entry (old unnecessary Silverlight code) and Watson (always true) checks.\r\n\r\nFor issues #11769 and #8844."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/da381a716cc9a39897de45a764326ec10c3191f1", "message": "Fixed superpmi JIT debugging on desktop build. (#15773)"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/8b2cac974db3edde38e1a555455f53592d03b68e", "message": "Change just-in-time debugging registry keys. (#15722)\n\nFrom \"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AeDebug\" to \"SOFTWARE\\Microsoft\\.NETCore\\JITDebugging\"."}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/12598219", "body": "LGTM, but I'm don't really know that code that well.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/12598219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/13078149", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/13078149/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/58089369", "body": "Removing --only-keep-debug turns the objcopy into just a copy and not what I originally intended which is to copy just the symbols and source/line info.  Why are we doing this? \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/58089369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/58090679", "body": "The .dbg files are not meant to be used as the executable as in the above example.  They are meant to be installed side-by-side with the.so file and the native debuggers (lldb and gdb) will automatically use the symbols from them.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/58090679/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "sergign60": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/f1c732878777092468ef8da8cd61aa8ec0922948", "message": "[armel tizen] Fixed CoreRT issue #4626 unwinding support (#15913)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "krwq": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/734a8d7612237b4fab066957318345b5b7b157fe", "message": "Do not throw IndexOutOfBounds when AM/PM designator is empty (#15904)\n\n* do not throw IndexOutOfBounds when AM/PM designator is empty\r\n\r\n* store am/pm designator in local"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dotnet-bot": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/d44f3e883a803b2d1fe4fb2c07f92d78bff56eed", "message": "Mirror changes from dotnet/corefx (#15909)\n\n* Consolidate System.Memory code to shared folder (dotnet/corefx#26393)\r\n\r\n* Consolidate System.Memory code to shared folder\r\n\r\nThis change is removing the duplicate codes from System.Memory and keep only one copy under the shared folder to be easier to edit such code in one place and get reflected on the other repos.\r\n\r\n* Address the review feedback\r\n\r\n* Addressing more feedback\r\n\r\n* More cleanup\r\n\r\n* remove empty line and added a comment\r\n\r\nSigned-off-by: dotnet-bot-corefx-mirror <dotnet-bot@microsoft.com>\r\n\r\n* Add missing throw helper methods used in the code we got from corefx\r\n\r\n* Update the exception helper\r\n\r\n* fix the break"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/d97e8854e0d2e7bbc8c549a68d9592c1dbc5ac4e", "message": "Keep LowLevelDictionary for CoreRT for now (#15824)\n\nSigned-off-by: dotnet-bot <dotnet-bot@microsoft.com>"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/38ec680aa59010221bfc15afa23af73764fd0406", "message": "Merge changes from TFS (#15732)\n\n* Remove unused CORJIT_FLAG_USE_SSE3_4\r\n\r\nThis changes the JIT-EE interface GUID.\r\n\r\nThis is the desktop side of https://github.com/dotnet/coreclr/pull/14825.\r\n\r\n[tfs-changeset: 1685154]\r\n\r\n* Pick up rest of desktop side changes"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/b11ddd33db2d784f004e22b81b5aa72262f9dc92", "message": "Use the message that the ReflectionTypeLoadException exception was initialized with (#15708)\n\nSigned-off-by: dotnet-bot <dotnet-bot@microsoft.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mattwarren": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/8d84ea8193cad1a129385920d3982fe2de44c898", "message": "Add MDA (Managed Debugging Assistant) (#15875)\n\n* Add MDA (Managed Debugging Assistant)\r\n\r\n* Info about MDA's in .NET Core"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/20738007", "body": "In cases were there are multiple terms that means the same thing, I wonder if it might be nicer to write it as:\r\n\r\n```\r\nPGO, POGO: Profile Guided Optimization - see [details](https://blogs.msdn.microsoft.com/vcblog/2008/11/12/pogo/)\r\n```\r\n\r\nrather than have the same line twice?", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20738007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "review_comments": []}, "pentp": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/37b14ff9bd610b9521e75a29dc9e04fcb5c9bbba", "message": "Misc Decimal optimizations\n\nSigned-off-by: dotnet-bot <dotnet-bot@microsoft.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "safern": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/c9e80a7fabcf3757edd92e17ebad4189f4abb186", "message": "Update corelib shared README.md (dotnet/corefx#26366)\n\nSigned-off-by: dotnet-bot-corefx-mirror <dotnet-bot@microsoft.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AtsushiKan": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/4c8a732b6c27c5bfbdf9aee488a22704c4eb58bd", "message": "Small fix to underlying CoreCLR support for new string slicing overloads (#15876)\n\nhttps://github.com/dotnet/corefx/issues/24072\r\n\r\nAdd the parameter name to the exceptions like other \"Slice\"-like apis do."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/da46977d76051ba94fb21a9d25f45a41ceac07de", "message": "Underlying CoreCLR support for new string slicing overloads (#15811)\n\n* Underlying CoreCLR support for new string slicing overloads\r\n\r\nhttps://github.com/dotnet/corefx/issues/25254\r\n\r\nThese add the underlying support for the fast versions of\r\nthese extension methods.\r\n\r\n* Underlying CoreCLR support for new string slicing overloads\r\n\r\nhttps://github.com/dotnet/corefx/issues/24072\r\n\r\nThese add the underlying support for the fast versions of\r\nthese extension methods."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dotnet-maestro-bot": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/15e8fc1d02036ef3b4d4e19ee941d64f5f851fa2", "message": "Update CoreClr, CoreFx, PgoData to preview1-26116-03, preview1-26116-03, master-20180116-0045, respectively (#15859)"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/2f3fa55c05bd4c2c60eb627d41634efaf46d20d3", "message": "Update CoreClr, CoreFx, PgoData to preview1-26114-02, preview1-26114-03, master-20180114-0044, respectively (#15856)"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/a45217cd512953211d7465c0e39615de16b90968", "message": "Update CoreClr, CoreFx, PgoData to preview1-26113-02, preview1-26113-03, master-20180113-0045, respectively (#15853)"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/f2ef496c87c7ba66f54390d9b5cc08f863183b2f", "message": "Update CoreClr, CoreFx, PgoData to preview1-26112-01, preview1-26112-01, master-20180112-0034, respectively (#15837)"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/b3a9220143791efb7ff585fffb4c1704fc86b6ec", "message": "Update BuildTools, CoreClr, CoreFx, PgoData to prerelease-02411-04, preview1-26111-02, preview1-26111-02, master-20180111-0041, respectively (#15807)"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/ef42ec4274c69fb6fb617cfc836c50ecf3ac6072", "message": "Update CoreClr, CoreFx, PgoData to preview1-26109-03, preview1-26110-01, master-20180109-0023, respectively (#15788)"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/4e6435be1f5a77abb875f946fa7bd5dbeb5c3864", "message": "Update CoreClr, CoreFx, PgoData to preview1-26108-06, preview1-26109-01, master-20180108-1624, respectively (#15785)"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/334dd046627c9a4a9375a2c887c2a45c846b36db", "message": "Update BuildTools, CoreClr, CoreFx to prerelease-02408-01, preview1-26108-02, preview1-26108-02, respectively (#15763)"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/23ada7df49d3717c70635164864e3c0e6bb11162", "message": "Update BuildTools, CoreClr, CoreFx to prerelease-02404-02, preview1-26105-01, preview1-26105-01, respectively (#15736)"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/66b31aab41996565ef02893cfdf12db485b7c07d", "message": "Update BuildTools, CoreClr, CoreFx to prerelease-02403-01, preview1-26103-02, preview1-26104-02, respectively (#15684)"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/35bba0c5b29e9dfd2744b09e577f6111ef7de9d7", "message": "Update BuildTools, CoreClr, CoreFx to prerelease-02402-01, preview1-26102-02, preview1-26102-01, respectively (#15678)"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/7b1be111f748992de66cd16ae8c6134d43982b7d", "message": "Update CoreClr, CoreFx to preview1-26101-01, preview1-26101-01, respectively (#15672)"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/b8a5ea9400a17647dd5a2581feff0773323f05e2", "message": "Update CoreClr, CoreFx to preview1-26029-02, preview1-26029-02, respectively (#15636)"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/aacefc0f47ba94f228281da9a4a8fe64a29e92da", "message": "Update CoreClr, CoreFx to preview1-26026-01, preview1-26026-01, respectively (#15630)"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/9d552fc39c8eb1a73af88fbb1cc45637dd669bf3", "message": "Update CoreClr, CoreFx to preview1-26024-02, preview1-26024-01, respectively (#15628)"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/7e5587293fb61cd7a2c5c7b05e86bbf51d52e445", "message": "Update CoreClr, CoreFx to preview1-26023-03, preview1-26023-03, respectively (#15624)"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/2c3670f636ecef855608f3dba8ef04c70bd5f1a7", "message": "Update CoreClr, CoreFx to preview1-26023-01, preview1-26023-01, respectively (#15622)"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/4815ea5e445a919f8afbdc1e71ed6423a4ab5030", "message": "Update BuildTools, CoreClr, CoreFx to prerelease-02322-02, preview1-26022-02, preview1-26022-02, respectively (#15612)"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/0e4662c8911e3cf80eaaa446f280d7694ac09733", "message": "Update BuildTools, CoreClr, CoreFx to prerelease-02320-01, preview1-26020-03, preview1-26021-02, respectively (#15558)"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15882", "title": "Update BuildTools, CoreClr, CoreFx, PgoData to prerelease-02422-01, preview1-26122-04, preview1-26122-01, master-20180122-0034, respectively (master)", "body": "/cc @dotnet/coreclr-auto-update-notify", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15794", "title": "Update CoreClr, CoreFx to servicing-26109-01, servicing-26109-01, respectively (release/2.0.0)", "body": "/cc @dotnet/coreclr-auto-update-notify<details><summary>Discarded auto-update commits (click to expand)</summary><auto-pr-discard-list>\r\n\r\n * [`7ab391c`](https://github.com/dotnet-maestro-bot/coreclr/commits/7ab391cf41a901a6728172c954a8058c5cee27ff) Update CoreClr, CoreFx to servicing-26109-01, servicing-25921-02, respectively\r\n   * :hourglass: **CROSS Check** Started. [Details](https://ci.dot.net/job/dotnet_coreclr/job/release_2.0.0/job/CROSS_check_prtest/533/)\r\n   * :hourglass: **CROSS Check** Triggered. (5/15 on win2012-20171003) [Details]()\r\n   * :hourglass: **Tizen armel Cross Debug Build** Triggered. (12/19 on ubuntu1404-20170120) [Details]()\r\n   * :hourglass: **Tizen armel Cross Debug Build** Triggered. (13/17 on ubuntu1404-20170120) [Details]()\r\n   * :hourglass: **Tizen armel Cross Release Build** Triggered. (14/19 on ubuntu1404-20170120) [Details]()\r\n   * :hourglass: **Tizen armel Cross Release Build** Triggered. (15/17 on ubuntu1404-20170120) [Details]()\r\n   * :hourglass: **Ubuntu arm Cross Release Build** Triggered. (11/19 on ubuntu1404-20170120) [Details]()\r\n   * :hourglass: **Ubuntu arm Cross Release Build** Triggered. (12/17 on ubuntu1404-20170120) [Details]()\r\n   * :hourglass: **Ubuntu16.04 arm Cross Debug Build** Triggered. (13/19 on ubuntu1404-20170120) [Details]()\r\n   * :hourglass: **Ubuntu16.04 arm Cross Debug Build** Triggered. (14/17 on ubuntu1404-20170120) [Details]()\r\n   * :hourglass: **Windows_NT arm Cross Debug Build** Started. [Details](https://ci.dot.net/job/dotnet_coreclr/job/release_2.0.0/job/arm_cross_debug_windows_nt_prtest/544/)\r\n   * :hourglass: **Windows_NT arm Cross Debug Build** Triggered. (4/15 on win2012-20171003) [Details]()\r\n   * :hourglass: **Windows_NT arm Cross Release Build** Started. [Details](https://ci.dot.net/job/dotnet_coreclr/job/release_2.0.0/job/arm_cross_release_windows_nt_prtest/543/)\r\n   * :hourglass: **Windows_NT arm Cross Release Build** Triggered. (5/20 on win2012-20171003) [Details]()\r\n   * :hourglass: **Windows_NT arm Cross Release Build** Triggered. (8/15 on win2012-20171003) [Details]()\r\n   * :hourglass: **Windows_NT x64 CoreCLR Perf Tests Correctness** Started. [Details](https://ci2.dot.net/job/dotnet_coreclr/job/perf/job/release_2.0.0/job/perf_perflab_Windows_NT_x64_smoketest_prtest/417/)\r\n   * :hourglass: **Windows_NT x64 CoreCLR Perf Tests Correctness** Triggered. (2/2 on win2012-20170809-elevated) [Details]()\r\n   * :hourglass: **Windows_NT x64 Debug Build and Test** Started. [Details](https://ci.dot.net/job/dotnet_coreclr/job/release_2.0.0/job/debug_windows_nt_prtest/547/)\r\n   * :hourglass: **Windows_NT x64 Debug Build and Test** Triggered. (8/20 on win2012-20171003) [Details]()\r\n   * :hourglass: **Windows_NT x64 Formatting** Started. [Details](https://ci.dot.net/job/dotnet_coreclr/job/release_2.0.0/job/x64_windows_nt_formatting_prtest/529/)\r\n   * :hourglass: **Windows_NT x64 Formatting** Triggered. (3/15 on win2012-20171003) [Details]()\r\n   * :hourglass: **Windows_NT x64 Release Priority 1 Build and Test** Started. [Details](https://ci.dot.net/job/dotnet_coreclr/job/release_2.0.0/job/x64_release_windows_nt_pri1_prtest/540/)\r\n   * :hourglass: **Windows_NT x64 Release Priority 1 Build and Test** Triggered. (7/20 on win2012-20171003) [Details]()\r\n   * :hourglass: **Windows_NT x64 Release Priority 1 Build and Test** Triggered. (10/15 on win2012-20171003) [Details]()\r\n   * :hourglass: **Windows_NT x86 Checked Build and Test** Started. [Details](https://ci.dot.net/job/dotnet_coreclr/job/release_2.0.0/job/x86_checked_windows_nt_prtest/532/)\r\n   * :hourglass: **Windows_NT x86 Checked Build and Test** Triggered. (9/20 on win2012-20171003) [Details]()\r\n   * :hourglass: **Windows_NT x86 CoreCLR Perf Tests Correctness** Started. [Details](https://ci2.dot.net/job/dotnet_coreclr/job/perf/job/release_2.0.0/job/perf_perflab_Windows_NT_x86_smoketest_prtest/417/)\r\n   * :hourglass: **Windows_NT x86 CoreCLR Perf Tests Correctness** Triggered. (1/2 on win2012-20170809-elevated) [Details]()\r\n   * :heavy_check_mark: **CROSS Check** Build finished.  [Details](https://ci.dot.net/job/dotnet_coreclr/job/release_2.0.0/job/CROSS_check_prtest/533/)\r\n   * :heavy_check_mark: **Ubuntu x64 Formatting** Build finished.  [Details](https://ci.dot.net/job/dotnet_coreclr/job/release_2.0.0/job/x64_ubuntu_formatting_prtest/534/)\r\n\r\n</auto-pr-discard-list></details>", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Anipik": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/ed6dd1b5c8df78f2ef92672f557303a66ce571e0", "message": "Added Append(Stringbuilder,int,int) and Append(StringBuilder) overlaod apis (#15786)\n\nAdded Append(Stringbuilder,int,int) and Append(StringBuilder) overlaod apis"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/55bb222db872ef42ae771967ba45d94326f34d73", "message": "Adds StringBuilder.Equals(ReadOnlySpan<char>) Api (#15759)\n\nAdds StringBuilder.Equals(ReadOnlySpan<char>)  Api"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/31e22b200de37bd8005c650c90e2098e42201eec", "message": "Recognize STA\\MTA Attribute For Main Function (#15652)\n\n* Apartment state set for main method\r\n\r\n* g_fWeownprocess removed and CLRConfig::GetConfigValue(CLRConfig::EXTERNAL_FinalizeOnShutdown) set"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15608", "title": "Span overload added for path apis", "body": "Fixes https://github.com/dotnet/corefx/issues/25539\r\nTests PR https://github.com/dotnet/corefx/pull/26017", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15579", "title": "Implementation of GetFullPath(string path, string basePath)", "body": "Related Test PR-  https://github.com/dotnet/corefx/pull/25994\r\nIssue:- https://github.com/dotnet/corefx/issues/25535", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/26523484", "body": "@danmosemsft I understand the reasoning. should we call the Grow(int capacity) in the new overload constructor ?. If we dont do that, we will need a field to store the capacity ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/26523484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "adamsitnik": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/d1793d37564cf0bbcc5ace7c8f1a0ae0da40d9a5", "message": "updated docs: how to run against local core clr build (#15841)\n\n* updated docs: how to run against local core clr build\r\n\r\n* split the running docs into 3 files to make it simpler to understand"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15916", "title": "Event Pipe Developer Guide (docs)", "body": "@nategraf please review", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15871", "title": "[WIP] write pointer size to event pipe file to make x86 working", "body": "Part of https://github.com/Microsoft/perfview/issues/470\r\n\r\nInitially, the issue seemed to be trivial: one simple thing was missing in the file: pointer size.\r\n\r\nI analyzed the code and realized, that the existing version of the consumer of Event Pipe was [assuming](https://github.com/Microsoft/perfview/blob/1447751e7a22d3caff15b630903ae88f132729e4/src/TraceEvent/EventPipe/EventPipeEventSourceV1.cs#L99) that right after the initial data (time, timestamp and frequency) there is always the beginning of the events stream.\r\n\r\nSo if I add a new field, the old serializer fails because it's going to try to deserialize it as the first event.\r\n\r\nTo make the solution more future proof I decided to add a forward reference to the beginning of the events stream.\r\n\r\nSo the reader knows where to jump after reading the fields it knows. If there are some new fields, it's going to ignore them. So no breaking changes by adding new fields in the future.\r\n\r\nI had to bump the version of the object (2 => 3) in order to make the previous versions of the reader give users an easy to understand error message when they use new runtime with and old consumer lib.\r\n\r\nThe problem was that the old implementation was [ignoring](https://github.com/Microsoft/perfview/blob/1447751e7a22d3caff15b630903ae88f132729e4/src/TraceEvent/EventPipe/EventPipeEventSourceFactory.cs#L34) minimum reader version:\r\n\r\n```cs\r\n            var version = deserializer.ReadInt();\r\n\r\n            // Read the minimum reader version.\r\n            var minimumReaderVersion = deserializer.ReadInt(); <- NOT USED\r\n\r\n            switch (version)\r\n            {\r\n                case 1:\r\n                case 2: return new EventPipeEventSourceV1(deserializer, fileName, version);\r\n                default: throw new NotSupportedException($\"The version of {fileName} is {version} which is not yet supported.\");\r\n            }\r\n``` \r\nIt was a good time to add some other missing fields.\r\n\r\nI have also added the number of processors and process Id (all available in the PAL).\r\n\r\nOsVersion and Cpu Speed are still missing, because they are not a part of the PAL.\r\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "chcosta": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/a63990ce5eed402b24b8b7c696c499065cf4e2e5", "message": "Add privaterun properties (#15816)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/25040382", "body": "Could you use `BuildToolsTaskDir` here?", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/25040382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/87842904", "body": "This is a known issue which was fixed in CoreFx.  I haven't done any explicit validation for this in CoreClr though.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/87842904/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/87898653", "body": "I've validated on a Linux Vm running Fedora 23, that this fixes the issue.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/87898653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/122075352", "body": "https://github.com/dotnet/buildtools/pull/1572\r\n\r\nCoreClr is the first repo to consume BuildTools after a recent refactoring and is the only repo making use of BlobNamePrefix to trim down to a specific filename prefix (other repos are either not using BlobNamePrefix or use it to trim to a specific folder within a container).  The fix made to buildtools is to ensure that we trim folder structure on a folder level, and still maintain compatibility with how other repo's are using the task.  \r\n\r\nI've validated this locally for common coreclr, corefx, and core-setup usage of the downloadfromazure task.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/122075352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/122077152", "body": "I believe this is the only actionable issue.  If there are other issues, then they are hiding behind this one.  I noticed another failure, but it appeared to be network related, or a similar infrastructure problem.  Next, I'm going to start looking at the cleanup task to determine if we have a problem there.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/122077152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "justinvp": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/f1d8831b8c6b66b9607972c27a36c989649aeaa1", "message": "Cleanup Activator (#15767)"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/60ba4751a4bab0651db356af1b269bc5d96822c5", "message": "Cleanup AppDomain (#15748)\n\nRemove dead code and various cleanup."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/41d23b05acac98c68d3b348c60bf151cfedd778f", "message": "AggregateException: Use StringBuilder.AppendFormat (#15747)\n\nUse `AppendFormat(...)` instead of `Append(string.Format(...))` and\r\n`AppendLine()` instead of `Append(Environment.NewLine)`."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/b2e86cf5e7b891ca2b4fac83c0c9511c83c4ede2", "message": "Unix: Specify Ordinal comparison in TimeZoneInfo (#15739)\n\nThe default behavior for StartsWith uses the current culture for\r\ncomparisons. These should be ordinal."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/6faa6bb6de44693b7da95c61c0f22df89ef8e373", "message": "Address ReflectionTypeLoadException feedback (#15738)\n\n* Address ReflectionTypeLoadException feedback\r\n\r\nAddress additional minor feedback from #15711:\r\n\r\n - Share the code for `Message` and `ToString`\r\n - Remove trailing `NewLine` from resulting string\r\n - Pass initial base string to `StringBuilder..ctor`\r\n - Cache the exceptions array in a local (passed-in as a parameter)\r\n - Move methods below properties\r\n - Remove trailing whitespace"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/a24f196ef4d792b2ee1b397786419c8bad6e070a", "message": "Use string.Contains(char) instead of Contains(string) (#15740)\n\nNow that string.Contains(char) exists, use it in corelib."}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/22049193", "body": "Fixed (squashed into a single commit that adds the method back along with a comment).", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/22049193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "briansull": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/180a3c80b1d193f4c63b265e21bd29277b81cbcd", "message": "Merge pull request #15756 from briansull/fix-15671\n\nFix for 15671"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/89e64081a058ee0318da8ba236bf98bc53c5574e", "message": "Proposed fix for 15671\n\nIf we are fetching an Array Length for an array ref that came from global memory\nthen for CSE safety we must use the conservative value number for both"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/a91d3fd660568a53a9395ef5d0eeaf869e56606a", "message": "Merge pull request #15760 from briansull/fix-budget\n\nFix issue where the unsigned value used for the the VN map select budget could underflow"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/3fc07ad6ffcb49646d629ba63b6f156a7071c2eb", "message": "Fix issue where the unsigned value used for the the map select budget could underflow\nresulting in an unlimited budget\n\nChanged m_mapSelectBudget and budget to be a signed integer\nAdded an assert that ensures that the remaining budget is between [0..m_mapSelectBudget]\nChange the test for running out of budge to be a <= zero test instead of an equal zero test.\n\nFixed the bug in the handling of phiArgs in VNForMapSelectWork\nby adding a check if we exceeded our budget when processing the first phiArg.\n\nAdded a define for DEFAULT_MAP_SELECT_BUDGET"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/94640133", "body": "Is there a way to override this and have the desktop CLR do finally cloning?\r\nIt would be useful for measurement purposes to have this available.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/94640133/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/95651507", "body": "Yes, The new Config variable is what I had in mind. Thanks\r\nCOMPLUS_JitEnableFinallyCloning=1\r\n\r\nLooks Good To Me", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/95651507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "sandreenko": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/2c226c48f42438e0742ff9293fbfb4d5c7a1e864", "message": "ARM r2r fix. (#15758)\n\nDo not trash CALLEE_SAVED register r4.\r\nUse r12 that is CALLEE_TRASH."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/7a785420a57925d1ea67fa9361e1f826a7e74f2b", "message": "fix COMPlus_JitHalt for arm32. (#15761)"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/d7d457f11cf553e46aab1da225be83e73fc783e8", "message": "Small changes around stack levels. (#15616)\n\n* add ifdef for fgThrowHlpBlkStkLevel\r\n\r\n* fgFindExcptnTarget should not be called fof dbg code compilation mode."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/8f9d5e02337fc3b0c72508c6aefc48a3d483adbf", "message": "mark call->fgArgInfo with hasStackArgs for arm32 split args (#15615)"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15910", "title": "[R2R] add a virtualStubParamInfo as an argument", "body": "This PR fixes part of #15150 and #15552.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15597", "title": "[RyuJit] Stack level setter", "body": "This PR creates a new phase that currently is named \u201cStackLevelSetter\u201d, it runs after the phase where we finalize our instruction order: lowering; and before the first phase that needs to know what kind of frame do we have: LSRA.\r\n\r\nDevDiv_534476", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wtgodbe": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/d2f2e81294a80a1b463ea185decd07e49e67f976", "message": "Remove bad assert in Mutex & update error messages (#15734)\n\n* Remove bad assert in Mutex & update error messages\r\n\r\n* Redo error message"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/3210b9ea76f2612b1ef014a2e570b72f994bc509", "message": "Check for null in ReflectionTypeLoadException Message/ToString (#15711)"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/4d26be528cac52afb5bebc12eca8f7260040578c", "message": "Print Inner Exceptions in ReflectionTypeLoadException ToString (#15688)\n\n* Print Inner Exceptions in ReflectionTypeLoadException ToString\r\n\r\n* Simplify formatting\r\n\r\n* Remove tab\r\n\r\n* Fix newlines\r\n\r\n* Use AppendLine\r\n\r\n* Use foreach\r\n\r\n* Remove ToString\r\n\r\n* Update string & message\r\n\r\n* Modify Message\r\n\r\n* Remove parens"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15831", "title": " Add GetLoadLibrary function for PAL & use in TrackErrorCode", "body": "For https://github.com/dotnet/coreclr/issues/10520\r\n\r\n@danmosemsft PTAL - what's the best way for me to test this locally? Builds are succeeding on Windows & Unix\r\n\r\nCC @karelz ", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/138184359", "body": "The packages are left there by the publish automation. @karajas can you make the publish job clean this up itself?", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/138184359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/138187051", "body": "What Intermediate Path do you mean? Would that be where the packages get generated in bin/Product/.nuget, or would it be where I want the publish job to leave the packages that it publishes? If it's the second, wouldn't the same problem still be present?", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/138187051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "dagood": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/36bf4472c2464801dd784b3986e020764ce4f7c4", "message": "Mark all CoreCLR packages as non-shipping (#15725)\n\nThis indicates the packages shouldn't be shipped to the NuGet gallery."}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/247d60deec8fae0dd81c3864921ca46d3f6d2283", "message": "Pass manifest details to PushToBlobFeed (#15705)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/149430663", "body": "This doesn't work for me locally. In init-tools.log:\r\n\r\n```\r\nERROR: An error occured when running: '\"C:\\git\\coreclr\\Tools\\dotnetcli\\dotnet.exe\" restore \"C:\\git\\coreclr\\packages\\microsoft.dotnet.buildtools\\2.0.0-servicing-02104-04\\lib\\\\tool-runtime\\project.json\"'. Please check above for more details.\r\n```\r\n\r\nPretty sure it's because this version doesn't include https://github.com/dotnet/buildtools/pull/1744. (And CLI 2.0.0 `--version` returns **1**5.5.0-preview-007044.) Updating to BuildTools 2.0.0-servicing-02201-03 (latest) works for me.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/149430663/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "RoyAtanu": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/e432923a0cc31e1c34f94c5a2e9b75570ecf9d9a", "message": "Link to THIRD-PARTY-NOTICES is fixed (#15665)\n\nThe link to the THIRD-PARTY-NOTICES page is broken in contributing.md [https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/contributing.md]\r\n\r\nThe current link is [https://github.com/dotnet/coreclr/blob/master/THIRD-PARTY-NOTICES]\r\n\r\nSeems it is missing a '.TXT' at the end of the URL. The correct link should be [https://github.com/dotnet/coreclr/blob/master/THIRD-PARTY-NOTICES.TXT] which is working fine.\r\n\r\nIssue #15664"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/6f410d2689cd7f5ef2f38b5584a290ad5cdb8a68", "message": "Link to the File Header Example for C# was broken. (#15655)\n\nThe File Header example for C# was redirecting to (../../src/mscorlib/src/System/Collections/Generic/List.cs) which was missing in the master repository. The example file has been changed to Comparer.cs which is another file in the same repo path."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rcoh": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/b53b6ea1a0856a904ff8bb2df31306f9ca1e282c", "message": "Fix typo in docstring (#15714)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bbowyersmyth": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/d265eba12fed4ac124ef6b9f3fa06e2dded7c20d", "message": "Return StringBuilder back to cache when not making any replacements (#15677)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "colgreen": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/09ab9723fd6a05a57685137ccb795680d975693d", "message": "Removed redundant null tests when sorting a secondary values array. (#14277)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dezsiszabi": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/122acaaad78cefbed71bdb137505f70552e13265", "message": "Extending FormatException's message with datetime/format (#15635)\n\n* Extending FormatException's message with datetime/format\r\n\r\n* Applying feedback from review"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15661", "title": "Adding failing string to Boolean and TimeSpan parse failure exceptions", "body": "Additional extensions to exception messages when `bool` and `TimeSpan` parsing fails. This PR also fixes an issue introduced by my previous PR (https://github.com/dotnet/coreclr/pull/15635). Namely that I changed `Format_BadFormatSpecifier` which was used by other parsing exceptions as well.\r\n\r\nThis PR is in response to Dan Moseley's comment:\r\nhttps://github.com/dotnet/coreclr/pull/15635#issuecomment-354330528", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alfredmyers": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/coreclr/commits/ccf53b97615f4d344f46870d057349be984a8caf", "message": "Updated links to ABI conventions (#15651)"}, {"url": "https://api.github.com/repos/dotnet/coreclr/commits/9442717a9455847912a18fd174909a5c8c253334", "message": "Minor tweaks (#15590)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ianhays": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15941", "title": "Misc Span/Memory changes", "body": "- [Move Span.DangerousCreate to MemoryMarshal.CreateSpan](https://github.com/dotnet/corefx/issues/26139)\r\n- [Move ReadOnlySpan.DangerousCreate to MemoryMarshal.CreateReadOnlySpan](https://github.com/dotnet/corefx/issues/26139)\r\n- [Move Span.NonPortableCast to MemoryMarshal.Cast](https://github.com/dotnet/corefx/issues/26368)\r\n- [Move ReadOnlySpan.NonPortableCast to MemoryMarshal.Cast](https://github.com/dotnet/corefx/issues/26368)\r\n- [Add ToString override to Span and ReadOnlySpan](https://github.com/dotnet/corefx/issues/26295)\r\n- [Add ToEnumerable function to MemoryMarshal that takes a Memory](https://github.com/dotnet/corefx/issues/24854)\r\n\r\nprogress towards https://github.com/dotnet/corefx/issues/26368, https://github.com/dotnet/corefx/issues/24854, https://github.com/dotnet/corefx/issues/26295, https://github.com/dotnet/corefx/issues/26139\r\n\r\nNote that this includes breaking changes to any upstream projects using these functions. This means it will break CoreFX builds dependent on any new coreclr produced until an accompanying PR in dotnet/corefx/ is merged. ", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/60090932", "body": "Where are these two getting used?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/60090932/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/60092504", "body": "Gotcha. LGTM then. I'm working on the CoreFX version now.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/60092504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "gbalykov": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15915", "title": "Remove relocations for MethodTable::m_pParentMethodTable for Linux ARM", "body": "This pull request replaces absolute pointer for MethodTable::m_pParentMethodTable with relative pointer for ARM.\r\n\r\nRelated issues: #10380, #12370\r\n\r\nOn application, which is referenced in #10380 (comment), the following memory consumption changes occur for mappings of images (based on 795d9c05ad2670ae2f1d9b0353fd9d398688db99):\r\n\r\nRss: 8312 -> 8248 (0.7% improvement)\r\nPrivate_Dirty: 2060 -> 1720 (16.5% improvement)\r\nPrivate_Clean: 2368 -> 2408\r\nShared_Clean: 3884 -> 4120\r\n\r\ncc @Dmitri-Botcharnikov", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15469", "title": "Memory footprint gc latency level", "body": "This pull request adds memory footprint gc latency level.\r\n\r\nThis pull request is based on the commit by @Maoni0. Parameters for memory_consumption level are almost the same as for default balanced level (which is same as the base), except for gen1 min_size, which is set equal to gen0 min_size. Large heap compacting is not included in this pull request.\r\n\r\nTizen Xamarin GUI applications: (base is 97d9d593ae44438fab85044e2a189316e7f3cbc4)\r\n\r\nTest|base GC heap (Kb), startup time (s)|\"memory_consumption\" level GC heap (Kb), startup time (s)\r\n----|---------|----\r\nHelloWorld.Tizen|368; 1.9825|368 (0); 1.99737 (+0.75%)\r\nSettings.Tizen.Mobile|632; 2.5325|600 (-5.06%); 2.5935 (+2.41%)\r\nVolumeController.Tizen.Mobile|512; 2.3705|472 (-6.99%); 2.4455 (+3.16%)\r\nAppCommon.Tizen.Mobile|825.6; 3.851|784 (-5.04%); 3.94158 (+2.35%)\r\nEmailUI.Tizen.Mobile|1384; 3.1215|1184 (-14.45%); 3.1425 (+0.67%)\r\nApplicationControl.Tizen.Mobile|705.2; 3.2575|643.1 (-8.81%); 3.31278 (+1.70%)\r\nSNSUI.Tizen.Mobile|2306; 4.486|1904 (-17.43%); 4.601 (+2.56%)\r\nApplicationStoreUI.Tizen.Mobile|1205.6; 2.4305|956 (-20.70%); 2.515 (+3.48%)\r\nPuzzle.Tizen.Mobile|970.4; 3.0165|923.2 (-4.86%); 3.0975 (+2.69%)\r\nSystem_info.Tizen.Mobile|368; 2.3785|368 (0); 2.436 (+2.42%)\r\nGalleryUI.Tizen.Mobile|368; 2.436|368 (0); 2.499 (+2.59%)\r\nCalculator.Tizen.Mobile|2156; 4.8995|696 (-67.72%); 5.22105 (+6.56%)\r\n\r\naverage: GC heap size reduction 12.59%, startup time increase 2.61%\r\n\r\nGC GUI benchmarks:\r\n\r\nTest|base GC heap (Kb), startup time (s)|\"memory_consumption\" level GC heap (Kb), startup time (s)\r\n----|---------|----\r\nGC test 1|4932; 3.597|1570.74 (-68.15%); 3.87368 (+7.69%)\r\nGC test 2|715.6; 10.474|464 (-35.16%); 10.4417 (-0.31%)\r\nfasta|1955.6; 65.2105|520.4 (-73.39%); 73.7475 (+13.09%)\r\nnbody|368; 21.2485|368 (0); 21.0194 (-1.08%)\r\nspectral norm|408; 15.5615|380 (-6.86%); 15.4325 (-0.83%)\r\n\r\naverage: GC heap size reduction 36.712%, startup time increase 3.712%\r\n\r\n@Maoni0\r\n\r\ncc @kvochko @Dmitri-Botcharnikov ", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/13625", "title": "[WIP] Small memory footprint GC optimization level", "body": "This pull request adds small memory footprint as GC optimization level.\r\n\r\nThis pull request is based on the branch, mentioned by @swgillespie in https://github.com/dotnet/coreclr/issues/13292#issuecomment-324108583, but part with fragmentation tuning was removed because its combination with compacting was not researched.\r\n\r\n@Maoni0 @swgillespie, please, take a look", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "davidwrighton": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15889", "title": "[WIP] Enable testing marshalling tests for sequential layout classes", "body": "- These marshal similar to structs, but not identically\r\n  - Cannot be nested\r\n  - Appear to have behavior where it can be passed by value, but target function can modify the output. (I believe this is unreliable, and the test #ifs the changes away\r\n  - Does not support marshalling by reference", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "davmason": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15819", "title": "Debugger api to set a breakpoint on offset 0 of all methods", "body": "", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "IEvangelist": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15605", "title": "Added NullableExtensions.cs", "body": "I added `NullableExtensions.cs` which has a generic `Deconstruct` method. Allowing for code such as this:\r\n```csharp\r\nvar (hasValue, value) = new DateTime?();\r\n```", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "erozenfeld": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15525", "title": "Compute System.Private.CoreLib ILLink roots required by the runtime.", "body": "Embed the result as a System.Private.CoreLib.dll xml resource\r\nfor consumption by ILLink.\r\n\r\nUpdate mscorlib.h to make several dependencies explicit.\r\n\r\nThe actual msbuild task lives in the linker repo:\r\nhttps://github.com/mono/linker/blob/master/corebuild/integration/ILLink.Tasks/CreateRuntimeRootDescriptorFile.cs", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/48199113", "body": "@mmitche The only info on /NOVCFEATURE that I found is \"/NOVCFEATURE forces linker to emit old .pdb format. It is required for scan.exe tool to work\". Looks like scan.exe is a static contract analyzer. Maybe we are not running it on release binaries? Let me know if you know more about /NOVCFEATURE or scan.exe or think that /NOVCFEATURE should be passed when linking release binaries. For checked binaries I just matched what we do for debug binaries.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/48199113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "cod7alex": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15435", "title": "Use stackalloc in string.Split", "body": "Adds usage of Span and stackalloc for strings that are not large. Allows to avoid allocations of int arrays.\r\n\r\nBenchmarks:\r\n```\r\n|                    Method | Mean after | Mean before |  Mean diff |  Allocated after | Allocated before | Allocated diff |\r\n|-------------------------- |-----------:|------------:|-----------:|-----------------:|-----------------:|---------------:|\r\n|         SplitCharLength20 |   201.6 us |  213.80 us  |    5.71%   |     210.94 KB    |     312.50 KB    |     32.50%     |\r\n|        SplitCharLength200 | 1,199.6 us | 1194.10 us  |   -0.46%   |    1546.88 KB    |    2351.56 KB    |     34.21%     |\r\n|        SplitCharLength600 | 3,367.1 us | 3276.00 us  |   -2.78%   |    6882.81 KB    |    6882.81 KB    |       0%       |\r\n|       SplitStringLength20 |   159.4 us |  181.80 us  |   12.32%   |     132.81 KB    |     234.38 KB    |     43.34%     |\r\n|      SplitStringLength200 |   767.9 us |  844.40 us  |    9.06%   |     835.94 KB    |    1640.63 KB    |     49.05%     |\r\n|      SplitStringLength600 | 2,160.8 us | 2253.70 us  |    4.12%   |    4765.63 KB    |    4765.63 KB    |       0%       |\r\n|  SplitStringArrayLength20 |   308.5 us |  347.90 us  |   11.33%   |     210.94 KB    |     414.06 KB    |     49.06%     |\r\n| SplitStringArrayLength200 | 1,838.7 us | 1848.60 us  |    0.54%   |    1195.31 KB    |    2804.69 KB    |     57.38%     |\r\n| SplitStringArrayLength600 | 5,171.7 us | 5155.00 us  |   -0.32%   |    8117.19 KB    |    8117.19 KB    |       0%       |\r\n```\r\n\r\nBenchmark code:\r\nhttps://gist.github.com/cod7alex/f123c3e662d21c3327399aa71d338485\r\n\r\nCloses https://github.com/dotnet/coreclr/issues/6136\r\n\r\n@danmosemsft @stephentoub ", "author_association": "COLLABORATOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vitek-karas": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15339", "title": "Add better coverage for Marshal.GetDelegateForFunctionPointer", "body": "Also fixes the test Main to correctly collect result codes from all 3 subtests.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Rattenkrieg": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/15135", "title": "[WIP] String dedup PoC", "body": "PoC for #14208 \r\n\r\nCurrently able to deduplicate strings in non-concurrent workstation mode.\r\n\r\nAlgorithm in brief:\r\n* GC cycle N: Mark phase (only STW at the moment):\r\n  * During mark phase of rootset and heap check whether we are interested in current object pointer:\r\n  pointer is string && is evacuating from gen1 && at least has sizeof ptr characters;\r\n  * Enqueue interesting pointer in `StringDedupQueue`;\r\n  * If stats suggest to compact we need to adjust freshly enqueued pointers to their relocation addresses - look at `is_string_and_about_to_be_promoted_to_gen2` call sites. That is double work, but I see no way to know in advance whether we are going to compact (with exception of rare cases when user ask for compaction by `GCCollectionMode.Forced`).\r\n* After GC: In parallel with mutators `StringDedupThread` populating `StringDedupTable` with strings from `StringDedupQueue`:\r\n  * Currently `StringDedupThread` is running synchronously after STW gc to ease my debugging.\r\n* GC cycle N + x, where x is number of GC cycles before next gen2 compaction: Relocate phase (only STW at the moment):\r\n  * `adjust_string_dups_reloc_pointers` is called right before relocating pointers - for each group of duplicates from `StringDedupTable` we seek for first live string in the heap and destructively adjusting other strings by marking their object headers with `0xFF...` and writing pointer to original into its first sizeof ptr characters;\r\n  * During reloc phase of rootset and heap call to `try_relocate_duplicate_string` is made to relocate pointers to duplicates to their original string.\r\n  * Everything is opaque for compact phase - it just memmoving plugs, so duplicates become floating garbage until next gen2 cycle sweep or compact their memory.\r\n\r\nThings to do:\r\n - [ ] Fix code according to style, fix types like `WCHAR` vs `wchar_t`, `BOOL` vs `bool` etc - I need help here;\r\n - [ ] Insert contracts into methods - I know about the document, but I have issues with managing headers and stuff;\r\n - [ ] Make checked runs passing on non-concurrent workstation;\r\n - [ ] Run `StringDedupThread` concurrently, handle related routines like cooperative join;\r\n - [ ] Hack concurrent and server gc.\r\n\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "karajas": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/14835", "title": "Remove PublishFlatContainer from PushToBlob", "body": "@weshaggard @jcagme \r\n\r\nskip ci please", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/14787", "title": "Fix publish parameters to match dependency flow spec", "body": "@weshaggard @wtgodbe @chcosta ", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/94514279", "body": "Possibly because of https://github.com/dotnet/buildtools/blob/08573119630248c2ee1b636ceaf3ca8fc8a2ecda/src/Microsoft.DotNet.Build.Tasks.Packaging/src/PackageFiles/Packaging.targets#L69, this would in the bin dir in corefx and hence not required to be added in gitignore.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/94514279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "DrewScoggins": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/14829", "title": "Update metadata generation to \"handle\" embedded quotes", "body": "", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mazong1123": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/14646", "title": "Added Grisu3 algorithm support for double.ToString().", "body": "- Implemented Grisu3 algorithm.\r\n- When calling double.ToString(), try Grisu3 first, if it fails, fall back to Dragon4.\r\n\r\nFix #14478", "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/13781", "title": "Fixed NaN's GetHashCode and Equals invariant issue.", "body": "This PR keeps the invariant of GetHashCode and Equals for NaNs. We always return 1 for GetHashCode of NaNs so that all NaNs have the same hash code.\r\n\r\nFix #6237", "author_association": "COLLABORATOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/19571734", "body": "@tijoytom Is this really 4 bytes? I got exception on line 30 (my locale is Chinese):\n\n```\n\" System.Runtime.InteropServices.COMException: The data area passed to a system call is too small.\" \n```\n\nDo we need to change the Chinese characters to \"abcd\"?\n\nRelated issue #6569 #7793\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/19571734/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/23309454", "body": "I know it sounds weird. But if you look at the old implementation you'll find it's the same logic: https://github.com/dotnet/coreclr/blob/master/src/classlibnative/bcltype/number.cpp#L152-L157\r\n\r\n```cpp\r\n        char* src = _ecvt(value, precision, &number->scale, &number->sign);\r\n        wchar* dst = number->digits;\r\n        if (*src != '0') {\r\n            while (*src) *dst++ = *src++;\r\n        }\r\n        *dst = 0;\r\n```\r\nIf `value` is zero, the `src` will be filled with '0'. Therefore we don't meet the `if` condition. That means `*dst` which is the first slot of number->digits be filled as 0. That's what I exactly did here. \r\n\r\nSeems like we always check `*number->digits != 0` in number.cpp so it should be fine.\r\n\r\nHowever, I'll check the CI failure to see if it is caused by this design.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/23309454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/23312577", "body": "+1 for changing the name. For performance reason I prefer to keep the zero processing logic so this behavior may sound odd for a traditional _ecvt. The hard part is what's the new name :) ?\r\n\r\nAnother thing worth mentioning here is, one of the CI check failed after I adopt this change, first time is for a seg fault, the second time is for timeout. I think it should not be caused by this change since it's the same idea as the old implementation but I'd like to figure out why the CI failed. Before that, I don't think this change is safe.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/23312577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "review_comments": []}, "hseok-oh": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/14412", "title": "Fix bug to check xunit result file's directory", "body": "Use dirname instead of basename to check xunit result file's directory existing", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/14056", "title": "[RyuJIT/ARM32] Enabling fast tail call feature", "body": "- Not use fast tail call when callee use floating point register argument (difficult to calculate stack size)\r\n- Not use fast tail call when callee use split struct argument\r\n- Fix importer to compare return type when we check tail call\r\n- Fix codegen bug: ARM32 not support INS_br (use INS_bx)\r\n\r\n\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/13829", "title": "Fix test native install directory for Loader/NativeLibs and test script", "body": "Fix install directory for Loader/NativeLibs native build\r\nLoader/NativeLibs/ -> bin/\r\nIt's same target directory as other test build (ex. https://github.com/dotnet/coreclr/blob/master/tests/src/Exceptions/ForeignThread/CMakeLists.txt)\r\n\r\nAnd we can remove useless copy from obj directory", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/93559648", "body": "Thank you. I'll revise to use x86 instead of x64.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/93559648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "kyulee1": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/14260", "title": "Fix type for lvaCachedGenericContextArgOffs", "body": "lvaCachedGenericContextArgOffs should be signed since it's initially\r\nassigned with a negative virtual offset. Finally depending on\r\nframe pointer use with different arch, it could become positive or negative.\r\nLuckily enough, so far such issue was by-passed since amd64 encoder didn't\r\ncare such signness when encoding move offset even though the value is\r\nnegative. For arm64, it is typically positive since FP is saved on the\r\nbottom of stack.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/15630738", "body": "I deleted it since it is not used in CoreCLR tree and also we didn't have such thing in CLRTest.Execute.Bash.targets for Unix, either -- so the test scripts are consistent now.\nIf you think it is needed for CoreRT, we should add it to both scripts (and for ilasm roundtrip binary run as well since a certain tests are enabled be default).\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/15630738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16598172", "body": "I've noticed that the other instance and its definition is under DEBUG. maybe you should make it under DEBUG, too.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16598172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "wecing": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/13891", "title": "implement __assume for non-windows builds", "body": "issue #12808", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "russellhadley": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/13574", "title": "[WIP]  Simple experiment raising the switch limit", "body": "Allows a higher limit for expanding switch tables into if/else linear\r\nsearches.  Initial code is to get an idea of the diffs/perf.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "helloguo": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/13527", "title": "[WIP] Spin Wait tuning", "body": "Work in progress.  https://github.com/dotnet/coreclr/issues/13388\r\n\r\nThis PR tries to tune the Spin Wait on AMD64 and X86 platforms. Because \"The latency of PAUSE instruction in prior generation microarchitecture is about 10 cycles, whereas on Skylake microarchitecture it has been extended to as many as 140 cycles.\" \r\n\r\nAssume `YieldProcessor()` took 10 cycles when the original code was written and tuned. `get_cycle_count()` is defined as `rdtsc`.\r\n\r\nUse the similar method, which is suggested by the example shown at https://software.intel.com/sites/default/files/managed/9e/bc/64-ia-32-architectures-optimization-manual.pdf\r\n\r\n![capture-example](https://user-images.githubusercontent.com/18431130/29585901-9e424aea-873d-11e7-83c5-f2da54a1a8f5.PNG)\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alexandrnikitin": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/12196", "title": "Making int.Parse(\"\") faster", "body": "This is a PoC to to make int.Parse() faster for 99%? cases.\r\nThe fast path only handles the `NumberStyles.Integer` style (sign, leading and trailing whitespaces)\r\nThis is a draft version. I will polish it if there's interest to have it in CLR. It reuses two functions `MatchChars` and `IsWhite`. I believe it's possible to make it faster (some magic with the loop and conditions, get rid of unsafe code and `MatchChars` function). It also possible to improve [all cases where `NumberStyles.Integer` used](https://github.com/dotnet/coreclr/search?l=C%23&p=2&q=NumberStyles.Integer&type=&utf8=%E2%9C%93)\r\nI pushed initial benchmarks to [a separate repo](https://github.com/alexandrnikitin/MakingIntParseFaster.NET) (I didn't manage to do them in the coreclr repos \ud83d\ude15 )\r\n\r\nBenchmark results:\r\n\r\n |            Method |      Mean |     Error |    StdDev |\r\n |------------------ |----------:|----------:|----------:|\r\n |          OneDigit |  60.28 ns | 1.5539 ns | 0.4036 ns |\r\n |          MaxValue | 105.17 ns | 3.4847 ns | 0.9051 ns |\r\n |              Sign | 109.57 ns | 4.4545 ns | 1.1570 ns |\r\n |       Whitespaces | 136.43 ns | 4.3078 ns | 1.1189 ns |\r\n |    FasterOneDigit |  18.97 ns | 0.6642 ns | 0.1725 ns |\r\n |    FasterMaxValue |  30.68 ns | 2.4894 ns | 0.6466 ns |\r\n |        FasterSign |  41.97 ns | 0.9735 ns | 0.2529 ns |\r\n | FasterWhitespaces | 208.79 ns | 6.2361 ns | 1.6198 ns |\r\n\r\n_Not sure what's wrong with the Whitespaces case_ \ud83d\ude0a \r\n\r\nRelated issues: https://github.com/dotnet/coreclr/pull/3995 https://github.com/dotnet/corefx/issues/13293 https://github.com/dotnet/coreclr/pull/3163\r\ncc who participated in previous discussions @jkotas @varocarbas @hughbe @danmosemsft @jakobbotsch @mikedn", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72808314", "body": "@jkotas What's the status of the bug? Could you share some insights?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72808314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "AviAvni": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/9189", "title": "Enable generic attributes", "body": "https://github.com/dotnet/roslyn/issues/953\r\n\r\nSuccesfully compile and run https://gist.github.com/AviAvni/00831abbddf4ceca198236de362ed449\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1097246/22398987/54601efa-e59b-11e6-894a-b61ce9f4bc83.png)\r\n\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1097246/22398992/6dc6f81e-e59b-11e6-9c8e-b5504f473296.png)\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "xoofx": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/8677", "title": "[WIP] Collectible Assemblies and AssemblyLoadContext", "body": "This is a followup of the issue #1684 (work done by @Rohansi) and the original issue #552 \r\n\r\nThis is PR is not mergeable as it is. It is a single commit for now to simplify the tracking of things that are changed. I will recommit everything once I have cleanup some bits here and there (the changes are very rough now... I haven't followed also using the define `FEATURE_COLLECTIBLE_ALC`...etc.)\r\n\r\nThe difference with #1684 is that a single `AssemblyLoaderAllocator` is now associated to the `AssemblyLoadContext`. Without changing much this class, I have added the ability to add a `DomainAssembly` (instead of the previous `SetDomainAssembly` method) to chain it to another domain assembly that is in the same ALC (via the member `DomainAssembly::m_NextDomainAssemblyInSameALC`). It allows to use the original code for single collectible assembly.\r\n\r\nAlso, the `AssemblyLoadContext` creates a weak handle on itself instead of a strong handle (otherwise it cannot self finalize). The Destroy of this context doesn't actually delete the native ALC but instead release a strong handle to the `LoaderAllocator` managed object (associated to the `AssemblyLoaderAllocator`). Then the finalizer of the `LoaderAllocator` via the `LoaderAllocatorScout` will be called, and there we will cleanup everything, including releasing the native `AssemblyLoadContext`.\r\n\r\nA simple test with an assembly loaded in loop seems to indicate that the memory is stable and nothing so far is crashing, but I expect many problems in many places, so this is really an early POC.\r\n\r\nI originally didn't use the PR #1684 and tried to perform the changes on my side, but I had to cherry pick some parts of the previous PR while encountering the same issues. One thing I'm really not happy currently is the code in the `LoaderAllocator::GCLoaderAllocators_RemoveAssemblies` (I had to fight with issues with part of the code `GC_NOTRIGGER` and others incompatible `GC_TRIGGERS`...etc.). One thing I don't like is to have multiple methods to remove all the internal caches associated to a `DomainAssembly` in the `AppDomain`. This code should be part of `AppDomain` instead. There  is also some issues with some maps that are using some `AssemblySpec` that were problematic because they were doing some GC_TRIGGERS (and the original `GCLoaderAllocators_RemoveAssemblies` was `GC_NOTRIGGER`)... so yeah, this part has to be heavily rewrite/cleanup somehow.\r\n\r\nComments are welcome (sorry if it is a bit of a mess!)\r\n\r\ncc: @jkotas @gkhanna79 @rahku \r\n\r\n\r\n\r\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ellismg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72291055", "body": "The PR for this change failed, but that's because the Jenkin's system was unable to find the correct ref to build, which I think is a configuration issue on our end.  I am going to merge this anyway.  We'll get a good read of quality from TFS and I've asked @mmitche to take a look at Jenkins when he has a chance.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72291055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72590798", "body": "One small nit, which you can disregard if there's a good reason.  LGTM otherwise.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72590798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72707438", "body": "This was fixed with #18 \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72707438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72715146", "body": "Looks good to me.  Thanks for this @adityam!\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72715146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72721414", "body": "Thanks for pointing this out @dpen2000.  Do you mind opening an issue for this instead?  We need the fix to come from an internal Microsoft person.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72721414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72773559", "body": "Presently we only build on and test a very specific configuration for Linux, which is Ubuntu 14.04.  We plan to include support for building on other distributions and versions at a later date, but right now we're focused on one specific version as we bring the stack up.\n\nI think we'd rather wait on addressing these issues until we get to a point where we have validation in our CI system so we know we won't regress.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72773559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72775312", "body": "Since support for Linux is still coming online, we haven't taken the time to actually produce a single directory which contains all the build components you would need to run an application.\n\nThe most interesting artifacts are just under the CMake folder right now:\n\n`/CMake/src/coreclr/hosts/unixcorerun/corerun` (The native application which hosts CoreCLR.)\n`/CMake/src/dlls/mscoree/coreclr/libcoreclr.so` (The CoreCLR Runtime.)\n\nWithin the next few days we'll document how to combine these plus managed libraries to get a run-time that can actually run simple managed code (unfortunately the process is quite rough right now).  Note the runtime itself is in a very alpha state on Linux right now.  Simple things work, but there's still a ton of work to be done.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72775312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72778789", "body": "LGTM, the only question I have is when this change gets mirrored back into TFS, is it going to break anything on the TFS side?  If you've done the due diligence, feel free to merge. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72778789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72779085", "body": "@janvorli I believe this is the correct fix for what we were hitting internally.  With Sergiy's help I was able to figure out that some of the bash issues we were seeing were tied to invoking the scripts via sudo (which is common for folks still on a TFS based workflow) and doing this fixes the issues there.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72779085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72781228", "body": "Thanks @mmdriley.  Looking over the files, it seems we unfortunately use CP1252 all over the place in our native files.  The managed ones look like they are pretty good about using UTF-8 either with or without a byte order marker.\n\nI'll do a pass and try to clean this up and see if this fixes @actboy168's issue.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72781228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72786895", "body": "Thanks.  The fix for this has been committed.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72786895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72790945", "body": "The factoring here is a little confusing.  In .NET Core we want to decouple the idea of the contract which exposes a type and the runtime assembly that implements that contract.  So the API surface area exposed by .NET Core lives in the corefx repository.  It happens that much of the implementation also lives there, but for some types, like System.DateTime, the implementation lives with the runtime itself in mscorlib.\n\nFor .NET Core, we're trying to pull as much of the implementation of the framework out of specific libraries tied to the runtime (like mscorlib) and into libraries that can be used across all .NET stacks.\n\nFor now the general guidance is if you have an issue with the framework itself (adding new surface area, removing or obsoleting existing surface are), you should discuss it in the CoreFX repo, even though the code might not live there.  If there's an issue with how a type is implemented (e.g, bug, performance issue, etc.) and that type is implemented in mscorlib, then it makes sense to discuss it here.\n\nThis is a little confusing, I know, but doing it this way gives the best chance that all the relevant folks see the issue and act on it in a timely manner.\n\nI have gone ahead and opened a corresponding version of this issue in CoreFX and I'm going to close this issue to make sure the discussion doesn't get split across the two threads.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72790945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72796173", "body": "@actboy168 can you grab [ellismg:clean-unicode-characters](https://github.com/ellismg/coreclr/tree/clean-unicode-characters) and see if that fixes your problem?  I'm having a bit of trouble getting my local machine in a state where I can reproduce your issue, so I can't verify it myself.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72796173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72796319", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72796319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72798816", "body": "@actboy168 Nevermind, I was finally able to reproduce the issue locally, so I can verify my fix.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72798816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72804032", "body": "@anydream Thanks for the heads up.  Can you share out the entire AsmConstants.tmp file either in a gist or e-mail it to me (my e-mail address is in my profile).\n\nWhat is your system locale set to?  I had mine set to Chinese (Simplified) and I wasn't hitting this, but it's possible that my settings weren't influencing powershell which runs the script that generates this file.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72804032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72807293", "body": "@anydream Intersesting.  My console is also set to 80 characters, but I'm not seeing an issue.  I think something might have changed between powershell versions to make the default host have a larger width for it's internal buffer.\n\nWhat version of Windows are you running?  7?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72807293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72808374", "body": "Not sure.  I'm glad you're unblocked for now.  I'm going to spin up a Windows 7 VM locally and figure out how to repro the issue and then squash the bug.  Thanks very much for your help here, I really appreciate it!\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72808374/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72811619", "body": "@OtherCrashOverride Can you please share out a gist of the generated AsmConstants.tmp file?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72811619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72820939", "body": "I believe that [ellismg:fix-h2inc-line-wrapping](https://github.com/ellismg/coreclr/tree/fix-h2inc-line-wrapping) addresses this issue, independent of what your console settings are.  This was a problem with Windows 7 regardless of locale (I could reproduce the hard wrapping behavior on an en-US Windows 7 VM).\n\nI verified that that the generated file is not wrapped, but I haven't completed a build.  @anydream or @OtherCrashOverride can you give it a whirl (you'll need the other fix as well, to address the Unicode issues). \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72820939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72828406", "body": "@shahid-pk You'll need do a bunch of legwork in order to get this to work (and unfortunately I'm not certain that someone outside of Microsoft can put all the pieces together right now, since I haven't tried to chase down all the dependencies to make sure we have build able projects in GitHub for them).\n\nAt a very high level, you need to do the following:\n1. Copy corerun and libcoreclr.so into a folder\n2. Add a version of mscorlib.dll compiled for Unix (this has to be generated on windows, take a look at build.cmd which has a flag you can use to get this building.  Note that you'll want to remove all the exiting built binaries manually before running this).\n3. ./corerun [path-to-managed-exe]\n\nYou should also understand that the runtime on Linux is super limited right now.  Stack walking doesn't work.  Trying to throw an exception won't work.  The version of Console.WriteLine in mscorlib.dll doesn't work on Linux (the version on CoreFX will work, but it depends on some other assemblies which we I don't believe that we produce publicly yet).\n\nGiven what we have up here today, I would be very surprised if you can do anything much more interesting than more than return an int from main.\n\nNote that managed debugging on Linux is completely nonexistent right now.  The best we have is you can set COMPlus_DumpJittedMethods=1 and the JIT will print each method it compiles.\n\nI very much want to get some stuff on our wiki that shows to build the Runtime on Linux and get enough managed components so you can run Hello World, but it's going to take us a little bit to actually document the whole process and make sure it's something folks outside of Microsoft can do, so while I encourage you to look around I just want to set expectations that everything is very very rough right now and we might not be super responsive to questions, until we officially published a workflow and blessed it.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72828406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72831166", "body": "@OtherCrashOverride Thanks!\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72831166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72953445", "body": "I would try to delete the binaries directory (so the AsmConstants.tmp file is recreated), make sure you have the fix in your local tree and try again.  If it's still any issue let me know.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72953445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/9792781", "body": "/cc: @stephentoub \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9792781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/12193619", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/12193619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/13827756", "body": "LGTM (commenting here because there was no PR for this commit due to a hiccup in our process).\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/13827756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/14515664", "body": "Will fix the spacing here.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/14515664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/120765217", "body": "@janvorli Thanks.  @omajid mentioned that as well, I'll pick that up as well.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/120765217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ramarag": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72544947", "body": "this has been done as part of my earlier change see - https://github.com/dotnet/coreclr/pull/4\nmore specifically - https://github.com/dotnet/coreclr/pull/4/files#diff-adec353b8bdbfa8c549ed738939291e8R107\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72544947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72747874", "body": "Thanks shiftkey for reporting the issue\nThe project files were not added in my previous commit. I have them now in https://github.com/dotnet/coreclr/pull/38\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72747874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72748278", "body": "Yes, I forgot to add them to the git staging area, so the commit did not pick them up\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72748278/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72918467", "body": "Yes as of today the apiset are not installed as part of product build. As a work around you can run <repo_root>tests\\runtest.cmd, it will populate a folder with all the apisets needed and framework implementations used by the tests\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72918467/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/40030472", "body": "Done\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/40030472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/42307204", "body": "this is only for EventSource\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/42307204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "gkhanna79": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72547815", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72547815/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72548734", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72548734/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72551049", "body": "@janvorli Can you please review as well?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72551049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72551251", "body": "LGTM.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72551251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72643120", "body": "@janvorli Please have a look at this.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72643120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72712089", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72712089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72713331", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72713331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72724137", "body": "Thanks fr0stbyte. We are working on getting the documentation up for various key pieces of the runtime.\n@brianrob - FYI\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72724137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72738413", "body": "Hi xplicit and SirCmpwn, \n\nThank you for reporting this issue. We will look into this as we continue to bring up our Linux implementation that will have full fidelity build and validation support, including having identified such platform version specific issues and addressing them. \n\nCurrently, we are building the product and infrastructure against a specific Ubuntu build where we have not run into this problem, so its great you brought it to our notice :)\n\n@janvorli - FYI.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72738413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72738706", "body": "Hi David,\n\nBringing VS 2015 support is of the top items on our list. Stayed tuned.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72738706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72739793", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72739793/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72883033", "body": "@KrzysztofCwalina can you please take a look? Looks like the apiset dependency is not installed as part of CoreConsole.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72883033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73015041", "body": "The Desktop CLR and CoreCLR are built from the same codebase. In principle, any contributions made to this repo will be mirrored back to the Desktop CLR branch as well. However, since Desktop CLR has a high degree of compatibility onus on it, any such change will have a closer scrutiny. Also, when they figure out in a public release of the Desktop CLR will depend upon its release schedule.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73015041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73015292", "body": "@KrzysztofCwalina Do you have any thoughts on how to package the dependencies for the Console example?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73015292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73015751", "body": "The invariant of requiring a clean command prompt for doing the build is documented in the Development Guide - https://github.com/dotnet/coreclr/wiki/Developer-Guide\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73015751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73015900", "body": "The requirement of clean command prompt is described in the Development Guide - https://github.com/dotnet/coreclr/wiki/Developer-Guide.\n\nCan you please share the warnings you got when building in non-English locale?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73015900/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73017332", "body": "@CarolEidt Can you please take a look?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73017332/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73030347", "body": "The corresponding .asm file (used on windows build) also makes it very explicit that g_GCShadow is QWORD:\n\n> > EXTERN  g_GCShadow:QWORD\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73030347/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/14481221", "body": "@steveharter can you please elaborate on the need for !DACCESS_COMPILE? \nCC @rahku \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/14481221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/21402233", "body": "Done.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/21402233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/22425644", "body": "Where is \"-portable\" being handled? I am not aware of any script handling it.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/22425644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/87842240", "body": "Were you able to validate that this fixes the issue?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/87842240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/122074583", "body": "Please elaborate on the fix :) ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/122074583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/122075582", "body": "Thanks - is this issue only in master?\r\n\r\nCC @wtgodbe ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/122075582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/24154818", "body": "I would suggest removing the \"(UPPERCASE_CMAKE_BUILD_TYPE STREQUAL RELWITHDEBINFO)\" from the \"else\" so that the change is inline with what @mathstuf is working upon.\n\nOtherwise, LGTM.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/24154818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/42307186", "body": "You should name this to something relevant to Event tracing - FEATURE_EVENT_TRACE_XPLAT is an option - unless the second define is only for Eventsource.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/42307186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/42307242", "body": "Got it!\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/42307242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/51831650", "body": "I am enabling it for all architectures on Windows aside from Arm64. Hence, the !ARM64.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/51831650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59752641", "body": "Using /DelayLoad (https://msdn.microsoft.com/en-us/library/yx9zd12s.aspx), we could specify the libraries to be delay loaded. However, it will require us to continue to link against RuntimeObject.lib that, in its current implementation, imports the functions from the libs we want to delay load. \n\nHowever, in a future toolset update, the import libs could change (e.g. APIs could move from one apiset to another), and thus, while we will delay load the older libs, we would have imported functions from the new one, and thus, break CoreCLR load on downlevel again.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59752641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59972146", "body": "Yes. This is what they suggested. This is possible now because runtime pieces remain statically linked while General library functions come from ucrt dynamically.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59972146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/60092276", "body": "Not yet. Defined for any future use for consistency.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/60092276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/75989642", "body": "I want to keep this around for logging/diagnostics.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/75989642/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/75990047", "body": "Fixed.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/75990047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/88793983", "body": "Is there a specific reason we need to set this?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/88793983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "xyziemba": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72699512", "body": "Thanks. Abandoning this PR.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72699512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72741867", "body": "@SirCmpwn What llvm version and clang version are getting picked up when you build? I can repro this with llvm/clang 3.4, but it appears resolved in 3.5.\n\n@janvorli @gkhanna79 @jkotas What llvm/clang version(s) are supported?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72741867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72949115", "body": "That means that the other side of the branch doesn't _need_ to be fixed since it's case insensitive already. It looks like #69 is already addressing cleaning this too, so I'll leave that out.\n\n@mathstuf I tried adding the docstrings you suggested above, but ccmake won't pick them up. It appears to prefer CMake's own internal docstring for CMAKE_BUILD_TYPE. It would be awesome if they had worked.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72949115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72959723", "body": "Aha! That worked. I'll update the PR in a couple minutes.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72959723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/24184261", "body": "Fixed.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/24184261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "jaredpar": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72706972", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72706972/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "AlexGhiondea": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72707133", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72707133/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72707663", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72707663/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72735052", "body": "@mmitche - could you take a look?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72735052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72754715", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72754715/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72755358", "body": "Could you also update the commit message to follow the published guidelines?\n\nhttps://github.com/dotnet/corefx/wiki/Contributing#commits\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72755358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72763261", "body": "The one outside the src folder is not needed. I will clean that up.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72763261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72775659", "body": "Hi\n\nThanks for the contribution.\n\nCould you update the commit message to follow the published guidelines?\n\nhttps://github.com/dotnet/corefx/wiki/Contributing#commits\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72775659/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72907124", "body": "@pborreli In my opinion the commit message is too short and too vague. Looking at it I can't tell which files (or at least which areas) where touched. I see that there are changes not jut to comments but to some code as well.\n\nAlso, I don't think it follows the git standard of using the verb at present tense (but that is just nit-picking).\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72907124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72909880", "body": "This was merged in with PR #46.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72909880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72910364", "body": "Is this happening when you have something like dir1.dir2 as the location of your fork?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72910364/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72910656", "body": "The change looks good.\n\nPlease squash the commits and it should be good to go :).\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72910656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72914451", "body": "I can see your point in this particular case, and I don't have a better commit message in mind right now.\n\nBut please understand that we have to maintain this code going forward and having meaningful comments will help years from now to understand why a change was made.\n\nInternally we are pushing hard to write better commit messages so sorry if I came in too strong about this.\n\nPlease do take a look at the link I provided as it contains the same guidance we are pushing people to follow internally. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72914451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72914578", "body": "Awesome! Once the CI completes I'll merge this in!\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72914578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72914814", "body": "Yes -- that is what I was asking.\n\nThanks for clarifying.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72914814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72919482", "body": "Thanks @mathstuf for this change. Would you mind updating the commit message to follow our guidelines described here https://github.com/dotnet/corefx/wiki/Contributing#commits ?\n\n@rahku could you take a look?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72919482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72921121", "body": "LGTM -- would you mind squashing the commits? Then we are good to go!\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72921121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72921712", "body": "Thanks for reporting this. \n\nAdding a cache for this might indeed speed up the code. Do you have any benchmarks to show how big this improvement would be?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72921712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72922620", "body": "@mathstuf Yes -- that is what I meant. Thank you!\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72922620/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72950717", "body": "We are still working on the test infrastructure for mscorlib.\n\nOur plan is to have the majority of tests defined in the CoreFx repo (factored based on contracts).\n\nI am working on setting up the right infrastructure to easily allow changes to mscorlib to be tested.\n\nWe are going to have mscorlib tests in the CoreCLR repo as well -- a very simple one is here https://github.com/dotnet/coreclr/blob/master/tests/src/managed/Compilation/Compilation.cs\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72950717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72951517", "body": "Yes, there is currently no good way to do that.\n\nWe are working on it.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72951517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72961814", "body": "Thanks for the contribution. At first glance the change look ok.\n\nHowever, since this code is shared with Desktop we need to run this through additional validation to make sure we don't break anything.\n\nOnce we are sure we are not breaking anything we are going to merge it in.\n\n@ramarag can you take a look at this?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72961814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72963364", "body": "Thanks for the contribution.\n\nSince this code is shared with desktop we need to make sure we don't break compatibility with it. \n\nCases where the behavior is different before/after the change are  considered breaking changes and need to be mitigated. \n\nThere are a couple of ways we mitigate breaking changes:\n- the code can be if-def'ed to only impact CoreCLR\n- we can code the fix such that it behaves one way on older platforms (ie. current version of Desktop) but get the new behavior for newer platforms. (this is handled by/with the AppContext class).\n\nFor this specific case, you can probably special case the situation where the enum backing type is smaller than the value that you need to assign to it and in that case have the old behavior.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72963364/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/22094248", "body": "Done.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/22094248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "dpen2000": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72722841", "body": "No problem: guess I'll have to learn some C++ to contribute to this repo after all :-)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72722841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "davidfowl": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72726288", "body": "Seems like this is in the wrong place\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72726288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72739638", "body": ":sparkles: \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72739638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72782254", "body": "Why is this in coreclr and not corefx?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72782254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72782333", "body": "@andredublin what would you do with it?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72782333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/10581653", "body": ":clap: \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/10581653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/18998264", "body": "I'm going to have to get used to this syntax\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/18998264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/25773964", "body": "CoreCLR not using the new compiler yet?", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/25773964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "troydai": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72726979", "body": "Yeah, i just closed the issue over there. :) I'll reopen that one. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72726979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72727252", "body": "Open at corefx: https://github.com/dotnet/corefx/issues/616\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72727252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "xplicit": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72735828", "body": "@duaneking maybe you are looking for this? \n\nhttps://github.com/dotnet/coreclr/blob/master/src/mscorlib/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs\n\nand this (reference source for .NET)\n\nhttps://github.com/Microsoft/referencesource/blob/master/mscorlib/system/security/cryptography/x509certificates/x509certificate.cs\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72735828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72740879", "body": "@lukehoban thanks for pointing that out, I've workarounded it by installing cmake 3.1.1 from ppa on my ubuntu 14.04\n\n```\napt-add-repository ppa:george-edison55/cmake-3.x -y\napt-get update -qq\napt-get install cmake\n```\n\nand install package `llvm` additionally\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72740879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72741090", "body": "@gkhanna79 which ubuntu version do you use?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72741090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72760123", "body": "Just FYI. I was able to compile without errors before the patch using these commands on fresh Ubuntu 14.04, but there were no binaries in Product directory.\n\n```\nsudo apt-get install git cmake clang-3.5 make llvm-3.5 gcc\ngit clone https://github.com/dotnet/coreclr\ncd coreclr\n./build.sh      \n```\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72760123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "SirCmpwn": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72736626", "body": "I am able to reproduce this on Arch Linux. The last few lines of the build are:\n\n```\nBuilding ASM object src/vm/wks/CMakeFiles/cee_wks.dir/__/amd64/theprestubamd64.S.o\nclang: warning: argument unused during compilation: '-nostdinc++'\nclang: warning: argument unused during compilation: '-nostdinc++'\n[ 20%] Building ASM object src/vm/wks/CMakeFiles/cee_wks.dir/__/amd64/virtualcallstubamd64.S.o\nclang: warning: argument unused during compilation: '-nostdinc++'\nLinking CXX static library libcee_wks.a\nError running link command: No such file or directory\nsrc/vm/wks/CMakeFiles/cee_wks.dir/build.make:5596: recipe for target 'src/vm/wks/libcee_wks.a' failed\nmake[2]: *** [src/vm/wks/libcee_wks.a] Error 2\nCMakeFiles/Makefile2:56373: recipe for target 'src/vm/wks/CMakeFiles/cee_wks.dir/all' failed\nmake[1]: *** [src/vm/wks/CMakeFiles/cee_wks.dir/all] Error 2\nMakefile:107: recipe for target 'all' failed\nmake: *** [all] Error 2\nFailed to build coreclr components.\n```\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72736626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72739097", "body": "I was able to fix this problem properly. I shall submit a pull request shortly.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72739097/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72739397", "body": "No, both `ar` and `llvm-ar` are in my `PATH` to no avail.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72739397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72741039", "body": "For what it's worth, I'm running cmake 3.1.1 here.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72741039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72741452", "body": "A note: `_CMAKE_TOOLCHAIN_PREFIX` is an undocumented internal variable that CMake uses. It may be a better choice to simply explicitly declare the entire toolchain.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72741452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72742060", "body": "```\nsircmpwn@makase ~> clang --version\nclang version 3.5.1 (tags/RELEASE_351/final)\nTarget: x86_64-unknown-linux-gnu\nThread model: posix\nsircmpwn@makase ~> llvm-ar --version\nLLVM (http://llvm.org/):\n  LLVM version 3.5.1\n  Optimized build.\n  Built Jan 14 2015 (03:18:15).\n  Default target: x86_64-unknown-linux-gnu\n  Host CPU: core-avx2\nsircmpwn@makase ~> cmake --version\ncmake version 3.1.1\n\nCMake suite maintained and supported by Kitware (kitware.com/cmake).\n```\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72742060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72744936", "body": "Hmm, it's odd that your llvm-ar executable would be named that. That sounds like a packaging error. Let me see if I can determine a consistent way to locate that file. Are the rest of your llvm tools (i.e. `llvm-as`, `llvm-link`, etc) postfixed with a version number?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72744936/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72745130", "body": "Looks like they're packaged without the postfix: http://packages.ubuntu.com/trusty/amd64/llvm/filelist\n\nThis is pretty weird.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72745130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72746776", "body": "Thanks for clarifying. That package is a pretty non-standard install of llvm, so some thought will have to be put into how to support it. I'm spinning up an Ubuntu VM now to see what I can do.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72746776/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72747682", "body": "I'm testing it on Arch Linux, which uses llvm 3.5 in the `llvm` package. The typical llvm install does not include a postfix.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72747682/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72751040", "body": "@janvorli I have just force pushed an alternative fix. Would you be so kind as to test it under Ubuntu for me?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72751040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72751421", "body": "Build server seems to have gotten through the cmake configuration part of this ordeal, so presumably this is good to go.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72751421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72755441", "body": "Happy to help :smile: \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72755441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72760783", "body": "I encountered the same issue and went searching for them. I found corerun at `./binaries/CMake/src/coreclr/hosts/unixcorerun/corerun`, but running it with a simple example gave:\n\n```\nsircmpwn@makase ~/s/coreclr master> cat test.cs\nclass Program\n{\n    static void Main()\n    {\n        System.Console.WriteLine(\"Hello world!\");\n    }\n}\nsircmpwn@makase ~/s/coreclr master> mcs test.cs\nsircmpwn@makase ~/s/coreclr master> mono test.exe\nHello world!\nsircmpwn@makase ~/s/coreclr master> ./binaries/CMake/src/coreclr/hosts/unixcorerun/corerun -c binaries/CMake/src/dlls/mscoree/coreclr/ test.exe\ndlopen failed to open the libcoreclr.so with error /home/sircmpwn/sources/coreclr/binaries/CMake/src/dlls/mscoree/coreclr/libcoreclr.so: undefined symbol: CHAIN_SUCCESS_COUNTER\n```\n\nAt this point I presumed I'd just run into expected bugs and figured I'd investigate more later.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72760783/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "lukehoban": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72737290", "body": "I ran into the same problem, running `build.sh VERBOSE=1` showed that the problem was with `CMAKE_AR` not being set correctly.\n\n```\nLinking CXX static library libCoreClrPal.a\ncd /home/lukeh/coreclr2/binaries/CMake/src/pal/src && /usr/bin/cmake -P CMakeFiles/CoreClrPal.dir/cmake_clean_target.cmake\ncd /home/lukeh/coreclr2/binaries/CMake/src/pal/src && /usr/bin/cmake -E cmake_link_script CMakeFiles/CoreClrPal.dir/link.txt --verbose=1\nCMAKE_AR-NOTFOUND cr libCoreClrPal.a  CMakeFiles/CoreClrPal.dir/arch/i386/context.cpp.o CMakeFiles/CoreClrPal.dir/arch/i386/processor.cpp.o CMakeFiles/CoreClrPal.dir/cruntime/file.cpp.o CMakeFiles/CoreClrPal.dir/cruntime/filecrt.cpp.o CMakeFiles/CoreClrPal.dir/cruntime/finite.cpp.o CMakeFiles/CoreClrPal.dir/cruntime/lstr.cpp.o CMakeFiles/CoreClrPal.dir/cruntime/malloc.cpp.o CMakeFiles/CoreClrPal.dir/cruntime/mbstring.cpp.o CMakeFiles/CoreClrPal.dir/cruntime/misc.cpp.o CMakeFiles/CoreClrPal.dir/cruntime/misctls.cpp.o CMakeFiles/CoreClrPal.dir/cruntime/path.cpp.o CMakeFiles/CoreClrPal.dir/cruntime/printf.cpp.o CMakeFiles/CoreClrPal.dir/cruntime/printfcpp.cpp.o CMakeFiles/CoreClrPal.dir/cruntime/silent_printf.cpp.o CMakeFiles/CoreClrPal.dir/cruntime/string.cpp.o CMakeFiles/CoreClrPal.dir/cruntime/stringtls.cpp.o CMakeFiles/CoreClrPal.dir/cruntime/thread.cpp.o CMakeFiles/CoreClrPal.dir/cruntime/wchar.cpp.o CMakeFiles/CoreClrPal.dir/cruntime/wchartls.cpp.o CMakeFiles/CoreClrPal.dir/debug/debug.cpp.o CMakeFiles/CoreClrPal.dir/exception/console.cpp.o CMakeFiles/CoreClrPal.dir/exception/seh.cpp.o CMakeFiles/CoreClrPal.dir/exception/signal.cpp.o CMakeFiles/CoreClrPal.dir/file/directory.cpp.o CMakeFiles/CoreClrPal.dir/file/disk.cpp.o CMakeFiles/CoreClrPal.dir/file/file.cpp.o CMakeFiles/CoreClrPal.dir/file/filetime.cpp.o CMakeFiles/CoreClrPal.dir/file/find.cpp.o CMakeFiles/CoreClrPal.dir/file/path.cpp.o CMakeFiles/CoreClrPal.dir/file/shmfilelockmgr.cpp.o CMakeFiles/CoreClrPal.dir/handlemgr/handleapi.cpp.o CMakeFiles/CoreClrPal.dir/handlemgr/handlemgr.cpp.o CMakeFiles/CoreClrPal.dir/init/pal.cpp.o CMakeFiles/CoreClrPal.dir/init/sxs.cpp.o CMakeFiles/CoreClrPal.dir/loader/module.cpp.o CMakeFiles/CoreClrPal.dir/loader/modulename.cpp.o CMakeFiles/CoreClrPal.dir/locale/unicode.cpp.o CMakeFiles/CoreClrPal.dir/locale/unicode_data.cpp.o CMakeFiles/CoreClrPal.dir/locale/utf8.cpp.o CMakeFiles/CoreClrPal.dir/map/common.cpp.o CMakeFiles/CoreClrPal.dir/map/map.cpp.o CMakeFiles/CoreClrPal.dir/map/virtual.cpp.o CMakeFiles/CoreClrPal.dir/memory/heap.cpp.o CMakeFiles/CoreClrPal.dir/memory/local.cpp.o CMakeFiles/CoreClrPal.dir/misc/dbgmsg.cpp.o CMakeFiles/CoreClrPal.dir/misc/environ.cpp.o CMakeFiles/CoreClrPal.dir/misc/error.cpp.o CMakeFiles/CoreClrPal.dir/misc/fmtmessage.cpp.o CMakeFiles/CoreClrPal.dir/misc/interlock.cpp.o CMakeFiles/CoreClrPal.dir/misc/miscpalapi.cpp.o CMakeFiles/CoreClrPal.dir/misc/strutil.cpp.o CMakeFiles/CoreClrPal.dir/misc/sysinfo.cpp.o CMakeFiles/CoreClrPal.dir/misc/time.cpp.o CMakeFiles/CoreClrPal.dir/misc/utils.cpp.o CMakeFiles/CoreClrPal.dir/misc/version.cpp.o CMakeFiles/CoreClrPal.dir/objmgr/palobjbase.cpp.o CMakeFiles/CoreClrPal.dir/objmgr/shmobject.cpp.o CMakeFiles/CoreClrPal.dir/objmgr/shmobjectmanager.cpp.o CMakeFiles/CoreClrPal.dir/safecrt/makepath_s.c.o CMakeFiles/CoreClrPal.dir/safecrt/memcpy_s.c.o CMakeFiles/CoreClrPal.dir/safecrt/memmove_s.c.o CMakeFiles/CoreClrPal.dir/safecrt/mbusafecrt.c.o CMakeFiles/CoreClrPal.dir/safecrt/safecrt_input_s.c.o CMakeFiles/CoreClrPal.dir/safecrt/safecrt_output_l.c.o CMakeFiles/CoreClrPal.dir/safecrt/safecrt_output_s.c.o CMakeFiles/CoreClrPal.dir/safecrt/safecrt_winput_s.c.o CMakeFiles/CoreClrPal.dir/safecrt/safecrt_woutput_s.c.o CMakeFiles/CoreClrPal.dir/safecrt/splitpath_s.c.o CMakeFiles/CoreClrPal.dir/safecrt/sprintf.c.o CMakeFiles/CoreClrPal.dir/safecrt/sscanf.c.o CMakeFiles/CoreClrPal.dir/safecrt/strcat_s.c.o CMakeFiles/CoreClrPal.dir/safecrt/strcpy_s.c.o CMakeFiles/CoreClrPal.dir/safecrt/strlen_s.c.o CMakeFiles/CoreClrPal.dir/safecrt/strncat_s.c.o CMakeFiles/CoreClrPal.dir/safecrt/strncpy_s.c.o CMakeFiles/CoreClrPal.dir/safecrt/strtok_s.c.o CMakeFiles/CoreClrPal.dir/safecrt/swprintf.c.o CMakeFiles/CoreClrPal.dir/safecrt/vsprintf.c.o CMakeFiles/CoreClrPal.dir/safecrt/vswprint.c.o CMakeFiles/CoreClrPal.dir/safecrt/wcscat_s.c.o CMakeFiles/CoreClrPal.dir/safecrt/wcscpy_s.c.o CMakeFiles/CoreClrPal.dir/safecrt/wcslen_s.c.o CMakeFiles/CoreClrPal.dir/safecrt/wcsncat_s.c.o CMakeFiles/CoreClrPal.dir/safecrt/wcsncpy_s.c.o CMakeFiles/CoreClrPal.dir/safecrt/wcstok_s.c.o CMakeFiles/CoreClrPal.dir/safecrt/wmakepath_s.c.o CMakeFiles/CoreClrPal.dir/safecrt/wsplitpath_s.c.o CMakeFiles/CoreClrPal.dir/safecrt/xtoa_s.c.o CMakeFiles/CoreClrPal.dir/safecrt/xtow_s.c.o CMakeFiles/CoreClrPal.dir/shmemory/shmemory.cpp.o CMakeFiles/CoreClrPal.dir/sync/cs.cpp.o CMakeFiles/CoreClrPal.dir/synchobj/event.cpp.o CMakeFiles/CoreClrPal.dir/synchobj/semaphore.cpp.o CMakeFiles/CoreClrPal.dir/synchobj/mutex.cpp.o CMakeFiles/CoreClrPal.dir/synchmgr/synchcontrollers.cpp.o CMakeFiles/CoreClrPal.dir/synchmgr/synchmanager.cpp.o CMakeFiles/CoreClrPal.dir/synchmgr/wait.cpp.o CMakeFiles/CoreClrPal.dir/thread/process.cpp.o CMakeFiles/CoreClrPal.dir/thread/thread.cpp.o CMakeFiles/CoreClrPal.dir/thread/threadsusp.cpp.o CMakeFiles/CoreClrPal.dir/thread/tls.cpp.o\nError running link command: No such file or directory\nmake[2]: *** [src/pal/src/libCoreClrPal.a] Error 2\n```\n\nI was able to work around this by patching `binaries/CMake/CMakeFiles/2.8.12.2/CMakeCXXCompiler.cmake` to set CMAKE_AR to `/usr/bin/llvm-ar`, but not sure what the correct fix is for this.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72737290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72738640", "body": "@gkhanna79 - Which Ubuntu build are you testing on currently?  \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72738640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "LouisStAmour": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72739247", "body": "Good to see a potential fix. My suggestion would have been: does it work if `ar` is on your `PATH`?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72739247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "peteraritchie": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72744244", "body": "It's kind of tricky because not all variable names are available when the exception is thrown.  In your example it could be that only _orderService is available by name because it's a member variable (it seems).  If items and customers are locals; they're names won't be known when the exception is thrown (unless the PDB is there--but if you have that you can debug it).  I can't say for sure, but only providing the names _some of the time_ might have been the impetus for not provide names at all.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72744244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72764123", "body": "@svick that can be problematic too because the IL is really a representation of something like this:\n\n```\nvar list = items.ToList();\nvar customerId = customer.CustomerId;\n_orderService.CreateOrder(list, customerId);\n```\n\nAnd that's _if_ the compiler(s) decided to put the retrieval of the  param values next to the method call.\n\nI expect there'd be a bit of work to associate those variables to a callvirt several instructions ahead of where the null value is actually found.  And if that value got cached/reused, it would make it a bit more complex.  I think \"easily\" is very optimistic.  If were easy, I'm sure someone would have done it before now.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72764123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72784041", "body": "I'm not saying don't do it or that there's no value to it, just that it's not going to be that easy. As soon as you provide \\* some \\* detail, you have to provide detail in all circumstances or there will be lots of bugs logged\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72784041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72877021", "body": "@jkotas is there someone on the team(s) that have looked at anything like this comment on this thread?  Having some detail on what has been researched so far in terms of what would need to change in the code would give the community something to hit the ground running with for a potential PR.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72877021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72902204", "body": "@vongillern Right, it may be easy for the person on the CLR team that has spent the most time in that code; but that doesn't mean that person has the time to perform the change. (if that were the case, this may have been done already).  For the community to do it, however acceptable that is to do, is likely not a quick task.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72902204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72932909", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72932909/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72961345", "body": "@EmJayGee Starting to sound a lot like contracts, or the very least code weaving.  I think if were approached form the compiler-side it may never get done.  Keep in mind there's 2-3 compilers in play for any piece of code: C#/VB, JIT 32-bit, and JIT 64-bit.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72961345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "vongillern": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72752337", "body": "Agreed. I'm not sure it'd be \"easy\", but well worth the effort. If the name was not available, including its type in the error message would make it unambiguous 95% of the time. (i.e. NullReferenceException - expression of type 'SuperOrderService' evaluated to null). \n\nMy guess though,  is that if the PDB is available, it would know the character ranges of the null expression. If i turn on \"break on thrown exceptions\" in the exceptions dialog box, it always breaks me in at the right point and I can inspect all of my variables. I just want a dump so I don't have to be actively debugging. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72752337/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72879220", "body": "+1 @peteraritchie, a comment from the team would be helpful. I spent a little time looking at it and the project is obviously so massive, I had a hard time knowing where I could even start.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72879220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "YingP99": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72753941", "body": "It's a working in progress. We need to port other security related libraries first before porting the X509Certificate; such as various hashing algorithms etc.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72753941/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "shiftkey": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72754509", "body": "@ramarag :+1: \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72754509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "svick": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72758777", "body": "@vongillern I think you can easily make that even better by including the name of the invoked method. Something like (mostly copying the existing message):\n\n> NullReferenceException: Object reference not set to an instance of an object when calling 'SuperOrderService.CreateOrder'.\n\nThis shouldn't be that hard to do, since the `callvirt` instruction that causes the vast majority of NREs knows which method it was.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72758777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72765548", "body": "@peteraritchie Yeah, I understand that associating `callvirt` with a variable may not be easy, but that's not what I'm talking about. What I meant is that the message would contain the type (as @vongillern suggested) and method that caused the NRE.\n\nSo, in the example, the message wouldn't tell you that `_orderService` is `null`, but it would tell you that the NRE happened when calling `SuperOrderService.CreateOrder()`, which should be sufficient to debug the issue.\n\nOr maybe I misunderstood what you're saying?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72765548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72771101", "body": "> I believe that NPE can be debugged in quite straightforward manner using crashdumps and WinDBG right now.\n\nI don't think that anything that involves crashdumps or WinDBG can be called straightforward. Especially if you consider that NRE is an exception that I think beginners often encounter.\n\n> NPEs are often caught\n\nI hope that you are wrong about this. NRE pretty much always indicates a bug and catching it just hides that bug.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72771101/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "Alexx999": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72766842", "body": "I believe that NPE can be debugged in quite straightforward manner using crashdumps and WinDBG right now.\nAdding some extra data is not that common for low-level exceptions, and NPEs are not the worst case (my personal favorite is \"FileNotFoundException\" when some assembly fails to resolve some dependency - you'll newer know _which_ one actually failed).\nPlus, it will surely hurt performance - exceptions are slow as it is, and NPEs are often caught.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72766842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72786400", "body": "@svick well, I probably just got used to it. Anyway, I surely agree that exception messages are often bad.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72786400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72786715", "body": "@mj1856 and what if I want to get current time in user's time zone? Calculate time using UtcNow and timezone offset?\nThe real problem is that DateTime.Now is the _most obvious_ way of working with time. Probably it should've been named the other way - Now returning UTC time and LocalNow returning local time, but now it's probably too late for that.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72786715/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72912608", "body": "@AlexGhiondea your comment looks damaged - I have sources at location \"D:\\Work\\.NET\\coreclr\", the problem is \".NET\" folder.\nThat behavior is to safeguard against including .svn (or .git) folder to package - if I remember it right .svn folder was created recursively inside every repo subfolder some time ago.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72912608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72925036", "body": "I had this issue too - the problem is that you try to build from VS command prompt. It's solved by simply running from normal console\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72925036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72936880", "body": "Okay, it seems I've got working fix, but without tests it's quite hard to check if it's correct. I've opened issue #78 to address this.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72936880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72940342", "body": "I want to run a few tests to be sure it works fine at some edge cases, and then I'll probably open a pull request - even if it won't be accepted then at least we'll get some feedback on this\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72940342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72951152", "body": "@mikedn Oh, I haven't updated my repo a while - missed that one. Still, I don't see any straightforward way to run that tests right now...\n\n@AlexGhiondea looking forward to see that working - will be really great\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72951152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72975132", "body": "OK, I got it - we play safe here :)\nI've got one idea how to make it behave exactly like the old one without hurting performance too much, I'll make it work that way\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72975132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72978657", "body": "Implemented that change.\nNew performance figures:\n\n```\nGood run: 214ms\nBad run: 187ms\nBig numbers run: 443ms\nSmall numbers run: 319ms\nAll letters run: 121ms\n```\n\nIt is now a bit slower with large numbers (still 25 times faster than original) and has roughly equal performance with small numbers.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72978657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "jgowdy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72770142", "body": "Fixed the issue with:\n\ntouch /usr/include/stropts.h\n\nIs that something we want to fix in the build process though?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72770142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72871249", "body": "That makes sense.  Is there somewhere that we've documented what the current specific configuration is?  I saw in another issue something about only supporting Clang 3.5.  I would suggest a section of the readme.md specifying what the supported platform for Linux build is presently, because plenty of people are going to try to build it on Linux (hopefully) and if they're trying on some distro other than Ubuntu or they're using one of the many distros still shipping Clang 3.4, it's going to seem like this simply doesn't work.\n\nI'd make a pull request for changes to readme.md but I don't know what the requirements are beyond Ubuntu 14.04 and Clang 3.5.  Is that it?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72871249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72874660", "body": "\"Once the engineering support (e.g. build and validation) is functionally complete, we will share the details on how to build and test the product on Linux.\"\n\nI see like many people I'm jumping the gun here based on the above language, but I'd recommend throwing something out there because most of the curious people like myself are going to likely try to build it anyway and discover the requirements from the issue responses or lose interest.  I'm pretty motivated personally to see this catch on.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72874660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72875242", "body": "I was able to successfully build with a fresh install of minimal Ubuntu Server 14.04, stock cmake 2.8.12.2, and Clang 3.5.  Just putting that much information should be sufficient for most people.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72875242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mj1856": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72775614", "body": "The obsolete message would be something like:\n\n> Using a `DateTime` to represent time in the local time zone can lead to globalization errors.  Please consider using `DateTimeOffset.Now` when working with the local time zone.  When working with UTC, use `DateTime.UtcNow` or `DateTimeOffset.UtcNow`.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72775614/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72789273", "body": "@davidfowl System.DateTime is in mscorlib.\n\n@Alexx999 You should use `DateTimeOffset.Now` for that, and ideally never convert it to a `DateTime`.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72789273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72790256", "body": "@davidfowl - or by \"this\" did you mean the objects themselves?  I'd be all for migrating `DateTime`, `DateTimeOffset`, `TimeZoneInfo` and perhaps `TimeSpan` over to corefx - if that is possible.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72790256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72791875", "body": "@ellismg - thanks for the clarification.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72791875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "stimms": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72776088", "body": "I certainly agree with @svick on this. One of the primary goals of .net should be to be as productive of an environment as possible. We should attempt to minimize the scenarios in which a developer needs to attach a debugger or examine a crash dump as they trend to be very time consuming operations. \n\nWith hundreds of thousands of developers encountering NPEs it doesn't take long for the time savings to really add up. I'm in favor of any action that gives us better error messages. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72776088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "akoeplinger": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72777306", "body": "See https://github.com/dotnet/coreclr/issues/26\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72777306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72835184", "body": "+1, anything that can be done to add more details to this exception should be investigated.\n\n@jkotas Thanks for the link, but that UserVoice is already 4 years old and has gotten a bunch of votes without an official statement from the team. Did you investigate a solution already? Did you run into problems or other concerns?  Would love to learn more details :)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72835184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72835451", "body": "Please check out https://github.com/dotnet/coreclr/wiki/Developer-Guide for an introduction to the build system and how to generate Visual Studio solutions.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72835451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73034378", "body": "The CI is a standard Jenkins with the [Embeddable Build Status](https://github.com/jenkinsci/embeddable-build-status-plugin) plugin: http://dotnet-ci.cloudapp.net/job/dotnet_coreclr_linux_debug/badge/\n\nI think the badges need to be updated there, which would of course also benefit all the other users of the plugin :)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73034378/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/31023791", "body": "This comment can be removed now as well.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/31023791/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/28594187", "body": "\"CPU-agnostic and OS-agnostic.\" <- actual sentence missing here\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/28594187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37753257", "body": "~~has only be one~~ has only _been_ one\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37753257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37753264", "body": "~~an answer the question~~  an answer _to_ the question\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37753264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37753266", "body": "~~can be store~~ can be _stored_\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37753266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37753274", "body": "That link doesn't exist anymore, it should be https://github.com/dotnet/corefx/blob/master/Documentation/coding-guidelines/breaking-changes.md\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37753274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37753282", "body": "~~we could have attribute~~ we could have _an_ attribute\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37753282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37753289", "body": "~~It also true even when~~ _It's_ also true even when\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37753289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37753292", "body": "~~a field fetch as one extra~~ a field fetch _is_ one extra \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37753292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37753295", "body": "- missing closing parens after `likely to contain garbage`\n- ~~Every time an object references that lives in the GC heap is update~~ Every time an object _reference_ that lives in the GC heap is _updated_\n- ~~Any fields whose values were updates~~ Any fields whose values were _updated_\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37753295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37753301", "body": "`to the name type name BaseSize its module.` -> not sure what this means,\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37753301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37753317", "body": "~~often use low-level~~ often _uses_ low-level\n~~can be used as long the~~ can be used as long _as_ the \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37753317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37753323", "body": "~~Al that would be required~~  _All_ that would be required\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37753323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37753328", "body": "extraneous `3.`\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37753328/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37753332", "body": "~~inlinin~~ _inlining_\n~~cost of having making~~ cost of making\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37753332/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37753336", "body": "~~Experiment~~ _Experiments_\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37753336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37753345", "body": "~~once you have mechanism~~ once you have _a_ mechanism\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37753345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37753349", "body": "~~which the needed operations are known~~ _where_ the needed operations are known\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37753349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37753353", "body": "~~Assume that holds RCX holds~~ Assume that RCX holds\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37753353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37753357", "body": "missing closing parens after `which might include fixing up the slot again`\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37753357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37753361", "body": "- ~~so it would have be better~~ so it would have _to_ be better\n- ~~better than VSD for in polymorphic~~ better than VSD for polymorphic\n- ~~we have a some possible mitigations~~ we have some possible mitigations \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37753361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37753364", "body": "~~for ANY type will fast~~ for ANY type will _be_ fast\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37753364/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37753369", "body": "~~at any particular call might be~~ _as_ any particular call might be\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37753369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37753377", "body": "~~from start end~~ from start _to_ end\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37753377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "alex": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72777341", "body": "Oops, yeah, this is a dupe.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72777341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "richlander": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72777569", "body": "Appreciated, @adityam.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72777569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [], "review_comments": []}, "mmdriley": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72780960", "body": "src\\vm\\generics.h has [a \u00a7 symbol at line 29](https://github.com/dotnet/coreclr/blob/cbf46fb0b6a0b209ed1caf4a680910b383e68cba/src/vm/generics.h#L29). In the file it's encoded as 0xA7, which is valid in [CP1252](https://msdn.microsoft.com/en-us/goglobal/cc305145) but is a lead byte in [CP936](https://msdn.microsoft.com/en-US/goglobal/cc305153).\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72780960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "isbecker": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72781036", "body": "You should probably just make the PR and if they approve the idea, then it will be even simpler to get into the pipe. :)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72781036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "gaochundong": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72781387", "body": "Great Idea~~\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72781387/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "andredublin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72783922", "body": "@davidfowl not sure yet, but maybe package it as a dockerized runtime container that can be used to compile code against might be one use case.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72783922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "anydream": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72803063", "body": "@ellismg \n'clean-unicode-characters' branch solved code page problems, but new error occurs:\n\n```\n       \u201cD:\\proj\\coreclr-u\\binaries\\CMake\\install.vcxproj\u201d(rebuild target) (1) ->\n\n       \u201cD:\\proj\\coreclr-u\\binaries\\CMake\\ALL_BUILD.vcxproj\u201d(default target) (2:2) ->\n\n       \u201cD:\\proj\\coreclr-u\\binaries\\CMake\\src\\vm\\wks\\cee_wks.vcxproj\u201d(default target)\n (4:3\n       ) ->\n       (PreBuildEvent target) ->\n         D:/proj/coreclr-u/binaries/CMake/src/vm/wks/AsmConstants.tmp(118): fat\n       al error C1012: \u4e0d\u5339\u914d\u7684\u62ec\u53f7 unmatched parenthesis : missing \u201c)\u201d [D:\\proj\\coreclr-u\\binaries\\CMak\ne\\src\\vm\\\n       wks\\cee_wks.vcxproj]\n```\n\nAsmConstants.tmp:\n\n```\nline 118:#if defined(_DEBUG) && !defined(DACCESS_COMPILE) && (defined(_TARGET_X86_) || d\nline 119:efined(_TARGET_AMD64_))\n```\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72803063/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72805210", "body": "Yes, my locale is Chinese (Simplified) CP936, the generated file AsmConstants.tmp was e-mail to you.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72805210/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72805850", "body": "Aha, I know why occurs this error...\nBecause my console buffer-width is set to 80 characters..\n![default](https://cloud.githubusercontent.com/assets/3724537/6037135/e2c02060-ac8a-11e4-9207-49944844072a.png)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72805850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72808199", "body": "I am now using Windows 7 Ultimate SP1.\nChange the console buffer-width was resolved that problem and now I have successfully built CoreCLR :)\nPerhaps that is because of the different locale strategies of cmd.exe?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72808199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72809206", "body": "Correction: set up console default 'buffer width' value can solve that problem\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72809206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72811958", "body": "@OtherCrashOverride I set console 'buffer width' to 300 then it works\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72811958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72813238", "body": "@OtherCrashOverride at line 193 of your code, the maximum character length is 131....so you need larger width value\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72813238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72831419", "body": "@ellismg Yes it works :+1: \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72831419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "yaakov-h": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72803594", "body": "I agree with this. I've sometimes had to resort to checking the IL offset of the exception location and compare it with a disassembled assembly just to figure out exactly which reference was null.\n\nThe more information about an error, the better.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72803594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "sergiy-k": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72806456", "body": "Thanks  @shahid-pk. I have noticed these warnings earlier today too. This is a recent regression and we should definitely fix them. The product code should build without warnings.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72806456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72927390", "body": "Yes, right now we support 64bit only. There is still a lot of work ahead before we can say that it is ready. Once it is functional we can consider other platforms as well. But for now 64bit is our main focus.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72927390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72963963", "body": "@Piot I\u2019m curious whether you are building a debug or release version of CoreClr?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72963963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72989170", "body": "Binplacing of native CoreCLR binaries on Linux has been enabled today. So the Product folder should no longer be empty. But we still need to publish instruction describing how to build managed framework libraries and applications for Linux before you can actually start playing with it.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72989170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72990460", "body": "We are working on debugging tools too. We have started bringing up CoreCLR on Linux only recently so there is still a lot of rough edges and missing pieces. Please bear with us. :)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72990460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72999754", "body": "LGTM. Thank you for fixing it!\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72999754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "shahid-pk": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72808116", "body": "@SirCmpwn \n\nI went a little further i copied, corerun , libcoreclr.so , libmscordaccore.so to a directery than compiled test.cs to test.exe using mcs and issued this\n**./corerun -c ./ test.exe**\nI got this error\n**ExecuteAssembly failed - status: 0x80004005**\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72808116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72822266", "body": "@sergiy-k \nI know the repository is not ready yet for linux but i want to play. I got into a problem after compiling this when try to run a trivial .exe with it compiled using mono compiler i get this error.\n**ExecuteAssembly failed - status: 0x80004005**\ncan you point me where the problem may be.?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72822266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72829493", "body": "@ellismg  Thanks a lot you gave me plenty to play with. It was very helpful.\nI wanted this just for playing around as i know this repo is not near ready for unix yet.Take your time we can wait.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72829493/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72935253", "body": "you need to have clang and llvm 3.5\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72935253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73037832", "body": "@cnblogs-dudu \nthe only supported compiler currently is clang 3.5 , and i think somehow your build was compiling it using gcc.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73037832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/24232415", "body": "i think here also should be a message like detected darwin.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/24232415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "OtherCrashOverride": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72808499", "body": "I am also seeing the issue with AsmConstants.tmp.  It occurs for me on Windows 7. I am using an English-US locale.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72808499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72811394", "body": "I set a console width of 132; however, I encounter other error(s) attempting to build.\n\nAbridged output:\n      (PreBuildEvent target) ->\n        coreclr-master/binaries/CMake/src/vm/wks/AsmConstants.tmp(193): fatal error C1017:\n       invalid integer constant expression [coreclr-master\\binaries\\CMake\\src\\vm\\wks\\cee_w\n      ks.vcxproj]\n        C:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\V120\\Microsoft.CppCommon.targets(122,5): error MSB3073: The command \"set\n      local\\r [coreclr-master\\coreclr-master\\binaries\\CMake\\src\\vm\\wks\\cee_wks.vcxproj]\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72811394/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72812602", "body": "https://gist.github.com/OtherCrashOverride/1b3c1c2011a8143873af\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72812602/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72812883", "body": "Trying again with a console width of 300.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72812883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72821405", "body": "Confirmed that changing the console width to 300 allows the build to succeed.\n\nVery impressive terminals at Microsoft ;)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72821405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72826059", "body": "Testing patch.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72826059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72831117", "body": "Build with patch in a 80x25 console succeeded.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72831117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72955731", "body": "32bit support is a must.  Even though hardware may be 64bit, I don't see a lot of on host deployments.  I think the main use case is virtual machines where light weight deployment is preferred to a full and heavy IIS/ASP.Net Windows server install.\n\nMy intended use case is 32bit x86 virtual machines and 32bit ARM SoC devices (IoT).  For 'heavy' deployments, I already have Mono.  I am thrilled at the 'just the basics' approach of .Net Core.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72955731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72957280", "body": "I should also point out that the 'deal breaker' comes down to remote debugging support with Visual Studio.  Without this feature, .Net Core is useless to me regardless of 32/64 bit operation.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72957280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73002157", "body": "Exceptions should be exceptional.  If you think something may be null, you should check that condition in code to ensure proper operation.  I think this is more an issue of coding practice than a feature for the runtime.  The Common Language Runtime is, as the name implies, common among many languages so it would likely require strategies for what makes sense for each language to produce a more useful message targeted at the developer using that language.\n\nTherefore, I suggest the proper place for this is the IDE where both source code and language are known.  NullReferenceException should be a rare occurrence if good coding practices are observed.\n\n(For an example, see F#'s use of null versus C#)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73002157/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "pborreli": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72818111", "body": "@AlexGhiondea would you mind to explain what is wrong in this commit message please ?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72818111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72908237", "body": "@AlexGhiondea already made more than 1000 pull requests on GitHub using same commit message (`Fixed typo` or `Fixed typos`) and it's the first time I have this kind of feedback.\nAnd btw `jut` -> `just`\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72908237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "actboy168": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72820988", "body": "@ellismg \nYes, It's fixed.\nThanks very much for your help.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72820988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "sidristij": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72836352", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72836352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jakobbotsch": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72845683", "body": "That patch fixes the issue for me as well.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72845683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/17909049", "body": "Will it be possible to pin `Span<T>` contents for interop with native code?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/17909049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "sharique": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72854517", "body": "I don't think supporting 32-bit is worth effort, as you won't find new 32-bit hardware. I guess ARM should be in roadmap. \nI think Mono framework already support ARM.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72854517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "borgdylan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72855340", "body": "Mono also supports 32-bit linux. Running 32 bit linux on new hardware gives memory savings plus its required if developing for certain Intel IoT boards.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72855340/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "russgray": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72876296", "body": "No problem, I'll duplicate the change with the style tweak on the other repo\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72876296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mathstuf": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72894632", "body": "Probably want to fix the other side of the if branch here as well since `CMAKE_CONFIGURATION_TYPES` defaults to camel-case options. In fact, `CMAKE_CONFIGURATION_TYPES` should probably remove the `MinSizeRel` option from the list (or just use the values in the list directly rather than assuming things about it).\n\nAnother thing to do might be:\n\n``` cmake\nset(CMAKE_BUILD_TYPE \"Release\" CACHE \"The set of flags to use when building\" STRING)\nset_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS \"Release;RelWithDebInfo;Debug\")\n```\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72894632/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72922077", "body": "@AlexGhiondea provided more info in the commit messages. Or do you mean something closer to \"don't use a 'cmake:' prefix and make the summary a sentence\"?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72922077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72955543", "body": "On Wed, Feb 04, 2015 at 14:01:55 -0800, Xy Ziemba wrote:\n\n> @mathstuf I tried adding the docstrings you suggested above, but\n> ccmake won't pick them up. It appears to prefer CMake's own internal\n> docstring for CMAKE_BUILD_TYPE. It would be awesome if they had\n> worked.\n\nActually, `CMAKE_BUILD_TYPE` _is_ already a cache variable, so all that\nshould be needed is the `set_property` call (for some reason I got it\nmixed up with `BUILD_SHARED_LIBS` which is _not_ in the cache by\ndefault).\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72955543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72955624", "body": "On Wed, Feb 04, 2015 at 13:53:19 -0800, Rahul Kumar wrote:\n\n> @mathstuf can you modify your changes accordingly.\n\nYep, tomorrow if I don't get a chance tonight.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72955624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/9639111", "body": "FWIW, this doesn't work as intended (or it should be `NOT WIN32`). `CMAKE_BUILD_TYPE` isn't defined for Visual Studio. See #101.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9639111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "Nassiel": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72895910", "body": "T:/CoreCLR/binaries/CMake/src/vm/wks/AsmConstants.tmp(118): fatal error C1012: unmatched parenthesis : missing ')' [T:\\CoreCLR\\binaries\\CMake\\src\\vm\\wks\\cee_wks.vcxproj]\n\nHere is the core problem, at line 118 this is what is always generating:\n(118) #if defined(_DEBUG) && !defined(DACCESS_COMPILE) && (defined(_TARGET_X86_) || d\n(119) efined(_TARGET_AMD64_))\n\nCMake is splitting a single line in two lines. So the compilation doesn't finish and Nuget expects more dlls. Now the question is why it breaks it? I'm using CMake 3.1.1, the latest release.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72895910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72928353", "body": "But in theory that bug is solved, because I download it after he upload the bug, and well it could be of course but why is happening again? If it's the same (to my have all the sense)\n\nDespite, thanks Erik :+1: \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72928353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73009008", "body": "Yes all package repos, but I'll build from the latest instead of repos. Despite of that, I think that it's an error force to use the latest version of each component.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73009008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73011827", "body": "Well, I feel like a noob... but now it runs smoothly. Thanks to all!\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73011827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ErikEJ": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72897383", "body": "Maybe this https://github.com/dotnet/coreclr/issues/57 ?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72897383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73025413", "body": "Did you read the general contributing guide here: https://github.com/dotnet/corefx/wiki/Contributing (bottom paragraphs) ?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73025413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73038627", "body": "No yet! http://blogs.msdn.com/b/dotnet/archive/2015/01/28/net-core-open-source-update.aspx \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73038627/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "gablank": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72912988", "body": "Done!\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72912988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "n8ohu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72924323", "body": "Indeed; none of my current Linux machines run a 64 bit version of Linux, primarily because I utilize numerous applications that would require complex workarounds to run on 64 bit. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72924323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Knagis": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72925059", "body": "Very quick test - reading 10MB (~147k lines) text file - the reuse of `StringBuilder` gains ~30-40ms on my machine.\n\nThe source - CommonMark.NET parser. This optimization (custom `ReadLine()` by using only `Read()` calls from `TextReader`) gets me from ~280ms to ~240ms for the whole process (read/parse/write) - a very significant improvement.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72925059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72937929", "body": "Results from MeasureIt (since I realised my code uses the builder much more often for multiple purposes). I ran the tool on .NET 4.5.2. The StreamReader code was taken from this repository.\n\n```\n    timer10.Measure(\"StreamReader.Bad\", 1, delegate\n    {\n        using (var reader = new System.IO.Bad.StreamReader(path))\n            while (reader.ReadLine() != null) { }\n    });\n\n    timer10.Measure(\"StreamReader.Good\", 1, delegate\n    {\n        using (var reader = new System.IO.Good.StreamReader(path))\n            while (reader.ReadLine() != null) { }\n    });\n\n                  Median      Mean        Mean%   Min        Min%\nWithout reuse     43527980    45161760    100%    41866530   100%\nReusing builder:  39564030    38943990    86%     29291970   70%\n```\n\n[Source file used](https://github.com/Knagis/CommonMarkBenchmark/blob/master/MarkdownCompare/Tests/progit.md)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72937929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "damageboy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72928302", "body": "Thanks!, works now!\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72928302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "FWest98": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72937159", "body": "What exactly did you change to fix this? Can you post the new implementation here while we're waiting for the tests?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72937159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "PashaPash": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72938964", "body": "I updated the commit message to match contribution guidelines\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72938964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "Piot": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72939655", "body": "Please let me know if there is anything I can help out with!\n\nTrying to run a hello world now results in:\n\n`dlopen failed to open the libcoreclr.so with error /home/peter/test/libcoreclr.so: undefined symbol: CHAIN_SUCCESS_COUNTER`\n\nEdit: mscorlib was missing, not sure how to build it on linux.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72939655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "rahku": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72947566", "body": "@mathstuf can you modify your changes accordingly. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72947566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/14483564", "body": "The fields in the type should be same in coreclr as well as dac. Otherwise dac would be unusable. Dac needs to know the correct size & fields of certain types and this is one of the types. I have an issue assigned to me do add this check as part of build. Therefore !defined DACCESS_COMPILE should be removed from here. Would this cause build errors?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/14483564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/18799096", "body": "r0 cannot contain both retval & functionId\nSimilarly for r1 it cannot contain both retval & location of args\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/18799096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/18799141", "body": "why is there padding in between struct\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/18799141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59915252", "body": "It was there from before. I did not remove it. I can remove though.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59915252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59915284", "body": "ok\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59915284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59915778", "body": "I disagree. It might be intuitive for you but it would help any new person reading the code. It explains why there is a need for host arch & target arch and when they would be different.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59915778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59923603", "body": "Even I am not sure what it is. This was already present in the file. Got this on web\nhttps://cmake.org/cmake/help/v3.0/policy/CMP0042.html\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59923603/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59926910", "body": "I do understand that it is a little difficult to see the diff. The reason I did the reordering is so that related code are together and you don't need to scroll up & down to understand what is going on. People have been adding changes in file all over the place. It might be helpful to understand what I am saying if you could look at just my changed file and not the diff. If you want to move any specific piece of code within the block of related code I could do that. If you also wish to move the whole block of related code up and down....I could do that to. But I do not think reverting back to the old way is right to do.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59926910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59927008", "body": "I can try if codeflow can help you in this diff any better\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59927008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59945305", "body": "ok got it. I can remove that.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59945305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59946070", "body": "ok will do\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59946070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/62118347", "body": "I would move this before line 539. Also add a comment regarding the objective for this\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/62118347/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/75979578", "body": "should this go away\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/75979578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/76108749", "body": "ok then instead of printing cmake variable names can it be more user friendly \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/76108749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "directhex": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72955085", "body": "FWIW, I am _not_ seeing the issue reported by @Piot  - maybe it should be split out as a distinct issue from this one?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72955085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "EmJayGee": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72960471", "body": "Wouldn't this feature overall be better cast as a language/compiler feature\nrather than of the runtime?  The end goal is easily mapping back to the\nsource; debug info is designed to assist that but if we want things like\nthe identifier/expression text, wouldn't this best be handled by the\ncompiler?\n\nI'm assuming that this kind of information being available only in debug\nbuilds with symbols available to the runtime will be a non-starter.\n\nMike\n\nOn Wed, Feb 4, 2015 at 2:31 PM, Jan Kotas notifications@github.com wrote:\n\n> Correct, the JIT and PDB do not have enough precision in debug info today\n> to reliably identify the source of NullReferenceException. For example, the\n> following C# statement:\n> \n> ```\n>     foo(a.ToString(), b.ToString(), c.ToString());\n> ```\n> \n> has just one sequence point, and so it is not possible to identify from\n> just the NullReferenceException location and debug info which one of a, b\n> or c was null. If you would like to see the good error message even with\n> JIT optimizations on, it is even harder because of the debug info tracking\n> is not guaranteed to be preserved by the JIT optimizations today.\n> \n> I think that the first step to attack this problem would be to write a\n> design proposal about possible approaches. The ones identified by @mikedn\n> https://github.com/mikedn would be a good start. Focus on:\n> - The rough sketch of extra information that would flow between the\n>   different components in the system\n> - The user experience - how good and reliable would be the exception\n>   messages\n> - The estimated overhead in disk footprint, RAM and CPU cycles\n> \n> I know it is a lot of work...\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/dotnet/coreclr/issues/25#issuecomment-72954338.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72960471/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "duaneking": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72973450", "body": "@xplicit No these do not include everything.  Or even the X509Certificate2 object; you pointed to the older one.\n\n@jkotas The source for it is available online easily already why not just add it to the repro? We can already see due to sites that host the reference source that the private keys are stored in a crypto context even if that was not the plan of the developer using the object, for example.\n\n@YingP99 What is so bad about the code that already exists and is available through publicly available  reference source already? \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72973450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "luxe": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72976647", "body": "@pborreli  Also, I think it would be better if you gave the definition of each word that you corrected.  This will make it easier to understand what exactly the typos were.  Follow the guidelines given to you, and don't forget to provide the etymology of these words, as well as the manufacturer of the keyboard you used.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72976647/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 1, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "df-5": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72981314", "body": "3.5 works for me. (Out of curiosity, are you using package repos? I thought gcc/g++ was 4.9+ already)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72981314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "cmckinsey": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72984872", "body": "Alexrp, we are still interested in understanding if there is a potential bug there? Is the bug concerned with the atomicity of the load operation or the memory order aspects? Thanks.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72984872/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72985282", "body": "One additional comment, I believe a helper call is generated by the JIT for interlocked operations on object references since a write-barrier is required. If this isn't the case let us know.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72985282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "maxinfet": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72986271", "body": "This would be really useful\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72986271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "donaldcao": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72992481", "body": "After run runtest.cmd, still missing API-MS-WIN-APPMODEL-RUNTIME-L1-1-0.DLL API-MS-WIN-SHCORE-SCALING-L1-1-1.DLL DCOMP.DLL and IESHIMS.DLL, others copied to the output folder.\n\nWin 7 64bit, Vs 2013\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/72992481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "azhmur": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73001963", "body": "Sorry guys, it was my misunderstanding. We were doing tests under VS debugger (Release/Any CPU, x64 host, Prefer 32-bit disabled). It seems VS debugger disables inlining in JIT for a purpose of better line positioning (despite assembly attributes). If i run same code without debugger initially and attach it after JIT made his job i can see completely different code from one by simple F5 run.\n\nhttps://gist.github.com/azhmur/3bbd85330988734c658a\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73001963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73004191", "body": "Thank you for clarification!\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73004191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "robertsundstrom": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73002701", "body": "@KOLANICH This seems to be a framework question. Could you repost and elaborate in the dotnet/corefx repository? Please.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73002701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "copumpkin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73003472", "body": "@AlexGhiondea it seems unlikely that even several years from now there would be any confusion when a new developer comes along, runs a git blame on a file, and sees a commit message saying \"Fixed typo\".\n\nI struggle to imagine any sort of clarification that would add more actual information. Artificially inflating the commit message just to meet an arbitrary standard (one that I mostly agree with, for semantically meaningful changes) feels like it would just decrease the signal to noise ratio.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73003472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Fireboyd78": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73026451", "body": "Hi Erik, definitely my bad for not reading that. I'm assuming you mean this part:\n\n**DO NOT** send PRs for style changes. We'd rather handle them holistically and they are tough to review and merge.\n\nMy apologies! Does this include code that's difficult to read and reminds me of \"spaghetti code\"? Or is it really anything to do with readability? \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73026451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73029862", "body": "Thank you for your honesty. I'll take this as a learning experience and read the guidelines next time.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73029862/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/9600809", "body": "Shouldn't that say \"Failed to authenticate\" instead? \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9600809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "KOLANICH": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73036399", "body": "System.Security is not a part of CoreFX\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73036399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "cnblogs-dudu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73037500", "body": "I build CoreCLR on Linux CentOS 6.5 and experience following errors:\n\n```\nExecuting make\n[  0%] Building CXX object src/pal/src/CMakeFiles/CoreClrPal.dir/exception/seh.cpp.o\nIn file included from /data/git/coreclr/src/pal/src/exception/seh.cpp:22:\nIn file included from /usr/bin/../lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/typeinfo:34:\nIn file included from /usr/bin/../lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/exception:148:\n/usr/bin/../lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/exception_ptr.h:143:13: error: unknown type\n      name 'type_info'\n      const type_info*\n            ^\n1 error generated.\nmake[2]: *** [src/pal/src/CMakeFiles/CoreClrPal.dir/exception/seh.cpp.o] Error 1\nmake[1]: *** [src/pal/src/CMakeFiles/CoreClrPal.dir/all] Error 2\nmake: *** [all] Error 2\nFailed to build coreclr components.\n```\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73037500/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73046416", "body": "@shahid-pk \nthanks. `yum install clang` on CentOS, the latest version of clang is 3.4.2. Maybe this is reason. I will try Ubuntu.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73046416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73065095", "body": "Manually install clang 3.5 on Ubuntu and build successfully!\n- `apt-get install cmake`\n- `wget http://llvm.org/releases/3.5.0/clang+llvm-3.5.0-x86_64-linux-gnu-ubuntu-14.04.tar.xz`\n- `tar xvf clang+llvm-3.5.0-x86_64-linux-gnu-ubuntu-14.04.tar.xz`\n- `cd clang+llvm-3.5.0-x86_64-linux-gnu`\n- `cp -R * /usr`\n- `sh build.sh`\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73065095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dkreuter": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73049848", "body": "Oh, o_O, okay. That's unconventional. This definition is local to the PAL I guess. In other parts of the code-base ASSERT and _ASSERTE are the same:\n\n```\nsrc/debug/di/rspriv.h:  #define ASSERT(x) _ASSERTE(x)\nsrc/debug/ee/debugger.h:#define ASSERT(x) _ASSERTE(x)\nsrc/gc/sample/gcenv.h:  #define ASSERT(_expr) assert(_expr)\nsrc/vm/hash.h:          #define ASSERT _ASSERTE\nsrc/palrt/shlwapip.h:   #define ASSERT          _ASSERTE\nsrc/gc/gcpriv.h:        #define ASSERT _ASSERTE\n```\n\nWhat about the null deref situations, are they considered too fatal to handle?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73049848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73062028", "body": "I see. Thanks for the explanation.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73062028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "pgavlin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73065300", "body": "Acknowledged. It is not clear from the name (or in these two cases, the usage) whether PREPARE_EXTERNAL_VAR is loading the address or the value of the given location into the target register; perhaps there is a better name for this macro.\n\nI've replaced \"BYTE PTR\" with \"qword ptr\" where necessary; PTAL.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/issues/comments/73065300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/9968287", "body": "It isn't--I'm pretty sure that it will work, but I don't have an OS X machine with which to test.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9968287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9968616", "body": "I had hoped that would be handled by the changes in build.sh. I'll look into this a bit more (and see if I can scrounge up a Mac to test with :)).\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9968616/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "F03SD": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/9630695", "body": "ussles CoreFX fork . e.g microsoft is su*k\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9630695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "praeclarum": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/9635644", "body": "Why the bytes?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9635644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9637959", "body": "Thank you. Yes I caught the discussion just 5 mins after posting this comment. Sad to see ugly code, happy to know it's fast. :-)\n\nSent from my iPhone\n\n> On Feb 7, 2015, at 3:08 AM, Jan Kotas notifications@github.com wrote:\n> \n> The writebarriers are patched by WriteBarrierManager that assumes certain layout. The problem is that the Apple assembler does not use short jump encoding that throws the layout off. We had an extensive discussion about the best solution during review of this PR.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9637959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "steipete": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/9636807", "body": "The second semicolon can be removed.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9636807/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "kangaroo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/9771947", "body": "So this won't work portably.  lib unwind declares the unw_context_t as:\n\nstruct unw_context_t { uint64_t data[128]; };\n\nWe can just use unw_set_reg here tho?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9771947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9771951", "body": "UNW_X86_64_RIP and UNW_X86_64_RSP are not part of the base API.  We should use:\n\nUNW_REG_IP\nUNW_REG_SP\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9771951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9771958", "body": "This API also isn't available on mac.  From the lower context it looks like we're trying to see a register spill to a stack slot, and ensure we load from there instead.\n\nShouldn't unw_get_reg take care of this internally?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9771958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9785451", "body": "Fixed in d40d797\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9785451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9786163", "body": "Yes, thats already fixed.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9786163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9786178", "body": "Good catch -- fixed.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9786178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9968269", "body": "Is this tested on OS X?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9968269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9968569", "body": "So this won't work out of the box on OSX.\n\nYou have message(ERROR ...), and the LLDB headers don't exist, and the probing will fail by default, since find_library doesn't look in the private frameworks.\n\nCould you please rework it so that the message(ERROR ...) cases are message(WARNING ...) and fail to set ENABLE_SOSPLUGIN until we figure out the long term strategy for lldb on OS X?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9968569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9968576", "body": "Also, you removed the $ENV{} probe fallbacks, which will always be required on OS X dues to what I said above, can you please restore them as a fallback path?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9968576/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9968625", "body": "Oh I missed the build.sh changes, they might work for the ENV{} fallback case.  The ERROR message still remains tho :+1: \n\nI'll test the build.sh flags in a bit -- need to head to the airport now.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9968625/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9968649", "body": "Just checked quick, the build.sh env->cmake defines is not working :(\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/9968649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/12409018", "body": "I checked before doing it this way, we don't.  We always generate as BlkOpKindHelper.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/12409018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/12458983", "body": "I'll double check on target when I get home\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/12458983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/12459918", "body": "Agreed and PR submitted: https://github.com/dotnet/coreclr/pull/1319\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/12459918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/24253500", "body": "Added in 716ae46\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/24253500/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/34002027", "body": "armv7l is little-endian armv7, but you seem to be targeting hard-float ABI, which is (generally) known as armv7hl.  Perhaps this isn't consistent across kernels/cmakes?  Can you add armv7hl as well?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/34002027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/34002071", "body": "See above, armv7l does not guarantee HF.  We may want to turn this into a configure time check.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/34002071/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/34002097", "body": "Same, v7 does not guarantee vfp, or vfpv3, we probably want to probe for this, and eventually support x-compile overrides.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/34002097/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/34002149", "body": "Please guard this in an ARM specific block, if its arm specific.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/34002149/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/34002182", "body": "Lets not add this conditionally across the board.  Please expand the above logic block to handle the ARM/32 case.  Keep in mind ARM64 is coming as well.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/34002182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/34002223", "body": "Is there an else here?  If not lets #error for now.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/34002223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/34643349", "body": "They are the assumptions made on windows, but we can compile time confirm them on !windows.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/34643349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/34699913", "body": "We could have a CHECK_CXX_SOURCE_COMPILES check with vfp3 assembler?  That would at least guarantee the toolchain being used supports what we need.  Thoughts?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/34699913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/46754207", "body": "Is I386 really supported in CoreCLR currently?  Otherwise we can unify these message()'s and drop the if()\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/46754207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/46754212", "body": "Please update the comment to reflect its not just x86 anymore\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/46754212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/46754214", "body": "Ditto for the comment here please.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/46754214/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/46754226", "body": "Comment doesn't seem to match the if() ?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/46754226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "jehovahgodoath": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/10676803", "body": "I am going to be able to do this for the next couple of months after that I am going on a new phone and email address to receive your Electronic mail message and any attachments are believed, I will have more to say about this topic and I will be able to make sure that you have received my email address to use. Please contact me for more information on every conceivable ability I just want us to be able to get to the next step for more options available and i can provide immediate access control over their own personal email account for all types of transactions for more info available, please immediately notify me by my Android app, and I am sure we can provide any additional pictures and videos to get some more details about how much is going on and off, I'm gonna need some advice from you guys. I'll post comments and ideas, please follow these instructions below or copy this message and notify sender immediately following link from my Android app store and share my thoughts exactly as well but I'm pretty flexible with my life and I have been trying to figure things out there that will allow you to create opened access to all my life and I am not going to try to avoid them and let me explain why I haven't done anything to stop you from receiving control over my IP address and phone calls over your computers and mobile devices and I was wondering why I am being tracked and you know you can use my phone number for future projects,  I went to my Google dashboard history. I'm sorry to have taken command.  But I gave you back control by merging and by letting you have my email address, well I am going to bed. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/10676803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/10676807", "body": "Hello\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/10676807/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "Djuffin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/10858692", "body": "Yeah, you're right. Comment was somewhat misleading. Fixed.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/10858692/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/10861545", "body": "CoreCLRCreateCordbObject allows multi-instance attach and requires a CLR module address to be passes. CreateCordbObject makes it easy to attach, because it knows how to locate CLR module by itself. Right now on Linux version of dbgshim uses CreateCordbObject, doesn't bother to detect module base. I'm trying to write mdbg code that would work on windows  and Linux without code changes and involving as few moving parts as possible. That's why I'd like CreateCordbObject to work with CoreCLR on all platforms. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/10861545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "vancatrabbit": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/10973759", "body": "n and v the wrong way round, should be \"dnvm list\" :-)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/10973759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "MattWhilden": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/11036785", "body": "Fromatting: Can I get 4 spaces for this block?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/11036785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "Maoni0": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/11080631", "body": "Ahh, I actually have a fix for this that I haven't checked in - instead of deleting please change \n\n`if (brick_table [curr_brick] < 0)`\n\nto \n\n`if (brick_table [curr_brick] <= 0)`\n\ninstead. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/11080631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "Lordron": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/11120364", "body": "can you mark this expression as constexpr?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/11120364/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "saper": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/11511286", "body": "(this uncovered https://github.com/dotnet/coreclr/issues/1091)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/11511286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "SimonCropp": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/13193956", "body": "@sivarv is it not possible to have test cases for things like this? Or was that in a diff commit?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/13193956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "Priya91": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/13629364", "body": "@janvorli Can the exe_module.lib_name be null? should i add null check here?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/13629364/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/13653869", "body": "snprintf puts null as `(null)` with `%ls`.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/13653869/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "steveharter": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/13645399", "body": "Note it was not possible to get here (LOCALE_CUSTOM_DEFAULT) previously as Linux doesn't support custom locales like Windows\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/13645399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/14482445", "body": "Is there an issue?\n\nIn general, the changes to the header files were to match the corresponding ifdefs in the cpp to avoid linker or compiler errors when the code is build with sanitizer options, as 'dead code' does not get optimized away as it did before. So if I look at the use of those two fields (m_DomainCodeHeaps, m_DynamicDomainCodeHeaps) they are only used in codemap.cpp between ifndef DACCESS_COMPILE thus were not used and I assume they were causing linker\\compiler issue at the time when I added the ifdef.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/14482445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/14487199", "body": "@rahku sure you can remove that #ifdef for those two fields but then also move the #endif (1047) up a few lines so that struct type gets included and doesn't cause compile errors (up to 1039). Thanks\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/14487199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/44597493", "body": "Sure I will remove this. It was useful for me when I only cared about the first few errors, as the rest were just derivatives.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/44597493/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/44597650", "body": "I'll add --no-gc-sections to src\\pal\\src\\CMakeLists.txt which should correct any issues\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/44597650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/44604843", "body": "Interestingly,  -O0 does cause compile errors (I didn't dig into that yet). -O1 also helps with dead code elimination so that was the main reason (without inlining and other stuff that would make debugging hard like -O2). Does pal require -O0 (in debug build?)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/44604843/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/44668191", "body": "Adding --gc-sections helps remove dead code, which reduces the number of unresolved symbols added to the libraries (from within that dead code), which prevents at least some linker errors when compiling under the sanitizer.\nIMO we should look at add --gc-sections even to release build, as it reduces the size of the library (along with -fdata-sections -ffunction-sections)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/44668191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/44717017", "body": "The compile errors are due to a bug with sanitizer with -O0 which is resolved with -O1. The issue occurs in the pal area, so it is required to compile with -O1 (just when sanitizer is enabled, not for normal debug build)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/44717017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/44717262", "body": "On fPIC, sanitizer seems to mark some data sections relocatable with static libs so fPIC is required. The linker specifically states to recompile with fPIC. Instead of adding fPIC to each of the CMakeLists.txt, I added it globally. I don't think it has any negative side effects.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/44717262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/44717318", "body": "On  -fno-omit-frame-pointer, I moved that above as suggested and removed the lower one.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/44717318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/44717412", "body": "On CLR_SANITIZE_CXX_FLAGS, it is now clean with just the sanitizer flags\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/44717412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "atsushieno": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/14729252", "body": "How about endianness, should it be covered here, or not, or is it out of scope?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/14729252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/14741360", "body": "Yes, it'd be still good to tell current state, if no existing or right dev. plan to cover both endianness.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/14741360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "andschwa": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/14906427", "body": ":+1: Thank you much!\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/14906427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "schellap": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/15626592", "body": "@kyulee1, is there some specific reason you removed these lines, specifically `CLRCustomTestLauncher` this is needed by CoreRT to run CoreCLR tests? I did not add a comment there because CoreRT was not a public project at that time. /Cc @nattress \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/15626592/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "sivarv": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/16155953", "body": "Is GenCallTypeToEmit adding any value? Can we get rid off it and deduce that info from whether indir is null or non-null?  It is confusing that a callinfo has two call types and two set call types.\n\nNote that setCallType() is actually emitter call type whereas setEmitCallType() is a codegen level call type.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16155953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16155977", "body": "Since this a field in callInfo we can avoid insCall prefix to this type. I would suggest to name this as ReturnRegisterType\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16155977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16156259", "body": "I didn't find this #ifdef on source search.  Rather i have found INDEBUG_LDISASM_COMMA which is defined under\n# if defined(DEBUG) || defined(LATE_DISASM)\n\nI think we must be using that here instead of INDEBUG_LDISASM?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16156259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16156504", "body": "I find this way of initializing callInfo more confusing than originally listing all parameters.  It becomes difficult to verify now whether one has passed/initialized all required fields of callInfo whereas originally it is easy to verify.  I am not sure i understand the value addition of factoring info into genEmitCallInfo().\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16156504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16156603", "body": "On closer look i prefer the original genEmitCall() since the caller is forced to pass all the required info.  Now with genEmitCallnfo() it is easy to commit mistakes (.e.g forgetting to initialize all required fields).  I also feel genEmitCallInfo() is an unnecessary overhead without much value addition.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16156603/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16156653", "body": "Comment got deleted after '//'\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16156653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16156959", "body": "Besides i find this code refactoring is not needed for fixing the gc-hole issues that this change is meant for.    In view of strong advocacy to avoid mixing code refactoring with the actual fix, we should avoid this refactoring.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16156959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16162926", "body": "(Minor) alignment of args with the first one.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16162926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16163228", "body": "I see even caller also genConsumeAddress() before setting indir field of this struct.  Are we calling genConsumeAddress() twice?  Also it is desirable to not to have genConsumeAddress() and better to relegate it to the caller so that we don't alter the order in which genConsumeAddress() calls have to take place.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16163228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16163905", "body": "Shouldn't this #ifdef be FEATURE_MULTIREG_RET?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16163905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16163924", "body": "Why just method body, shouldn't this entire method be under #if FEATURE_MULTIREG_RET?  I see all the calls of this method are already under #if FEATURE_MULTIREG_RET\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16163924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16164046", "body": "condition should be\n(callReturnTypes.getFirstReturnRegisterType() == EA_UNKNOWN) ? ...\n\n(Since you are editing it please correct it; it works because EA_UNKNOWN is zero right now)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16164046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16164254", "body": "Nit -- additional white space before \"and\" can be removed.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16164254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16164275", "body": "Shouldn't this #if be FEATURE_MULTIREG_RET?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16164275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16164281", "body": "Shouldn't this #ifdef be #if FEATURE_MULTIREG_RET?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16164281/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16164313", "body": "This looks to be a separate bug fix?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16164313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16164405", "body": "I just thought of mentioning on record:  This PR combines multiple fixes listed below:\n1) gc-hole fix for struct return in two registers\n2) gc-hole fix for passing structs containing gc-pointers on stack (genPutStructArgStack() changes)\n3) Modelling of GT_RETURN(retbuf) in case of methods returning structs through a hidden retBufArg\n5) Above bug fix in cloning call nodes\n4) Refactoring changes\n\nIt would be a good idea to separate them into multiple PRs for better tracking and for risk mitigation.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16164405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16164451", "body": "Why the above code is needed since constructor of GenEmitCallInfo() is already ensuring that argSize is zero for non-x86 case?  The above code can be deleted?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16164451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16164596", "body": "Please note that it was needed even before as well.  Whenever a  GT_CALL node is cloned, we are not cloning structDesc. Just because we eliminated definition of SetRegisterReturningStructState() doesn't make it necessary now.  The reason to eliminate SetRegisterReturningStructState() is that the lone call to that method in importer is not necessary and hence can be cleaned up.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16164596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16165155", "body": "The invariant is that only one of addr or indir will be non-null.  We should also assert in genEmitCall() that if indir is non-null then addr is null \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16165155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16165190", "body": "In this case (indir != nullptr) we should assert that addr is nullptr.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16165190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16165332", "body": "Isn't srcAddr guaranteed to be TYP_BYREF or TYP_I_IMPL?  Why do we need to specify EA_BYREF for srcAddr?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16165332/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16165360", "body": "Why does it would matter whether RDI is reported as EA_BYREF?  I thought RDI is pointing to out-going arg space on stack which can never be relocated.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16165360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16165431", "body": "To be consistent we also need to make similar changes in genConsumePutStructArgStk()?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16165431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16165485", "body": "Please open an issue to track this.  \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16165485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16165557", "body": "Since you are at it.  This local definition could be deleted and it could be declared on line 5720.  Only lines 5720 to 5724 are referring to helperNum local.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16165557/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16165750", "body": "Here are the in-variants that we should assert in this method\n\n1) if emit call type is EC_FUNC_TOKEN or EC_FUNC_TOKEN_INDIR then addr field will be non-null and indir will be null\n2) if emit call type is EC_INDIR_ARD then indir will non-null but addr will be null.\n3) if emit call type is EC_INDIR_R (indirect call via register) then only baseReg will be specified.  In this case both addr and indir should be nullptr.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16165750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16210943", "body": "Even though a call is an implicit/explicit tail call, it may not always be honored.  In such a case canTailCall will be set to false.  In that case it is fine to model the call as GT_INTRINSIC node.  The condition should be\n\n(canTailCall && tailCall != 0)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16210943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16211217", "body": "Btw, a non-zero tailCall could be one of PREFIX_TAILCALL_EXPLICIT or PREFIX_TAILCALL_IMPLICIT.  That is the call could be an explicit \".tail\" prefixed call or an implicit tail call.  In both the cases tailCall param would be true given the logic at caller of this method.\n\nI think the reason why we have to not model user-call implemented intrinsics as GT_INTRINSIC node is \na) For back compat reasons on desktop .Net 4.6/4.6.1\nb) It will be non-trivial task or too late to re-materialize a surviving tail prefixed GT_INTRINSIC as tail call in rationalizer.\n\nPlease capture the above as comments.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16211217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16211897", "body": "Another similar back compat difference from Desktop 4.6/4.6.1  due to modelling of intrinsics as GT_INTRINSIC nodes which if survived front-end optimizations could materialize as calls:  It is possible that the call could be an in-line candidate.  Since the call was modelled as GT_INTRINSIC node in-lining logic would not kick in.  Essentially an in-line candidate expanded by .Net 4.6/4.6.1 may not be expanded now if GT_INTRINSIC node survives front-end optimizations.\n\nNote that importer (impImportCall()) tries to determine whether a call is an in-line candidate (impMarkInlineCandidate()) after it attempted intrinsic expansion (impIntrinsic()) and expansion hasn't happened.  \n\nOne possible fix is that in-lining logic also looks at GT_INTRINSIC nodes marked as GTF_CALL and marks them as in-line candidates and expands them. \n\nPlease file a bug to track this issue.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16211897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16215745", "body": "Looks good.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16215745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16543792", "body": "As per CC, if condition should be \n(regMask & RBM_R19) != RBM_NONE\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16543792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16543845", "body": "As per CC, if condition should be\n\nif ((encodeMask & 0x01) != 0)\n\nSee [CC rule](https://github.com/dotnet/coreclr/blob/master/Documentation/coding-guidelines/clr-jit-coding-conventions.md#15.1.5) \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16543845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16543856", "body": "Since you are editing this function, please see if you can change existing occurrences to conform to CC.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16543856/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16543941", "body": "Looks good, other than the CC comment.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16543941/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20445302", "body": "Sorry was a bit late to notice.  Since you have addressed the bug, the TODO-AMD64 comment on line 5626 is no longer valid and can be removed.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20445302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "LLITCHEV": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/16164194", "body": "As we discussed that is the way the Indirect emitCall was calling it - twice. The refactoring was just to refactor the code and not the functionality of the original code.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16164194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16164290", "body": "Right. Changed. It was in the existing code before the refactoring as well.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16164290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16164491", "body": "It is needed in this now. The code now gets the classification in the GT_CALL member structDesc.\nThe SetRegisterReturningStructState(structDesc);  has been eliminated. If the copy is not performed, the member structDesc of GT_CALL gets not copied properly.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16164491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16164846", "body": "The argSize member of GenEmitCallInfo only exists for _X86_ target. The constructor also initializes it to 0 only for that target.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16164846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16167238", "body": "Please see jit.h below where new defines are added.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16167238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16167239", "body": "It is added in my working copy.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16167239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16167331", "body": "The following assert that I already added covers this. At least one of the pointers should be nullptr.\nassert((emitCallInfo.addr == nullptr) || (emitCallInfo.indir == nullptr));\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16167331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16167495", "body": "It can not be moved. It is also used on line 5851 (for my sources - or around it) in a statement\n        switch (helperNum) {\n\nIf I move the var to line 5724 it will result in compiler error.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16167495/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16167501", "body": "We discussed these offline. Added comment to say that we are being conservative and made it consistent.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16167501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59665341", "body": "One more thing that comes to mind is that structs with explicit layouts are always passed by value on the stack.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59665341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "omidkrad": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/16229986", "body": "> You will need to update the version numbers to acquire later versions of the NuGet packages.\n\nHow? Manually?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16229986/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "leemgs": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/16467190", "body": "Let's resolve a build error in other platform that can be happened because of adding the Linux specific time header file.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16467190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16741440", "body": "I am currently focusing on enabling ARM32 with CoreCLR/CoreFX for Linux/ARM. Actually, Core-RT is a next step for me. So, I mean that I did not check Linux/ARM support of CoreRT for myself. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16741440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/57551292", "body": "@manu-silicon , :+1:  , I have appended the `if` statement for handling arm64 even though I don't currently follow up the arm64 issue.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/57551292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "gitchomik": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/16741202", "body": "What about corert ? \nhttps://github.com/dotnet/corert/blob/master/Documentation/cross-building.md\nPatching Urcu is still needed ?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16741202/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16745025", "body": "Good to hear that someone is working on ARM32  for Linux.\nI saw your commit, and I thought that patching Urcu is needed only after generating the rootfs, So, maybe it's mean that cross compiling CoreRT  also doesn't need Urcu patching.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16745025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "manu-st": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/16745993", "body": "This is correct, we do not need it for CoreRT too.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/16745993/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/45940822", "body": "Should `cl.exe' be really hardcoded? Same goes for other binaries that got converted to a hardcoded name with .exe.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/45940822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/57536985", "body": "I think it should still handle Mac OS X which is lost here by the removal of the if condition. Also it should handle both cross compilation for arm and arm64.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/57536985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/58152964", "body": "That's true. I was actually wondering if I should disable FEATURE_STUBS_AS_IL for Arm64?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/58152964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "myungjoo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/17114361", "body": "We are getting assertion failure here regardless of COMPlus_gcConcurrent is 0 or 1. (ARM/Linux)\n#4344\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/17114361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "ericstj": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/17544227", "body": "Can we remove the mscorlib.ni.dll now?  Or do we still need NI's of full-facades.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/17544227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "VSadov": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/17906243", "body": "Thanks!!!   :-)\n\nLet us know if there are bugs or if some limitations like single-assignment of ref locals are too strict. Not many people use the feature, so feedback is very interesting.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/17906243/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "jamesqo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/18237511", "body": "@jkotas OK, I can revert this commit.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/18237511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/23789014", "body": "There appears to be a missing `<summary>` at the top here", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/23789014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "jackfree": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/18579442", "body": "Why not just use \"string\" ?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/18579442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/18579586", "body": "I can see the utility in \"var\" if it's a complex type or one that is only used in-line in a function as a result of LINQ or something like that.  Overall I despise \"var\" -- it makes code hard for the reader, and developers (at least on my team) use it ubiquitously because they are too lazy to use even simple primitive types.  \n\nIf we know the type is \"string\", why not just use \"string\" instead of \"var\" ?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/18579586/reactions", "total_count": 16, "+1": 0, "-1": 16, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/18599193", "body": "@benaadams thank you so much for all your work on this!!  :)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/18599193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "AGSaidi": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/18697444", "body": "There is a copy paste bug here. ctx should be context\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/18697444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "aleks-sidorenko": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/19216846", "body": "typo\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/19216846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "tijoytom": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/19700298", "body": "@mazong1123 Sorry for the delay , i missed this message . It's likely because your locale is Chinese and the char-set is ANSI and we allocate only 4 bytes which is understandable since the charset says ANSI . I will change the test to work across different locale. ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/19700298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "parjong": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/20497987", "body": "I also thought so, but I encounterd stack frame from ``CallDescrWorker``. Could you let me know if you have any idea on why it happens?", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20497987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20498315", "body": "It seems that there was another issue. I tried to reproduce it, but failed. I'll revise this PR.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20498315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20498985", "body": "@janvorli It seems that the above issue happens when ``HelperMethodFrame::UpdateRegDisplay`` is not revised.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20498985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20501177", "body": "Oops. I'll revise", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20501177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/104839211", "body": "> For AMD64, Caller-SP is the address above the call return address.\r\n\r\nIs it correct? I found this line while working on this commit.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/104839211/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/104892390", "body": "For me, this sentence seems to say that ``Caller-SP`` on AMD64 is ``CFA - 8``. Is that true?", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/104892390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/104893717", "body": "Does ``the address above the call return address`` mean the address where ``rip`` saved + 8? If so, it seems correct. ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/104893717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/104898740", "body": "I thought that it means ``CFA(call return address) -(above) 8``.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/104898740/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "qmfrederik": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/20634775", "body": "Correct, fixed it.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20634775/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/100007260", "body": "To cross-compile for Android, we need to use objcopy from the Android toolchain, not the host. On Android, that would be `${CROSS_NDK_TOOLCHAIN}/bin/aarch64-linux-android-objcopy`; previously we set `${TOOLCHAIN_PREFIX}` to `${CROSS_NDK_TOOLCHAIN}/bin/aarch64-linux-android-` so it worked.\r\n\r\nIf you set it to `${TOOLCHAIN}` this will evaluate to `aarch64-linux-android-objcopy` and from what I get, CMake will look for this file in the bin folders on the host, which doesn't work.\r\n\r\nAnother option would be to set `${TOOLCHAIN_PREFIX}` to `${CROSS_NDK_TOOLCHAIN}/bin/` on Android, leave it empty for Linux, and change this line to:\r\n\r\n```\r\n find_program(OBJCOPY ${TOOLCHAIN_PREFIX}${TOOLCHAIN}-objcopy)\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/100007260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "gclpixel": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/20938351", "body": "Hi, \r\nI think in line 6329 of your commit the condition is wrong.\r\nIt should be `if (channelKeyword == 0)`, because this method is used in the manifest generation and the default value is used and no channel keyword is generated. With the existing condition no event is written to the channel of the event viewer. My local test failed after this commit, which I check if a event is written to the channel.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/20938351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "IllidanS4": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/21102457", "body": "Where will the implementation of GetManagedThunkForUnmanagedMethodPtr and co. be stored after this commit?", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/21102457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "Rastaban": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/21702963", "body": "Please remove the redundant \"SampleProfiler::\" on ThreadProc.  The compiler complains about this in conformance mode (/permissive-)", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/21702963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "wateret": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/21812431", "body": "I thought this code is only valid when `!JIT32_GCENCODER  && FEATURE_FIXED_OUT_ARGS`. With GCInfoEncoder these `regPtrDsc` are eventually encoded as live-dead pairs just like register lifetimes. However on x86/FIXED_OUT_ARGS it looks to me that these `regPtrDsc` are just encoded the way it is(`push`). So I thought we need to handle this pushes accordingly.\r\n\r\nWith GCInfoEncoder, `regPtrNext->rpdPtrArg` is used as variable offset(FP or SP based) but if we encode this as `push N` we don't have to use offset itself, we can have it divided by pointer size.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/21812431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/21812478", "body": "@janvorli For example,\r\n\r\nGCInfoEncoder example(arm32)\r\n```\r\nSet Outgoing stack arg area size to 12.\r\nStack slot id for offset -12 (0xfffffff4) (frame) = 0.\r\nRegister slot id for reg r3 = 1.\r\nStack slot id for offset 0 (0x0) (sp) = 2.\r\nStack slot id for offset 8 (0x8) (sp) = 3.\r\nRegister slot id for reg r1 = 4.\r\nRegister slot id for reg r2 = 5.\r\nRegister slot id for reg r0 = 6.\r\nSet state of slot 0 at instr offset 0xe to Live.\r\nSet state of slot 0 at instr offset 0x84 to Dead.\r\nSet state of slot 1 at instr offset 0x32 to Live.\r\nSet state of slot 1 at instr offset 0x38 to Dead.\r\nSet state of slot 1 at instr offset 0x3e to Live.\r\nSet state of slot 2 at instr offset 0x40 to Live.\r\nSet state of slot 1 at instr offset 0x42 to Dead.\r\nSet state of slot 1 at instr offset 0x4e to Live.\r\nSet state of slot 3 at instr offset 0x50 to Live.\r\nSet state of slot 1 at instr offset 0x54 to Dead.\r\nSet state of slot 4 at instr offset 0x5a to Live.\r\nSet state of slot 5 at instr offset 0x64 to Live.\r\nSet state of slot 1 at instr offset 0x6e to Live.\r\nSet state of slot 6 at instr offset 0x70 to Live.\r\nSet state of slot 6 at instr offset 0x7a to Dead.\r\nSet state of slot 4 at instr offset 0x7a to Dead.\r\nSet state of slot 5 at instr offset 0x7a to Dead.\r\nSet state of slot 1 at instr offset 0x7a to Dead.\r\nSet state of slot 2 at instr offset 0x7a to Dead.\r\nSet state of slot 3 at instr offset 0x7a to Dead.\r\n```\r\n\r\nx86 with FIXED_OUT_ARGS\r\npush N -> push N/4\r\n\r\n```\r\nPointer table:\r\n04             |             [EBP-04H] an untracked  local\r\nF3 50          | 0020        reg EDX becoming live\r\nF0 9D          | 002D        push ptr 16 (-> 4)\r\nA7             | 0034        push ptr 12 (-> 3)\r\nAF             | 003B        push ptr  8 (-> 2)\r\nF0 C1 F8 07    | 0044        push ptr  0 (-> 0)\r\nF0 49          | 004D        reg ECX becoming live\r\n0E             | 0053        reg ECX becoming dead\r\n10             | 0053        reg EDX becoming dead\r\nE0             | 0053        pop  4 ptrs\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/21812478/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/21818226", "body": "@janvorli `pPendingArgFirst` is type of `DWORD*`. So I think `pPendingArgFirst - i` actually does what you said.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/21818226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/21818425", "body": "Actually I'm not sure about this change. As far as I remember it didn't work without the change here. I'll check again.\r\nAnd I thought if we have FEATURE_FIXED_OUT_ARGS on, all the calls should be like caller-pop.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/21818425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/21833889", "body": "I tested with reverting the changes of this part, but I still get the same issue.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/21833889/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/21835077", "body": "pri0 fails\r\n* only w/ @seanshpark's commits : 69\r\n* w/ this commit : 108\r\n* w/ this commit but reverting this part : 109 (2 regressions, 1 advance)\r\n\r\nI think reverting this is the right way since there maybe still some callee-pops... P/Invoke or something.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/21835077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/21836363", "body": "Here are tests that fails.\r\n\r\n[fails_foa.txt](https://github.com/dotnet/coreclr/files/942685/fails_foa.txt) : 69 fails\r\n[fails_foa_with_gcinfo_patch.txt](https://github.com/dotnet/coreclr/files/942686/fails_foa_with_gcinfo_patch.txt) : 109 fails\r\n\r\n42 tests out of 109 crash with `System.MethodAccessException` which is almost the number of test fails gained.\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/21836363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/21836558", "body": "Attaching the full log\r\n\r\n[fails_foa_full.txt](https://github.com/dotnet/coreclr/files/942725/fails_foa_full.txt)\r\n[fails_foa_with_gcinfo_patch_full.txt](https://github.com/dotnet/coreclr/files/942726/fails_foa_with_gcinfo_patch_full.txt)\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/21836558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "dpodder": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/comments/25213482", "body": "@weshaggard It was due to the change in statement flow.\r\n\r\nThe tools are needed because of the call out to `$DotNetCli msbuild ...` in lines 167-168 (new).\r\n\r\nPrevious to this PR, this code block was guaranteed to execute only after a successful call to `run.sh sync -optdata`, which meant that init-tools would have run. With the new changes, this was not necessarily the case (the user might have requested skiprestoreoptdata), meaning that dotnet.exe was not guaranteed to be present even if `$__isMSBuildOnNETCoreSupported` was true. Hence, I opted to call init-tools if the CLI wasn't already available.\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/25213482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/25216349", "body": "I needed to capture and parse the output of the msbuild task from stdout; run.sh generated a lot of extra spew on stdout that made this task more difficult. I looked for ways to disable the extra output, but in the end calling into msbuild through the cli ended up being the most straightforward.\n\nThe ultimate goal here is to extract msbuild variables (stored in dependencies.props) so that they can be passed along to cmake as input parameters.\n________________________________\nFrom: Wes Haggard <notifications@github.com>\nSent: Thursday, October 26, 2017 1:49:27 PM\nTo: dotnet/coreclr\nCc: Daniel Podder; Mention\nSubject: Re: [dotnet/coreclr] Fix optdata bootstrap test script & Linux skiprestoreoptdata behavior (#12541) (aa63b76)\n\n\nIs there a reason you couldn't call run.sh instead of directly calling dotnetcli msbuild? That would have correctly wrapped you and ensured you had the cli.\n\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub<https://github.com/dotnet/coreclr/commit/aa63b76ac1c64b78f20edff35708477f3afac713#commitcomment-25216037>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ACPs1Hr2OlgaMeMPoEFUVjkjFENmVnyQks5swNQ3gaJpZM4QH3CH>.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/25216349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/comments/25224236", "body": "I did create an msbuild task (two, actually); but they just write to stdout. I agree, writing to a txt file would be safest; it's a good improvement candidate, and would remove the need to init-tools and use the CLI explicitly, using just run.sh instead. FWIW, this behavior has been in there for quite a few months now--including for 2.0.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/comments/25224236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "sharwell": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/29564159", "body": ":bulb: The new exclusion above can _replace_ the items currently listed under `Roslyn stuff`. Visual Studio \"14\" CTPs used to create a folder **{SolutionName}.sln.ide**, but starting with CTP 6 it creates a folder just called **.vs**.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/29564159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "adityamandaleeka": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/31189736", "body": "I'd move this into the CMake section above.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/31189736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/36702482", "body": "Fixed endif arguments to match opening.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/36702482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/81634120", "body": "Does this gracefully handle the case where this file doesn't exist (I don't know if there are any distros where that's the case)?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/81634120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/73600605", "body": "hte -> the\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/73600605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/73600806", "body": "Change to \"Book of the Runtime\" (capitalize B and R)?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/73600806/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/73600855", "body": "you -> your\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/73600855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/73601739", "body": "This is a hard link to your fork. You want a relative link instead.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/73601739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37791003", "body": "Please add a colon after 'include' (and likewise for each of the other lists below).\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37791003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37791253", "body": "that -> which?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37791253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37791499", "body": "'downside'\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37791499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37792243", "body": "Nit: there seems to be some minor naming inconsistency here. Sometimes they're called 'versioning bubbles' and other times 'version bubbles'. We should just use one name in the documentation.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37792243/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37793496", "body": "> However CIL that deals with object model (e.g. `NEWOBJ`, `LDFLD`, etc) need special care and as explained below.\n\nShould \"and as\" be \"and are\" or just \"as\"? How about:\n\n\"However, CIL instructions that deal with the object model (e.g. `NEWOBJ`, `LDFLD`, etc) need special care as explained below.\"\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37793496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37793721", "body": "files -> fields?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37793721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37794553", "body": "> the whole heap only the 'new' part\n\nthe whole heap, and instead only collect the 'new' part\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37794553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37794641", "body": "> to keep log that fact\n\nRemove 'keep'?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37794641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37795247", "body": "> allow clients of the library to selective JIT compile some methods\n\nselectively\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37795247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37795466", "body": "'selectively' here too\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37795466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37795604", "body": "operations -> operation\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37795604/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37795789", "body": "> (in likely a slow way.\n\nClose paren before the period?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37795789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37796160", "body": "Missing ')'\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/37796160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "SedarG": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/94509548", "body": "It's somewhat unrelated with this change. build.sh creates localpkg folder under src (for reasons that I didn't dig into). It does so even on the baseline. It's producing an annoying `git status`, and even more annoying when you try to do `git add -A`. ", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/94509548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "fieryorc": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/31685941", "body": "If we try to include c++ headers in our code, it will end up including the ones in pal/inc/rt directory which would cause conflicts. So I moved the files that conflict with standard c++ headers to a different directory so can be optionally included if needed.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/31685941/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "hadibrais": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/31873820", "body": "Yes you right regarding the redundancy of /Zi and /O1 (the two lines just before the if statement). I actually realized that just after I PR\u2019ed. However, regarding /O1 vs /O2. You said it results in better overall performance. If you\u2019ve done any perf testing regarding this, the results are invalid now because WPO can make a significant difference. After enabling WPO, it might be better to use /O2.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/31873820/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/31875106", "body": "I removed that flag because @jkotas said /O1 gives better overall performance and /O2 is only used selectively. Please see his comment above.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/31875106/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/31876621", "body": "OK, I'll fix it.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/31876621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "benpye": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/34060671", "body": "It seemed like the ARM code depended upon having the define, I could coerce it to build by just including the additional members in StubLinkCPU, though I don't really know what is the more correct approach here.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/34060671/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/34067917", "body": "Aren't we still going to use PAL where CLR_CMAKE_PLATFORM_UNIX is defined?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/34067917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/34068716", "body": "Can add it, but I haven't seen any example of having uname output armv7hl?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/34068716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/34068823", "body": "I was under the impression that these were the assumptions made by CoreCLR at least on Windows, correct me if I am wrong. And these are also the base requirements of Ubuntu for ARM if we are keeping that as our target.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/34068823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/34086561", "body": "Do we need to keep the definition order in StubLinkCPU or am I okay to change the order of definitions in that class? \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/34086561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/34654271", "body": "How would you suggest this is done, only examples I can see are to get the output of /proc/cpuinfo in CMake and see if features are available. Also, whilst VFPv3 may not be guaranteed, at least in Cortex cores, it's included in all but the A5 and A9 where it is supposedly optional, but I haven't seen an example lacking it. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/34654271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/35412994", "body": "Unfortunately ARMv6 is going to be harder to support. So currently only the\nRPi 2 will work at this time.\n\nOn Fri, 24 Jul 2015 09:27 Jostein Kj\u00f8nigsen notifications@github.com\nwrote:\n\n> In CMakeLists.txt\n> https://github.com/dotnet/coreclr/pull/1210#discussion_r35404087:\n> \n> > @@ -16,7 +16,16 @@ set(VM_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src/vm)\n> > \n> >  if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n> >      set(CLR_CMAKE_PLATFORM_UNIX 1)\n> > -    set(CLR_CMAKE_PLATFORM_UNIX_TARGET_AMD64 1)\n> > -    if(CMAKE_SYSTEM_PROCESSOR STREQUAL x86_64)\n> > -        set(CLR_CMAKE_PLATFORM_UNIX_TARGET_AMD64 1)\n> > -    elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL armv7l)\n> \n> Just to add some real world data. Raspbian (which is hard-float) running\n> on a classic Raspberry pi (1) gives the following output:\n> \n> $ uname -a\n> Linux Applepi 3.18.7+ #755 PREEMPT Thu Feb 12 17:14:31 GMT 2015 armv6l GNU/Linux\n> \n> Note there is no armv6hl in the output. Not sure if this is enough data\n> to base a generalization on, but at least it's data :)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/dotnet/coreclr/pull/1210/files#r35404087.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/35412994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/35491847", "body": "Misses Windows too (is causing the build failure), same elseif(WIN32) would work here at least temporarily.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/35491847/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/36033826", "body": "I would be against doing this as it means we couldn't use non VS generators. Thinking about it, could we pass the buildarch argument from the build script to CMake perhaps and use that? It could work for Linux too.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/36033826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/36033835", "body": "We have `CLR_CMAKE_PLATFORM_UNIX_TARGET_AMD64` perhaps it'd be more consistent to have `CLR_CMAKE_PLATFORM_WINDOWS_TARGET_AMD64` etc?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/36033835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/54391055", "body": "Didn't intend to commit that, reducing my own build time while getting PAL working.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/54391055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/57513585", "body": "This should probably be an elseif.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/57513585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "josteink": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/35404087", "body": "Just to add some real world data. Raspbian (which is hard-float) running on a classic Raspberry pi (1) gives the following output:\n\n``` bash\n$ uname -a\nLinux Applepi 3.18.7+ #755 PREEMPT Thu Feb 12 17:14:31 GMT 2015 armv6l GNU/Linux\n```\n\nNote there is no `armv6hl` in the output. Not sure if this is enough data to base a generalization on, but at least it's data :)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/35404087/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/35413188", "body": "I have no problems with that. Just supporting your notion that hard-float (as brought up by @kangaroo) often doesn't show in `uname -a`.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/35413188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "Tragetaschen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/35414359", "body": "Just to add to the confusion :)\n\nI'm targeting a Freescale i.MX 6DualLite (with VFPv3) using a hard-float toolchain from the Yocto project.\n\n```\n$ uname -a\nLinux f500-kai 4.0.0-00146-g52ee60d-dirty #45 SMP Thu Jul 23 16:20:44 CEST 2015 armv7l GNU/Linux\n```\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/35414359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "Sridhar-MS": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/38958943", "body": "Makes sense let me fix that.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/38958943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/38989747", "body": "Yes. We make use of the build type variable elsewhere in the root [CMakeList.txt](https://github.com/dotnet/coreclr/blob/master/CMakeLists.txt#L198).\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/38989747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/39076844", "body": "@janvorli I think the -fPIC is not getting added all the libraries. I get this below error when I compile without it from the root CMakeLists.txt\n\n_/usr/bin/ld: ../../../inc/libcorguids.a(cordebug_i.c.o): relocation R_X86_64_PC32 against undefined symbol `llvm_gcda_start_file' can not be used when making a shared object; recompile with -fPIC\n/usr/bin/ld: final link failed: Bad value\nclang: error: linker command failed with exit code 1 (use -v to see invocation)_\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/39076844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/39088960", "body": "@janvorli I get this error when linking shared library libsos.so. Here is a more verbose output\n\n_Linking CXX shared library libsos.so\ncd /home/sridhar/coreclr/bin/obj/Linux.x64.Debug/src/ToolBox/SOS/Strike && /usr/bin/cmake -E cmake_link_script CMakeFiles/sos.dir/link.txt --verbose=1\n/usr/bin/clang++-3.5  -fPIC  -Wall -Wno-null-conversion -std=c++11 -g -O0   --coverage -shared -Wl,-soname,libsos.so -o libsos.so CMakeFiles/sos.dir/disasm.cpp.o CMakeFiles/sos.dir/datatarget.cpp.o CMakeFiles/sos.dir/eeheap.cpp.o CMakeFiles/sos.dir/exts.cpp.o CMakeFiles/sos.dir/gcroot.cpp.o CMakeFiles/sos.dir/metadata.cpp.o CMakeFiles/sos.dir/sildasm.cpp.o CMakeFiles/sos.dir/stressLogDump.cpp.o CMakeFiles/sos.dir/strike.cpp.o CMakeFiles/sos.dir/sos.cpp.o CMakeFiles/sos.dir/util.cpp.o CMakeFiles/sos.dir/disasmX86.cpp.o ../../../inc/libcorguids.a ../../../debug/shim/libdebugshim.a ../../../debug/dbgutil/libdbgutil.a ../../../dlls/mscordac/libmscordaccore.so ../../../inc/libcorguids.a ../../../debug/dbgutil/libdbgutil.a -Wl,--start-group ../../../vm/dac/libcee_dac.a ../../../debug/ee/dac/libcordbee_dac.a ../../../debug/daccess/libdaccess.a ../../../md/compiler/dac/libmdcompiler_dac.a ../../../md/hotdata/dac/libmdhotdata_dac.a ../../../md/runtime/dac/libmdruntime_dac.a ../../../md/enc/dac/libmdruntimerw_dac.a ../../../strongname/api/dac/libstrongname_dac.a ../../../utilcode/dac/libutilcode_dac.a ../../../unwinder/dac/libunwinder_dac.a -Wl,--end-group ../../../dlls/mscorrc/full/libmscorrc_debug.a ../../../pal/src/libcoreclrpal.a -lpthread -lrt -ldl -lunwind ../../../palrt/libpalrt.a -Wl,-rpath,/home/sridhar/coreclr/bin/obj/Linux.x64.Debug/src/dlls/mscordac \n/usr/bin/ld: ../../../inc/libcorguids.a(cordebug_i.c.o): relocation R_X86_64_PC32 against undefined symbol `llvm_gcda_start_file' can not be used when making a shared object; recompile with -fPIC\n/usr/bin/ld: final link failed: Bad value\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\nmake[2]: *_\\* [src/ToolBox/SOS/Strike/libsos.so] Error 1\nmake[2]: Leaving directory `/home/sridhar/coreclr/bin/obj/Linux.x64.Debug'\nmake[1]: **\\* [src/ToolBox/SOS/Strike/CMakeFiles/sos.dir/all] Error 2\nmake[1]: /usr/bin/cmake -E cmake_progress_report /home/sridhar/coreclr/bin/obj/Linux.x64.Debug/CMakeFiles *\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/39088960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/39091806", "body": "_Please ignore this comment_\n\n> src\\inc\\CMakeLists.txt before the endif(WIN32)?\n\nDid you mean after endif(WIN32)? \n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/39091806/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/39092549", "body": "Yup. I did not notice the else part.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/39092549/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "rrh": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/52538785", "body": "s/sanitizier/sanitizer/\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/52538785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "krytarowski": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/52730908", "body": "Why? It doesn't look correct.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/52730908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/53109636", "body": "Good catch. `:type` is settable only from command-line.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/53109636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "RyanByi": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59751778", "body": "This may be a silly question but why don't we just use the linker option for delay loading?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/59751778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "joperezr": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/60484059", "body": "makes sense, I'll change this.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/60484059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "jyoungyun": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/100014172", "body": "What about replace `${TOOLCHAIN_PREFIX}` to `${TOOLCHAIN}` and redefine other macro for the previous `${TOOLCHAIN}` variable? I can revise the find objcopy logic as you said. But I think this issue can be resolved by modifiying `cross/android/arm64/toolchain.cmake` file. What do you think?", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/100014172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "fadimounir": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/132592865", "body": "># Disable incremental link due to incremental linking CFG bug crashing crossgen [](start = 2, length = 79)\r\n\r\nCan you file a tracking bug, so that when the linker gets fixed and updated in LKG, we can restore this back?\r\n\r\nAlso, if you can add a small comment with a brief description of what the bug was, and the bug ID tracking the undoing of this change, that would be awesome :)", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/132592865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/156250276", "body": "I cc'd you on a thread with the linker dev, asking what version will contain the fix for this bug.\r\n\r\n---\r\nIn reply to: [155038606](https://github.com/dotnet/coreclr/pull/15370#discussion_r155038606) [](ancestors = 155038606)", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/156250276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/156440027", "body": "It should be included in the 15.5 release\r\n\r\n---\r\nIn reply to: [156250276](https://github.com/dotnet/coreclr/pull/15370#discussion_r156250276) [](ancestors = 156250276,155038606)", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/156440027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "yizhang82": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/132789564", "body": "Sure. Logged https://github.com/dotnet/coreclr/issues/13344 and added comment", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/132789564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "z1c0": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/144375814", "body": "Not sure, I found that GitHub Markdown supports both ways of escaping those.", "reactions": {"url": "https://api.github.com/repos/dotnet/coreclr/pulls/comments/144375814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}}}