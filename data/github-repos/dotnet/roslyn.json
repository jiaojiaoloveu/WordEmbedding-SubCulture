{"_default": {"1": {"MkazemAkhgary": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24381", "title": "Quick Action: Convert for to foreach and vice versa", "body": "just like resharper, allow converting for to foreach and vice versa. me not a genius. me realize index is needed where I wrote `foreach`, me realize index is no more needed where I wrote `for`. thanks.:)", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24176", "title": "Double click in editor selects too large an area", "body": "When i double click inside an string i expect to select contents inside string not outside it. \r\n\r\nFollowing picture is taken after double click inside string.\r\n\r\nI expect text editor to only select contents inside and not parantheses or semicolon.\r\n\r\n![1515687373536745397570](https://user-images.githubusercontent.com/15255162/34834811-ea15d500-f6ea-11e7-877e-81a3575d84ee.jpg)\r\n\r\n-----\r\n\r\nIm not sure if any of this relates to roslyn. Couldnt find better repo for VS text editor.\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23922", "title": "Show array content via index in debugger", "body": "\r\n![capture](https://user-images.githubusercontent.com/15255162/34322807-3a80aeb4-e847-11e7-9a88-33ca1b59c143.PNG)\r\n\r\nWhen I hover mouse over bracket, I would like to see item in that index instead of trying to seek in array and find item manually.  \r\n\r\nwhen I hover over `array` I can expand and see all items. when I hover over `End` I can see its content. but when I hover over brackets I see nothing. it seems good place to show item in that index (if index can be evaluated) when hovering over brackets.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23922/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AlekseyTs": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24380", "title": "C# IOperation nodes representing values of a nullable type sometimes have constant values", "body": "Example 1:\r\n```\r\nISimpleAssignmentOperation (OperationKind.SimpleAssignment, Type: System.Int32?) (Syntax: 'input = null')\r\n  Left: \r\n    IParameterReferenceOperation: input (OperationKind.ParameterReference, Type: System.Int32?) (Syntax: 'input')\r\n  Right: \r\n    IConversionOperation (TryCast: False, Unchecked) (OperationKind.Conversion, Type: System.Int32?, Constant: null, IsImplicit) (Syntax: 'null')\r\n      Conversion: CommonConversion (Exists: True, IsIdentity: False, IsNumeric: False, IsReference: False, IsUserDefined: False) (MethodSymbol: null)\r\n      Operand: \r\n        ILiteralOperation (OperationKind.Literal, Type: null, Constant: null) (Syntax: 'null')\r\n```\r\n\r\nExample 2:\r\n```\r\nIConversionOperation (TryCast: False, Unchecked) (OperationKind.Conversion, Type: System.Int32?, Constant: null) (Syntax: '(int?)null')\r\n  Conversion: CommonConversion (Exists: True, IsIdentity: False, IsNumeric: False, IsReference: False, IsUserDefined: False) (MethodSymbol: null)\r\n  Operand: \r\n    ILiteralOperation (OperationKind.Literal, Type: null, Constant: null) (Syntax: 'null')\r\n```\r\n\r\nExample 3:\r\n```\r\nIIsPatternOperation (OperationKind.IsPattern, Type: System.Boolean) (Syntax: 'input is null')\r\n  Expression: \r\n    IParameterReferenceOperation: input (OperationKind.ParameterReference, Type: System.Int32?) (Syntax: 'input')\r\n  Pattern: \r\n    IConstantPatternOperation (OperationKind.ConstantPattern, Type: null) (Syntax: 'null')\r\n      Value: \r\n        IConversionOperation (TryCast: False, Unchecked) (OperationKind.Conversion, Type: System.Int32?, Constant: null, IsImplicit) (Syntax: 'null')\r\n          Conversion: CommonConversion (Exists: True, IsIdentity: False, IsNumeric: False, IsReference: False, IsUserDefined: False) (MethodSymbol: null)\r\n          Operand: \r\n            ILiteralOperation (OperationKind.Literal, Type: null, Constant: null) (Syntax: 'null')\r\n```\r\n\r\nNote that conversion nodes like the one below have constant values, even though the type of the value is ```int?```, which is not valid for constant expressions.\r\n\r\nIConversionOperation (TryCast: False, Unchecked) (OperationKind.Conversion, Type: System.Int32?, **Constant: null**, \r\n\r\nExpected: No constant values for such nodes.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24379", "title": "Inconsistent (VB vs. C#) IOperation tree is produced for a comparison on an instance of a nullable type with null/Nothing", "body": "C#\r\n```\r\nIBinaryOperation (BinaryOperatorKind.Equals) (OperationKind.BinaryOperator, Type: System.Boolean) (Syntax: 'input == null')\r\n  Left: \r\n    IParameterReferenceOperation: input (OperationKind.ParameterReference, Type: System.Int32?) (Syntax: 'input')\r\n  Right: \r\n    ILiteralOperation (OperationKind.Literal, Type: null, Constant: null) (Syntax: 'null')\r\n```\r\n\r\nVB:\r\n```\r\nIBinaryOperation (BinaryOperatorKind.Equals) (OperationKind.BinaryOperator, Type: System.Boolean) (Syntax: 'input Is Nothing')\r\n  Left: \r\n    IParameterReferenceOperation: input (OperationKind.ParameterReference, Type: System.Nullable(Of System.Int32)) (Syntax: 'input')\r\n  Right: \r\n    IConversionOperation (TryCast: False, Unchecked) (OperationKind.Conversion, Type: System.Object, Constant: null, IsImplicit) (Syntax: 'Nothing')\r\n      Conversion: CommonConversion (Exists: True, IsIdentity: False, IsNumeric: False, IsReference: False, IsUserDefined: False) (MethodSymbol: null)\r\n      Operand: \r\n        ILiteralOperation (OperationKind.Literal, Type: null, Constant: null) (Syntax: 'Nothing')\r\n```\r\n\r\nNote that VB version has conversion from Nothing literal to object and effectively compares different types. We should consider omitting this conversion and produce C#-like tree.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24379/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24310", "title": "Public APIs exposing Flow Graph should be guarded with a feature flag before we merge to master.", "body": "", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23956", "title": "C# IOperation factory sets incorrect BinaryOperatorKind for && and || operators", "body": "Here is an existing test:\r\n```\r\n        [CompilerTrait(CompilerFeature.IOperation)]\r\n        [Fact, WorkItem(17601, \"https://github.com/dotnet/roslyn/issues/17601\")]\r\n        public void IIfstatementWithMultipleCondition()\r\n        {\r\n            string source = @\"\r\nusing System;\r\nclass P\r\n{\r\n    private void M()\r\n    {\r\n        int m = 9;\r\n        int n = 7;\r\n        int p = 5;\r\n        /*<bind>*/if (m >= n && m >= p)\r\n        {\r\n            Console.WriteLine(\"\"Nothing is larger than m.\"\");\r\n        }/*</bind>*/\r\n    }\r\n}\r\n\";\r\n            string expectedOperationTree = @\"\r\nIConditionalOperation (OperationKind.Conditional, Type: null) (Syntax: 'if (m >= n  ... }')\r\n  Condition: \r\n    IBinaryOperation (BinaryOperatorKind.And) (OperationKind.BinaryOperator, Type: System.Boolean) (Syntax: 'm >= n && m >= p')\r\n      Left: \r\n        IBinaryOperation (BinaryOperatorKind.GreaterThanOrEqual) (OperationKind.BinaryOperator, Type: System.Boolean) (Syntax: 'm >= n')\r\n          Left: \r\n            ILocalReferenceOperation: m (OperationKind.LocalReference, Type: System.Int32) (Syntax: 'm')\r\n          Right: \r\n            ILocalReferenceOperation: n (OperationKind.LocalReference, Type: System.Int32) (Syntax: 'n')\r\n      Right: \r\n        IBinaryOperation (BinaryOperatorKind.GreaterThanOrEqual) (OperationKind.BinaryOperator, Type: System.Boolean) (Syntax: 'm >= p')\r\n          Left: \r\n            ILocalReferenceOperation: m (OperationKind.LocalReference, Type: System.Int32) (Syntax: 'm')\r\n          Right: \r\n            ILocalReferenceOperation: p (OperationKind.LocalReference, Type: System.Int32) (Syntax: 'p')\r\n  WhenTrue: \r\n    IBlockOperation (1 statements) (OperationKind.Block, Type: null) (Syntax: '{ ... }')\r\n      IExpressionStatementOperation (OperationKind.ExpressionStatement, Type: null) (Syntax: 'Console.Wri ...  than m.\"\");')\r\n        Expression: \r\n          IInvocationOperation (void System.Console.WriteLine(System.String value)) (OperationKind.Invocation, Type: System.Void) (Syntax: 'Console.Wri ... r than m.\"\")')\r\n            Instance Receiver: \r\n              null\r\n            Arguments(1):\r\n                IArgumentOperation (ArgumentKind.Explicit, Matching Parameter: value) (OperationKind.Argument, Type: null) (Syntax: '\"\"Nothing is ... er than m.\"\"')\r\n                  ILiteralOperation (OperationKind.Literal, Type: System.String, Constant: \"\"Nothing is larger than m.\"\") (Syntax: '\"\"Nothing is ... er than m.\"\"')\r\n                  InConversion: CommonConversion (Exists: True, IsIdentity: True, IsNumeric: False, IsReference: False, IsUserDefined: False) (MethodSymbol: null)\r\n                  OutConversion: CommonConversion (Exists: True, IsIdentity: True, IsNumeric: False, IsReference: False, IsUserDefined: False) (MethodSymbol: null)\r\n  WhenFalse: \r\n    null\r\n\";\r\n            var expectedDiagnostics = DiagnosticDescription.None;\r\n\r\n            VerifyOperationTreeAndDiagnosticsForTest<IfStatementSyntax>(source, expectedOperationTree, expectedDiagnostics);\r\n        }\r\n```\r\n\r\n\r\n**Expected Behavior**:\r\n    IBinaryOperation (BinaryOperatorKind.**ConditionalAnd**) (OperationKind.BinaryOperator, Type: System.Boolean) (Syntax: 'm >= n && m >= p')\r\n\r\n\r\n**Actual Behavior**:\r\n    IBinaryOperation (BinaryOperatorKind.**And**) (OperationKind.BinaryOperator, Type: System.Boolean) (Syntax: 'm >= n && m >= p')\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23886", "title": "Possible bug in implementation of EETypeParameterSymbol.GetInterfaces", "body": "```\r\n        internal override ImmutableArray<NamedTypeSymbol> GetInterfaces(ConsList<TypeParameterSymbol> inProgress)\r\n        {\r\n            var interfaces = _sourceTypeParameter.GetInterfaces(inProgress);\r\n            return this.TypeMap.SubstituteNamedTypes(Interfaces);\r\n        }\r\n```\r\n\r\nIt looks like SubstituteNamedTypes should be called on ```interfaces```, but it is called on ```Interfaces```.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23852", "title": "CSharpOperationFactory.CreateBoundIndexerAccessOperation probably shouldn't create PropertyReferenceExpression node for properties that have MustCallMethodsDirectly == true", "body": "IOperation test hook is hitting an Assert in Microsoft.CodeAnalysis.CSharp.LocalRewriter.MakeArgumentsInEvaluationOrder\r\n```\r\nTest 'Microsoft.CodeAnalysis.CSharp.UnitTests.Symbols.IndexedPropertyTests.StaticProperties' failed: Microsoft.CodeAnalysis.ThrowingTraceListener+DebugAssertFailureException : \r\nMicrosoft.CodeAnalysis.ThrowingTraceListener+DebugAssertFailureException: \r\n\r\n   at Microsoft.CodeAnalysis.ThrowingTraceListener.Fail(String message, String detailMessage) in F:\\GitHub\\roslyn\\src\\Test\\Utilities\\Portable\\ThrowingTraceListener.cs:line 24\r\n   at System.Diagnostics.TraceListener.Fail(String message)\r\n   at System.Diagnostics.TraceInternal.Fail(String message)\r\n   at System.Diagnostics.Debug.Assert(Boolean condition)\r\n   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.MakeArgumentsInEvaluationOrder(CSharpOperationFactory operationFactory, Binder binder, SyntaxNode syntax, ImmutableArray`1 arguments, Symbol methodOrIndexer, MethodSymbol optionalParametersMethod, Boolean expanded, ImmutableArray`1 argsToParamsOpt, Boolean invokedAsExtensionMethod) in F:\\GitHub\\roslyn\\src\\Compilers\\CSharp\\Portable\\Lowering\\LocalRewriter\\LocalRewriter_Call.cs:line 557\r\n   at Microsoft.CodeAnalysis.Operations.CSharpOperationFactory.DeriveArguments(BoundNode boundNode, Binder binder, Symbol methodOrIndexer, MethodSymbol optionalParametersMethod, ImmutableArray`1 boundArguments, ImmutableArray`1 argumentNamesOpt, ImmutableArray`1 argumentsToParametersOpt, ImmutableArray`1 argumentRefKindsOpt, ImmutableArray`1 parameters, Boolean expanded, SyntaxNode invocationSyntax, Boolean invokedAsExtensionMethod) in F:\\GitHub\\roslyn\\src\\Compilers\\CSharp\\Portable\\Operations\\CSharpOperationFactory_Methods.cs:line 151\r\n   at Microsoft.CodeAnalysis.Operations.CSharpOperationFactory.<>c__DisplayClass13_0.<CreateBoundIndexerAccessOperation>b__0() in F:\\GitHub\\roslyn\\src\\Compilers\\CSharp\\Portable\\Operations\\CSharpOperationFactory.cs:line 415\r\n   at System.Lazy`1.CreateValue()\r\n   at System.Lazy`1.LazyInitValue()\r\n   at System.Lazy`1.get_Value()\r\n   at Microsoft.CodeAnalysis.Operations.LazyPropertyReferenceExpression.get_ArgumentsImpl() in F:\\GitHub\\roslyn\\src\\Compilers\\Core\\Portable\\Generated\\Operations.xml.Generated.cs:line 4166\r\n   at Microsoft.CodeAnalysis.Operations.BasePropertyReferenceExpression.get_Arguments() in F:\\GitHub\\roslyn\\src\\Compilers\\Core\\Portable\\Generated\\Operations.xml.Generated.cs:line 4114\r\n   at Microsoft.CodeAnalysis.Operations.BasePropertyReferenceExpression.<get_Children>d__6.MoveNext() in F:\\GitHub\\roslyn\\src\\Compilers\\Core\\Portable\\Generated\\Operations.xml.Generated.cs:line 4098\r\n   at Microsoft.CodeAnalysis.Operations.OperationExtensions.<Descendants>d__3.MoveNext() in F:\\GitHub\\roslyn\\src\\Compilers\\Core\\Portable\\Operations\\OperationExtensions.cs:line 77\r\n   at System.Linq.Enumerable.FirstOrDefault[TSource](IEnumerable`1 source, Func`2 predicate)\r\n   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetOperationWorker(CSharpSyntaxNode node, CancellationToken cancellationToken) in F:\\GitHub\\roslyn\\src\\Compilers\\CSharp\\Portable\\Compilation\\MemberSemanticModel.cs:line 1002\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetOperationCore(SyntaxNode node, CancellationToken cancellationToken) in F:\\GitHub\\roslyn\\src\\Compilers\\CSharp\\Portable\\Compilation\\CSharpSemanticModel.cs:line 469\r\n   at Microsoft.CodeAnalysis.SemanticModel.GetOperation(SyntaxNode node, CancellationToken cancellationToken) in F:\\GitHub\\roslyn\\src\\Compilers\\Core\\Portable\\Compilation\\SemanticModel.cs:line 76\r\n\r\n\tF:\\GitHub\\roslyn\\src\\Test\\Utilities\\Portable\\ThrowingTraceListener.cs(24,0): at Microsoft.CodeAnalysis.ThrowingTraceListener.Fail(String message, String detailMessage)\r\n\tat System.Diagnostics.TraceListener.Fail(String message)\r\n\tat System.Diagnostics.TraceInternal.Fail(String message)\r\n\tat System.Diagnostics.Debug.Assert(Boolean condition, String message)\r\n\tF:\\GitHub\\roslyn\\src\\Compilers\\Core\\Portable\\Compilation\\SemanticModel.cs(81,0): at Microsoft.CodeAnalysis.SemanticModel.GetOperation(SyntaxNode node, CancellationToken cancellationToken)\r\n\tF:\\GitHub\\roslyn\\src\\Compilers\\Core\\Portable\\Operations\\Operation.cs(277,0): at Microsoft.CodeAnalysis.Operation.SearchParentOperation()\r\n\tF:\\GitHub\\roslyn\\src\\Compilers\\Core\\Portable\\Operations\\Operation.cs(47,0): at Microsoft.CodeAnalysis.Operation.get_Parent()\r\n\tF:\\GitHub\\roslyn\\src\\Test\\Utilities\\Portable\\Compilation\\CompilationExtensions.cs(290,0): at Microsoft.CodeAnalysis.Test.Utilities.CompilationExtensions.ValidateIOperations(Func`1 createCompilation)\r\n\tF:\\GitHub\\roslyn\\src\\Compilers\\Test\\Utilities\\CSharp\\CSharpTestBase.cs(512,0): at Microsoft.CodeAnalysis.CSharp.Test.Utilities.CSharpTestBaseBase.CreateCompilation(IEnumerable`1 trees, IEnumerable`1 references, CSharpCompilationOptions options, String assemblyName)\r\n\tF:\\GitHub\\roslyn\\src\\Compilers\\Test\\Utilities\\CSharp\\CSharpTestBase.cs(427,0): at Microsoft.CodeAnalysis.CSharp.Test.Utilities.CSharpTestBaseBase.CreateStandardCompilation(IEnumerable`1 trees, IEnumerable`1 references, CSharpCompilationOptions options, String assemblyName)\r\n\tF:\\GitHub\\roslyn\\src\\Compilers\\Test\\Utilities\\CSharp\\CSharpTestBase.cs(366,0): at Microsoft.CodeAnalysis.CSharp.Test.Utilities.CSharpTestBaseBase.CreateStandardCompilation(String text, IEnumerable`1 references, CSharpCompilationOptions options, CSharpParseOptions parseOptions, String assemblyName, String sourceFileName)\r\n\tF:\\GitHub\\roslyn\\src\\Compilers\\CSharp\\Test\\Symbol\\Symbols\\IndexedPropertyTests.cs(1218,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.Symbols.IndexedPropertyTests.StaticProperties()\r\n```\r\n\r\nIgnoring the assert \r\n```\r\n            Debug.Assert(((methodOrIndexer.Kind == SymbolKind.Property) && optionalParametersMethod.IsAccessor()) ||\r\n                (object)methodOrIndexer == optionalParametersMethod);\r\n```\r\ndoesn't cause a crash and I am going to adjust the assert condition for now. However, we need to follow up with verification whether the tree shape is correct in this scenario. \r\n\r\nThis is an error scenario and, in general, it is probably not safe to assume that an accessor signature is going to \"align\" with property signature when property.MustCallMethodsDirectly == true, ```optionalParametersMethod.IsAccessor()``` is false in this case and causes the assert to fire. Therefore, Microsoft.CodeAnalysis.Operations.CSharpOperationFactory.CreateBoundIndexerAccessOperation probably shouldn't create PropertyReferenceExpression node for properties that have MustCallMethodsDirectly == true ", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23821", "title": "IOperation.Language throws System.InvalidOperationException: This program location is thought to be unreachable. exception", "body": "For the following code in Microsoft.CodeAnalysis.CSharp.UnitTests.OutVarTests.For_01\r\n```\r\n        for (Dummy(f, TakeOutParam((f ? 10 : 20), out var x0), x0); \r\n             Dummy(f, TakeOutParam((f ? 1 : 2), out var x1), x1); \r\n             Dummy(f, TakeOutParam((f ? 100 : 200), out var x2), x2), Dummy(true, null, x2))\r\n        {\r\n            System.Console.WriteLine(x0);\r\n            System.Console.WriteLine(x1);\r\n            f = false;\r\n        }\r\n```\r\n\r\nObserved:\r\nIForLoopOperation.AtLoopBottom is an array with one element - an IOperation node with kind None and two children representing invocations. The fact that we have IOperation None for this simple success scenario is wrong. Moreover,  the syntax node for this None node is a SyntaxList, this is wrong too and SyntaxList.Language actually throws that exception. \r\n\r\nExpected:\r\nIForLoopOperation.AtLoopBottom should contain two invocation nodes directly.\r\n\r\nUnit-tests affected by this issue:\r\n```\r\nMicrosoft.CodeAnalysis.CSharp.UnitTests.OutVarTests.Scope_For_06()\r\nMicrosoft.CodeAnalysis.CSharp.UnitTests.OutVarTests.For_01()\r\nMicrosoft.CodeAnalysis.CSharp.UnitTests.OutVarTests.Scope_For_07()\r\nMicrosoft.CodeAnalysis.CSharp.UnitTests.OutVarTests.GlobalCode_For_02()\r\nMicrosoft.CodeAnalysis.CSharp.UnitTests.OutVarTests.For_02()\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23820", "title": "IForEachLoopOperation.LoopControlVariable is null for some error scenarios", "body": "```\r\n        var ar = new int[] { 1, 2, 3 };\r\n\r\n        foreach(ref readonly v in ar)\r\n        {\r\n        }\r\n```\r\n\r\nAffected unit-tests:\r\n```\r\nMicrosoft.CodeAnalysis.CSharp.UnitTests.Parsing.RefReadonlyTests.RefReadOnlyForEachAreDisallowed\r\nMicrosoft.CodeAnalysis.CSharp.UnitTests.CodeGen.CodeGenDeconstructTests.MixedDeconstruction_06\r\nMicrosoft.CodeAnalysis.CSharp.UnitTests.CodeGen.CodeGenDeconstructTests.ShortDiscardDisallowedInForeach\r\nMicrosoft.CodeAnalysis.CSharp.UnitTests.IOperationTests.IForEachLoopStatement_WithInvalidLoopControlVariable\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23820/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23819", "title": "IConditionalAccessInstanceOperation.Syntax is null for a conditional access of off an implicit receiver within a With statement, Language property throws NullReferenceException because of that", "body": "```\r\n    Sub Test5(Of T As I1)(x as C1(Of T))\r\n        With x.F2\r\n            ?.Test()\r\n        End With\r\n    End Sub \r\n```\r\n\r\n\r\nAffected unit-tests:\r\n```\r\nMicrosoft.CodeAnalysis.VisualBasic.UnitTests.Semantics.ConditionalAccessTests.CodeGen_04\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23818", "title": "For some scenarios IRangeCaseClauseOperation returns null for bounds, event when they are specified in code and there are no errors", "body": "```\r\n        <CompilerTrait(CompilerFeature.IOperation)>\r\n        <Fact()>\r\n        Public Sub SelectCase_IfList_String_RelationalRangeClauses()\r\n            Dim compVerifier = CompileAndVerify(\r\n<compilation>\r\n    <file name=\"a.vb\"><![CDATA[\r\nImports System        \r\nModule M1\r\n    Sub Main()\r\n        For x = 0 to 11\r\n            Console.Write(x.ToString() + \":\")\r\n            Test(x.ToString())\r\n        Next\r\n    End Sub\r\n\r\n    Sub Test(number as String)\r\n        Select Case number\r\n            Case \"0\"\r\n                Console.WriteLine(\"Equal to 0\")\r\n            Case \"1\", \"2\", \"3\", \"4\", \"5\"\r\n                Console.WriteLine(\"Between 1 and 5, inclusive\")\r\n            Case \"6\" To \"8\"\r\n                Console.WriteLine(\"Between 6 and 8, inclusive\")\r\n            Case \"9\" To \"8\"\r\n                Console.WriteLine(\"Fail\")\r\n            Case >= \"9\", <= \"10\"\r\n                Console.WriteLine(\"Equal to 9 or 10\")\r\n            Case Else\r\n                Console.WriteLine(\"Greater than 10\")\r\n        End Select\r\n    End Sub\r\nEnd Module\r\n    ]]></file>\r\n</compilation>,\r\n    options:=TestOptions.ReleaseExe.WithOptionCompareText(True),\r\n    expectedOutput:=<![CDATA[0:Equal to 0\r\n1:Between 1 and 5, inclusive\r\n2:Between 1 and 5, inclusive\r\n3:Between 1 and 5, inclusive\r\n4:Between 1 and 5, inclusive\r\n5:Between 1 and 5, inclusive\r\n6:Between 6 and 8, inclusive\r\n7:Between 6 and 8, inclusive\r\n8:Between 6 and 8, inclusive\r\n9:Equal to 9 or 10\r\n10:Equal to 9 or 10\r\n11:Greater than 10]]>)\r\n\r\n            Dim compilation = compVerifier.Compilation\r\n\r\n            Dim tree = compilation.SyntaxTrees.Single()\r\n            Dim node = tree.GetRoot().DescendantNodes().OfType(Of RangeCaseClauseSyntax)().First()\r\n\r\n            Assert.Equal(\"\"\"6\"\" To \"\"8\"\"\", node.ToString())\r\n\r\n            compilation.VerifyOperationTree(node, expectedOperationTree:=\r\n            <![CDATA[\r\nIRangeCaseClauseOperation (CaseKind.Range) (OperationKind.CaseClause, Type: null) (Syntax: '\"6\" To \"8\"')\r\n  Min: \r\n    null\r\n  Max: \r\n    null\r\n]]>.Value)\r\n        End Sub\r\n```\r\n\r\nKnown affected scenarios:\r\n```\r\nMicrosoft.CodeAnalysis.VisualBasic.UnitTests.CodeGenSelectCase.SelectCase_IfList_String_RelationalRangeClauses\r\nMicrosoft.CodeAnalysis.VisualBasic.UnitTests.Semantics.OperationAnalyzerTests.CaseVisualBasic\r\nMicrosoft.CodeAnalysis.VisualBasic.UnitTests.Semantics.OperationAnalyzerTests.SwitchVisualBasic\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23810", "title": "IEventAssignmentOperation.EventReference is null when event access is parenthesized or erroneous", "body": "```\r\n        <CompilerTrait(CompilerFeature.IOperation)>\r\n        <Fact()>\r\n        Public Sub NewOnCoClassInterface_Lookup_AddRemoveHandler2()\r\n            Dim compilation = CreateCompilationWithMscorlibAndVBRuntime(\r\n                    <compilation>\r\n                        <file name=\"a.vb\">\r\n                            <![CDATA[\r\nImports System\r\nImports System.Runtime.InteropServices\r\n\r\nModule Module1\r\n    Sub Main()\r\n    End Sub\r\nEnd Module\r\n\r\nInterface Goo1\r\n    Function Quit() As Goo\r\nEnd Interface\r\n\r\nInterface Goo2\r\n    Event Quit()\r\nEnd Interface\r\n\r\n<CoClass(GetType(GooClass))>\r\nInterface Goo\r\n    Inherits Goo1, Goo2\r\nEnd Interface\r\n\r\nInterface GooGoo\r\n    Inherits Goo\r\nEnd Interface\r\n\r\nClass GooClass\r\n    Implements Goo\r\n    Public Function Quit2() As Goo Implements Goo1.Quit\r\n        Return Nothing\r\n    End Function\r\n    Public Event Quit1() Implements Goo2.Quit\r\nEnd Class\r\n\r\nClass GooGooClass\r\n    Implements GooGoo\r\n\r\n    Dim Instance1 As GooGoo = New GooGooClass\r\n    Dim Instance3 As Goo = New GooClass\r\n\r\n    WithEvents GooInstance As New GooClass\r\n\r\n    Public Function Quit3() As Goo Implements Goo1.Quit\r\n        Return Nothing\r\n    End Function\r\n    Public Sub Quit2()\r\n        AddHandler (((Instance1).Quit.Quit).Quit), AddressOf Quit2\r\n        RemoveHandler Instance3.Quit.Quit.Quit.Quit.Quit.Quit, AddressOf Quit2\r\n    End Sub\r\n    Public Event Quit1() Implements Goo2.Quit\r\nEnd Class\r\n]]>\r\n                        </file>\r\n                    </compilation>)\r\n\r\n            CompilationUtils.AssertTheseDiagnostics(compilation, <errors></errors>)\r\n\r\n            Dim tree = compilation.SyntaxTrees.Single()\r\n            Dim nodes = tree.GetRoot().DescendantNodes().OfType(Of AddRemoveHandlerStatementSyntax)().ToArray()\r\n\r\n            Assert.Equal(\"AddHandler (((Instance1).Quit.Quit).Quit), AddressOf Quit2\", nodes(0).ToString())\r\n\r\n            compilation.VerifyOperationTree(nodes(0), expectedOperationTree:=\r\n            <![CDATA[\r\nIExpressionStatementOperation (OperationKind.ExpressionStatement, Type: null) (Syntax: 'AddHandler  ... essOf Quit2')\r\n  Expression: \r\n    IEventAssignmentOperation (EventAdd) (OperationKind.EventAssignment, Type: null, IsImplicit) (Syntax: 'AddHandler  ... essOf Quit2')\r\n      Event Reference: \r\n        null\r\n      Handler: \r\n        IDelegateCreationOperation (OperationKind.DelegateCreation, Type: Goo2.QuitEventHandler, IsImplicit) (Syntax: 'AddressOf Quit2')\r\n          Target: \r\n            IMethodReferenceOperation: Sub GooGooClass.Quit2() (OperationKind.MethodReference, Type: null) (Syntax: 'AddressOf Quit2')\r\n              Instance Receiver: \r\n                IInstanceReferenceOperation (OperationKind.InstanceReference, Type: GooGooClass, IsImplicit) (Syntax: 'Quit2')\r\n]]>.Value)\r\n        End Sub\r\n```\r\n\r\nScenarios in the following unit-tests are affected by this issue:\r\n```\r\nMicrosoft.CodeAnalysis.VisualBasic.UnitTests.BindingErrorTests.EventHandlerBindingError\r\nMicrosoft.CodeAnalysis.VisualBasic.UnitTests.BindingErrorTests.BC30676ERR_NameNotEvent2\r\nMicrosoft.CodeAnalysis.VisualBasic.UnitTests.BindingErrorTests.BC30677ERR_AddOrRemoveHandlerEvent\r\nMicrosoft.CodeAnalysis.VisualBasic.UnitTests.Semantics.NewOnInterfaceTests.NewOnCoClassInterface_Lookup_AddRemoveHandler\r\nMicrosoft.CodeAnalysis.VisualBasic.UnitTests.Semantics.NewOnInterfaceTests.NewOnCoClassInterface_Lookup_AddRemoveHandler2\r\nMicrosoft.CodeAnalysis.VisualBasic.UnitTests.Semantics.Binder_Statements_Tests.TestGetDeclaredSymbolFromParameterInLambdaExprOfAddHandlerStatement\r\nMicrosoft.CodeAnalysis.VisualBasic.UnitTests.Semantics.ConditionalAccessTests.ConditionalAccessToEvent_03\r\nMicrosoft.CodeAnalysis.VisualBasic.UnitTests.Binder_Statements_Tests.RemoveHandlerNotEvent\r\nMicrosoft.CodeAnalysis.VisualBasic.UnitTests.Binder_Statements_Tests.AddHandlerNotSimple\r\nMicrosoft.CodeAnalysis.VisualBasic.UnitTests.Binder_Statements_Tests.AddHandlerMissingStuff\r\nMicrosoft.CodeAnalysis.VisualBasic.UnitTests.Binder_Statements_Tests.AddHandlerNoConversion\r\nMicrosoft.CodeAnalysis.VisualBasic.UnitTests.Semantics.OperationAnalyzerTests.InvalidEventInstanceVisualBasic\r\nMicrosoft.CodeAnalysis.VisualBasic.UnitTests.Semantics.IteratorTests.IteratorInWrongPlaces\r\n``` ", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23795", "title": "ISingleValueCaseClauseOperation is missing a Value for some scenarios, which means that a portion of user code is not represented in the IOperation tree", "body": "Here is an existing IOperation test:\r\n```\r\n        <Fact, WorkItem(17607, \"https://github.com/dotnet/roslyn/issues/17607\")>\r\n        Public Sub InvalidSwitchStatementCaseLabel()\r\n            Dim source = <![CDATA[\r\nClass Program\r\n    Public Shared Sub Main(args As String())\r\n        Dim x = New Program()\r\n        Select Case x.ToString()'BIND:\"Select Case x.ToString()\"\r\n            Case x\r\n                Exit Select\r\n        End Select\r\n    End Sub\r\nEnd Class]]>.Value\r\n\r\n            Dim expectedOperationTree = <![CDATA[\r\nISwitchOperation (1 cases) (OperationKind.Switch, Type: null, IsInvalid) (Syntax: 'Select Case ... End Select')\r\n  Switch expression: \r\n    IInvocationOperation (virtual Function System.Object.ToString() As System.String) (OperationKind.Invocation, Type: System.String) (Syntax: 'x.ToString()')\r\n      Instance Receiver: \r\n        ILocalReferenceOperation: x (OperationKind.LocalReference, Type: Program) (Syntax: 'x')\r\n      Arguments(0)\r\n  Sections:\r\n      ISwitchCaseOperation (1 case clauses, 1 statements) (OperationKind.SwitchCase, Type: null, IsInvalid) (Syntax: 'Case x ... Exit Select')\r\n          Clauses:\r\n              ISingleValueCaseClauseOperation (CaseKind.SingleValue) (OperationKind.CaseClause, Type: null, IsInvalid) (Syntax: 'x')\r\n                Value: \r\n                  null\r\n          Body:\r\n              IBlockOperation (1 statements) (OperationKind.Block, Type: null, IsInvalid, IsImplicit) (Syntax: 'Case x ... Exit Select')\r\n                IBranchOperation (BranchKind.Break, Label: exit) (OperationKind.Branch, Type: null) (Syntax: 'Exit Select')\r\n]]>.Value\r\n\r\n            Dim expectedDiagnostics = <![CDATA[\r\nBC30311: Value of type 'Program' cannot be converted to 'String'.\r\n            Case x\r\n                 ~\r\n]]>.Value\r\n\r\n            VerifyOperationTreeAndDiagnosticsForTest(Of SelectBlockSyntax)(source, expectedOperationTree, expectedDiagnostics)\r\n        End Sub\r\n```\r\n\r\nNote that reference to local ```x``` in ```Case x``` is not present in the tree:\r\n```\r\n              ISingleValueCaseClauseOperation (CaseKind.SingleValue) (OperationKind.CaseClause, Type: null, IsInvalid) (Syntax: 'x')\r\n                Value: \r\n                  null\r\n```\r\n\r\nSuccess scenarios are affected too, SelectCase_ImplicitOperator unit-test for example.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23780", "title": "For some branch operations IOperation tree provides insufficient information to reason about them ", "body": "```\r\n        <CompilerTrait(CompilerFeature.IOperation)>\r\n        <Fact()>\r\n        Public Sub ExitStatement()\r\n            Dim source = <![CDATA[\r\nClass Program\r\n    Private Shared Sub Main() 'BIND:\"Private Shared Sub Main()\"\r\n        Dim x As Boolean = false\r\n        While True\r\n            Do While True\r\n                If x Then\r\n                    Exit Do\r\n                Else\r\n                    Exit While\r\n                End If\r\n            Loop\r\n        End While\r\n\r\n        Exit Sub\r\n    End Sub\r\nEnd Class\r\n    ]]>.Value\r\n\r\n            Dim expectedOperationTree = <![CDATA[\r\nIBlockOperation (5 statements, 1 locals) (OperationKind.Block, Type: null) (Syntax: 'Private Sha ... End Sub')\r\n  Locals: Local_1: x As System.Boolean\r\n  IVariableDeclarationGroupOperation (1 declarations) (OperationKind.VariableDeclarationGroup, Type: null) (Syntax: 'Dim x As Boolean = false')\r\n    IVariableDeclarationOperation (1 declarators) (OperationKind.VariableDeclaration, Type: null) (Syntax: 'x As Boolean = false')\r\n      Declarators:\r\n          IVariableDeclaratorOperation (Symbol: x As System.Boolean) (OperationKind.VariableDeclarator, Type: null) (Syntax: 'x')\r\n            Initializer: \r\n              null\r\n      Initializer: \r\n        IVariableInitializerOperation (OperationKind.VariableInitializer, Type: null) (Syntax: '= false')\r\n          ILiteralOperation (OperationKind.Literal, Type: System.Boolean, Constant: False) (Syntax: 'false')\r\n  IWhileLoopOperation (ConditionIsTop: True, ConditionIsUntil: False) (LoopKind.While) (OperationKind.Loop, Type: null) (Syntax: 'While True ... End While')\r\n    Condition: \r\n      ILiteralOperation (OperationKind.Literal, Type: System.Boolean, Constant: True) (Syntax: 'True')\r\n    Body: \r\n      IBlockOperation (1 statements) (OperationKind.Block, Type: null, IsImplicit) (Syntax: 'While True ... End While')\r\n        IWhileLoopOperation (ConditionIsTop: True, ConditionIsUntil: False) (LoopKind.While) (OperationKind.Loop, Type: null) (Syntax: 'Do While Tr ... Loop')\r\n          Condition: \r\n            ILiteralOperation (OperationKind.Literal, Type: System.Boolean, Constant: True) (Syntax: 'True')\r\n          Body: \r\n            IBlockOperation (1 statements) (OperationKind.Block, Type: null, IsImplicit) (Syntax: 'Do While Tr ... Loop')\r\n              IConditionalOperation (OperationKind.Conditional, Type: null) (Syntax: 'If x Then ... End If')\r\n                Condition: \r\n                  ILocalReferenceOperation: x (OperationKind.LocalReference, Type: System.Boolean) (Syntax: 'x')\r\n                WhenTrue: \r\n                  IBlockOperation (1 statements) (OperationKind.Block, Type: null, IsImplicit) (Syntax: 'If x Then ... End If')\r\n                    IBranchOperation (BranchKind.Break, Label: exit) (OperationKind.Branch, Type: null) (Syntax: 'Exit Do')\r\n                WhenFalse: \r\n                  IBlockOperation (1 statements) (OperationKind.Block, Type: null) (Syntax: 'Else ... Exit While')\r\n                    IBranchOperation (BranchKind.Break, Label: exit) (OperationKind.Branch, Type: null) (Syntax: 'Exit While')\r\n          IgnoredCondition: \r\n            null\r\n    IgnoredCondition: \r\n      null\r\n  IBranchOperation (BranchKind.Break, Label: exit) (OperationKind.Branch, Type: null) (Syntax: 'Exit Sub')\r\n  ILabeledOperation (Label: exit) (OperationKind.Labeled, Type: null, IsImplicit) (Syntax: 'End Sub')\r\n    Statement: \r\n      null\r\n  IReturnOperation (OperationKind.Return, Type: null, IsImplicit) (Syntax: 'End Sub')\r\n    ReturnedValue: \r\n      null\r\n]]>.Value\r\n\r\n            VerifyOperationTreeAndDiagnosticsForTest(Of MethodBlockSyntax)(source, expectedOperationTree, \"\")\r\n        End Sub\r\n```\r\n\r\nThe tree above includes three IBranchOperation nodes:\r\n```\r\nIBranchOperation (BranchKind.Break, Label: exit) (OperationKind.Branch, Type: null) (Syntax: 'Exit Do')\r\nIBranchOperation (BranchKind.Break, Label: exit) (OperationKind.Branch, Type: null) (Syntax: 'Exit While')\r\nIBranchOperation (BranchKind.Break, Label: exit) (OperationKind.Branch, Type: null) (Syntax: 'Exit Sub')\r\n```\r\n\r\nAnd only one ILabeledOperation:\r\n```\r\nILabeledOperation (Label: exit) (OperationKind.Labeled, Type: null, IsImplicit) (Syntax: 'End Sub')\r\n``` \r\n\r\nAll branch operations represent jumps to different locations in code and only the last one (for 'Exit Sub') has a node representing its destination.\r\n\r\nThe same issue probably exists with Continue statements and other kinds of Exit statement.\r\n\r\nPossible solution is to expose Exit/Continue labels for constructs that can be exited/continued ", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/dotnet/roslyn/commits/b252b48a5960a54853e2724857626da451f0853b", "message": "Restore correct SemanticModel behavior for Default Property Transformation scenarios. (#24196)\n\nFixes https://devdiv.visualstudio.com/DevDiv/_workitems?id=548762"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/d3de5b2bf31b1e02710417b2924e1072d72b237c", "message": "MemberSemanticModel.GetBoundLambdaOrQuery should use GetAdjustedNodePosition helper to ensure proper handling of zero-length tokens at the beginning of a syntax node. (#24049)\n\nFixes #23883."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/132b91d19c6a34826b0c581dc46709d9fb78a1d8", "message": "Remove obsolete duplicate APIs from type symbols. (#23888)\n\nThis change removes the following APIs:\r\n- TypeSymbol.BaseType\r\n- TypeSymbol.Interfaces\r\n- TypeSymbol.AllInterfaces\r\n- NamedTypeSymbol.TypeArguments\r\n- TypeParameterSymbol.ConstraintTypes\r\n\r\nThese APIs simply delegate the work to APIs with \"NoUseSiteDiagnostics\" suffix and are not supposed to be used inside compilers. They were left in the code-base because they used to be part of the public surface and the names were nicer, but they are no longer part of the public surface."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/2651e0d3f18a0939b876b571635245b2dd174791", "message": "Add more validations to IOperation test hook. (#23840)"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/d28454f488a9f1855e96bb1b727b01d65fa09c84", "message": "Reduce the number of attributes that should be bound in order to determine if there are NoPia local types explicitly defined in code. (#23505)\n\nFixes #23179."}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24358", "title": "More changes to flow graph generation", "body": "- Use special IOperation node to represent fact of capturing an intermediate result\r\n- Create more \u201ccompact\u201d flow graph in presence of nested conditional operations\r\n- Ensure and verify consistent state of IOperaton nodes exposed by a flow graph\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24051", "title": "Test", "body": "<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24024", "title": "Flow graph 01", "body": "<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/13298608", "body": "Consider using `using (new EnsureEnglishUICulture())` instead.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/13298608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14224911", "body": "Minor thing, unnecessary initialization. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14224911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14224924", "body": "Style, `{` should be on a separate line.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14224924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14224963", "body": "As I mentioned before, ArgumentNullException doesn't feel appropriate, none of the arguments are null.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14224963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14224997", "body": "Consider also testing with empty value instead of null.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14224997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14225035", "body": "I am not sure if there is an easy way to do this, but it would be good to verify what parameter the exception is associated with, parameter's name should be available from exception object.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14225035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14225042", "body": "The same comment is applicable to the previous test.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14225042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14225444", "body": "Similar to how we complain about a key? Sounds good.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14225444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15456734", "body": "I am not sure if concrete is the right term when we are talking about definitions. I'd say \"not generic\" instead.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15456734/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "miloush": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24377", "title": "Completion list after deletion breaks snippets flow", "body": "**Version Used**: 27310\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Enable _Show completion list after a character is deleted_\r\n2. Invoke a code snippet that would offer intellisense e.g. `prop` or `lock`\r\n3. Press <key>Backspace</key> to delete the default value of the placeholder.\r\n4. Press <key>Tab</key> to move to another placeholder.\r\n\r\n**Actual Behavior**: The first list in the entry, e.g. `#if` is entered into the placeholder.\r\n\r\n**Expected Behavior**: The empty placeholder to remain empty as is the case with performing the 3rd step with <key>Delete</key> instead. Nothing is preselected in the autocompletion list (correct) so the Tab key shouldn't commit anything.\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/22133413", "body": "\ud83d\udc4d  ", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/22133413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "vsfeedback": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24376", "title": "Auto completing quotation mark is not working when using CW code snippet", "body": "If you use the CW code snippet for Console.WriteLine() then you can't auto complete the quoatation mark for the literal string.\r\n\r\nIf you instead manually type in Console, dot, WriteLine() and type the first quotation mark, then it gets auto completed.\r\n\r\n![Snippet](https://developercommunity.visualstudio.com/storage/attachments/21088-vs2017-cw1.gif)\r\n\r\n![No Snippet](https://developercommunity.visualstudio.com/storage/attachments/21089-vs2017-cw2.gif)\r\n\r\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/185760/auto-completing-quotation-mark-is-not-working-when.html\r\nVSTS ticketId: 555040_\r\n_These are the original issue comments:_\r\n(no comments)\r\n_These are the original issue solutions:_\r\n(no solutions)", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24376/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24365", "title": "Code formatting not working using open directory", "body": "I cloned a git repo containing a .NET Core project.  I used Open Directory in VS 2017 15.5.3 and 15.6.0 Preview 2.0, and both had the same issue.\nWhen editing code, automatic formatting, such as indentation and brace positioning did not function correctly, either indenting too deeply or not indenting at all.  At least some of the code used framework names (Int64) and some used built-in names (long).\nWhen I added an empty VS solution and then added the project to it, the auto-formatting started working.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/181937/code-formatting-not-working-using-open-directory.html\nVSTS ticketId: 551475_\n_These are the original issue comments:_\n(no comments)\n_These are the original issue solutions:_\n(no solutions)", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24232", "title": "editorconfig not working for VB.NET in 15.5.2", "body": "I updated my Visual Studio to version 15.5.2 since then the editorconfig settings are not applied to vb files anymore.\n\nI created a sample project here: https://github.com/papauorg/editorconfig_vb_issue\nIt includes an interface that doesn't start with an I and a member variable that starts with m_ instead of just an _. Both rules are included in the editorconfig file but are not applied anymore. When I open the project in a older version of Visual Studio 15.4.0 on my notebook it is working fine. The warnings are displayed as expected.\n\nThe warnings and suggestions for C# files seem to work fine, too.\n\nLet me know if I need to provide more information.\n\nBest regards,\nPhilipp\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/179195/editorconfig-not-working-for-vbnet-in-1552.html\nVSTS ticketId: 549243_\n_These are the original issue comments:_\n(no comments)\n_These are the original issue solutions:_\n(no solutions)", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24221", "title": "Can't use applicable_kinds.parameter in Naming conventions in Editor Config", "body": "I'm creating a .editorconfig file for our team which includes code style settings, but also contains naming conventions.\n\nThe issue within the naming conventions is that I can't get the c# editor to show an error under a parameter which violates the rule.\n\nAm I missing something?\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/177536/cant-use-applicable-kindsparameter-in-naming-conve.html\nVSTS ticketId: 547550_\n_These are the original issue comments:_\n(no comments)\n_These are the original issue solutions:_\n(no solutions)", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24190", "title": "VS2017 - Fix All Occurrences Window Missing Line Preview", "body": "From the Lightbulb context menu, when I select &quot;fix all in document&quot; the line preview is blank for long strings. Can this be fixed or at least a truncated string be used in its place? See attached screenshot.\r\n\r\n```csharp\r\npublic static class Class1\r\n{\r\n    public const string Oner\n    public const string Twor\n}\r\n```\r\n\r\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/180238/vs2017-fix-all-occurrences-window-missing-line-pre.html\r\nVSTS ticketId: 549883_\r\n_These are the original issue comments:_\r\n(no comments)\r\n_These are the original issue solutions:_\r\n(no solutions)", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24091", "title": "vbcrlf does not work (visual basic)", "body": "vbcrlf does not seem to work in my Visial Studio/Visual Basic; it does not produce a linefeed in my code, just seems to ignore it. I have also tried vbLF but that does not work either. vbTab does however work as it shoult. But i need a linefeed in mh code when I iterate through an array. Any suggetions?\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/166284/vbcrlf-does-not-work-visual-basic.html\nVSTS ticketId: 537113_\n_These are the original issue comments:_\n(no comments)\n_These are the original issue solutions:_\n(no solutions)", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24090", "title": "IDE0032 fires for explict interface implementation of a property", "body": "If I have explicit interface implementation, like this:\n\n        string IDeploymentOptions.ProjectUniqueName\n        {\n            get { return this.projectUniqueName; }\n        }\n\nThen I get IDE0032 warning/error suggesting to use auto-property. \n\nI feel it should not be a warning because people use explict interface implementation for a reason, possibly as a stylistic choice (enforcing that class is used via interface only, for example).\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/175510/ide0032-fires-for-explict-interface-implementation.html\nVSTS ticketId: 545926_\n_These are the original issue comments:_\n(no comments)\n_These are the original issue solutions:_\n(no solutions)", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24087", "title": "Inline Refactoring Rename Issue with Regions in Visual Basic", "body": "When I rename a Property in Visual Basic then normally a little light bulb appears and when I click on it, I can push a button to rename the property in the whole project. When the Property is within a Region or even followed by Region this doesn't work. The light bulb appears and when I click on it, it just dissapears.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/171490/inline-refactoring-rename-issue-with-regions-in-vi.html\nVSTS ticketId: 542431_\n_These are the original issue comments:_\n(no comments)\n_These are the original issue solutions:_\n(no solutions)", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24087/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24086", "title": "VB editor normalizes decimal literals, thereby breaking code", "body": "1D and 1.0D are different literals. Still, the VB editor automatically changes 1.0D to 1D, thereby changing the semantics of the program.\r\n\r\nRepro example:\r\n\r\n1. Create a new VB.NET console project in Visual Studio 2017.\r\n\r\n2. Use an external editor (e.g. Notepad) to enter the following code in Module1.vb:\r\n\r\n```vb\r\nModule Module1\r\n    Sub Main()\r\n        Dim d1 = 1D\r\n        Dim d2 = 1.0D\r\n\r\n        Console.WriteLine(d1)\r\n        Console.WriteLine(d2)\r\n\r\n        Console.ReadLine()\r\n    End Sub\r\nEnd Module\r\n```\r\n\r\n3. Compile and run. Note the following output:\r\n    > 1\r\n    > 1.0 (or &quot;1,0&quot;, depending on your locale).\r\n\r\n4. Open Module1.vb with Visual Studio.\r\n5. Add a comment after the line\r\nDim d2 = 1.0D\r\ne.g.\r\nDim d2 = 1.0D   ' some comment\r\n\r\n6. Note that Visual Studio automatically changed the line to\r\nDim d2 = 1D    ' some comment\r\n\r\n7. Note that you are unable to enter 1.0D without Visual Studio automatically changing it back to 1D.\r\n\r\n8. Run the program and note that the output now differs:\r\n    > 1\r\n    > 1\r\n\r\n9. Despair\r\n\r\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/175434/vb-editor-normalizes-decimal-literals-thereby-brea.html\r\nVSTS ticketId: 545901_\r\n_These are the original issue comments:_\r\n\r\nHeinrich Moser on 1/3/2018, 00:33 AM (4 days ago): <p>Note: This behavior can be turned off by disabling the following option: Tools/Options/Text Editor/Basic/Advanced/\"Pretty listing (reformatting) of code\". It's still a bug, since \"pretty printing\" must never change the behavior of a program.</p>\r\n\r\n_These are the original issue solutions:_\r\n(no solutions)\r\n  ", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24085", "title": "View in Object Browser not working", "body": "In Solution Explorer selecting dependencies, clicking on a NuGet package, there's an option &quot;View in Object Browser&quot;. However, this menu does nothing. It doesn't open the Object Browser, it doesn't give any error.\n\n- Create a Console Application (.NET Core)\n- Add a NuGet package (e.g. Microsoft.Extensions.DependencyInjection)\n- In Solution Explorer, click on Dependencies, NuGet, Microsoft.Extensions.DependencyInjection\n- context menu, open &quot;View in Object Browser&quot;\n\nNothing happens\nI would expect to open the Object Browser, and to navigate to this NuGet package\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/174723/view-in-object-browser-not-working.html\nVSTS ticketId: 545462_\n_These are the original issue comments:_\n(no comments)\n_These are the original issue solutions:_\n(no solutions)", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24084", "title": "Remove Unnecessary Usings feature doesn't take build directives into account", "body": "Suppose some particular function calls for a specific namespace are only used within a DEBUG compiler directive. Intellisense will then apparently ignore all other code when it determines what usings are unnecessary, thereby breaking the code that's compiled under release compile mode.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/172621/remove-unnecessary-usings-feature-doesnt-take-buil.html\nVSTS ticketId: 543044_\n_These are the original issue comments:_\n(no comments)\n_These are the original issue solutions:_\n(no solutions)", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24075", "title": "There are two 'Use auto property' warnings: IDE0032 and IDE0032WithoutSuggestion", "body": "There are two 'Use auto property' warnings: IDE0032 and IDE0032WithoutSuggestion, which creates visual clutter in IDE (repeating same information twice) and in suppression (as you have to suppress both, if you chose so).\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/175511/there-are-two-use-auto-property-warnings-ide0032-a.html\nVSTS ticketId: 545927_\n_These are the original issue comments:_\n(no comments)\n_These are the original issue solutions:_\n(no solutions)", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24073", "title": "Lost color on type names during copy & paste in wordprocessor", "body": "If I run a code copy &amp; paste from c# code to Wordpad, LibreOffice, Word, etc, the type names of the variables lose formatting. The names used in the declarations retain formatting. Example:\r\n\r\n```cs\r\npublic class Student\r\n{\r\n   public string FullName;\r\n}\r\n\r\npublic class School\r\n{\r\n   public List<Student> students = ...\r\n}\r\n```\r\n\r\n\"Student\" used in type dclaration retain formatting. \r\n\"Student\" used in declaration of field students lost formatting!\r\n\r\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/173221/lost-color-on-type-names-during-copy-paste-in-word.html\r\nVSTS ticketId: 544121_\r\n_These are the original issue comments:_\r\n(no comments)\r\n_These are the original issue solutions:_\r\n(no solutions)\r\n  ", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24067", "title": "VB: Structure guidelines do not show tooltips any more", "body": "In Visual Studio 2017 (Enterprise) with code structure guidelines activated, the guidelines show fine. However, since some time, they do not show the tooltips while hovering over them any more. The tooltips used to show the nested statement hierarchy very nicely. Why, and what could I do about it? Thanks very mucht!\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/144528/vb-structure-guidelines-do-not-show-tooltips-any-m.html\nVSTS ticketId: 520010_\n_These are the original issue comments:_\n\nJinu Joseph [MSFT] on \u200e11\u200e/\u200e12\u200e/\u200e2017, 06:56 PM (53 days ago): <p>We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.</p>\n\n_These are the original issue solutions:_\n(no solutions)", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24036", "title": "\"keyword\"", "body": "Thats all the exception tells me. \n\nWhy?\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/52762/keyword.html\nVSTS ticketId: 431114_\n_These are the original issue comments:_\n\nMatthew Gertz on 5/8/2017, 08:33 AM (240 days ago): <p>Thank you for your feedback! For us to investigate this further, could you please provide us with the repro steps that caused this \"keyword\" error to appear? We look forward to hearing from you!</p>\n\nAndrew Stanton on 5/23/2017, 03:36 AM (225 days ago): <p>I did, but the feedback tool ate the attachment.  It looked like one of the generated and marginally useful Roslyn  `throw new ArgumentNullException(nameof(keyword))`-like statements</p>\n\n_These are the original issue solutions:_\n(no solutions)", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24033", "title": "Extract Method give inconsistents results", "body": "Extract Method give inconsistents results when a local function is within extracted code (used or described)\r\n\r\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/148551/extract-method-give-inconsistents-results.html\r\nVSTS ticketId: 523482_\r\n_These are the original issue comments:_\r\n\r\nJinu Joseph [MSFT] on \u200e11\u200e/\u200e13\u200e/\u200e2017, 01:34 AM (51 days ago): <p>Thanks for pointing out the difference , opening this back for consideration.</p><p>Thanks for the feedback.</p>\r\n\r\n_These are the original issue solutions:_\r\n\r\nJinu Joseph [MSFT] solved on \u200e11\u200e/\u200e13\u200e/\u200e2017, 00:37 AM (51 days ago), 0 votes: <p>Thank you for your feedback! This issue appears to be similar  to <a target='_blank' href=\"https://github.com/dotnet/roslyn/issues/22550\">https://github.com/dotnet/roslyn/issues/22550</a>  We recommend that you follow the reported issue for updates and fix notifications, also feel free to add your specific example in there</p>\r\n\r\n\r\nChristophe MOMMER on \u200e11\u200e/\u200e13\u200e/\u200e2017, 01:28 AM (51 days ago): \r\n<p>From my perspective, it seems not be the same issue. I've posted a video attached to this ticket to demonstrate my issue but here's some code :</p>\r\n\r\n```csharp\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        var list = new List<LittleObject>();\r\n        list.Add(new LittleObject { AValue = \"a\" });\r\n\r\n        var firstA = list.FirstOrDefault(o => o.AValue == \"a\");\r\n        if(firstA != null)\r\n        {\r\n            //Extract from here\r\n            bool areEquals(LittleObject a, LittleObject b)\r\n            {\r\n                return a.AValue == b.AValue;\r\n            };\r\n\r\n            var secondA = list.FirstOrDefault(o => areEquals(o, firstA));\r\n            //To here\r\n        }\r\n    }\r\n}\r\n\r\nclass LittleObject\r\n{\r\n    public string AValue { get; set; }\r\n}\r\n```\r\n\r\n<p>When I try to extract what is within the if statement, I get an inconsistent extraction proposed by visual studio (neither list of FirstA are passed as parameters to the new method, which brokes compilation).</p>\r\n<p>Also, please note that it DOES BREAK the compilation (whereas Github issue mention that compilation is not broken). And finally, the roslyn team added the &quot;area-IDE&quot;, which seems to mean that is a visual studio issue instead of roslyn.</p>\r\n<p>Please note I added my example to the Github thread for more informations to roslyn team.</p> \r\n\r\n  ", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24032", "title": "Hard to see cursor when using in-place rename refactoring", "body": "I use dark VS theme (don't know if its relevant)\r\nI press Ctrl+R, Ctrl+R on identifier to start Rename refactoring.\r\nText cursor vanishes.\r\nIt is super annoying because I don't understand what will happen when I press something. It returns after finishing Rename\r\n\r\n![image](https://user-images.githubusercontent.com/1408396/34547571-b1fbd888-f0c1-11e7-91b7-4556355fdc43.png)\r\n\r\nCan you do something about it? It should be easy fix (I hope) and it will dramatically improve my daily usage of VS\r\n\r\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/153970/hard-to-see-cursor-when-using-in-place-rename-refa.html\r\nVSTS ticketId: 527771_\r\n_These are the original issue comments:_\r\n\r\nJinu Joseph [MSFT] on \u200e12\u200e/\u200e3\u200e/\u200e2017, 04:27 AM (31 days ago): <p>We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.</p>\r\n\r\n_These are the original issue solutions:_\r\n(no solutions)\r\n  ", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24031", "title": "VS2017express C#, tabs replaced with spaces", "body": "Hello,\n\nunder the following circumstances, VS2017express replaces tabs with spaces even though I deactivated that feature in the options:\n- I am working on a C# file\n- I am pasting a tab from my clipboard into a line of code, but not at the end, e.g. &quot;int i = 0; // init i&quot;. If I want more space between the command and the comment and I use my tab key, then tabs get inserted properly, but if I put a tab into my clipboard and insert it with Ctrl-V, then ALL tabs get replaced with spaces.\n\nThis problem does not occur in C++ files of the same solution, even though I set the tab configuration identical for all languages.\n\nCheers\nPeter\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/154651/vs2017express-c-tabs-replaced-with-spaces.html\nVSTS ticketId: 528589_\n_These are the original issue comments:_\n\nPeter Meier on \u200e11\u200e/\u200e23\u200e/\u200e2017, 02:27 AM (41 days ago): <p>Also I just found out that if I hit the auto format keys (Ctrl-K, Ctrl-D), all the tabs I inserted between the command and the comment are replaced with spaces again. I searched through Tools/Options/Text Editor/C#/Code Style/Formatting, but I found no way to change this annoying behavior. I don't understand why C# won't let me align my comments the way I want them to be when it's no problem for C++.</p>\n\nJinu Joseph [MSFT] on \u200e12\u200e/\u200e20\u200e/\u200e2017, 02:48 AM (14 days ago): <p>We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.</p>\n\n_These are the original issue solutions:_\n(no solutions)", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24030", "title": "Options ... Naming Style dialog unusable with Dark theme", "body": "When VS is configured to use Dark theme, &quot;Naming Style&quot; dialog is unusable - text is white on light background (yet input boxes have dark background), see screenshot attached.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/155718/options-naming-style-dialog-unusable-with-dark-the.html\nVSTS ticketId: 529630_\n_These are the original issue comments:_\n\nJinu Joseph [MSFT] on \u200e12\u200e/\u200e3\u200e/\u200e2017, 04:48 AM (31 days ago): <p>We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.</p>\n\n_These are the original issue solutions:_\n(no solutions)", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24029", "title": "Line break options ignored in C# editor", "body": "I just noticed that the C# editor is formatting my code with line breaks after curly braces, contrary to my Text Editor/C#/Code Style/Formatting/New Line options settings. This is *extremely* annoying. Appreciate a bug fix ASAP.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/155722/line-break-options-ignored-in-c-editor.html\nVSTS ticketId: 529634_\n_These are the original issue comments:_\n\nJinu Joseph [MSFT] on \u200e11\u200e/\u200e27\u200e/\u200e2017, 03:40 AM (37 days ago): <p>We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.</p>\n\n_These are the original issue solutions:_\n(no solutions)", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24028", "title": "One missing closing bracket creates dozens of errors", "body": "Say I type the following:\r\n\r\n```vb\r\nMessageBox.Show(\"test\r\n```\r\n\r\nNow a huge list of errors will appear in the error list and all code below the above line is marked in red.\r\n\r\nOf course, the closing bracket is still missing, but that should only create one error in the list, not dozens, and dozens of wavy red underlines. \r\n\r\nHowever, on my PC all code below the above line is marked in red and most of the code (but not all) has wavy red lines underneath.\r\n\r\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/157014/one-missing-closing-bracket-creates-dozens-of-erro.html\r\nVSTS ticketId: 530270_\r\n_These are the original issue comments:_\r\n\r\nAgustin Paroli on \u200e11\u200e/\u200e28\u200e/\u200e2017, 02:57 PM (36 days ago): <p>When you forget to put a parenthesis (and also a quote, as in your example), the compiler interprets all the code that follows it as if it should be inside the parenthesis, and as what you put inside the parentheses is not valid in that method / object, many errors will be shown depending on the code that continues it. </p><p>It is not a bug, it is the normal and expected behavior of the IDE.</p>\r\n\r\nMarc Enzler on \u200e11\u200e/\u200e29\u200e/\u200e2017, 02:17 AM (35 days ago): <p>Dear Augustin,</p><p>Thank you for your reply. </p><p>I need to clarifiy: it is not the missing closing bracket that causes the errors but the missing closing quote.</p><p>If I type: </p><p>MessageBox.Show(\"</p><p>the moment I enter the quote dozens of errors appear in the error list and everything below this line gets red. It is very confusing and distracts me massively. After all, I am still typing so it's obvious the statement is uncomplete.</p><p>Please note that I am using Visual Basic, not Java, and in Visual Basic semantics only this one line contains an error, all other lines are perfectly sound.</p><p>I have now checked with my VS2012 installation which I have been using until a few weeks ago, and there the behavior is differently and as I would expect, no error is show as long as I do not move the focus away from the incomplete line and when I do only one error is shown indicating there is something missing on that line.</p><p>If this is not a bug, where might I change this behavior of the error list? It is extremely annoying.</p><p>Thanks!<br></p>\r\n\r\nJinu Joseph [MSFT] on \u200e12\u200e/\u200e3\u200e/\u200e2017, 05:02 AM (31 days ago): <p>We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.</p>\r\n\r\n_These are the original issue solutions:_\r\n(no solutions)\r\n  ", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24027", "title": "Find all references Goto Next/Prev Location doesn't work as excpected", "body": "Hi,\nI think it should work similarly as navigating between the items of a find in files session. After getting the result, toolwindow gets the focus and hittting F8 (Goto next location) should open up the next result's document. The caret is placed where the match is found and it is blinking (got the input focus). Hitting the F8 again would open up the next document with blinking caret etc.\nIn case of find all references after getting the results and hitting F8 VS opens up the corresponding document the current line marker is set also but doesn't get the input focus, the caret is not visible. Repetitively hitting F8 usually gives the same result, sometimes the caret is visible but usually not. It is a bit annoying given it is not clear where the reference was found and no chance to start typing without using the mouse. \nThanks,\nMarcell\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/157226/find-all-references-goto-nextprev-location-doesnt.html\nVSTS ticketId: 530519_\n_These are the original issue comments:_\n\nJinu Joseph [MSFT] on \u200e12\u200e/\u200e3\u200e/\u200e2017, 05:07 AM (31 days ago): <p>We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.</p>\n\nTomas Karban on \u200e12\u200e/\u200e6\u200e/\u200e2017, 06:27 AM (28 days ago): <p>I have the same problem, VS2017 15.5.0 running on Windows 7. After F8 the editor does not have proper focus. I cannot type, but Delete/Backspace work... which is strange. Double-clicking on the item in the result window works as expected -- brings focus to the editor (blinking cursor at the right location).</p>\n\n_These are the original issue solutions:_\n(no solutions)", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23940", "title": "VS2017 crash with :: operator", "body": "I'm attempting to to type in this program. VS 2017 crashes after I type the word `List` in `Col::List`\r\n\r\n```csharp\r\nusing System;\r\nusing Col = System.Collections.Generic;\r\n\r\nnamespace AliasTest\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var list1 = new Col::List<int>\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/155278/vs2017-crash-with-operator.html\r\nVSTS ticketId: 529066_\r\n_These are the original issue comments:_\r\n\r\nMichael Quinlan on \u200e11\u200e/\u200e24\u200e/\u200e2017, 07:17 AM (32 days ago): <p>The code is C#. The problem only happens when I actually type in the code; VS 2017 doesn't crash if I copy-paste the program.</p><p>In Options under Text Editor--&gt;C#--&gt;IntelliSense, I tried disabling 'Show completion list after a character is typed', 'Highlight matching portions of completion list items', and 'Show completion item filters' but the problem still occurred.</p>\r\n\r\nMichael Quinlan on \u200e12\u200e/\u200e5\u200e/\u200e2017, 02:13 PM (20 days ago): <p>Problem still occurs is Visual Studio 15.5.0 (edit to add: Community Edition)</p>\r\n\r\n_These are the original issue solutions:_\r\n(no solutions)", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23939", "title": "blend crash when on foreach", "body": "when a list.ForEach is change to foreach without first clearing the body of the ForEach Blend crashes.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/159058/blend-crash-when-on-foreach.html\nVSTS ticketId: 532392_\n_These are the original issue comments:_\n\nJinu Joseph [MSFT] on \u200e12\u200e/\u200e7\u200e/\u200e2017, 08:26 PM (18 days ago): <p>We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.</p>\n\n_These are the original issue solutions:_\n(no solutions)", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23904", "title": "intellisense is slow or using high cpu in 15.5.1", "body": "editing the code below freeze visual studio 15.5.1.\r\nFor instance, you can try editing the most imbricated lambda, or do F12 on Random type (which is never blue by the way).\r\nCheck cpu, it is around 70% all the time.\r\n\r\n```csharp\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace ConsoleApp3\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var a = new Random().NextDouble() > 0.5 ? false : true;\r\n\r\n            var p1 = a ? new[] { \"o\" } : new[] { \"a\" };\r\n            var p2 = a ? new[] { \"aaao\" } : new[] { \"eaa\" };\r\n            var p3 = a ? new[] { \"oeee\" } : new[] { \"aeee\" };\r\n            var p4 = a ? new[] { \"eeo\" } : new[] { \"aaaa\" };\r\n            var p5 = a ? new[] { \"eo\" } : new[] { \"abb\" };\r\n\r\n            var ololo = p1.Sum(P1 => p2.Sum(P2 => p3.Sum(P3 => p4.Sum(P4 => p5.Sum(P5 => new Random())))));\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/165397/intellisense-is-slow-or-using-high-cpu-in-1551.html\r\nVSTS ticketId: 536573_\r\n_These are the original issue comments:_\r\n\r\nFiona Niu - MSFT on \u200e12\u200e/\u200e11\u200e/\u200e2017, 07:35 PM (9 days ago): <p>Thank you for your feedback! In order for us to investigate this further, could you please give us an ETL trace file so that we can conduct further research?</p><p> </p><p> You are able to get the files with the following steps:</p><p> </p><p>1. Download PerfView from <a target='_blank' href=\"http://www.microsoft.com/en-us/download/details.aspx?id=28567 \" target=\"_blank\"><u>http://www.microsoft.com/en-us/download/details.aspx?id=28567 </u></a> and copy to a temp directory.</p><p> </p><p>2. From an admin command prompt, run the following to start recording:</p><p> </p><p>perfview.exe collect c:\\temp\\ReproTrace.etl -CircularMB:2048 -Merge:true -Zip:true -Providers:641d7f6c-481c-42e8-ab7e-d18dc5e5cb9e,*Microsoft-VisualStudio-Common -ThreadTime -NoV2Rundown</p><p> </p><p>This will launch PerfView UI and start recording automatically. After 3-5 seconds, you can start Visual Studio to reproduce the issue.</p><p> </p><p>3. Once the issue is reproduced, you can click &quot;Stop Collection&quot; on the PerfView UI. It will take a while to process the trace, but at the end there should be a zipped file at c:\\temp\\ReproTrace.etl.zip.</p><p> </p><p>4. Trace will have up to several minutes of information only so it is important to stop recording as soon as the issue is reproduced.</p><p> </p><p>5. Upload your ReproTrace.etl.zip by choosing insert file tag on add comment field then submit after signing in.</p><p>We look forward to hearing from you</p>\r\n\r\nLionel BERTON on \u200e12\u200e/\u200e12\u200e/\u200e2017, 06:04 AM (9 days ago): <p><a target='_blank' href=\"https://developercommunity.visualstudio.com/storage/temp/18796-reprotraceetl.zip\">reprotraceetl.zip</a></p><p>here is the trace</p>\r\n\r\nMarek Sliwa on \u200e12\u200e/\u200e11\u200e/\u200e2017, 08:19 PM (9 days ago): edit an enum, change the value by erasing the part after a dot, then the dot, then type a new fun little dot, and you'd expect intellisense suggest box, instead VS freeses and cpu goes to 100% on one of the cores, occured many times today, before and after 15.1 updatei suggest the visual studio team load a realistic solution and try to use visual studio for a while, clearly this isn't done in past months with these very low quality update releases... lame\r\nSam Harwell [MSFT] on \u200e12\u200e/\u200e12\u200e/\u200e2017, 01:03 PM (9 days ago): <p>Hi Lionel,</p><p><br></p><p>I reviewed the trace you attached previously and found that the UI delays were caused by an extension (Ref12). However, the particular delay revealed by this trace does not explain why you were observing other IntelliSense problems, so I am hoping to get some additional information and see if more than one problem was occurring.</p><p><br></p><p>We recently created the following document to help gather targeted performance information. Note that these steps differ from the ones given previously. In particular, you'll want to wait a few minutes after opening your solution before starting the performance recording in order to focus the measurement on the code completion scenario, without influence from other tasks that only occur shortly after launching Visual Studio.</p><p>https://github.com/dotnet/roslyn/wiki/Reporting-Visual-Studio-crashes-and-performance-issues#performance-issues </p><p><br></p><p>Thank you,</p><p>Sam Harwell</p>\r\n\r\nLionel BERTON on \u200e12\u200e/\u200e13\u200e/\u200e2017, 03:22 AM (8 days ago): In my code, if you edit the line with in the lambda with new Random(), and you type .NextDouble( , in order to try to make the statement correct, then on opening the parenthesis, visual studio freezes for a minute.I have recorded a trace for visual studio, see attached.\r\n_These are the original issue solutions:_\r\n(no solutions)", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23894", "title": "selection doesn't work after deleting a character", "body": "I'm editing text in C# editor.\r\nI have text like `.Constraint(new[] { \"FK_MatchingRule_MatchingProcess\" }, MatchingErrorCode.MatchingProcessDoesNotExist`\r\n\r\n- enter ',' at the end of the line\r\n- remove it with backspace\r\n- press shift and use arrow key down to select text from the line below\r\n\r\nexpected: some text in selection\r\n\r\nwhat I get: selection of text is not enabled at all.\r\n\r\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/165148/selection-doesnt-work-after-deleting-a-character.html\r\nVSTS ticketId: 536457_\r\n_These are the original issue comments:_\r\n\r\nJinu Joseph [MSFT] on \u200e12\u200e/\u200e20\u200e/\u200e2017, 08:11 PM (40 min ago): <p>We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.</p>\r\n\r\n_These are the original issue solutions:_\r\n(no solutions)", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23889", "title": "CSharpRenameTrackingCodeFixProvider throws the System.NullReferenceExcpetion on the solution that contains F# library", "body": "Hi,\n\nI have recorded a screencast that illustrates the issue: https://www.screencast.com/t/z0rn9lvbZMcD\n\nThe probleamatic solution is attached.\n\nStack trace: System.AggregateException : One or more errors occurred. ---&gt; Object reference not set to an instance of an object.\n   at async Microsoft.CodeAnalysis.Editor.Implementation.RenameTracking.RenameTrackingTaggerProvider.RenameTrackingCommitter.RenameSymbolAsync(&lt;Unknown Parameters&gt;)\n   at async Microsoft.CodeAnalysis.Editor.Implementation.RenameTracking.RenameTrackingTaggerProvider.RenameTrackingCodeAction.ComputePreviewOperationsAsync(&lt;Unknown Parameters&gt;)\n   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetPreviewOperationsAsync(&lt;Unknown Parameters&gt;)\n   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.GetPreviewResultAsync(&lt;Unknown Parameters&gt;)\n   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionWithNestedFlavors.&lt;&gt;c__DisplayClass11_0.&lt;GetPreviewAsync&gt;b__0(&lt;Unknown Parameters&gt;)\n   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformFunctionAsync[T](&lt;Unknown Parameters&gt;)\n---&gt; (Inner Exception #0) System.NullReferenceException : Object reference not set to an instance of an object.\n   at async Microsoft.CodeAnalysis.FindSymbols.Finders.NamedTypeSymbolReferenceFinder.DetermineDocumentsToSearchAsync(&lt;Unknown Parameters&gt;)\n   at async Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.CreateProjectToDocumentMapAsync(&lt;Unknown Parameters&gt;)\n   at async Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.FindReferencesAsync(&lt;Unknown Parameters&gt;)\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at async Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.FindReferencesAsync(&lt;Unknown Parameters&gt;)\n   at async Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindRenamableReferencesAsync(&lt;Unknown Parameters&gt;)\n   at async Microsoft.CodeAnalysis.Rename.RenameLocations.AddLocationsReferenceSymbolsAsync(&lt;Unknown Parameters&gt;)\n   at async Microsoft.CodeAnalysis.Rename.RenameLocations.FindAsync(&lt;Unknown Parameters&gt;)\n   at async Microsoft.CodeAnalysis.Rename.Renamer.RenameSymbolAsync(&lt;Unknown Parameters&gt;)\n   at async Microsoft.CodeAnalysis.Editor.Implementation.RenameTracking.RenameTrackingTaggerProvider.RenameTrackingCommitter.RenameSymbolWorkerAsync(&lt;Unknown Parameters&gt;)&lt;---\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/166190/csharprenametrackingcodefixprovider-throws-the-sys.html\nVSTS ticketId: 537049_\n_These are the original issue comments:_\n(no comments)\n_These are the original issue solutions:_\n(no solutions)", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23889/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23887", "title": "VS 2017.15.5.2 crash during 'Rename' operation (of an enum value)", "body": "Hi,\n\nI open a solution with 14 projects (13 C#/ 1 F#, .NET Framework 4.7), go to a file with a enum, press CTRL+R,R to rename an enum value then VS starts thinking and crashes. Callstack from Event Viewer:\n\nApplication: devenv.exe\nFramework Version: v4.0.30319\nDescription: The application requested process termination through System.Environment.FailFast(string message).\nMessage: System.NullReferenceException: Object reference not set to an instance of an object.\n   at Microsoft.CodeAnalysis.Rename.ConflictEngine.ConflictResolver.Session.&lt;FindDocumentsAndPossibleNameConflicts&gt;d__24.MoveNext()\nStack:\n   at System.Environment.FailFast(System.String, System.Exception)\n   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)\n   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;)\n   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.ReportUnlessCanceled(System.Exception)\n   at Microsoft.CodeAnalysis.Rename.ConflictEngine.ConflictResolver+Session+&lt;FindDocumentsAndPossibleNameConflicts&gt;d__24.MoveNext()\n   at Microsoft.CodeAnalysis.Rename.ConflictEngine.ConflictResolver+Session+&lt;FindDocumentsAndPossibleNameConflicts&gt;d__24.MoveNext()\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.Rename.ConflictEngine.ConflictResolver+Session+&lt;FindDocumentsAndPossibleNameConflicts&gt;d__24, Microsoft.CodeAnalysis.Workspaces, Version=2.6.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&lt;FindDocumentsAndPossibleNameConflicts&gt;d__24 ByRef)\n   at Microsoft.CodeAnalysis.Rename.ConflictEngine.ConflictResolver+Session.FindDocumentsAndPossibleNameConflicts()\n   at Microsoft.CodeAnalysis.Rename.ConflictEngine.ConflictResolver+Session+&lt;ResolveConflictsAsync&gt;d__18.MoveNext()\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Start[[Microsoft.CodeAnalysis.Rename.ConflictEngine.ConflictResolver+Session+&lt;ResolveConflictsAsync&gt;d__18, Microsoft.CodeAnalysis.Workspaces, Version=2.6.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&lt;ResolveConflictsAsync&gt;d__18 ByRef)\n   at Microsoft.CodeAnalysis.Rename.ConflictEngine.ConflictResolver+Session.ResolveConflictsAsync()\n   at Microsoft.CodeAnalysis.Rename.ConflictEngine.ConflictResolver.ResolveConflictsAsync(Microsoft.CodeAnalysis.Rename.RenameLocations, System.String, System.String, Microsoft.CodeAnalysis.Options.OptionSet, System.Func`2&lt;System.Collections.Generic.IEnumerable`1&lt;Microsoft.CodeAnalysis.ISymbol&gt;,System.Nullable`1&lt;Boolean&gt;&gt;, System.Threading.CancellationToken)\n   at Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.AbstractEditorInlineRenameService+InlineRenameLocationSet+&lt;GetReplacementsAsync&gt;d__7.MoveNext()\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Start[[Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.AbstractEditorInlineRenameService+InlineRenameLocationSet+&lt;GetReplacementsAsync&gt;d__7, Microsoft.CodeAnalysis.EditorFeatures, Version=2.6.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&lt;GetReplacementsAsync&gt;d__7 ByRef)\n   at Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.AbstractEditorInlineRenameService+InlineRenameLocationSet.GetReplacementsAsync(System.String, Microsoft.CodeAnalysis.Options.OptionSet, System.Threading.CancellationToken)\n   at Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession+&lt;&gt;c__DisplayClass62_0.&lt;UpdateConflictResolutionTask&gt;b__0(System.Threading.Tasks.Task`1&lt;Microsoft.CodeAnalysis.Editor.IInlineRenameLocationSet&gt;)\n   at Roslyn.Utilities.TaskExtensions+&lt;&gt;c__DisplayClass16_0`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].&lt;SafeContinueWithFromAsync&gt;b__0(System.Threading.Tasks.Task)\n   at System.Threading.Tasks.ContinuationResultTaskFromTask`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].InnerInvoke()\n   at System.Threading.Tasks.Task.Execute()\n   at System.Threading.Tasks.Task.ExecutionContextCallback(System.Object)\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)\n   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)\n   at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\n   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/167118/vs-201751-crash-during-rename-operation-of-an-enum.html\nVSTS ticketId: 537912_\n_These are the original issue comments:_\n\nPhillip Carter [MSFT] on 12/16/2017, 02:14 PM (4 days ago): <p>Hello Cyril,</p><p><br>Did you invoke rename on an F# enum or a C# enum? Are the enums consumed by other languages? (e.g., C# enum --&gt; used by F#, or F# enum --&gt; used by C#)</p>\n\nCyril Andreichuk on 12/18/2017, 01:42 AM (2 days ago): <p>hi,</p><p>1) it's C# enum (have you checked the attached files? you can see it there :))</p><p>2) the enum is not used in F# code. F# project references the project with the enum.</p><p>3) the issue can be reproduced on VS 15.5.2</p>\n\nPhillip Carter [MSFT] on 12/18/2017, 08:31 AM (2 days ago): <p>Thank you for the info! I work on the F# team, so I wanted to reach out about this before routing the bug to the appropriate team. It seems our system saw \"F#\" in the report and routed it my direction. I'll direct this to the C# IDE team.</p>\n\n_These are the original issue solutions:_\n(no solutions)", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23887/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23885", "title": "Unable to disable Roslyn lightbulb", "body": "Why is there no option to use visual studio without the additional frills and bells and whistles that can be generalised under the 'Roslyn' category? When looking under Tools &amp; Extensions, the only option provided next to the entries relating to roslyn, is &quot;Uninstall&quot; (I'd expect to see a &quot;Disable&quot; somewhere), which kindly lets you know that everything else relating to C# development will also get removed should I desire to get rid of said component. Oh the number of times I've found myself staring at the uninstall screen longingly... If only RIDER had better web deploy support.\n\n\nSo please give us a way to _disable all_ visual studio suggestions, code fixes, refactorings, etc etc - the &quot;lightbulb&quot; essentially. The only lightbulb I want to see in my VS is the one belonging to ReSharper. \n\n\nThe choice of when we switch to VS tools, and IF we do it at all, should be left up to the developer, instead of being opted into features we haven't asked for, with the expectation that we'd be filing bug reports about things that annoy us - that's just lost productivity, on all ends. \n\nWe already had a perfectly good toolkit called ReSharper. Thanks to these &quot;improvements&quot; to VS, our favourite tool has taken a hit in terms of performance as well as feature development. \n\nOnce more for clarity: stop forcing roslyn &quot;helpers&quot; on me and let me disable that junk!\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/159587/unable-to-disable-roslyn-lightbulb.html\nVSTS ticketId: 532717_\n_These are the original issue comments:_\n\nCheryl Borley (InConsulting Inc.) on \u200e12\u200e/\u200e6\u200e/\u200e2017, 03:32 PM (14 days ago): <p>We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.</p>\n\n_These are the original issue solutions:_\n(no solutions)", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23885/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23884", "title": "editorconfig static rule is applying to const", "body": "I have two rules in my .editorconfig file (that lives in the same folder as the .sln file).  The first rule applies to private static fields and the second rule applies to private fields (with no required modifiers).\n\nWhen creating a private const field in a class I am getting a naming error because it is trying to apply the static naming rule.  It should be skipping that rule because that rule has &quot;required_modifers = static&quot; and this is a const field.\n\nIf I create an additional rule specifically for private const fields and put it before the static rule then everything works.  However this shouldn't be necessary since I want all my private non-static fields to use the same naming convention (so anything non-static should fall past the first rule and be applied by the second rule).\n\nThis issue is similiar to https://developercommunity.visualstudio.com/content/problem/152286/editorconfig-constenum-settings-not-working-in-vis.html which was closed due to being a duplicate.  I think it was incorrectly marked as a duplicate because the &quot;original&quot; report was a rule ordering issue.  In this scenario the rules are ordered correctly, but appear to be applied incorrectly.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/160932/editorconfig-static-rule-is-applying-to-const.html\nVSTS ticketId: 533466_\n_These are the original issue comments:_\n\nJinu Joseph [MSFT] on \u200e12\u200e/\u200e20\u200e/\u200e2017, 06:13 PM (8 min ago): <p>We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.</p>\n\n_These are the original issue solutions:_\n(no solutions)", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23884/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23882", "title": "Inlined variable declaration fails to compile", "body": "I have a routine signature in a different dll that's referenced with an &quot;out&quot; variable.   I declare the varible I want to capture &quot;out' value.   The IDE says I can make that variable an &quot;inline&quot; variable.   When I compile it fails for making it an inline variable.\r\n\r\nEx:\r\n\r\n```csharp\r\nstring errMsg = null;\r\n\r\n if (!TokenService.IsTokenValid(rs, out errMsg))\r\n {\r\n    //works fine.\r\n }\r\n```\r\n\r\nIf I move the variable inline based on recommendation to move it inline, it fails to compile.\r\n\r\n```csharp\r\n if (!TokenService.IsTokenValid(rs, out string errMsg))\r\n{\r\n    //won't compile\r\n}\r\n```\r\n\r\nThis has 2 outcomes - sometimes the error says invalid expression other times it seems to &quot;crash&quot; the compiler.   If you just run the the code it has it didn't compile run currrent version or stop - clicked stop and it displays no errors exists -  restarted visual studio and same result.\r\n\r\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/168115/inlined-variable-declaration-fails-to-compile.html\r\nVSTS ticketId: 539780_\r\n_These are the original issue comments:_\r\n(no comments)\r\n_These are the original issue solutions:_\r\n(no solutions)", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23870", "title": "Error CS0030 Cannot convert type 'object' to 'System.TypedReference'", "body": "<p>I can't compile the following code with latest version VS 2017 build 15.5.0.</p><pre> void MyMethod(object[] objects)\n {\n    TypedReference.SetTypedReference((TypedReference)objects[0], objects[1]);\n }</pre>\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/166353/error-cs0030-cannot-convert-type-object-to-systemt.html\nVSTS ticketId: 537144_\n_These are the original issue comments:_\n(no comments)\n_These are the original issue solutions:_\n(no solutions)", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23870/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23828", "title": "[ComImport] makes parameter list refs optional", "body": "The C# code below unexpectedly compiles instead of giving &quot;Argument &lt;n&gt; must be passed with the 'ref' keyword&quot; errors.  Commenting out the [ComImport] line reinstates the errors.  (VS Pro 2017 v15.4.1)\n\nusing System;\nusing System.Runtime.InteropServices;\n\nnamespace MissingRefsCompilationOddity\n{\n    [ComImport, Guid(&quot;12345678-1234-1234-1234-1234567890ab&quot;)]\n    interface IDC\n    {\n        bool GetRange(ref int min, ref int max);\n    }\n\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            IDC dc = null;\n            int min = 0;\n            int max = 0;\n\n            // why does this line compile?\n            dc.GetRange(min, max);\n\n            dc.GetRange(ref min, ref max);\n        }\n    }\n}\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/137108/comimport-makes-parameter-list-refs-optional.html\nVSTS ticketId: 513888_\n_These are the original issue comments:_\n\nAndy Gocke [MSFT] on 11/6/2017, 07:31 PM (40 days ago): <p>We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.</p>\n\n_These are the original issue solutions:_\n(no solutions)", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23827", "title": "csc.exe crashes on every build request", "body": "Hallo\n\ni have vs2017 enterprise edition installed. Originally I had version 15.1.x which i have updated to 15.4.1.\n\nAt one moment I was not able to run the build anymore. From my perspective I did nothing special, simply requested a build. It happens on each solution I have tried, beginning with big one and finishing on dummy HelloWorld project.\n\nAny suggestions?\n\n1&gt;------ Build started: Project: xyz, Configuration: Debug Any CPU ------\n1&gt;C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\Roslyn\\Microsoft.CSharp.Core.targets(84,5): error MSB6006: &quot;csc.exe&quot; exited with code -532462766.\n========== Build: 0 succeeded, 1 failed, 0 up-to-date, 0 skipped ==========\n\nso far Jakub\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/138035/cscexe-crashes-on-every-build-request.html\nVSTS ticketId: 514556_\n_These are the original issue comments:_\n\nBednarczuk, Jakub on 10/25/2017, 04:17 AM (53 days ago): <p>Hi</p><p>I did repair on the installer. Nothing has changed, incl. the exit code.</p><p>Jakub</p>\n\nBednarczuk, Jakub on 10/25/2017, 05:12 AM (53 days ago): <p>another update:</p><p>starting vs2017, while\nhaving Assembly Binding Log Viewer is activated brings several errors. One  of them is </p><pre>*** Assembly Binder Log Entry  (25.10.2017 @ 13:22:23) ***\n\nThe operation failed.\nBind result: hr = 0x80070002. The system cannot find the file specified.\n\nAssembly manager loaded from:  C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\clr.dll\nRunning under executable  C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\ServiceHub\\Hosts\\ServiceHub.Host.CLR.x86\\ServiceHub.VSDetouredHost.exe\n--- A detailed error log follows. \n\n=== Pre-bind state information ===\nLOG: DisplayName = Microsoft.Build, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n (Fully-specified)\nLOG: Appbase = file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/Common7/\nLOG: Initial PrivatePath = NULL\nLOG: Dynamic Base = NULL\nLOG: Cache Base = NULL\nLOG: AppName = NULL\nCalling assembly : (Unknown).\n===\nLOG: This bind starts in default load context.\nLOG: Using application configuration file: C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\ServiceHub\\Services\\VsixServiceDiscovery\\Microsoft.ServiceHub.VsixServiceDiscovery.dll.config\nLOG: Using host configuration file: \nLOG: Using machine configuration file from C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\config\\machine.config.\nLOG: GAC Lookup was unsuccessful.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/Common7/Microsoft.Build.DLL.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/Common7/Microsoft.Build/Microsoft.Build.DLL.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/Common7/IDE/Microsoft.Build.DLL.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/Common7/IDE/Microsoft.Build/Microsoft.Build.DLL.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/Common7/IDE/PrivateAssemblies/Microsoft.Build.DLL.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/Common7/IDE/PrivateAssemblies/Microsoft.Build/Microsoft.Build.DLL.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/Common7/IDE/PublicAssemblies/Microsoft.Build.DLL.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/Common7/IDE/PublicAssemblies/Microsoft.Build/Microsoft.Build.DLL.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/Common7/ServiceHub/Services/VsixServiceDiscovery/Microsoft.Build.DLL.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/Common7/ServiceHub/Services/VsixServiceDiscovery/Microsoft.Build/Microsoft.Build.DLL.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/Common7/Microsoft.Build.EXE.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/Common7/Microsoft.Build/Microsoft.Build.EXE.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/Common7/IDE/Microsoft.Build.EXE.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/Common7/IDE/Microsoft.Build/Microsoft.Build.EXE.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/Common7/IDE/PrivateAssemblies/Microsoft.Build.EXE.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/Common7/IDE/PrivateAssemblies/Microsoft.Build/Microsoft.Build.EXE.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/Common7/IDE/PublicAssemblies/Microsoft.Build.EXE.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/Common7/IDE/PublicAssemblies/Microsoft.Build/Microsoft.Build.EXE.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/Common7/ServiceHub/Services/VsixServiceDiscovery/Microsoft.Build.EXE.\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/Common7/ServiceHub/Services/VsixServiceDiscovery/Microsoft.Build/Microsoft.Build.EXE.\nLOG: All probing URLs attempted and failed.</pre><p>The available\nversion within \u201cC:\\Program Files (x86)\\Microsoft Visual\nStudio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\u201d is 15.1.0.0</p><p>The path \u201cC:\\Program\nFiles (x86)\\MSBuild\\15.0\u201d does not contain dll at all.</p><p>I think\nchanging the version being lookedup to the newer one might  solve the issue. However the question is,\nwhere? </p><p>Jakub</p>\n\nBednarczuk, Jakub on 10/25/2017, 07:30 AM (53 days ago): <p>windows logged two events stated as error.</p><p>However such knowledge does not solve the issue ...</p><p>1) .Net Runtime (source)     EventId: 1026</p><p>Application: csc.exe\nFramework Version: v4.0.30319\nDescription: The process was terminated due to an unhandled exception.\nException Info: System.MissingMethodException\n   at Microsoft.CodeAnalysis.RuleSetProcessor.LoadFromFile(System.String)\n   at Microsoft.CodeAnalysis.RuleSet.LoadEffectiveRuleSetFromFile(System.String)\n   at Microsoft.CodeAnalysis.RuleSet.GetDiagnosticOptionsFromRulesetFile(System.Collections.Generic.Dictionary`2&lt;System.String,Microsoft.CodeAnalysis.ReportDiagnostic&gt;, System.String, System.Collections.Generic.IList`1&lt;Microsoft.CodeAnalysis.Diagnostic&gt;, Microsoft.CodeAnalysis.CommonMessageProvider)\n   at Microsoft.CodeAnalysis.CSharp.CSharpCommandLineParser.Parse(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;, System.String, System.String, System.String)\n   at Microsoft.CodeAnalysis.CommonCompiler..ctor(Microsoft.CodeAnalysis.CommandLineParser, System.String, System.String[], Microsoft.CodeAnalysis.BuildPaths, System.String, Microsoft.CodeAnalysis.IAnalyzerAssemblyLoader)\n   at Microsoft.CodeAnalysis.CSharp.CSharpCompiler..ctor(Microsoft.CodeAnalysis.CSharp.CSharpCommandLineParser, System.String, System.String[], Microsoft.CodeAnalysis.BuildPaths, System.String, Microsoft.CodeAnalysis.IAnalyzerAssemblyLoader)\n   at Microsoft.CodeAnalysis.CSharp.CommandLine.Csc.Run(System.String[], Microsoft.CodeAnalysis.BuildPaths, System.IO.TextWriter, Microsoft.CodeAnalysis.IAnalyzerAssemblyLoader)\n   at Microsoft.CodeAnalysis.CommandLine.DesktopBuildClient.RunLocalCompilation(System.String[], Microsoft.CodeAnalysis.BuildPaths, System.IO.TextWriter)\n   at Microsoft.CodeAnalysis.CommandLine.BuildClient.RunCompilation(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;, Microsoft.CodeAnalysis.BuildPaths, System.IO.TextWriter)\n   at Microsoft.CodeAnalysis.CommandLine.DesktopBuildClient.Run(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;, Microsoft.CodeAnalysis.CommandLine.RequestLanguage, Microsoft.CodeAnalysis.CommandLine.CompileFunc, Microsoft.CodeAnalysis.IAnalyzerAssemblyLoader)\n   at Microsoft.CodeAnalysis.CSharp.CommandLine.Program.Main(System.String[])</p><p>2)  Application Error     EventId 1000</p><p>Faulting application name: csc.exe, version: 2.4.0.62216, time stamp: 0xa5031ca8\nFaulting module name: KERNELBASE.dll, version: 10.0.14393.1198, time stamp: 0x5902808f\nException code: 0xe0434352\nFault offset: 0x0000000000033c58\nFaulting process id: 0x206c\nFaulting application start time: 0x01d34d9a01586401\nFaulting application path: C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\Roslyn\\csc.exe\nFaulting module path: C:\\WINDOWS\\System32\\KERNELBASE.dll\nReport Id: 99fc7a86-3dab-4147-bb4f-ce0969606479\nFaulting package full name: \nFaulting package-relative application ID: </p>\n\nAndy Gocke [MSFT] on 11/6/2017, 06:36 PM (41 days ago): <p>Thank you for your feedback! For us to investigate this further, could you please provide the file versions of Microsoft.CodeAnalysis.dll and Microsoft.CodeAnalysis.CSharp.dll in C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\Roslyn?  We look forward to hearing from you!</p>\n\nAndy Gocke [MSFT] on 12/8/2017, 00:21 AM (9 days ago): <p>Sorry for the delay Jakob. This is very strange. It seems likely to be mismatched or corrupted binaries, but the obvious ones seem OK. Could you capture a dump of the crash using the instructions here: https://msdn.microsoft.com/en-us/library/windows/desktop/bb787181(v=vs.85).aspx ? That should contain a list of all the loaded modules and their exact versions, so it should be simpler to isolate which file is missing or corrupted.</p>\n\nRuben Barbaro on 12/11/2017, 04:51 AM (6 days ago): <p>Hi </p><p>Having the same error on my project.</p><p> \nBefore csc.exe crashes the VBCSCompiler.exe crashes also.</p><p>Faulting application name: csc.exe, version: 2.6.0.62329, time stamp: 0xbc629314 Faulting module name: unknown, version: 0.0.0.0, time stamp: 0x00000000 Exception code: 0x80131623 Fault offset: 0x00007ff89d30e709 Faulting process id: 0x5628 Faulting application start time: 0x01d3727502b59777 Faulting application path: C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\15.0\\Bin\\Roslyn\\csc.exe Faulting module path: unknown Report Id: dfe09e41-76a1-4512-aba7-71772d8f9d5d Faulting package full name: Faulting package-relative application</p><p>  \nID: Application: csc.exe Framework Version: v4.0.30319 Description: The application requested process termination through System.Environment.FailFast(string message). Message: System.NullReferenceException: Object reference not set to an instance of an object. at Microsoft.CodeAnalysis.CSharp.OverloadResolutionResult`1.HadLambdaConversionError(DiagnosticBag diagnostics, AnalyzedArguments arguments) at Microsoft.CodeAnalysis.CSharp.OverloadResolutionResult`1.ReportDiagnostics[T](Binder binder, Location location, DiagnosticBag diagnostics, String name, BoundExpression receiver, AnalyzedArguments arguments, ImmutableArray`1 memberGroup, NamedTypeSymbol typeContainingConstructor, NamedTypeSymbol delegateTypeBeingInvoked, CSharpSyntaxNode queryClause, Boolean isMethodGroupConversion) at Microsoft.CodeAnalysis.CSharp.Conversions.ReportDelegateMethodGroupDiagnostics(Binder binder, BoundMethodGroup expr, TypeSymbol targetType, DiagnosticBag diagnostics) at Microsoft.CodeAnalysis.CSharp.Binder.GenerateImplicitConversionError(DiagnosticBag diagnostics, SyntaxNode syntax, Conversion conversion, BoundExpression operand, TypeSymbol targetType) at Microsoft.CodeAnalysis.CSharp.Binder.CreateReturnConversion(SyntaxNode syntax, DiagnosticBag diagnostics, BoundExpression argument, RefKind returnRefKind, TypeSymbol returnType) at Microsoft.CodeAnalysis.CSharp.Binder.CreateBlockFromExpression(CSharpSyntaxNode node, ImmutableArray`1 locals, RefKind refKind, BoundExpression expression, ExpressionSyntax expressionSyntax, DiagnosticBag diagnostics) at Microsoft.CodeAnalysis.CSharp.Binder.BindLambdaExpressionAsBlock(ExpressionSyntax body, DiagnosticBag diagnostics) at Microsoft.CodeAnalysis.CSharp.UnboundLambdaState.ReallyBind(NamedTypeSymbol delegateType) at Microsoft.CodeAnalysis.CSharp.UnboundLambdaState.Bind(NamedTypeSymbol delegateType) at Microsoft.CodeAnalysis.CSharp.ConversionsBase.IsAnonymousFunctionCompatibleWithDelegate(UnboundLambda anonymousFunction, TypeSymbol type) at Microsoft.CodeAnalysis.CSharp.ConversionsBase.IsAnonymousFunctionCompatibleWithExpressionTree(UnboundLambda anonymousFunction, NamedTypeSymbol type) at Microsoft.CodeAnalysis.CSharp.ConversionsBase.HasAnonymousFunctionConversion(BoundExpression source, TypeSymbol destination) at Microsoft.CodeAnalysis.CSharp.ConversionsBase.ClassifyImplicitBuiltInConversionFromExpression(BoundExpression sourceExpression, TypeSymbol source, TypeSymbol destination, HashSet`1& useSiteDiagnostics) at Microsoft.CodeAnalysis.CSharp.ConversionsBase.ClassifyImplicitConversionFromExpression(BoundExpression sourceExpression, TypeSymbol destination, HashSet`1& useSiteDiagnostics) at Microsoft.CodeAnalysis.CSharp.OverloadResolution.IsApplicable(Symbol candidate, EffectiveParameters parameters, AnalyzedArguments arguments, ImmutableArray`1 argsToParameters, Boolean isVararg, Boolean hasAnyRefOmittedArgument, Boolean ignoreOpenTypes, Boolean completeResults, HashSet`1& useSiteDiagnostics) at Microsoft.CodeAnalysis.CSharp.OverloadResolution.IsApplicable[TMember](TMember member, TMember leastOverriddenMember, ArrayBuilder`1 typeArgumentsBuilder, AnalyzedArguments arguments, EffectiveParameters originalEffectiveParameters, EffectiveParameters constructedEffectiveParameters, ImmutableArray`1 argsToParamsMap, Boolean hasAnyRefOmittedArgument, Boolean inferWithDynamic, Boolean completeResults, HashSet`1& useSiteDiagnostics) at Microsoft.CodeAnalysis.CSharp.OverloadResolution.IsMemberApplicableInNormalForm[TMember](TMember member, TMember leastOverriddenMember, ArrayBuilder`1 typeArguments, AnalyzedArguments arguments, Boolean isMethodGroupConversion, Boolean allowRefOmittedArguments, Boolean inferWithDynamic, Boolean completeResults, HashSet`1& useSiteDiagnostics) at Microsoft.CodeAnalysis.CSharp.OverloadResolution.AddMemberToCandidateSet[TMember](TMember member, ArrayBuilder`1 results, ArrayBuilder`1 members, ArrayBuilder`1 typeArguments, AnalyzedArguments arguments, Boolean completeResults, Boolean isMethodGroupConversion, Boolean allowRefOmittedArguments, Dictionary`2 containingTypeMapOpt, Boolean inferWithDynamic, HashSet`1& useSiteDiagnostics, Boolean allowUnexpandedForm) at Microsoft.CodeAnalysis.CSharp.OverloadResolution.PerformMemberOverloadResolution[TMember](ArrayBuilder`1 results, ArrayBuilder`1 members, ArrayBuilder`1 typeArguments, AnalyzedArguments arguments, Boolean completeResults, Boolean isMethodGroupConversion, Boolean allowRefOmittedArguments, HashSet`1& useSiteDiagnostics, Boolean inferWithDynamic, Boolean allowUnexpandedForm) at Microsoft.CodeAnalysis.CSharp.Binder.ResolveDefaultMethodGroup(BoundMethodGroup node, AnalyzedArguments analyzedArguments, Boolean isMethodGroupConversion, HashSet`1& useSiteDiagnostics, Boolean inferWithDynamic, Boolean allowUnexpandedForm) at Microsoft.CodeAnalysis.CSharp.Binder.ResolveMethodGroupInternal(BoundMethodGroup methodGroup, SyntaxNode expression, String methodName, AnalyzedArguments analyzedArguments, Boolean isMethodGroupConversion, HashSet`1& useSiteDiagnostics, Boolean inferWithDynamic, Boolean allowUnexpandedForm) at Microsoft.CodeAnalysis.CSharp.Binder.ResolveMethodGroup(BoundMethodGroup node, SyntaxNode expression, String methodName, AnalyzedArguments analyzedArguments, Boolean isMethodGroupConversion, HashSet`1& useSiteDiagnostics, Boolean inferWithDynamic, Boolean allowUnexpandedForm) at Microsoft.CodeAnalysis.CSharp.Binder.BindMethodGroupInvocation(SyntaxNode syntax, SyntaxNode expression, String methodName, BoundMethodGroup methodGroup, AnalyzedArguments analyzedArguments, DiagnosticBag diagnostics, CSharpSyntaxNode queryClause, Boolean allowUnexpandedForm) at Microsoft.CodeAnalysis.CSharp.Binder.BindInvocationExpression(SyntaxNode node, SyntaxNode expression, String methodName, BoundExpression boundExpression, AnalyzedArguments analyzedArguments, DiagnosticBag diagnostics, CSharpSyntaxNode queryClause, Boolean allowUnexpandedForm) at Microsoft.CodeAnalysis.CSharp.Binder.BindInvocationExpression(InvocationExpressionSyntax node, DiagnosticBag diagnostics) at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed) at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed) at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed) at Microsoft.CodeAnalysis.CSharp.Binder.BindArgumentExpression(DiagnosticBag diagnostics, ExpressionSyntax argumentExpression, RefKind refKind, Boolean allowArglist) at Microsoft.CodeAnalysis.CSharp.Binder.BindArgumentAndName(AnalyzedArguments result, DiagnosticBag diagnostics, Boolean& hadError, Boolean& hadLangVersionError, ArgumentSyntax argumentSyntax, Boolean allowArglist, Boolean isDelegateCreation) at Microsoft.CodeAnalysis.CSharp.Binder.BindInvocationExpression(InvocationExpressionSyntax node, DiagnosticBag diagnostics) at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed) at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed) at Microsoft.CodeAnalysis.CSharp.Binder.BindInferredVariableInitializer(DiagnosticBag diagnostics, ExpressionSyntax initializer, BindValueKind valueKind, RefKind refKind, CSharpSyntaxNode errorSyntax) at Microsoft.CodeAnalysis.CSharp.Binder.BindVariableDeclaration(SourceLocalSymbol localSymbol, LocalDeclarationKind kind, Boolean isVar, VariableDeclaratorSyntax declarator, TypeSyntax typeSyntax, TypeSymbol declTypeOpt, AliasSymbol aliasOpt, DiagnosticBag diagnostics, CSharpSyntaxNode associatedSyntaxNode) at Microsoft.CodeAnalysis.CSharp.Binder.BindDeclarationStatementParts(LocalDeclarationStatementSyntax node, DiagnosticBag diagnostics) at Microsoft.CodeAnalysis.CSharp.Binder.BindStatement(StatementSyntax node, DiagnosticBag diagnostics) at Microsoft.CodeAnalysis.CSharp.Binder.BindBlockParts(BlockSyntax node, DiagnosticBag diagnostics) at Microsoft.CodeAnalysis.CSharp.Binder.BindStatement(StatementSyntax node, DiagnosticBag diagnostics) at Microsoft.CodeAnalysis.CSharp.Binder.BindPossibleEmbeddedStatement(StatementSyntax node, DiagnosticBag diagnostics) at Microsoft.CodeAnalysis.CSharp.UsingStatementBinder.BindUsingStatementParts(DiagnosticBag diagnostics, Binder originalBinder) at Microsoft.CodeAnalysis.CSharp.Binder.BindStatement(StatementSyntax node, DiagnosticBag diagnostics) at Microsoft.CodeAnalysis.CSharp.Binder.BindBlockParts(BlockSyntax node, DiagnosticBag diagnostics) at Microsoft.CodeAnalysis.CSharp.Binder.BindStatement(StatementSyntax node, DiagnosticBag diagnostics) at Microsoft.CodeAnalysis.CSharp.Binder.BindPossibleEmbeddedStatement(StatementSyntax node, DiagnosticBag diagnostics) at Microsoft.CodeAnalysis.CSharp.Binder.BindIfStatement(IfStatementSyntax node, DiagnosticBag diagnostics) at Microsoft.CodeAnalysis.CSharp.Binder....</p>\n\n_These are the original issue solutions:_\n\nBednarczuk, Jakub solved on 11/7/2017, 00:25 AM (40 days ago), 0 votes: <p>Andy</p><p>thank you for the reply.</p><p>Version of these two files is: 2.4.0.62216</p>\n\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Joe4evr": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24361", "title": "[Proposal][IDE] 'Extract Interface' options for property extraction", "body": "Oftentimes, a domain is modeled using POCOs with public settable properties, as that is (AFAIK) what most major serialization frameworks (JSON.NET, EF, etc.) primarily expect to use to actually fill in the data. If you started off from this angle and want the rest of your code to see the objects as read-only, you can have VS generate interfaces for you, but then you'd have to remove all the setters manually (which can be mitigated, but it still feels like a chore).\r\n\r\nIf the 'Extract Interface' dialog had an option to take only the property getters (and while I'm at it, option 3: take only the setters to make a write-only interface), then it could save a lot of hassle.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24361/reactions", "total_count": 6, "+1": 6, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "KirillOsenkov": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24360", "title": "Add -skipApplyOptimizations to build.cmd", "body": "Currently when using build.cmd it doesn't seem possible to pass /p:SkipApplyOptimizations=true to turn off IBCMerge.\r\n\r\nIt would be nice for local builds that emulate official builds.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24274", "title": "Need fine-granular Cancellation in FindSymbols.DependentTypeFinder", "body": "**Version Used**: \r\naa51be5b9703a8d4acbcd4f444678d5e5f99ab2a\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Use the IDE with first-chance exceptions enabled\r\n\r\nI see a whole lot of TaskCanceledExceptions originating in FindSymbols. It seems that this codepath doesn't proactively check the cancellationToken, which results in basically still doing the bulk of the work as well as throwing hundreds of exceptions along the way.\r\n\r\nStack:\r\n\r\n```\r\n \tSystem.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess Line 176\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification Line 146\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.ConfiguredTaskAwaitable<System.__Canon>.ConfiguredTaskAwaiter.GetResult Line 530\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex.GetIndexWorkerAsync Line 75\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex.GetIndexAsync Line 61\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.Shared.Extensions.DocumentExtensions.GetSyntaxTreeIndexAsync Line 173\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.FindSymbols.DependentTypeFinder.FindImmediatelyInheritingTypesInDocumentAsync Line 625\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.FindSymbols.DependentTypeFinder.AddSourceTypesInProjectAsync.AnonymousMethod__1 Line 565\tC#\tSymbols loaded.\r\n \tSystem.Linq.Enumerable.CombineSelectors.AnonymousMethod__0 Line 66\tC#\tSymbols loaded.\r\n \tSystem.Linq.Enumerable.WhereSelectEnumerableIterator<Microsoft.CodeAnalysis.DocumentId, System.Threading.Tasks.Task<System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.FindSymbols.SymbolAndProjectId<Microsoft.CodeAnalysis.INamedTypeSymbol>>>>.MoveNext Line 399\tC#\tSymbols loaded.\r\n \tSystem.Linq.Buffer<System.Threading.Tasks.Task<System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.FindSymbols.SymbolAndProjectId<Microsoft.CodeAnalysis.INamedTypeSymbol>>>>.Buffer Line 2672\tC#\tSymbols loaded.\r\n \tSystem.Linq.Enumerable.ToArray<System.Threading.Tasks.Task<System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.FindSymbols.SymbolAndProjectId<Microsoft.CodeAnalysis.INamedTypeSymbol>>>> Line 944\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.FindSymbols.DependentTypeFinder.AddSourceTypesInProjectAsync Line 565\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.FindSymbols.DependentTypeFinder.FindTypesInProjectAsync Line 281\tC#\tSymbols loaded.\r\n>\tMicrosoft.CodeAnalysis.FindSymbols.DependentTypeFinder.FindTypesAsync Line 211\tC#\tSymbols loaded.\r\n \t[Resuming Async Method]\t\tAnnotated Frame\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext Line 1090\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.RunInternal Line 954\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.Run Line 902\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run Line 1070\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.OutputAsyncCausalityEvents.AnonymousMethod__0 Line 977\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.TaskAwaiter.OutputWaitEtwEvents.AnonymousMethod__0 Line 288\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction Line 810\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishContinuations Line 3617\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishStageThree Line 2363\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task<System.Threading.Tasks.VoidTaskResult>.TrySetResult Line 490\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder<System.Threading.Tasks.VoidTaskResult>.SetResult Line 603\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult Line 379\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.FindSymbols.DependentTypeFinder.FindTypesInProjectAsync Line 306\tC#\tNon-user code. Symbols loaded.\r\n \t[Resuming Async Method]\t\tAnnotated Frame\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext Line 1090\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.RunInternal Line 954\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.Run Line 902\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run Line 1070\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.OutputAsyncCausalityEvents.AnonymousMethod__0 Line 977\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.TaskAwaiter.OutputWaitEtwEvents.AnonymousMethod__0 Line 288\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction Line 810\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishContinuations Line 3617\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishStageThree Line 2363\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task<System.Threading.Tasks.VoidTaskResult>.TrySetResult Line 490\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder<System.Threading.Tasks.VoidTaskResult>.SetResult Line 603\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult Line 379\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.FindSymbols.DependentTypeFinder.AddSourceTypesInProjectAsync Line 595\tC#\tNon-user code. Symbols loaded.\r\n \t[Resuming Async Method]\t\tAnnotated Frame\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext Line 1090\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.RunInternal Line 954\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.Run Line 902\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run Line 1070\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.OutputAsyncCausalityEvents.AnonymousMethod__0 Line 977\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.TaskAwaiter.OutputWaitEtwEvents.AnonymousMethod__0 Line 288\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction Line 810\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishContinuations Line 3617\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishStageThree Line 2363\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task<System.__Canon>.TrySetResult Line 490\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.WhenAllPromise<System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.FindSymbols.SymbolAndProjectId<Microsoft.CodeAnalysis.INamedTypeSymbol>>>.Invoke Line 6435\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishContinuations Line 3633\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishStageThree Line 2363\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task<System.__Canon>.TrySetResult Line 490\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder<System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.FindSymbols.SymbolAndProjectId<Microsoft.CodeAnalysis.INamedTypeSymbol>>>.SetResult Line 603\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.FindSymbols.DependentTypeFinder.FindImmediatelyInheritingTypesInDocumentAsync Line 639\tC#\tNon-user code. Symbols loaded.\r\n \t[Resuming Async Method]\t\tAnnotated Frame\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext Line 1090\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.RunInternal Line 954\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.Run Line 902\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run Line 1070\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.OutputAsyncCausalityEvents.AnonymousMethod__0 Line 977\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.TaskAwaiter.OutputWaitEtwEvents.AnonymousMethod__0 Line 288\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction Line 810\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishContinuations Line 3617\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishStageThree Line 2363\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task<System.__Canon>.TrySetResult Line 490\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder<Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex>.SetResult Line 603\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex.GetIndexAsync Line 69\tC#\tNon-user code. Symbols loaded.\r\n \t[Resuming Async Method]\t\tAnnotated Frame\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext Line 1090\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.RunInternal Line 954\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.Run Line 902\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run Line 1070\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.OutputAsyncCausalityEvents.AnonymousMethod__0 Line 977\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.TaskAwaiter.OutputWaitEtwEvents.AnonymousMethod__0 Line 288\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction Line 810\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishContinuations Line 3617\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishStageThree Line 2363\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task<System.__Canon>.TrySetResult Line 490\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder<Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex>.SetResult Line 603\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex.GetIndexWorkerAsync Line 101\tC#\tNon-user code. Symbols loaded.\r\n \t[Resuming Async Method]\t\tAnnotated Frame\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext Line 1090\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.RunInternal Line 954\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.Run Line 902\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run Line 1070\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.OutputAsyncCausalityEvents.AnonymousMethod__0 Line 977\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.TaskAwaiter.OutputWaitEtwEvents.AnonymousMethod__0 Line 288\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction Line 810\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishContinuations Line 3617\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishStageThree Line 2363\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task<System.__Canon>.TrySetResult Line 490\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder<Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex>.SetResult Line 603\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex.CreateIndexAsync Line 186\tC#\tNon-user code. Symbols loaded.\r\n \t[Resuming Async Method]\t\tAnnotated Frame\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext Line 1090\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.RunInternal Line 954\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.Run Line 902\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run Line 1070\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.OutputAsyncCausalityEvents.AnonymousMethod__0 Line 977\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.TaskAwaiter.OutputWaitEtwEvents.AnonymousMethod__0 Line 288\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction Line 810\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishContinuations Line 3617\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishStageThree Line 2363\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task<System.__Canon>.TrySetResult Line 490\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder<Microsoft.CodeAnalysis.SyntaxNode>.SetResult Line 603\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.Document.GetSyntaxRootAsync Line 218\tC#\tNon-user code. Symbols loaded.\r\n \t[Resuming Async Method]\t\tAnnotated Frame\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext Line 1090\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.RunInternal Line 954\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.Run Line 902\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run Line 1070\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.OutputAsyncCausalityEvents.AnonymousMethod__0 Line 977\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.TaskAwaiter.OutputWaitEtwEvents.AnonymousMethod__0 Line 288\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction Line 810\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishContinuations Line 3617\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishStageThree Line 2363\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task<System.__Canon>.TrySetResult Line 490\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder<Microsoft.CodeAnalysis.SyntaxNode>.SetResult Line 603\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetRootAsyncCore Line 718\tC#\tNon-user code. Symbols loaded.\r\n \t[Resuming Async Method]\t\tAnnotated Frame\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext Line 1090\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.RunInternal Line 954\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.Run Line 902\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run Line 1070\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.OutputAsyncCausalityEvents.AnonymousMethod__0 Line 977\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.TaskAwaiter.OutputWaitEtwEvents.AnonymousMethod__0 Line 288\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction Line 810\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishContinuations Line 3617\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishStageThree Line 2363\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task<System.__Canon>.TrySetResult Line 490\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder<Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode>.SetResult Line 603\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.CSharp.CSharpSyntaxTreeFactoryServiceFactory.CSharpSyntaxTreeFactoryService.RecoverableSyntaxTree.GetRootAsync Line 112\tC#\tNon-user code. Symbols loaded.\r\n \t[Resuming Async Method]\t\tAnnotated Frame\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext Line 1090\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.RunInternal Line 954\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.Run Line 902\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run Line 1070\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.OutputAsyncCausalityEvents.AnonymousMethod__0 Line 977\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.TaskAwaiter.OutputWaitEtwEvents.AnonymousMethod__0 Line 288\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction Line 810\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishContinuations Line 3617\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task.FinishStageThree Line 2363\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.Task<System.__Canon>.TrySetResult Line 490\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder<Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax>.SetResult Line 603\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.Host.RecoverableWeakValueSource<Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax>.GetValueAsync Line 110\tC#\tNon-user code. Symbols loaded.\r\n \t[Resuming Async Method]\t\tAnnotated Frame\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext Line 1090\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.RunInternal Line 954\tC#\tSymbols loaded.\r\n \tSystem.Threading.ExecutionContext.Run Line 902\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run Line 1070\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.OutputAsyncCausalityEvents.AnonymousMethod__0 Line 977\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.TaskAwaiter.OutputWaitEtwEvents.AnonymousMethod__0 Line 288\tC#\tSymbols loaded.\r\n \tSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ContinuationWrapper.Invoke Line 1123\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.AwaitTaskContinuation.ExecuteWorkItemHelper Line 681\tC#\tSymbols loaded.\r\n \tSystem.Threading.Tasks.AwaitTaskContinuation.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem Line 715\tC#\tSymbols loaded.\r\n \tSystem.Threading.ThreadPoolWorkQueue.Dispatch Line 820\tC#\tSymbols loaded.\r\n \tSystem.Threading._ThreadPoolWaitCallback.PerformWaitCallback Line 1161\tC#\tSymbols loaded.\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24234", "title": "Issue a warning when a field initializer is used with [ThreadStatic]", "body": "C# compiler should warn if a field initializer is used with [ThreadStatic]. I think this is almost always a bug - I can't think of a scenario where this would be desired.\r\n\r\nThe initializer will run only once per appdomain, and not per thread (as a novice might expect). For all other threads the field will be initialized with null instead.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24218", "title": "Workspace: investigate and design multiple solutions side-by-side", "body": "MonoDevelop/VSMac can open more than one solution side-by-side. Potentially it would be possible to rewire references across solutions to be ProjectReferences.\r\n\r\nWe should consider a design where more than one solution can be added to the workspace at a given time. I'm not saying that CurrentSolution should become CurrentSolutions, but just the AddSolution/RemoveSolution/ReloadSolution parts potentially.\r\n\r\nI understand it would be hard to break the Workspace.CurrentSolution API, but maybe we could investigate:\r\n1. having more than one solutions, and have a designated \"current\" one?\r\n2. merge multiple solutions into a single logical CurrentSolution, basically just taking the projects from all opened solutions and merging them into one?\r\n\r\nThis would greatly help with current problems such as https://github.com/mono/monodevelop/issues/3517#issuecomment-357377904", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24162", "title": "Properly declare NuGet dependencies on Humanizer and ICSharpCode.Decompiler", "body": "**Version Used**: \r\n2.7.0-beta3-62509-03\r\n\r\nI'm looking at this family of NuGets and I don't see a dependency on Humanizer and ICSharpCode.Decompiler. These need to be explicitly declared on the Roslyn NuGet packages that require them (EditorFeatures?)", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24061", "title": "Typo in build.cmd options", "body": "1. Clone Roslyn master\r\n2. build.cmd /?\r\n\r\n```\r\nSpecial Test options\r\n  -testBuildCorrectness     Run build correctness tests\r\n  -testDeterminism          Run determinism tests\r\n  -testPerfCorrectness      Run perf correctness tests\r\n  -testPerfCorrectness      Run perf tests\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24061/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23959", "title": "Improvements to Roslyn command-line build experience", "body": "- [ ] If one forgot to run Restore.cmd before build, detect that and print an error message: \"You need to restore before building\"\r\n- [ ] If running Build.cmd from Developer Command Prompt, print a yellow warning: \"WARNING: you are building from a Developer Command Prompt. We are bypassing isolated reproducible build and using the MSBuild and SDK from your command prompt instead. This may fail and is unsupported. Use a regular command prompt for a reliable reproducible build.\"\r\n- [ ] Build.cmd should support a command-line argument to force reproducible build even if in Dev command prompt: `-ignoreDevCommandPrompt`", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23816", "title": "StrongName Signing: consider supporting SHA256 (and other algorithms?)", "body": "See details here:\r\nhttps://stackoverflow.com/questions/18972500/strongnaming-with-internalsvisibleto-tag-fails-when-sha256-used\r\n\r\nIf you've produced the public key from the private key using `sha256` as opposed to the default `sha1` then signing using that public key would still generate the public key token as if the algorithm was `sha1`. It would be a different public key token than you get if you sign with the private key.\r\n\r\nSteps:\r\n\r\n    sn -k private.snk\r\n    sn -p private.snk public.snk sha256\r\n    sn -tp public.snk    \r\n    csc 1.cs /keyfile:public.snk /publicsign /t:library  // produces public key token: 3a10ad4139d0ea87\r\n    csc 1.cs /keyfile:private.snk /t:library  // produces public key token: 95acece73373d504\r\n\r\nExpected: \r\nThere must be a way to specify the hash algorithm when signing with private.snk so that signing with the private.snk or public.snk produces identical public key token.\r\n\r\nFrom wincrypt.h:\r\n\r\n    // Hash sub ids\r\n    #define ALG_SID_SHA                     4\r\n    #define ALG_SID_SHA1                    4\r\n    ...\r\n    #define ALG_SID_SHA_256                 12\r\n    #define ALG_SID_SHA_384                 13\r\n    #define ALG_SID_SHA_512                 14\r\n\r\nhttp://source.roslyn.io/#Microsoft.CodeAnalysis/StrongName/CryptoBlobParser.cs,48\r\nhttp://source.roslyn.io/#Microsoft.CodeAnalysis/StrongName/CryptoBlobParser.cs,24\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tmat": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24357", "title": "Assertion failed: in CodeModel.CSharpCodeModelService.CodeModelEventCollector", "body": "**Version Used**: \r\n\r\nPrivate build.\r\n\r\n```\r\n---------------------------\r\nAssertion Failed: Abort=Quit, Retry=Debug, Ignore=Continue\r\n---------------------------\r\nUnknown kind: TupleType\r\n   at Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel.CSharpCodeModelService.CodeModelEventCollector.CompareTypes(TypeSyntax oldType, TypeSyntax newType) in C:\\R0\\src\\VisualStudio\\CSharp\\Impl\\CodeModel\\CSharpCodeModelService.CodeModelEventCollector.cs:line 828\r\n\r\n   at Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel.CSharpCodeModelService.CodeModelEventCollector.CompareNames(NameSyntax oldName, NameSyntax newName) in C:\\R0\\src\\VisualStudio\\CSharp\\Impl\\CodeModel\\CSharpCodeModelService.CodeModelEventCollector.cs:line 758\r\n\r\n   at Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel.CSharpCodeModelService.CodeModelEventCollector.CompareTypes(TypeSyntax oldType, TypeSyntax newType) in C:\\R0\\src\\VisualStudio\\CSharp\\Impl\\CodeModel\\CSharpCodeModelService.CodeModelEventCollector.cs:line 825\r\n\r\n   at Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel.CSharpCodeModelService.CodeModelEventCollector.CompareMethodDeclarations(BaseMethodDeclarationSyntax oldMethod, BaseMe......\r\n\r\n<truncated>\r\n---------------------------\r\nAbort   Retry   Ignore   \r\n---------------------------\r\n```\r\n\r\nMemory dump:\r\n%internal_share%\\public\\tomat\\Roslyn24357", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24351", "title": "Assertion in EnsureIsReadOnlyAttributeExists during rename", "body": "**Version Used**: \r\n\r\nPrivate build.\r\n\r\n```\r\n---------------------------\r\nAssertion Failed: Abort=Quit, Retry=Debug, Ignore=Continue\r\n---------------------------\r\n\r\n\r\n\r\n\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.EnsureIsReadOnlyAttributeExists(DiagnosticBag diagnostics, Location location, Boolean modifyCompilationForRefReadOnly) in C:\\R0\\src\\Compilers\\CSharp\\Portable\\Symbols\\Compilation_WellKnownMembers.cs:line 465\r\n\r\n   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.AfterMembersChecks(DiagnosticBag diagnostics) in C:\\R0\\src\\Compilers\\CSharp\\Portable\\Symbols\\Source\\SourceMemberContainerSymbol.cs:line 1419\r\n\r\n   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) in C:\\R0\\src\\Compilers\\CSharp\\Portable\\Symbols\\Source\\SourceMemberContainerSymbol.cs:line 507\r\n\r\n   at Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken) in C:\\R0\\src\\Compilers\\CSharp\\Portable\\Symbols\\Symbol.cs:line 712\r\n\r\n   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTy......\r\n\r\n<truncated>\r\n---------------------------\r\nAbort   Retry   Ignore   \r\n---------------------------\r\n```\r\n\r\nCrash dump:\r\n%internal_share%\\public\\tomat\\Bugs\\Roslyn24351", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24325", "title": "Improve VisualStudioActiveStatementProvider", "body": "Report errors and handle calls when not in a debug session.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24324", "title": "Improve implementation of GetCurrentActiveStatementPositionAsync and EditAndContinueService.IsActiveStatementInExceptionRegionAsync", "body": "We could avoid enumerating active statements for unchanged documents. \r\nWe would need to add a document path parameter to be able to find the document we need to check for changes. \r\n\r\nWe can also avoid calculating all exception regions.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24320", "title": "Improve handling of active statement in linked documents", "body": "**Version Used**: \r\n\r\n![image](https://user-images.githubusercontent.com/41759/35122595-2305de0a-fc54-11e7-8397-1cf0ed080c82.png)\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Unzip [Repro.zip](https://github.com/dotnet/roslyn/files/1644607/Repro.zip) to a directory and open the solution.\r\n2. Build solution,\r\n3. Open ```Common.cs```, place a breakpoint to ```Console.WriteLine();``` in ```Common.cs```.\r\n4. Switch the context of ```Common.cs``` to ```ClassLibrary2```.\r\n5. F5\r\n\r\nCall stack window displays:\r\n```\r\n>\tClassLibrary1.dll!Common.G() Line 16\tC#\r\n \tClassLibrary1.dll!Common.F() Line 10\tC#\r\n \tClassLibrary1.dll!Class1.M() Line 3\tC#\r\n \tConsoleApp108.exe!Program.Main(string[] args) Line 5\tC#\r\n```\r\n\r\n6. Double-click on frame:\r\n```\r\n>\tClassLibrary1.dll!Common.G() Line 12\tC#\r\n```\r\n\r\n**Expected Behavior**:\r\nThe background color of correct ```G();``` statement should be grey (meaning it's a non-leaf active statement) if the source document is open in context of the module that's actually executing that statement (ClassLibrary1).\r\n\r\nNavigating to the source of a frame should switch the document to the right context (ClassLibrary1).\r\n\r\n**Actual Behavior**:\r\nThe incorrect or no statement is highlighted. Context is not switched.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24290", "title": "EnC scenario: editing exception handler containing an active statement sometimes doesn't display rude edit", "body": "**Steps to Reproduce**:\r\n\r\nConsole app:\r\n\r\n```\r\nusing System;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {   \r\n        // [3]\r\n        try\r\n        {\r\n            G();\r\n        }\r\n        catch (Exception) { // breakpoint [2]\r\n            Console.WriteLine(1);\r\n            Console.WriteLine(2);\r\n            Console.WriteLine(3);\r\n        }\r\n        Console.WriteLine(4);\r\n        Console.WriteLine(5);\r\n        Console.WriteLine(6);\r\n        Console.WriteLine(7);\r\n    }\r\n\r\n    static void G()\r\n    {\r\n        throw new Exception(); // breakpoint [1]\r\n    }\r\n}\r\n```\r\n\r\n1. Start new instance of VS -- the issue seems to only reproduce the first time.\r\n1. Place breakpoints as shown above and F5\r\n1. Once Breakpoint [1] is hit insert a new line at [3] (in between ```{``` and ```// [3]```)\r\n1. F5, Breakpoint [2] is hit.\r\n1. Step (F10)\r\n1. Change ```Console.WriteLine(2);``` to ```Console.WriteLine(20);```.\r\n\r\n**Expected Behavior**:\r\n\r\nA squiggle appears on ```catch``` keyword, an error is displayed in Error List.\r\nHitting F10 shows an error dialog.\r\n\r\n**Wrong Behavior**:\r\n\r\nThe error is not reported.\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24253", "title": "EnC test scenario: Exception remapping", "body": "Validates correct exception remapping.\r\n\r\n**Version**\r\n\r\nThis doesn't work properly in Dev15.5 (prior to EnC Manager Active Statement refactoring).\r\n\r\n**Steps to Reproduce**:\r\n\r\nConsole app:\r\n\r\n```\r\nusing System;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        // [3]\r\n        try\r\n        {\r\n            G();\r\n        }\r\n        catch (Exception) { // breakpoint [2]\r\n            Console.WriteLine(1);\r\n            Console.WriteLine(2);\r\n            Console.WriteLine(3);\r\n        }\r\n        Console.WriteLine(4);\r\n        Console.WriteLine(5);\r\n        Console.WriteLine(6);\r\n        Console.WriteLine(7);\r\n    }\r\n\r\n    static void G()\r\n    {\r\n        throw new Exception(); // breakpoint [1]\r\n    }\r\n}\r\n```\r\n\r\n1. Place breakpoints as shown above and F5\r\n2. Once Breakpoint [1] is hit insert a new line at [3] (in between ```{``` and ```// [3]```)\r\n3. F5, Breakpoint [2] is hit, step 5 times (until the current IP is out of the exception handler.\r\n\r\n**Expected Behavior**:\r\n\r\nCurrent IP (yellow span) is at ```Console.WriteLine(4);```\r\n\r\n**Wrong Behavior**:\r\n\r\nAny other span is highlighted (specifically ```Console.WriteLine(4);``` is skipped and  ```Console.WriteLine(5);``` is highlighted).\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24127", "title": "CSharpRenameTrackingCodeFixProvider failed", "body": "**Version Used**: \r\n![image](https://user-images.githubusercontent.com/41759/34740857-a7901eb8-f535-11e7-9808-8d33be654faf.png)\r\n\r\n```\r\nSystem.AggregateException : One or more errors occurred. ---> Rename Tracking could not update solution.\r\n   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)\r\n   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeWorker(Func`1 getFromDocument,IProgressTracker progressTracker,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.<>c__DisplayClass18_0.<InvokeCore>b__0()\r\n   at Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformAction(IExtensionManager extensionManager,Object extension,Action action)\r\n   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n---> (Inner Exception #0) System.InvalidOperationException : Rename Tracking could not update solution.\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.RenameTracking.RenameTrackingTaggerProvider.RenameTrackingCommitter.UpdateWorkspaceForResetOfTypedIdentifier(Workspace workspace,Solution newSolution,Int32 trackingSessionId)\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.RenameTracking.RenameTrackingTaggerProvider.RenameTrackingCommitter.ApplyChangesToWorkspace(CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.RenameTracking.RenameTrackingTaggerProvider.RenameTrackingCommitter.Commit(CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.RenameTracking.RenameTrackingTaggerProvider.RenameTrackingCodeAction.RenameTrackingCommitterOperation.Apply(Workspace workspace,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CodeActions.CodeActionOperation.TryApply(Workspace workspace,IProgressTracker progressTracker,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.ProcessOperations(Workspace workspace,ImmutableArray`1 operations,IProgressTracker progressTracker,CancellationToken cancellationToken)\r\n   at async Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.ApplyAsync(<Unknown Parameters>)<---\r\n\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23969", "title": "Report error/warning if /pathmap doesn't cover all emitted source paths", "body": "**Version Used**: \r\n\r\n2.7.0.62412 (84aeb8e6)\r\n\r\n**Steps to Reproduce**:\r\n\r\nCreate files ```C:\\temp\\a\\x.cs``` and ```C:\\temp\\b\\y.cs``` containing some methods.\r\n\r\n```C:\\temp>csc a\\x.cs b\\y.cs /pathmap:C:\\temp\\a=/_/ /t:library /deterministic /debug:portable```\r\n \r\nThe resulting binary (pdb) is not fully deterministic since not all paths in the pdb were mapped to a deterministic value. \r\n\r\n**Expected Behavior**:\r\n\r\nAn error or warning is reported when both ```/deterministic``` and ```/pathmap``` are specified but the map doesn't cover all paths, so that the user knows that the given ```/pathmap``` is insufficient.\r\n\r\n**Actual Behavior**:\r\n\r\nNo warning/error.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23865", "title": "EnC: Changing active exception region span in any way should be rude edit", "body": "**Version Used**: \r\n\r\n15.6.0 P1.1\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Console app, place breakpoints as indicated, F5\r\n\r\n```C#\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            try\r\n            {\r\n                G();\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Console.WriteLine();\r\n                Console.WriteLine(); // breakpoint #1 here\r\n                Console.WriteLine();\r\n            }\r\n        }\r\n\r\n        static void G()\r\n        {               \r\n            throw new Exception(); // breakpoint #2 here\r\n        }\r\n    }\r\n```\r\n\r\nWhen breakpoint 2 is hit add 5 empty lines in front of breakpoint 1 and continue via F5. Breakpoint 1 won't be hit. This is because the debugger is not able to map the breakpoints within exception region whose span changes. We need to disallow any changes to the exception region span that affect line numbers of sequence points within the span, not just semantically significant changes. \r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/dotnet/roslyn/commits/c7983cf2e9d53183bd28b7a724e66a9caaeb97cc", "message": "Add Microsoft.VisualStudio.Debugger.UI.Interfaces packaging (#24149)"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/5fc3f73b9910a7fb2748038d96a03e08474eeb7a", "message": "Change the source package SourceRoot properties to match the latest design (#24106)"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/818c2ca12f70becbc7cc6d964a0040cddaa5461e", "message": "Update Pdb2Pdb to 1.1.0-beta1-62506-02 (#24078)"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/aa683ac4ec4c6ce746776a2a316309fe6a7d1740", "message": "Add EmbedAllSources build task parameter (#23656)"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/04cb40ed977ba806d730f5f131b541c7963179d4", "message": "Infrastructure: Source packages improvements (#23682)\n\n* Source packages improvements\r\n\r\n* Target net45\r\n\r\n* Only generate source link when emitting PDBs\r\n\r\n* Make BuildBoss happy"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/1cfd6fdea74df2428c69dfe690111a470e39a8a1", "message": "Separate debugging workspace service and EnC service (#23630)"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24316", "title": "Redesign active statement handling during debugging", "body": "### Customer scenario\r\n\r\nPreviously when entering a break mode the EnC manager synchronously enumerated all active statements in the debuggee (effectively all CLR stack frames) in order to be able to track them during EnC and report them to the language services. This was causing UI delays since all this work was performed on every step on UI thread.\r\n\r\nThis change removes active statement tracking from EnC manager entirely (see VSO PR [101738](https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/101738)) and moves it to the language service, which has already been doing most of the tracking anyways. The active statements are now enumerated lazily and asynchronously to avoid blocking UI.\r\n\r\nThe new design also removes some of the dependencies of the EnC Manager on project system and is part of longer term effort to redesign EnC Manager tracked by https://github.com/dotnet/roslyn/issues/18350.\r\n\r\n### Bugs this fixes\r\n\r\nhttps://github.com/dotnet/roslyn/issues/13276\r\nVSO [246053](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/246053)\r\nVSO [530575](https://devdiv.visualstudio.com/defaultcollection/DevDiv/_workitems/edit/530575)\r\n\r\n### Workarounds, if any\r\n\r\nNone.\r\n\r\n### Risk\r\n\r\nMedium.\r\n\r\n### Performance impact\r\n\r\nImproves responsiveness during stepping.\r\n\r\n### Is this a regression from a previous update?\r\n\r\nNo.\r\n\r\n### Root cause analysis\r\n\r\n### How was the bug found?\r\n\r\nPerfWatson reported UI delays.\r\n\r\n### Test documentation updated?\r\n\r\nYes.\r\n\r\nTODO: \r\n- [ ] Add more unit tests. \r\n- [ ] Vendors are validating the build.\r\n\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/22611", "title": "WIP:  Use SymUnmanagedWriter from Microsoft.DiaSymReader", "body": "TODO: setup authoring of VS, msbuild and dotnet SDK\r\n\r\nResolves https://github.com/dotnet/roslyn/issues/10637", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/154593548", "body": "@agocke @amcasey I met the author of SourceLink at MVP summit. We are going collaborate on a source info solution for both native and portable PDBs.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/154593548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/155211030", "body": "Note that although the Portable PDBs are the future it will take a while till all relevant tools (debuggers, symbol servers, source info, IL rewriters, etc.) will have support for Portable PDB. Meanwhile we need solution for the current PDBs. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/155211030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/155253094", "body": "That is correct. However, it hasn't been released yet and currently it requires the app to be changed in order to use it. It might be possible, using some COM activation magic, to switch existing app from native diasymreader to the `Microsoft.DiaSymReader.PortablePdb` without changing it via a manifest file. But we haven't had time to figure it out yet.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/155253094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/342690504", "body": "@jasonmalinowski Cool. My pleasure. Fixed by https://github.com/dotnet/roslyn/pull/23038.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/342690504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70378288", "body": "Could you share the binary before CC rewrites it?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70378288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70379401", "body": "I think I found what the problem is in Code Contracts. I have contacted the owners to see how CC can be fixed.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70379401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70418024", "body": "Omer, I agree Roslyn shouldn't throw AVs. However adding a single check to the PEModule isn't sufficient. It only eliminates one case, while there are others that involve multiple threads that still need fixing. Rather than patch one case we need to look into a comprehensive fix.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70418024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70545804", "body": "Could you save a crash dump and share it somewhere? The best is to use \"procdump -ma\" command (http://technet.microsoft.com/en-us/sysinternals/dd996900.aspx).\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70545804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70546043", "body": "[Tracked internally as 1110825]\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70546043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70547307", "body": "Yes, __arglist is legacy, not-optimized and shall not be used. It's also not portable.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70547307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70558491", "body": "Thanks. Turns out this bug has been fixed. Will let you know where the fix appears.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70558491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/10063798", "body": "These constants were protected. Made them internal.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10063798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10063802", "body": "This was protected. Made internal to remove from public surface.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10063802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10063813", "body": "I have swapped the arguments to the error (the error message is the same) so that code shared among both compilers can create this diagnostic -- C# has them in different order.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10063813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10380207", "body": "return original.Replace('.', '_');\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10380207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10380246", "body": "rename \"original\" to \"moduleName\"\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10380246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10380255", "body": "Don't define this very specific method as an extension method on string. Instead move to MetadataHelpers or something like that.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10380255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10507082", "body": "This change is not necessary. Undone.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10507082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10612546", "body": "Adds test coverage for duplicated debug docs.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10612546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/11017782", "body": "Consistency with extension methods of the same name.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/11017782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/11270137", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/11270137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12125463", "body": "@pharring  With large heaps this may cause a lot of cache misses since the order of entries in _blobs dictionary depends on the hash of the array values, which is not correlated to the heap index. We could order by heap offset before running this loop. Do you think it's worth it?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12125463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12138155", "body": "OK.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12138155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12138164", "body": "Oh, yes, great catch.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12138164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12425101", "body": "If conditional references are not supported, shouldn't an error be reported if one is encountered?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12425101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12425117", "body": "Could you add a comment to the .targets file explaining what _ExplicitReference is? \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12425117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12575446", "body": "Why \"+1\"?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12575446/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12575905", "body": "Ah, I see. Maybe a comment?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12575905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12575965", "body": "These are IMO unnecessary - this is not perf sensitive code. I wouldn't worry about accessing properties multiple times..\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12575965/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12575993", "body": "Could we make it not confused?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12575993/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12576096", "body": "GetKindOrdinal?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12576096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12576108", "body": "$\"Unexpected value: '{span.Kind}'\" to avoid inconsistency if the kind is renamed.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12576108/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12576306", "body": "I see. That seems legit. Then perhaps a comment would clarify.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12576306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12576412", "body": "Seems like this snippet can be extracted to a method (\"GetInputProjectionSpan(lineNumber)\" or something like that) and reused.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12576412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12576453", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12576453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12698333", "body": "{nameof(trees)}\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12698333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12699444", "body": "I think we need to be a bit more careful here to avoid perf issues. Let's talk when you're back.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12699444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12699637", "body": "Indentation?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12699637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/13477997", "body": "This '?' is actually not needed.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/13477997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/13481541", "body": "Style: use camelCase, not underscores (deterministicFeature)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/13481541/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/13481544", "body": "Why do we need to keep the features flag around?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/13481544/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15810907", "body": "Why do we need the loop?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15810907/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15810999", "body": "Wouldn't `typeof(AddImport.AbstractAddImportCodeFixProvider<>))` be updated in that case?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15810999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15811076", "body": "Never mind.\n:+1:\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15811076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15997307", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15997307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16547711", "body": "The return value is at odds with the name of the method. I'd expect false to be returned in error case.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16547711/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16547754", "body": "We should avoid allocating closures in these helpers (it's created due to use of type parameter in a lambda).\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16547754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/18160995", "body": "Isn't there a msbuild task that does create dirs?\n\n`<MakeDir Directories=\"$(OutputDirectory)\"/>`\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/18160995/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/18161034", "body": "I think this is unnecessary. Microbuild does this already (there is a checkbox for cleaning in the web ui).\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/18161034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/18161058", "body": "Should probably be a config agnostic setting.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/18161058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "AdamSpeight2008": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24350", "title": "Implement a \"Stylistic Check\" prerequisite build bot", "body": "As the \"style\" of the language use within pull request seems to \"trigger\" some member of the team.\r\nAdd a build bot that validates the style as prerequisite, thus preventing the build from succeeding. \r\nProviding both a \"trigger warning\" to those it may effect, and give feedback to those that violate it. \r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24180", "title": "Determine The Hive", "body": "Is there a way to determine which hive an instance of VS2017 is being used whilst it running?\r\nI need to know so I can reset it.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/22767", "title": "[WIP] Fix for Issue 22627", "body": "Fix for Issue #22627 , by adding additional checks for digit separators\u2026 in floating point literals and decimals.\r\n\r\n**Customer scenario**\r\n\r\n```vb.net\r\nModule Module1\r\n\r\n    Sub Main()\r\n        Dim z As Integer = 1_000_000\r\n        Dim y As Single = 1_000.0_11\r\n        Dim x As Double = 1_000.0_1_2\r\n        Dim w As Decimal = 1_23_456.78_9D\r\n    End Sub\r\n\r\nEnd Module\r\n```\r\nThe digit separators within the literal for variables `y`,`x`,`w` will be removed when moving the caret to another line. \r\n\r\n**Workarounds, if any**\r\nCurrently no know work around, to keep the digit separators present.\r\n\r\n**Risk**\r\n`Tiny`  \r\n\r\n**Performance impact**\r\n`Tiny` a couple of addition conditions within a workspace provider `ReduceTokensCodeCleanupProvider` \r\n\r\n**Is this a regression from a previous update?**\r\nUnknown.\r\n\r\n**Root cause analysis:**\r\n Initial thoughts were this was caused by the formatter, but I could not see where would be possible via visual inspection. So expanded the causal search to other sources. \r\n\r\n**How was the bug found?**\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n**Test documentation updated?**\r\n\r\nNot yet, we should add additional test to check for preservation of the digit separators if the display options permit them.\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/19319", "title": "Fixes #13228 and #17761", "body": "Application of #17906 on to more recently created branch off `master`, as to provide a solution to the weird merge issue that pull request had. No changes to the prior code have been made, only the commits have squashed down to a now single commit.\r\n\r\n**Bugs this fixes:**\r\n\r\nFixes #13228 Unifies the implementation of Feature Checking into a utility module.\r\nFixes #17761 Implements the localisation of the Feature InterpolatedStrings \r\n\r\n**Risk**\r\nLow, affected code is internal.\r\n\r\n**Performance impact**\r\nSimilar, to existing\r\n\r\n**How was the bug found?**\r\n\r\nCode Inspection\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/17240", "title": "[PR For Personal Review Only] Multi-Line String Literal in VB Unit Tests.", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70383174", "body": "@mattwar \nDon't confuse\n\n`yield foreach recFN` with `yield x On iter`\n\n`yield foreach recFN` is equivalent to\n\n```\nforeach(x in recFN) \n{\n yield x;\n}\n```\n\nWhich is still Quadratic.\n\nThis does something different. Let's use another example. Yielding the permutations of a list of items.\n\n```\nprivate iterator _Perm<T>( items : T[], len : int, res : T[] , iter : Iterator<T[]> ) : IE< T[] >\n{\n  if( items.Length = len )\n  {\n   Yield res On iter;\n  } else\n  {\n    for(var i = 1 To items.Length)\n    {\n      _Perm<T>( items.Skip(1).ToArray(), len, res.Concate( items.Take(1) , iter );\n      items = items.Rotate();\n    }\n  }\n}\n\n\npublic Rotate<T>( this a : T[] ) : T[]\n{\n  return a.Skip(1).Concate( a.Take(1) ).ToArray();\n}`\n```\n\nLet's create the public method the initiates the iterator and calls the method.\n\n```\npublic Perm<T>( this items : T[] , size : int ) : IE< T[] >\n{\n  if( items == null ) return Empty<T[]>();\n  if( items.Length = 0 ) return Empty<T[]>();\n  if( size < 1 ) return Empty<T[]>();\n  if( size > items.Length ) size = items.Length;\n  return _Perm<T>( items , size, {} , Iterator.Create( _Perm<T> ) );\n}\n```\n\n`Iterator.Create( _Perm<T> );` create the **single instance** of the iterator / yielder that is use through out the recursive calls.\nMaybe an attribute`[Iterator(Recusive:= True)]` on the function, creates the \"linearised\" state-machine.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70383174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70757115", "body": "I reckon in the majority of user cases, the user's intent is that they want the resultant to be a `string`.\nShould the user's intent be the type `FormattableString` then a Cast is required.\n\n```\nDim  s0 As String = $\"X:= {x}, Y:= {Y}\" ' The user wants the resultant string of the interpolation.\nDim  s1 = $\"X:= {x}, Y:= {Y}\" ' The user wants the resultant string of the interpolation.\nDim s2 As FormattableString = $\"X:= {x}, Y:= {Y}\" ' The user wanted the actual FormattableString object.\n\nstring s0 = $\"X:= {x}, Y:= {Y}\";\nvar s1 = $\"X:= {x}, Y:= {Y}\";\nFormattableString s2 = $\"X:= {x}, Y:= {Y}\";\n```\n\nIf the String Interpolation literal is as method argument, \"assumes\" the form of the type of the method parameter. If the case is ambiguous then a case it required.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70757115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70759964", "body": "I missed the tag, then replied. Then saw the tag, so removed to comment. DOH!\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70759964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "sharwell": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24349", "title": "Expected behavior for Go To Definition for metadata references", "body": "The Navigate to Decompiled Sources feature recently added is the first step towards a better <kbd>F12</kbd> experience. This issue describes the more complete picture for how this experience should eventually look.\r\n\r\n\u26a0\ufe0f This workflow is currently just a draft\r\n\r\n1. Start with the metadata reference\r\n2. Locate the correct runtime assembly from the metadata reference (accounting for execution environment and assembly binding redirection)\r\n3. Locate the symbols for the runtime assembly\r\n4. Using the symbol file and/or symbol server, locate the original source file(s) for the symbol getting decompiled\r\n5. If step 3 or 4 fails, decompile the symbol from the runtime assembly using ILSpy\r\n6. If step 2 fails, attempt steps 3-5 using the metadata reference instead of the runtime assembly\r\n7. Otherwise, don't attempt to decompile", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24349/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24178", "title": "Navigate to decompiled sources: 'Unknown result type' in output", "body": "**Version Used**: 15.6 Preview 2\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Add a reference to **System.Collections.Immutable**\r\n1. Add the following code:\r\n\r\n    ```csharp\r\n    var array = ImmutableArray.CreateRange(Enumerable.Range(0, 1), x => x);\r\n    ```\r\n\r\n1. Navigate to `ImmutableArray.CreateRange`\r\n\r\n**Expected Behavior**:\r\n\r\n1. The signature of `CreateRange` is the following:\r\n\r\n    ```csharp\r\n    public static ImmutableArray<TResult> CreateRange<TSource, TResult>(ImmutableArray<TSource> items, Func<TSource, TResult> selector)\r\n    ```\r\n\r\n2. The decompiled method body does not have comments regarding invalid IL\r\n\r\n3. The use of `selector` is proper C# code\r\n\r\n**Actual Behavior**:\r\n\r\n1. The signature of `CreateRange` is incorrect. Specifically, the generic arguments for the type of `selector` are omitted:\r\n\r\n    ```csharp\r\n    public static ImmutableArray<TResult> CreateRange<TSource, TResult>(ImmutableArray<TSource> items, Func selector)\r\n    ```\r\n\r\n2. The decompiled method body has comments regarding invalid IL:\r\n\r\n    ```csharp\r\n    //IL_0000: Unknown result type (might be due to invalid IL)\r\n    //IL_0029: Unknown result type (might be due to invalid IL)\r\n    //IL_0032: Expected Ref, but got Unknown\r\n    ```\r\n\r\n3. When `selector` is used to assign values to `array[i]`, the types and syntax are incorrect (both `(?)` and `(!0)` are incorrect):\r\n\r\n    ```csharp\r\n    array[i] = (TResult)((Func)(?)selector).Invoke((!0)items[i]);\r\n    ```\r\n\r\n:memo: For reference, here is the complete decompiled method:\r\n\r\n```csharp\r\npublic static ImmutableArray<TResult> CreateRange<TSource, TResult>(ImmutableArray<TSource> items, Func selector)\r\n{\r\n\t//IL_0000: Unknown result type (might be due to invalid IL)\r\n\t//IL_0029: Unknown result type (might be due to invalid IL)\r\n\t//IL_0032: Expected Ref, but got Unknown\r\n\tRequires.NotNull<Func>(selector, \"selector\");\r\n\tint length = items.Length;\r\n\tif (length == 0)\r\n\t{\r\n\t\treturn ImmutableArray.Create<TResult>();\r\n\t}\r\n\tTResult[] array = new TResult[length];\r\n\tfor (int i = 0; i < array.Length; i++)\r\n\t{\r\n\t\tarray[i] = (TResult)((Func)(?)selector).Invoke((!0)items[i]);\r\n\t}\r\n\treturn new ImmutableArray<TResult>(array);\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24177", "title": "Navigate to decompiled sources fails to load XML documentation for ImmutableArray", "body": "**Version Used**: 15.6 Preview 2\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Add a reference to **System.Collections.Immutable**\r\n1. Add the following code:\r\n\r\n    ```csharp\r\n    var array = ImmutableArray.Create(1);\r\n    ```\r\n\r\n1. Navigate to `ImmutableArray`\r\n\r\n**Expected Behavior**:\r\n\r\nXML documentation comments are shown in the decompiled result.\r\n\r\n**Actual Behavior**:\r\n\r\nThe following message appears at the top of the file:\r\n\r\n```csharp\r\n/// Exception while reading XmlDoc: System.Xml.XmlException: The 'br' start tag on line 507 position 385 does not match the end tag of 'p'. Line 507, position 391.\r\n///   at System.Xml.XmlTextReaderImpl.Throw(Exception e)\r\n///   at System.Xml.XmlTextReaderImpl.Throw(String res, String[] args)\r\n///   at System.Xml.XmlTextReaderImpl.ThrowTagMismatch(NodeData startTag)\r\n///   at System.Xml.XmlTextReaderImpl.ParseEndElement()\r\n///   at System.Xml.XmlTextReaderImpl.ParseElementContent()\r\n///   at System.Xml.XmlTextReaderImpl.Read()\r\n///   at System.Xml.XmlTextReader.Read()\r\n///   at System.Xml.XmlTextReaderImpl.Skip()\r\n///   at System.Xml.XmlTextReader.Skip()\r\n///   at ICSharpCode.Decompiler.Documentation.XmlDocumentationProvider.ReadMembersSection(XmlTextReader reader, LinePositionMapper linePosMapper, List`1 indexList)\r\n///   at ICSharpCode.Decompiler.Documentation.XmlDocumentationProvider.ReadXmlDoc(XmlTextReader reader)\r\n///   at ICSharpCode.Decompiler.Documentation.XmlDocumentationProvider..ctor(String fileName)\r\n///   at ICSharpCode.Decompiler.Documentation.XmlDocLoader.LoadDocumentation(ModuleDefinition module)\r\n///   at ICSharpCode.Decompiler.CSharp.Transforms.AddXmlDocumentationTransform.Run(AstNode rootNode, TransformContext context)\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24175", "title": "Navigate to disassembled source fails to check for SuppressIldasmAttribute", "body": "**Version Used**: 15.6 Preview 2\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a library which has `[assembly: SuppressIldasm]` applied to it\r\n2. In a separate project, add a reference to the assembly produced by step 1\r\n3. Invoke a method defined in the library, and use Go To Definition\r\n\r\n**Expected Behavior**:\r\n\r\nThe metadata as source window appears, without showing decompiled method bodies.\r\n\r\n**Actual Behavior**:\r\n\r\nThe code runs through ILSpy and shows decompiled method bodies.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23918", "title": "VisitAllSourceTypesAndNamespaces parallelizes even when the resulting execution is slower", "body": "During evaluation of feedback [High CPU usage when idle](https://developercommunity.visualstudio.com/content/problem/170828/high-cpu-usage-when-idle-2.html), calls to `VisitAllSourceTypesAndNamespaces` reveal CPU performance overhead of 15% for execution of tasks, while less than 3% of the overall CPU usage is actually used by the body of these tasks. As an initial step to improve this overhead, the `VisitAllSourceTypesAndNamespaces` method should be updated to avoid wrapping execution in a Task for cases where the source only contains a single type.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23917", "title": "MislocatedDocumentationCommentFinder.DefaultVisit causes substantial performance overhead", "body": "During the evaluation of CompilerDiagnosticAnalyzer, `MislocatedDocumentationCommentFinder.DefaultVisit` is called and results in more than 25% of the overall CPU usage in the trace reported for [High CPU usage when idle](https://developercommunity.visualstudio.com/content/problem/170828/high-cpu-usage-when-idle-2.html).", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23916", "title": "CompilerDiagnosticAnalyzer is not enabled for concurrent execution", "body": "Currently `CompilerDiagnosticAnalyzer` is not enabled for concurrent execution. As a result, more than 25% of the CPU time during traces like the one provided in [High CPU usage when idle](https://developercommunity.visualstudio.com/content/problem/170828/high-cpu-usage-when-idle-2.html) occur in lock contention. This analyzer needs to be enabled for concurrent execution to eliminate this lock requirement.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23916/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/dotnet/roslyn/commits/40bb50e8b290716565cc735ba491970e85632c05", "message": "Merge pull request #22100 from sharwell/fix-warning-level\n\nMake analyzer diagnostics independent of the current warning level"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/c44f53f05498f9e33d46f62257e31ee4ed2c4034", "message": "Merge pull request #23457 from sharwell/avoid-skew\n\nAvoid skewing analysis time when logging analyzer times"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/8e3ed3b4e5fd864075b7e9a968a5711eda799792", "message": "Fix tests since non-warning diagnostics are reported with /warn:0"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/3f27cc986559e3722998588497d9d7c91f620b56", "message": "Account for the possibility of a future warning level greater than 4"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/a3e168a9b6c8784b2398ae5c419662df7f14ef85", "message": "Add a comment for GetDefaultWarningLevel"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/9b625f2267d97dcb72d502f79aa0fbaf2ca5af98", "message": "Add regression tests for diagnostics with warning levels 0 through 3"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/cacb6c8727a25c8c8f1a41122d0c75f0e7a2ddf6", "message": "Make analyzer diagnostics independent of the current warning level\n\nFixes #20377"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/163441971e05e6cf223b758bd9aebfd4785a816a", "message": "Merge pull request #23727 from sharwell/checksum-compat\n\nAvoid depending on sizeof(T) for ExplicitLayout types due to Mono bug"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/35a4b1dfbf325fb087f45cec2526ede66a571296", "message": "Avoid depending on sizeof(T) for ExplicitLayout types due to Mono bug\n\nFixes #23722"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/cd90b27c7648306407f04d0a1dffa07ce92aca29", "message": "Merge pull request #23430 from siegfriedpammer/go-to-ilspy\n\nGo To Disassembly"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/862c4195ff2541670be805418303ec6251d80f19", "message": "Merge pull request #23610 from schovanec/use-null-propagation-pattern\n\nFix UseNullPropagation codefix doesn't recognize `x is null ? null : x.y` pattern"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/cf2ac77108169e4c021db4d3721e36cc0544ef87", "message": "Merge pull request #19528 from raboud/master\n\nissue when trying to get a property access modifier of a expression-b\u2026"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/9795d249bfdc02fbce267796c327c835b373c537", "message": "Update build to account for additional Mono.Cecil assemblies"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/a25ee084e4ec18ab0692c6c32c84ba0ede765a25", "message": "Merge pull request #23621 from sharwell/pool-stopwatch\n\nPool the Stopwatch instance used in the analyzer driver"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/c38f22b5e77a8d3772986c4bd8a7ff74f6f382d2", "message": "Merge pull request #23622 from sharwell/lazy-value-factory\n\nLazily calculate values for GetBlockActionsByAnalyzer"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/6f27d6d18f4d8eae5e3b7bbd6b51f68db4f9fc37", "message": "Merge pull request #23637 from sharwell/rm-contention\n\nUse ConcurrentDictionary to avoid locks in IsGeneratedCode and HasHiddenRegions"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/22755178000d3110920b9655eed48fada40baa7b", "message": "Remove unnecessary Mono.Cecil reference"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/05330cbaee65745a67081957b0f869f52e01666b", "message": "Updated formatting of decompiler license notice"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/219170b249e5e5136f1110400999b72a9b02e521", "message": "Merge remote-tracking branch 'dotnet/master' into go-to-ilspy"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/1adc0d06a5e248399f25b27c56790533a4f8a98a", "message": "Use sentence case for the decompiler legal notice"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/d13bc7e83af0be149b6377504396a3be434ea9e2", "message": "Merge pull request #23641 from sharwell/fix-tests\n\nRevert \"Merge pull request #23364 from tmat/DisableBackgroundCompiler\""}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/609794ed8c9e5f413ebceac1f9061d7b80883c10", "message": "Revert \"Merge pull request #23364 from tmat/DisableBackgroundCompiler\"\n\nThis reverts commit 80d79c4041b4ac2d0d9f9aacf127e734291bd112, reversing\nchanges made to 37ef0cdea72622fa9195b770808624c8dca007b3."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/fc7ed0b432b9fcf7e1132a5c5aeb69df332055d3", "message": "Merge pull request #23552 from sharwell/optimize-toimmutableandfree\n\nOptimize ArrayBuilder<T>.ToImmutableAndFree"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/4e44b22eb1cdd225b91e433f6f269ad226a0ca4d", "message": "Merge pull request #23458 from sharwell/check-syntax-before-options\n\nPerform a lightweight syntax check before getting document options"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/c3df7aa903b5f561642ef9fe410ce7963b677414", "message": "Use ConcurrentDictionary to avoid locks in IsGeneratedCode and HasHiddenRegions"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/2466e512a1d24ebb73861c6616ec1458f964c890", "message": "Avoid using PerformanceSensitiveAttribute in pooled object types"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/625a35e7e7bc509427d39c1b5d0baf1e29b392c7", "message": "Pool the Stopwatch instance used in the analyzer driver"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/901524200cf8978413cd2a97fb2da8a1697733b2", "message": "Lazily calculate values for GetBlockActionsByAnalyzer"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24291", "title": "Locate implementations for reference assemblies using the process binding path", "body": "This pull request partially implements the \"locate the runtime assembly\" feature described in #24349, specifically for cases where the metadata reference resolves to a reference assembly (i.e. an assembly which does not contain IL for method bodies). Reference assemblies do not produce meaningful results when decompiled, and currently all references to the .NET Framework assemblies fall into this category. For common assemblies already located in the GAC, including the .NET Framework assemblies, this pull request allows the Navigate to Decompiled Sources feature to provide meaningful results.\r\n\r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24189", "title": "Update to ILSpy 3.0.0.3447", "body": "<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24188", "title": "Add failure text to the end of the metadata document if decompilation fails", "body": "This was originally requested by @siegfriedpammer to help with debugging scenarios. If ILSpy fails with an exception, the text from the exception is added to the end of the final metadata source file as a comment, to aid with diagnostics.\r\n\r\nNo comment is added if decompilation is disabled (which it is by default).\r\n\r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24187", "title": "Disable navigate to decompiled sources for assemblies with SuppressIldasmAttribute", "body": "### Customer scenario\r\n\r\nA customer enables the Navigate to Decompiled Sources feature, accepts the terms for use, and navigates to a symbol defined in an assembly that has `SuppressIldasmAttribute` applied to it. The source code for the symbol is shown when only the metadata should be showing.\r\n\r\n### Bugs this fixes\r\n\r\nFixes #24175\r\n\r\n### Workarounds, if any\r\n\r\nNone.\r\n\r\n### Risk\r\n\r\nLow.\r\n\r\n### Performance impact\r\n\r\nLow.\r\n\r\n### Is this a regression from a previous update?\r\n\r\nNo.\r\n\r\n### Root cause analysis\r\n\r\nThe initial ILSpy integration (behind a feature flag and disabled by default) was not tested for this case. Manual testing revealed the bug.\r\n\r\n### How was the bug found?\r\n\r\nManual compliance testing.\r\n\r\n### Test documentation updated?\r\n\r\nTests and test documentation is a work in progress for this new feature.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24186", "title": "Allow resolving mscorlib with different assembly version numbers", "body": "Fixes #24178\r\n\r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23557", "title": "Use ValueTask<T> on allocation hot paths", "body": "AnalyzerRunner indicated that these asynchronous paths typically complete synchronously. Measured savings are ~2.5% (~2GiB).\r\n\r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23534", "title": "Reduce allocations in UnboundLambda", "body": "### Customer scenario\r\n\r\nRunning analyzer during a build is slower than it should be, with the analyzer driver contributing substantial overhead even when the analyzers themselves are lightweight.\r\n\r\n### Bugs this fixes\r\n\r\nFixes #23463\r\n\r\n### Workarounds, if any\r\n\r\nNone needed\r\n\r\n### Risk\r\n\r\nThe dictionary algorithm is now optimistically concurrent, with a small risk of a performance regression in highly-contended scenarios. In addition, the dictionary lookup went from O(1) to O(log n). This should not be a problem as it favors the frequently used small dictionaries without making large edge cases unreasonable.\r\n\r\n### Performance impact\r\n\r\nAnalyzerRunner indicates a reduction in allocations of 2.56GiB (2.9%).\r\n\r\n### Is this a regression from a previous update?\r\n\r\nNo.\r\n\r\n### Root cause analysis\r\n\r\nAnalyzerRunner is a new tool for helping us test analyzer performance in isolation.\r\n\r\n### How was the bug found?\r\n\r\nAnalyzerRunner.\r\n\r\n### Test documentation updated?\r\n\r\nNo.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23519", "title": "Remove the use of Parallel.ForEach in ClsComplianceChecker", "body": "### Customer scenario\r\n\r\nRunning analyzer during a build is slower than it should be, with the analyzer driver contributing substantial overhead even when the analyzers themselves are lightweight.\r\n\r\n### Bugs this fixes\r\n\r\nFixes #23459\r\n\r\n### Workarounds, if any\r\n\r\nNone needed\r\n\r\n### Risk\r\n\r\nLow.\r\n\r\n### Performance impact\r\n\r\n15-20% reduction in allocations for running IDE analyzers. The benefits extend to other analyzers that call GetDiagnostics, with a 30-70% reduction in execution time for analyzers that depend on compiler diagnostics.\r\n\r\nThere is a possibility for a performance regression for compilation-only scenarios with no analyzers involved, for very large projects on concurrent systems. However, during testing I was unable to find a solution for which the parallelization benefits outweighed the allocation overhead of the concurrent approach.\r\n\r\n### Is this a regression from a previous update?\r\n\r\nNo.\r\n\r\n### Root cause analysis\r\n\r\nAnalyzerRunner is a new tool for helping us test analyzer performance in isolation.\r\n\r\n### How was the bug found?\r\n\r\nAnalyzerRunner.\r\n\r\n### Test documentation updated?\r\n\r\nNo.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23393", "title": "Remove suggestion to upgrade to latest language version", "body": "Fixes #23392\r\n\r\nThis pull request current adopts the \"simplest\" fix described in the original issue.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/22144", "title": "[WIP] Validate tuple element names in OHI scenarios using an analyzer", "body": "Fixes #20850\r\n\r\nItems remaining:\r\n\r\n* Fix diagnostic message formatting to include symbol names\r\n* Additional testing\r\n* Update code fix to handle related compiler warnings, or file a bug to do so later\r\n* If necessary\u00b9, implement an option in Tools &rarr; Options for this\r\n\r\n\u00b9 I would prefer to only expose this feature via **.editorconfig** and rule set files.\r\n\r\n<details><summary>Ask mode incomplete</summary><p>\r\n\r\n**Customer scenario**\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n**Bugs this fixes:**\r\n\r\n(either VSO or GitHub links)\r\n\r\n**Workarounds, if any**\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n**Risk**\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n**Performance impact**\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n**Is this a regression from a previous update?**\r\n\r\n**Root cause analysis:**\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n**How was the bug found?**\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n**Test documentation updated?**\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</p></details>", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/22143", "title": "Add missing editor configuration properties", "body": "I noticed some differences between my local settings and the code in the repository, only to find that the **.editorconfig** file we're using was incomplete. I added the missing code style properties for uniform behavior in cases where users have customized settings in Tools &rarr; Options...", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/21475", "title": "Insert value documentation instead of returns for properties", "body": "Fixes #8627\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/20745", "title": "Use an analyzer to validate file headers", "body": "* Enable StyleCop Analyzers file header validation for C# code\r\n* Fix all existing file header discrepancies in C# files\r\n\r\nFixes #20785, but only for C# files.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/20540", "title": "Remove dependency on ICompletionSession and ISignatureHelpSession", "body": "Fixes #20525\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/20493", "title": "Fix cases where ISymbol.Name could return null", "body": "Fixes some invalid state cases which could conceivably result in `SymbolTreeInfo.GetDerivedMetadataTypes` throwing a `NullReferenceException`.\r\n\r\n<details><summary>Ask Mode not complete</summary><p>\r\n\r\n**Customer scenario**\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n**Bugs this fixes:**\r\n\r\n(either VSO or GitHub links)\r\n\r\n**Workarounds, if any**\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n**Risk**\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n**Performance impact**\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n**Is this a regression from a previous update?**\r\n\r\n**Root cause analysis:**\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n**How was the bug found?**\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n</p></details>", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/20146", "title": "Fix the implementation of IDisposable in AnalyzerDriver", "body": "This type now follows the proper pattern for `IDisposable`.\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/20111", "title": "Fix cancellation leaks", "body": "Failing to dispose of a `CancellationTokenSource` created with `CreateLinkedTokenSource` will result in the underlying sources never clearing their callbacks which point to the linked source. If one or more of the underlying tokens is associated with a long-lived token source, this will leak a `CancellationTokenSource` and a `CancellationCallbackInfo` (used by `CancellationTokenRegistration`).\r\n\r\n\u26a0\ufe0f `CancellationTokenSource.Cancel` is not an alternative to calling `Dispose()`. The token source must be explicitly disposed even after cancellation in order to prevent leaks.\r\n\r\nFailing to dispose of a `CancellationTokenRegistration` results in both the above and adds a strong reference to a captured execution context, which includes strong references to the current value of an `AsyncLocal<T>`. This can be an especially large leak when the latter references a `JoinableTask<T>` which is part of [`JoinableTaskContext.joinableOperation`](https://github.com/Microsoft/vs-threading/blob/955829f236251e0097a469a2aed894c8f81c8bdb/src/Microsoft.VisualStudio.Threading/JoinableTaskContext.cs#L89).\r\n\r\nThis pull requests ensures that these types are disposed where they are created within the Roslyn code base.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/19932", "title": "Remove invalid implicit downcast", "body": "Currently `SeparatedSyntaxList<SyntaxNode>` can be implicitly cast to `SeparatedSyntaxList<T>` for *any syntax type `T`*. This is not a safe or meaningful conversion, so this change seeks to remove it.\r\n\r\n* The implicit operator is left in place to preserve *binary* compatibility with previous builds\r\n* The implicit operator is marked obsolete to prevent future use of this unsafe method\r\n* No explicit operator could be added because the implicit operator was not removed, so a `CastDown` method is added to provide the functionality via an explicit method", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/19652", "title": "Avoid throwing cancellation exceptions in common inner loops", "body": "Avoids many thousands of cancellation exceptions by exiting hot inner loops without an exception and moving the exception to a higher level in the call hierarchy. Improves the experience debugging Roslyn without changing the cancellation behavior or hurting performance.\r\n\r\n:memo: These exceptions were found by observing the stack traces in PerfView.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/19452", "title": "Cache delegates created from static methods", "body": "\r\n\r\n<details><summary>Ask Mode not yet complete</summary><p>\r\n\r\n**Customer scenario**\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n**Bugs this fixes:**\r\n\r\n(either VSO or GitHub links)\r\n\r\n**Workarounds, if any**\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n**Risk**\r\n\r\nTypically this is a low-risk change. If a regression occurs, it will almost certainly lie in one of the following:\r\n\r\n* Failure to initialize a delegate. This is more common for instance delegates, which cannot be initialized where they are declared but must instead be initialized in the constructor (all constructors if multiple).\r\n* Failure to consider initialization order. If an initializer for a static field uses a static delegate but is declared before it in the file (or declared in a different file), the delegate may not be initialized prior to use in the initializer.\r\n* Unintentional early assembly loading. Initializing a delegate to a method of another type can cause the target type's assembly to be loaded earlier than it otherwise would.\r\n* Stack overflow. In cases where a method group is replaced by a lambda, a new stack frame will appear when the lambda is invoked. In recursive stacks, this could lead to an unexpected overflow.\r\n\r\n**Performance impact**\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n**Is this a regression from a previous update?**\r\n\r\n**Root cause analysis:**\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n**How was the bug found?**\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n</p></details>", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/19267", "title": "Use lock-free algorithms in OptionServiceFactory.OptionService", "body": "<details><summary>Ask Mode not yet complete</summary><p>\r\n\r\n**Customer scenario**\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n**Bugs this fixes:**\r\n\r\n(either VSO or GitHub links)\r\n\r\n**Workarounds, if any**\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n**Risk**\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n**Performance impact**\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n**Is this a regression from a previous update?**\r\n\r\n**Root cause analysis:**\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n**How was the bug found?**\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n</p></details>", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/19266", "title": "Remove duplicate lock DocumentState.s_syntaxTreeToIdMapLock", "body": "This lock is only being used to protect access to an instance which contains\r\ninternal synchronization.\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/19183", "title": "Remove unnecessary locking from GetOrComputeDescriptors", "body": "<details><summary>Ask Mode not yet complete</summary><p>\r\n\r\n**Customer scenario**\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n**Bugs this fixes:**\r\n\r\n(either VSO or GitHub links)\r\n\r\n**Workarounds, if any**\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n**Risk**\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n**Performance impact**\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n**Is this a regression from a previous update?**\r\n\r\n**Root cause analysis:**\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n**How was the bug found?**\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n</p></details>", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70380051", "body": "I believe the previous behavior had two particular advantages related to code review and unit testing:\n1. It was easy to verify during code review that a code action was not reformatting code.\n2. For code actions which _do_ reformat code, it was easy to see exactly which sections of the tree were subject to reformatting. This is particularly important because many projects request contributors refrain from reformatting code outside the scope of the specific changes they are proposing. Code actions should not make this task more difficult.\n\nDo you have a recommendation for developers to improve the ability to recognize these behaviors during code review (i.e. what should we now be looking for two check the two items I described above even before running the code)?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70380051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70383280", "body": "I implemented a `WithoutElasticTrivia` extension method in DotNetAnalyzers/StyleCopAnalyzers@10e217b to recursively remove `SyntaxAnnotation.ElasticAnnotation`, which seems to do the job from both an implementation and code review standpoint.\n\nI'm considering adding a related method `WithoutFormatting` which would involve a recursive removal of both `Formatter.Annotation` and `SyntaxAnnotation.ElasticAnnotation`. More importantly, if the rules for formatting change in the future, a `WithoutFormatting` method wouldn't need to change signature in order to work with the new API.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70383280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70486024", "body": "I have now implemented the `WithoutFormatting` extension method in DotNetAnalyzers/StyleCopAnalyzers@8973f3afa7958fb71ca7e7c94f29cde0d1278ae8, which addresses the concern of code review and provides a general solution to the issues I mentioned above.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70486024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70495619", "body": "@MadsTorgersen I looked over some code that uses lambdas and realized there are two cases where local function definitions would be particularly interesting.\n1. Writing recursive \"lambda\" functions.\n2. Assuming local function definitions cannot access local variables of the method in which they are defined, better (explicit) control over closure variables.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70495619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70514565", "body": "@jaredpar It sounds like you want to use the `calli` and `arglist` IL instructions in C# code...\n\nI could see a signature like this working pretty well:\n\n``` csharp\nWriteLine(params ArgIterator args)\n```\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70514565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70515487", "body": "I actually see your concern as a separate issue from `params IEnumerable<T>`. This topic (`IEnumerable<T>`) is about exposing a convenient method for simplified APIs, where memory allocation characteristics are often (but not always) much less of a concern.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70515487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70517365", "body": "@mburbea Two things\n1. I wasn't aware of that, so :sparkles: to you.\n2. That doesn't really count as \"being part of C#\", since it's not mentioned _at all_ in the language specification and therefore could differ in behavior between implementations.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70517365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70540622", "body": "@mikedn Suppose for example you have the following method:\n\n``` csharp\nint Sum(params int[] values)\n{\n  int sum = 0;\n  for (int i = 0; i < values.Length; i++)\n  {\n    sum += values[i];\n  }\n\n  return sum;\n}\n```\n\nNow suppose you want to implement the same method without requiring the creation of an array. I believe you could use this:\n\n``` csharp\nint Sum(params ArgIterator values)\n{\n  int sum = 0;\n  int count = values.GetRemainingCount();\n  for (int i = 0; i < count; i++)\n  {\n    sum += __refvalue(values.GetNextArg(), int);\n  }\n\n  return sum;\n}\n```\n\nI have not checked to determine at which point the second method is slower than the first.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70540622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70553037", "body": "This works fine in Visual Studio 2015 Preview (CTP 4). Did something change?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70553037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70677512", "body": "I use the internal type `DependentTypeFinder` in my [Inheritance Margin](https://visualstudiogallery.msdn.microsoft.com/3a55d546-0cb2-4991-a002-e6be8ce09f08) extension.\n\nhttps://github.com/tunnelvisionlabs/InheritanceMargin/blob/566f0d677cccc431a2f146a9f567b3eec3e97485/Tvl.VisualStudio.InheritanceMargin.CSharp/CSharpInheritanceAnalyzer.cs#L70-L76\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70677512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70678401", "body": "@nosami and @jmarolf: you both mentioned `FindDerivedTypesAsync`. I can't find any such method in the code; are you referring to the methods in `DependentTypeFinder` or some other piece of code which is not in this repository?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70678401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70754858", "body": "@paulomorgado https://github.com/openstacknetsdk/openstack.net/blob/bb0e8dfa42bd1ab32c233ee917592ec72673e350/src/OpenStackNetTests.Live/TestCategories.cs#L5-L9\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70754858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70904620", "body": ":bulb: If you are going to allow `static` (without the `readonly` modifier), you should probably update this to allow `static volatile` as well.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70904620/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70905564", "body": "For `static` local variables with an initializer, it seems like you could hoist the local to be a static member of a compiler-generated private nested class. This way you can still use a static constructor (of the nested class) to initialize the value, but in many cases avoid initializing the value until the first time the method is called.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70905564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70905564", "body": "For `static` local variables with an initializer, it seems like you could hoist the local to be a static member of a compiler-generated private nested class. This way you can still use a static constructor (of the nested class) to initialize the value, but in many cases avoid initializing the value until the first time the method is called.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70905564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70958053", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70958053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/12577331", "body": ":question: Why use `WaitAll` instead of the following?\n\n``` csharp\nawait Task.WhenAll(fixerTasks).ConfigureAwait(false);\n```\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12577331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12588119", "body": "In the future, can you include the pull request numbers for things like this (makes it much easier). This one was buried in otherwise-unrelated change dotnet/roslyn#4399. :smile: \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12588119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "IllidanS4": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24348", "title": "Compiler crash when implementing a varargs method via a base class in another assembly", "body": "**Version Used**: Visual Studio 15.4.0\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Compile the following code to one assembly:\r\n```cs\r\npublic class VarArgs\r\n{\r\n    public void Invoke(__arglist)\r\n    {\r\n        var ai = new System.ArgIterator(__arglist);\r\n        System.Console.WriteLine(ai.GetRemainingCount());\r\n    }\r\n}\r\n```\r\n2. Create a new assembly with this code, and reference the first one:\r\n```cs\r\ninterface IVarArgs\r\n{\r\n    void Invoke(__arglist);\r\n}\r\n\r\nclass MyVarArgs : VarArgs, IVarArgs\r\n{\r\n\r\n}\r\n```\r\n\r\n**Expected Behavior**: A valid assembly should be produced.\r\n\r\n**Actual Behavior**: The compiler crashes:\r\n\r\n> An unhandled exception of type 'System.IndexOutOfRangeException' occurred in Microsoft.CodeAnalysis.dll\r\n> Index was outside the bounds of the array.\r\n\r\n    Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.FatalError.Report(System.Exception exception, System.Action<System.Exception> handler)\r\n    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedTypeAsTask.AnonymousMethod__0()\r\n    [Native to Managed Transition] Annotated Frame\r\n    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.GetCallStackBehavior(Microsoft.CodeAnalysis.CSharp.BoundCall call)\r\n    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitCallExpression(Microsoft.CodeAnalysis.CSharp.BoundCall call, Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.UseKind useKind)\r\n    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitExpressionCoreWithStackGuard(Microsoft.CodeAnalysis.CSharp.BoundExpression expression, bool used)\r\n    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitExpression(Microsoft.CodeAnalysis.CSharp.BoundExpression expression, bool used)\r\n    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitStatements(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.BoundStatement> statements)\r\n    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock block)\r\n    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.GenerateImpl()\r\n    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.MethodCompiler.GenerateMethodBody(Microsoft.CodeAnalysis.CSharp.Emit.PEModuleBuilder moduleBuilder, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol method, int methodOrdinal, Microsoft.CodeAnalysis.CSharp.BoundStatement block, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CodeGen.LambdaDebugInfo> lambdaDebugInfo, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CodeGen.ClosureDebugInfo> closureDebugInfo, Microsoft.CodeAnalysis.CSharp.StateMachineTypeSymbol stateMachineTypeOpt, Microsoft.CodeAnalysis.CodeGen.VariableSlotAllocator variableSlotAllocatorOpt, Microsoft.CodeAnalysis.DiagnosticBag diagnostics, Microsoft.CodeAnalysis.CodeGen.DebugDocumentProvider debugDocumentProvider, Microsoft.CodeAnalysis.CSharp.ImportChain importChainOpt, bool emittingPdb, bool emitTestCoverageData, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CodeGen.SourceSpan> dynamicAnalysisSpans)\r\n    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileSynthesizedMethods(Microsoft.CodeAnalysis.CSharp.TypeCompilationState compilationState)\r\n    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol containingType)\r\n    Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedTypeAsTask.AnonymousMethod__0()\r\n    Microsoft.CodeAnalysis.dll!Roslyn.Utilities.UICultureUtilities.WithCurrentUICulture.AnonymousMethod__0()\r\n    mscorlib.dll!System.Threading.Tasks.Task.Execute()\r\n    mscorlib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)\r\n    mscorlib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)\r\n    mscorlib.dll!System.Threading.Tasks.Task.ExecuteWithThreadLocal(ref System.Threading.Tasks.Task currentTaskSlot)\r\n    mscorlib.dll!System.Threading.Tasks.Task.ExecuteEntry(bool bPreventDoubleExecution)\r\n    mscorlib.dll!System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "taori": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24346", "title": "Please add more information to AD0001", "body": "**Steps to Reproduce**:\r\n\r\n1. Write any diagnostic which raises an exception\r\n\r\n**Expected Behavior**:\r\nExpanding that diagnostic ideally would display the stack trace instead of just the message.\r\n\r\nAlso if the diagnostic would contain a hotlink to the syntax which made that error occur would be a great help - currently it does not even display the file which prompted that exception.\r\n\r\n**Actual Behavior**:\r\n![grafik](https://user-images.githubusercontent.com/5545184/35162638-4c31aef8-fd44-11e7-9d65-fcc19d313b54.png)\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23962", "title": "Debugging issue if property with name \"Environment\" exists", "body": "**Version Used**: \r\n\r\n**Steps to Reproduce**:\r\n![grafik](https://user-images.githubusercontent.com/5545184/34428535-1e4b03b0-ec4e-11e7-8d13-db5661594feb.png)\r\n\r\n**Expected Behavior**:\r\n\r\nThis code should not fail or crash. It should either not compile if it can't distinguish between members or pick the property as i would expect it to\r\n\r\n**Actual Behavior**:\r\n\r\nAs you can see in the image Environment is recognized as property by resharper as i would expect it. However when accessing \"Environment.Authentication\" an exception occurs. In the inspection window you can see the debugger thinks i want to use \"System.Environment\" - which i don't. ", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "UnoSD": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24344", "title": "Convert delegate to local function suggested fix breaks code in expressions", "body": "**Version Used**: \r\n2.6.0.62329 (5429b35d)\r\nVisual Studio 15.5.2\r\n\r\n**Steps to Reproduce**:\r\n```csharp\r\nvoid Method(Action action)\r\n{\r\n            \r\n}\r\n\r\nExpression<Action> Example()\r\n{\r\n    Action action = () => Method(null);\r\n\r\n    return () => Method(action);\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nNot to suggest a fix\r\n\r\n**Actual Behavior**:\r\nA fix is suggested to replace the delegate with a local function; if fix is implemented it breaks the code as local functions cannot be referenced by expression trees.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "JonHanna": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24334", "title": "Support non-trailing named arguments with dynamic.", "body": "Currently with the likes of:\r\n\r\n```C#\r\ndynamic s = \"abcabc\";\r\nint i = s.IndexOf(value: 'a', 2);\r\n```\r\nWe get CS8324.\r\n\r\nSince support for non-trailing named arguments has [recently been merged into corefx](https://github.com/dotnet/corefx/pull/25819), ideally roslyn could make use of it, rather than raising that error.\r\n\r\nIn itself this is simple, but identifying whether it will be supported or not is another matter.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mavasani": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24333", "title": "Intermittent test failure in CompilerServerUnitTests.FallbackToVbc", "body": "See https://ci.dot.net/job/dotnet_roslyn/job/features_async-streams/job/windows_release_unit64_prtest/26/ in PR https://github.com/dotnet/roslyn/pull/23961#issuecomment-358827027\r\n\r\n```\r\nMicrosoft.CodeAnalysis.CompilerServer.UnitTests.CompilerServerUnitTests.FallbackToVbc (from Roslyn.Compilers.CompilerServer.UnitTests)\r\n\r\n\r\nSystem.IO.IOException : The process cannot access the file 'D:\\\\j\\\\workspace\\\\windows_relea---3cac39cd\\\\Binaries\\\\Temp\\\\RoslynTests\\\\aeb95ce7-72c4-41dd-be0c-28fd1c4720d1\\\\hello.exe' because it is being used by another process.\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24212", "title": "SyntaxGenerator.NameOfExpression generates node with incorrect contextual kind", "body": "**Version Used**: 2.6.0\r\n\r\n**Steps to Reproduce**:\r\n\r\nUse the API [SyntaxGenerator.NameOfExpression](http://source.roslyn.io/#Microsoft.CodeAnalysis.CSharp.Workspaces/CodeGeneration/CSharpSyntaxGenerator.cs,71e00d6a497e12e8,references) to generate a `nameof` expression for C#. The identifier generated for `nameof` should be a contextual keyword, but it is not. Following test should pass, but fails:\r\n\r\n```\r\nvar nameofExpression = (InvocationExpressionSyntax)_g.NameOfExpression(_g.IdentifierName(\"x\"));\r\nAssert.True(((IdentifierNameSyntax)nameofExpression.Expression).Identifier.IsContextualKeyword());\r\n```\r\n\r\nSee skipped test `TestNameOfExpressions_ContextualKeyword` added with https://github.com/dotnet/roslyn/pull/24213\r\n\r\nAs a result,  binding fails for the compilation with generated syntax node with [CS0103](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0103) `The name 'nameof' does not exist in the current context`.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24104", "title": "Expose IOperation based Control Flow Graph API", "body": "Goal is to expose a **Control Flow Graph (CFG)** API with following characteristics:\r\n1. An API to get a `Basic Block` graph for a given executable code block\r\n2. Each basic block has:\r\n   1. A sequence of `IOperations`\r\n   2. A set of `successor` basic blocks and\r\n   3. A set of `predecessor` basic blocks\r\n3. This graph has following category of basic blocks:\r\n   1. A special `Entry` block, which is the first basic block with no predecessor and marks the start of the code block \r\n   2. A special `Exit` block, which is the last block with no successor and marks the end of the code block\r\n   3. `Intermediate` blocks which have one or more successors and predecessors\r\n4. Each operation within a basic block has following characteristics:\r\n   1. It represents a logical statement such that the operation has no type or constant value\r\n   2. It has no inherent control flow within it  (except possibly the last operation in the basic block), ie. all the operations within a basic block will always execute once the control enters the basic block. For example, all the loops, if-else statements, conditional expressions, etc. have been lowered to simpler set of operations with conditional and/or unconditional branch operations.\r\n   3. Each operation may map to a high level operation which has a direct mapping to original syntax or a low level operation with no direct mapping to original syntax (for example lowered code generated while synthesizing branch statements within loops).\r\n\r\n**High level design issues:**\r\n - [ ] Design the core API to get the CFG:\r\n       1. Exposed on semantic model?\r\n       2. What parameters does it take? Is the input an `IOperation` or `SyntaxNode` or `Symbol`?\r\n       3. Do we expose a CFG only for top level/root operation of an executable block OR allow users to request a CFG for any arbitrary operation/syntax node within executable code?\r\n\r\n - [ ] Basic block API:\r\n   - [ ] Should the last operation of the block be an implicit branch operation or an explicit conditional/unconditional branch operation?\r\n       1. Implicit branch proposal: Each basic block will have following additional fields to represent control flow out of the block:\r\n           1. `Next` basic block field to represent the target of an unconditional branch\r\n           2. Set of fields `(IOperation Condition, BasicBlock ConditionTarget, Boolean JumpIfConditionTrue)` to represent a conditional branch\r\n       2. Explicit branch proposal: Last operation of a basic block will always be an [IBranchOperation](http://source.roslyn.io/#q=IBranchOperation):\r\n           1. Add a new `BranchKind.ConditionalGoTo` to [BranchKind](http://source.roslyn.io/#Microsoft.CodeAnalysis/Operations/BranchKind.cs,8) enum and add additional fields `IOperation Condition`, `Boolean JumpIfConditionTrue` and `ILabelSymbol ConditionTarget` to [IBranchOperation](http://source.roslyn.io/#q=IBranchOperation).\r\n           2. Add an [ILabeledOperation](http://source.roslyn.io/#q=ILabeledOperation) at the start of each basic block, such that the underlying label symbol `ILabeledOperation.Label` will be the target of last branch operation of all predecessor blocks.\r\n   - [ ] Basic block scopes:\r\n           1. Do we want to allow basic blocks to contain operations from more than one source level scopes or not? \r\n           2. Do we want to expose a separate side data structure on Control flow graph that exposes a set of program scopes and the set of basic blocks that map to each scope?\r\n\r\n - [ ] Operations within basic block:\r\n   - [ ] Use Locals (and ref locals) versus special kind of Flow capture operations: When attempting to lower expressions with inherent control flow (conditional expressions, shortcircuiting expressions, etc.), we need to rewrite the operation such that operations within this expression that have been previously been evaluated are captured in prior operations. The result of these prior computed expressions need to be stored at some location and referenced in subsequent operations. We have two proposals to represent such capture:\r\n           1. Locals approach: Use synthesized locals for capturing intermediate results and `ILocalReferenceExpression` for the use. For lvalues, we can use ref locals\r\n           2. Introduce a special operation, say `IFlowCaptureOperation` which represents define or use of some intermediate result or lvalue\r\n   - [ ] High level operations versus low level operations\r\n           1. High level: Retain the high level operation tree for operations that have no inherent control flow. Each operation within a basic block can be a tree of arbitrary height.\r\n           2. Low level: Simplify all operations by writing intermediate operations within an operation tree into temp locals and then replacing sub-tree with a local reference to the temp\r\n   - [ ] List of operations to lower:\r\n           1. ILoopOperation and sub-types (loops)\r\n           2. IConditionalOperation (if statement and conditional expression)\r\n           3. IBinaryOperation (conditional short-circuiting operations and user defined)\r\n           4. ICoalesceOperation (null coalescing)\r\n           5. IConditionalAccessOperation (`?.` operator)\r\n\r\n   - [ ] Operation tree rewriter API: We should expose a language agnostic Operation tree rewriter/cloner API. We have public IOperation extension methods that call back into language specific code, which makes is tricky to expose such a rewriter. We need to discuss how we can accomplish this.\r\n\r\n - [ ] Release story:\r\n   - [ ] Do we want to put the APIs under a feature flag, say `FlowAnalysis` until we have validated the APIs with end-to-end dataflow analysis built on top of the API?\r\n   - [ ] Testing strategy and signoff requirements prior to merge into master\r\n\r\n - [ ] Implementation\r\n   - [ ] Single pass to generate basic blocks/flow graph while lowering the control flow operations versus use two separate passes, one for lowering to simpler operation tree and second for generating basic block graph from lowered operation tree. Former is more performant implementation, while the latter is modular and leaves scope for re-using the first lowering pass for exposing low level operation tree (independent of control flow/basic block) via `SemanticModel.GetOperation(operation level)` API.\r\n  ", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24104/reactions", "total_count": 5, "+1": 0, "-1": 0, "laugh": 0, "hooray": 2, "confused": 0, "heart": 3}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/dotnet/roslyn/commits/7d08ecde95027174fa766c612550934cb0fad93e", "message": "Merge pull request #24069 from mavasani/DiagnosticCreateCrash\n\nFix ArgumentException when creating diagnostic with effective severit\u2026"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/bb4c1876f42ead8270b5e2c2bd1fb02dc76b4cb8", "message": "Fix ArgumentException when creating diagnostic with effective severity error\n\nFixes VSO 547049"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/8f70a5287a5de6b651153424da9f70da07414c0b", "message": "Merge pull request #23794 from mavasani/Issue23775\n\nDo not allow source suppression for VS/host diagnostics"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/8d5adafc51235cde09d00a891f5c27f3e2df6de1", "message": "PR feedback"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/5c3dff5ba9c7905b8b194378acca7f0b288e366e", "message": "Merge pull request #23559 from mavasani/MoveToLatestPackages\n\nMove to latest analyzer/compiler toolset packages and fix violations \u2026"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/28732366a95aa6c57f7bcba9c8702567210a50c0", "message": "Do not allow source suppression for VS/host diagnostics\n\nThis fixes the UI delay from force binding all assembly attributes during solution load.\nFixes #23775"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/6697e045253bce5b812c7b47cd0a846e7b0f79be", "message": "Move to 2.6.0 release package"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/263a4634b16749960c6d2801d1b446b9b36d4cd0", "message": "Remove suppressions for analyzer bugs fixed in latest release"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24213", "title": "Add skipped unit test for https://github.com/dotnet/roslyn/issues/24212", "body": "https://github.com/dotnet/roslyn/issues/24212", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24071", "title": "Handle nameof expressions in UnboundIdentifiersDiagnosticAnalyzerBase", "body": "Fixes #23667\r\n\r\n<details><summary>Ask Mode template</summary>\r\n\r\n### Customer scenario\r\n\r\n`nameof` is incorrectly squiggled in a lambda with diagnostics with the following error:\r\n`Error\t IDE1007\tThe name 'nameof' does not exist in the current context.`. Note that the code compiles without errors and the IDE experience is very confusing.\r\n\r\n### Bugs this fixes\r\n\r\n#23667\r\n\r\n### Workarounds, if any\r\n\r\nIgnore the incorrect IDE1007\terrors\r\n\r\n### Risk\r\n\r\nLow risk, we are special casing nameof expressions in the unbound identifiers analyzer\r\n\r\n### Performance impact\r\n\r\nLow\r\n\r\n### Is this a regression from a previous update?\r\n\r\nNo\r\n\r\n### Root cause analysis\r\n\r\nAnalyzer was assuming each identifier name should bind to a symbol for successful bind. This is not true for `nameof`, which is represented as an `IdentifierNameSyntax` node in C#, but GetSymbolInfo returns no symbols for it.\r\n\r\n### How was the bug found?\r\n\r\nCustomer reported\r\n\r\n### Test documentation updated?\r\n\r\nN/A\r\n\r\n</details>\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/22517", "title": "Add IOperation unit tests for switch/select case statement", "body": "Fixes #17600 ", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/10349830", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10349830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12577372", "body": "Yes, it should be fixed. Let me do so right away. Thanks.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12577372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12587952", "body": "This is now fixed in master.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12587952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/13689837", "body": "This method is only needed in the test layer.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/13689837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/13689865", "body": "and GetDiagnosticsForSemanticModel is defined only in language specific Compilation types.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/13689865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "JiandongJiang": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24319", "title": "When using msbuild for a solution containing multiple projects, with the /p:ErrorLog parameter, it only saves Roslyn Analyzers' results for the last project but not for the other projects.", "body": "**Version Used**: MSBuild.exe v14.0 and v15.0\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a solution and add more than one C# project to it.\r\n2. Create a .targets which includes some paths to the Roslyn analyzers, and save it in the folder $(MSBuildUserExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.CSharp.targets\\ImportAfter\r\n3. Run a MSBuild command line, like this: \r\nMSBuild.exe SolutionWithMultipleProjects.sln [options] /p:ErrorLog=OutputName.sarif\r\n4. Check the analysis results in the output OutputName.sarif.\r\n\r\n**Expected Behavior**:\r\n/p:ErrorLog will save the Roslyn analysis results for all the projects in a solution.\r\n\r\n**Actual Behavior**:\r\n/p:ErrorLog only saves the Roslyn analysis results for the last project.\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "chborl": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24318", "title": "Refactor NavigateTo tests to remove duplicate code", "body": "As mentioned in feedback for #24193, there are a lot of duplicate tests between InteractiveNavigateToTests.cs and NavigateToTests.cs.   We should refactor them for maintainability.\r\n\r\nThe differences between these two files is:\r\n1)\tInteractive: => TestWorkspace.CreateCSharp(content, parseOptions: Options.Script);\r\n        Regular: => TestWorkspace.CreateCSharp(content, exportProvider: exportProvider);\r\n2)\tSome tests in interactive: VerifyNavigateToResultItem() use Glyph.ClassPrivate when Regular uses Glyph.ClassInternal\r\n3)\tInteractive: has an extra test for  FindVerbatimIdentifier, Regular: doesn\u2019t have above mentioned test, but has several more that interactive doesn\u2019t\r\n4)\tTermSplittingTest7 is different on both\r\n5)\tAll later bug fixes were done on NavigateToTests only\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24294", "title": "Pattern Matching: Consider using VS's algorithm for merging two or more matches", "body": "As discussed in #24193 , VS has an algorithm for merging two or matches that we may want to convert to if we don't end up moving over to VS's pattern matching.\r\n\r\nLink to source for full algorithm: https://devdiv.visualstudio.com/_search?type=code&lp=apps-projects-Collection&text=patternmatchextensions.cs&result=DefaultCollection%2FDevDiv%2FVS-Platform%2FGBmaster%2F%2Fsrc%2FEditor%2FText%2FImpl%2FPatternMatching%2FPatternMatchExtensions.cs&preview=1&_a=contents\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/dotnet/roslyn/commits/cb17284fe283183ebbbea4a69b785c3368432384", "message": "Merge pull request #23675 from chborl/removesolutioncrawlertest\n\nSkip SolutionCrawler.WorkCoordinatorTests.ProgressReporterTest until fixed"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/2db3f8b609394fc54682ad5a0672ed701225ef6c", "message": "Skip SolutionCrawler test"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/c4865b569c6de1dd2caddea2bb65ac7ce504fbdf", "message": "Fix build break"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/e7c369544ec02fa944cb02c5483ebd000f6aa8d7", "message": "Skip SolutionCrawler.WorkCoordinatorTests.ProgressReporterTest until investigated"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/22612", "title": "restrict keywords that trigger <see langword> tag and don't offer tag inside XML attribute", "body": "Fixes #22278 by restricting the keywords that will trigger the `<see langword=\" \">`  refactoring.  Also, prevents the doc comment tags from being offered when already in an XML attribute\r\n\r\n**Customer scenario**\r\nWhen a user types a keyword in a doc comments section, they are offered a refactoring to insert a `<see langword=\"  \">` tag.  This fix restricts the keywords that trigger the refactoring to only the most likely candidates so it isn't triggered on more common words like `is`, `as`, `for`, etc...  It also prevents the refactoring from being offered when the cursor is already in an XML attribute.\r\n\r\n**Bugs this fixes:**\r\n#22278 \r\n\r\n**Workarounds, if any**\r\nn/a\r\n\r\n**Risk**\r\nlow, this only affects the ReplaceDocCommentTextWithTag refactoring code\r\n\r\n**Performance impact**\r\nlow since it reduces the scenarios in which this refactoring is offered.\r\n\r\n**Is this a regression from a previous update?**\r\nno\r\n\r\n**Root cause analysis:**\r\ninitial design of this feature allowed all keywords in any part of the doc comments to trigger this refactoring.  \r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\nTests have been updated and added to cover the new scenarios\r\n\r\n**How was the bug found?**\r\ninternal test team\r\n\r\n**Test documentation updated?**\r\nn/a\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "NTaylorMullen": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24317", "title": "Code run in OOP host doesn't respect VS' culture settings", "body": "**Version Used**: \r\nVS 15.6-preview2\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Install Spanish VS language pack\r\n2. Start devenv.exe in Spanish local: devenv.exe /LCID 3082\r\n3. File => new Web App\r\n4. Run culture sensitive code in OOP host\r\n\r\n**Expected Behavior**:\r\n- Culture sensitive code returns Spanish based information\r\n\r\n**Actual Behavior**:\r\n- English based information is returned\r\n\r\n**Notes**:\r\nThis seems to be caused by the OOP host not having its current culture set to what VS has its language settings set to.\r\n\r\n/cc @heejaechang ", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ehasis": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24315", "title": "VB Wrong IDE0037 (Member name can be simplified) when member have same name of some variable", "body": "**Version Used**:  15.5.4\r\n\r\n**Steps to Reproduce**:\r\n1. In any VB project, consider the following code:\r\n```vb\r\nClass Customer\r\n    Public Property Age As Integer\r\nEnd Class\r\n\r\nSub Main()\r\n    Dim Age = 21\r\n    Dim c = New Customer With {.Age = Age}\r\nEnd Sub\r\n```\r\n\r\n**Expected Behavior**:\r\nDon't suggest IDE0037 fix for the `.Age = Age` object initialization.\r\n\r\n**Actual Behavior**:\r\nSuggesting IDE0037 fix for the `.Age = Age` object initialization (grayed out) and if you apply the fix the code became invalid and don't compile.\r\n\r\nIt's important to mention that this behavior only appears if the initialization member have the same name of some other member (local, parameter, instance, shared, etc.)\r\n\r\n**Note**: This problem doesn't manifest in C# code.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jbevain": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24312", "title": "Visualizing pointers as an array when debugging unsafe code", "body": "Let's take this code sample.\r\n\r\n```csharp\r\nusing System;\r\n\r\nunsafe class Program\r\n{\r\n\tstruct Vector3\r\n\t{\r\n\t\tpublic float x, y, z;\r\n\r\n\t\tpublic static Vector3 zero = new Vector3();\r\n\t\tpublic static Vector3 up = new Vector3 { x = 0, y = 1f, z = 0 };\r\n\t}\r\n\r\n\tstatic void Main(string[] args)\r\n\t{\r\n\t\tvar vectors = new Vector3[] { Vector3.up, Vector3.zero, Vector3.up };\r\n\r\n\t\tfixed (Vector3* v = vectors)\r\n\t\t{\r\n\t\t\tVectorPtr(v);\r\n\t\t}\r\n\t}\r\n\r\n\tstatic void VectorPtr(Vector3* v)\r\n\t{\r\n\t\tConsole.WriteLine(*v);\r\n\t}\r\n}\r\n```\r\n\r\nPut a breakpoint inside `VectorPtr`.\r\n\r\nIn `VC++`, in the Watch window, you can use the `v, 3` syntax to visualize the pointer as an array of 3 elements. It would be great to support it in C# as well.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "OliverNET": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24308", "title": "ProjectReference to .vbproj should be loaded", "body": "**Version Used**: Microsoft.CodeAnalysis 2.6.1 and Visual Studio 15.5.4\r\n\r\n**Steps to Reproduce**:\r\n\r\nSee attached file for sample code.\r\n[example.zip](https://github.com/dotnet/roslyn/files/1643172/example.zip)\r\n\r\n1. Create a new VB.NET console application \"ConsoleApp\" and add a new VB.NET Class Library project \"ClassLibrary\"\r\n2. Create a new VB.NET console application \"CodeAnalysis\" and install nuget package Microsoft.CodeAnalysis\r\n3. Add following code to CodeAnalysis Module1 to compile the ConsoleApp.sln:\r\n```vb\r\nImports Microsoft.CodeAnalysis\r\nImports Microsoft.CodeAnalysis.MSBuild\r\n\r\nModule Module1\r\n\r\n  Sub Main()\r\n\r\n    Dim solution As Solution\r\n\r\n    Using workspace = MSBuildWorkspace.Create()\r\n      workspace.SkipUnrecognizedProjects = False\r\n      workspace.LoadMetadataForReferencedProjects = True\r\n\r\n      solution = workspace.OpenSolutionAsync(\"C:\\source\\bug\\CodeAnalysis.sln\").Result()\r\n\r\n      For Each projectId In solution.GetProjectDependencyGraph().GetTopologicallySortedProjects()\r\n        Dim project As Project\r\n        Dim compilation As Compilation\r\n        Dim compileErrors As List(Of Diagnostic)\r\n\r\n        project = solution.GetProject(projectId)\r\n\r\n        compilation = project.GetCompilationAsync().Result\r\n\r\n        compileErrors = (From qItem In compilation.GetDiagnostics() Where qItem.Severity = DiagnosticSeverity.Error).ToList()\r\n        If compileErrors.Count > 0 Then\r\n          Throw New Exception(\"Compile error in project\")\r\n        End If\r\n      Next\r\n    End Using\r\n\r\n\r\n  End Sub\r\n\r\nEnd Module\r\n```\r\n\r\n4. Run the code - it works as expected\r\n5. Now add a reference in ConsoleApp to ClassLibrary. This will generate the following in ConsoleApp.vbproj\r\n```xml\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\ClassLibrary\\ClassLibrary.vbproj\">\r\n      <Project>{f303af39-f355-4ad6-874d-bce3c832bde1}</Project>\r\n      <Name>ClassLibrary</Name>\r\n    </ProjectReference>\r\n  </ItemGroup>\r\n```\r\nProject can still be built in Visual Studio.\r\n\r\n6. Run project CodeAnalysis again. Now there are lot of compileErrors. Property MetaReferences in failing \"project\" is not loaded completly.\r\n\r\nThanks for any hint how to build the project.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "alrz": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24300", "title": "Refactoring: Create extension method", "body": "This can be triggered in two places:\r\n\r\n1. On static methods with at least one parameter e.g. `static void M(object self) {}`\r\n2. On missing instance method invocations e.g. `obj.Missing();`\r\n\r\nIn both cases, we then list all extension classes (static classes that already have an extension method) for user to select and create/move the method there.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24210", "title": "Warn if stackalloc would throw with a constant size at runtime", "body": "e.g. `Span<int> s = stackalloc int[int.MaxValue]`\r\n\r\nSimilar to https://github.com/dotnet/roslyn/issues/8456\r\nRelates to warning waves", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24210/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24174", "title": "Span stackalloc size is not constant folded", "body": "**Version Used**:  https://github.com/dotnet/roslyn/commit/37ef0cdea72622fa9195b770808624c8dca007b3\r\n\r\n**Steps to Reproduce**:\r\n\r\n```cs\r\nSpan<int> s = stackalloc int[100];\r\nint* p = stackalloc int[100];\r\n```\r\n**Expected Behavior**: Push `400` onto the stack for both cases.\r\n\r\n**Actual Behavior**: `Span<T>` emits the multiplication itself regardless of the size being a constant. (this is not the case for the pointer)\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23824", "title": "Obsolete attributes are order-dependant", "body": "**Version Used**: https://github.com/dotnet/roslyn/commit/37ef0cdea72622fa9195b770808624c8dca007b3\r\n\r\n**Steps to Reproduce**:\r\n\r\n```cs\r\n[Obsolete]\r\n[Experimental]\r\nclass A\r\n{\r\n}\r\n\r\n[Deprecated(null, DeprecationType.Deprecate, 0)]\r\n[Experimental]\r\nclass B\r\n{\r\n}\r\n\r\nclass C\r\n{\r\n    static A F() => null; // warning CS8305: 'A' is for evaluation purposes only\r\n    static B G() => null; // warning CS8305: 'B' is for evaluation purposes only\r\n}\r\n```\r\n\r\n```cs\r\n[Experimental]\r\n[Obsolete]\r\nclass A\r\n{\r\n}\r\n\r\n[Experimental]\r\n[Deprecated(null, DeprecationType.Deprecate, 0)]\r\nclass B\r\n{\r\n}\r\n\r\nclass C\r\n{\r\n    static A F() => null; // warning CS0612: 'A' is obsolete\r\n    static B G() => null; // warning CS0612: 'B' is obsolete\r\n}\r\n```\r\n\r\n**Expected Behavior**: Obsolete should not be order-dependant.\r\n\r\n**Actual Behavior**: Obsolete attributes are order-dependant.\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/dotnet/roslyn/commits/4d92b18aee99ba8b1b4770ce65133e9ca65a94fe", "message": "Simplify codegen for struct declaration patterns (#23635)\n\n* Simplify codegen for struct declaration patterns\r\n* Move box to perform the conversion only when the test succeeds"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/adbce761b91992740c128b7d4233f51b49541e97", "message": "Relax ordering constraints for parameter modifiers (#23643)\n\nMerging on behalf of @alrz. Thanks!"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24345", "title": "Optimize switch on conditional access", "body": "Fixes https://github.com/dotnet/roslyn/issues/21962\r\n\r\nGenerates the following:\r\n```\r\n  // Code size       28 (0x1c)\r\n  .maxstack  1\r\n  .locals init (int V_0)\r\n  IL_0000:  ldarg.0\r\n  IL_0001:  brfalse.s  IL_000e\r\n  IL_0003:  ldarg.0\r\n  IL_0004:  call       \"\"int string.Length.get\"\"\r\n  IL_0009:  stloc.0\r\n  IL_000a:  ldloc.0\r\n  IL_000b:  brfalse.s  IL_0015\r\n  IL_000d:  ret\r\n  IL_000e:  ldc.i4.0\r\n  IL_000f:  call       \"\"void System.Console.Write(int)\"\"\r\n  IL_0014:  ret\r\n  IL_0015:  ldc.i4.1\r\n  IL_0016:  call       \"\"void System.Console.Write(int)\"\"\r\n  IL_001b:  ret\r\n```\r\nInstead of:\r\n```\r\n  // Code size 61 (0x3d)\r\n  .maxstack 1\r\n  .locals init (\r\n      [0] valuetype [mscorlib]System.Nullable`1<int32>,\r\n      [1] valuetype [mscorlib]System.Nullable`1<int32>,\r\n      [2] int32\r\n  )\r\n\r\n  IL_0000: ldarg.0\r\n  IL_0001: brtrue.s IL_000e\r\n  IL_0003: ldloca.s 1\r\n  IL_0005: initobj valuetype [mscorlib]System.Nullable`1<int32>\r\n  IL_000b: ldloc.1\r\n  IL_000c: br.s IL_0019\r\n  IL_000e: ldarg.0\r\n  IL_000f: call instance int32 [mscorlib]System.String::get_Length()\r\n  IL_0014: newobj instance void valuetype [mscorlib]System.Nullable`1<int32>::.ctor(!0)\r\n  IL_0019: stloc.0\r\n  IL_001a: ldloca.s 0\r\n  IL_001c: call instance bool valuetype [mscorlib]System.Nullable`1<int32>::get_HasValue()\r\n  IL_0021: brfalse.s IL_002f\r\n  IL_0023: ldloca.s 0\r\n  IL_0025: call instance !0 valuetype [mscorlib]System.Nullable`1<int32>::GetValueOrDefault()\r\n  IL_002a: stloc.2\r\n  IL_002b: ldloc.2\r\n  IL_002c: brfalse.s IL_0036\r\n  IL_002e: ret\r\n  IL_002f: ldc.i4.0\r\n  IL_0030: call void [mscorlib]System.Console::Write(int32)\r\n  IL_0035: ret\r\n  IL_0036: ldc.i4.1\r\n  IL_0037: call void [mscorlib]System.Console::Write(int32)\r\n  IL_003c: ret\r\n```\r\nFor this method:\r\n```cs\r\n    static void M(string str)\r\n    {\r\n        switch(str?.Length)\r\n        {\r\n            case null:\r\n                Console.Write(0);\r\n                break;\r\n            case 0:\r\n                Console.Write(1);\r\n                break;\r\n        }\r\n    }\r\n```", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24249", "title": "Implement stackalloc initializers", "body": "Proposal: https://github.com/dotnet/csharplang/pull/1122\r\n\r\n> ```cs\r\n> stackalloc int[3]\t\t\t\t// currently allowed\r\n> stackalloc int[3] { 1, 2, 3 }\r\n> stackalloc int[] { 1, 2, 3 }\r\n> stackalloc[] { 1, 2, 3 }\r\n> ```\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24183", "title": "Capture stackalloc size expression only if needed", "body": "Fixes https://github.com/dotnet/roslyn/issues/24174", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24080", "title": "Extend eligible params types to array generic interfaces", "body": "Proposal: https://github.com/dotnet/csharplang/issues/179", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23861", "title": "[WIP] Support CallerArgumentExpressionAttribute", "body": "Proposal: https://github.com/dotnet/csharplang/issues/287", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23533", "title": "Relax ordering constraints around 'ref' and 'partial' modifiers on type declarations", "body": "Proposal: https://github.com/dotnet/csharplang/issues/946 (as part of C# 7.3)\r\n\r\nAlso related: https://github.com/dotnet/csharplang/issues/1022\r\n\r\n\r\n\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23244", "title": "Use kind for syntax node type checks", "body": "Use `Kind` rather than a type switch. Due to https://github.com/dotnet/roslyn/pull/22140 we now rely on type switch which has worse perf.\r\n\r\nIs this change preferable overall? has this a significant perf gain? If so, I'll continue to change other usages as well.\r\n\r\n/cc @sharwell ", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/21433", "title": "Add a feature to duplicate methods", "body": "Fixes https://github.com/dotnet/roslyn/issues/21030", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/20269", "title": "return, break and continue expressions", "body": "Prototype for https://github.com/dotnet/csharplang/issues/176\r\n\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/20246", "title": "Support negative null-checks when we offer a fix to use pattern-matching", "body": "Follow up: https://github.com/dotnet/roslyn/pull/20240\r\n- [x] Fix https://github.com/dotnet/roslyn/issues/21097\r\n- [x] Fix https://github.com/dotnet/roslyn/issues/24286\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/16808", "title": "Add a code refactoring to convert local function to method", "body": "Fixes #16288 \r\n\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/14535767", "body": "What is the use case of this being _pattern_? Shouldn't it be _complex-pattern_?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14535767/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14537015", "body": "Though, now that I thought about it, this can be useful like\n\n``` cs\nFunctionWithALongName() case var result : <expression-using-result>\n//instead of \n(var result = FunctionWithALongName() ; <expression-using-result>)\n```\n\nI don't know which one would you prefer.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14537015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14537496", "body": "Your example in [#3718 (comment)](https://github.com/dotnet/roslyn/issues/3718#issuecomment-158521965) could be easily written with `case`,\n\n> ``` cs\n> CostlyFunction(x) switch (case var tmp: new {\n>    A = tmp.Field1,\n>    B = tmp.Field2,\n>    C = tmp.Field3 == 5 ? tmp.Field1 : tmp.Field2\n> })\n> ```\n\n``` cs\nCostlyFunction(x) case var tmp: new {\n   A = tmp.Field1,\n   B = tmp.Field2,\n   C = tmp.Field3 == 5 ? tmp.Field1 : tmp.Field2\n}\n```\n\nSo it _has_ some use cases. That was what I wanted to know. Thanks.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14537496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14541524", "body": "I was the one that asked why it is chosen to be _pattern_ now I'm defending it :smile: anyway I think it's nice that variable declaration is closer to its usage.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14541524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "Geneticus": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24289", "title": "Codefix for Must declare namespace on aspx.cs pages causes error by not updating the Inherits attribute in the aspx page.", "body": "**Version Used**: Microsoft.CodeDom.Providers.DotNetCompilerPlatform v1.0.8\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. create ASP>Net Web Application (.Net Framework) with masterpage\r\n2. add new file to solution (aspx page C#) create control on page that is set in page_load event.\r\n3. run build solution\r\n4. VS created public partial class\r\n5. roslyn warns to add to namespace\r\n6. apply quick fix\r\n7. reference to cs. file is broken in aspx file because aspx Inherits attribute wasn't updated to include Namespace.PreviousPartialClass\r\n\r\n**Expected Behavior**:\r\nQuick fix should prepend namespace added to aspx file.\r\n**Actual Behavior**:\r\nFixing Warning automatically, causes build error.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MaceWindu": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24287", "title": "\"Use pattern matching\" can introduce variable in scope that already have variable with such name", "body": "**Version Used**: 15.5.4\r\n\r\n**Steps to Reproduce**:\r\n```cs\r\n    public class Test\r\n    {\r\n        public void TestIt(object o)\r\n        {\r\n            if (o is int)\r\n            {\r\n                var value = (int)o;\r\n            }\r\n            else if (o is Guid value)\r\n            {\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\n**Expected Behavior**:\r\nNot sure really... but at least it shouldn't produce broken code\r\n\r\n**Actual Behavior**:\r\n```cs\r\n    public class Test\r\n    {\r\n        public void TestIt(object o)\r\n        {\r\n            if (o is int value)\r\n            {\r\n            }\r\n            //  CS0136 A local or parameter named 'value' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter\r\n            else if (o is Guid value)\r\n            {\r\n            }\r\n        }\r\n    }\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24287/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24286", "title": "invalid \"Use pattern matching\" fix for OR condition", "body": "Not sure if it is a separate issue or duplicate of #21097, as it produce the same error but with different code pattern.\r\n\r\n**Version Used**: 15.5.3, 15.5.4\r\n\r\n**Steps to Reproduce**:\r\n\r\n```cs\r\n    public class Test\r\n    {\r\n        public void TestIt(object o1, object o2)\r\n        {\r\n            var test = o1 as Test;\r\n            if (test != null || o2 != null)\r\n            {\r\n                var o3 = test ?? o2;\r\n            }\r\n        }\r\n    }\r\n```\r\n**Expected Behavior**:\r\nno fix proposal\r\n\r\n**Actual Behavior**:\r\n```cs\r\n    public class Test\r\n    {\r\n        public void TestIt(object o1, object o2)\r\n        {\r\n            if (o1 is Test test || o2 != null)\r\n            {\r\n                // CS0165: Use of unassigned local variable 'test'\r\n                var o3 = test ?? o2;\r\n            }\r\n        }\r\n    }\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24262", "title": "Invalid \"use var instead of explicit type\" fix with explicit interface implementations", "body": "**Version Used**: 15.5.3, 15.5.4\r\n\r\n**Steps to Reproduce**:\r\n\r\n```cs\r\n    public interface ITest\r\n    {\r\n        string Value { get; }\r\n    }\r\n\r\n    public class TestInstance : ITest\r\n    {\r\n        string ITest.Value => \"Hi\";\r\n    }\r\n\r\n    public class Test\r\n    {\r\n        public TestInstance[] Instances { get; }\r\n\r\n        public void TestIt()\r\n        {\r\n            // here we get suggestion to change ITest to var\r\n            // which is wrong, because:\r\n            // 1. TestInstance != ITest\r\n            // 2. ITest implemented explicitly\r\n            foreach (ITest test in Instances)\r\n            {\r\n                Console.WriteLine(test.Value);\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\n**Expected Behavior**:\r\nno fix proposed\r\n\r\n**Actual Behavior**:\r\nproposed fix breaks code", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "VSadov": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24275", "title": "When forced into spilling a byref method VB compiler asserts. Should it be an error?", "body": "Testcase: SpillingByrefCall_Spilling\r\n\r\nC# class introduces ref methods\r\n```C#\r\nusing System;\r\n\r\npublic class TestClass\r\n{\r\n    int x = 0;\r\n\r\n    public ref int Save(int y)\r\n    {\r\n        x = y;\r\n        return ref x;\r\n    }\r\n\r\n    public void Write(ref int y)\r\n    {\r\n        Console.WriteLine(y);\r\n    }\r\n\r\n    public void Write(ref int y, int z)\r\n    {\r\n        Console.WriteLine(y);\r\n    }\r\n}\r\n```\r\n\r\nVB test code (references the above code):\r\n```VB\r\nImports System.Threading.Tasks\r\n\r\nModule Module1\r\n\r\n    Sub Main()\r\n        TestMethod().Wait()\r\n    End Sub\r\n\r\n    Async Function TestMethod() As Task\r\n        Dim inst = New TestClass\r\n\r\n        ' ERROR?\r\n        ' currently `ref` is spilled 'by-value' and assert fires.\r\n        inst.Write(inst.Save(Await Task.FromResult(30)), inst.Save(Await Task.FromResult(33)))\r\n    End Function\r\n\r\nEnd Module\r\n```\r\n\r\nExpected: \r\n- not sure. C# gives an error. Possibly VB should as well\r\n\r\nActual:\r\n- compiler asserts. If ignored, the `ref` argument is spilled by-value\r\n\r\nIt might actually be ok in VB to spill by-value. Not sure. \r\nIn any case there should not be asserts.\r\n\r\nAlso note - changing current behavior (ignoring the assert) might be a compat concern. This behavior existed since the last release.\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23951", "title": "Compiler should emit `localinits` when method body contains `stackalloc`", "body": "Currently the `localinits` is triggered by the presence of IL locals. However the flag has effect on everything that is allocated from local frame, including `stackalloc`.\r\n\r\nNOTE: the absence of the flag results in stackallocated data containing nondeterministic garbage and as such emitting the flag is not compat breaking.\r\n\r\nWhile the language spec does not specify or require that, stackallocated memory is nearly always zero-inited and users often take dependency on that. Suddenly not emitting the flag could result in bugs that are very hard to reproduce.\r\nWe should make sure that the flag is emitted in _all_ cases and document the default behavior as such.\r\n\r\nNOTE: the cases with opposite expectations are also known -\r\nSome users use this bug as a way to avoid costs of zeroing out stack-allocated memory. We should provide a more stable and documented way to do that.  \r\n\r\nRelying on essentially a bug that is triggered by unstable condition such as absence of IL locals is not a maintainable strategy anyways.\r\n\r\nProposal: https://github.com/dotnet/csharplang/blob/master/proposals/skip-localsinit.md", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/dotnet/roslyn/commits/d0ccd99cec8e1c3d19139dead257df8950ce0181", "message": "Merge pull request #24164 from VSadov/blockIn\n\nBlock use of  explicit `in` arguments in dynamically dispatched expressions."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/54f324bbacfb8d9c6350273470aab7bad7888e6c", "message": "Merge pull request #24200 from dotnet/merges/dev15.6.x-to-master-20180112-080018\n\nMerge dev15.6.x to master"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/6ab2391a3acd4c046eacf30b0be3f2478f0ddb88", "message": "Added more tests"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/28b182d89ebcdac76c37bb84e9d0ec65b38a9b5e", "message": "added a test with two arguments"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/8cc031276414977b79e604c4e2cf9d6670a15783", "message": "Merge pull request #24166 from dotnet/merges/dev15.6.x-to-master-20180111-080017\n\nMerge dev15.6.x to master"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/831323c19c9ef4172a5e0f783d9be57785233363", "message": "A better error message.  ( keyword should be in ' ' quotes )"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/ac833d06b42ff03a8adae95f3fbd2130da2a02fb", "message": "Block use of  explicit `in` arguments in dynamically dispatched expressions.\n\nExplicitly marking an argument as an `in` argument has effect on overload resolution and needs to be known to the dynamic binder to be able to make appropriate decisions. For the time being there is not way to pass this additional information.\nThat would require a small expansion of APIs used by `dynamic`. When we have such API, we should predicate this scenario on the presence of such API.\n\nFor now, In order to not perpetuate accidental and likely incorrect behavior we should block this scenario.\n\nFixes:#22813"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/fee11306f08b0fe3a92d614a79e62e51d7829673", "message": "Merge pull request #24128 from VSadov/missingRef\n\nThe argument that stands for the receiver of a `ref` extension method must be always passed as `ref`"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/a3f1a7920a1fa1ea6f49960fce1556e7edb5f8fd", "message": "fixed a typo"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/542daef64095e903bb18dae4c65ac16de7e48cb0", "message": "Merge pull request #24141 from dotnet/merges/dev15.6.x-to-master-20180110-080017\n\nMerge dev15.6.x to master"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/37ba801f26adb599ad83638135c1b5d5ee71d4bb", "message": "add a test with a local function"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/aa38449a03d16184a119115bce4a7d339fe24522", "message": "Handle passing `this` to an `in` parameter"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/e84ce90f636d4eb4debff495353767da7a97b963", "message": "Call rewrite could overwrite \"out\" with \"ref\". Should not do that."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/bbf0a2e6ab3d030387d7c7647886bc67bfcbe4e6", "message": "added an assert to make sure the refkind is sensible by the time we reach emit."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/5bcfa7cdd6f5e664ee55c73fd2faca873a4a5987", "message": "The argument that stands for the receiver of a `ref` extension method must be always passed as `ref`"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/252821c1293bb2a4b7dfbec671418a6b247b3486", "message": "updated channel for master-vs-deps"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/4b362432668ca1e7c2c732cd0ea9882696501faf", "message": "Bumped up the version in master-vs-deps"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/0070d8174fe22044a5560bce26d53932ee4a6023", "message": "PR feedback"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/a8b23078990ae026d11668fb8b780411df2511b4", "message": "Adding entries for 15.6 branches"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/062dbbb620fd782aba5ef7911c68124596dcc812", "message": "Merge pull request #24062 from VSadov/verifyUnsafe\n\nDo not autodisable verification based on unsafe compilation option."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/6efa39ed40c02dc2dbbb2d69b1e982ed12fa1fe6", "message": "Do not autodisable verification based on unsafe compilation option."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/7ad9a462a689366ecbf5d24198beca9ea3e238ed", "message": "Merge pull request #24038 from dotnet/merges/dev15.6-preview2-to-master-20180104-080013\n\nMerge dev15.6-preview2 to master"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/a2f028526a329950a891d5c74a5b8d703168297c", "message": "Merge pull request #23814 from jinujoseph/RemoveRenameCommand\n\nRemoving the rename command target from Roslyn as it will be part of core editor platform"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/c9179f863872ab69b6ecf82c056e31d6b28b4c59", "message": "Merge pull request #24009 from dotnet/merges/dev15.5.x-to-dev15.6-preview2-20180103-080012\n\nMerge dev15.5.x to dev15.6-preview2"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24299", "title": "Makes range operators built-in operators", "body": "", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/20502", "title": "Simplified initialization of PEMethodSymbol.UncommonFields", "body": "Do not use both sentinel and a flag to indicate that value is initialized in PEMethodSymbol.UncommonFields\r\n\r\nUnnecessary complexity here leads to races and failures that are very hard to reproduce.\r\n\r\nRelated to https://github.com/dotnet/roslyn/pull/20497 and\r\nhttps://github.com/dotnet/roslyn/issues/20496\r\n\r\n", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70301298", "body": "It is allowed to have void returning conditional accesses in statement expression scenarios. Scenarios like  resource?.Dispose()   or   event1?.Invoke()  seem very useful. \nSince we agree on allowing void in such scenarios, it makes sense to remove nullability requirement as well.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70301298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70696618", "body": "At some point we had internal visitors generic visitors parameterized on parameters like `SyntaxVisitor<TArgument, TResult>` .They were convenient, but not very fast because of virtual generic Accept. Eventually all the visitors switched to the faster version `SyntaxVisitor<TResult>`.\nThere were some arguments that at some point we might still need the convenience of `SyntaxVisitor<TArgument, TResult>`, so it was not removed, just commented out.\n\nPerhaps it is time to remove it :-)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70696618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70697329", "body": ".\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70697329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/16739030", "body": "Yes. :-) will fix that. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16739030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "amcasey": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24268", "title": "Highlight References not symmetric in Tuples", "body": "Select \"action\" here:\r\nhttps://github.com/dotnet/roslyn/blob/6db04109879e42fbe99a3c1e8f1d44175c041e73/src/Workspaces/Core/Portable/CodeFixes/FixAllOccurrences/BatchFixAllProvider.cs#L176\r\n\r\nExpected: 4 occurrences (1 def, 3 refs)\r\nActual: 1 occurrence (selected)\r\n\r\nNote: FAR correctly shows all 4\r\nNote: Selecting any of the other three occurrences highlights all four occurrences (including the problematic one)\r\n\r\n![image](https://user-images.githubusercontent.com/10508071/35017938-293ce240-fad4-11e7-9bd2-a17575885349.png)\r\n\r\n![image](https://user-images.githubusercontent.com/10508071/35017953-37483cc2-fad4-11e7-8603-bb076d09b28c.png)\r\n\r\n(Internal) Version 27315.1.d15.6", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70889636", "body": "Doesn't the fact that PartialImplementationPart is null tell you that it has no body?  I believe PartialDefinitionPart is null because you're already on the definition part.\n\n```\n    /// <summary>\n    /// If this is a partial method implementation part, returns the corresponding\n    /// definition part.  Otherwise null.\n    /// </summary>\n    IMethodSymbol PartialDefinitionPart { get; }\n```\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70889636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/12575486", "body": "To get the span after the prompt (as `GetClosestPrecedingInputSpan` used to do).\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12575486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12576094", "body": "Sure.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12576094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12576101", "body": "Frankly, I was thinking more about mutations between accesses.  I can revert them though, if you prefer.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12576101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12576132", "body": "I talked to @basoundr, who suggested that the issue may not be with how we're using the service.  If you like, I can file a bug to investigate further.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12576132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12576918", "body": "I think the pattern is sufficiently common.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12576918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12576921", "body": "I like it.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12576921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12576930", "body": "I'm going to keep it, but use `nameof` (as I should have to begin with).\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12576930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12577019", "body": "Changed `GetPromptIndexForLine` to `GetPromptIndexForPoint`.  I'm not sure how much else can be reused.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12577019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15810977", "body": "In case someone introduces another type into the hierarchy.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15810977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "jcouv": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24267", "title": "Definite assigning from async local function seems wonky", "body": "The first code sample is an existing test, and arguably behaves correctly (the async local function is only guaranteed to execute until the first await is reached).\r\n\r\nThe second code sample shows that this behavior doesn't change when calling the local function with await.\r\n\r\nThe third code sample shows that adding a finally inside the local function affects the definite assignment of `y`, but it's hard to see why.\r\n\r\nTagging @AlekseyTs @agocke @gafter \r\n\r\nRelates to my recent PR on async using (https://github.com/dotnet/roslyn/pull/23961).\r\n\r\n```C#\r\nusing System.Threading.Tasks;\r\nclass C\r\n{\r\n    public static void M2()\r\n    {\r\n        int a=0, x, y, z;\r\n        L1();\r\n        a++;\r\n        x++;\r\n        y++; // error CS0165: Use of unassigned local variable 'y'\r\n        z++; // error CS0165: Use of unassigned local variable 'z'\r\n\r\n        async void L1()\r\n        {\r\n            x = 0;\r\n            await Task.CompletedTask;\r\n            y = 0;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n```C#\r\nusing System.Threading.Tasks;\r\nclass C\r\n{\r\n    public static async Task M2()\r\n    {\r\n        int a=0, x, y, z;\r\n        await L1(); // adding await doesn't affect the warnings (is that correct?)\r\n        a++;\r\n        x++;\r\n        y++; // error CS0165: Use of unassigned local variable 'y'\r\n        z++; // error CS0165: Use of unassigned local variable 'z'\r\n\r\n        async Task L1()\r\n        {\r\n            x = 0;\r\n            await Task.CompletedTask;\r\n            y = 0;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n```C#\r\nusing System.Threading.Tasks;\r\nclass C\r\n{\r\n    public static void M2()\r\n    {\r\n        int a=0, x, y, z;\r\n        L1();\r\n        a++;\r\n        x++;\r\n        y++; // no error anymore. That seems wrong\r\n        z++; // error CS0165: Use of unassigned local variable 'z'\r\n\r\n        async void L1()\r\n        {\r\n            try\r\n            {\r\n            \tx = 0;\r\n            \tawait Task.CompletedTask;\r\n            }\r\n            finally\r\n            {\r\n                y = 0; // assigning y in finally removes the error on y above \r\n            }\r\n        }\r\n    }\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24105", "title": "Iteration variable type in deconstruction-foreach is surprising", "body": "From discussion with Neal, the purpose of `BoundForEachStatement.IterationVariableType` is to capture the type from the syntax, rather than the type from the collection. In a deconstruction, that is currently not the case (step through a test like `ValueTupleNotRequiredIfReturnIsNotUsed` to see that).\r\n\r\n```C#\r\nprivate BoundForEachStatement BindForEachPartsWorker(DiagnosticBag diagnostics, Binder originalBinder)\r\n{\r\n  ...\r\n  switch (_syntax.Kind())\r\n  {\r\n    ...\r\n    case SyntaxKind.ForEachVariableStatement:\r\n    {\r\n      iterationVariableType = inferredType ?? CreateErrorType(\"var\");\r\n      ...\r\n      // this currently captures the type from the collection, but should instead correspond to the\r\n      // type in the syntax, or maybe there should be two types\r\n      boundIterationVariableType = new BoundTypeExpression(variables, aliasOpt: null, type: iterationVariableType).MakeCompilerGenerated();\r\n```\r\n  ", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24105/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24037", "title": "[Umbrella] Work items for async streams", "body": "## Overall\r\n- [x] parsing (PR https://github.com/dotnet/roslyn/pull/23866)\r\n- [ ] IDE completion and colorizing (https://github.com/dotnet/roslyn/pull/23960)\r\n\r\n## Async using and foreach\r\n- [ ] async using (PR https://github.com/dotnet/roslyn/pull/23961)\r\n- [ ] async foreach\r\n- [ ] Implement semantic model API similar to `GetAwaitExpressionInfo`\r\n- [ ] Implement IOperation support\r\n- [ ] Verify FAR on `AsyncDispose` method\r\n\r\n## Iterator methods\r\n- [ ] iterator methods\r\n\r\n## LDM open issues:\r\n\r\nChampioned issue: https://github.com/dotnet/csharplang/issues/43 (includes LDM notes)\r\n\r\n\r\n## Test ideas for async using:\r\n- [ ] Look up Lippert's blog on using with struct or generic type T\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24037/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23979", "title": "Deal with left-over PROTOTYPE comment in ExtractLocalFunctionCallWithCapture", "body": "I'll remove this marker in upcoming PR. This is a follow-up issue.\r\n\r\n```C#\r\n        [Fact]\r\n        [WorkItem(15532, \"https://github.com/dotnet/roslyn/issues/15532\")]\r\n        public async Task ExtractLocalFunctionCallWithCapture()\r\n        {\r\n            // PROTOTYPE: doesn't properly extract local function\r\n            await TestInRegularAndScriptAsync(@\"\r\nclass C\r\n{\r\n    public static void Main(string[] args)\r\n    {\r\n        bool Local() => args == null;\r\n        [|Local();|]\r\n    }\r\n}\", @\"\r\nclass C\r\n{\r\n    public static void Main(string[] args)\r\n    {\r\n        bool Local() => args == null;\r\n        {|Rename:NewMethod|}(args);\r\n    }\r\n\r\n    private static void NewMethod(string[] args)\r\n    {\r\n        {|Warning:Local();|}\r\n    }\r\n}\");\r\n        }\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23850", "title": "Consider removing StateWhenFalse/StateWhenTrue/ConditionalState from flow analysis base", "body": "I'm wondering whether the fields for conditional states should be removed, and left to the various Visit methods to keep track of.\r\n\r\nDiscussion with @cston: https://github.com/dotnet/roslyn/pull/23439#issuecomment-352528222", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23789", "title": "Test plan for slicing/Range feature", "body": "This is a placeholder to track test ideas and open issues.\r\n\r\n\r\n\r\n\r\nWe should be able to finalize Range API by end of Jan (including review with LDM), so the implementation can be completed in Feb.\r\n\r\nVarious aspects of proposal:\r\n- Specific vs. generic types: It may be possible to do a generic Range<T> and still implement some enumerables on it (via extensions), but we\u2019re strongly leaning towards specific types (either 1 or 2). Range would be `int`. LongRange would be `long`.\r\n- End included vs. excluded: In `foreach (var i in 1..10)` it makes sense for 10 to be excluded. In `5.in(1..10)` it makes some sense for 10 to be included. Overall, we\u2019re leaning towards excluding the End.\r\n- Start+End vs. Start+Length: Strong preference for start+end to conform to language syntax and other languages.\r\n- Upwards-only vs upwards+downwards\r\n\r\nTest ideas:\r\n- [ ] `foreach (var i in 10..0) // decreasing`\r\n\r\nVarious links:\r\n- [PR](https://github.com/dotnet/corefxlab/pull/1979) for Range type\r\n- [Another PR](https://github.com/dotnet/corefxlab/pull/1981) for Range type\r\n- Champion issue: https://github.com/dotnet/csharplang/issues/185\r\n\r\n  ", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23786", "title": "Consider sharing code between C# and VB DataFlowAnalysis", "body": "`VisualBasicDataFlowAnalysis.vb` and `CSharpDataFlowAnalysis.cs` are largely the same.\r\n\r\nDiscussed in https://github.com/dotnet/roslyn/pull/23428#pullrequestreview-82661368", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/dotnet/roslyn/commits/ea8aaba19c4ea2ea304bc6fe6dd14a5e11b6af62", "message": "Test ConvertedType on LHS of deconstruction-assignment (#24158)"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/183bb0096629fe1879e0c2707503171a5d6c5697", "message": "FindAllReferences on Deconstruct should consider all documents (#24223)"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/005f4f63179810d7051fc6944ae488f85a68da81", "message": "Recommend \"when\" keyword after case-pattern-switch-label (#24131)"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/001a62df79ed9d6ee608eb21de20f9f86d45c9e7", "message": "Honor type style preferences on tuple literals (#23936)"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/6dc35229e9e2e8c52e744f526913145fb19f8dd4", "message": "UseExplicitType for var in deconstruction (#23975)"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/06efa59152b5a0bed1d8dcb4977c132c69f070de", "message": "UseExplicitType: Arrays/pointers/nullables of intrinsic types are intrinsic. \u2026 (#24114)\n\n* Arrays/pointers/nullables of intrinsic types are intrinsic. Type of array creations is apparent. Handle out vars."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/bb5d3736ff04bcc3c1d991245f5cf8011d63f8a3", "message": "Offer 'in' as completion in operator (#24089)"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/f8dab73c81bac03ddf358b897785868473e2c8a7", "message": "Add \"async streams\" feature (#23958)"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/6c3bfeda802f55040624f0de33f644b46a7d9b6f", "message": "AddParameter should handle and bail out on omitted argument (#23933)"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/1d28ff9ba248b332de3c84d23194a1d7bde07e4d", "message": "Command-line options starting with dash are not file paths (#23935)"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/b0bd4af8ff88e5692cff8a8251f1fe17bed879ef", "message": "Add test for obsolete Deconstruct method (#23931)"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/5aa8207c84f99bc764dc1208d285c414dac7e51d", "message": "Clarify one point in Jenkins instructions for new branch (#23868)"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/6eb8db0570b3d252e21bca2db479684f4067b64d", "message": "UseInferredMemberName: only field initializers in anonymous object creation (#23817)"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/183bccdf070d37fe995d11cfde9a213c4c1554b8", "message": "Fixing link for Omar in compiler feature status (#23839)"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/c4e412913d754cdfa9e140f5c8370746bfc6033e", "message": "When all inferred tuple names are duplicates, TupleElementNames should be default (#23663)"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/69e99a8ba2a044fcf73339ea7d11e2a51975d11d", "message": "Update Language Feature Status for C# 7.2 fixes (#23815)"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/850f809c4a0f796f4cd200400207543b523f49d3", "message": "Only the compiler analyzer can use CS or BC prefix for diagnostics (#23776)"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/69ea0c668725314487cd6cf2f66412ef1e4fb69c", "message": "Address PR feedback"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/ddf2c3dbec2b7fc4e058ea0ed1d233c99f8976ae", "message": "NormalizeWhitespace: no space between keyword and open paren, add newline before constraints (#23686)"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/98f7955b7be443ce9c8a38be97edc9788c6ba9b1", "message": "Apply syntactic check on possible TypeForwardedTo attributes to avoid infinite recursion (#23647)"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/6590dd953704978c98ab669d6e3a523807708ebd", "message": "Fix semantic model on type parameters of local functions"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/eb32b2faa02d0e25d8fb9856e04d6f9e01d448ae", "message": "Properties with expression bodies don't add backing fields (#23680)"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/de637d59d2ada5698a2400a4741c0c43d8bab63a", "message": "UseInferredMemberName: use one code style option and share more code (#23506)"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24363", "title": "[WIP] Allow two symbols to be found at position in tuple (FAR, Highlighting)", "body": "This is very early prototype code. There's still a couple of things wrong with FAR and Highlighting, which are called out in the tests.\r\n\r\nHere's what FAR looks like at the momen:\r\n![image](https://user-images.githubusercontent.com/12466233/35192136-9cb21442-fe40-11e7-9272-b9608a823655.png)\r\n\r\n### Customer scenario\r\nIn tuple syntax, such as `(Alice, Bob)`, positioning the cursor on `Alice` is both referencing the declaration of a tuple field (so `t.Alice` and `t.Item1`) and the usage of local `Alice`.\r\n\r\n### Bugs this fixes\r\nFixes https://github.com/dotnet/roslyn/issues/20115\r\n\r\n### Risk\r\n\r\n### Performance impact\r\n\r\n### Is this a regression from a previous update?\r\nNo\r\n\r\n### Root cause analysis\r\n### How was the bug found?\r\nKnown issue from 15.0 (when tuples shipped in C# 7.0 and VB 15.0) and also reported by customers since.\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24336", "title": "[WIP] Add INamedTypeSymbol.IsSerializable API", "body": "### Customer scenario\r\nSymbols for serializable types are marked with a flag when emitted to metadata. This PR exposes the flag on INamedTypeSymbol.\r\n\r\n### Bugs this fixes\r\nMostly fixes https://github.com/dotnet/roslyn/issues/3898\r\n\r\n### Workarounds, if any\r\nNone\r\n\r\n### Risk\r\n\r\n### Performance impact\r\n\r\n### Is this a regression from a previous update?\r\nNo.\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\nReported by customers and internally.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24195", "title": "Start changelog", "body": "Here's an initial take on what a checked-in changelog could look like.\r\n\r\nI'm still debating whether we should rely on the VS release notes instead (and improve those with a few useful links).\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/7150", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23970", "title": "QuickInfo should show the captures for lambdas and local functions", "body": "\r\n### Customer scenario\r\nPerformance-sensitive code should beware of captured variables when using lambdas. But it's not always easy to tell what variables are captured and will cause a closure to be created.\r\nThis feature adds a \"Captures\" section the QuickInfo bubble:\r\n\r\n![image](https://user-images.githubusercontent.com/12466233/34902938-450b7cb2-f7db-11e7-9834-ae4ab0874e70.png)\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/12466233/34903013-be9b91c4-f7dc-11e7-88ed-1dd4e5fe58a6.png)\r\n\r\n\r\n### Bugs this fixes\r\nFixes https://github.com/dotnet/roslyn/issues/23307\r\n\r\n### Workarounds, if any\r\nFigures out the captures mentally.\r\n\r\n### Risk\r\n### Performance impact\r\n\r\n### Is this a regression from a previous update?\r\nNo.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23961", "title": "Implement async using statement", "body": "The approach here is to re-use all the binding and lowering logic for `using`, but extend it to support `using await`. The `BoundUsingStatement` gets a new field to hold an optional `BoundAwaitExpression` which will be used during lowering to do `await <expr>.DisposeAsync()` instead of `<expr>Dispose()`.\r\nAll the elements of the bound tree that relate to the `IDisposable` interface become overloaded to deal with `IDisposableAsync` in the async scenario.\r\nI've done a little bit of IDE testing, which prompted me to fix some control flow analysis.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23949", "title": "Improve diagnostic when decoding tuples but VT is missing", "body": "### Customer scenario\r\nUse a type that implements an interface that involves named tuples, but don't reference the assembly which defines `ValueTuple` types. \r\nThe interface that involves named tuples will be substituted with an error type with no details. This results in confusing error, such as `error CS0648: '' is a type not supported by the language`\r\n\r\nBut in some cases, the compilation should not even fail (if the interface doesn't end-up being used). And in some cases it should fail, but with an error reporting the missing `ValueTuple` type.\r\n\r\n### Bugs this fixes\r\nFixes https://github.com/dotnet/roslyn/issues/21727\r\n\r\n### Workarounds, if any\r\nAdd the missing reference. But the diagnostics don't offer much guidance...\r\n\r\n### Risk\r\n### Performance impact\r\nLow. When decoding tuple names fails, use the partially decoded type (which has errors) rather than making a blank error type.\r\n\r\n### Is this a regression from a previous update?\r\nNo\r\n\r\n### Root cause analysis\r\nFairly edge case.\r\n\r\n### How was the bug found?\r\nReported by customer.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23679", "title": "GetDocumentationCommentId should handle generic type in cref", "body": "### Customer scenario\r\nUse a generic type in a cref (`/// <see cref=\"C{U}.M()\"/>`) and use the `GetDocumentationCommentId()` API on the generic symbol for `C<U>`. This would throw a null reference exception.\r\nThe API now correctly returns \"T:C{\\`0}\".\r\n\r\n### Bugs this fixes\r\nFixes https://github.com/dotnet/roslyn/issues/19756\r\n\r\n### Workarounds, if any\r\nI don't know any.\r\n\r\n### Risk\r\n### Performance impact\r\nLow. This used to crash and the change is limited to documentation visitor.\r\n\r\n### Is this a regression from a previous update?\r\nNo\r\n\r\n### How was the bug found?\r\nReported by customer\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23356", "title": "Allow comparing tuples", "body": "\r\nFeature https://github.com/dotnet/roslyn/issues/22937", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23210", "title": "Prototype: integrating with ILVerify and classifying differences", "body": "Relates to https://github.com/dotnet/roslyn/issues/22872", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/22798", "title": "Copy actual result from test into clipboard", "body": "This is a little experiment that I'd like to get your feedback on.\r\n\r\nI've had to do a lot of copy/paste to update some diagnostics in tests recently. I think we could design a codefix that would fix the expectation in a test with a single click (running the tests would collect the actual results into some store and associate them to the proper location in test code).\r\nBut I figured a really cheap approximation using the clipboard as a way to store the actual result for one test.\r\n\r\nSo far, I only instrumented `VerifyDiagnostics`, but we could do the same with other `Assert` methods.\r\nGiven that we don't have access to proper clipboard API in our target frameworks, I had to resort to a process, which blinks a popup very briefly...\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/22677", "title": "Add some tests for escape rules on operators (15.later)", "body": "I'm trying to cover https://github.com/dotnet/roslyn/issues/22078\r\nSuggestions for more tests are welcome.\r\n\r\n@VSadov @OmarTawfik @dotnet/roslyn-compiler  for review.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/20913", "title": "Emit error types when EmitMetadataOnly and TolerateErrors", "body": "I've only prototyped it for C#.\r\nThere is an issue with nested types, since they need to come from a different assembly when emitted to metadata. So when they are loaded from metadata, they are top-level.\r\nI have fixed the arity of the metadata symbol. Also the client no long produces diagnostics on such symbols.\r\n\r\nA few things to do:\r\n- How do we handle various errors that don't involve error types?\r\n    - illegal overloads/overrides\r\n    - duplicate method\r\n    - un-implemented interface\r\n- Add test with missing ValueTuple.\r\n- I need to investigate what diagnostics should be produced in client (there should only be use-site diagnostics, if any. I'll look for ExtendedErrorTypes with unreported = true. Maybe this requires a different type than MissingMetadataSymbol.TopLevel on the receiving end)\r\n- Implement VB counterpart and tests.\r\n- Talk with IDE team.\r\n- Fail compilation when syntax errors (or at least mismatching braces).\r\n- Fail compilation if tolerate errors is not set, but an dependency is the error assembly.\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/7482 and https://github.com/dotnet/roslyn/issues/20914", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/16547304", "body": "The conditional on `Me.Method.ReturnType.IsDefinition` didn't make sense to me. As far as I can tell, only `_isEnumerable` is relevant to the types we'll need. \nI left it as-is for now.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16547304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16547444", "body": "Although the splitting of this large method was largely mechanical, there is one purposeful change: I removed this statement `F.CurrentMethod = moveNextMethod` which is useless.  \nThe `OpenXYZ` methods that are executed right after it ignore and overwrite the value of that field.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16547444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16567262", "body": "I was surprised too. I kept it this way for consistency with the VB method. But I can change both to make more sense.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16567262/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16567292", "body": "Makes sense. I've tried to think of a better way than inlining the `EnsureAvailableType` code below in each method, but couldn't think of any. Any tips?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16567292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16578436", "body": "Please ignore this commit. I had forgotten some changes from merging with latest fetch from master.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16578436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16579623", "body": "TrySynthesizeAttribute behaves correctly if ctor for optional attribute is missing or if it has use-site errors.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16579623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16598292", "body": "Adding the test as well, since `SyntaxNode.Contains` did not have any direct test.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16598292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16656736", "body": "Removed double empty lines.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16656736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16722296", "body": "@VSadov There is a potential bug in `TupleTypeSymbol.IsValueType`.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16722296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/18869932", "body": "FYI, I just noticed that this uses a duplicate ERRID. I'll fix.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/18869932/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/19154636", "body": "Thanks\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/19154636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/19690115", "body": "@gafter There seems to be a bug (infinite recursion) here and the corresponding line below (line 161). I'm not sure what this class is for. Presumably we're lacking some tests to cover those cases.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/19690115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/20143532", "body": "Indeed. Amended the commit. Thanks", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/20143532/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "Pilchie": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24266", "title": "Adding new solution configurations to projects adds MinimumRecommendedRules", "body": "_From @StingyJack on January 16, 2018 5:5_\n\nFirst, is this the correct place to report this?\r\n\r\nIf no, where should this be reported? (aside from devcomm - [issue already logged](https://developercommunity.visualstudio.com/content/problem/154610/creating-new-solution-project-configurations-autom.html) with no response)\r\n\r\nIf yes, then why does it do this when code analysis rulesets are not defined anywhere in the projects in the solution?\n\n_Copied from original issue: dotnet/project-system#3147_", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/20811", "title": "Support Source and Additional files having the same path", "body": "## Ask Mode\r\n**Customer scenario**\r\nIf a single filepath is included in both the `Compile` and the `AdditionalFiles` item groups, the project system would fail to add the second of those two, and throw, leaving things in a bad state.  In the legacy project system, that seemed to be caught and ignored, and likely you just didn't have the AdditionalFile in your compilations.  In CPS a dialog would be displayed, and the file would end up in Miscellaneous files (however, this can happen during a transient state in CPS due to it's async nature).  In Lightweight solution load, VS would crash.\r\n\r\n**Bugs this fixes:** Fixes #19968 / https://devdiv.visualstudio.com/DevDiv/_workitems/edit/463124\r\n**Workarounds, if any**: Not have the item in both `Compile` and `AdditionalFiles`.  Hard, because they may not realize they do, or it may be a transient case in CPS.\r\n**Risk**: Medium - plumbs through new ids for additional items, etc.\r\n**Performance impact**: Low - most significant change is ref counting instead of mere entry in a dictionary.\r\n**Is this a regression from a previous update?**: No, this behavior has been since additional files were added.\r\n**Root cause analysis**: We never expected an item to be in both groups.\r\n**How was the bug found?**: Customers reported files ending up in \"Miscellaneous files\" in CPS after changing the build action.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/20152", "title": "Lsl perf", "body": "A few changes to make project load faster.\r\n\r\n**Ask Mode** (pending)\r\n<details>\r\n**Customer scenario**\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n**Bugs this fixes:**\r\n\r\n(either VSO or GitHub links)\r\n\r\n**Workarounds, if any**\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n**Risk**\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n**Performance impact**\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n**Is this a regression from a previous update?**\r\n\r\n**Root cause analysis:**\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n**How was the bug found?**\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n</details>", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/7487", "title": "Support setting Code Definition Window context on caret changes", "body": "", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70022110", "body": "@jasonmalinowski mentioned that it would be nice to have those PDBs stamped for source server info from github as well.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70022110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/151873438", "body": "I'm pretty sure we lost source server info when we switched our internal signed builds to git, so I agree we should get it back using GitLink.  Also, we should verify that the symbols we publish on the external symbol server are full symbols, and not stripped symbols that don't have source/local information.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/151873438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/165593111", "body": "I have a clear ask: For each published nuget package, there should be _some way_ to get full pdbs that include source information, and those PDBs should be stamped with source information to allow retrieval of the sources.\n\nThat won't deal with generated code, but will still improve the situation tremendously.\n\n(I'm not specifying what way it is.  It could be a zip file that you download separately as far as I'm concerned).\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/165593111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/165601434", "body": "Can we verify? I thought the symbols we published to the public symbol server were source stripped.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/165601434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/165616352", "body": "@DavidKarlas we definitely plan to keep tagging source corresponding to NuGet packages, but you still can't debug if we don't publish the _full_ PDBs that include line number info instead of stripped symbols.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/165616352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70544484", "body": "I'm able to repro this as well.  Note that @tenor is talking about the Signature Help tooltip not appearing when typing [.  The Completion List _does_ appear when you type a letter inside the indexer.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70544484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70545063", "body": "I believe it's the case that in our implementation we ensure that there is a `ConstantValueSource` for all files that are open.  Is this something that your host should be ensuring?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70545063/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70546683", "body": "@mattwar I think the `TryGetText` can fail if we've never observed the text at all in the `DocumentState` class, even if we have a `ConstantValueSource`.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70546683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70560650", "body": "We've see a report of this issue before (http://connect.microsoft.com/VisualStudio/feedback/details/1050027/connect-visual-studio-2015-variable-rename-throws-nullreferenceexception), but we haven't been able to reproduce it.  Any chance you could attach a debugger to VS the next time this starts to happen and capture a memory dump at the time of the NullReferenceException?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70560650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70560805", "body": "Actually, that report is on VS2013, so it's probably not related.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70560805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70895240", "body": "@rchande - do you know the state of accelerators and F2?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70895240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/12410987", "body": "@jaredpar probably added the newline by saving in vim.  Pretty sure VS always removes it (which we should fix)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12410987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/13459755", "body": "I don't know what the right way to check this condition is from inside a rule - any ideas @heejaechang or @basoundr \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/13459755/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/13650737", "body": "Haven't reviewed the code yet, but would suggest adding those comments to the commit message with git commit --amend.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/13650737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/13650838", "body": "Change looks good too.  :+1: \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/13650838/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/18362951", "body": "This is an interesting way of doing this, since VisualStudioImpl doesn't really have any APIs that you would expect to add the reference for, but now people are doing it just to get the Shell.14 references.\n\nI'd almost rather do one of:\n1. Create a VisualStudio.Shell dependency project, like the one you removed the references from in the first place.\n2. Just add the two lines to the project.json files of the respective projects instead.\n\n@jasonmalinowski what are your thoughts?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/18362951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "kuhlenh": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24264", "title": "Offer keybinding profile for other IDEs/editors in Visual Studio for C#", "body": "* Many developers move back and forth between VSCode and Visual Studio and have to adjust to the different shortcuts for the same functionality\r\n* Developers coming from IntelliJ/Sublime Text/Eclipse/other editors and IDEs are used to a specific set of shortcuts for features.\r\n\r\nMy proposal is to add new \"profiles\" to our already existing list (and maybe even have a \"power user\" one where we update the C# 2005 one):\r\n\r\n![image](https://user-images.githubusercontent.com/1402694/35011329-8b58e81c-faba-11e7-9621-d53434c5f968.png)\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24228", "title": "Add 'invert if' refactoring", "body": "We supposedly already have this written. Can we get it turned on?\r\n\r\n@Pilchie for more context here.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24228/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24227", "title": "Add refactoring for using var/explicit type", "body": "Just like we did for expression-bodied members/block bodies, let's add a toggle for var/explicit type. This will allow developers to have their cursor on a `var` and use Ctrl+. to convert it to the explict type (and vice versa) without having to have a code suggestion.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24226", "title": "Provide a contextual IntelliSense option", "body": "We currently preselect an item in the completion list that matches the target type of the current location. Several developers have asked that we additionally offer a 'mode' that will filter the list  to *only* items that match the target type of the current location _and_ name matching.\r\n\r\nWe can even consider always scoping the list down to matching target types unless there are none, in which case it will revert to the normal completion list.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24225", "title": "Add some dead code analysis", "body": "We now fade unreachable code and should be able to start identifying dead code.\r\n\r\nTo start, it would be nice to fade dead private and internal methods.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24225/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24224", "title": "Support more code snippets", "body": "Filing on behalf of a customer who wants to be able to have postfix templates and custom templates (similar to ReSharper live templates).\r\n\r\nExamples:\r\n- .var\r\n- .foreach\r\n- \"My own custom templates, e.g. I have a \"ref\" template for quick insertion of types in xmldoc: <see cref=\"$TYPE$\"/>\"\r\n\r\nWe have some of these with snippets, but I don't think we have all of them and our customization story isn't great. Also need to make sure we document all of these...", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23934", "title": "Turn expression-body for methods off by default", "body": "This came up in a review that it's confusing for customers to see gray dots in a template, fix it, and then have an icon appear showing to convert it back. \r\n\r\nFYI @jinujoseph @Pilchie ", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/10072", "title": "Suggests parameter name for IntroduceLocal on an argument", "body": "Fixes #2423.\n\n@dotnet/roslyn-ide for review :tada: \n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ericmutta": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24261", "title": "VB: IDE hangs when Intellisense auto-complete is invoked on semantically invalid code.", "body": "**Version Used**: \r\n\r\nVisual Studio Community 2017 v15.5.1\r\n\r\n**Steps to Reproduce**:\r\n\r\nType in the following code into a VB console project:\r\n\r\n```vb\r\nPublic Module Module1\r\n  Public Class Base(Of T)\r\n    Public Sub New(ArgDoSomething As Func(Of T))\r\n    End Sub\r\n  End Class\r\n\r\n  Public Class Derived(Of T)\r\n    Inherits Base(Of T)\r\n\r\n    Private mValue As T\r\n\r\n    Public Sub New()\r\n      MyBase.New(Function() Me.mV) '<--- this line here has an error.\r\n    End Sub\r\n  End Class\r\n\r\n  Public Sub Main()\r\n  End Sub\r\nEnd Module\r\n```\r\n\r\nThe line `MyBase.New(Function() Me.mV)` is incomplete, and we want it to reference the `mValue` field so it ultimately reads as follows `MyBase.New(Function() Me.mValue)`. \r\n\r\nIf you manually type the remaining letters `alue` , you'll notice Visual Studio CPU usage goes up in Task Manager. \r\n\r\n![vs_hangs_on_generic_1](https://user-images.githubusercontent.com/20465797/34995475-a9466ba6-fae7-11e7-8223-8c1e2b298913.png)\r\n\r\nAlternatively, If you position the caret as shown above and invoke auto-complete to tell the editor to insert the remaining letters, Visual Studio hangs. Attempts to click anywhere inside the editor will cause that `Visual Studio is busy` notification to pop up in the Windows tray area.\r\n\r\n**Expected Behavior**:\r\n\r\nIntellisense should go ahead and complete the code, producing the following:\r\n\r\n```vb\r\n    Public Sub New()\r\n      MyBase.New(Function() Me.mValue)\r\n    End Sub\r\n```\r\n\r\n...which is semantically invalid as can be seen by the error below:\r\n\r\n![vs_hangs_on_generic_2](https://user-images.githubusercontent.com/20465797/34995885-e9173174-fae8-11e7-9c65-3a846de81f8b.png)\r\n\r\nYou'll notice the error squiggly is on the `Me` keyword. I also tried autocompletion starting with just the letters `mV` as opposed to `Me.mV` and it doesn't hang. It's only when you try to autocomplete `Me.mV` that it hangs, so the presence of `Me.` is somehow involved.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23807", "title": "VB: GenerateConstructorCodeFixProvider should not crash when code has semantic errors.", "body": "**Version Used**: \r\n\r\nVisual Studio Community 2017 v15.5.1\r\n\r\n**Steps to Reproduce**:\r\n\r\nType in the following code in a VB console project:\r\n\r\n```vb\r\nPublic Module Module1\r\n  Public Class Test\r\n    Private foo As Integer\r\n    Private bar As String\r\n\r\n    Private baz As New Test(\"hh\")\r\n  End Class\r\n\r\n  Public Sub Main()\r\n  End Sub\r\nEnd Module\r\n```\r\n\r\nThe editor will put a red squiggle on the `\"hh\"` of the line `Private baz As New Test(\"hh\")`. When you hover over the sguiggle the tooltip correctly shows the error that too many arguments have been passed to `Sub New()` but then the `GenerateConstructorCodeFixProvider` kicks in and crashes:\r\n\r\n![vs_constructor_provider_crash](https://user-images.githubusercontent.com/20465797/34060077-37c14576-e1f3-11e7-9fb4-69aa1d145d4e.png)\r\n\r\nIf you click the Enable button in that error message near the top, then hover over the squiggly again at `\"hh\"`, the `GenerateConstructorCodeFixProvider` crashes. You can repeat this as many times as you want and it crashes every time. The stack trace given is:\r\n\r\n```\r\nSystem.ArgumentException : Node is not within syntax tree\r\n   at Microsoft.CodeAnalysis.VisualBasic.VBSemanticModel.CheckSyntaxNode(VisualBasicSyntaxNode node)\r\n   at Microsoft.CodeAnalysis.VisualBasic.VBSemanticModel.GetSymbolInfo(ExpressionSyntax expression,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.VisualBasic.VBSemanticModel.GetSymbolInfoForNode(SyntaxNode node,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.VisualBasic.VBSemanticModel.GetSymbolInfoCore(SyntaxNode node,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.ModelExtensions.GetSymbolInfo(SemanticModel semanticModel,SyntaxNode node,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.VisualBasic.GenerateConstructor.VisualBasicGenerateConstructorService.GetDelegatingConstructor(State state,SemanticDocument document,Int32 argumentCount,INamedTypeSymbol namedType,ISet`1 candidates,CancellationToken cancellationToken)\r\n   at async Microsoft.CodeAnalysis.GenerateMember.GenerateConstructor.AbstractGenerateConstructorService`3.Editor.GenerateDelegatingConstructorAsync[TService,TArgumentSyntax,TAttributeArgumentSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.GenerateMember.GenerateConstructor.AbstractGenerateConstructorService`3.Editor.GenerateThisOrBaseDelegatingConstructorAsync[TService,TArgumentSyntax,TAttributeArgumentSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.GenerateMember.GenerateConstructor.AbstractGenerateConstructorService`3.Editor.GenerateThisOrBaseDelegatingConstructorAsync[TService,TArgumentSyntax,TAttributeArgumentSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.GenerateMember.GenerateConstructor.AbstractGenerateConstructorService`3.Editor.GetEditAsync[TService,TArgumentSyntax,TAttributeArgumentSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.GenerateMember.GenerateConstructor.AbstractGenerateConstructorService`3.GenerateConstructorCodeAction.GetEditAsync[TService,TArgumentSyntax,TAttributeArgumentSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.GenerateMember.GenerateConstructor.AbstractGenerateConstructorService`3.GenerateConstructorAsync[TService,TArgumentSyntax,TAttributeArgumentSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeFixes.GenerateMember.AbstractGenerateMemberCodeFixProvider.RegisterCodeFixesAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformActionAsync(<Unknown Parameters>)\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nIt should not crash. I have used the `GenerateConstructorCodeFixProvider` many times and I usually trigger it by placing the caret on a blank line within the class just after the fields/properties. In fact you can trigger it without crashing in the sample code above, if you do this by placing the caret in the blank below `Private bar As String`. However the moment you hover the cursor over the red squiggly line, it crashes.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23807/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lhfiedler": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24260", "title": "Null Ref sometimes when calling AddProject on our test automation machine.  Race condition?", "body": "**Version Used**: \r\n2.6.1\r\n\r\nStack:\r\n\r\n```\r\nSystem.NullReferenceException\r\nObject reference not set to an instance of an object.\r\n   at Microsoft.CodeAnalysis.Options.OptionServiceFactory.OptionService..ctor(IGlobalOptionService globalOptionService, HostWorkspaceServices workspaceServices)\r\n   at Microsoft.CodeAnalysis.Options.OptionServiceFactory.CreateService(HostWorkspaceServices workspaceServices)\r\n   at System.Lazy`1.CreateValue()\r\n   at System.Lazy`1.LazyInitValue()\r\n   at Microsoft.CodeAnalysis.Host.Mef.MefWorkspaceServices.GetService[TWorkspaceService]()\r\n   at Microsoft.CodeAnalysis.Workspace.get_Options()\r\n   at Microsoft.CodeAnalysis.Host.AbstractSyntaxTreeFactoryService..ctor(HostLanguageServices languageServices)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTreeFactoryServiceFactory.CreateLanguageService(HostLanguageServices provider)\r\n   at System.Lazy`1.CreateValue()\r\n   at System.Lazy`1.LazyInitValue()\r\n   at Microsoft.CodeAnalysis.Host.Mef.MefLanguageServices.GetService[TLanguageService]()\r\n   at Microsoft.CodeAnalysis.ProjectState.FixProjectInfo(ProjectInfo projectInfo)\r\n   at Microsoft.CodeAnalysis.ProjectState..ctor(ProjectInfo projectInfo, HostLanguageServices languageServices, SolutionServices solutionServices)\r\n   at Microsoft.CodeAnalysis.SolutionState.AddProject(ProjectInfo projectInfo)\r\n   at Microsoft.CodeAnalysis.Solution.AddProject(ProjectInfo projectInfo)\r\n   at Microsoft.CodeAnalysis.Workspace.OnProjectAdded_NoLock(ProjectInfo projectInfo, Boolean silent)\r\n   at Microsoft.CodeAnalysis.Workspace.OnProjectAdded(ProjectInfo projectInfo, Boolean silent)\r\n   at Microsoft.CodeAnalysis.AdhocWorkspace.AddProject(ProjectInfo projectInfo)\r\n   at Microsoft.CodeAnalysis.AdhocWorkspace.AddProject(String name, String language)\r\n```\r\n\r\n**Steps to Reproduce**:\r\n\r\n```csharp\r\nCompositionHost compositionContext = new ContainerConfiguration()\r\n    .WithParts(partTypes)\r\n    .CreateContainer();\r\n\r\nMefHostServices host = MefHostServices.Create(compositionContext);\r\n\r\nvar workspace = new AdhocWorkspace(host);\r\n\r\nvar project = workspace\r\n    .AddProject(\"CodeProject\", ProjectLanguage(language))\r\n    .WithMetadataReferences(MetaDataReferences());\r\n```\r\n\r\nCan you guys check if there's a race condition your code?\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "medoni": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24259", "title": "Roslyn compiler on VS2017 breakpoint conditions", "body": "Please add the Roslyn compiler to VS breakpoint conditions, so that modern operators like `?.` could be used.\r\n\r\n**Version Used**: \r\nVisual Studio 2017 15.5.3\r\n\r\n**Steps to Reproduce**:\r\n1. Add a Breakpoint in your class (C#/VB.NET)\r\n2. Condition: `trycast(me, MyClass)?.MyProp = 42`. Or C#: `(this as MyClass)?.MyProp = 42`\r\n\r\n**Actual Behavior**:\r\nError message. The `?` charcator cannt not be used here\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "eyalsk": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24248", "title": ".editorconfig some values aren't recognizable/supported by VS", "body": "**Version Used**: Visual Studio Community 2017 v15.5.3\r\n\r\n1. `flush_left` is documented [here](https://github.com/MicrosoftDocs/visualstudio-docs/blob/master/docs/ide/editorconfig-code-style-settings-reference.md) but [here](https://gist.github.com/jmarolf/0e165b27a498b49e3b3512004ea9d8b8) it's documented as `left_most` and yet VS doesn't recognize either of these values.\r\n\r\n2. `type_parameter` and `namespace` they are documented [here](https://gist.github.com/jmarolf/0e165b27a498b49e3b3512004ea9d8b8) but are not documented anywhere else. @jmarolf does VS really support these values?\r\n\r\n3. <s>`when_on_single_line` is documented [here](https://github.com/MicrosoftDocs/visualstudio-docs/blob/master/docs/ide/editorconfig-code-style-settings-reference.md) but it's not mentioned [here](https://gist.github.com/jmarolf/0e165b27a498b49e3b3512004ea9d8b8) and VS doesn't recognize it.</s> Resolved.\r\n\r\nIt can be really confusing because you don't know whether VS supports these values or they are just aren't recognizable by the IDE and these values are important to my style of coding, probably to others too.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dasMulli": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24247", "title": "PathMap MSBuild property inconsistent with similar properties", "body": "MSBuild properties containing lists are usually separated using semicolons, however `$(PathMap)` needs commas (`,`) as separators, causing confusion when authoring projects since it behaves differently.\r\n\r\nE.g. specifying `<PathMap>$(PathMap);$(MSBuildProjectDirecgory)=/project</PathMap>` fails silently (!) because the initial `;` is considered part of the path (or not?), but this looks exactly like how one would expect to safely add to a property containing a list.\r\n\r\nThis adds to the fact that paths containing `;` aren't really usable in MSBuild anyway without proper escaping.\r\n\r\nSuggestion:\r\n\r\nUse `;` to separate path mappings for the MSBuild argument, acknowledging that there will be a difference between the MSBuild and the command line argument format. MSBuild users could then escape `;` to `%3B` like they'd have to do for any other place in MSBuild to use it.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "KrisVandermotten": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24246", "title": "CSharpSyntaxGenerator.GetAllowedModifiers incorrectly ignores unsafe modifier", "body": "**Steps to Reproduce**:\r\n\r\nGiven\r\n\r\n     CodeFixContext context\r\n     ClassDeclarationSyntax declaration\r\n\r\nand assuming that\r\n- the document is a C# document, \r\n- the class declaration has an `unsafe` modifier\r\n\r\nthen\r\n\r\n    var generator = SyntaxGenerator.GetGenerator(context.Document);\r\n    var newDeclaration = generator.WithModifiers(declaration, generator.GetModifiers(declaration));\r\n\r\nwill remove the `unsafe` modifier.\r\n\r\n**Expected Behavior**:\r\n\r\nnewDeclaration has the same modifiers as the old declaration\r\n\r\n**Actual Behavior**:\r\n\r\nThe `unsafe` modifier is removed.\r\n\r\nRoot cause is a series of bugs in [`Microsoft.CodeAnalysis.CSharp.CodeGeneration.CSharpSyntaxGenerator.GetAllowedModifiers`](http://source.roslyn.codeplex.com/#Microsoft.CodeAnalysis.CSharp.Workspaces/CodeGeneration/CSharpSyntaxGenerator.cs,b5e93738253d0be2), which seems to be ignorant of the existence of the `unsafe` modifier.\r\n\r\nThis causes issues in CodeFixProviders, such as the one reported [here](https://github.com/u2uconsult/codeanalyzers/issues/16).", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/22595", "title": "lower interpolated strings to string concatenation where possible", "body": "This PR handles #22594.\r\n\r\n**Customer scenario**\r\n\r\nThe user uses string interpolation where concatenation could be used.\r\n\r\n**Risk**\r\n\r\nThis PR modifies code generation of interpolated strings, but only in the case where all fill-ins are strings without alignment or format specifiers.\r\n\r\n**Performance impact**\r\n\r\nCode generation for interpolated strings will be somewhat slower. The generated code will be significantly faster in the case where all fill-ins in the interpolated string are strings, without alignment or format specifiers. In all other cases, the new implementation has one additional loop over the parts with no memory allocations in it, fairly simple logic and early exit as soon it is determined that the code gen optimization cannot be done.\r\n\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jamesqo": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24237", "title": "Consider 'value is null' instead of 'value == null' for the \"Add null check\" codefix", "body": "It's possible that there could be a custom operator defined for `==`, which could be slower than a simple pointer comparison. `is null` reads better and is guaranteed to be just a pointer comparison.\r\n\r\nThis may warrant looking into the user's code style to see if they already have a lot of `== null`s or `is null`s, to see which codefix should be offered to maintain consistency.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24008", "title": "[Feature Request] Offer to capture a method/property that is repeatedly invoked in a local variable", "body": "**Example scenario:**\r\n\r\n```cs\r\nvar root = await context.Document.GetSyntaxRootAsync(context.CancellationToken).ConfigureAwait(false);\r\nvar semanticModel = await context.Document.GetSemanticModelAsync(context.CancellationToken).ConfigureAwait(false);\r\n```\r\n\r\nPlacing the cursor over `context.Document` and pressing Ctrl+. should yield a code fix like\r\n\r\n```cs\r\nvar document = context.Document;\r\n// <first location where context.Document is referenced in the method>\r\n...\r\nvar root = await document.GetSyntaxRootAsync(context.CancellationToken).ConfigureAwait(false);\r\nvar semanticModel = await document.GetSemanticModelAsync(context.CancellationToken).ConfigureAwait(false);\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24007", "title": "[Feature Request] Offer autocompletion for members that have not been defined but have been invoked", "body": "**Scenarios:**\r\n\r\n```cs\r\nvoid Foo()\r\n{\r\n    Foobar();\r\n}\r\n\r\nvoid F[|]\r\n```\r\n\r\n```cs\r\nint foo = new Bar().Foobar;\r\n\r\nclass Bar\r\n{\r\n    public int F[|]\r\n}\r\n```\r\n\r\nIt would be nice if `Foobar` appeared in the editor completion list for both of these cases. It's pretty common for people to write out the invocation of the method before they actually define it.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23771", "title": "[Question/Bug] Possible bugs in AnalyzeDataFlow?", "body": "I was somewhat confused as to what the properties of `DataFlowAnalysis` represent. I've been looking through the unit tests, which so far have only confused me more. For example, I can't tell why [this test](https://github.com/dotnet/roslyn/blob/94ab292d2c79b1675de0d6ff0a7361ecfbf20cfb/src/Compilers/CSharp/Test/Semantic/FlowAnalysis/TryLockUsingStatementTests.cs#L201) includes `para` in `DataFlowsIn`, yet [this test](https://github.com/dotnet/roslyn/blob/94ab292d2c79b1675de0d6ff0a7361ecfbf20cfb/src/Compilers/CSharp/Test/Semantic/FlowAnalysis/TryLockUsingStatementTests.cs#L532) does not, when `para` is a ref parameter in both circumstances. Also, why does [this test](https://github.com/dotnet/roslyn/blob/94ab292d2c79b1675de0d6ff0a7361ecfbf20cfb/src/Compilers/CSharp/Test/Semantic/FlowAnalysis/TryLockUsingStatementTests.cs#L260) not include `para` when it is clearly assigned to before the bound region?", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23771/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "CyrusNajmabadi": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24235", "title": "VB projects, by default, suppress warnings from 3rd party analyzers.", "body": "I have an analyzer that reports warnings for C# and VB.  C# warnings show up fine in the IDE, but VB warnings do not show up at all (either squiggles or error list).  I debugged through both and found what the issue is.  However, i can't understand the logic and i don't know what the right fix is.\r\n\r\nHere's the parts that are going wrong:\r\n\r\nFirst:\r\n\r\n```\r\n>\tMicrosoft.VisualStudio.LanguageServices.VisualBasic.ProjectSystemShim.VisualBasicProjectOptionsHelper.CreateCompilationOptions(baseCompilationOptionsOpt, newParseOptions, compilerOptions, compilerHost, globalImports, projectDirectoryOpt, ruleSetOpt) Line 52\tBasic\r\n \tMicrosoft.VisualStudio.LanguageServices.VisualBasic.ProjectSystemShim.VisualBasicProject.CreateCompilationOptions(commandLineArguments, newParseOptions) Line 389\tBasic\r\n \tMicrosoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject.UpdateOptions() Line 65\tC#\r\n \tMicrosoft.VisualStudio.LanguageServices.VisualBasic.ProjectSystemShim.VisualBasicProject.UpdateOptions() Line 409\tBasic\r\n \tMicrosoft.VisualStudio.LanguageServices.VisualBasic.ProjectSystemShim.VisualBasicProject.SetCompilerOptions(pCompilerOptions) Line 380\tBasic\r\n```\r\n\r\nhttps://github.com/dotnet/roslyn/blob/master/src/VisualStudio/VisualBasic/Impl/ProjectSystemShim/VisualBasicProjectOptionsHelper.vb#L50-L53\r\n\r\n```vb\r\n            Dim generalDiagnosticOption As ReportDiagnostic = DetermineGeneralDiagnosticOption(compilerOptions.WarningLevel, ruleSetFileGeneralDiagnosticOption)\r\n            Dim specificDiagnosticOptions As IReadOnlyDictionary(Of String, ReportDiagnostic) = DetermineSpecificDiagnosticOptions(compilerOptions, ruleSetFileSpecificDiagnosticOptions)\r\n            Dim outputKind = GetOutputKind(compilerOptions)\r\n```\r\n\r\n\r\nAt this point we set 'generalDiagnosticOption' to ReportDiagnostic.Supress.  \r\n\r\nLater on when the analyzer reports the diagnostic, we get to:\r\n\r\n```\r\n>\tMicrosoft.CodeAnalysis.Diagnostics.AnalyzerDriver.GetDiagnosticSink.AnonymousMethod__0(diagnostic, analyzer, isSyntaxDiagnostic) Line 1161\tC#\r\n \tMicrosoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.GetAddDiagnostic.AnonymousMethod__0(diagnostic) Line 1472\tC#\r\n \tMicrosoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext.ReportDiagnostic(diagnostic) Line 626\tC#\r\n```\r\n\r\nThis does:\r\n\r\n```c#\r\n                var filteredDiagnostic = GetFilteredDiagnostic(diagnostic, compilation);\r\n                if (filteredDiagnostic != null)\r\n                {\r\n                    addLocalDiagnosticCore(filteredDiagnostic, analyzer, isSyntaxDiagnostic);\r\n                }\r\n```\r\n\r\nWe end up filtering out the diagnostic.  The reason for this is:\r\n\r\n```\r\n>\tMicrosoft.CodeAnalysis.VisualBasic.VisualBasicDiagnosticFilter.GetDiagnosticReport(severity, isEnabledByDefault, id, location, category, generalDiagnosticOption, caseInsensitiveSpecificDiagnosticOptions, hasDisableDirectiveSuppression) Line 109\tBasic\r\n \tMicrosoft.CodeAnalysis.VisualBasic.VisualBasicDiagnosticFilter.Filter(diagnostic, generalDiagnosticOption, specificDiagnosticOptions) Line 71\tBasic\r\n \tMicrosoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.FilterDiagnostic(diagnostic) Line 1030\tBasic\r\n \tMicrosoft.CodeAnalysis.Diagnostics.AnalyzerDriver.GetFilteredDiagnostic(diagnostic, compilation) Line 1183\tC#\r\n```\r\n\r\nhttps://github.com/dotnet/roslyn/blob/master/src/Compilers/VisualBasic/Portable/Compilation/VisualBasicDiagnosticFilter.vb#L107-L110\r\n\r\n```vb\r\n            If generalDiagnosticOption = ReportDiagnostic.Suppress AndAlso\r\n            (severity = DiagnosticSeverity.Warning OrElse severity = DiagnosticSeverity.Info) Then\r\n                Return ReportDiagnostic.Suppress\r\n            End If\r\n```\r\n\r\nBasically, because the 'generalDiagnosticOption' is Suppress (due to the top bit i linked), and because we reported something at Warning level, the diagnostic is Suppressed.  \r\n\r\n ", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24185", "title": "Navigate to decompiled sources: Reference assemblies are not supported", "body": "For example, in Roslyn i went to Debug.Assert, and this is what i got:\r\n\r\n```c#\r\n\t\t[Conditional(\"DEBUG\")]\r\n\t\tpublic static void Assert(bool condition)\r\n\t\t{\r\n\t\t}\r\n```\r\n\r\nNow, my guess is this is because of reference assemblies.  However, it's hard to tell what's going on.  The top of the file is just:\r\n\r\n![image](https://user-images.githubusercontent.com/4564579/34843308-ea760d3a-f6c2-11e7-9168-6d5526838b79.png)\r\n\r\nPerhaps a comment could be added that's similar to what we get with normal metadata-as-source:\r\n\r\n```c#\r\n#region Assembly System.Collections.Immutable, Version=1.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\r\n// C:\\Users\\cyrus\\.nuget\\packages\\system.collections.immutable\\1.3.1\\lib\\netstandard1.0\\System.Collections.Immutable.dll\r\n#endregion\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24138", "title": "Generate method does not infer 'bool' return type for method generated in a case-when clause", "body": "", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24136", "title": "Extract method not offered for expression in 'when' clause of a switch/case pattern match.", "body": "", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24136/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23983", "title": "Two IDE diagnostic ids use the same value.", "body": "        public const string ValidateFormatStringDiagnosticID = \"IDE0035\";\r\n        public const string RemoveUnreachableCodeDiagnosticId = \"IDE0035\";\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/dotnet/roslyn/commits/83520a7245cf202a4f3fa4ea11996328b3fb3b81", "message": "Simplify diagnostic tagging by making it use the standard tagging model. (#23448)\n\n* Simplify diagnostic tagging by making it use the standard tagging model.\r\n\r\n* Cleanup."}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24362", "title": "Move checking of structure-options to a common location (so it will be picked up by all roslyn languages).", "body": "Discovered during https://github.com/Microsoft/visualfsharp/pull/4227\r\n\r\nCurrently, Roslyn has options to control outlining and structure-guide behavior for C# and VB.  However, these options can be moved to a core location so that they can be used in F# and TS/JS as well.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24161", "title": "GetHashCode code generator should produce code that doesn't overflow in checked mode.", "body": "Fixes https://github.com/dotnet/roslyn/issues/24035\r\nFixes https://github.com/dotnet/roslyn/issues/17646", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24111", "title": "Extract out the VirtualChar portion of the Regex and JSON editor work.", "body": "From the https://github.com/dotnet/roslyn/pull/23984 PR:\r\n\r\nThe first subsystem is called the VirtualCharService deals with the following issue.  To the final .net regex, the following snippets of code appear completely identical to it:\r\n\r\n```c#\r\n\"\\\\1\"       // In a normal string, we have to escape the \\\r\n@\"\\1\"       // But not in a verbatim string\r\n\"\\\\\\u0031\"  // The '1' could be escaped\r\n\"\\\\u005c1\"  // Even the backslash *itself* may be escaped\r\n```\r\n\r\nThese are all ways of writing the ```\\1``` regex.\r\n\r\nIn other words, C# allows a wide variety of input strings to all compile down to the same final 'value' (or 'ValueText') that the regex engine will finally see.  This is a major issue as it means that any data reported by the regex engine must be accurate with respect to the text as the user wrote it.  For example, in all of the equivalent cases above, there is the same error \"Reference to undefined group number 1\".  However, for each form the user wrote, it's necessary to understand what the right value is to highlight as the problem. i.e.\r\n\r\n![image](https://user-images.githubusercontent.com/4564579/34459671-5bb785b2-edab-11e7-8413-79c331ef373f.png)\r\n\r\nand\r\n\r\n![image](https://user-images.githubusercontent.com/4564579/34459672-6deb88dc-edab-11e7-8236-7ba7cd331247.png)\r\n\r\nSo, the purpose of the VirtualCharService is to translate all of the above pieces of user code to the same final set of characters the regex engine will see (specifically ```\\``` and ```1```) while **also** maintaining the knowledge of where those characters came from (for example, that ```1``` came from ```\\u0031``` in the last example).  In essence, the VirtualCharService is able to produce the ValueText for any string literal, while having a mapping back from each character in the ValueText back to the original source span of the document that formed this.\r\n\r\nWith the VirtualCharService user code can be translated into a common format that then can be processed uniformly.  This means that the part of the system that actually tries to understand the regex does not need to know about the differences between ```@\"\"``` and ```\"\"``` strings, or the differences between C# and VB.  It also means that it can be used by any roslyn language (for example, F#) if that is so desired.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24110", "title": "Add in a json parser so that the IDE can provide services around json editing.", "body": "Followup to https://github.com/dotnet/roslyn/pull/23984\r\n\r\nSo JFK has busted pipes.  So i've been in airport limbo :-(     On a good note, it gave me some time to expand on my previous Regex PR.  Now, on top of Regex support in the IDE we also support JSON strings.\r\n\r\nThis also expands the previous interaction model with built in json detection for string tokens.  i.e., if we see:\r\n\r\n![image](https://user-images.githubusercontent.com/4564579/34694351-a0eb7324-f47b-11e7-8bfb-2a8f96b12d97.png)\r\n\r\nThen we'll offer:\r\n\r\n![image](https://user-images.githubusercontent.com/4564579/34697518-5a0dc490-f488-11e7-8bfd-bc76633d6711.png)\r\n\r\nThis then helps users see how they can add a comment that lights-up IDE features for these types of strings.  Note: i don't do this for regexes because of a concern about too many false positives.  Once the comment is added things like up like so:\r\n\r\n![image](https://user-images.githubusercontent.com/4564579/34694398-d37a0684-f47b-11e7-9091-7ad16db391b3.png)\r\n\r\nOf course, squiggles and braces are supported, on top of just colors:\r\n\r\n![image](https://user-images.githubusercontent.com/4564579/34694425-eadd0132-f47b-11e7-8ee0-9ffffa5f69dc.png)\r\n\r\nAlso, if you're using JToken/JObject/JArray, then you don't need to provide the comment (similar to how ```new Regex(pattern)``` is automatically detected: \r\n\r\n![image](https://user-images.githubusercontent.com/4564579/34694784-33f2833c-f47d-11e7-86d0-a6f6a2578d00.png)\r\n\r\nThings to note:\r\n\r\n1. unlike regexes, this was much simpler to provide.  That's because json is *much* simpler and much better documented versus the .net regex model.\r\n2. Two forms of json are supported.  A strict mode that aligns with the IETF rfc for json, as well as Json.net's format.  Json.net is clearly the .net json winner (almost 100m downloads) and is most likely what people will be using.  Json.net allows a superset of standard json strings (including allowing things like comments, as well as other constructs that would normally be errors in es6 json).  \r\n3. This leverages the VirtualChar work from the regex work, demonstrating that this is a suitable subsystem for general DSL plugins.  \r\n\r\n\r\n  \r\n  \r\n  ", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23984", "title": "Add in a regex parser so that the IDE can provide services around regex editing.", "body": "I was bored flying to MN and DC.  So i decided to scratch an itch that came up when discussing things over here: https://github.com/dotnet/csharplang/issues/371\r\n\r\nThis PR introduces support in the Roslyn IDE for improved features for users working with .Net regexes.  Specifically, the intent of this PR is to support the following (entirely optional) features around regexes:\r\n\r\n1. Colorization.  Users should be able to write a regex and have it colorized automatically, with a set of colors they can customize if they want.\r\n2. Highlighting.  Users should be able to place their cursor on something like a brace and have the matching brace highlighted.  This should extend to complex regex concepts (like backreferences) as well.\r\n3. Syntax errors.  Users should see syntax errors directly in the editor and error list without having to compile or run their program.\r\n4. Fixes.  Errors in the regex should come with potential fixes to address the problem immediately.\r\n5. Suggestions.  The IDE should be able to suggest completely safe refactorings to a users regex to simplify it.  For example, suggesting that ```\"(a)(b)\"``` be simplified directly to ```ab```.\r\n\r\nHowever, supporting regexes is complicated by how regexes are supported in the language today.  Specifically because of the complexity present in how VB and C# escape values in strings on top of how complex .net regexes are as well.  To deal with that, two new components have been added to Roslyn.\r\n  \r\nThe first subsystem is called the VirtualCharService deals with the following issue.  To the final .net regex, the following snippets of code appear completely identical to it:\r\n\r\n```c#\r\n\"\\\\1\"       // In a normal string, we have to escape the \\\r\n@\"\\1\"       // But not in a verbatim string\r\n\"\\\\\\u0031\"  // The '1' could be escaped\r\n\"\\\\u005c1\"  // Even the backslash *itself* may be escaped\r\n```\r\n\r\nThese are all ways of writing the ```\\1``` regex.\r\n\r\nIn other words, C# allows a wide variety of input strings to all compile down to the same final 'value' (or 'ValueText') that the regex engine will finally see.  This is a major issue as it means that any data reported by the regex engine must be accurate with respect to the text as the user wrote it.  For example, in all of the equivalent cases above, there is the same error \"Reference to undefined group number 1\".  However, for each form the user wrote, it's necessary to understand what the right value is to highlight as the problem. i.e.\r\n\r\n![image](https://user-images.githubusercontent.com/4564579/34459671-5bb785b2-edab-11e7-8413-79c331ef373f.png)\r\n\r\nand\r\n\r\n![image](https://user-images.githubusercontent.com/4564579/34459672-6deb88dc-edab-11e7-8236-7ba7cd331247.png)\r\n\r\nSo, the purpose of the VirtualCharService is to translate all of the above pieces of user code to the same final set of characters the regex engine will see (specifically ```\\``` and ```1```) while **also** maintaining the knowledge of where those characters came from (for example, that ```1``` came from ```\\u0031``` in the last example).  In essence, the VirtualCharService is able to produce the ValueText for any string literal, while having a mapping back from each character in the ValueText back to the original source span of the document that formed this.\r\n\r\nWith the VirtualCharService user code can be translated into a common format that then can be processed uniformly.  This means that the part of the system that actually tries to understand the regex does not need to know about the differences between ```@\"\"``` and ```\"\"``` strings, or the differences between C# and VB.  It also means that it can be used by any roslyn language (for example, F#) if that is so desired.\r\n\r\nThe second service is the actual regex parser that consumes the results of the VirtualCharService.  The regex parser is a fork of the real .net regex parser (from  https://github.com/dotnet/corefx/blob/master/src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexParser.cs) however, changed heavily. The reason for this is that the existing regex parser is ill suited for all the needs an IDE has.  Major problems the existing parser has are:\r\n\r\n1. It is not error tolerant.  With the first error it encounters it completely bails out.  This would mean that the roslyn services would only work if the regex was written completely properly.\r\n2. it does not produce a usable tree by IDE standards.  While it does produce a tree, it is an extremely abstract one that not only does not contain much of the information that would be needed. It is also heavily processed and changed as parsing happens.  i.e. the parser will actually merge, split, erase, and even reorder nodes within the tree.\r\n3. it works with data formats that are intended to work extremely fast and efficiently when actually performing matching of regexes, but which would be very baroque and unpleasant for editing scenarios.  For example, it compresses data into a compact binary format, which it then stores in strings themselves that it intersperses with chunks of the original string.\r\n4. It will actually crash when passed in some strings (i was able to get index-out-of-bounds and even null-refs when using it).\r\n5. It can use excessive amounts of memory (even OOMing) just when parsing.  \r\n\r\nHowever, the existing parser does have certain things going for it.  Namely, it is the source of truth in the .net world.  It doesn't matter what the docs say on how .net regexes work and are parsed.  At the end of they day, this is the parser used, so it must always be deferred to when determining what is a syntactically legal regex and what isn't.\r\n\r\nThe regex parser this PR adds introduces a system far more in line with how other roslyn parsers work.  Namely, the tree it produces is immutable and fully represents all the characters in the original token.  The tree also follows roslyn invariants around nodes, tokens and trivia.  Ideally, the tree would literally be built on the syntax classes defined at the Microsoft.CodeAnalysis layer.  However, they contain internals that make them only implementable at the C# and Vb layers.  Because of that, the tree produces by the new regex parser follows the spirit of the Roslyn syntax model even if it can't fit into it perfectly.\r\n\r\nThis parser has been extensively tested and comes with 750 *seed* cases that validate it.  These are called 'test seeds' as the inputs to the engine are then mutated heavily to produce even more cases to validate the engine with (for example, testing all prefixes and suffixes of every test case to ensure no crashes or infinite loops occur).  Validation is very stringent.  All cases must parse without any problems, producing trees that abide by all roslyn invariants.  **Furthermore**, all cases validate that the new parser does not produce errors if the native parser does not.  Conversely, if the native parser produces an error, the new parser must produce **the same error** as it does.  That means that we do not even define *new* messages to show the user.  Instead, we use the same message (or message fragment) that the native regex parser gives the user.  For example:\r\n\r\n![image](https://user-images.githubusercontent.com/4564579/34459743-084b2d4a-edae-11e7-9941-2e5df87e7fb7.png)\r\n\r\n![image](https://user-images.githubusercontent.com/4564579/34459744-12d309cc-edae-11e7-8f3c-996bd684ba99.png)\r\n\r\nBecause of this validation, it's very easy to feed in new tests into the system and have it validate that the roslyn regex parser is working in line with the native parser. \r\n\r\nThe test suite currently contains all the existing positive and negative tests from the existing .net regex suite, as well as many edge cases i added while writing the new parser.\r\n\r\n--\r\n\r\nHere's the current worklist for this feature:\r\n\r\nRequired:\r\n- [x] Create VirtualCharService system \r\n- [x] Implement VirtualCharService for C#\r\n- [x] Test VirtualCharService for C#\r\n- [x] Implement VirtualCharService for VB\r\n- [x] Test VirtualCharService for VB\r\n- [x] Create regular expression parser that will produce a Roslyn tree for a regex.\r\n- [x] Test regular expression parser\r\n- [x] Add stack overflow safeguards for regex parsing.\r\n- [x] Add diagnostic analyzer that parses regexes and reports warnings for issues as Diagnostics.\r\n- [x] Add tests for regex squiggles\r\n- [x] Add colorizer and fonts/colors entries for regex components.\r\n- [x] Add tests for regex colorizer\r\n- [x] Add user facing options to disable language services for regexs.\r\n- [x] Add way to apply this system to non-obvious regexes.  For example allow users to write something like ```/* language=regex */ \"[a-zA-Z]\"```\r\n- [x] Add error for character classes that go in the wrong direction.  i.e. ```[z-a]```.\r\n- [x] Add highlighter for regex components\r\n\r\nNice to have:\r\n- [ ] Add fixer for regex errors\r\n- [ ] Add simplifier for complex regexes\r\n- [ ] Add pattern-help for regex components (i.e. when typing ```(?``` something should pop up to show you all the legal forms there are).\r\n\r\n\r\nI hope to get all this done in the next week or so.  I hope that this could serve as a pleasant addition to the C# and Vb editing experience for so many of our devs who do use regexes day to day.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/22851", "title": "WIP: Make commas optional in a few more language constructs.", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/21472", "title": "Better handle surrounding directives when inlining a local variable.", "body": "Fixes https://github.com/dotnet/roslyn/issues/21455", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/21316", "title": "Add codestyle to handle unnecessary parentheses.", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/21219", "title": "Attempt to make GEnerateType tests less flakey.", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/21149", "title": "Remove restriction that 'var' variables cannot be const.", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/20905", "title": "Remove find refs window", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/20723", "title": "Support using patterns when generating .Equals", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/19599", "title": "Remove old IDocumentHIghlightsService.", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/17892", "title": "Do not remove/restore trivia if we're removing a node.", "body": "Fixes https://github.com/dotnet/roslyn/issues/17879", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/15543", "title": "Prioritize refactorings over code-fixes if the user has made a selection.", "body": "Fixes https://github.com/dotnet/roslyn/issues/15117", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/10420", "title": "Add back in the LambdaSimplifier analyzer+fixer.", "body": "This is now built on top of diagnostic analyzers and IOperation.  It will now work on VB as well.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/13685981", "body": "Can this just be a public method on Compilation since it has the same signature and implementation for C# and VB?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/13685981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15051768", "body": "can you add a comment saying \"Commit will also dismiss hte session\".\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15051768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15051792", "body": "Please add booleans that state if this has been called.  Then throw in the other if it was called.\n\nThis is similar to the pattern we use in some IDisposables, where we throw if Dispose was called twice.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15051792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15223716", "body": "Looks like it.  However, I did not write the original code (which is also identical) so I don't know what the code should be.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15223716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15232108", "body": "This code appears to be the code written to allow Code-Actions to insert \"suppression\" pragmas.  I think maybe @ManishJayaswal might know more about this (or may know the best person to look at this).\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15232108/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16344611", "body": "no need for the default.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16344611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16344633", "body": "Do you really need this vs the IsSpecialType extension?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16344633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16344657", "body": "what about string or object?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16344657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16365474", "body": "Delete!\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16365474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16365496", "body": "What about string/object?  Not important?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16365496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16365517", "body": "Ok, didn't @balajikris just add this?  Or wasn't he able to use some other fnuction?  Can you turn around and ask him if this is necessary?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16365517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16405364", "body": "i think there's just Contract. Fail.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16405364/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16405370", "body": "wat does ToString on a tree produce?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16405370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16405381", "body": "isn't this just root.FullSpan.Intersects(position)?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16405381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/17372832", "body": "I'm sure there are some things you can do to make this more strongly typed.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/17372832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/17372843", "body": "i.e. what the compiler does at the compilation layer with the \"protected abstract XXXCore\" methods\"\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/17372843/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/17372868", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/17372868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/18031660", "body": "Please always include @dotnet/roslyn-ide  when making changes to the IDE layer.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/18031660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/18363019", "body": "I'm fine with either of those.  the reason i didn't do '2' was: now i have to manually add it to a lot of projects.  With the current approach, the transitive copying gets it done for me with only having to update a handful of projects.\n\nI could do '1', and then update the projects i updated to point at that.  I was just kinda loathe to introduce another project since they seem so heavyweight.  But if that's what you guys would prefer, i'll do it. \n\nAt the end of hte day, this was simple, didn't involve adding projects, and allowed me to do minimal updates.  That appealed to me :)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/18363019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/18454252", "body": "Note: a far cheaper and easier solution is to just use an int, and use 0 as the sentinel value to mean 'hash not computed.'\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/18454252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/19367608", "body": "nope.  it was a bad refactoring.  nice catch.  will fix.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/19367608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/19690812", "body": "sort!", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/19690812/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/19690814", "body": "is there a reason this isn't just in the standard export test export provider?", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/19690814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/19690816", "body": "The reason i ask is that i don't think we do this with other waiters right?  (or do we?)", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/19690816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/21053871", "body": "@AArnott We've reserved the ability to change these interfaces as Roslyn develops.  As per the doc-comment at the top of of the file:\r\n\r\n```\r\n     /// <remarks>\r\n     /// This interface is reserved for implementation by its associated APIs. We reserve the right to\r\n     /// change it in the future.\r\n     /// </remarks>\r\n```\r\n\r\nThis allows us to continually keep a single API for the Roslyn languages as they move forward, instead of needing things like \"ITypeSymbol2, ITypeSymbol3, etc.\".  \r\n\r\nAbstract-classes/classes can't work here either because of the inability for us to have multiple inheritance in .Net.  The Symbol implementations *per language* already have an internal class-hierarchy that tehy depend on.   There is no way to then have a common type hierarchy across the languages.  As such, we use interfaces, but we do not support anyone but us actually implementing them.  ", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/21053871/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/21054255", "body": ">MSBuild Core is mixing the Roslyn DLLs it ships with, with the ones my MSBuild Task ships with\r\n\r\nSounds like something with MSBuild, not something with Roslyn.   Roslyn is not safe to use with mixed dlls.  That just not part of our design.  ", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/21054255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "Gallimathias": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24233", "title": "SIMD 64 Bit Memory-Alignment Bug", "body": "**Version Used**: .NET 4.7.1 C# 7.2\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Install engenious via nuget or wrote your own packed Vector3 or use a other packed Vector3\r\n2. Cast with pointer to System.Numerics.Vector3 or own unpacked Vector3\r\n3.  Just do the same thing, just put the pointer in a variable before it.\r\n4. Compare the results\r\n\r\n**A brief example:**\r\n\r\nC#-Code:\r\n\r\n````CSharp\r\n        static unsafe void Test()\r\n        {\r\n            var value = new Vector3(0, 0, -41);\r\n            var a = *(Numerics.Vector3*)(&value);\r\n        }\r\n\r\n        static unsafe void TestB()\r\n        {\r\n            var value = new Vector3(0, 0, -41);\r\n            var d = &value;\r\n            var a = *(Numerics.Vector3*)d;\r\n        }\r\n````\r\n\r\nIL-Code:\r\n\r\n````CIL\r\n                 .method private hidebysig static \r\n\t\t\tvoid Test () cil managed \r\n\t\t{\r\n\t\t\t// Method begins at RVA 0x2144\r\n\t\t\t// Code size 33 (0x21)\r\n\t\t\t.maxstack 4\r\n\t\t\t.locals init (\r\n\t\t\t\t[0] valuetype [engenious]engenious.Vector3 'value',\r\n\t\t\t\t[1] valuetype [System.Numerics.Vectors]System.Numerics.Vector3 a\r\n\t\t\t)\r\n\r\n\t\t\tIL_0000: nop\r\n\t\t\tIL_0001: ldloca.s 'value'\r\n\t\t\tIL_0003: ldc.r4 0.0\r\n\t\t\tIL_0008: ldc.r4 0.0\r\n\t\t\tIL_000d: ldc.r4 -41\r\n\t\t\tIL_0012: call instance void [engenious]engenious.Vector3::.ctor(float32, float32, float32)\r\n\t\t\tIL_0017: ldloca.s 'value'\r\n\t\t\tIL_0019: conv.u\r\n\t\t\tIL_001a: ldobj [System.Numerics.Vectors]System.Numerics.Vector3\r\n\t\t\tIL_001f: stloc.1\r\n\t\t\tIL_0020: ret\r\n\t\t} // end of method Program::Test\r\n\r\n\t\t.method private hidebysig static \r\n\t\t\tvoid TestB () cil managed \r\n\t\t{\r\n\t\t\t// Method begins at RVA 0x2174\r\n\t\t\t// Code size 35 (0x23)\r\n\t\t\t.maxstack 4\r\n\t\t\t.locals init (\r\n\t\t\t\t[0] valuetype [engenious]engenious.Vector3 'value',\r\n\t\t\t\t[1] valuetype [engenious]engenious.Vector3* d,\r\n\t\t\t\t[2] valuetype [System.Numerics.Vectors]System.Numerics.Vector3 a\r\n\t\t\t)\r\n\r\n\t\t\tIL_0000: nop\r\n\t\t\tIL_0001: ldloca.s 'value'\r\n\t\t\tIL_0003: ldc.r4 0.0\r\n\t\t\tIL_0008: ldc.r4 0.0\r\n\t\t\tIL_000d: ldc.r4 -41\r\n\t\t\tIL_0012: call instance void [engenious]engenious.Vector3::.ctor(float32, float32, float32)\r\n\t\t\tIL_0017: ldloca.s 'value'\r\n\t\t\tIL_0019: conv.u\r\n\t\t\tIL_001a: stloc.1\r\n\t\t\tIL_001b: ldloc.1\r\n\t\t\tIL_001c: ldobj [System.Numerics.Vectors]System.Numerics.Vector3\r\n\t\t\tIL_0021: stloc.2\r\n\t\t\tIL_0022: ret\r\n\t\t} // end of method Program::TestB\r\n````\r\n\r\n**Expected Behavior**: Both methods should produce the same result on all systems.\r\n\r\nMethod Test: a should be <0. 0. -41>\r\nMethod TestB: a should be <0. 0. -41>\r\n\r\n**Actual Behavior**: When you cast a packed vector into an unpacked vector, the result will always be a zero vector on some computers with 64 Bit and the use of a direct assignment.\r\n\r\nMethod TestB works on all systems no matter if 32 Bit or 64 Bit.\r\nMethod Test does not work as 64 bit version on some systems. Could this be related to the CPU used?\r\n\r\nMy Results compiled as 64 Bit:\r\n\r\nMethod Test: a is <0. 0. 0>\r\nMetod TestB: a is <0. 0. -41>\r\n\r\nOn my PC, Method Test doesn't work. My CPU is Intel i7-5960X.\r\n\r\nThe only difference in CIL are the following lines:\r\n\r\nIL_001a: stloc.1\r\nIL_001b: ldloc.1", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lellid": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24215", "title": "Compiler unable to figure out whether to use get or set accessor", "body": "**Version Used**:  Visual Studio Community 15.5.3\r\n\r\n**Steps to Reproduce**:\r\nConsider the following code:\r\n````\r\n        public interface IROClass\r\n\t{\r\n\t\tstring Name { get; }\r\n\t}\r\n\r\n\tpublic interface IWOClass\r\n\t{\r\n\t\tstring Name { set; }\r\n\t}\r\n\r\n\tpublic interface IRWClass : IROClass, IWOClass\r\n\t{\r\n\t}\r\n\r\n\tpublic class RWClassImpl : IRWClass\r\n\t{\r\n\t\tpublic string Name { get; set; }\r\n\t}\r\n\r\n\tpublic class UseCase\r\n\t{\r\n\t\tpublic void Test1_DoesCompile()\r\n\t\t{\r\n\t\t\tvar rw = new RWClassImpl();\r\n\t\t\trw.Name = \"Foo\";\r\n\t\t\tvar name = rw.Name;\r\n\t\t}\r\n\r\n\t\tpublic void Test2_DoesNotCompile()\r\n\t\t{\r\n\t\t\tIRWClass rw = new RWClassImpl();\r\n\t\t\trw.Name = \"Foo\"; // Compiler error: Ambiguity between IROClass.Name and IWOClass.Name\r\n\t\t\tvar name = rw.Name; // Compiler error: Ambiguity between IROClass.Name and IWOClass.Name\r\n\t\t}\r\n        }\r\n````\r\n\r\n\r\n**Expected Behavior**:\r\nTest2 should compile.\r\nIn Test2, the compiler should be able to figure out to use interface IWOClass when making the assignment to 'rw.Name'. And when accessing 'rw.Name', it should be able to figure out to use IROClass  interface. There is no ambiguity between IROClass.Name and IWOClass.Name since IROClass.Name has only a get accessor and IWOClass.Name has only a set accessor.\r\n\r\n**Actual Behavior**:\r\nTest1 can be compiled, whereas Test2 fails to compile.\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jmarolf": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24211", "title": "Extract method analyzer crashes in local function", "body": "**Version Used**: Visual Studio 15.6 Preview 2.0\r\n\r\n**Steps to Reproduce**:\r\n\r\n1.  Select statement in local function\r\n\r\n**Actual Behavior**:\r\n```\r\nSystem.InvalidOperationException : Failed to compare two elements in the array. ---> System.InvalidOperationException : Shouldn't reach here\r\n   at Roslyn.Utilities.Contract.FailWithReturn[T](String message)\r\n   at Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.ParameterVariableSymbol.CompareTo(IMethodSymbol left,IMethodSymbol right)\r\n   at Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.ParameterVariableSymbol.CompareTo(ParameterVariableSymbol other)\r\n   at Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.ParameterVariableSymbol.CompareTo(VariableSymbol right)\r\n   at Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.VariableSymbol.Compare(VariableSymbol left,VariableSymbol right,INamedTypeSymbol cancellationTokenType)\r\n   at Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.VariableInfo.<>c__DisplayClass24_0.<SortVariables>b__0(VariableInfo v1,VariableInfo v2)\r\n   at System.Array.FunctorComparer`1.Compare(T x,T y)\r\n   at System.Collections.Generic.ArraySortHelper`1.SwapIfGreater(T[] keys,IComparer`1 comparer,Int32 a,Int32 b)\r\n   at System.Collections.Generic.ArraySortHelper`1.IntroSort(T[] keys,Int32 lo,Int32 hi,Int32 depthLimit,IComparer`1 comparer)\r\n   at System.Collections.Generic.ArraySortHelper`1.IntrospectiveSort(T[] keys,Int32 left,Int32 length,IComparer`1 comparer)\r\n   at System.Collections.Generic.ArraySortHelper`1.Sort(T[] keys,Int32 index,Int32 length,IComparer`1 comparer)\r\n   --- End of inner exception stack trace ---\r\n   at System.Collections.Generic.ArraySortHelper`1.Sort(T[] keys,Int32 index,Int32 length,IComparer`1 comparer)\r\n   at System.Array.Sort[T](T[] array,Int32 index,Int32 length,IComparer`1 comparer)\r\n   at System.Collections.Generic.List`1.Sort(Comparison`1 comparison)\r\n   at Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.VariableInfo.SortVariables(Compilation compilation,List`1 list)\r\n   at Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.GetMethodParameters(ICollection`1 variableInfo)\r\n   at Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.GetSignatureInformation(DataFlowAnalysis dataFlowAnalysisData,IDictionary`2 variableInfoMap,Boolean isInExpressionOrHasReturnStatement)\r\n   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.AnalyzeAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.ExtractMethodAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.ExtractMethod.AbstractExtractMethodService`3.ExtractMethodAsync[TValidator,TExtractor,TResult](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.GetCodeActionAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.ComputeRefactoringsAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(<Unknown Parameters>)\r\n   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n```\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24211/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/dotnet/roslyn/commits/65a9c8027dbf0972c7b29ea36170a36c2508a28e", "message": "Merge pull request #23678 from jmarolf/remove-templates-and-samples\n\nremove samples and templates"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/4fb2d1fdcbaa535b16bbae8bc73608f098374281", "message": "removing syntax visualizer"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/a8d8534ee37b99cc812123b5a0d68d7c4b0cb1e7", "message": "remove samples and templates\n\nThese were moved in https://github.com/dotnet/roslyn-sdk/pull/21"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/20467", "title": "remove integration tests that have been moved to project system repo", "body": "Test only change.", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70298719", "body": "The apis that are internal but used by Visual Studio have only been tested in the narrow scenarios that Visual Studio uses them in.  Opening them up requires testing and design changes for a broader audience.  That being said, we are trying to get through as much as we can.  For example [SyntaxGenerator](http://source.roslyn.codeplex.com/#Microsoft.CodeAnalysis.Workspaces/Editting/SyntaxGenerator.cs,21) is a new api that should allow you to do most of the things CSharpCodeGenerationService did, but in a language agnostic way.\n\nSo far I'm hearing \n- CSharpSyntaxContext\n- FindDerivedTypesAsync\n- Intellesense API\n\nCould people working on omnisharp expand this list and add short description of what you would use the api for?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70298719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "Rabadash8820": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24209", "title": "Enum Types and Enum Values should have different .editorconfig kinds", "body": "**Version Used**:\r\nNot sure of Roslyn version, but using VS 15.5.3.\r\n\r\n**Description**:\r\nIn the .editorconfig naming conventions described in the [docs](https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-naming-conventions#symbols), symbols can be defined with `applicable_kinds` equal to `class`, `struct`, `enum`, etc.  From my own testing, it appears that enumerated _types_ use the `enum` kind, while enumerated _values_ use the `const` kind.  This can be frustrating, as shown in the code below.  I [asked](https://stackoverflow.com/questions/45120852/editorconfig-const-enum-settings-not-working-in-visual-studio) about this on StackOverflow a while back, and nobody had a legitimate solution, so I figured I'd raise an Issue.  If this is not the correct repo for .NET .editorconfig settings, please direct me to the correct one.\r\n\r\nConsider the following .editorconfig (the more complete file that I use is available [here](https://github.com/DanwareCreations/VsEditorConfig/blob/master/.editorconfig)):\r\n\r\n```\r\n    # Require const fields to be all upper-case\r\n    dotnet_naming_symbols.const_fields.applicable_accessibilities = *\r\n    dotnet_naming_symbols.const_fields.required_modifiers = const\r\n    dotnet_naming_rule.const_fields.symbols = const_fields\r\n    dotnet_naming_rule.const_fields.style = all_upper\r\n    dotnet_naming_rule.const_fields.severity = warning\r\n\r\n    # Require enums to be Pascal case\r\n    dotnet_naming_symbols.enums.applicable_kinds = enum\r\n    dotnet_naming_rule.enums.symbols = enums\r\n    dotnet_naming_rule.enums.style = pascal_case\r\n    dotnet_naming_rule.enums.severity = warning\r\n\r\n    #Naming styles\r\n    dotnet_naming_style.all_upper.capitalization = all_upper\r\n    dotnet_naming_style.pascal_case.capitalization = pascal_case\r\n```\r\n\r\nand the following C# code.  The in-line comments represent the warnings shown after \"`Naming rule violation:`\" in Visual Studio:\r\n\r\n```cs\r\n    public class DerpClass {\r\n        public const int DERP = 5;      // OKAY\r\n        public const int Derp = 5;      // These words cannot contain lower case characters: Derp\r\n    }\r\n    public enum EnumLower {\r\n        val                             // These words cannot contain lower case characters: val\r\n    }\r\n    public enum EnumPascal {\r\n        Val                             // These words cannot contain lower case characters: Val\r\n    }\r\n    public enum EnumUpper {\r\n        VAL                             // OKAY\r\n    }\r\n    public enum derpenum {              // These words must begin with upper case characters: derpenum\r\n        VAL\r\n    }\r\n```\r\n\r\nAs you can see, the `enums` naming rule applies only to the _name_ of enum types, not to their values.  Instead, enum values share the `const_fields` naming rule with `const` fields.  This is frustrating, as I either have to make my enumerated values all-upper-case or make my const fields Pascal-case, neither of which follows typical naming conventions for a C-based language.  But it's either that or deal with a million `Naming rule violation` warnings throughout my codebase (or Messages, if I change `severity`).\r\n\r\nSince the `enum` `applicable_kind` value is clearly meant for enum _type_ names, similar to the `class` and `struct` kinds, it would be great if there were another `applicable_kind` for enumerated values, say `enum_value`.  That way, enum types, enum values, and const fields could all have their own naming styles.  If the Roslyn compiler really treats enum values as consts then I could see this being difficult to implement, but I know nothing of compiler design so hopefully it can be done!", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "nnpcYvIVl": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24207", "title": "#pragma warning disable not functioning in shared project file", "body": "**Version Used**: \r\nMicrosoft Visual Studio Enterprise 2017 \r\nVersion 15.5.3\r\nVisualStudio.15.Release/15.5.3+27130.2020\r\nMicrosoft .NET Framework\r\nVersion 4.7.02556\r\n\r\n**Steps to Reproduce**:\r\n\r\n#pragma warning disable does not function when it's in a file used by a shared project. See attached screenshot.\r\n\r\nThe solution is a .NET Framework project with a reference to a shared project.\r\n\r\n![pragma warning disable not functioning in shared project file](https://user-images.githubusercontent.com/8421414/34888647-ae924c56-f790-11e7-9096-f8d3506d768b.png)\r\n\r\n**Expected Behavior**:\r\nNo warnings should be shown in files marked with #pragma warning disable\r\n\r\n**Actual Behavior**:\r\nWarning are shown in files marked with #pragma warning disable", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "olegtk": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24194", "title": "Migrate command handlers to the new editor commanding", "body": "In VS 2015 15.6 Preview3 the editor introduced a new commanding system, designed after Roslyn commading, see https://github.com/Microsoft/vs-editor-api/wiki/Modern-Editor-Commanding-API-Revisited.\r\nThis issue tracks migration of all Roslyn command handlers to the new editor commanding API.\r\nThe work is being done in PR https://github.com/dotnet/roslyn/pull/23769", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24156", "title": "AbstractDocumentationCommentCommandHandler performs blocking wait on GetCommandState of the InsertComment command", "body": "AbstractDocumentationCommentCommandHandler performs blocking wait on GetCommandState of the InsertComment command. This can lead to a bad user experience if the command is ever placed into a context menu or toolbar.\r\n\r\nhttps://github.com/dotnet/roslyn/blob/14aed138a01c448143b9acf0fe77a662e3dfe2f4/src/EditorFeatures/Core/Implementation/DocumentationComments/AbstractDocumentationCommentCommandHandler.cs#L558", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24155", "title": "FormatCommandHandler.ReturnKey.cs is not cancellable, but doesn't disable cancellation", "body": "When formatting on Return FormatCommandHandler passes CancellationToken.None:\r\nhttps://github.com/dotnet/roslyn/blob/d4dab355b96955aca5b4b0ebf6282575fad78ba8/src/EditorFeatures/Core/Implementation/Formatting/FormatCommandHandler.ReturnKey.cs#L18\r\n\r\nIt should either explicitly disable cancellation or use cancellation token passed via CommandExecutionContext (in the new commanding).", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24153", "title": "AbstractEncapsulateFieldCommandHandler disables cancellation and still uses cancellation token afterwards", "body": "Something weird I noticed: AbstractEncapsulateFieldCommandHandler disables cancellation, but still uses cancellation token after that.\r\nSome audit is required. \r\nFirst - why exactly it disables cancellation? No other similar refactoring command handlers disable it.\r\nSecond - if disabling cancellation is required, we should not use cancellation token that will never be cancelled.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24094", "title": "Migrate to the new async QuickInfo API", "body": "Since VS 2017 15.6 the editor supports new async/cross-IDE QuickInfo. IQuickInfo* API is now deprecated.\r\nThis issue tracks migrating Roslyn to the new async QuickInfo API.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/111031183", "body": "oops. thanks", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/111031183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/157068274", "body": "hmmm, this indicates some important difference. Seems like the editor cannot find proper buffer to execute \"ToggleSuggestionMode\" command before \"#\" is typed, while Roslyn could.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/157068274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/157070557", "body": "will do in all modified files", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/157070557/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/157079204", "body": "It's a declarative way of expressing \"command is enabled if anybody else says so, but I personally have no opinion whatsoever\", a simpler alternative to implementing IChainedComamndHandler and delegating GetCommandState to the next handler.\r\nAbout 25% of Roslyn command handlers (typically those \"customizing\" editor commands) are like that so I assume this is pretty important case for any lang service and I'd like to make it simple.\r\nBetter naming suggestions are welcome.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/157079204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/157595517", "body": "1. IWaitIndicator/IWaitContext are platformazed and public (need better names though - we end up with IWaitableUIOperationContext kind of name). I'll use old names to make simpler to explain.\r\n2. All command handlers are executed under a shared wait indicator/context set up by the editor and can obtain wait context via CommandExecutionContext argument.\r\n4. With the wait context command handlers get shared cancellation token.\r\n5. Because the wait context is shared between command handlers, I added a concept of \"wait context scope\". When a command handler needs to affect the shared wait context (allow or disallow cancellation, add its own message or progress) it pushes a new wait context scope and disposes it when it's done. Shared wait context deals with aggregating these scopes into the wait dialog. Cancellability is aggregated in a sticky way though - if one handler pushed a scope to disallow cancellation and didn't just handle the command, it stays disabled even after the handler is done.\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/157595517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/157597816", "body": "This test used to verify that in some condition this handler delegates GetComandState() to the next handler and result is CommandState.Unavailable. After the migration, this handler is now a simple non-chained command handler that has no next handler reference. Instead of delegating to the next, it returns CommandState.Undetermined, which indicates that it should be ignored and next handler should be called. So the test was updated to validate this instead.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/157597816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/157600803", "body": "I wish I could just publish the spec on GitHub :( Hopefully next features we will spec that way.\r\n\r\nEssentially, the goal was to make simple handling simple and still allow advanced chaining scenarios. So we ended up with 2 ways to implement a command handler:\r\n```\r\npublic interface ICommandHandler<T> : IDiagnosableCommandHandler where T : CommandArgs\r\n{\r\n    CommandState GetCommandState(T args);\r\n    bool ExecuteCommand(T args, CommandExecutionContext executionContext);\r\n}\r\n```\r\nand\r\n```\r\npublic interface IChainedCommandHandler<T> : IDiagnosableCommandHandler where T : CommandArgs\r\n{        \r\n    CommandState GetCommandState(T args, Func<CommandState> nextCommandHandler);\r\n    void ExecuteCommand(T args, Action nextCommandHandler, CommandExecutionContext executionContext);\r\n}\r\n```\r\n\r\nIDiagnosableCommandHandler simply adds a DisplayName for diagnostics:\r\n```\r\npublic interface IDiagnosableCommandHandler : ICommandHandler\r\n{\r\n        /// <summary>\r\n        /// Gets display name of the command handler used to represent it to the user, for\r\n        /// example when blaming it for delays or for commanding diagnostics.\r\n        /// </summary>\r\n        string DisplayName { get; }\r\n}\r\n```\r\n\r\nIChainedCommandHandler works just as before, but ICommandHandler has no access to the next handler so the commanding service takes care of calling its next handler if needed (specifically when GetCommandState() returns CommandState.Undetermined or ExecuteCommand() returns false).", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/157600803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/158779886", "body": "WithDesktopSupport() is deprecated, see https://github.com/Microsoft/vs-mef/blob/v15.5/src/Microsoft.VisualStudio.Composition/Configuration/NetFxAdapters.cs#L59\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/158779886/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159530817", "body": "Yes, binding is host specific so it's VS only thing, VS for Mac would need another way to bind.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159530817/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159537282", "body": "fixed", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159537282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159544643", "body": "This is not good actually. This is a new command args for a Roslyn own command (not shared at the editor level). It's here to stay, but the old one (Microsoft.CodeAnalysis.Editor.Commands.GoToImplementationCommandArgs) is going to go away eventually. The question is in which namespace do you want to have your own new command args. Microsoft.CodeAnalysis.Editor.Commanding.Commands perhaps?\r\n\r\nI could delete Microsoft.CodeAnalysis.Editor.Commands.GoToImplementationCommandArgs, but I wanted to keep old commanding infrastructure intact, in case TS/F#/etc actually handle that command.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159544643/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159547663", "body": "good point, I'm going to go with MS.VS.Utilities.IHasDisplayName and\r\n`public interface ICommandHandler<T> : ICommandHandler, IHasDisplayName where T : CommandArgs`\r\n\r\n`public interface IChainedCommandHandler<T> : ICommandHandler, IHasDisplayName where T : CommandArgs`\r\n  ", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159547663/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159559395", "body": "undone", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159559395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159560457", "body": "It's a two way cancellability supported by the threaded wait dialog underneath this abstraction. UserCancellationToken allows user to (attempt to) cancel a command and AllowCancellation allows command handler to disable Cancel button.\r\n\r\nI renamed it to UserCancellation token, does it look more readable now?\r\n```\r\nusing (context.WaitContext.AddScope(allowCancellation: true, EditorFeaturesResources.Finding_token_to_rename))\r\n{\r\n    ExecuteRenameWorker(args, context.WaitContext.UserCancellationToken);\r\n}\r\n```\r\n\r\n  ", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159560457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159562444", "body": "It's just a holder of useful stuff commanding service wants to provide to command handlers. Currently it only has wait context:\r\n\r\n```\r\nnamespace Microsoft.VisualStudio.Commanding\r\n{\r\n    /// <summary>\r\n    /// Represents a command execution context, which is set up by a command handler service\r\n    /// and provided to each command handler.\r\n    /// </summary>\r\n    public sealed class CommandExecutionContext\r\n    {\r\n        /// <summary>\r\n        /// Creates new instance of the <see cref=\"CommandExecutionContext\"/>.\r\n        /// </summary>\r\n        public CommandExecutionContext(IUIThreadOperationContext waitContext)\r\n        {\r\n            this.WaitContext = waitContext ?? throw new ArgumentNullException(nameof(waitContext));\r\n        }\r\n\r\n        /// <summary>\r\n        /// Provides a context of executing a command handler on the UI thread, which\r\n        /// enables two way shared cancellability and wait indication.\r\n        /// </summary>\r\n        public IUIThreadOperationContext WaitContext { get; }\r\n    }\r\n}\r\n\r\nnamespace Microsoft.VisualStudio.Utilities\r\n{\r\n    /// <summary>\r\n    /// Represents a context of executing potentially long running operation on the UI thread, which\r\n    /// enables shared two way cancellability and wait indication.\r\n    /// </summary>\r\n    /// <remarks>\r\n    /// Instances implementing this interface are produced by <see cref=\"IUIThreadOperationExecutor\"/>\r\n    /// MEF component.\r\n    /// </remarks>\r\n    public interface IUIThreadOperationContext : IPropertyOwner, IDisposable\r\n    {\r\n        /// <summary>\r\n        /// Cancellation token that allows user to cancel the operation unless the operation\r\n        /// is not cancellable.\r\n        /// </summary>\r\n        CancellationToken UserCancellationToken { get; }\r\n\r\n        /// <summary>\r\n        /// Gets whether the operation can be cancelled.\r\n        /// </summary>\r\n        /// <remarks>This value is composed of initial AllowCancellation value and\r\n        /// <see cref=\"IUIThreadOperationScope.AllowCancellation\"/> values of all currently added scopes.\r\n        /// The value composition logic takes into acount disposed scopes too - if any of added scopes\r\n        /// were disposed while its <see cref=\"IUIThreadOperationScope.AllowCancellation\"/> was false,\r\n        /// this property will stay false regardless of all other scopes' <see cref=\"IUIThreadOperationScope.AllowCancellation\"/>\r\n        /// values.\r\n        /// </remarks>\r\n        bool AllowCancellation { get; }\r\n\r\n        /// <summary>\r\n        /// Gets user readable operation description, composed of initial context description and\r\n        /// descriptions of all currently added scopes.\r\n        /// </summary>\r\n        string Description { get; }\r\n\r\n        /// <summary>\r\n        /// Gets current list of <see cref=\"IUIThreadOperationScope\"/>s in this context.\r\n        /// </summary>\r\n        IEnumerable<IUIThreadOperationScope> Scopes { get; }\r\n\r\n        /// <summary>\r\n        /// Adds a UI thread operation scope with its own two way cancellability, description and progress tracker.\r\n        /// The scope is removed from the context on dispose.\r\n        /// </summary>\r\n        IUIThreadOperationScope AddScope(bool allowCancellation, string description);\r\n\r\n        /// <summary>\r\n        /// Allows a component to take full ownership over this UI thread operation, for example\r\n        /// when it shows its own modal UI dialog and handles cancellability through that dialog instead.\r\n        /// </summary>\r\n        void TakeOwnership();\r\n    }\r\n}\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159562444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159562654", "body": "@jasonmalinowski  Unspecified is better than Undetermined indeed. What about Unknown? #Resolved", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159562654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159562960", "body": "I can see it here below", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159562960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159564396", "body": "there is no change in logic here, just 4 less spaces. Instead of\r\n```\r\nwaitIndicator.Wait(\r\n    title: EditorFeaturesResources.Automatic_Line_Ender,\r\n    message: EditorFeaturesResources.Automatically_completing,\r\n    allowCancel: false, action: w =>\r\n    {\r\n        ... code ...\r\n    }\r\n```\r\nit's now\r\n``` \r\nusing (context.WaitContext.AddScope(allowCancellation: false, EditorFeaturesResources.Automatically_completing))\r\n{\r\n    ... code ...\r\n}\r\n```\r\n\r\nHmm, I don't see how can I increase indentation in the modified code :(", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159564396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159565154", "body": "AbstractBlockCommentEditingCommandHandler is used by TypeScript so I cannot change it. So I refactored it into BaseAbstractBlockCommentEditingCommandHandler and PlatformAbstractBlockCommentEditingCommandHandler (not happy about that name though). Once TypeScript migrates to the new commanding, I will simplify it back.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159565154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159565202", "body": "fixed", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159565202/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159576723", "body": "done", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159576723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159710765", "body": "let me look at it again...", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159710765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159718582", "body": "yes, it's shipping with VS as version 4.5.24. You were relying on it indirectly by referencing Microsoft.Tpl.Dataflow package, which contains System.Threading.Tasks.Dataflow.dll.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159718582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159719861", "body": "These bits are already in d15.6stg (actually it has 15.6.245-preview already), see https://devdiv.visualstudio.com/DevDiv/Editor/_git/VS?path=%2F.corext%2FConfigs%2Fdefault.config&version=GBlab%2Fd15.6stg&line=301&lineStyle=plain&lineEnd=302&lineStartColumn=1&lineEndColumn=1\r\n  ", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159719861/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159760942", "body": "fixed the issue in the editor bits so now reverting this change back", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159760942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159786510", "body": "it does look fishy, I wish I knew a better way.\r\nEssentially what I found:\r\n1. Without non-shared part creation policy most most tests (specifically I believe non WpfFact ones) creating text view fail because new QuickInfo text view creation listener throws for not being on the main thread. I think that's because JTC instances are cached by MinimalTestExportProvider between compositions and so being reused on other threads.\r\n2. Without [ThreadStatic] tests deadlock, presumably because we end up creating more than one JTC for same thread.\r\n\r\nThis needs further investigation, I just don't have enough context in the text infrastructure. Maybe it would be better not to export JTC here, but explicitly add new instance to each composition?\r\nI suggest creating an issue to track it, but not block this PR. I don't mind spending more time on this.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159786510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159792571", "body": "Who should get the bug though? @AArnott agreed Microsoft.VisualStudio.ProjectSystem should move to System.Threading.Tasks.Dataflow.dll instead of obsolete Microsoft.Tpl.Dataflow. I can file such bug against Microsoft.VisualStudio.ProjectSystem.\r\nAlso Nuget has related, but Won't fixed bug https://github.com/NuGet/Home/issues/329\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159792571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159795240", "body": "Filed https://devdiv.visualstudio.com/DevDiv/_workitems/edit/547065 against CPS to move from Microsoft.Tpl.Dataflow. I will reference it here.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159795240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159808565", "body": "This is unrelated to this PR. I'm doing all the suppressions for obsolete API in my other PR https://github.com/dotnet/roslyn/pull/23943/files. Once it's merged, this will go away. ", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159808565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159814277", "body": "Nope, just ThreadStatic is not enough, tons of tests fail because JTC.IsOnMainThread check fails. \r\n@AArnott, what's the creation semantics of an exported property? I believe if the class is a shared part it's instantiated only once and its property is accessed only once too so we have a singleton JTC per catalog.\r\nRoslyn tests [reuse ExportProvider](https://github.com/dotnet/roslyn/blob/6847f1e5a909395aae9456e8f366cbf4deb86b69/src/EditorFeatures/TestUtilities/TestExportProvider.cs#L27) containing this JTC export so when a test runs on a different thread JTC.IsOnMainThread return false. That's why I thought just having CreationPolicy.NonShared would solve it. But for some reason that alone deadlocks (\\\\\\\\olegt-vmhost\\tmp\\xunit.runner.worker.dmp) and I don't fully understand why yet. I suspect we end up creating more than one JTC targeting the same thread as main they get stored in various editor components in that static ExportProvider. That's why ThreadStatic.\r\n  ", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159814277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159939758", "body": "Oh, I haven't realized the export was on a field, not a property. After turning it into a property I could remove part creation policy altogether, just leaving ThreadStatic as you suggested.\r\n\r\n@jasonmalinowski, does the last iteration look reasonable enough to proceed with this PR?", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159939758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159959003", "body": "thanks, @jaredpar. I'm trying to follow that approach. Roslyn needs VS MEF ExportProvider though, so I'm trying to figure out how to create VS MEF Export provider for JTC and how to combine 2 VS MEF export providers.\r\n\r\nI then again I suggest we don't block this PR on this and follow up with a separate issue.\r\n  ", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159959003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159967965", "body": "I guess it's not possible with VS MEF and switching to MEF v1 ExportProvider (like in VsVim) is not possible due to portable requirements. So the approach in this PR is the only realistic one I can think of.\r\n\r\n@jasonmalinowski please review if I addressed the changes you requested in this PR.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159967965/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159978558", "body": "will update all new strings to follow the convention", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159978558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159993379", "body": "Btw, this looks sooo much cleaner in CodeFlow :)\r\n\r\n---\r\nIn reply to: [159564396](https://github.com/dotnet/roslyn/pull/23769#discussion_r159564396) [](ancestors = 159564396)", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159993379/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159995420", "body": "we haven't figured out the UX yet, but given that this is a value returned from DisplayName of a command handler object I'd say it's expected to assume it needs to identify the handler itself. Lets keep it as such for now\r\n\r\n---\r\nIn reply to: [158571204](https://github.com/dotnet/roslyn/pull/23769#discussion_r158571204) [](ancestors = 158571204)", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159995420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159999267", "body": "ok, went with Unspecified\r\n\r\n---\r\nIn reply to: [159562654](https://github.com/dotnet/roslyn/pull/23769#discussion_r159562654) [](ancestors = 159562654)", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159999267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/160001774", "body": ">title: EditorFeaturesResources.Find_References, [](start = 16, length = 47)\r\n\r\nnote that we are losing the title now", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/160001774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}]}, "drognanar": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24182", "title": "[Flaky] ProduceErrorsOnRef_Properties_Ref_Set test", "body": "https://ci.dot.net/job/dotnet_roslyn/job/master/job/ubuntu_16_debug_prtest/8403/\r\n\r\n```\r\n    Microsoft.CodeAnalysis.CSharp.UnitTests.DeclarationParsingTests.ProduceErrorsOnRef_Properties_Ref_Set [FAIL]\r\n17:56:01       \r\n17:56:01       Expected:\r\n17:56:01                       Diagnostic(ErrorCode.ERR_BadMemberFlag, \"set\").WithArguments(\"ref\").WithLocation(6, 13)\r\n17:56:01       Actual:\r\n17:56:01 \r\n                      // error CS0009: Metadata file 'mscorlib.dll (netstandard 2.0 ref)' could not be opened -- Invalid argument\r\n17:56:01                       Diagnostic(ErrorCode.FTL_MetadataCantOpenFile).WithArguments(\"mscorlib.dll (netstandard 2.0 ref)\", \"Invalid argument\").WithLocation(1, 1),\r\n17:56:01                       // (6,13): error CS0106: The modifier 'ref' is not valid for this item\r\n17:56:01                       //         ref set => throw null;\r\n17:56:01                       Diagnostic(ErrorCode.ERR_BadMemberFlag, \"set\").WithArguments(\"ref\").WithLocation(6, 13)\r\n17:56:01       Diff:\r\n17:56:01       ++>                 Diagnostic(ErrorCode.FTL_MetadataCantOpenFile).WithArguments(\"mscorlib.dll (netstandard 2.0 ref)\", \"Invalid argument\").WithLocation(1, 1),\r\n17:56:01                           Diagnostic(ErrorCode.ERR_BadMemberFlag, \"set\").WithArguments(\"ref\").WithLocation(6, 13)\r\n17:56:01       Expected: True\r\n17:56:01       Actual:   False\r\n17:56:01       Stack Trace:\r\n17:56:01         /_/src/Test/Utilities/Portable/Diagnostics/DiagnosticExtensions.cs(91,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)\r\n17:56:01         /_/src/Test/Utilities/Portable/Diagnostics/DiagnosticExtensions.cs(46,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)\r\n17:56:01         /_/src/Test/Utilities/Portable/Diagnostics/DiagnosticExtensions.cs(61,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)\r\n17:56:01         /_/src/Test/Utilities/Portable/Diagnostics/DiagnosticExtensions.cs(99,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)\r\n17:56:01         /_/src/Compilers/CSharp/Test/Syntax/Parsing/DeclarationParsingTests.cs(6391,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.DeclarationParsingTests.ProduceErrorsOnRef_Properties_Ref_Set()\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/19589", "title": "Add Typescript integration tests", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "msbasanth": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24172", "title": "The ISymbol.GetDocumentationCommentId() from a generic methods and types are not matching the XML Documentation generated on msbuild", "body": "**Version Used**: \r\nRoslyn v2.6.0\r\nnetstandard1.6\r\nVS2017 15.5.2\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create an analyzer which analyzes class, struct or methods \r\n2. Create a XmlDocumentationCache class which reads the XML Documentation created on msbuild.\r\n3. Get XML Documentation from XmlDocumentationCache instance using the ISymbol.GetDocumentationCommentId().\r\n\r\n**Expected Behavior**:\r\nWe are able to read XML Documentation by using ISymbol.GetDocumentationCommentId() as member name.\r\n\r\nExample XML Documentation file:\r\n<?xml version=\"1.0\"?>\r\n<doc>\r\n    <assembly>\r\n        <name>syngo.Common.ApiProvider.Test</name>\r\n    </assembly>\r\n    <members>\r\n        <member name=\"M:NamespaceName.ClassWithAutoConstructor.YesTagged\">\r\n            <summary>\r\n            API yes tagged method documentation. .........\r\n            </summary>\r\n        </member>\r\n     </members>\r\n </doc>\r\n\r\n**Actual Behavior**:\r\nThis works fine all cases, i.e. we are able to retrieve XML Documentation of methods except for generic methods or methods of generic types.\r\n\r\nISymbol.GetDocumentationCommentId():\r\nM:NamepsaceName.TemplateClassConstructorYesTagged{System.Int32}.NoTaggedMethodWithTInParameterAndMethodName``1(System.String,BuisinessUnitNamespace.ISomeInterface)\r\n\r\nXML documentation file of assembly:\r\nM:NamespaceName.TemplateClassConstructorYesTagged`1.NoTaggedMethodWithTInParameterAndMethodName ``1(System.String,``0\"\")\r\n\r\nBecause of this difference analyzer is unable to retrieve the XML documentation of the symbol and do further analysis.\r\n\r\nHow can we get the correct XML Documentation Comment Id from ISymbol for generic methods and types?\r\n\r\nThanks\r\nBasanth", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Chris5gd": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24171", "title": "Legacy C# and VB expression evaluators still required", "body": "**Version Used**: \r\nVisual Studio 2017 v15.5.2\r\n**Steps to Reproduce**:\r\n\r\n1. Debugging VB.NET project, break on line with a string variable containing HTML\r\n2. Copy Value to clipboard\r\n3. Paste Value to text editor\r\n\r\n**Expected Behavior**:\r\nValue copied and pasted should contain actual value of string\r\n**Actual Behavior**:\r\nValue copied and pasted contains VbCrLF and other non-HTML characters.  The value of the string gets completely mangled, making it impossible to see what the program variable actually contained.  Debugging therefore impossible.\r\n\r\nSwitching on the Legacy C# and VB expression evaluators in Options > Debugging resolves this issue, but now this gives a warning saying that the option will be removed in a future version.  This would be a disaster, since it would make string debugging impossible.\r\n\r\nPlease either fix the issue so that non-legacy expression evaluators preserve the actual value of string variables, or else do not remove the legacy evaluators.\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Kentalot": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24160", "title": "Deconstruct extension methods that use \"in\" keyword disables usage", "body": "I'm using C# 7.2 and version 15.5.3 of VS 2017 Enterprise.\r\n\r\nUnless I'm doing something wrong, it looks like deconstruction into valuetuples using extension methods along with the in keyword for readonly pass in by reference prevents the unpacking syntax.  See below.\r\n\r\n**Steps to Reproduce**:\r\n\r\nThe following compiles fine: \r\n``` C#\r\n        public static void Deconstruct(this ushort source, out byte first, out byte second)\r\n        {\r\n            first = (byte)(source >> 8);\r\n            second = (byte)(source & byte.MaxValue);\r\n        }\r\n\r\n        public static void TestDeconstruct()\r\n        {\r\n            ushort source = 0;\r\n            (var first, var second) = source;\r\n        }\r\n```\r\nThe following does not compile (using the in keyword for the source ushort):\r\n``` C#\r\n        public static void Deconstruct(in this ushort source, out byte first, out byte second)\r\n        {\r\n            first = (byte)(source >> 8);\r\n            second = (byte)(source & byte.MaxValue);\r\n        }\r\n\r\n        public static void TestDeconstruct()\r\n        {\r\n            ushort source = 0;\r\n            (var first, var second) = source;\r\n        }\r\n```\r\n\r\n**Expected Behavior**:\r\nBoth should compile fine and the second example that currently does not compile should also pass in the source ushort by reference.\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "svick": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24152", "title": "Confusing error message for tuple collection initializer that's missing comma", "body": "**Version Used**: SharpLab's \"master (1 Dec 2017)\" (37ef0cd)\r\n\r\n**Steps to Reproduce**:\r\n\r\nTry to compile [an initializer for a collection of tuples that's missing a comma](https://sharplab.io/#v2:EYLgtghgzgLgpgJwD4AEBMACAwgWAFADe+GJGKALBgLIAUAlMaUXqaxgPoYC8GAdnAHcA2gF0MBDDQBEEKQBoMARjqSpweRjQqAvgG5GJbfm1A==):\r\n\r\n```c#\r\nclass C\r\n{\r\n    void M()\r\n    {\r\n        _ = new[] { (\"a\", 1) (\"b\", 2) };\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\n> error CS1003: Syntax error, ',' expected\r\n\r\n**Actual Behavior**:\r\n\r\n> error CS0149: Method name expected\r\n\r\nThis seems to apply to all parenthesized expressions. E.g. `new[] { (1) (2) }` also produces CS0149. Contrast this with `new[] { 1 2 }`, which produces CS1003, as expected.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23825", "title": "IdentifierName(\"x\") and ParseExpression(\"x\") should produce equivalent nodes", "body": "**Version Used**: 2.7.0-beta3-62413-01 from MyGet\r\n\r\n**Steps to Reproduce**:\r\n\r\nRun the following code:\r\n\r\n```c#\r\nusing System;\r\nusing Microsoft.CodeAnalysis.CSharp;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        var node1 = SyntaxFactory.ParseExpression(\"x\");\r\n\r\n        var node2 = SyntaxFactory.IdentifierName(\"x\");\r\n\r\n        Console.WriteLine(node1.IsEquivalentTo(node2));\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**: The two syntax nodes are considered equivalent and so the program prints `True`.\r\n\r\n**Actual Behavior**: The program prints `False`.\r\n\r\nAs far as I can tell, this is because the green node for `node1.Identifier` is `Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxToken.SyntaxIdentifier`, whose `GetLeadingTrivia()` returns `null`, while the green node for `node2.Identifier` is `Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxToken.SyntaxIdentifierWithTrivia`, whose `GetLeadingTrivia()` returns an empty `Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxTrivia`. Because of that, the following code decides that the two nodes are not equivalent:\r\n\r\nhttps://github.com/dotnet/roslyn/blob/69e99a8ba2a044fcf73339ea7d11e2a51975d11d/src/Compilers/CSharp/Portable/Syntax/InternalSyntax/SyntaxToken.cs#L434-L447\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23551", "title": "Simplified using directive comparer", "body": "Simplified `UsingsAndExternAliasesDirectiveComparer` by creating a `private enum` to help with sorting the different kinds of `using`s.\r\n\r\nThis PR makes the code shorter, less repetitive and I think also easier to understand. It also remove some unnecessary `else`s.\r\n\r\nThough this doesn't improve functionality in any way, so feel free to close this PR if you think it's not worth it.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/22898", "title": "Uncomment and fix CodeGeneration tests", "body": "I don't know why these tests were commented out using `#if false`, but I think they should be either uncommented or deleted.\r\n\r\nWhat I did:\r\n\r\n1. Removed the `#if`s.\r\n2. Fixed the tests.\r\n3. Added `[Trait(Traits.Feature, Traits.Features.CodeGeneration)]`.\r\n4. Added `Skip` to tests that I didn't know how to fix.\r\n\r\nRegarding 4., several tests in [`ExpressionGenerationTests`](https://github.com/dotnet/roslyn/blob/7dfc2fa/src/EditorFeatures/Test/CodeGeneration/ExpressionGenerationTests.cs) (and I assume all tests in [`ExpressionPrecedenceGenerationTests`](https://github.com/dotnet/roslyn/blob/7dfc2fa/src/EditorFeatures/Test/CodeGeneration/ExpressionPrecedenceGenerationTests.cs)) fail, because the code generator creates unnecessary parentheses. I'm not sure what is the right way to test those, so I have added `Skip = \"parens\"` to those tests (and didn't uncomment `ExpressionPrecedenceGenerationTests`).\r\n\r\n---\r\n\r\nIn case `master` is not the right branch for this kind of PR at the moment, feel free to retarget it to a different branch.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/21380", "title": "Improve error messages when converting lambdas to expression trees", "body": "Fixes https://github.com/dotnet/roslyn/issues/18645.\r\n\r\nThe first commit adds a failing test.\r\n\r\nThe second commit fixes it by changing reporting of CS1593 for expression trees from e.g.:\r\n\r\n>  Delegate '`Expression<Func<int, int>>`' does not take 0 arguments\r\n\r\nto: \r\n\r\n> Delegate '`Func<int, int>`' does not take 0 arguments\r\n\r\nThe second commit also changes the wording of CS1661 from e.g.:\r\n\r\n> Cannot convert lambda expression to delegate type '`Expression<Func<int, int>>`' because the parameter types do not match the delegate parameter types\r\n\r\nto:\r\n\r\n> Cannot convert lambda expression to type '`Expression<Func<int, int>>`' because the parameter types do not match the delegate parameter types\r\n\r\nFYI @tmat ", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/13153", "title": "Ran code formatter tool", "body": "Fixes #12709.\n\nThis PR contains 5 commits:\n1. The result of running `CodeFormatter.exe Roslyn.sln /nounicode /copyright:copyright-header.txt`.\n2. Reverting changes to indentation of comments inside `switch` statements that I think were incorrect.\n3. Removing two superfluous semicolons. Not really related to the rest of this PR, but I noticed them when going over the CodeFormatter diff and I think it's too small a change for a separate PR.\n4. Removing unused field and override in base class, which was revealed by [build failure](http://dotnet-ci.cloudapp.net/job/dotnet_roslyn/job/master/job/windows_debug_unit32_prtest/2437/) after CodeFormatter renamed field in a derived class.\n5. Reverting renaming of fields used in `NameOf` (caused [this build failure](http://dotnet-ci.cloudapp.net/job/dotnet_roslyn/job/master/job/windows_debug_unit32_prtest/2438/)).\n\nThis PR is fairly large, which might make it hard to review. It could make sense to split it into multiple PRs or commits based on groups of projects or based on formatter rules.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70497639", "body": "[This feature was already proposed for C# 6, but didn't make it due to scheduling.](https://roslyn.codeplex.com/discussions/568820#PostDetailsCell_1310270) So my guess is that it's pretty likely it will make it into C# 7.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70497639/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70500639", "body": "@paulomorgado\n\n> `T` in void `Foo<T>(T arg)` is not a type, it's a type parameter. There are two implementation decisions that can be made here. Either the compiler doesn't try to bind to void `Foo<T>(T arg)`, because it's missing information to do so, and just tries to bind to void `Foo(Bar bar);` or it doesn't try at all.\n\nSo you're saying that `Foo(new { X = 42 })` would either call the `Bar` overload or it wouldn't compile? Because both would be a breaking change, the code currently compiles and calls the `T` overload.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70500639/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70554395", "body": "> That doesn't mean I think it needs to be delegates.The compiler already compiles lambdas in different ways today. That could be just another case. Private static methods sounds like a good solution.\n\nThat doesn't sound like a good idea to me, because it would mean `x` would behave very differently than other local variables, for example, you wouldn't be able to write `x.GetType()` or `object o = x;`.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70554395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70566856", "body": "@nvivo I was quoting the part of your post where you said it doesn't need to be a delegate, so I don't understand how does answering that it's a delegate make sense.\n\nMaybe I misunderstood what you meant? Or do you mean that the variable won't be a delegate, unless it has to? That would be weird.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70566856/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "rorsulak": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24146", "title": "Event handler references should be counted correctly for derived WPF controls", "body": "**Version Used**: \r\nVisual Studio Enterprise 2017 version 15.5.2\r\n.NET framework 4.6.2\r\nVisual Studio Enterprise 2015 version 14.0.25425.01 Update 3\r\n\r\n**Steps to Reproduce**:\r\n1. Create WPF App.\r\n2. Create derived control (e.g. from Button)\r\n3. Use it in XAML\r\n4. In XAML add any event handler for derived control\r\n\r\nCode behind:\r\n```cs\r\npublic class MyButton : Button\r\n{\r\n}\r\n\r\npublic partial class MainWindow : Window\r\n{\r\n    public MainWindow()\r\n    {\r\n        InitializeComponent();\r\n    }\r\n\r\n    private void ButtonBase_OnClick(object sender, RoutedEventArgs e)\r\n    {\r\n    }\r\n}\r\n```\r\nXAML:\r\n```xaml\r\n  <local:MyButton Click=\"ButtonBase_OnClick\">Wow</local:MyButton>\r\n```\r\n**Expected Behavior**:\r\nCodeLens should show 1 reference for added event handler.\r\nAlso [CA1811: Avoid uncalled private code](https://docs.microsoft.com/en-us/visualstudio/code-quality/ca1811-avoid-uncalled-private-code) should pass.\r\n\r\n**Actual Behavior**:\r\nCodeLens shows 0 references for added event handler.\r\n[CA1811: Avoid uncalled private code](https://docs.microsoft.com/en-us/visualstudio/code-quality/ca1811-avoid-uncalled-private-code) is violated.\r\n\r\n**Remarks**:\r\nIf in XAML instead of MyButton is used not derived Button (``<Button Click=\"ButtonBase_OnClick\">Wow</Button>``), reference count is correct and CA1811 is not violated.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "agocke": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24135", "title": "Speculative semantic model produces different behavior for local functions ", "body": "See the behavior in this test:\r\n\r\n```csharp\r\n        [Fact]\r\n        public void LocalFunctionAttribute()\r\n        {\r\n            const string text = @\"\r\nusing System;\r\nclass A : Attribute {}\r\n\r\nclass C\r\n{\r\n    static void M()\r\n    {\r\n        void local<[A]T>() {}\r\n    }\r\n}\";\r\n            var tree = SyntaxFactory.ParseSyntaxTree(text);\r\n            var comp = CreateStandardCompilation(tree);\r\n            var model = comp.GetSemanticModel(tree);\r\n            var a = tree.GetRoot().DescendantNodes()\r\n                .OfType<IdentifierNameSyntax>().ElementAt(2);\r\n            Assert.Equal(\"A\", a.Identifier.Text);\r\n            var attrInfo = model.GetSymbolInfo(a);\r\n            var attrType = comp.GlobalNamespace.GetTypeMember(\"A\");\r\n            var attrCtor = attrType.GetMember(\".ctor\");\r\n            Assert.Equal(attrCtor, attrInfo.Symbol);\r\n\r\n            // Assert that this is also true for the speculative semantic model\r\n            var newTree = SyntaxFactory.ParseSyntaxTree(text + \" \");\r\n            var m = newTree.GetRoot()\r\n                .DescendantNodes().OfType<MethodDeclarationSyntax>().Single();\r\n\r\n            Assert.True(model.TryGetSpeculativeSemanticModelForMethodBody(m.Body.SpanStart, m, out model));\r\n\r\n            a = newTree.GetRoot().DescendantNodes().OfType<IdentifierNameSyntax>().ElementAt(2);\r\n            Assert.Equal(\"A\", a.Identifier.Text);\r\n\r\n            // If we aren't using the right binder here, the compiler crashes going through the binder factory\r\n            var info = model.GetSymbolInfo(a);\r\n            Assert.Equal(attrType, info.Symbol);\r\n        }\r\n```\r\n\r\nWhen using the regular semantic model, the symbol returned by GetSymbolInfo is the attribute constructor. When using the speculative semantic model, the type is returned instead.\r\n\r\nThe root cause of this seems to be that `TryGetSpeculativeSemanticModelForMethodBody` directly returns a MethodBody semantic model, which bypasses the `GetMemberModel` call which may be needed to retrieve a more specific model (like an Attribute or InitializerSemanticModel) that may be needed to bind pieces of local functions.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24050", "title": "With portable signing enabled, Roslyn does not support signing with the ECMA strong name key", "body": "The ECMA strong name key appears to be a special case for signing that will need to be handled separately.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23762", "title": "Remove checksum workaround in PEWriter when System.Reflection.Metadata is updated", "body": "When https://github.com/dotnet/corefx/issues/25829 is fixed and S.R.M is updated in Roslyn, we should remove the checksum fixup in PEWriter.cs.\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23762/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/dotnet/roslyn/commits/03839fa10b27b8587ba996198b75ef0ae0690c19", "message": "Merge pull request #24369 from dotnet/merges/dev15.7.x-to-master-20180122-080024\n\nMerge dev15.7.x to master"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/1c2dafa028da8e8ce977663f8944312058715c88", "message": "Merge pull request #24338 from dotnet/merges/dev15.7.x-to-master-20180119-080023\n\nMerge dev15.7.x to master"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/c6aaf04d3d4b6bd033c170faa4051f3209ef8a1d", "message": "Merge pull request #24337 from dotnet/merges/dev15.6.x-to-dev15.7.x-20180119-080018\n\nMerge dev15.6.x to dev15.7.x"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/e2a2b4b3824efeef9e999fe2ca9027f2a84e09f5", "message": "Merge pull request #24327 from dotnet/merges/dev15.6.x-to-dev15.7.x-20180118-234432\n\nMerge dev15.6.x to dev15.7.x"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/927700bbec1381b34f453da4b8af5ea1f2e21cdb", "message": "Limit compiler server pipe name length (#24265)\n\nOn MacOS pipes are implemented using Unix domain sockets. Unix domain\r\nsockets must have a valid file path for their endpoint. The best place\r\nis in the temp folder. Unfortunately, domain sockets on Unix also have a\r\nvery small path length limit of 104 characters. In addition, Mac temp\r\npaths can be very long since they include randomly generated characters\r\nfrom the OS. In total, this means that Roslyn has barely 50 characters\r\nworth of space for its pipe identifiers.\r\n\r\nThis change cuts down on the bytes of the SHA256 hash used. This shouldn't\r\naffect the security of the pipe, since the hash isn't used as a security boundary,\r\nbut should fit the pipe name into the length limitations.\r\n\r\nFixes #24137"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/1af43525a206d0bd47c7db099de53c1da0bdcb2b", "message": "Add 15.7-vs-deps to published branches list"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/dcc810ef6fe664af9efe95205db15529b6478fe8", "message": "Merge pull request #24301 from dotnet/merges/dev15.6.x-to-master-20180118-080017\n\nMerge dev15.6.x to master"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/a0865626ae9d3a5ed9b34b47e1c6ebc1e2d38241", "message": "Merge pull request #24280 from dotnet/merges/dev15.6.x-to-master-20180117-080050\n\nMerge dev15.6.x to master"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/6db04109879e42fbe99a3c1e8f1d44175c041e73", "message": "Merge pull request #24240 from dotnet/merges/dev15.6.x-to-master-20180115-080017\n\nMerge dev15.6.x to master"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/148480640e256017253627c17e562d974e122671", "message": "Change local function definite assignment (#23749)\n\nThe LDM has decided that the following rules should be in effect when\r\ncalculating definite assignment for local functions:\r\n\r\n  1. The entry point to a local function is always reachable.\r\n  2. Variables captured in local functions are definitely assigned if\r\n  they are definitely assigned in all branches into the local function.\r\n\r\nIt turns out these rules were almost exactly what the compiler already\r\nimplemented, but there was a bug in captured variable detection that\r\nmeant that variables captured in lambdas within local functions were\r\nsometimes not counted as captured. This change fixes the bug around\r\ncapturing, which should cause the compiler to conform to this\r\nspecification.\r\n\r\nFixes #17829"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/0a54c5ad9d711dc9875adc415e0dd64ff57bd9e4", "message": "Use correct type parameter binder for local functions (#24108)\n\nThis looks like simple oversight. The binder being used for type\r\nparameters was retrieved from the binder factory since we didn't\r\nexplicitly pass one. For members this is correct since the binder\r\nfactory can be queried for top-level binders. This is not correct for\r\nlocal functions because they use method body binders, which are not\r\naccessible from the binder factory.\r\n\r\nMostly, this doesn't matter. The exception is when you try to\r\nspeculatively bind an attribute on a type parameter. Here, you need an\r\nin-method binder and VS will crash if it's the wrong binder. This was\r\nuncommon since attributes on type parameters are not permitted in local\r\nfunctions, but VS should not crash.\r\n\r\nFixes #17814"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/e710720ae81f093976a04582f5962cabc8abec2b", "message": "Fix and re-enable portable signing (#23704)\n\nThere were two separate bugs here:\r\n    1) Fixing up the MVID of the binary was being done *after* signing,\r\n    when it should be done before.\r\n\r\n    2) System.Reflection.Metadata has a bug where calculating the\r\n    checksum occurs before signing, when it should happen after.\r\n\r\nBoth of these isues have been fixed and the helper utility that checks\r\nto see whether a binary was signed has been changed to verify that the\r\nsignature and checksums of the binaries are valid, not just that the\r\nsigned bit is set on the assembly.\r\n\r\nFixes #23521"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/c7a465fabaf688affbd5897d7348431eeb2059b5", "message": "Fix hang in compiler server (#23805)\n\nThe dotnet CLI has been seeing a hang from VBCSCompiler in their build\r\non non-Windows platforms. The cause is this:\r\n\r\n    1. dotnet build starts a child process to do `dotnet pack` and\r\n    redirects its output to a buffer.\r\n    2. `dotnet pack` starts a child process to do `compile`.\r\n    3. `compile` starts vbcscompiler because one is not already running.\r\n    4. VBCSCompiler inherits the output handles from (1).\r\n    5. VBCSCompiler process finishes and processes (1) and (2) exit.\r\n    6. The parent `dotnet build` process  is waiting for (2) to exit,\r\n    which it has, but also to see EOF on its output stream. Because that\r\n    stream has been captured and held open by VBCSCompiler, the EOF\r\n    never comes.\r\n    7. `dotnet build` hangs.\r\n\r\nThis change fixes the problem by creating new streams for input and\r\noutput for the compiler server process. This isn't quite what we do on\r\nWindows -- on Windows we create invalid handles for the input and output\r\n-- but it's as close as we can get using the portable APIs in\r\nSystem.Diagnostics.Process.\r\n\r\nFixes #23734"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/eed147d330e92a55cb2daa26acb28fcde1776f04", "message": "Enable multicore JIT in the compilers (#23173)\n\nHere is the output from my perf testing tool currently in review that\r\nshows a significant difference in csc.exe after the change:\r\n\r\n```\r\n// * Detailed results *\r\nPlaceholderBenchmarkRunner.PlaceholderMethod: Job-TGYVCW(Toolchain=Perf.ExternalProcessToolchain, LaunchCount=0, RunStrategy=Monitoring, TargetCount=25, WarmupCount=0) [Commit=HEAD^]\r\nRuntime = ; GC =\r\nMean = 4.8018 s, StdErr = 0.0215 s (0.45%); N = 25, StdDev = 0.1073 s\r\nMin = 4.6717 s, Q1 = 4.7297 s, Median = 4.7892 s, Q3 = 4.8438 s, Max = 5.1998 s\r\nIQR = 0.1141 s, LowerFence = 4.5585 s, UpperFence = 5.0149 s\r\nConfidenceInterval = [4.7214 s; 4.8822 s] (CI 99.9%), Margin = 0.0804 s (1.67% of Mean)\r\nSkewness = 1.87, Kurtosis = 7.98\r\n\r\nPlaceholderBenchmarkRunner.PlaceholderMethod: Job-TGYVCW(Toolchain=Perf.ExternalProcessToolchain, LaunchCount=0, RunStrategy=Monitoring, TargetCount=25, WarmupCount=0) [Commit=HEAD]\r\nRuntime = ; GC =\r\nMean = 3.6409 s, StdErr = 0.0650 s (1.78%); N = 25, StdDev = 0.3249 s\r\nMin = 3.4381 s, Q1 = 3.5510 s, Median = 3.5781 s, Q3 = 3.6189 s, Max = 5.1720 s\r\nIQR = 0.0679 s, LowerFence = 3.4491 s, UpperFence = 3.7209 s\r\nConfidenceInterval = [3.3975 s; 3.8842 s] (CI 99.9%), Margin = 0.2433 s (6.68% of Mean)\r\nSkewness = 4.16, Kurtosis = 19.76\r\n\r\nTotal time: 00:07:11 (431.13 sec)\r\n\r\n// * Summary *\r\n\r\nBenchmarkDotNet=v0.10.9, OS=Windows 10 Redstone 1 (10.0.14393)\r\nProcessor=Intel Xeon CPU E5645 2.40GHz, ProcessorCount=24\r\nFrequency=2337892 Hz, Resolution=427.7358 ns, Timer=TSC\r\n.NET Core SDK=2.1.1-preview-007094\r\n  [Host] : .NET Core 2.0.0 (Framework 4.6.00001.0), 64bit RyuJIT\r\n\r\nToolchain=Perf.ExternalProcessToolchain  LaunchCount=0  RunStrategy=Monitoring\r\nTargetCount=25  WarmupCount=0\r\n\r\n            Method | Commit |    Mean |    Error |   StdDev | Rank |\r\n------------------ |------- |--------:|---------:|---------:|-----:|\r\n PlaceholderMethod |   HEAD | 3.641 s | 0.2433 s | 0.3249 s |    1 |\r\n PlaceholderMethod |  HEAD^ | 4.802 s | 0.0804 s | 0.1073 s |    2 |\r\n\r\n// * Legends *\r\n  Commit : Value of the 'Commit' parameter\r\n  Mean   : Arithmetic mean of all measurements\r\n  Error  : Half of 99.9% confidence interval\r\n  StdDev : Standard deviation of all measurements\r\n  Rank   : Relative position of current benchmark mean among all benchmarks (Arabic style)\r\n  1 s    : 1 Second (1 sec)\r\n\r\n```"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24352", "title": "Add doc describing ref-reassignment", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24239", "title": "Fix compiler server on CoreCLR and enable bootstrapping on CoreCLR build", "body": "### Customer scenario\r\n\r\nThis PR fixes the CoreCLR compiler server on Windows and changes our bootstrap build to act as a test case. The bug in the compiler server was we were attempting to do user ID verification on CoreCLR on Windows, but those APIs are not available on CoreCLR, so this would always fail. This fix disables user ID verification and relies only on Windows pipe ACLs, which should be enough to ensure that only properly privileged users can connect.\r\n\r\n### Bugs this fixes\r\n\r\nFixes #20900 and #24072\r\n\r\n### Workarounds, if any\r\n\r\nThere are no workarounds for using the compiler server under CoreCLR on Windows.\r\n\r\n### Risk\r\n\r\nThis change is substantially similar to what we do on Linux, so has already been given a fair amount of coverage. \r\n\r\n### Performance impact\r\n\r\nThis should make the compiler much faster on CoreCLR.\r\n\r\n### Is this a regression from a previous update?\r\n\r\nNo.\r\n\r\n### Root cause analysis\r\n\r\nWe didn't bootstrap using the compiler server on CoreCLR, which I've now added.\r\n\r\n### How was the bug found?\r\n\r\nCustomer reported.\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70021064", "body": "Is this not the issue? \u263a\n\nFrom: Jared Parsons [mailto:notifications@github.com]\nSent: Wednesday, January 14, 2015 4:34 PM\nTo: dotnet/roslyn\nCc: Andy Gocke\nSubject: Re: [roslyn] Add symbol files(.pdb/source) to NuGet packages (#3)\n\nI agree it would be nice if we hooked into the source and symbol information into our packages.\n\n@agockehttps://github.com/agocke do we have an issue tracking this yet?\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dotnet/roslyn/issues/3#issuecomment-70020597.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70021064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70021252", "body": "Nope, I asked David to file it here\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70021252/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/151734929", "body": "Actually, after internal discussion I don't think we should do this at all. We upload our symbols to the Microsoft symbol servers, so the symbols should be available via the public servers.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/151734929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/165589452", "body": "This issue is no longer clear or clearly Roslyn-related. I'm going to close it unless someone has a clear ask for Roslyn right now.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/165589452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/165594486", "body": "@davkean The symbols are available. They're uploaded to the Microsoft PDB server.\n\n@Pilchie So the issue here is now source linking.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/165594486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/165594914", "body": "@ctaggart Why portable PDBs?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/165594914/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/165595028", "body": "@davkean I thought so.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/165595028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/165604390", "body": "@Pilchie Yes, this should be verified.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/165604390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70314715", "body": "Let  me shortcut this -- what you're basically asking for is a variant of Hindley-Milner type inference for type members.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70314715/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70339704", "body": "@MadsTorgersen Analyzers could potentially reduce the risk of that.\n\nOtherwise, we should consider when/if it's possible to infer the type of the lambda based on its use. It would definitely not be possible to infer the type in certain situations and very expensive (in compilation time and implementation effort) in others, like use outside of the current method body. However, it may be worth simply disallowing these \"var\" instances for the use in the 99% case and no risk of implicit conversion pollution.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70339704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70340667", "body": "Reminder to everyone; this is what the spec actually has to say about lambda (\"Anonymous function\") expressions:\n\n> An anonymous function is an expression that represents an \u201cin-line\u201d method definition. An anonymous function does not have a value or type in and of itself, but is convertible to a compatible delegate or expression tree type. The evaluation of an anonymous function conversion depends on the target type of the conversion: If it is a delegate type, the conversion evaluates to a delegate value referencing the method which the anonymous function defines. If it is an expression tree type, the conversion evaluates to an expression tree which represents the structure of the method as an object structure.\n\nFor the purposes of this discussion, if you think that a lambda is of type `Func` or `Action` I would really suggest you go read all of section 7.15 of the C# specification, since we're probably going to end up pretty far in the weeds here.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70340667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70357220", "body": "@kasajian \n\n> Is that a bad idea for C#?\n\nLeaving aside any technical issues (which are substantial) IMHO, yes.\n\nI've long considered ML allowing H-M in top-level methods a mistake made more for theoretical purity than practical usefulness. Almost every ML ends up with style guidelines which prohibit using inference in top-level declarations, partially because of the quick realization after using strong typing that types are actually a form of documentation, but a better form. The question is, if everyone agrees that it's bad style, why allow it in the first place?\n\nConsider what happens when you write many top level declarations which are interdependent for inference:\n1. Type checking takes forever\n2. Top-level type contracts become extremely brittle. If a top level return type is inferred from a call to another method and the second method is changed by an unrelated change by an unrelated developer, instead of getting a type error your public contract magically changes return type.\n3. You start debugging type inference failures with foreign types from all over the compilation. If you've worked in a sizable Haskell project you know what I mean. If you haven't, it's like debugging C++ template errors (but slightly better).\n\nThere are only a few situations that I could see getting better. Fields with duplicate type names are kind of annoying and I would rather not type `List<int> field = new List<int>();`. Small, very understandable private helper methods could be easier to write. I'm not opposed to doing something  for these specific pain points, but I'd prefer to discuss tightly constrained examples if we want to think about it. To me, the larger proposal is a net negative, even if we could get it to work.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70357220/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70590631", "body": "@MadsTorgersen This still means we would need to infer the type of the local function based on later usage, correct? Or are we still considering VB-style delegate relaxation?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70590631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/10154291", "body": "I have no idea how it happened. And I think those erroneous renames are just Git being a little weird. Those files are identical, so it doesn't matter.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10154291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10170015", "body": "`git mv -f`\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10170015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/11223238", "body": "Ack, must have missed that -- thanks!\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/11223238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14545362", "body": "It looks like we do not run Release for PRs. I can explore doing that, but it would significantly increase the number of jobs we would run for every PR.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14545362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15834810", "body": "My understanding was that we are using RunTests primarily because we needed it for scheduling back when we referenced xunit 1.9.2.\n\nNow that we reference 2.1.0 and have access to the new runner which can do, e.g. assembly parallelization, on its own I didn't think we needed to deal with the extra layer.\n\nIs there something else from RunTests that you find useful? I'd eventually like to take the desktop tests off RunTests as well, it was just not in scope for this change.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15834810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15834845", "body": "Correct.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15834845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15834904", "body": "I was going to add information in the Docs when this got merged. Since these deployment projects are still in \"testing\" quality for me, I was going to wait until I was sure this was the form I proposed we merge into master\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15834904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15834924", "body": "These are basically empty files, they still need \u00a9? :)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15834924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15835737", "body": "Maybe. I'll take a look\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15835737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15835751", "body": "Without these changes the tests will fail, so it should be easy to tell :)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15835751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15836013", "body": "OK. Well, there's nothing that I know of preventing us from using RunTests here.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15836013/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15836038", "body": "(Except that RunTests isn't netcore, so it will need to be ported to run xplat)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15836038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "jhinder": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24130", "title": "QuickInfo always shows fully qualified type names for value tuple variables", "body": "**Version Used**: VS 15.5.3; VS 15.6.0 Preview 1.1\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a new implicitly typed variable of a value tuple type. (See snippets below.)\r\n2. Invoke the QuickInfo tooltip on the `var` (or `Dim`) keyword.\r\n\r\n**Expected Behavior**:\r\n\r\nThe tooltip shows one of the following for the tuple member types:\r\n\r\n1. the keyword for tuple elements that are types with associated keywords (`string`, `int`, `object` etc),\r\n2. the non fully qualified type name for types that don't fall in the first category, but are accessible via imported namespaces (e.g. `DateTime` when there's a `using System` directive),\r\n3. the fully qualified type name in all other cases.\r\n\r\nThis is already the case for QuickInfos on the tuple variable itself (*(local  variable) (int, int) a*) and on the method invocation (*(int, int) Demo.MakeTuple&lt;int&gt;()*).\r\n\r\n**Actual Behavior**:\r\n\r\nThe tooltip always shows the fully qualified type name (e.g. *(System.Int32, System.Int32)* for an `(int, int)` tuple) instead of the shorter variants described above.\r\n\r\n**Sample code**:\r\n\r\n```c#\r\npublic static void Test()\r\n{\r\n    var a = MakeTuple<int>();\r\n    var b = MakeTuple<DateTime>();\r\n}\r\n\r\nprivate static (T, T) MakeTuple<T>() => (default, default);\r\n```\r\n\r\n```vb\r\nSub Test()\r\n    Dim a = MakeTuple(Of Integer)()\r\n    Dim b = MakeTuple(Of DateTime)()\r\nEnd Sub\r\n\r\nFunction MakeTuple(Of T)() As (T, T)\r\n    Return (Nothing, Nothing)\r\nEnd Function\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Chaser324": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24129", "title": "Add \"IndentNamespace\" formatting option.", "body": "Some people, myself included, prefer to not indent namespace contents. Currently, I don't think the formatting options to enable this are really exposed.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bluefoxxp": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24125", "title": "VS compiler error BC30652 on a COM DLL method using referenced enumeration", "body": "**Version Used**: \r\n\r\n- .net Framework 4.5.2\r\n- Visual Studio 2015\r\n- New VB.NET console application\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a RCW for a foreign COM dll, called NETLib.dll and reference it in VS\r\n2. Create a RCW for a second foreign COM dll, called RefLib.dll and reference it in VS\r\n3. The NETLib.dll holds the following method:\r\n`Function DoSomething(sData As String, iData As Integer, eData As RefLib.enumDat) As Integer`\r\n4.  Create a new class in the project with the following code:\r\n\r\n```VB.NET\r\nPublic Class MyClass\r\n    Private oNetLibClass As NetLib.claSomeClass\r\n    Sub New()\r\n        oNetLibClass = New NetLib.claSomeClass\r\n        Dim eVal = RefLib.enumDat.Foo\r\n        Dim lReturn = oNetLibClass.DoSomething(\"DoIt\", 1, eVal)\r\n    End Sub\r\nEnd Class\r\n```\r\n\r\n**Actual Behavior**:\r\nThe VS compiler throws the following error:\r\n\r\n> BC30652: Reference required to assembly 'RefLib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null' containing the type 'enumDat'. Add one to your project.\r\n\r\nBoth libraries have the same, correct version number, culture setting and are set to **Embed Interop Types = True**\r\n  #", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "livarcocc": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24124", "title": "Error building on Linux", "body": "_From @sebastienros on January 8, 2018 17:33_\n\nOn Linux only, when building a specific project on Linux with the latest SDK, I get an exception that originates from msbuild.\r\n\r\nWhen using an older SDK the error goes away.\r\n\r\nCurrent installed SDK: `2.2.0-preview1-007866`\r\nSDK that doesn't repro the error: `2.2.0-preview1-007522`\r\n\r\nProject to reproduce the issue: https://github.com/aspnet/benchmarks/tree/dev/src/Benchmarks\r\n\r\nLogged error\r\n```\r\nErrors\r\n    /tmp/tmpYHoYVk.tmp/l5visbph.cxt/sdk/2.2.0-preview1-007866/Roslyn/Microsoft.CSharp.Core.targets(84,5): error MSB3883: Unexpected exception:  [/tmp/tmpYHoYVk.tmp/nshuithb.5nm/benchmarks/src/Benchmarks/Benchmarks.csproj]\r\n    /tmp/tmpYHoYVk.tmp/l5visbph.cxt/sdk/2.2.0-preview1-007866/Roslyn/Microsoft.CSharp.Core.targets(84,5): System.AggregateException: One or more errors occurred. (The system cannot open the device or file specified) ---> System.IO.IOException: The system cannot open the device or file specified\r\n   at System.Threading.Mutex.CreateMutexCore(Boolean initiallyOwned, String name, Boolean& createdNew)\r\n   at Microsoft.CodeAnalysis.CommandLine.BuildServerConnection.<RunServerCompilationCore>d__7.MoveNext()\r\n   --- End of inner exception stack trace ---\r\n   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)\r\n   at System.Threading.Tasks.Task.Wait(CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.BuildTasks.ManagedCompiler.ExecuteTool(String pathToTool, String responseFileCommands, String commandLineCommands)\r\n---> (Inner Exception #0) System.IO.IOException: The system cannot open the device or file specified\r\n   at System.Threading.Mutex.CreateMutexCore(Boolean initiallyOwned, String name, Boolean& createdNew)\r\n   at Microsoft.CodeAnalysis.CommandLine.BuildServerConnection.<RunServerCompilationCore>d__7.MoveNext()<--- [/tmp/tmpYHoYVk.tmp/nshuithb.5nm/benchmarks/src/Benchmarks/Benchmarks.csproj]\r\n\r\n```\r\n\r\nI also join the full `msbuild.log`\r\n\r\n\r\n\r\n\r\n\n\n_Copied from original issue: dotnet/cli#8344_", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24019", "title": "NET Core SDK 2.2 for Visual Studio 2017", "body": "_From @VE-2016 on December 20, 2017 13:55_\n\n## Steps to reproduce\r\nI would like to build Roslyn platform from sources in Visual Studio 2017. One requirement is to install NET Core SDK 2.2 (preview). After installation of the NET Core SDK 2.2.0_Preview this version is not visible in Visual Studio 2017 in installed NetCore Frameworks\r\n\r\n## Expected  behavior\r\nRoslyn cannot be built because Visual Studio 2017 does not find this NET Core SDK 2.2.0 version.  How to install this version for Visual Studio 2017?\r\n\r\n## Actual behavior\r\nNET Core SDK 2.2 runs properly from command-line only.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n_Copied from original issue: dotnet/cli#8273_", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24019/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23998", "title": "Unable to resolve .NETFRameWork reference in .NETCore solution", "body": "_From @shishirsasal on December 26, 2017 18:40_\n\n## Steps to reproduce\r\n1. Download roslyn - https://github.com/dotnet/roslyn\r\n2. Trying to build the whole solution\r\n\r\n## Expected  behavior\r\nBuild successful\r\n\r\n## Actual behavior\r\nThrows error\r\nError\tMSB3644\tThe reference assemblies for framework \".NETFramework,Version=v4.6.1\" were not found. To resolve this, install the SDK or Targeting Pack for this framework version or retarget your application to a version of the framework for which you have the SDK or Targeting Pack installed. Note that assemblies will be resolved from the Global Assembly Cache (GAC) and will be used in place of reference assemblies. Therefore your assembly may not be correctly targeted for the framework you intend.\tCSharpCodeStyleTests\tC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\Microsoft.Common.CurrentVersion.targets\t1122\t\r\n\r\n## Environment data\r\nHave installed .NETCore 2.0 SDK\r\nHave installed .NETFramework4.6,.NETFramework4.6.1\r\n\r\nNOTE: All other projects are referring .NETFrameWork 4.6.1 except the one shown in below attachment\r\n\r\n![gitissue](https://user-images.githubusercontent.com/34867438/34362487-17863956-ea9a-11e7-8e8e-57c2ec3572d5.PNG)\r\n\r\n\r\n\r\n\r\n\n\n_Copied from original issue: dotnet/cli#8295_", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23998/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rchande": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24112", "title": "Debugger inserts DisplayText instead of InsertionText.", "body": "1. New Console App, set a breakpoint, F5. Do not type in the editor.\r\n2. After hitting the breakpoint, open the Watch window and type an expression.\r\n3. Type \"List\" and observe that \"List<>\" is highlighted.\r\n4. Press Tab to commit the \"List<>\" items.\r\n\r\nExpected:\r\n`List` inserted into watch window\r\n\r\nActual:\r\n`List<>` inserted into watch window.\r\n\r\nInteresting:\r\nIf you do the same in the main editor, `List` is always inserted. After doing this in the main editor, Debugger Intellisense starts inserting `List` instead of `List<>`\r\n\r\nThis was reported by the Pythia team who received a bug report because their CompletionProvider always inserts an InsertionText that differs from its DisplayText.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24271", "title": "WIP: implement new editor completion API", "body": "Sending this out to get some eyes on it.\r\n* Still needs to formally consume editor packages once they're created\r\n* Needs tests", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/22169", "title": "Include out parameter names in completion", "body": "Addresses https://github.com/dotnet/roslyn/issues/21837\r\n\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/22149", "title": "Disable name completion while snippet expansion is active", "body": "Addresses the \"can't fill out snippet fields\" component of https://devdiv.visualstudio.com/DevDiv/_workitems?id=485413&_a=edit\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/22041", "title": "Etw test2", "body": "**Customer scenario**\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n**Bugs this fixes:**\r\n\r\n(either VSO or GitHub links)\r\n\r\n**Workarounds, if any**\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n**Risk**\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n**Performance impact**\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n**Is this a regression from a previous update?**\r\n\r\n**Root cause analysis:**\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n**How was the bug found?**\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n**Test documentation updated?**\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/21617", "title": "Verify the right text was pasted", "body": "May help diagnose https://github.com/dotnet/roslyn/issues/21559 which apparently fails because nothing gets pasted.\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/21589", "title": "Start consuming new command handler API", "body": "This change begins the process of moving Roslyn onto the editor's new commanding API. The editor has not yet implemented the functionality that allows command handlers to call the editor while processing a command. This change therefore only ports command handlers that handle commands in a \"simple\" way. The main changes are:\r\n* Rename Roslyn's ExportCommandHandlerAttribute to not conflict with the new attribute with the same name added by the editor\r\n* Rename Roslyn's ICommandHandler and CommandState types to not conflict with the types added by the editor\r\n* Ports a bunch of commands and deletes their specific CommandArgs as well as the handling in IOleCommandTarget\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/21123", "title": "Don't include type parameters in new preselection", "body": "If a constructed generic type is inferred whose type arguments include type parameters, just provide the standard \"completion of generic type\" experience.\r\nFixes  https://github.com/dotnet/roslyn/issues/21049\r\n\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/18822", "title": "Fix command handler ordering", "body": "**Customer scenario**\r\n\r\nWith automatic brace completion and intellisense active, customer types shift+enter to commit intellisense, complete the pending brace completion, and complete the statement. Completion is committed, but brace completion is not.\r\n\r\n**Bugs this fixes:**\r\n\r\nhttps://github.com/dotnet/roslyn/issues/18065\r\n\r\n**Workarounds, if any**\r\n\r\nCustomer has to manually finish their braces because this keyboard shortcut does not work.\r\n\r\n**Risk**\r\n\r\nModerately risky. It is possible that this change will introduce an unanticipated change in the interaction between completion and brace completion.\r\n\r\n**Performance impact**\r\n\r\nLow. We will do extra work to commit brace completion if the user uses the command.\r\n\r\n**Is this a regression from a previous update?**\r\n\r\nNo, we shipped Dev14 like this.\r\n\r\n**Root cause analysis:**\r\n\r\nThere were integration tests covering this scenario but they had the wrong baselines or were skipped.\r\n\r\n**How was the bug found?**\r\n\r\nWe noticed this while porting integration tests to the new framework.\r\n", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70899381", "body": "Accelerators should work even if you focus the editor. We changed F2 to refocus the dashboard in order to allow users of screen readers to have the dashboard read to them. How could we implement that if we made F2 commit?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70899381/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70934497", "body": "Sure, that sounds reasonable.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70934497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/9851071", "body": "If only an overload of Test() took a workspace XML...\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/9851071/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/9851080", "body": "Yes, this is what the formatter did.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/9851080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/9851084", "body": "Yes, this is what the formatter did.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/9851084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10670983", "body": "Oops, these names are flipped.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10670983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10670990", "body": "Return targetToken.iskind...\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10670990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12383574", "body": "Sweet typo!\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12383574/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16365717", "body": "He says his is staged against future. We have agreed to resolve any merge conflict that occurs. :)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16365717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "MaStr11": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24099", "title": "Diagnostic CodeFix for CS0433: The type TypeName1 exists in both Assembly1 and Assembly2", "body": "**Version Used**: \r\n\r\nVS 15.5.2\r\n\r\n**Steps to Reproduce**:\r\n\r\nIf a projects references two libraries with the same type defined in the same namespace CS0433 is triggered if this type is used. A code fix should be offered that\r\n\r\n1. adds an alias to the library reference,\r\n2. adds an corresponding extern alias directive to the document\r\n3. fully qualifies the type (additionally a type alias could be offered as in #24022)\r\n\r\nThe fix should also be offered for warning `CS0436 The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.`\r\n\r\n**Before the fix**:\r\n\r\nAssembly1 File1.cs  \r\n```C#\r\nnamespace N1\r\n{\r\n    public class Ambiguous\r\n    {\r\n    }\r\n}\r\n```\r\nAssembly2 File2.cs\r\n```C#\r\nnamespace N1\r\n{\r\n    public class Ambiguous\r\n    {\r\n    }\r\n}\r\n```\r\nTestAssembly\r\nReferences Assembly1 and Assembly2\r\nFile3.cs in TestAssembly\r\n```C#\r\nnamespace N2\r\n{\r\n    public class Test\r\n    {\r\n        void M()\r\n        {\r\n              new N1.Ambiguous(); //CS0433\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**After the fix**:\r\n\r\nTestAssembly\r\nReferences Assembly1 **reference is aliased with *Assembly1Alias*** and Assembly2\r\nFile3.cs in TestAssembly\r\n```C#\r\nextern alias Assembly1Alias;\r\nnamespace N2\r\n{\r\n    public class Test\r\n    {\r\n        void M()\r\n        {\r\n              new Assembly1Alias::N1.Ambiguous(); \r\n        }\r\n    }\r\n}\r\n```\r\nRelates to #23326.\r\n  \r\n  ", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24096", "title": "Diagnostic CodeFix for CS0121: ambiguous extension methods.", "body": "**Version Used**: \r\n\r\nVS 15.5.2\r\n\r\n**Steps to Reproduce**:\r\n\r\nMethod overload resolution for extension methods fails with error `CS0121: The call is ambiguous between the following methods or properties: 'method1' and 'method2'` if two extension methods with the same signature are in scope. A code fix should be provided that transforms the call to the extension method in a call to the static method by fully qualifying the desired method.\r\n\r\n**Before the fix**:\r\n\r\n```C#\r\nusing N1;\r\nusing N2;\r\n\r\nnamespace N1\r\n{\r\n    public static class Ext1\r\n    {\r\n        public static void Ambiguous(this object that) { }\r\n    }\r\n}\r\n\r\nnamespace N2\r\n{\r\n    public static class Ext2\r\n    {\r\n        public static void Ambiguous(this object that) { }\r\n    }\r\n}\r\n\r\nnamespace NTest\r\n{\r\n    public class C\r\n    {\r\n        void M()\r\n        {\r\n            new object().Ambiguous(); //CS0121\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**After the fix**:\r\n\r\n```C#\r\nusing N1;\r\nusing N2;\r\n\r\nnamespace N1\r\n{\r\n    public static class Ext1\r\n    {\r\n        public static void Ambiguous(this object that) { }\r\n    }\r\n}\r\n\r\nnamespace N2\r\n{\r\n    public static class Ext2\r\n    {\r\n        public static void Ambiguous(this object that) { }\r\n    }\r\n}\r\n\r\nnamespace NTest\r\n{\r\n    public class C\r\n    {\r\n        void M()\r\n        {\r\n            N1.Ext1.Ambiguous(new object()); \r\n        }\r\n    }\r\n}\r\n```\r\n\r\nRelates to #23326 and #24022.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23837", "title": "Contributor Pain: Running Test.cmd on a non english machine causes lots of unit tests to fail", "body": "**Version Used**: \r\n\r\nLatest master at commit  69e99a8\r\n\r\n**Steps to Reproduce**:\r\n\r\nRun `Test.cmd` with a non english locale.\r\n\r\n**Expected Behavior**:\r\n\r\nAll tests pass without errors.\r\n\r\n**Actual Behavior**:\r\n\r\n26 out of 41 test assemblies fail with errors. There were already about five failing tests in the past because of localization problems but since the introduction of xlf the situation got unbearable with hundreds of failing tests. I'm not sure but I think PR #23744 is to blame.\r\nAttached you can find the [UnitTestResults.zip](https://github.com/dotnet/roslyn/files/1568759/UnitTestResults.zip)\r\nIn the current situation I'm not able to run all tests locally to find regressions before committing. Maybe xUnit should be forced to use the [en-US locale](https://stackoverflow.com/a/42880541).\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24173", "title": "Suppress 'IDE0041 Null check can be simplified' for unconstraint generic parameters.", "body": "### Customer scenario\r\n\r\n`IDE0041 Null check can be simplified` is shown for the `ReferenceEquals` method and a fix is offered. The fix generates code which might have the compiler error 'Can not convert null to type parameter T because it could be a non-nullable value type.'. This fix suppresses IDE0041 if the parameter passed to ReferenceEquals is ~an unconstraint generic type parameter~ Update 01/17/2018: a value type constraint generic type parameter.\r\n\r\n### Bugs this fixes\r\n\r\n#23581\r\n\r\n### Workarounds, if any\r\n\r\nSuppress IDE0041 with a pragma or change the generated code from `(value is null)`to `(value == null)`.\r\n\r\n### Risk\r\n\r\nLow. Small additional check.\r\n\r\n### Performance impact\r\n\r\nLow. Syntax and semantic analysis has already been done by other checks on the code path before. This adds some more checks.\r\n\r\n### Is this a regression from a previous update?\r\n\r\n/\r\n\r\n### Root cause analysis\r\n\r\n/\r\n\r\n### How was the bug found?\r\n\r\nCustomer reported #23581\r\n\r\n### Test documentation updated?\r\n\r\n/\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24022", "title": "Ambiguous type codefix provider (using alias)", "body": "### Customer scenario\r\n\r\nCodefix for `CS0104 'reference' is an ambiguous reference between 'identifier' and 'identifier'` (BC30561 in VB). \r\n\r\nBefore:\r\n```C#\r\nusing N1;\r\nusing N2;\r\n\r\nnamespace N1\r\n{\r\n    public class AmbiguousClass { }\r\n}\r\nnamespace N2\r\n{\r\n    public class AmbiguousClass { }\r\n}\r\nnamespace NTest\r\n{\r\n    public class Test: AmbiguousClass //CS0104\r\n    {\r\n    }\r\n}\r\n```\r\nAfter\r\n```C#\r\nusing N1;\r\nusing N2;\r\nusing AmbiguousClass = N1.AmbiguousClass; // Fix\r\n\r\nnamespace N1\r\n{\r\n    public class AmbiguousClass { }\r\n}\r\nnamespace N2\r\n{\r\n    public class AmbiguousClass { }\r\n}\r\nnamespace NTest\r\n{\r\n    public class Test: AmbiguousClass\r\n    {\r\n    }\r\n}\r\n```\r\n\r\n![2018-01-03 20_31_22-](https://user-images.githubusercontent.com/24472128/34536366-28c61dcc-f0c5-11e7-9ced-452894c3e672.png)\r\n\r\n### Bugs this fixes\r\n\r\nFeature request #23373.\r\n\r\n### Workarounds, if any\r\n\r\nFully qualify type.\r\n\r\n### Risk\r\n\r\nGolden bar from failing code fix provider.\r\n\r\n### Performance impact\r\n\r\nLow. Code fix is only triggered by one diagnostic (CS0104 or BC30561)\r\n\r\n### Is this a regression from a previous update?\r\n\r\nNew feature.\r\n\r\n### Root cause analysis\r\n\r\nUser request to get closer to parity with Resharper.\r\n\r\n### How was the bug found?\r\n\r\nCustomer reported #23373. \r\n\r\n### Test documentation updated?\r\n\r\nNo.\r\n\r\n### Remarks\r\n\r\nUpdate 8/1/18: This is resolved:\r\n~I tried to use `class GroupingCodeAction : CodeAction.CodeActionWithNestedActions` to group the re-factorings like [here](https://github.com/dotnet/roslyn/blob/19001be93af8a5e6422899c0b3e0c736fde67482/src/Features/Core/Portable/FullyQualify/AbstractFullyQualifyCodeFixProvider.cs#L81) but then all tests were failing and in VS it didn't made a difference whether I use `CodeActionWithNestedActions` or register a code fix per ambiguous type. The FeaturesResources.Alias_ambiguous_type_0 text template was created to work with `CodeActionWithNestedActions` and therefore the text template is inadequate in the context it is used now.~\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23836", "title": "Support expression bodied properties in \"use auto property\" analyzer.", "body": "### Customer scenario\r\n\r\nThis PR adds support for expression bodied properties to the \"Use auto property\" code fixer.\r\n\r\nCode this fixes:\r\n\r\n```C#\r\nclass Class\r\n{\r\n    int i;\r\n    int P\r\n    {\r\n        get => i;\r\n    }\r\n}\r\n```\r\n\r\nAfter:\r\n\r\n```C#\r\nclass Class\r\n{\r\n    int P { get; }\r\n}\r\n```\r\n### Bugs this fixes\r\n\r\nNone. No related issue found.\r\n\r\n### Workarounds, if any\r\n\r\nNone.\r\n\r\n### Risk\r\n\r\nLow. Code fixer might fail to produce valid code or raise an unhandled exception (golden bar).\r\n\r\n### Performance impact\r\n\r\nLow. The analyzer does more syntax analysis now, but these changes should be allocation free. The fixer stayed almost the same.\r\n\r\n### Is this a regression from a previous update?\r\n\r\nFeature improvement.\r\n\r\n### Root cause analysis\r\n\r\n--\r\n\r\n### How was the bug found?\r\n\r\nDiscovered during working on #23835\r\n\r\n### Test documentation updated?\r\n\r\n--", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23835", "title": "Suppress analyzer for properties with explicit interface implementation", "body": "### Customer scenario\r\n\r\n\"Use auto property\" code fix is provided for properties explicit interface implementations. The code fix generated invalid code. This fix suppress the code fixer for those properties.\r\n\r\n### Bugs this fixes\r\n\r\n#23735 \r\n\r\n### Workarounds, if any\r\n\r\nDon't use the code fix.\r\n\r\n### Risk\r\n\r\nLow.\r\n\r\n### Performance impact\r\n\r\nThe change causes an allocation of an immutable array on each \"AnalyzeProperty\" run.\r\n\r\n### Is this a regression from a previous update?\r\n\r\nNo.\r\n\r\n### Root cause analysis\r\n\r\nCase wasn't covered by unit tests.\r\n\r\n### How was the bug found?\r\n\r\nCustomer reported\r\n\r\n### Test documentation updated?\r\n\r\nNo.\r\n\r\n### Remark\r\n\r\nAs discussed in https://github.com/dotnet/roslyn/issues/23735#issuecomment-351719968 there are cases where the analyzer actually could fix explicit implemented properties too, but this would probably do more harm than good. It would only work for read/write properties and every access to the backing field needs to be replaced by a cast to the interface:\r\n\r\n```C#\r\nnamespace RoslynSandbox\r\n{\r\n    public interface IFoo\r\n    {\r\n        object Bar\r\n        {\r\n            get;\r\n            set;\r\n        }\r\n    }\r\n    internal class Foo : IFoo\r\n    {\r\n        private object bar;\r\n\r\n        object IFoo.Bar\r\n        {\r\n            get\r\n            {\r\n                return this.bar;\r\n            }\r\n            set\r\n            {\r\n                this.bar = value;\r\n            }\r\n        }\r\n\r\n        private void M()\r\n        {\r\n            this.bar = null;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n```C#\r\nnamespace RoslynSandbox\r\n{\r\n    public interface IFoo\r\n    {\r\n        object Bar\r\n        {\r\n            get;\r\n            set;\r\n        }\r\n    }\r\n    internal class Foo : IFoo\r\n    {\r\n        object IFoo.Bar\r\n        {\r\n            get;\r\n            set;\r\n        }\r\n\r\n        private void M()\r\n        {\r\n            ((IFoo)this).Bar = null;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23587", "title": "Add parentheses around conditional expression in interpolated string code fix provider", "body": "### Customer scenario\r\n\r\nCode fix for a conditional expression in interpolated string. Adds parenthesis around the expression.\r\n\r\nBefore (invalid code with compiler error CS8361):\r\n```CSharp\r\n$\"{1 / Environment.TickCount == 0 ? 1 : 2}\"\r\n```\r\nAfter:\r\n```CSharp\r\n$\"{(1 / Environment.TickCount == 0 ? 1 : 2 )}\"\r\n```\r\nThis is a code fix for compiler error ERR_ConditionalInInterpolation = CS8361 introduced in  #23265.\r\n\r\n### Bugs this fixes\r\n\r\n#23323 \r\n\r\n### Workarounds, if any\r\n\r\nAdd parenthesis by hand.\r\n\r\n### Risk\r\n\r\nLow. Specialized code fix for a very narrow compiler error.\r\n\r\n### Performance impact\r\n\r\nLow. Specialized code fix for a very narrow compiler error.\r\n\r\n### Is this a regression from a previous update?\r\n\r\nNo.\r\n\r\n### Root cause analysis\r\n\r\nNew feature.\r\n\r\n### How was the bug found?\r\n\r\nThe need to add parenthesis caused confusion in the past. CS8361 was therefore introduced to improve the story. This is a follow up to further enhance the situation.\r\n\r\n### Test documentation updated?", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23049", "title": "Support GotoDefinition in LINQ query syntax", "body": "**Customer scenario**\r\n\r\nSupport *GotoDefinition* for LINQ query syntax. Enables Ctrl+Click and tool-tip info for LINQ query clauses. Proposal #23394.\r\n\r\n*GotoDefinition* and *QuickInfo* are finding the right overloads in `System.Linq.Enumerable`,  `System.Linq.Queryable` and the  [query expression pattern](https://github.com/ljw1004/csharpspec/blob/gh-pages/expressions.md#the-query-expression-pattern) depending on the source.\r\n\r\n![gotodefinitionlinq](https://user-images.githubusercontent.com/24472128/33327545-0d2bb59c-d458-11e7-9aaf-0ad7e030cf5f.gif)\r\n\r\n(Use [gif-explode](http://gif-explode.com/?explode=https://user-images.githubusercontent.com/24472128/33327545-0d2bb59c-d458-11e7-9aaf-0ad7e030cf5f.gif) to view the single frames).\r\n\r\n**Bugs this fixes:**\r\n\r\nFeature request #22096 by @dpoeschl.\r\n\r\n**Workarounds, if any**\r\n\r\nNew feature.\r\n\r\n**Risk**\r\n\r\nPerformance degradation in the editor. VS crashes.\r\n\r\n**Performance impact**\r\n\r\nUnknown.\r\n\r\n**Is this a regression from a previous update?**\r\n\r\nNo.\r\n\r\n**Root cause analysis:**\r\n\r\nSupport for LINQ query syntax was already included but was missing some features (only `select` and `group by` was supported and `UnoptimizedForm` of the query was not taken into account as fall-back).\r\n\r\n**How was the bug found?**\r\n\r\nFeature request #22096 and proposal #23394.\r\n\r\n**Test documentation updated?**\r\n\r\nNo.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/22673", "title": "Tuple support for DeclarationNameCompletionProvider (name suggestion)", "body": "**Customer scenario**\r\n\r\nSuggested names support for tuples. \r\n\r\n**Bugs this fixes:**\r\n\r\n#22342 (Kind of)\r\n\r\n**Workarounds, if any**\r\n\r\nNo. Feature improvement.\r\n\r\n**Risk**\r\n\r\nName suggestion might be triggered in inappropriate circumstances.\r\n\r\n**Performance impact**\r\n\r\nEditor performance and memory critical.\r\n\r\n**Is this a regression from a previous update?**\r\n\r\nNo. Feature improvement.\r\n\r\n**Root cause analysis:**\r\n\r\nTuple support was missing.\r\n\r\n**How was the bug found?**\r\n\r\nFound by investigating #22342. #22342 reports a (very) special case but more general cases were missing too.\r\n\r\n**Test documentation updated?**\r\n\r\nNo\r\n\r\n**Remarks**\r\n\r\nIt seems [DeclarationNameCompletionProvider](http://source.roslyn.codeplex.com/#Microsoft.CodeAnalysis.CSharp.Features/Completion/CompletionProviders/DeclarationNameCompletionProvider.DeclarationInfo.cs,51) does not handle tuples at all. In the following example none of the occurrence of `name`, `action` and `accessViolationException` is suggested):\r\n\r\n```CSharp\r\nstatic void Main(string[] args)\r\n{\r\n    (Array array, Action action) Test((Array array, AccessViolationException accessViolationException) tuple) => default;\r\n    (var array, var action) = Test((null, null));\r\n}\r\n```\r\n\r\n#22342 suggested that there is support for tuples but there isn't (Just typing `(Array ` suggest *array* because it triggers `IsPossibleVariableOrLocalMethodDeclaration`.).\r\n\r\nThis PR adds support for the cases above (except `(var array, var action)`).\r\n\r\n`TupleElementDefinition1` to `TupleElementDefinition7` test the new tuple support. The remaining two tests fail because \r\n\r\n1. `TupleElementTypeInference` I couldn't get the typeInference to work and \r\n2. `TupleElementInGenericTypeArgument` The expression tree generated by the code of #22342 `System.Func<(System.Action $$` has nothing to do with tuples at all (combination of LessThan and Parenthesized expression). It's questionable if this really should be supported.\r\n\r\nI hardly understand what my call to `IsLastTokenOfType` does. It gives the desired result but reviewers should take a close look whether that call is appropriate.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/22314", "title": "WIP AddParameterCodeFixProvider: Add support for method invocations.", "body": "**Customer scenario**\r\n\r\nFixes #21446.\r\nFollow up to #17082.\r\n\r\nThis PR is an initial attempt to expand the `AddPrarameterCodefixProvider` to also support method invocations.\r\nThis PR is for review only as there are many open questions for the different invocation kinds. I tried to come up with as few code changes as possible (The github diff looks bigger than what actually changed. Most code parts are just moved to new methods to be reusable.) and unit tests for lots of those invocation kinds to see what is already working and what needs to be fixed.\r\n\r\n**Bugs this fixes:**\r\n\r\nFixes #21446.\r\nFollow up to #17082.\r\n\r\n**Workarounds, if any**\r\n\r\nNone.\r\n\r\n**Risk**\r\n\r\nCode refactoring might break user code.\r\n\r\n**Performance impact**\r\n\r\nLow. The analyzer is already shipped and this only increases the number of supported diagnostics.\r\n\r\n**Is this a regression from a previous update?**\r\n\r\n#17082 intentionally left method invocation out, because of the lots of complicated cases.\r\n\r\n**Root cause analysis:**\r\n\r\nWas intended for future improvement.\r\n\r\n**How was the bug found?**\r\n\r\nCustomer reported. #21446\r\n\r\n**Test documentation updated?**\r\n\r\nNo.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/22114", "title": "Class view should show nested private types if source code is available.", "body": "**Customer scenario**\r\n\r\nClass view should show nested private types if source code is available. See #21329 for the motivation of the request. \r\n\r\nImplementation remarks:\r\nThe new method `IncludeTypeMember` has the about the same structure as the existing method `IncludeMemberSymbol`. Most changes are related to the tests.\r\n\r\n**Bugs this fixes:**\r\n\r\n#21329\r\n\r\n**Workarounds, if any**\r\n\r\nNone.\r\n\r\n**Risk**\r\n\r\nMight break class view or shows types in class view that are not relevant to the user.\r\n\r\n**Performance impact**\r\n\r\nLow.\r\n\r\n**Is this a regression from a previous update?**\r\n\r\nNo.\r\n\r\n**Root cause analysis:**\r\n\r\nPrivate type members were considered but private types were not.\r\n\r\n**How was the bug found?**\r\n\r\nCustomer reported.\r\n\r\n**Test documentation updated?**\r\n\r\nMaybe https://msdn.microsoft.com/en-us/library/whks02wf.aspx needs to be adopted.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/20743", "title": "#20630 Cast is redundant on attribute with params fix", "body": "**Customer scenario**\r\n\r\nFalse positive on IDE0004 \"Cast is redundant\" analyzer\r\n\r\n\r\n**Bugs this fixes:**\r\n\r\nFixes #20630\r\n\r\n**Workarounds, if any**\r\n\r\nDisable IDE0004\r\n\r\n**Risk**\r\n\r\nCode fix changes behavior.\r\n\r\n**Performance impact**\r\n\r\nLow.\r\n\r\n**Is this a regression from a previous update?**\r\n\r\nVariation of: #18978\r\nRelated: #20741 #20742\r\n\r\n**Root cause analysis:**\r\n\r\nAnalyzer misses test for prams in attribute constructor calls.\r\n\r\n**How was the bug found?**\r\n\r\nCustomer reported\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Jaans": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24095", "title": "Issue with Microsoft.CodeAnalysis.CSharp.Scripting NuGet package: Referenced component could not be found.", "body": "**Version Used**: \r\n\r\nVisual Studio: 2017 Enterprise v15.5.2\r\nTarget Platform: .NET Framework 4.7.1\r\nNuGet Package: Microsoft.CodeAnalysis.CSharp.Scripting v2.6.1\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Open Visual Studio 2017\r\n2. Create a new Class Library project that targets the .NET Framework 4.7.1\r\n3. Install NuGet Package (Microsoft.CodeAnalysis.CSharp.Scripting)\r\n4. Expand References and observe that all references are resolved\r\n4. Save solution\r\n5. Close Visual Studio\r\n6. Open Visual Studio\r\n7. Open solution created in step 2 above\r\n8. Expand References and observe numerous references are missing (e.g. System.AppContext, System.Console, etc.)\r\n9. Rebuilding the project and observe the missing references in the \"Error List\" window.\r\n\r\nScreenshot attached: \r\n![roslynscriptingissue-brokenreferences](https://user-images.githubusercontent.com/3510981/34659553-aaca0ce8-f485-11e7-8e72-5c7ca5c80dbe.png)\r\n\r\nShort video demonstrating issue available here: \r\n[https://1drv.ms/v/s!AgAiVv0LV97frddNn1iuxY9mpuEgnw](https://1drv.ms/v/s!AgAiVv0LV97frddNn1iuxY9mpuEgnw) \r\n\r\n**Expected Behavior**:\r\nExpect references to not be missing.\r\n\r\n**Actual Behavior**:\r\nReferences are broken and errors reported \"The referenced component 'System.AppContext' could not be found\"\r\n\r\nPlease help!", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "davkean": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24092", "title": "\"langword\" completion adds an extra set of quotes", "body": "`langword` completion has regressed the experience for writing `<see langword=\"[keyword\"/>` in the following way:\r\n\r\n![langword](https://user-images.githubusercontent.com/1103906/34656259-325c17ca-f46b-11e7-8120-c71cdaea8050.gif)\r\n\r\nIf you type `<see` and then press space, `<see cref=\"$\"/>` is automatically entered. If you go back and replace `cref` with `langword` it adds an extra set quotes, which is annoying.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24034", "title": "\"Use explicit type instead of 'var'\" should opt for adding a \"using\" instead of fully qualifying", "body": "Use explicit type will fully qualify a type if there is not already a using in scope. This is annoying if you never want a fully qualified type.\r\n\r\n![image](https://user-images.githubusercontent.com/1103906/34548978-57cac930-f159-11e7-863b-f61b9203fc46.png)\r\n\r\nThis in contrast to the spell checker, which does opt for a using vs fully qualifying:\r\n\r\n![image](https://user-images.githubusercontent.com/1103906/34548999-756fdf66-f159-11e7-94c0-39950936b657.png)", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24034/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24026", "title": "NavigateTo shows no results for types in current solution for a certain period after open solution", "body": "_From @mavasani on April 13, 2017 23:58_\n\n![image](https://cloud.githubusercontent.com/assets/10605811/25028526/f8046bd4-2069-11e7-97ac-b7e74a453b68.png)\r\n\r\nI am hitting this quite often when working on Analyzers.sln from roslyn-analyzers repo. It doesn't show any results for few seconds to couple of minutes after opening the solution, even though the solution load has completed and I get coloring and intellisense for the type. Not sure if it is bug in the project system or Roslyn.\n\n_Copied from original issue: dotnet/project-system#1992_", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23892", "title": "Do not get access to \"this\" in breakpoint conditions for expression properties/methods", "body": "**Version Used**: Version 15.6.0 Preview 1.1 [27217.0.d15.6]\r\n\r\n**Steps to Reproduce**:\r\n\r\n``` C#\r\n    class Program\r\n    {\r\n        private readonly string _foo;\r\n\r\n        public string Foo => _foo; // Location 1\r\n\r\n        public string FooBar() => _foo; // Location 2\r\n    }\r\n```\r\n\r\n1. Set a breakpoint on Location 1 and Location 2\r\n2. Right-click breakpoint and choose Conditions\r\n3. Check conditions and in expression text box, type `this.`\r\n\r\n**Expected Behavior**:\r\nFor completion window to open and get intellisense for members of the class (ie _foo)\r\n\r\n**Actual Behavior**:\r\nActual, completion window doesn't open. If you force it open CTRL+Space there's no access to \"this\" members\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23891", "title": "Scrolling down and then up in completion window in breakpoint shows \"Queue empty\" in MessageBox", "body": "**Version Used**: \r\nVersion 15.6.0 Preview 1.1 [27217.0.d15.6]\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. File -> New -> Console App (.NET Framework)\r\n2. Set a breakpoint \r\n3. Right-click on breakpoint and Conditions...\r\n4. Check conditions\r\n5. In expression text box, press CTRL+Space to show completion window\r\n6. Holding down down arrow scroll until a few pages and the top completions items are waay off screen\r\n7. Holding down up arrow scroll back up to the top of the completion window\r\n\r\n```\r\n---------------------------\r\nMicrosoft Visual Studio\r\n---------------------------\r\nQueue empty.\r\n---------------------------\r\nOK   \r\n---------------------------\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23890", "title": "Scrolling too far up on completion window in suggestion mode throws exception", "body": "Version: Version 15.6.0 Preview 1.1 [27217.0.d15.6]\r\n\r\n1. File -> New -> Console App (.NET Framework)\r\n2. Set a breakpoint \r\n3. Right-click on breakpoint and Conditions...\r\n4. Check conditions\r\n5. In expression text box, press CTRL+Space to show completion window\r\n6. Press up 4 times \r\n\r\n![image](https://user-images.githubusercontent.com/1103906/34235807-3754d630-e648-11e7-91ea-edd9a0f88ebf.png)\r\n\r\n```\r\nSystem.NullReferenceException: Object reference not set to an instance of an object. at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.Completion.Presentation.ToolTipProvider.CancellableContentControl..ctor(ToolTipProvider toolTipProvider, CustomCommitCompletion item) \r\nat Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.Completion.Presentation.ToolTipProvider.GetUIElement(Completion itemToRender, ICompletionSession context, UIElementType elementType) \r\nat Microsoft.VisualStudio.Language.Intellisense.Implementation.Helpers.<>c__DisplayClass6_0`2.<FindUIElement>b__0(IUIElementProvider`2 provider) at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.InstantiateExtension[TExtension,TMetadata,TExtensionInstance](Object errorSource, Lazy`2 provider, Func`2 getter) \r\n--- End of stack trace from previous location where exception was thrown --- \r\nat Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n```\r\n\r\nThis sometimes occurs when you scrolling the window with the keyboard and you scroll too far.\r\n\r\nThis occurs in suggestion mode wherever you use it - but gave breakpoint repro because suggestion mode is on by default in it.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23872", "title": "Cannot influence layout for \"Use local functions\" code fix", "body": "Use local functions, changes this line:\r\n\r\n``` C#\r\nAction onUpdateSolutionCancel = () => { buildCancelled = true; };\r\n```\r\n\r\ninto:\r\n\r\n``` C#\r\nvoid onUpdateSolutionCancel()\r\n{ buildCancelled = true; }\r\n```\r\n\r\nWhich doesn't match any of my settings for new lines, and cannot seem to influence it by changing any of these settings. Unsure if this the code fix's fault or the formatter just not being able to format local functions.\r\n\r\nI'd expect something more along the line of which matches my method syntax:\r\n\r\n``` C#\r\nvoid onUpdateSolutionCancel()\r\n{\r\n    buildCancelled = true;\r\n}\r\n```\r\n\r\nor which would match the lambda:\r\n\r\n``` C#\r\nvoid onUpdateSolutionCancel() { buildCancelled = true; }\r\n```\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23872/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23869", "title": "Errors disappear when opening a file with errors (Build+IntelliSense), still show in (Build) only", "body": "_From @KirillOsenkov on February 8, 2017 22:42_\n\n1. Create a new .NETCore console app\r\n2. In .csproj add this line `<PackageReference Include=\"Nerdbank.GitVersioning\" Version=\"1.5.62\" />`\r\n3. Build\r\n4. In Error List, double-click on the error that shows\r\n\r\nExpected: Error List should not change\r\nActual: When the generated temp file opens, the errors disappear from the error list\r\n\r\nThe errors come back when selecting the \"Build only\" scope, but \"Build + IntelliSense\" makes errors disappear\r\n\r\nSee this video:\r\n![errorlistbug](https://cloud.githubusercontent.com/assets/679326/22760788/de45f38c-ee0c-11e6-8371-abc5292b734f.gif)\r\n\r\n\n\n_Copied from original issue: dotnet/project-system#1502_", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23869/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23798", "title": "Get no completion for property members if they appear before an await statement", "body": "``` C#\r\nusing System;\r\nusing System.IO;\r\nusing System.Threading.Tasks;\r\n\r\nclass Program\r\n{\r\n    private Stream _stream;\r\n\r\n    private async Task Method()\r\n    {\r\n        _stream.CanTimeout.$\r\n\r\n        await _stream.WriteAsync(null, 10, 10);\r\n\r\n    }\r\n}\r\n\r\n```\r\n\r\n1. CTRL+Space at $\r\n\r\nExpected: Completion window\r\nActual: Nothing\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23781", "title": "Quick info whitespace and sizing issue", "body": "In metadata as source, QuickInfo has sizing and whitespace issues:\r\n\r\nToo much whitespace, and signature is cut off:\r\n![image](https://user-images.githubusercontent.com/1103906/33977125-8206d184-e0ed-11e7-8cbf-36cfbb748465.png)\r\n\r\nSignature cut off:\r\n![image](https://user-images.githubusercontent.com/1103906/33977140-97d2fd4e-e0ed-11e7-9f48-6796b9a2ae98.png)\r\n\r\nNo signature at all:\r\n![image](https://user-images.githubusercontent.com/1103906/33977160-b389ad6c-e0ed-11e7-8713-fe4d40cac326.png)\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23715", "title": "Fix spelling of \"Prefer\"", "body": "", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/20666", "title": "Reduce allocations in CSharpCommandLineParse", "body": "Remove a couple of unneeded allocations in CSharpCommandLineParser.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/12410837", "body": "Hmm. Looks like trailing lines were removed - any idea what setting I haven't set?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12410837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12424365", "body": "Probably to avoid copying to the output directory, but my change was just reformatting change.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12424365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12425220", "body": "The C#/VB project system does not currently complain about conditional references, feel free to file it, but given it's been like this since it was originally written back in Whidbey, and we're rewriting it (and will support conditional references) I doubt we'll ever fix this.\n\nI'll add a comment around what _ExplicitReference is in a future check-in.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12425220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12425709", "body": "Yes, this should only apply for C# when targeting .NET 2.0 (it's a little bit of a hack to enable building and picking up mscorlib from package instead of targeting pack).\n\nVB also automatically finds mscorlib in the SDK path (FrameworkPathOverride), so it shouldn't have an explicit reference to mscorlib.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12425709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14608667", "body": "Ah, not sure what happened, I tried this ~5 times. I must have changed this last minute.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14608667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14608670", "body": "Fixing...\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14608670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14608694", "body": "Try again.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14608694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16254920", "body": "Why isn't this `Exclude=\"@(TestAssemblies);@(CoreTestAssemblies)\"`? If I update TestAssemblies, I immediately need to update this.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16254920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16426378", "body": "I've filed https://github.com/dotnet/roslyn/issues/9344 to track this.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16426378/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/17188710", "body": "Make note that https://github.com/dotnet/roslyn/blob/9f351129680f467e09e1ce02cd0978aa1cd62682/build/Targets/VSL.Imports.targets#L230 makes sure this is still marked EmbedInteropTypes.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/17188710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "ivanbasov": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24076", "title": "Provide warning in VB similar to CS0219: variable declared and assigned but never used", "body": "```\r\nModule M\r\n    Sub Main()\r\n        Dim a As Integer\r\n        a = 0\r\n    End Sub\r\nEnd Module\r\n```\r\n\r\n**Expected**\r\nWarning regarding variable 'a' is declared and assigned but never used.\r\n\r\n**Actual**\r\nNone", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24006", "title": "Null reference exception on shutdown VS with Interactive window executing", "body": "From VSO: 514822\r\n```\r\nMicrosoft.VisualStudio.InteractiveWindow!Microsoft.VisualStudio.InteractiveWindow.InteractiveWindow.UIThread[[Microsoft.VisualStudio.Text.Span,_Microsoft.VisualStudio.Text.Data]]\r\nat Microsoft.VisualStudio.InteractiveWindow!Microsoft.VisualStudio.InteractiveWindow.InteractiveWindow.Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindow.WriteLine in InteractiveWindow.cs\r\nat Microsoft.VisualStudio.InteractiveWindow!Microsoft.VisualStudio.InteractiveWindow.InteractiveWindowWriter.WriteLine in OutputWriter.cs\r\nat mscorlib.ni!System.IO.TextWriter.WriteLine in textwriter.cs\r\nat Microsoft.CodeAnalysis.InteractiveFeatures!Microsoft.CodeAnalysis.Interactive.InteractiveHost.ReportProcessExited in InteractiveHost.cs\r\nat Microsoft.CodeAnalysis.InteractiveFeatures!Microsoft.CodeAnalysis.Interactive.InteractiveHost.OnProcessExited in InteractiveHost.cs\r\nat Microsoft.CodeAnalysis.InteractiveFeatures!Microsoft.CodeAnalysis.Interactive.InteractiveHost+RemoteService+__c__DisplayClass8_0 in InteractiveHost.RemoteService.cs\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23973", "title": "Crash on applying an analyzer fixer across a large solution", "body": "1. Opened Compliers.sln from roslyn repo.\r\n2. Tried to apply an analyzer fixer for CA1801 (https://github.com/dotnet/roslyn-analyzers/issues/459) for the whole solution. There were 470+ issues of the type.\r\n3. Failed with the following exception:\r\n\r\n```\r\nSystem.AggregateException : One or more errors occurred. ---> Error HRESULT E_FAIL has been returned from a call to a COM component.\r\n   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)\r\n   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeWorker(Func`1 getFromDocument,IProgressTracker progressTracker,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.<>c__DisplayClass18_0.<InvokeCore>b__0()\r\n   at Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformAction(IExtensionManager extensionManager,Object extension,Action action)\r\n   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n---> (Inner Exception #0) System.Runtime.InteropServices.COMException : Error HRESULT E_FAIL has been returned from a call to a COM component.\r\n   at System.Runtime.InteropServices.Marshal.ThrowExceptionForHRInternal(Int32 errorCode,IntPtr errorInfo)\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.InvisibleEditor..ctor(IServiceProvider serviceProvider,String filePath,IVisualStudioHostProject projectOpt,Boolean needsSave,Boolean needsUndoDisabled)\r\n   at Microsoft.VisualStudio.LanguageServices.RoslynVisualStudioWorkspace.OpenInvisibleEditor(IVisualStudioHostDocument hostDocument)\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.DocumentProvider.StandardTextDocument.UpdateText(SourceText newText)\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.ApplyDocumentTextChanged(DocumentId documentId,SourceText newText)\r\n   at Microsoft.CodeAnalysis.Workspace.ApplyChangedDocument(ProjectChanges projectChanges,DocumentId documentId)\r\n   at Microsoft.CodeAnalysis.Workspace.ApplyProjectChanges(ProjectChanges projectChanges)\r\n   at Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Solution newSolution,IProgressTracker progressTracker)\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.TryApplyChanges(Solution newSolution,IProgressTracker progressTracker)\r\n   at Microsoft.CodeAnalysis.CodeActions.ApplyChangesOperation.TryApply(Workspace workspace,IProgressTracker progressTracker,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.ProcessOperations(Workspace workspace,ImmutableArray`1 operations,IProgressTracker progressTracker,CancellationToken cancellationToken)\r\n   at async Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.ApplyAsync(<Unknown Parameters>)<---\r\n\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23973/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23972", "title": "make ShadowsExplicitly public", "body": "Consider making Microsoft.CodeAnalysis.VisualBasic.Symbol.ShadowsExplicitly public\r\n\r\nNeed to ignore Shadows implementation in https://github.com/dotnet/roslyn-analyzers/issues/459.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23972/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/dotnet/roslyn/commits/9ab4274db8c8f846bc7536ec3342a08822d0e7f7", "message": "Internal error in Immediate Window when trying to create an already e\u2026 (#24198)"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/20c1851c2d09a5ac70285b049504f92483b83613", "message": "Consolidate 'remove unused local' fixer in Roslyn and Roslyn-analyzers (#24077)"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24058", "title": "unregister onExit event handler on disposing interactive host", "body": "### Customer scenario\r\n\r\nCustomer shuts down Visual Studio. There is a race condition when closing the Interactive Window and the corresponding process.\r\n\r\nWhen the process is closed before the window (within this or another scenario), it sends a message to display it in the interactive window. If the window was closed somewhere between checks the it is open and executing a command to output the message, an failure happens.\r\n\r\n### Bugs this fixes\r\nVSO 514822 and corresponding: https://github.com/dotnet/roslyn/issues/24006 \r\n\r\n### Workarounds, if any\r\n\r\nNone\r\n\r\n### Risk\r\n\r\nLow\r\n\r\n### Performance impact\r\n\r\nNone\r\n\r\n### Is this a regression from a previous update?\r\nNo\r\n\r\n### How was the bug found?\r\nWatson hits", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23087", "title": "Analyzer Runner tool", "body": "This is a draft version of the analyzer runner tool which should be used for execution analyzers against a given solution and measuring their performance.\r\n\r\nThe code is based on [StyleCopAnalyzers](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/)\r\n\r\nCloses #23104", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/22919", "title": "Add declaration kind for local functions", "body": "Towards #22918\r\nNeed this declaration kind in analyzers", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/22201", "title": "migrating integration tests into APEX", "body": "First iteration:\r\n- An internal APEX build is referred.\r\n- The APEX elevation issue is not solved.\r\n- Just three tests are expected to work (after fixing issues above). All other integration tests need to change [Fact] with [WpfFact].\r\n\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mikeharder": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24072", "title": "VBCSCompiler server not working in .NET Core on Windows 10", "body": "**Version Used**: \r\n.NET Core CLI 2.2.0-preview1-007870\r\n\r\n**Steps to Reproduce**:\r\n1. Windows 10\r\n2. Install CLI (I used the .zip version)\r\n3. `git clone https://github.com/OrchardCMS/OrchardCore`\r\n4. `cd OrchardCore`\r\n5. `dotnet build --no-incremental`\r\n\r\n**Expected Behavior**:\r\nCompilation happens inside the `dotnet vbcscompiler.dll` process.\r\n\r\n**Actual Behavior**:\r\nThe `dotnet vbcscompiler.dll` process is started and stays running, but it's doesn't use any CPU.  Instead, one instance of `dotnet csc.dll` is created for each project in the solution.\r\n\r\n**Comments**\r\nThe same scenario appears to be working correctly on Ubuntu 16.04 LTS.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "333fred": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24056", "title": "Allow collapsing of multi-line verbatim strings", "body": "This would be especially useful in test classes, where I have a bunch of setup code that is extracted to a local const that is copied into every test. Except for the 200 lines of verbatim string, the definitions collapse down enough to be viewed on a single monitor.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23854", "title": "Add more asserts around GetConversion for incorrect language scenarios.", "body": "https://github.com/dotnet/roslyn/pull/23840#discussion_r157597636\r\nhttps://github.com/dotnet/roslyn/pull/23840#discussion_r157598152", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23854/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/dotnet/roslyn/commits/18a91220333f68ae6d0b336bffaac9f38e1ef56c", "message": "Merge pull request #23315 from 333fred/parethesized-vb-lambdas\n\nHandle parentheses in explicit VB delegate creation scenarios."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/0ce035002fa6dd976c0ef170fee6d331999889ba", "message": "Correct TryCast test to actually use TryCast."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/5796c6c45f00c36b9783596c62f480be84e904f9", "message": "Revert unintentional changes to servicestestutilities."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/9a46fba62272244bf0099a492801cabfa67675f6", "message": "Break assumptions between CreateConversionOperand and GetConversionInfo."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/2f0241bb56b0f3798198aeeb164176982d95e1f7", "message": "Fixed tuple conversions."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/5957e873453845837beb9c6b52e5803f6f865dd7", "message": "Use recursive approach to creating conversion operand."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/453f12be86b82d01e8f1ee36a40dd0b94dbf8bb5", "message": "Merge pull request #23605 from 333fred/keybinding-reset\n\nOffer to reset keybindings on ReSharper suspend/disable"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/9447f384f18b2f76a069b5cc54fa948acd312ad4", "message": "Merge remote-tracking branch 'dotnet/master' into keybinding-reset\n\n* dotnet/master: (39 commits)\n  Prefer by-val methods over in methods in overload resolution (#23122)\n  Update build to account for additional Mono.Cecil assemblies\n  Fix build break\n  Enable multicore JIT in the compilers (#23173)\n  Separate debugging workspace service and EnC service (#23630)\n  UseInferredMemberName: use one code style option and share more code (#23506)\n  Add negative test cases\n  Remove unnecessary Mono.Cecil reference\n  Updated formatting of decompiler license notice\n  Use sentence case for the decompiler legal notice\n  Use ConcurrentDictionary to avoid locks in IsGeneratedCode and HasHiddenRegions\n  Recognize condition with logical negation\n  Refactor so that GetSymbolInfo can be called last\n  Change the code fix to find the expression so that we don't need to unwrap the argument\n  Add check for null argument syntax\n  Fix argument names\n  Formatting adjustments\n  Add VB tests for omitted arguments\n  Add WorkItem attributes\n  Pool the Stopwatch instance used in the analyzer driver\n  ..."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/524399d853131d271a42f7a8348ac465fff9850a", "message": "Update messaging."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/c487f5964f05901705e3b7eace5f4475336e42a7", "message": "Shutdown in error scenario so we don't keep hitting it."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/8af08e483f793b5b9d559bcc111cd2b5dbcabab1", "message": "Minor feedback updates."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/fc5eaf0188a0f74eb55678199821b1382c6f7c98", "message": "Simplify state machine."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/34231fec3e23ee62b582359364e330afacf5cb33", "message": "Use BrowserHelper for opening the link."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/27e61eeff62e96b49e0a0a2f2d776919542bed43", "message": "PR Feedback."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/3c3edf23dacbc391e3f4d21cdcef2f419e53976b", "message": "Fix comment text."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/8f0f59aec02a77c66f347aa0fb6b6ebe9c1a406c", "message": "Merge remote-tracking branch 'dotnet/master' into keybinding-reset\n\n* dotnet/master: (61 commits)\n  Suppress xlf on templates.csproj\n  Fix the MSBuild syntax error\n  added a way to set logging information synced to remote host and more logging for error list. (#23614)\n  Revert \"Merge pull request #23364 from tmat/DisableBackgroundCompiler\"\n  Reduce the number of attributes that should be bound in order to determine if there are NoPia local types explicitly defined in code. (#23505)\n  Fix microbuild for VBCSCompiler\n  Avoid using PerformanceSensitiveAttribute in pooled object types\n  Testing theory about %TEMP%\n  Move C# tests to testing metadata emitted attributes through `CompileAndVerify` (#22896)\n  Fix xml doc files\n  we called work done too early. (#23623)\n  Test theory new props caused int failure\n  Add VBCSCompiler.dll to the Microsoft.NETCore.Compilers package\n  Further isolate our msbuild test files\n  Deploy Dir.build.props / targets in tests\n  Fix deployment of ilasm\n  Fix publish dir name when no runtime identifier\n  Generate xml doc files during build\n  Fix publish to include runtime identifier in dir\n  Remove unneeded file SettingsSdk.props\n  ..."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/5f12dd04ba5b5a6f52bfe423fae3f00f1f240be2", "message": "Move code from Features to VS."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/40c7db2b7569838b678eac69d5fc52f843c99c9d", "message": "Simplified state machine handling."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/9bc4c921d20a60084a98846d87b018cd92e192ed", "message": "Significantly simplified and refactored the conversion handling code to have less duplication and handle more cases."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/b432b7defc761df4207bd135772cb5e6a47da86e", "message": "Updated button text and appearance."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/a9146919fc378b53e4f8e2041eeca86aeb019e21", "message": "Get IParenthesizedOperation type from the Operand in nested cases."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/c6c3a6f0d6e65bee8724a19ed28b49ef529aa953", "message": "Fix unit test."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/6c0cdc6ac881c32efb63695ffc21f738b2e3c6dc", "message": "Handle nested conversions inside nested conversions."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/87c1f1e39d393ae662c877b9f2c152e2d14cc63d", "message": "Small test updates."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/5eeefcdbe059f532bdc8e1394e6553887d28bb60", "message": "Merge remote-tracking branch 'dotnet/master' into parethesized-vb-lambdas\n\n* dotnet/master: (172 commits)\n  Code cleanup per code review\n  Enable Microsoft.CodeAnalysis.VisualBasic.UnitTests.GetExtendedSemanticInfoTests.GroupBy_Lookup1 unit-test. (#23600)\n  Move usings out\n  Sort usings\n  Wrap completion providers logic in exception filters\n  Update language feature status (#23596)\n  Disallow use of 'out var' in __arglist. (#23570)\n  Keep compilation alive in GetPartialSemanticModelAsync\n  Don't include satellite assemblies in VSIX\n  Fix typo in ConsoleClassifierCS.csproj\n  Update .xlf files\n  Mark Samples projects as NonShipping\n  Turn off loc for SyntaxVisualizerExtension.csproj\n  Update .xlf files\n  Use wildcards in SignToolData.json\n  Conditionally reference XliffTasks\n  Update list of files to sign\n  Add generated XLF files\n  Fix the XliffTasks version\n  Disable GenerateSatelliteAssemblies target\n  ..."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "geeeyetee": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24053", "title": "Build targets should facilitate assembly versioning without sacrificing incremental build", "body": "**Version Used**:\r\n2.6.0-beta3\r\n\r\n**Existing Related Feature**:\r\n\r\nThe following line at the end of the `CoreCompile` target in `Microsoft.[CSharp|VisualBasic].Core.targets` enables project file authors to configure a target to run if `CoreCompile` runs-- and not run if `CoreCompile` is skipped (e.g. because the output assembly is already up-to-date with respect to the code). This is very helpful for actions that need to be performed only on newly-generated assemblies. And it relieves the project developer of having to mimic the `CoreCompile` target's `Input` and `Output` attributes and cope with their variance between versions.\r\n\r\n    <CallTarget Targets=\"$(TargetsTriggeredByCompilation)\" Condition=\"'$(TargetsTriggeredByCompilation)' != ''\"/>\r\n\r\n**Desired Feature**:\r\n\r\nA comparable `TargetsTriggeredBeforeCompilation` property (or similar mechanism) that is acted on before the `Csc` task runs would be invaluable for use cases such as updating assembly attributes in code.\r\n  ", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jinujoseph": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24052", "title": "Text Editor setting: Automatic Delimiter Highlighting have no effect in VS2017", "body": "Reported by @Justin Clareburt\r\n\r\n![image](https://user-images.githubusercontent.com/12449387/34582748-e4443f46-f149-11e7-9cad-5524698fc4d6.png)\r\n\r\nIn previous versions of Visual Studio, you could turn off this setting to stop the matching brace highlighting (and matching regions, curly braces, brackets, etc).\r\nReference 1. Reference 2.\r\nNow it seems there is nothing I can do to stop braces/regions/etc from highlighting when the caret is on one.\r\nTurning off the Highlighting settings in C# Advanced doesn\u2019t help. (They are intended for different highlighting purposes.)\r\n\r\n![image](https://user-images.githubusercontent.com/12449387/34582762-f3b00e2e-f149-11e7-8a46-0edf7e71032d.png)\r\nDoes the Automatic Delimiter Highlighting do anything?\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/18746", "title": "[Tests] Ioperation API IForEachLoop Statement", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jnm2": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24048", "title": "Please provide API to get PDB document table HashAlgorithm GUID given the standard enum", "body": "Roslyn 2.6.1\r\n\r\nAs this switch expands, I'd like to be able to convert from an `EmbeddedText.ChecksumAlgorithm`'s `SourceHashAlgorithm` value to the PDB guid without having to maintain my own copy of the switch:\r\n\r\nhttps://github.com/dotnet/roslyn/blob/ee2a411ff9aeb2f78da962e2abaa0b69da3f925c/src/Compilers/Core/Portable/PEWriter/DebugSourceDocument.cs#L77-L83\r\n\r\nWhen made public, it seems like it may belong in some other class than `DebugSourceDocument`.\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24047", "title": "Please provide API to serialize `EmbeddedText` to blob suitable for PDB", "body": "Roslyn 2.6.1\r\n\r\n## Problem\r\n\r\nI need a way to add embedded source to a MetadataBuilder. Currently this requires reflection:\r\n\r\n```cs\r\n// https://github.com/dotnet/roslyn/blob/ee2a411ff9aeb2f78da962e2abaa0b69da3f925c/src/Dependencies/CodeAnalysis.Debugging/PortableCustomDebugInfoKinds.cs#L17\r\nprivate static readonly Guid PortableCustomDebugInfoKinds_EmbeddedSource = new Guid(\"0E8A571B-6926-466E-B4AD-8AB04611F5FE\");\r\n\r\n// https://github.com/dotnet/roslyn/blob/ee2a411ff9aeb2f78da962e2abaa0b69da3f925c/src/Compilers/Core/Portable/EmbeddedText.cs#L79\r\nprivate static readonly Func<EmbeddedText, ImmutableArray<byte>> get_Blob = (Func<EmbeddedText, ImmutableArray<byte>>)\r\n    typeof(EmbeddedText)\r\n    .GetProperty(\"Blob\", BindingFlags.Instance | BindingFlags.NonPublic)\r\n    .GetGetMethod(true)\r\n    .CreateDelegate(typeof(Func<EmbeddedText, ImmutableArray<byte>>));\r\n\r\n// ... (MetadataBuilder builder)\r\n\r\nbuilder.AddCustomDebugInformation(\r\n    parent: documentHandle,\r\n    kind: builder.GetOrAddGuid(PortableCustomDebugInfoKinds_EmbeddedSource),\r\n    value: builder.GetOrAddBlob(get_Blob.Invoke(embeddedText)));\r\n```\r\n\r\n## Proposal\r\n\r\nPlease make these internal APIs public (or provide an equivalent alternative which returns both the serialized blob and the checksum):\r\n\r\n```diff\r\nnamespace Microsoft.CodeAnalysis\r\n{\r\n    public sealed class EmbeddedText\r\n    {\r\n+       public ImmutableArray<byte> Blob { get; } \r\n    }\r\n}\r\n\r\nnamespace Microsoft.CodeAnalysis.Debugging\r\n{\r\n+   public static class PortableCustomDebugInfoKinds\r\n+   {\r\n+       public static readonly Guid EmbeddedSource;\r\n+   }\r\n}\r\n```\r\n\r\n### Existing API\r\n\r\nhttps://github.com/dotnet/roslyn/blob/a2f028526a329950a891d5c74a5b8d703168297c/src/Compilers/Core/Portable/EmbeddedText.cs#L79\r\n\r\n - Comment just above:\r\n\r\n   https://github.com/dotnet/roslyn/blob/a2f028526a329950a891d5c74a5b8d703168297c/src/Compilers/Core/Portable/EmbeddedText.cs#L65-L68\r\n\r\nhttps://github.com/dotnet/roslyn/blob/ee2a411ff9aeb2f78da962e2abaa0b69da3f925c/src/Dependencies/CodeAnalysis.Debugging/PortableCustomDebugInfoKinds.cs#L17\r\n  ", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24046", "title": "Debugger is not finding source embedded in PDB with SHA256 hash, only SHA1", "body": "Consuming PDB with VS 15.5.2, producing PDB with Microsoft.CodeAnalysis 2.6.1 and System.Reflection.Metadata 1.5.0.\r\n\r\nInserting my own embedded source for each document is working great if I use `EmbeddedText.FromStream` with `SourceHashAlgorithm.Sha1` and `MetadataBuilder.AddDocument` with the [SHA-1 guid](https://github.com/dotnet/roslyn/blob/ee2a411ff9aeb2f78da962e2abaa0b69da3f925c/src/Compilers/Core/Portable/PEWriter/DebugSourceDocument.cs#L80).\r\n\r\nIf I use `SourceHashAlgorithm.Sha256` and the [SHA-256 guid](https://github.com/dotnet/roslyn/blob/ee2a411ff9aeb2f78da962e2abaa0b69da3f925c/src/Compilers/Core/Portable/PEWriter/DebugSourceDocument.cs#L83), VS fails to find the source and even says:\r\n\r\n> Locating source for *'original file path*'. (No checksum.)\r\n\r\nWhy would it say \"no checksum\" with that path?\r\n\r\nhttps://github.com/dotnet/roslyn/blob/ee2a411ff9aeb2f78da962e2abaa0b69da3f925c/src/Compilers/Core/Portable/PEWriter/DebugSourceDocument.cs#L71-L73\r\n\r\nIs something different with Dev15? Would a minimal repro be helpful?\r\n  ", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23996", "title": "Unlike lambdas, local functions do not capture scripting globals", "body": "There are workarounds but they are irritating during what should be simple refactors. I use Roslyn Scripting the most via Cake. This issue seems to be with Roslyn itself (2.6.1).\r\n\r\n```cs\r\npublic static class Program\r\n{\r\n    public sealed class Globals\r\n    {\r\n        public int SomeGlobal => 42;\r\n    }\r\n\r\n    public static async Task Main()\r\n    {\r\n        // Works\u2013 global captured by lambda\r\n        var script = \"var lambda = new System.Action(() => { _ = SomeGlobal; });\";\r\n\r\n        // Does not work\u2013 global captured by local function declared inside lambda\r\n        var script = \"var lambda = new System.Action(() => { void LocalFunction() { _ = SomeGlobal; } });\";\r\n\r\n        // Does not work\u2013 global captured by local function declared inside method\r\n        var script = \"void Method() { void LocalFunction() { _ = SomeGlobal; } }\";\r\n\r\n        // Works\u2013 global captured by lambda declared inside lambda\r\n        var script = \"var lambda = new System.Action(() => { var innerLambda = new System.Action(() => { _ = SomeGlobal; }); });\";\r\n\r\n        await CSharpScript.RunAsync(script, globals: new Globals());\r\n    }\r\n}\r\n```\r\n\r\n**Expected:**\r\n\r\nLocal functions capture the global; all examples run successfully.\r\n\r\n**Actual:**\r\n\r\n> Microsoft.CodeAnalysis.Scripting.CompilationErrorException: '(1,44): error CS0120: An object reference is required for the non-static field, method, or property 'Program.Globals.SomeGlobal''\r\n\r\nIf this is according to the spec, please make it a feature request. I don't see any reason why local functions should fail to capture globals.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23842", "title": "ISymbolExtensions.IsAccessibleWithin is useful but internal", "body": "The code fix I'm writing needs to be able to distinguish whether an attribute constructor is accessible from a property or not. This method does precisely what I need, but it's in an internal class.\r\n\r\nhttps://github.com/dotnet/roslyn/blob/69e99a8ba2a044fcf73339ea7d11e2a51975d11d/src/Workspaces/Core/Portable/Shared/Extensions/ISymbolExtensions_Accessibility.cs#L13-L16\r\n\r\nWould you please make this method available in the public API?", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23842/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23838", "title": "Microsoft.CodeAnalysis.CSharp.CodeGeneration.AttributeGenerator is useful but internal", "body": "The code fix I'm writing needs to copy attributes to a shadowing property from the base property. This method does precisely what I need, but it's in an internal class.\r\n\r\nhttps://github.com/dotnet/roslyn/blob/69e99a8ba2a044fcf73339ea7d11e2a51975d11d/src/Workspaces/CSharp/Portable/CodeGeneration/AttributeGenerator.cs#L19-L22\r\n\r\nWould you please make this method available in the public API?", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23838/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "raffaeler": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24045", "title": "Document encoding gets lost on Project.AddDocument", "body": "**Version Used**:  2.6.1\r\n**Steps to Reproduce**:\r\nWhen entirely generating the syntax nodes in-memory, the SyntaxGenerator does not allow specifying an encoding.\r\nThe workaround is to re-create the syntax tree by using CSharpSyntaxTree.Create with a valid encoding.\r\nProblem 1: how bad is this perf hit?\r\n\r\nBut even after having a valid encoding in the SyntaxTree, the AddDocument does not keep the information (see the last assert in the code below).\r\nAgain, the workaround is to re-apply the encoding after the compilation has been created, but it looks definitely a weird behavor.\r\n\r\n- Am I missing something?\r\n- Is there a better way to enforce the encoding for handcrafted in-memory syntax trees?\r\n\r\n```\r\n// Encoding is needed to avoid CS8055: Cannot emit debug information for a source text without encoding\r\nprivate void TestEncoding1()\r\n{\r\n    var workspace = new AdhocWorkspace();\r\n    var generator = SyntaxGenerator.GetGenerator(workspace, LanguageNames.CSharp);\r\n    var project = workspace.CurrentSolution.AddProject(\"test\", \"test\", LanguageNames.CSharp);\r\n\r\n    var root = GetCode(generator);\r\n    // code generated on the fly does not have encoding\r\n    Debug.Assert(root.SyntaxTree.Encoding == null);\r\n\r\n    var encoded = CSharpSyntaxTree.Create(root as CSharpSyntaxNode,\r\n        null, string.Empty, Encoding.UTF8).GetRoot();\r\n    // encoding is now part of the syntax tree\r\n    Debug.Assert(encoded.SyntaxTree.Encoding != null);\r\n\r\n    var document = project.AddDocument(\"test\", encoded);\r\n    var documentTree = document.GetSyntaxTreeAsync().Result;\r\n    // why does this assert fails?\r\n    Debug.Assert(documentTree.Encoding != null);\r\n}\r\n\r\nprivate SyntaxNode GetCode(SyntaxGenerator generator)\r\n{\r\n    return generator.NamespaceDeclaration(\"Foo\",\r\n        generator.ClassDeclaration(\"FooClass\", null,\r\n            Accessibility.Public, DeclarationModifiers.Partial,\r\n            null, null, null));\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n1. I expect there a way to specify the default encoding in the SyntaxGenerator\r\n2. I expect that AddDocument keep the encoding stored in the specified syntax tree\r\n3. I want to avoid any possible perf hit that would come from generating the text source code and parsed back in a new syntax tree.\r\n\r\n**Actual Behavior**:\r\nThe encoding is missing (see asserts in the code)", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23804", "title": "Wrong squiggles on the code editor", "body": "**Version Used**: \r\nCompiler from either Visual Studio 15.6.0 Preview 1 or Visual Studio 15.5.1\r\n\r\n**Steps to Reproduce**:\r\nI could not reproduce systematically the problem, but it happened quite often to me.\r\n\r\nThe squiggles for an error are not updated and gets lost in the editor.\r\nFrom the picture you can see the error for using an unassigned variable. The squiggle was originally correct and positioned correctly in the correct location.\r\nAfter initializing the msg variable, the squiggle was still there.\r\nSo I deleted the \"Console.WriteLine(msg); line entirely and pasted back again.\r\nAs you can see from the picture the squiggle now is reduced to just a few pixels and the same orignal location, but it is not pointing to any source.\r\nThe tooltips show the messages when putting the mouse over the \"wrong\" red squiggle.\r\n\r\n**Expected Behavior**:\r\nI expect the squiggles are always re-evaluated after any text change.\r\n\r\n**Actual Behavior**:\r\n![image](https://user-images.githubusercontent.com/5183152/34053209-276a63b0-e1c6-11e7-8191-037c606d10b9.png)\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mkrueger": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24044", "title": "[Completion] Easy to accidentally commit wrong completion value for extension methods", "body": "Sometimes I forget to type the `static` modifier when I'm writing an extension method, and only realize when the `this` keyword is missing from completion after the open paren, and the completion list commits something else that I didn't want.\r\n\r\nIt would be nice if the `this ` were in the list and committing it added the `static` modifier.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24100", "title": "Added member classification support.", "body": "Added classification for c# methods, events, fields and properties.\r\n\r\nVB.NET is missing and unit tests. I've atm problems compiling/running the tests on my system. So do not merge it - it's untested.\r\nBut that's basically what we need in Visual Studio 4 Mac. It should be a base for discussion about classification enhancements. \r\n\r\nesp. for making a difference between properties, events and fields this is useful.\r\n  ", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70643157", "body": "btw. from monodevelop PoV it's hard to replace NRefactory with roslyn for above reasons.\n\nIt's perfectly fine to use internals and internals visible to inside roslyn (in NRefactory we overused public maybe a bit too much). But I have one request:\n\nDon't allow the Visual Studio side use internal roslyn API. All Visual Studio should be matched by the public API. Everytime you guys are using internal API for your own product there is something missing inside the roslyn API. \n\nWithout a huge set of public API roslyn fails it's goal.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70643157/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70673311", "body": "I know that it's very problematic to make a good API for such a thing than Roslyn.\n\nI would even be ok with API breaks from time to time :). As nosami already mentioned - we just 'fix' our stuff and go on with the new API. \n\nToday I had problems with the Diagnostic API - but I opened a discussion about that in the API forum.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70673311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "Therzok": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24042", "title": "[PersistentStorage] Should not try to re-create the database if native lib probing exceptions occur", "body": "**Version Used**: \r\n2.6.0\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Use SQLiteStorage\r\n2. Remove the e_sqlite.dll (to mirror what would happen on Linux, for example, when the library can't be probed)\r\n3. Observe that a lot of exceptions are being logged with this stacktrace\r\n\r\n```\r\n  at Microsoft.CodeAnalysis.Storage.StorageDatabaseLogger.LogExceptionWorker (System.Exception) [0x00020] in <eba66fb254b64fc2bac5f4dea6d5a28c>:0\r\n  at Microsoft.CodeAnalysis.Storage.StorageDatabaseLogger.LogException (System.Exception) [0x00006] in <eba66fb254b64fc2bac5f4dea6d5a28c>:0\r\n  at Microsoft.CodeAnalysis.Storage.AbstractPersistentStorageService.TryCreatePersistentStorage (Microsoft.CodeAnalysis.Solution,string,Microsoft.CodeAnalysis.Host.AbstractPersistentStorage&) [0x0003e] in <eba66fb254b64fc2bac5f4dea6d5a28c>:0\r\n  at Microsoft.CodeAnalysis.Storage.AbstractPersistentStorageService.TryCreatePersistentStorage (Microsoft.CodeAnalysis.Solution,string) [0x00011] in <eba66fb254b64fc2bac5f4dea6d5a28c>:0\r\n  at Microsoft.CodeAnalysis.Storage.AbstractPersistentStorageService.GetStorage (Microsoft.CodeAnalysis.Solution,string) [0x000a4] in <eba66fb254b64fc2bac5f4dea6d5a28c>:0\r\n  at Microsoft.CodeAnalysis.Storage.AbstractPersistentStorageService.GetStorage (Microsoft.CodeAnalysis.Solution,bool) [0x00057] in <eba66fb254b64fc2bac5f4dea6d5a28c>:0\r\n  at Microsoft.CodeAnalysis.Storage.AbstractPersistentStorageService.GetStorage (Microsoft.CodeAnalysis.Solution) [0x00003] in <eba66fb254b64fc2bac5f4dea6d5a28c>:0\r\n  at Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticDataSerializer/<DeserializeAsync>d__5.MoveNext () [0x0002a] in <9b2be15306ff44fbad0829eadaca768a>:0\r\n  at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<System.Runtime.CompilerServices.StrongBox`1<System.Collections.Immutable.ImmutableArray`1<Microsoft.CodeAnalysis.Diagnostics.DiagnosticData>>>.Start<Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticDataSerializer/<DeserializeAsync>d__5> (Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticDataSerializer/<DeserializeAsync>d__5&) [0x0002c] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:471\r\n  at Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticDataSerializer.DeserializeAsync (object,string,System.Threading.CancellationToken) [0x00044] in <9b2be15306ff44fbad0829eadaca768a>:0\r\n  at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectState.DeserializeAsync (Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticDataSerializer,object,object,string,System.Threading.CancellationToken) [0x0005d] in <c687f5f16d954d66b706836583783302>:0\r\n  at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectState/<TryDeserializeAsync>d__26`2<TKey_REF, TArg_REF>.MoveNext () [0x00035] in <c687f5f16d954d66b706836583783302>:0\r\n  at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<bool>.Start<Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectState/<TryDeserializeAsync>d__26`2<Microsoft.CodeAnalysis.DocumentId, Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectState/Builder>> (Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectState/<TryDeserializeAsync>d__26`2<Microsoft.CodeAnalysis.DocumentId, Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectState/Builder>&) [0x0002c] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:471\r\n  at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectState.TryDeserializeAsync<TKey_REF, TArg_REF> (Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticDataSerializer,object,TKey_REF,string,System.Action`3<TArg_REF, TKey_REF, System.Collections.Immutable.ImmutableArray`1<Microsoft.CodeAnalysis.Diagnostics.DiagnosticData>>,TArg_REF,System.Threading.CancellationToken) [0x00063] in <c687f5f16d954d66b706836583783302>:0\r\n  at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectState/<TryDeserializeDocumentAsync>d__25.MoveNext () [0x0005d] in <c687f5f16d954d66b706836583783302>:0\r\n  at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<bool>.Start<Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectState/<TryDeserializeDocumentAsync>d__25> (Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectState/<TryDeserializeDocumentAsync>d__25&) [0x0002c] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:471\r\n  at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectState.TryDeserializeDocumentAsync (Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticDataSerializer,Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectState/Builder,System.Threading.CancellationToken) [0x00048] in <c687f5f16d954d66b706836583783302>:0\r\n  at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectState/<LoadInitialAnalysisDataAsync>d__17.MoveNext () [0x00110] in <c687f5f16d954d66b706836583783302>:0\r\n  at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult>.Start<Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectState/<LoadInitialAnalysisDataAsync>d__17> (Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectState/<LoadInitialAnalysisDataAsync>d__17&) [0x0002c] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:471\r\n  at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectState.LoadInitialAnalysisDataAsync (Microsoft.CodeAnalysis.Project,System.Threading.CancellationToken) [0x00037] in <c687f5f16d954d66b706836583783302>:0\r\n  at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectState/<GetAnalysisDataAsync>d__9.MoveNext () [0x0006b] in <c687f5f16d954d66b706836583783302>:0\r\n  at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult>.Start<Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectState/<GetAnalysisDataAsync>d__9> (Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectState/<GetAnalysisDataAsync>d__9&) [0x0002c] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:471\r\n  at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectState.GetAnalysisDataAsync (Microsoft.CodeAnalysis.Project,bool,System.Threading.CancellationToken) [0x0003f] in <c687f5f16d954d66b706836583783302>:0\r\n  at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectAnalysisData/<CreateAsync>d__9.MoveNext () [0x00074] in <c687f5f16d954d66b706836583783302>:0\r\n  at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectAnalysisData>.Start<Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectAnalysisData/<CreateAsync>d__9> (Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectAnalysisData/<CreateAsync>d__9&) [0x0002c] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:471\r\n  at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectAnalysisData.CreateAsync (Microsoft.CodeAnalysis.Project,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/StateSet>,bool,System.Threading.CancellationToken) [0x0003f] in <c687f5f16d954d66b706836583783302>:0\r\n  at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/Executor/<GetProjectAnalysisDataAsync>d__4.MoveNext () [0x000f5] in <c687f5f16d954d66b706836583783302>:0\r\n  at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectAnalysisData>.Start<Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/Executor/<GetProjectAnalysisDataAsync>d__4> (Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/Executor/<GetProjectAnalysisDataAsync>d__4&) [0x0002c] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:471\r\n  at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/Executor.GetProjectAnalysisDataAsync (Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers,Microsoft.CodeAnalysis.Project,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/StateSet>,bool,System.Threading.CancellationToken) [0x00051] in <c687f5f16d954d66b706836583783302>:0\r\n  at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/<AnalyzeProjectAsync>d__84.MoveNext () [0x00168] in <c687f5f16d954d66b706836583783302>:0\r\n  at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start<Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/<AnalyzeProjectAsync>d__84> (Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/<AnalyzeProjectAsync>d__84&) [0x0002c] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:316\r\n  at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.AnalyzeProjectAsync (Microsoft.CodeAnalysis.Project,bool,Microsoft.CodeAnalysis.SolutionCrawler.InvocationReasons,System.Threading.CancellationToken) [0x00038] in <c687f5f16d954d66b706836583783302>:0\r\n  at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService/WorkCoordinator/IncrementalAnalyzerProcessor/LowPriorityProcessor/<>c__DisplayClass11_0.<ProcessProjectAsync>b__0 (Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer,Microsoft.CodeAnalysis.Project,System.Threading.CancellationToken) [0x0000f] in <c687f5f16d954d66b706836583783302>:0\r\n  at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService/WorkCoordinator/IncrementalAnalyzerProcessor/<>c__DisplayClass32_1`1/<<RunAnalyzersAsync>b__0>d<T_REF>.MoveNext () [0x0002e] in <c687f5f16d954d66b706836583783302>:0\r\n  at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<object>.Start<Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService/WorkCoordinator/IncrementalAnalyzerProcessor/<>c__DisplayClass32_1`1/<<RunAnalyzersAsync>b__0>d<Microsoft.CodeAnalysis.Project>> (Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService/WorkCoordinator/IncrementalAnalyzerProcessor/<>c__DisplayClass32_1`1/<<RunAnalyzersAsync>b__0>d<Microsoft.CodeAnalysis.Project>&) [0x0002c] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:471\r\n  at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService/WorkCoordinator/IncrementalAnalyzerProcessor/<>c__DisplayClass32_1`1<T_REF>.<RunAnalyzersAsync>b__0 (T_REF,System.Threading.CancellationToken) [0x00037] in <c687f5f16d954d66b706836583783302>:0\r\n  at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService/WorkCoordinator/IncrementalAnalyzerProcessor/<GetOrDefaultAsync>d__34`2<TData_REF, TResult_REF>.MoveNext () [0x0001f] in <c687f5f16d954d66b706836583783302>:0\r\n  at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<object>.Start<Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService/WorkCoordinator/IncrementalAnalyzerProcessor/<GetOrDefaultAsync>d__34`2<Microsoft.CodeAnalysis.Project, object>> (Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService/WorkCoordinator/IncrementalAnalyzerProcessor/<GetOrDefaultAsync>d__34`2<Microsoft.CodeAnalysis.Project, object>&) [0x0002c] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:471\r\n  at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService/WorkCoordinator/IncrementalAnalyzerProcessor.GetOrDefaultAsync<TData_REF, TResult_REF> (TData_REF,System.Func`3<TData_REF, System.Threading.CancellationToken, System.Threading.Tasks.Task`1<TResult_REF>>,System.Threading.CancellationToken) [0x00037] in <c687f5f16d954d66b706836583783302>:0\r\n  at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService/WorkCoordinator/IncrementalAnalyzerProcessor/<RunAnalyzersAsync>d__32`1<T_REF>.MoveNext () [0x0009b] in <c687f5f16d954d66b706836583783302>:0\r\n  at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start<Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService/WorkCoordinator/IncrementalAnalyzerProcessor/<RunAnalyzersAsync>d__32`1<Microsoft.CodeAnalysis.Project>> (Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService/WorkCoordinator/IncrementalAnalyzerProcessor/<RunAnalyzersAsync>d__32`1<Microsoft.CodeAnalysis.Project>&) [0x0002c] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:316\r\n  at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService/WorkCoordinator/IncrementalAnalyzerProcessor.RunAnalyzersAsync<T_REF> (System.Collections.Immutable.ImmutableArray`1<Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer>,T_REF,System.Func`4<Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer, T_REF, System.Threading.CancellationToken, System.Threading.Tasks.Task>,System.Threading.CancellationToken) [0x0003f] in <c687f5f16d954d66b706836583783302>:0\r\n  at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService/WorkCoordinator/IncrementalAnalyzerProcessor/LowPriorityProcessor/<ProcessProjectAsync>d__11.MoveNext () [0x00110] in <c687f5f16d954d66b706836583783302>:0\r\n  at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start<Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService/WorkCoordinator/IncrementalAnalyzerProcessor/LowPriorityProcessor/<ProcessProjectAsync>d__11> (Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService/WorkCoordinator/IncrementalAnalyzerProcessor/LowPriorityProcessor/<ProcessProjectAsync>d__11&) [0x0002c] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:316\r\n  at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService/WorkCoordinator/IncrementalAnalyzerProcessor/LowPriorityProcessor.ProcessProjectAsync (System.Collections.Immutable.ImmutableArray`1<Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer>,Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService/WorkCoordinator/WorkItem,System.Threading.CancellationTokenSource) [0x0003f] in <c687f5f16d954d66b706836583783302>:0\r\n  at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService/WorkCoordinator/IncrementalAnalyzerProcessor/LowPriorityProcessor/<ExecuteAsync>d__3.MoveNext () [0x000c0] in <c687f5f16d954d66b706836583783302>:0\r\n  at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start<Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService/WorkCoordinator/IncrementalAnalyzerProcessor/LowPriorityProcessor/<ExecuteAsync>d__3> (Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService/WorkCoordinator/IncrementalAnalyzerProcessor/LowPriorityProcessor/<ExecuteAsync>d__3&) [0x0002c] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:316\r\n  at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService/WorkCoordinator/IncrementalAnalyzerProcessor/LowPriorityProcessor.ExecuteAsync () [0x00027] in <c687f5f16d954d66b706836583783302>:0\r\n  at Microsoft.CodeAnalysis.SolutionCrawler.IdleProcessor/<ProcessAsync>d__12.MoveNext () [0x0012f] in <c687f5f16d954d66b706836583783302>:0\r\n  at System.Runtime.CompilerServices.AsyncMethodBuilderCore/MoveNextRunner.InvokeMoveNext (object) [0x00000] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:1089\r\n  at System.Threading.ExecutionContext.RunInternal (System.Threading.ExecutionContext,System.Threading.ContextCallback,object,bool) [0x00071] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/threading/executioncontext.cs:957\r\n  at System.Threading.ExecutionContext.Run (System.Threading.ExecutionContext,System.Threading.ContextCallback,object,bool) [0x00000] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/threading/executioncontext.cs:904\r\n  at System.Runtime.CompilerServices.AsyncMethodBuilderCore/MoveNextRunner.Run () [0x00024] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:1070\r\n  at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction (System.Action,bool,System.Threading.Tasks.Task&) [0x0001c] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/threading/Tasks/TaskContinuation.cs:823\r\n  at System.Threading.Tasks.Task.FinishContinuations () [0x00068] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/threading/Tasks/Task.cs:3631\r\n  at System.Threading.Tasks.Task.FinishStageThree () [0x0003c] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/threading/Tasks/Task.cs:2373\r\n  at System.Threading.Tasks.Task`1<System.Threading.Tasks.VoidTaskResult>.TrySetResult (System.Threading.Tasks.VoidTaskResult) [0x0004f] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/threading/Tasks/Future.cs:488\r\n  at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<System.Threading.Tasks.VoidTaskResult>.SetResult (System.Threading.Tasks.VoidTaskResult) [0x0003e] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:608\r\n  at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<System.Threading.Tasks.VoidTaskResult>.SetResult (System.Threading.Tasks.Task`1<System.Threading.Tasks.VoidTaskResult>) [0x00010] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:636\r\n  at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult () [0x00000] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:378\r\n  at Microsoft.CodeAnalysis.SolutionCrawler.IdleProcessor/<WaitForIdleAsync>d__11.MoveNext () [0x000ec] in <c687f5f16d954d66b706836583783302>:0\r\n  at System.Runtime.CompilerServices.AsyncMethodBuilderCore/MoveNextRunner.InvokeMoveNext (object) [0x00000] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:1089\r\n  at System.Threading.ExecutionContext.RunInternal (System.Threading.ExecutionContext,System.Threading.ContextCallback,object,bool) [0x00071] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/threading/executioncontext.cs:957\r\n  at System.Threading.ExecutionContext.Run (System.Threading.ExecutionContext,System.Threading.ContextCallback,object,bool) [0x00000] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/threading/executioncontext.cs:904\r\n  at System.Runtime.CompilerServices.AsyncMethodBuilderCore/MoveNextRunner.Run () [0x00024] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:1070\r\n  at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction (System.Action,bool,System.Threading.Tasks.Task&) [0x0001c] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/threading/Tasks/TaskContinuation.cs:823\r\n  at System.Threading.Tasks.Task.FinishContinuations () [0x00068] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/threading/Tasks/Task.cs:3631\r\n  at System.Threading.Tasks.Task.FinishStageThree () [0x0003c] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/threading/Tasks/Task.cs:2373\r\n  at System.Threading.Tasks.Task`1<System.Threading.Tasks.VoidTaskResult>.TrySetResult (System.Threading.Tasks.VoidTaskResult) [0x0004f] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/threading/Tasks/Future.cs:488\r\n  at System.Threading.Tasks.Task/DelayPromise.Complete () [0x00045] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/threading/Tasks/Task.cs:5962\r\n  at System.Threading.Tasks.Task/<>c.<Delay>b__276_1 (object) [0x00000] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/threading/Tasks/Task.cs:5916\r\n  at System.Threading.Timer/Scheduler.TimerCB (object) [0x00007] in /home/mkrueger/work/install/mono/mcs/class/corlib/System.Threading/Timer.cs:327\r\n  at System.Threading.QueueUserWorkItemCallback.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem () [0x00015] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/threading/threadpool.cs:1279\r\n  at System.Threading.ThreadPoolWorkQueue.Dispatch () [0x00074] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/threading/threadpool.cs:856\r\n  at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback () [0x00000] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/threading/threadpool.cs:1211\r\n  at (wrapper runtime-invoke) <Module>.runtime_invoke_bool (object,intptr,intptr,intptr) [0x0001f] in <0f34c28ae3cf4341a062f0b0237f7ae9>:0\r\n```\r\n\r\n**Expected Behavior**:\r\nThe sqlite storage service should not probe again and again if the native library can't be resolved.\r\n\r\n**Actual Behavior**:\r\nSlows down CPU, as it tries to re-create the database on every database operation and failing.\r\n\r\nPossible fix:\r\nIf the exception is something like `DllNotFoundException`, it might be ok to return NOOP storage on subsequent tries.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/dotnet/roslyn/commits/a9cd7f4958157bb36b6827d5d00b3d1633b7024a", "message": "[Perf] Pre-allocate array builder sizes for loading PE members"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/20516", "title": "[Lexer] Pool trivia comments from a file header", "body": "The idea behind this change is that trivia that is at top of the file\r\nusually consist of copyright headers or ~same content.\r\n\r\nAll syntax trees on MonoDevelop's main solution ended up having around\r\n13MB of duplicate strings spread across 250000 objects.\r\n\r\n<details>\r\n**Customer scenario**\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n**Bugs this fixes:**\r\n\r\n(either VSO or GitHub links)\r\n\r\n**Workarounds, if any**\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n**Risk**\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n**Performance impact**\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n**Is this a regression from a previous update?**\r\n\r\n**Root cause analysis:**\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n**How was the bug found?**\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n</details>", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "yaakov-h": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24035", "title": "Visual Studio Code-Fix for generating GetHashCode results in OverflowException in checked assembly", "body": "**Version Used**: \r\nMicrosoft Visual Studio Enterprise 2017\r\nVersion 15.5.2\r\n\r\n**Steps to Reproduce**:\r\n1. Create a new project with \"Check for arithmetic overflow/underflow\" enabled in the project Build settings\r\n2. Add the following class:\r\n\r\n```cs\r\nclass Foo\r\n{\r\n    object bar;\r\n    string baz;\r\n}\r\n```\r\n3. Place the cursor immediately after `Foo`\r\n4. Press Ctrl+. (period)\r\n5. Select \"Generate Equals and GetHashCode()...\"\r\n6. Create a new `Foo` object and call `GetHashCode()`\r\n\r\nFull code:\r\n\r\n```cs\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleApp1\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            new Foo().GetHashCode();\r\n        }\r\n    }\r\n\r\n    class Foo\r\n    {\r\n        object bar;\r\n        string baz;\r\n\r\n        public override bool Equals(object obj)\r\n        {\r\n            var foo = obj as Foo;\r\n            return foo != null &&\r\n                   EqualityComparer<object>.Default.Equals(bar, foo.bar) &&\r\n                   baz == foo.baz;\r\n        }\r\n\r\n        public override int GetHashCode()\r\n        {\r\n            var hashCode = -1438245972;\r\n            hashCode = hashCode * -1521134295 + EqualityComparer<object>.Default.GetHashCode(bar);\r\n            hashCode = hashCode * -1521134295 + EqualityComparer<string>.Default.GetHashCode(baz);\r\n            return hashCode;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nThe compiled program exits with code 0, printing no output.\r\n\r\n**Actual Behavior**:\r\n\r\nThe compiled program crashes with a `System.OverflowException`:\r\n\r\n```\r\nSystem.OverflowException\r\n  HResult=0x80131516\r\n  Message=Arithmetic operation resulted in an overflow.\r\n  Source=ConsoleApp1\r\n  StackTrace:\r\n   at ConsoleApp1.Foo.GetHashCode() in C:\\temp\\ConsoleApp1\\ConsoleApp1\\Program.cs:line 29\r\n   at ConsoleApp1.Program.Main(String[] args) in C:\\temp\\ConsoleApp1\\ConsoleApp1\\Program.cs:line 9\r\n```\r\n\r\nI expect that the IDE code-fix should wrap the method body in an `unchecked` block when the assembly is checked.\r\n  ", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "cston": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24018", "title": "Anonymous type fields are always treated as nullable", "body": "The anonymous type field in the following should be declared as `string` rather than `string?`. Instead, `y.ToString()` generates a warning that `y` may be null.\r\n```\r\nusing System.Linq;\r\nclass C\r\n{\r\n    static void Main()\r\n    {\r\n        var x = new string[] { \"\" };\r\n        var y = x.Select(s => new { s }).First().s;\r\n        y.ToString();\r\n    }\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23845", "title": "Local declared with `var local = expr as Type;` is reported as `Type` rather than `Type?` in IDE", "body": "Hover over `y` and `z` in the following. `y` is displayed as `string?` while `z` is displayed as `string`.\r\n```\r\nclass C\r\n{\r\n    static void F(string? x)\r\n    {\r\n        var y = x;\r\n        var z = x as string;\r\n    }\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/dotnet/roslyn/commits/2f6c1c58da3425338dc0951a7010d426734dcb0d", "message": "Avoid using a ref local for array element l-value (#24070)"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/b45ff130e1a593ab840deff68fcd0cddde45d34d", "message": "Merge pull request #24081 from cston/535899\n\nSkip pseudo-variables with use-site errors"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/31e62fbe08f089ad4c67739616ab9256a543348b", "message": "Skip pseudo-variables with use-site errors"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/d3d241545ba667734ddf1c9aadcb05ec04181578", "message": "Merge pull request #23799 from dotnet/merges/dev15.5.x-to-dev15.6-preview2-20171215-080010\n\nMerge dev15.5.x to dev15.6-preview2"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/b35144236f55ada1a04b48fcb51af6b701a6fb48", "message": "Merge remote-tracking branch 'upstream/dev15.5.x' into merges/dev15.5.x-to-dev15.6-preview2-20171215-080010"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24322", "title": "Check async method builder generic method constraints at call-site", "body": "### Customer scenario\r\n\r\nThe compiler currently ignores constraints on generic methods of the async method build for custom Task-like types. If those constraints are not satisfied by the awaiter or state machine for the Task-like type, the compiler will generate code does not verify and likely fails at runtime. Instead, the compiler should report compile-time errors for such cases.\r\n\r\n### Bugs this fixes\r\nhttps://github.com/dotnet/roslyn/issues/21500\r\nhttps://github.com/dotnet/roslyn/issues/12616\r\n\r\n### Workarounds, if any\r\n\r\nNone\r\n\r\n### Risk\r\n\r\nLow.\r\n\r\n### Performance impact\r\n\r\nLow.\r\n\r\n### Is this a regression from a previous update?\r\n\r\nNo.\r\n\r\n### How was the bug found?\r\n\r\nCustomer reported.\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24083", "title": "Move PEModuleBuilder.AdditionalTypes override to EE", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23981", "title": "Handle conversions with nested nullability in flow analysis", "body": "Initial binding should be ignoring nullability with nullability handled in `NullableWalker` only.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23151", "title": "Remove a couple of incorrect asserts in nullability flow analysis", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/21825", "title": "Warn on nullability mismatch of constructed types and arrays when converting", "body": "", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/17918", "title": "Add overload resolution perf tests", "body": "Tests for #13685.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/7849", "title": "Unsupported local signature should fail with unreported exception", "body": "Fixes #4141\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/11512333", "body": "Perhaps pass in the assembly identity rather than a bool.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/11512333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/11512347", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/11512347/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "Tragetaschen": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24013", "title": "Find All References doesn't work in a netstandard2.0 / net47 project combination", "body": "**Version Used**: \r\nVisual Studio 15.5\r\n\r\n**Steps to Reproduce**:\r\nI have a `netstandard2.0` library and a `net47` project referencing that library\r\n```cs\r\n// netstandard2.0 target framework, Microsoft.NET.Sdk\r\npublic interface IFoo { void Foo(); }\r\n// net47 target framework, Microsoft.NET.Sdk.Web\r\ninterface IBar { void Bar(); }\r\nclass FooBar : IFoo, IBar\r\n{\r\n    public void Foo() { }\r\n    public void Bar() { }\r\n}\r\n```\r\nNow run Find All References on both `Foo` and `Bar` methods (or look at CodeLense)\r\n\r\n**Expected Behavior**:\r\n\r\nBoth `Foo()` and `Bar()` should show references back and forth.\r\n\r\n**Actual Behavior**:\r\n\r\nOnly `Bar()` from within the `net47` project itself has a reference:\r\n![image](https://user-images.githubusercontent.com/1947968/34514508-0e9ee5b6-f06e-11e7-9e52-878343a40f98.png)\r\n\r\nWhen I change the `netstandard2.0` library to `net47`, the reference for `Foo()` shows up as expected\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24013/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "stakx": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24004", "title": "C# compiler only: does not produce complete metadata for optional `DateTime` parameter with default value `default(DateTime)`", "body": "### Version Used:\r\nVisual Studio 15.5.2\r\n\r\n### Steps to Reproduce:\r\n\r\n1. Compile and run the following C# program. Note that there will be a runtime error:\r\n\r\n   ```csharp\r\n   public class SomeType\r\n   {\r\n       public void Method(DateTime timestamp = default(DateTime)) { }\r\n   }\r\n\r\n   class Program\r\n   {\r\n       static void Main()\r\n       {\r\n           var parameter = typeof(SomeType).GetMethod(\"Method\").GetParameters()[0];\r\n           System.Diagnostics.Debug.Assert(object.Equals(parameter.DefaultValue, default(DateTime)));\r\n           // Accessing `parameter.DefaultValue` will throw:\r\n           // System.FormatException : Encountered an invalid type for a default value.\r\n       }\r\n   }\r\n   ```\r\n\r\n2.  To back up the claim that this is a problem with the C# compiler, let's do the same in VB.NET. Compile and run the following VB.NET program, which is equivalent to the above C# program. Note that there will be no runtime errors.\r\n\r\n   ```vb\r\n   Public Class SomeType\r\n       Public Sub Method(Optional timestamp As DateTime = Nothing)\r\n       End Sub\r\n   End Class\r\n\r\n   Module Program\r\n       Sub Main()\r\n           Dim parameter = GetType(SomeType).GetMethod(\"Method\").GetParameters()(0)\r\n           System.Diagnostics.Debug.Assert(parameter.DefaultValue = DirectCast(Nothing, DateTime))\r\n           ' This should work just fine.\r\n       End Sub\r\n   End Module\r\n   ```\r\n\r\nI'm providing a solution containing xUnit.NET tests demonstrating the same problem in some more detail: \r\n[DateTimeBug.zip](https://github.com/dotnet/roslyn/files/1598858/DateTimeBug.zip)\r\n\r\n### Expected Behavior:\r\n\r\nBoth the C# program and the equivalent VB.NET program should terminate without producing any error.\r\n\r\nAlternatively, if C# does not actually support this scenario, i. e. `default(DateTime)` as a compile-time constant, it should produce a compile-time error.\r\n\r\n### Actual Behavior:\r\n\r\nBoth programs compile without any errors or warnigns, but the C# program throws a `System.FormatException` with message _\"Encountered an invalid type for a default value\"_.\r\n\r\n### Apparent cause:\r\n\r\nThe C# compiler does not emit a `[DateTimeConstant]` custom attribute placed on the optional method parameter like the VB.NET compiler does. Instead, it sets the default value to the `nullref` constant (like it would for any other value type). The framework (`ParameterInfo.DefaultValue`) probably doesn't expect this for `DateTime` (it expects to find the default value in a custom attribute; when `MdConstant.GetValue` retrieves a null reference from metadata for `DateTime`, it'll throw, see [here]( https://referencesource.microsoft.com/#mscorlib/system/reflection/parameterinfo.cs,617) and [here]( https://referencesource.microsoft.com/#mscorlib/system/reflection/mdconstant.cs,81) in the .NET Framework reference source).\r\n\r\nHere's the IL metadata output (as reported by ILDASM) for the above two programs:\r\n\r\n```\r\n// IL output produced by the C# compiler:\r\n.method public hidebysig instance void  Method([opt] valuetype [mscorlib]System.DateTime timestamp) cil managed\r\n{\r\n  .param [1] = nullref\r\n  // ...\r\n}\r\n```\r\n\r\n```\r\n// IL output produced by the VB.NET compiler:\r\n.method public instance bool  Method([opt] valuetype [mscorlib]System.DateTime timestamp) cil managed\r\n{\r\n  .param [1]\r\n  .custom instance void [mscorlib]System.Runtime.CompilerServices.DateTimeConstantAttribute::.ctor(int64) = ( 01 00 00 00 00 00 00 00 00 00 00 00 ) \r\n  // ...\r\n}\r\n```\r\n\r\n  ", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24004/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "PhilPJL": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/24000", "title": "Microsoft.Net.Compilers langversion not passed to csc.exe by MSBuild", "body": "VS 2017 15.5.2\r\nVSTS current version\r\n\r\n1. Create any C# app\r\n2. Use a C# 7.1 or 7.2 feature \r\n3. Add Microsoft.Net.Compilers 4.6.1\r\n4. Set the advanced build settings to use the appropriate version of C#\r\n\r\nBuild locally builds fine\r\nCheck in to VSTS and build using hosted build server fails.\r\n\r\nSee: https://stackoverflow.com/questions/48050676/how-do-i-set-csc-langversion-when-building-in-vsts/48055312#48055312", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/24000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pranavkm": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/23997", "title": "Add an API to convert DebugType strings to DebugInformationFormat", "body": "Mvc does runtime compilation which involves reading [`DependencyContext`](https://github.com/dotnet/core-setup/blob/master/src/managed/Microsoft.Extensions.DependencyModel/CompilationOptions.cs) and builds `ParseOptions`, `CSharpCompilationOptions` etc from it. We recently added support for adding reading the `DebugType` and constructing an `EmitOptions` with the right `DebugInformationFormat` from it. Unlike some of the other enum types which have a string -> type converters (e.g. `LanguageVersionFacts`), parsing `DebugType` is buried inside [`CSharpCommandLineParser`](https://github.com/dotnet/roslyn/blob/master/src/Compilers/CSharp/Portable/CommandLine/CSharpCommandLineParser.cs#L612-L641). I couldn't find any other callable pieces of code that do this and ended up effectively copying the block of code. It would nice if this is an exposed as a callable API instead.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "marek-safar": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/23995", "title": "Conversion of a stackalloc expression", "body": "**Version Used**: 2.6.0.62309 (d3f6b8e7)\r\n\r\n**Steps to Reproduce**:\r\n\r\nCompile following \r\n\r\n```csharp\r\nusing System;\r\n\r\nunsafe class X\r\n{\r\n\tpublic static void Main ()\r\n\t{\r\n\t\tint* stackSpan = (int*) stackalloc int[100];\r\n\t}\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nC# 7.2 allows stackallow casts (don't really know why) but it now reports an odd error message when the casts are used with pre-7.2 only supported pointer types.\r\n\r\n**Actual Behavior**:\r\n\r\n```error CS8346: Conversion of a stackalloc expression of type 'int' to type 'int*' is not possible```\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23995/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/21814618", "body": "You replaced docs/features/tuple-names.md with proposals/target-typed-default.md which is different feature", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/21814618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "jkotas": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/23991", "title": "BadImageFormatException with Empty `params void *[]`", "body": "_From @zachdeibert on January 1, 2018 18:48_\n\nWhen calling a method with a `params void *[]` in its signature and leaving that parameter blank (so it should be the same as `new void *[0]`), the runtime throws a `System.BadImageFormatException`.\r\n\r\n```cs\r\nusing System;\r\n\r\nnamespace Bug {\r\n    unsafe class Program {\r\n        static void MyMethod(params void *[]args) {\r\n        }\r\n\r\n        static void Main(string[] args) {\r\n            MyMethod();\r\n        }\r\n    }\r\n}\r\n```\r\n```\r\n$ dotnet run\r\n\r\nUnhandled Exception: System.BadImageFormatException: An attempt was made to load a program with an incorrect format.\r\n (Exception from HRESULT: 0x8007000B)\r\n```\r\n\r\nHowever, if it is changed to `MyMethod(null);` or `MyMethod(new void *[0]);`, then it works and does not throw the exception.\r\n\r\n```\r\n$ dotnet --version\r\n2.1.3\r\n$ uname -a\r\nLinux zach-ubuntu 4.4.0-31-generic #50-Ubuntu SMP Wed Jul 13 00:07:12 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux\r\n```\r\n\r\nAlso, it does not work with the docker container `microsoft/dotnet:latest` (`3a346648c95a` at the time).\r\n```\r\n$ docker run --rm -it microsoft/dotnet\r\nroot@0dc51089b44c:/# mkdir code\r\nroot@0dc51089b44c:/# cd code\r\nroot@0dc51089b44c:/code# cat <<EOF > Program.cs\r\n> using System;\r\n> \r\n> namespace Bug {\r\n>     unsafe class Program {\r\n>         static void MyMethod(params void *[]args) {\r\n>         }\r\n> \r\n>         static void Main(string[] args) {\r\n>             MyMethod();\r\n>         }\r\n>     }\r\n> }\r\n> EOF\r\nroot@0dc51089b44c:/code# cat <<EOF > code.csproj \r\n> <Project Sdk=\"Microsoft.NET.Sdk\">\r\n>     <PropertyGroup>\r\n>         <OutputType>Exe</OutputType>\r\n>         <TargetFramework>netcoreapp1.1.2</TargetFramework>\r\n>         <AllowUnsafeBlocks>true</AllowUnsafeBlocks>\r\n>     </PropertyGroup>\r\n> </Project>\r\n> EOF\r\nroot@0dc51089b44c:/code# dotnet restore\r\n  Restoring packages for /code/code.csproj...\r\n  Generating MSBuild file /code/obj/code.csproj.nuget.g.props.\r\n  Generating MSBuild file /code/obj/code.csproj.nuget.g.targets.\r\n  Writing lock file to disk. Path: /code/obj/project.assets.json\r\n  Restore completed in 953.3 ms for /code/code.csproj.\r\n  \r\n  NuGet Config files used:\r\n      /root/.nuget/NuGet/NuGet.Config\r\n  \r\n  Feeds used:\r\n      https://api.nuget.org/v3/index.json\r\nroot@0dc51089b44c:/code# dotnet run\r\n\r\nUnhandled Exception: System.BadImageFormatException: An attempt was made to load a program with an incorrect format.\r\n (Exception from HRESULT: 0x8007000B)\r\n```\r\nI had to use 1.1.2 because that was the latest version the docker container had installed.  I used 2.0 in my first test.\n\n_Copied from original issue: dotnet/coreclr#15679_", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Mr-Byte": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/23990", "title": "Compiler crashes with error -2146232797 when attempting to call non-static method as static method on ref struct.", "body": "**Version Used**: C# 7.2 (Roslyn 2.4.0)\r\n\r\n**Steps to Reproduce**:\r\n\r\nThe following code causes the compiler to crash when compiling:\r\n```\r\nusing System;\r\n\r\nnamespace Explode\r\n{\r\n    ref struct Test\r\n    {\r\n        public Test Create() => default;\r\n    }\r\n\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var x = Test.Create();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nShould produce compiler error `Program.cs(14,21): error CS0120: An object reference is required for the non-static field, method, or property 'Test.Create()'`\r\n\r\n**Actual Behavior**:\r\nCompiler crashes with error `C:\\Program Files\\dotnet\\sdk\\2.1.2\\Roslyn\\Microsoft.CSharp.Core.targets(84,5): error MSB6006: \"csc.dll\" exited with code -2146232797.`", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fanoI": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/23988", "title": "PtrDiff between pointers generate DIV with 1", "body": "**Version Used**: \r\nVS 15.5.2\r\n\r\n**Steps to Reproduce**:\r\nDuring our work in the Cosmos AOT compiler we had encountered this function used in UTF8Encoding class:\r\nhttps://github.com/dotnet/coreclr/blob/master/src/mscorlib/shared/System/Text/UTF8Encoding.cs#L794\r\n\r\nit seems that there is a problem in the optimization of this code as the IL generated is this:\r\n\r\n```\r\nIL_0000: nop\r\nIL_0001: ldarg.0\r\nIL_0002: ldarg.1\r\nIL_0003: sub\r\nIL_0004: ldc.i4.1\r\nIL_0005: div\r\nIL_0006: conv.i8\r\nIL_0007: conv.u4\r\nIL_0008: ldc.i4.1\r\nIL_0009: shr.un\r\nIL_000a: stloc.0\r\nIL_000b: br.s IL_000d\r\nIL_000d: ldloc.0\r\nIL_000e: ret\r\n```\r\n\r\nILSPY decompile this IL in C# in this way that makes no sense:\r\n\r\n```cs\r\nprivate unsafe static int PtrDiff(char* a, char* b)\r\n{\r\n    return (int)((uint)((long)((a - b) / 1 * 2)) >> 1);\r\n}\r\n```\r\n\r\nThat is not the hyper optimized code that this complicated casting wanted to obtain...\r\n\r\n**Expected Behavior**:\r\nNo DIV by 1 should be present\r\n\r\n**Actual Behavior**:\r\nDIV by 1 is present\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ufcpp": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/23976", "title": "Wrong TypeKind from different assembly on netcoreapp", "body": "**Version Used**: \r\n\r\nVS 15.5.2\r\nMicrosoft.CodeAnalysis.CSharp 2.6.0\r\n\r\n**Steps to Reproduce**:\r\n\r\nRun https://github.com/ufcpp/UfcppSample/tree/master/Demo/2017/Roslyn2_6_0PossiblyBug\r\n\r\n```cs\r\nusing System;\r\nusing Microsoft.CodeAnalysis;\r\nusing Microsoft.CodeAnalysis.CSharp;\r\nusing Microsoft.CodeAnalysis.CSharp.Syntax;\r\nusing static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;\r\n\r\npublic struct ExternalStruct { }\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        var cu = ParseCompilationUnit(@\"\r\npublic class X\r\n{\r\n    public ExternalStruct e;\r\n    public InternalStruct i;\r\n    public System.DateTime d;\r\n}\r\n\r\npublic struct InternalStruct { }\r\n\");\r\n\r\n        var sem = GetSemantics(cu);\r\n\r\n        var classX = (ClassDeclarationSyntax)cu.Members[0];\r\n\r\n        // X.e (struct ExternalStruct)\r\n        ShowTypeInfo(sem, (FieldDeclarationSyntax)classX.Members[0]);\r\n\r\n        // X.i (struct InternalStruct)\r\n        ShowTypeInfo(sem, (FieldDeclarationSyntax)classX.Members[1]);\r\n\r\n        // X.d (struct DateTime)\r\n        ShowTypeInfo(sem, (FieldDeclarationSyntax)classX.Members[2]);\r\n\r\n/* results\r\n# with net47:\r\nStruct ExternalStruct\r\nStruct InternalStruct\r\nStruct DateTime\r\n\r\n# with netcoreapp2.0:\r\nClass ExternalStruct\r\nStruct InternalStruct\r\nStruct DateTime\r\n*/\r\n    }\r\n\r\n    private static void ShowTypeInfo(SemanticModel sem, FieldDeclarationSyntax field)\r\n    {\r\n        var t = sem.GetTypeInfo(field.Declaration.Type).Type;\r\n\r\n        Console.WriteLine($\"{t.TypeKind} {t.Name}\");\r\n    }\r\n\r\n    private static SemanticModel GetSemantics(CompilationUnitSyntax cu)\r\n    {\r\n        var compilation = CSharpCompilation.Create(\"sample\")\r\n            .AddReferences(\r\n                MetadataReference.CreateFromFile(typeof(object).Assembly.Location),\r\n                MetadataReference.CreateFromFile(typeof(Program).Assembly.Location))\r\n            .AddSyntaxTrees(cu.SyntaxTree);\r\n\r\n        var sem = compilation.GetSemanticModel(cu.SyntaxTree);\r\n        return sem;\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nThe `TypeKind` of the `ExternalStruct` should be `Struct`.\r\n\r\n**Actual Behavior**:\r\n\r\nIt is `Class` on netcoreapp runtime.\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70350962", "body": ":+1: \nI'd like this fearure to be added to C# too.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70350962/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "paul1956": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/23974", "title": "Getting Started VB Semantic Analysis is not current and examples don't work", "body": "**Version Used**: \r\nAnthony D. Green edited this page on Sep 19 2015 \u00b7 1 revision from this Repo\r\n**Steps to Reproduce**:\r\n\r\n1. The page refers to VS 2015\r\n2. The Example as below are marked Obsolete with VS 2017 15.5.2\r\n```\r\nDim compilation As Compilation =\r\n                VisualBasicCompilation.Create(\"HelloWorld\").\r\n                                       AddReferences(MetadataReference.CreateFromAssembly(\r\n                                                         GetType(Object).Assembly)).\r\n                                       AddSyntaxTrees(tree)\r\n```\r\nEven when you attempt to follow the instructions to fix \r\n```\r\n            Dim comp As Compilation = VisualBasicCompilation.Create(\"HelloWorld\").\r\n                                       AddReferences(MetadataReference.CreateFromFile((New Object).GetType().Assembly.Location.ToString)).\r\n                                       AddSyntaxTrees(tree)\r\n```\r\nYou get an error\r\n```\r\nSystem.BadImageFormatException: 'Could not load file or assembly 'System.IO.FileSystem, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. Reference assemblies should not be loaded for execution.  They can only be loaded in the Reflection-only loader context. (Exception from HRESULT: 0x80131058)'\r\n```\r\n\r\n**Expected Behavior**:\r\nExamples work\r\n**Actual Behavior**:\r\nError pointing out CreateFromAssembly is deprecated and instructions to fix are less than obvious", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23928", "title": "VB Collection with ? gets an error ", "body": "**Version Used**: \r\nVS 2017 15.5.2\r\n**Steps to Reproduce**:\r\n```\r\n                   For Each a In node.AccessorList?.Accessors\r\n                       ' Anything\r\n                   Next\r\n```\r\n1. With the above code I would expect no errors\r\n2. The problem is with the ?. before Accessors \r\n\r\n**Expected Behavior**:\r\nNo Error\r\n**Actual Behavior**:\r\nError\tBC32023\tExpression is of type 'SyntaxList(Of AccessorDeclarationSyntax)?', which is not a collection type", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23923", "title": "TryCast returns Warning BC4322 on String", "body": "**Version Used**: \r\nVs 2017 15.5.2\r\n**Steps to Reproduce**:\r\n1. The description of TryCast says that it will not throw an exception, and this error only appears on the line where I am trying to assign the result to a string. String does implement IEnumerable(Of Char).\r\nBelow is not a complete implementation of this routine just enough to show the warning and several cases without the warning.\r\n```\r\n       Function IsEmpty(Of T)(ByVal lSource As IEnumerable(Of T)) As Boolean\r\n            Dim readOnlyCollection As IReadOnlyCollection(Of T) = TryCast(lSource, IReadOnlyCollection(Of T))\r\n            If readOnlyCollection IsNot Nothing Then\r\n                Return readOnlyCollection.Count = 0\r\n            End If\r\n\r\n            Dim genericCollection As ICollection(Of T) = TryCast(lSource, ICollection(Of T))\r\n            If genericCollection IsNot Nothing Then\r\n                Return genericCollection.Count = 0\r\n            End If\r\n\r\n            Dim collection As ICollection = TryCast(lSource, ICollection)\r\n            If collection IsNot Nothing Then\r\n                Return collection.Count = 0\r\n            End If\r\n\r\n           ' The following line gets Warning on iSource\r\n            Dim str As String = TryCast(**lSource**, String)\r\n            If str IsNot Nothing Then\r\n                Return str.Length = 0\r\n            End If\r\n            Return True\r\n        End Function\r\n```\r\n2.  With the code above there should be no warnings \r\n**Expected Behavior**:\r\nNo Warnings\r\n**Actual Behavior**:\r\nWarning\tBC42322\tRuntime errors might occur when converting 'IEnumerable(Of T)' to 'String'.\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23923/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "GeorgeAlexandria": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/23967", "title": "Not full ControlVariable description", "body": "Hi,\r\n\r\nI'm used ***Microsoft.CodeAnalysis.VisualBasic.1.3.2*** and they dependents.\r\n\r\nThe `(ForOrForEachStatementSyntax|ForStatementSyntax).ControlVariable` has description that it will be `VariableDeclaratorSyntax` when loop declare a new variable.\r\nIn the *Counter Argument* sub section of [this article](https://docs.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/for-next-statement#technical-implementation) said that the variable will be created when it wasn't define before and when it data type is missing (`AsClauseSyntax` isn't present)\r\n\r\nUnfortunately, when I try to parse the code below\r\n\r\n```vb\r\n...\r\n' index isn't created before\r\nFor index = 6 To 10\r\n    Console.WriteLine(index)\r\nNext index\r\n```\r\n\r\n`ForStatementSyntax.ControlVariable` is returned to me *index* as `IdentifierNameSyntax`, but by the description and the article that I pointed out it should return `VariableDeclaratorSyntax` that doesn't have `AsClause`. `Option Infer` is enabled in the corresponding compilation.\r\n\r\nWhen I directly pointed the data type: \r\n\r\n```vb\r\n...\r\n' index isn't created before\r\nFor index As Integer = 6 To 10\r\n    Console.WriteLine(index)\r\nNext index\r\n```\r\n`ForStatementSyntax.ControlVariable` returns `VariableDeclaratorSyntax` as is written in the description\r\n\r\nDoes it wrong description or behavior of `ControlVariable`? Did I understand something wrong? \r\n\r\nAny description would be grateful.\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23967/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "abhijitparkhi1983": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/23952", "title": "System.IO.PathTooLongException while calling MSBuildWorkspace.OpenProjectAsync", "body": "**Version Used**: \r\n2.3.2\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Windows Server 2012 RC machine.\r\n2. Create MSBuildWorkspace reference and try to call  method **OpenProjectAsync** on a .csproj path whose project path has more than 260 characters.\r\n3. `\r\n    var projectPath = \"C:/ProgramData/Apps/App1/data/user/151436921087345345345345543/checkouts/9e07304ab4559f49507f3f159796d094/src/Main\\Build\\Tools\\CheckinPolicy\\CodeReviewPolicy\\CodeReviewPolicyVS\\CodeReviewPolicyCoreTest\\CodeReviewPolicyCoreTest.csproj\" \r\n    var workspace = MSBuildWorkspace.Create();\r\n     currentProject = workspace.OpenProjectAsync(projectPath).Result;`\r\n3. We know that this is a limitation with the Windows. But there has to be some way out.\r\n4. Note: We dont have the control over the Project path. \r\n\r\n**Expected Behavior**:\r\nSome way in which the path size limit can be modified for the application so that **OpenProjectAsync** does not throw an exception and instead loads the project.\r\n\r\n**Actual Behavior**:\r\nSystem.IO.PathTooLongException.\r\n\r\nThis is not a direct issue with Roslyn, but we need to understand how can we configure Roslyn to accept large file path projects.\r\n\r\nWe are aware of option like editing **LongPathsEnabled** under registry. But not sure how safe is this option.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Suchiman": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/23948", "title": "IntelliSense reports different number of overloads than signature help", "body": "**Version Used**: VS 15.5.2\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Go to this line of code https://github.com/dotnet/roslyn/blob/b0bd4af8ff88e5692cff8a8251f1fe17bed879ef/src/Compilers/Core/Portable/PEWriter/UsedNamespaceOrType.cs#L61\r\n2. Hover `base.Equals` and Quick Info suggests there's one additional overload\r\n![image](https://user-images.githubusercontent.com/7110884/34393868-00e41b84-eb56-11e7-9d89-c6955418471f.png)\r\n3. Prompt Signature Info and it only shows one overload\r\n![image](https://user-images.githubusercontent.com/7110884/34393918-5506c0ea-eb56-11e7-9b83-d975621c6881.png)\r\n\r\n**Expected Behavior**:\r\nWhen Quick Info displays `(+1 overload)` then Signature Info should show exactly 2 overloads\r\n\r\n**Actual Behavior**:\r\nSignature Info may show less overloads than Quick Info suggests there are.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23978", "title": "Call the correct (non boxing) Equals method", "body": "It appears this was using `base.Equals(object)` instead of `Equals(UsedNamespaceOrType)` inadvertently, type checking and unboxing the arg just to box again and call the overridden base method.\r\n\r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "orthoxerox": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/23944", "title": "Nullable reference types: no nullability flow check in switch statements.", "body": "**Version Used**: features/NullableReferenceTypes on sharplab.io\r\n\r\n**Steps to Reproduce**:\r\n\r\n```c#\r\nusing System;\r\npublic class C {\r\n    static string? Get()\r\n    {\r\n        return new Random().NextDouble() > 0.5 ? \"\" : null;\r\n    }\r\n    \r\n    public void M() {\r\n\tstring? s = Get();\r\n        switch(s) {\r\n            case null:\r\n                Console.WriteLine(\"null\");\r\n                break;\r\n            default:\r\n                Console.WriteLine(s.Length);\r\n                break;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nNo warnings reported.\r\n\r\n**Actual Behavior**:\r\nWarning  CS8602: \"Possible dereference of a null reference.\" is reported for the default case. I expected the compiler to infer the non-nullability of `s` like it does in\r\n\r\n```c#\r\n        if (s == null) {\r\n            Console.WriteLine(\"null\");\r\n        } else {\r\n            Console.WriteLine(s.Length);\r\n        }\r\n```\r\n\r\nand `nns` in\r\n\r\n```c#\r\n        switch(s) {\r\n            case null:\r\n                Console.WriteLine(\"null\");\r\n                break;\r\n            case var nns:\r\n                Console.WriteLine(nns.Length);\r\n                break;\r\n        }\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gafter": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/23929", "title": "Add tests for lifted variables in async/iterator code", "body": "We do not have many tests that verify the set of variables lifted in async or iterator code. It would be good to add a bit of testing infrastructure to make that easy, and add tests. Also, this could be added to the checklist for new features.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23929/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/dotnet/roslyn/commits/ac2da0f6985620a8dea9aca7c2a00848df3b4e8f", "message": "Forbid 'default' as a case constant or a pattern. (#23629)\n\n* Forbid 'default' as a case constant or a pattern.\r\n\r\nFixes #23499"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24059", "title": "WIP recursive-patterns(6): Lower switch statement and switch expression", "body": "## Not yet ready for review.\r\n\r\n- No new deltas in this PR yet.\r\n\r\nThis is the sixth of several PRs for the implementation of recursive pattern-matching, each of which builds on the previous. Until the previous PR #23921 is integrated, you will also see the changes from that and previous PRs included here. You should review #23208 (DONE) and #23209 (DONE) and #23228 and #23357 and #23921 first, and only review new deltas in this review.\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23921", "title": "recursive-patterns(5): Respond to code review comments in #23208 and #23209, and some in #23228", "body": "- Remove a redundant conversion (already performed by the method called in the next line).\r\n    Fixes #22969\r\n- `DagTempAllocator` should use the `Free()` convention, not `IDisposable`.\r\n- Migrate pattern tests from `CreateCompilationWithMscorlib45` to `CreateStandardCompilation`\r\n- Remove some obsolete and commented-out code.\r\n- Clarify implementation and comments (LDM decision) for parenthesized patterns.\r\n- Address issues in code review https://github.com/dotnet/roslyn/pull/23228\r\n- Update draft spec and work list\r\n\r\nThis is the fifth of several PRs for the implementation of recursive pattern-matching, each of which builds on the previous. Until the previous PR #23357 is integrated, you will also see the changes from that PR included here. You should review #23208 (DONE) and #23209 (DONE) and #23228 and #23357 first, and only review new deltas in this review.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23357", "title": "recursive-patterns(4): Parsing the switch expression.", "body": "- Disallow `default` as a pattern to reduce confusion in the match expression. See #23499. Only a warning in `case default:`.\r\n- Syntax nodes and parsing for the match expression\r\n- Change punctuation for switch expression per LDM advice from () to {}\r\n- Add a when clause to the switch expression's cases\r\n- Add support for binding the switch expression (but not decision tree)\r\n- Implement flow analysis for switch expression\r\n- Adjust precedence of the constant pattern in a switch expression arm.\r\n- Implement and test lazily inferring variables in the match expression.\r\n- Test that we do not permit a short discard as the _pattern_ of an *is-pattern-expression* (per LDM).\r\n- Forbid a parenthsized pattern to be used as a single-element deconstruct without additional disambiguating syntax, per 2017-11-20 LDM decision.\r\n- Add a \"var pattern\" corresponding to deconstruction using a parenthesized designation.\r\n- As part of the above, we now forbid the use of `var` as a pattern's type except in the var pattern, where it is forbidden to bind to a user-declared type. Requires compat council review.\r\n- Add contextual keyword \"var\" for use in the *var-pattern*.\r\n\r\nThis is the fourth of several PRs for the implementation of recursive pattern-matching, each of which builds on the previous.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/13391", "title": "Features/patterns", "body": "", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/10154237", "body": "Would love to know how you did this.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10154237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10154259", "body": "@agocke Were these intended?\n\nSrc/Compilers/VisualBasic/**vbc2**/packages.config \u2192 src/Compilers/CSharp/**csc2**/packages.config\nSrc/Compilers/CSharp/**csc2**/packages.config \u2192 src/Compilers/VisualBasic/**vbc2**/packages.config\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10154259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10155331", "body": "How did you fix it? Did you use a linux system?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10155331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14536922", "body": "Perhaps.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14536922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14537063", "body": "However, I don't think this syntax works more generally. It will not diagnose the missing comma if there is only one missing comma in a _switch-expression_, for example.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14537063/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14541504", "body": "If your idea of a \"use case\" is eliminating a couple of tokens, sure.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14541504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14541789", "body": "@alrz, I guess I forgot the original question :/\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14541789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/20143401", "body": "What if parent is null?", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/20143401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "wallnutkraken": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/23913", "title": "Document's SemanticModel.GetSymbolInfo always returns a null symbol", "body": "**Version Used**: \r\nVisual C# Compiler version 2.6.0.62329 (5429b35d)\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Open a workspace\r\n2. Open an existing solution via the workspace\r\n3. Open a project from the solution\r\n4. Open a document from the solution\r\n5. Get the root and SemanticModel from the document\r\n6. Do a foreach on the root.DescendantNodes()\r\n7. Check if any symbols for the nodes are null\r\n\r\n**Expected Behavior**:\r\nMost, if not all, symbols are not null.\r\n\r\n**Actual Behavior**:\r\nAll symbols are null.\r\n\r\n**Minimal working reproduction:**\r\n```c#\r\nusing System;\r\nusing Microsoft.CodeAnalysis;\r\nusing Microsoft.CodeAnalysis.MSBuild;\r\n\r\nnamespace CodeAnalysisApp1\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var workspace = MSBuildWorkspace.Create();\r\n            var solution = workspace.OpenSolutionAsync(\"../../example/example.sln\").Result;\r\n\r\n            foreach (Project solutionProject in solution.Projects)\r\n            {\r\n                foreach (Document doc in solutionProject.Documents)\r\n                {\r\n                    var semanticModel = doc.GetSemanticModelAsync().Result;\r\n                    var root = doc.GetSyntaxRootAsync().Result;\r\n                    var nodes = root.DescendantNodes();\r\n                    foreach (SyntaxNode node in nodes)\r\n                    {\r\n                        var symbol = semanticModel.GetSymbolInfo(node);\r\n                        if (symbol.Symbol != null)\r\n                        {\r\n                            Console.WriteLine(\"NOT NULL ON: \" + node);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            Console.WriteLine(\"End\");\r\n            Console.ReadKey(true);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**example.sln** has only one file, Program.cs:\r\n```c#\r\nusing System.Reflection;\r\nusing log4net;\r\n\r\nnamespace example\r\n{\r\n    class Program\r\n    {\r\n        private static readonly ILog logger = LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);\r\n        static void Main(string[] args)\r\n        {\r\n            logger.Error(\"Hello!\");\r\n        }\r\n    }\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "reaction1989": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/23908", "title": "CodeLens on private/internal fields", "body": "It would be really nice to have CodeLens with a Reference Counter on private fields.\r\n\r\n![image](https://user-images.githubusercontent.com/873751/34289509-28ece6cc-e6f3-11e7-97bf-a1493c0106ee.png)\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AnthonyDGreen": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/23881", "title": "F1 keyword help for `private protected` should not send you to help for `private` or `protected`", "body": "@BillWagner on the docs team, observed that if you put the cursor on one keyword of a keyword pair like `private protected`, `protected internal` , `Protected Friend` it would be far superior to send the developer to a help topic for the compound modifier instead of for the individual keyword your cursor is on.\r\n\r\nToday we have a kludgy workaround where the page for each individual keyword has a link that says \"did you mean this...\" but we can do better. Today it looks like we detect this case for pairs like `For Each` in VB. It would be great to detect this case for other cases.\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "JarLob": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/23879", "title": "Eternal loop in one of vsix analyzers prevents other analyzers from running", "body": "If one of analyzers gets into eternal loop it also doesn't give a chance to other analyzers to run. \r\n\r\n**Steps to Reproduce**:\r\nInstall a dummy vsix analyzer with `while (true) {}` in a registered syntax node action callback.\r\n\r\n**Expected Behavior**:\r\nSince there is already an issue for running analyzers in parallel https://github.com/dotnet/roslyn/issues/20390 there should be at least a timeout after which the call to the \"hanging\" extension is canceled.\r\n\r\n**Actual Behavior**:\r\nFrom user experience it just looks like there are no issues found not only by the buggy analyzer, but by other installed analyzers too, devenv.exe consumes ~10-20% of CPU on multi-core machine, that is almost not noticeable because devenv.exe usually does something in a background all the time.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23879/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AdmiralSnyder": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/23877", "title": "c# SyntaxFactory.ParseAttributeArgumentList throws NullReferenceException with invalid string", "body": "**Version Used**: \r\ntypeof(SyntaxFactory).Assembly.ImageRuntimeVersion = v4.0.30319\r\n\r\n**Steps to Reproduce**:\r\nin c# interactive:\r\n1. #r \"Microsoft.CodeAnalysis.CSharp.dll\"\r\n2. using Microsoft.CodeAnalysis.CSharp;\r\n3. SyntaxFactory.ParseAttributeArgumentList(\"somethingWithoutBrackets\")\r\n4. Then this exception is being thrown:\r\n  Object reference not set to an instance of an object.\r\n  + Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxParser.AddError<TNode>(TNode, Microsoft.CodeAnalysis.CSharp.ErrorCode, object[])\r\n  + Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ConsumeUnexpectedTokens<TNode>(TNode)\r\n  + Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseAttributeArgumentList(string, int, Microsoft.CodeAnalysis.ParseOptions, bool)\r\n\r\n**Expected Behavior**:\r\nsome kind of ParseException, e.g. UnexpectedTokenException\r\n**Actual Behavior**:\r\nNullReferenceException with stacktrace.\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Logerfo": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/23863", "title": "Discard operator ambiguity", "body": "The following code does not compile if you uncomment anything:\r\n```c#\r\n//public class _ { }\r\n//public interface _ { }\r\n//public struct _ { }\r\n//public delegate void _();\r\npublic class C//<_>\r\n{\r\n   public void M(out int x)         \r\n   {\r\n       x = 2;\r\n   }\r\n   public void N()\r\n   {\r\n       M(out _);\r\n   }\r\n}\r\n```\r\nIs this behavior expected for the discard operator? I'm aware that local variables, fields, properties and method groups (did I forget something?) named `_` is an ambiguity, therefore the compiler error seems reasonable for those kinds, but as far as I can see, there is no ambiguity in the code example and the discard should happen normally.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/22426", "title": "Update Developing a Language Feature.md", "body": "The \"future\" branch no longer exists. Now, there is a branch for each feature in development. Also, C# 6 is not the current version of the compiler anymore, as well as C# 7 is not the future version of the compiler anymore. I've adjusted this page in order to correspond to those changes accordingly.\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "JosefPihrt": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/23855", "title": "\"Extract Interface ...\" does not preserve banner at the top of the file", "body": "**Version Used**: VS 15.5.2\r\n\r\n**Steps to Reproduce**:\r\n\r\n```csharp\r\n// Copyright ...\r\n\r\npublic class Foo\r\n{\r\n    public void Bar()\r\n    {\r\n    }\r\n}\r\n```\r\n**Expected Behavior**:\r\n```csharp\r\n// Copyright ...\r\n\r\npublic interface IFoo\r\n{\r\n    void Bar();\r\n}\r\n```\r\n\r\n**Actual Behavior**:\r\n```csharp\r\npublic interface IFoo\r\n{\r\n    void Bar();\r\n}\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "binki": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/23847", "title": "CS8300 Merge conflict marker does not see markers inside of comments or #if", "body": "**Version Used**: \r\n2.6.0.62405 (4939752b) (vs-15.6.0 preview 1.0)\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Place `/*` on a line prior to an opening merge marker (`<<<<<<< dest`) or get a merge conflict inside of a comment from your favorite VCS. You might have something that looks like this:\r\n\r\n```csharp\r\npublic class Class1\r\n{\r\n    public void M()\r\n    {\r\n        /*\r\n>>>>>>> dest\r\n         * a thing\r\n        */\r\n=======\r\n         * another thing\r\n         */\r\n>>>>>>> source\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nCS8300 is shown for the opening merge marker and shows a Quick Action with the option of accepting either `dest` or `source`.\r\n\r\n**Actual Behavior**:\r\n\r\nMerge marker errors are shown for the `=======` and `>>>>>>> source` but not for the `<<<<<<< dest`. No Quick Actions are shown on the opening merge marker or subsequent merge markers.\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23847/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ryanbrandenburg": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/23846", "title": "Intermittent error \"csc.dll exited with code 255\"", "body": "**Version Used**: \r\nThe version embedded in the Dotnet Sdk version `2.2.0-preview1-007796`.\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Run `./build.cmd` in aspnet/Universe. Build may or may not fail. Seemingly even with the same commits.\r\n\r\n**Expected Behavior**:\r\nSuccessful compilation.\r\n\r\n**Actual Behavior**:\r\nRecieve error: `C:\\BuildAgent\\work\\33bdfc1cae7b2a38\\.dotnet\\x64\\sdk\\2.2.0-preview1-007522\\Roslyn\\Microsoft.CSharp.Core.targets(84,5): error MSB6006: \"csc.dll\" exited with code 255.`\r\n\r\nTracked [here](aspnet/Universe#699) on the ASP.NET end. Complete logs can be found [here](http://aspnetci/viewLog.html?tab=buildLog&logTab=tree&filter=debug&expand=all&buildId=370006&_focus=8865) but unfortunately the above error seems to be the only relevant part. If there's anything we can do to gather more data from this let us know, we can deploy that then update the issue with the new information.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "VE-2016": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/23823", "title": "Slow Roslyn solution load time", "body": "Version Used\r\nMost recent master branch from https://github.com/dotnet/roslyn\r\n\r\nRunning on Windows 10, I am trying to create MSBuild Workspace and load Roslyn.sln.\r\nLoading times are 4 minutes to create Workspace and Solution objects. My question is whether so slow loading is proper?\r\n\r\n**Steps to Reproduce**:\r\nThe following code execution times is ca. 4 minutes\r\nvar solutionName=\"Roslyn.sln\";\r\nMSBuildWorkspace workSpace = MSBuildWorkspace.Create();\r\nSolution solution = workSpace.OpenSolutionAsync(solutionName).Result;\r\n\r\nSubsequent execution of CreateCompilation requires next 1 minute.\r\n\r\n**Expected Behavior**:\r\nTimes in the range of 1-2 minutes.\r\n\r\n**Actual Behavior**:\r\nTime 4 minutes", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Tan90909090": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/23803", "title": "IDE0009 incorrectly suggested in nameof expression used to class attribute constructor argument in VS 15.5", "body": "**Version Used**: VS2017 15.5.2\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Open `Opetions`, select `Text Editor -> C# -> Code Style -> General` tab, set `Qualify property access with 'this'` option to `Prefer 'this.'`\r\n2. Create Visual C# Console App Project\r\n3. Copy and paste following code:\r\n```cs\r\nusing System;\r\n\r\nclass MyAttribute : Attribute\r\n{\r\n    public MyAttribute(string name) { }\r\n}\r\n\r\n[My(nameof(Property))] // IDE0009 \"Add 'this' or 'Me' qualification.\" is suggested here\r\nclass Program\r\n{\r\n    int Property { get; set; }\r\n\r\n    static void Main() { }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nIDE0009 is not suggested.\r\n\r\n**Actual Behavior**:\r\nIDE0009 is suggested.\r\nIf I add \"this\" qualification, I get an compile error: CS0027 `Keyword 'this' is not available in the current context`.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sonnemaf": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/23792", "title": "[Question] How can I check if a ITypeSymbol is a readonly struct?", "body": "I'm trying to create a Roslyn Analyzer which checks whether an InParameter is defined on a non-readonly valuetype (from C# 7.2). I can't find a way to check if an ITypeSymbol is readonly. \r\n\r\nI tried the GetAttributes() method. I expected to have the IsReadOnlyAttribute but it doesn't. It is empty.\r\n\r\n`\r\nprivate static bool IsReadonly(ITypeSymbol type) {\r\n    return type.GetAttributes().Any(a => a.AttributeClass.GetType().FullName == \"System.Runtime.CompilerServices.IsReadOnlyAttribute\");\r\n}\r\n`\r\n\r\nAny suggestions?\r\n\r\nI published my code on: [Gist](https://gist.github.com/sonnemaf/0001b88db198be33d83f346a47ad874f)\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "uyhung": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/23785", "title": "It's time to create a new awesome programming language", "body": "Other platforms has already created their own new programming languages such as Rust, Golang, Swift, Kotlin. On the JVM, Kotlin seems to replace Java with it new modern syntax. People seems to very impressed with Golang by its native support for concurrency. Should we consider to create new programming language?\r\n- More modern and concise syntax, for example no semi-colon, put type after variable's name, put return type after method's name etc. (looking at Swift, Kotlin, or even TypeScript)\r\n- Class / method is open by default (similar to Java). I hate to add the \"virtual\" keyword when I define new domain class.\r\n- The best of C# is its Generics, LINQ, Lambda => keep it\r\n- Remove all the existing features of C# that are not widely used by developers (look at how Golang's team keep consider carefully when adding any new features)\r\n- Emphasize on support concurrency, multi-core (see how people is impressed with Golang's concurrency support. Yes I know I know Golang's coroutine is just similar to C#'s async/await, but the fact is that not many people know or trust that :) )\r\n- Emphasize on the ability to compile to Web Assembly\r\n- Emphasize on native support for Functional programming (maybe 50-50 support for OOP and Functional)\r\n- Easily to communicate with C#'s code (similar to Kotlin and Java), this is very important\r\n- etc.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23785/reactions", "total_count": 9, "+1": 0, "-1": 4, "laugh": 0, "hooray": 0, "confused": 5, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jaredpar": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/23767", "title": "VBCSCompiler needs to respond to restart manager", "body": "The VBCSCompiler process needs to respond to shut down requests from the Windows Restart Manager. This is how Visual Studio asks processes to shut down before issuing an update. VBCSCompiler doesn't respond to this event and hence can block setup from occuring until the process is manually killed / times out. \r\n\r\nhttps://msdn.microsoft.com/en-us/library/windows/desktop/aa373653(v=vs.85).aspx", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23767/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/dotnet/roslyn/commits/3c1643f347e35d65863abda8e7c2fb663be03dd1", "message": "Merge pull request #24288 from jaredpar/fix-xunit\n\nMove to xunit 2.3.1"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/f40bfe5886ca4c9d207ad3ac3c8f25ec70bc5db8", "message": "Merge pull request #24293 from jaredpar/fix-status\n\nUpdate language feature status"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/77d03c1d1264b1b7a7c44b807bd350d759f1bdda", "message": "Fix path of xunit"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/23a5c2566049bac4d005ff64fba3126a24737817", "message": "Updates"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/496a03a0a40deaa78f4ba2e59ce63439d5578655", "message": "Update language feature status"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/177d7f1c6d3dc4c91c61717dc20cdc16abd7236c", "message": "More suppressions"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/ebe072e62c7576e5746e72f280642efdbd75f74d", "message": "Suppress xunit analyzer warnings\n\nThe new analyzer warnings are valid but are quite noisy. Going to\nsuppress them for now to unblock this upgrade. Will fix them in a\nseparate change."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/4deba505c42e988c97bead15c86316eb7d7de906", "message": "Upgrade xunit version"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/abb889838d6eac83efab9c94e7b3bb3ea088a49b", "message": "Merge pull request #24147 from Therzok/patch-1\n\n[Perf] Pre-allocate array builder sizes for loading PE members"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/451e54febacf727cd3a1f77c329315a40e65d33f", "message": "Merge pull request #23793 from jaredpar/fix-mono\n\nFix desktop test searching"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/99956e0f0958bc315ed38726a011d49de64fd147", "message": "Mistake"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/45727e2788f9e24c19ddd441013115f4f20d436f", "message": "Respond to PR feedback"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/4946365590e6561bd17bdc091b8c42afef52f172", "message": "Fix desktop test searching\n\nNot all of our desktop tests have a target framework directory in their\npaths. Only the ones which also multi-target do. For the time being\nchanging the set of DLLs that we run on Mono to be a hard coded list as\nit's only two. Will expand out as we increase our scope."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/57fd934dce8f3d963c1d52394a13db8db498d674", "message": "Merge pull request #23797 from jaredpar/fix-merge\n\nRemove the TestUtilities Desktop / CoreClr projects"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/7b85378eedcc4f18c0da19bb098c151f6fe05485", "message": "Always build net45 on Linux\n\nThe conditional build of net45 was added when we didn't support any\ndesktop targetframeworks on Linux. Now that it's supported we should be\nbuilding all flavors of the utilities there."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/edd89e4e6a76ed03f7a29019e38ee4dd26da6355", "message": "Remove dead code"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/691e20058cb9d526763405b9bf0f65942cce054d", "message": "Fixed the devdiv insertion files"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/7fb8833b684f5d57bae11dbd24cf9d51ae838907", "message": "Fix the netcoreapp build error"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/66d49bc039fa2239bf46fc06c0d6ad00fdb7f54c", "message": "Merge pull request #23862 from jaredpar/fix-pub\n\nFix the blob publishing"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/27d98ca7e4deb69876ac50b8e22aab842e0aa195", "message": "Fix the copying of ref assemblies"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/4af585804e1536033bfe86165d53f53f6deeebe3", "message": "Clean up the test failures"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/0f17d1bf89d0289aa257f50e4edd01bc95168e17", "message": "Fix the blob publishing"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/b165bda3180a4632f6746197e04f1007cbb75272", "message": "Remove CSharp desktop utilities project\n\nMerged it into the non-desktop specific project. Will make porting our\ntest projects to netcoreapp easier."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/cf58bbcbf74a75c3417a305abb9eae80a393b0cf", "message": "Delete the CoreClr / Desktop projects"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/b66f867811e684afcbea32d8e10ba0efe6288237", "message": "Combine test utilities desktop into portable\n\nThe portable test utilities project already multi-targets between\nnetstandard, netcoreapp and desktop. Having part of the desktop code\nexist in a separate assembly makes it even harder to multitarget our\ntest projects. Combining them all together and fully embracing\nmultitargeting here.\n\nThis is in preparation of moving several other compiler test projects to\ntest against coreclr / mono."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/a2026f44c15fa5790a34b2be98c80c4cde0f455e", "message": "Merge pull request #23802 from jaredpar/fix-publish\n\nPublish all relevant VSIX projects"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/2d61a5d7aa389fa17d65f9da84952bc3d300fbbf", "message": "Publish all relevant VSIX projects\n\nNeed to publish the individual VSIX projects which used to represent our\nuber VSIX package. The LUT + project system still use these for their\nintegration tests."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/5f21108be77386b83528253226c6a2660d32d00b", "message": "Merge pull request #23745 from jcouv/localfunc-model\n\nFix semantic model on type parameters of local functions"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/49ada5d9acd1b97e172963316db1f81994f7f37a", "message": "Merge pull request #23788 from dotnet/features/mono\n\nAdd mono test runner"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/ebb6d28c67efb7f7bf9004c14921bb09d7e3bc10", "message": "Use binary log in microbuild\n\nThis enables the generation of binary logs for our build when running in Microbuild.\nHaving the logs available helps in post-build debugging of errors. We tend to get a\nnumber of microbuild only failures that are impossible to track down without logging\nlike this.\n\nOnce this is merged i will be adding a task to our VSTS build definition to publish\nthese post build."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/d07f37b6d457654103e3d5de0d46cf95c71b0760", "message": "Add a -binaryLog option to MSBuild\n\nCan now specify \"-binaryLog\" to Build.cmd and it will produce a binary\nlog for every invocation of MSBuild. The logs will be written out to the\n`Binaries\\Logs` directory."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/9866191fc19a86036693c54f6ce76b1a88992b86", "message": "Merge pull request #23683 from jaredpar/fix-restore\n\nMove to dotnet restore"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/043af0daebe949d53aca8499832dd9190a3d9064", "message": "Merge pull request #23737 from jaredpar/fix-mac\n\nFix mac builds"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/b31c54a587bb0e701b7fa0e9170e35a60b5c52c1", "message": "Disable analyzers on Mac"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/82169df22289c625105137c3d73e06263068ce0e", "message": "Fix test skip test on Mac\n\nThe bash regex equality operator on Mac does not match an empty string to\nall input strings as it does for Linux. This was causing all of our tests\nto fail to run on Mac.\n\nAdded an explicit check for the empty case."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/24139bfaea38dff36b1b103c97c40f04de15369c", "message": "Merge pull request #23726 from jaredpar/fix-doc\n\nDoc feature branch management in jenkins"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/60a80062a8c42eec1ffef424e4f21b86aa7c946c", "message": "Use NuGet.exe for packing\n\nThe dotnet pack command can't handle nuspec files (or at least I can't\nfind the appropriate documentation for it). As such contining to use it\nfor creating NuGet packages for now."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/c28ae213e011bbec75c592b3bd74e15b011fa46f", "message": "Fix a typo"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/34a3e41bb7e428f964a802110686ae25535db8d8", "message": "Use the --clear option"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/fed27610330d2fa2b3018f52e3e08164b521daa3", "message": "Remove msbuildDir as it's not needed anymore"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/6c55c5a35604dbe60344063aa411fc2aa507faa4", "message": "Remove other references to Ensure-NuGet"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/f763de6742e21914a87a3d959db9cd7b252fa858", "message": "Fix RoslynToolset project\n\nMake it a valid library project. Ensuring this works makes restore a\nmuch smoother operation."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/f63bea07cc6fd1985b348e8d85be4c973dfa5470", "message": "Exclude assets in the toolset project\n\nAs written our restore is treating every package in the toolset project\nas something to be included when building the project. This causes NuGet\nto construct a completely non-sensical project.assets.json. Exclude\neverything so that the resulting file is valid."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/80ae754866792fc7addb7442ca7803d84f20bc73", "message": "Moved basic restore to dotnet restore"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/612d59a79e8a3de4b140308978db7b8cabc00d8a", "message": "Respond to PR feedback"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/d39935c527690da888549d603770b32634f410e0", "message": "Doc feature branch management in jenkins\n\nDocument to describe how feature branches are managed in Jenkins. In particular\nhow to get the changes to netci.groovy to reflect in PRs made to the branch."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/0c62bae6aade582227232183540fd891254a76cb", "message": "Merge pull request #23541 from jaredpar/fix-dir2\n\nMove to minimal MSBuild syntax"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/f1253a26d0beb32bef48417849ec3290be8aeb6e", "message": "Suppress xlf on templates.csproj\n\nThe templates project was not being picked up by xlf previously due to\nresx files being included in `<None>` items in the project file. Once we\nmoved to the new SDK here they were turned into resources by virtue of\nthe EnableDefaultEmbeddedResourceItems property. Disabling that for now\nas it gets us back to the state before this change. Filed a bug to track\nre-enabling it at a later time.\n\nhttps://github.com/dotnet/roslyn/issues/23649"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/64675283c9b12d914634baad36a7ffb08f027863", "message": "Fix the MSBuild syntax error\n\nNeed to wrap the property group in the test Directory.Build.props file\nwith a PropertyGroup."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/6604c7be36b223a0a37dc7bdf374d07b1772754f", "message": "Merge pull request #23626 from khyperia/vbcscompiler_netcore_package\n\nAdd VBCSCompiler.dll to the Microsoft.NETCore.Compilers package"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/879ccf0d8f74fd31710c61a95fa330b03805804d", "message": "Testing theory about %TEMP%\n\nVS should be inheritting the %TEMP% value we are setting. On the off\nchance it gets the original value though lets copy the props / targets\nfiles there to see if this is the cause of the hang."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/4b7def5e938b9fe2ed375ae65c27869ca1819392", "message": "Fix xml doc files\n\nThe XML doc files for multi-targetted builds were clashing with each\nother. Both were being written to the raw obj directory. Needs to be\nwritten to the obj directory with the target framework suffix to avoid\nthe clash."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/dfe65aaabbc080fec354afffe2465e7edc0b782c", "message": "Test theory new props caused int failure"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/42912c910e102a2d0bbbe5f6d43866b2c4ad7f15", "message": "Further isolate our msbuild test files\n\nThis disables a number of places where local developer state could\ninfluence the result of our MSBuild tests. These are locations where\nMSBuild will wildcard import any files it finds. Using the test\nDirectory.Build.props file to disable all these extensibility points."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/bd5b037e4c01115495526a03e46e044622d2aa1c", "message": "Deploy Dir.build.props / targets in tests\n\nOur MSBuild tests layout project / solution files on disk and then uses\nMSBuild to evaluate them. During this evaluation MSBuild will search for\nDirectory.Build.props / targets files on the path just as it will for a\nnormal command line build.\n\nOn Jenkins our Directory.Build.props / targets is in the search path of\nMSBuild and gets picked up during testing. This was causing our tests to\nfail as we unconditionally override a number of properties in our core\ntargets files.\n\nTo insulate against this we now deploy and empty version into the\ndirectory where we generate our solutions."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/36728509ee78b76535ab9c90f40630a01e772c31", "message": "Fix deployment of ilasm\n\nThe assembly name of the deployment project was clashing with the ilasm\nexe we were trying to deploy. Gave it an explicit name to remove the\nclashing values."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/a07040f095ec990e59a3075421e2e85dd00c84c6", "message": "Fix publish dir name when no runtime identifier\n\nNeeded to specify the targetframework portion of the path in the same\nway we specify the runtime identifier portion. Should get simpler when\nwe just embrace the layout the SDK is aiming for here."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/53003376278daf17fedc38f448501b32c1c81484", "message": "Generate xml doc files during build"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/5111dc0aada417e22c010d9ed1f963132aac7444", "message": "Fix publish to include runtime identifier in dir\n\nThe publish directory needs to have the runtime identifier prepending to\nthe publish directory name. Previously out setting of `<OutputPath>`\nhappened early enough that the default logic kicked in. Now though it\nhappens too late. Copied the logic which used to set this for us and\nfiled a bug to undo all of this later."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/ad01004f68104622bd26632d68f73e31dac186e6", "message": "Remove unneeded file SettingsSdk.props"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/669d5ad47496968721617fa87d9502b0ad3d55c3", "message": "Add BuildUtil to Roslyn.sln\n\nThis is a standard tool in our repo. Looks like it was just omitted by\naccident when it was originally authored."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/1c015a71318d04af6eac787f353ad4b084791b6a", "message": "Fix dir structure of BuildUtil"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24214", "title": "Use NET46 for CreateStandardCompilation", "body": "This changes the CreateStandardCompilation helper to use the net46 version of\r\nmscorlib. Previously it was using the net40 version.\r\n\r\nThis method is a helper to create a minimal compilation across both our desktop\r\nand coreclr test executions. The coreclr version uses netstandard20 and hence\r\nusing net40 created a substantial API gap. This better eliminates the gap.\r\n\r\nNote: I realize net461 is a slightly more correct choice. However that ref\r\nassembly isn't checked into our code yet and I wanted to avoid a giant resource\r\nupdate here unless we need it. Our tests focus on the intersection of the\r\ntwo API sets hence it's unlikely to be an issueo here.\r\n\r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/69846649", "body": ":+1: Looks great!  Thanks for the help. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/69846649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70020597", "body": "I agree it would be nice if we hooked into the source and symbol information into our packages.  \n\n@agocke do we have an issue tracking this yet? \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70020597/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70021145", "body": "@agocke i didn't know if we had an existing internal one tracking it :) \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70021145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/130534586", "body": "@johnkoerner this is something we are still looking into actively. It fell off the radar while we were pushing for 2015 RTM but started picking it up again last week. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/130534586/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/166000863", "body": "@onovotny do you have an example of an OSS project that pushes .symbols packages that we could look at?  \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/166000863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70379003", "body": "This is a problem I'm actively working on at the moment.  I'm hoping to get the signing issue fixed over the weekend.\n\nOnce that's done I'm going to be hooking up a CI system to the repo to prevent this and other breaks in the future.  \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70379003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70509686", "body": "If we are going to invest in a new `params` type I would like to see us invest in one that is more efficient than either `T[]` or `IEnumerable<T>` but equally inclusive.  \n\nToday low level APIs which expose a `params` method typically end up exposing several other non-params overloads in order to avoid call site allocation of the array for small numbers of arguments.  It's not uncommon at all to see the following:\n\n``` csharp\nWriteLine(params object[] args)\nWriteLine(object arg)\nWriteLine(object arg1, object arg2)\n\n...\n\n// The above pattern lets the following bind without the object[] allocation\nWriteLine(\"dog\");\n```\n\nSwitching to `IEnumerable<T>` would not help here and would in fact make it works because it creates two allocations for a small number of arguments:\n- The collection allocation at the call site\n- The `IEnumerator<T> allocation in the caller \n\nAn idea we've sketched around a few times is a struct of the following nature:\n\n```\nstruct Arguments<T> : IEnumerable<T>\n{\n  T _arg1; \n  T _arg2;\n  IEnumerable<T> _enumerable;\n  int _count;\n\n  // struct based enumerator \n  // index which intelligently switches between T fields and enumerable\n}\n\nWriteLine(params Arguments<T> args)\n```\n\nThe `Arguments<T>` struct represents a collection of arguments.  In can be built off of individual arguments or a collection.  In the case of a small number of individual arguments, which for many APIs is the predominant use case, it can do so allocation free.   The compiler would be responsible for picking the best method of constructing `Arguments<T>` at the callsite.  \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70509686/reactions", "total_count": 8, "+1": 8, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70515081", "body": "@sharwell yes and no.  Those definitely achieve part of the problem: efficient way of calling a method with an arbitrary number of arguments.  It doesn't hit the other part though which is easy interaction with .Net collections. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70515081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70515970", "body": "@HaloFour @sharwell \n\nThe intent of `(params Arguments<T>)` is to accept both individual arguments and `IEnumerable<T>` values equally well.  There would be no need for `(params IEnumerable<T>)` in this scenario because it would already be covered.\n\n``` csharp\n\nvoid Method(params Arguments<int> args) { ... } \n\nvoid Example(IEnumerable<int> e) \n{\n  Method(42);  // binds to Method(new Arguments<int>(42))\n  Method(e);    // binds to Method(new Arguments<int>(e);\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70515970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70516607", "body": "Why have this as a separate issue?  Performance and usability are related discussions.  Having them as two separate issues is going to make the conversation harder, not easier. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70516607/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70532578", "body": "@HaloFour \n\nThe advantage is simply avoiding the allocation for the collection at the call site.  It's not about specific optimizations within the method.  The allocation may seem small, and typically is in isolated scenarios.  Added up over an entire application though the array allocations add up (and quite fast).  \n\nI've worked on several projects where we've measured significant performance improvements by adding a few overloads to `params` methods that avoid call site allocations.  The implementation of the non-params overload had no special optimizations.  The algorithms, minus the loop, were identical to the `params` overload.  \n\nThis is why I don't see the value in adding `params IEnumerable<T>`.  It is solving only one of the current issues with `params` (not being inclusive to all collection types).  I'd much rather invest in a solution that solves all of them.  A solution like `Arguments<T>` has the possibility of doing so because:\n- It avoids the call site allocation in the target cases.\n- It can accept `IEnumerable<T>` as input (which in turn includes `T[]`).\n- The compiler can easily hide the implementation details in the same way it does for `params T[]` methods today. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70532578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70536647", "body": ">  You're better off keeping the specialized overloads since bouncing through a struct intermediary will be slower, even if you reference the fields containing the values directly\n\nCompletely disagree.  We've tested out solutions in the past and found that the allocation benefit dominates any sort of indirection you would get from the struct.\n\nNote: `IEnumerable<T>` adds even more indirection than `T[]` given that it will be \n1. An extra allocation.\n2. Double interface dispatch for every element in the loop. \n\n>  It's simply to eliminate the need to write that additional overload as this has become a common pattern:\n\nThe `Arguments<T>` solution would fix the exact same scenario.  It can accept individual arguments and `IEnumerable<T>` values. \n\nWhy push for a solution that is slower and allocates more memory over one which is solves the same problem + additional scenarios? \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70536647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70539889", "body": "@HaloFour the `Arguments<T>` type implements `IEnumerable<T>` using a struct based enumerator.  I would expect the vast majority of consumers to use a `foreach` loop.  \n\n**edit** typo\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70539889/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70541292", "body": "@HaloFour talk about the bad time for typos.  I meant to say the exact opposite of that :(  Editted the comment. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70541292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70544890", "body": "@mikedn \n\n> Hmm, and if you want more than 2 arguments what happens? Will the compiler go and create an array and pass it to Arguments<T>? \n\nYes. \n\n> And if you need arguments of different types and they're value types you still end up allocating due to boxing, the only T you can use in such cases is Object\n\nCorrect but this is not a new problem.  It already happens today with `params`.  \n\nIt is definitely something I would love to see solved.  So far though an elegant solution hasn't presented itself.  If it did though I would likely be very interested in that as well.  \n\n> Back in .NET 2.0 generic collections got struct enumerators, great, allocations avoided.\n\nStruct based enumerators have been around since 1.0.  It was the original way to have type safe, non-allocation enumeration.  I do share the frustrations on enumerators though and I've written some thoughts about it here. \n\nhttp://blog.paranoidcoding.com/2014/08/19/rethinking-enumerable.html\n\n> Maybe at some point we need to accept that the system works the way it works and it has certain performance characteristics. \n\nSpeaking as someone who's worked on a lot of perf sensitive applications over the years: allocations matter much more than most developers give them credit for.  Most performance investigations end up doing little more than trying to reduce the GC time which translates into curbing unnecessary allocations. \n\nAny time we create a feature in the language that has unnecessary allocations, it's a feature that will likely be avoided by perf sensitive applications.  I'd much rather focus on features that are applicable to all types of programs. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70544890/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70579664", "body": "@mikedn guess you learn something new every day.  I would have sworn struct enumerators were in 1.0.  :) \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70579664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/71035007", "body": "There is no longer a `NameOfExpressionSyntax` element.  Instead that expression is represented as an `InvocationSyntaxExpression`.  Here is the commit which made this change. \n\n36bdd5390f8184df51451b21afeac56f35f1a854\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/71035007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/9589423", "body": "Yep.  I had just re-installed VS and it reset all of my settings.  A check in this morning fixed it.\n\nInternally yes we are compiling against 4.6. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/9589423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10413732", "body": "I don't like mixing `{}` and `=>` members in a type.  \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10413732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10413755", "body": "@SLaks are you signing up to write it?  ;) \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10413755/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10414232", "body": "@SLaks I can see how you wouldn't be able to contribute to our repo.  But it should still allow you to author analyzers in general which we could then make the call on whether or not to integrate into our build system. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10414232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/11501738", "body": "The notation `master` isn't correct here.  This tracks basically everything PR + push to master. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/11501738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/11504646", "body": "@dpoeschl this comment was made before our email thread and hence represents my misunderstanding of how the PR / commit difference works. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/11504646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12423641", "body": "@Pilchie that's likely the case.  Vim and VS vehemently disagree on whether or not a file should end with a new line.  \n\nRelevant: http://stackoverflow.com/questions/1050640/vim-disable-automatic-newline-at-end-of-file\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12423641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12423656", "body": "Why are we adding the private flag here? \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12423656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/13758581", "body": "This line appears to have broken the build. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/13758581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14072725", "body": "Don't forget to update the toolset page when changing Mono drops\n\nhttps://github.com/dotnet/roslyn/blob/master/docs/infrastructure/mono-toolset.md\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14072725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14545358", "body": "How did these build breaks get introduced?  All PR's should have caughtt this. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14545358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14545364", "body": "@agocke ah okay.  That's interesting.  I don't think it's worth the extra machine time.  \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14545364/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15164662", "body": "See:\n- https://github.com/dotnet/roslyn/pull/7684#discussion_r48374655\n- https://github.com/dotnet/coreclr/issues/2467\n\nWanted to get this submitted first so that I had a simple repro to give the CoreCLR team when filing the bug.  Circling back later today to get the issue linked into the file.  \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15164662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15182365", "body": "@CyrusNajmabadi The expression for `?` and `:` are exactly the same.  Is that a typo?  \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15182365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15182379", "body": "@tmat @dotnet/roslyn-interactive \n\nThe expression for `?` and `:` are the same.  Is this a typo? \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15182379/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15228489", "body": "Perhaps @jasonmalinowski will know.  If no one does though we should remove the conditional. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15228489/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15718386", "body": "The term `e` isn't present in the above code sample.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15718386/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15718569", "body": "What happens when `Type` is a generic type argument that is instantiated with Nullable?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15718569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15718612", "body": "How can `T` have a base type here?  The `T` is constrained to be a struct.  Are we specifically referring to `object` here? \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15718612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15718701", "body": "Looks like we can have custom `operator is` definitions.  How does this impact the `is` usage today?  Does it call into operators when appropriate? \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15718701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15832096", "body": "Why did we do this vs. adopt RunTests to handle CoreClr binaries?  If it's just a time trade off please file an issue and assign it to me. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15832096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15832143", "body": "Was this meant to be 4.5 instead of 5.4?  \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15832143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15832177", "body": "Missing copyright\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15832177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15832211", "body": "Do we have a README or comment somewhere explaining why this project exists?  I understand why we've added it but want to make sure others are clear when looking at the code. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15832211/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15832718", "body": "Guess that's not a typo after all since it's here as well.  Assume this will change to netstandard at some point? \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15832718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15832732", "body": "Copyright\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15832732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15832774", "body": "Eventually we should share this project with the NuGet team.  It's essentially functioning as a common include file which seems like it should be a NuGet feature.  \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15832774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15833185", "body": "Do we have a similar pattern in roslyn-internal that we need to eventually change as well? \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15833185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15833197", "body": "Why did we need this before?  \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15833197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15835964", "body": "RunTests also memoizes results. As we move to a deterministic build it's going to share them across users. \n\nAdditionally the parallelization of xUnit, last I checked, won't work with our code without a significant overhaul. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15835964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15835976", "body": "Yep.  Everything needs one.  \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15835976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16391611", "body": "@AArnott thanks.  Did not realize that was an option.  \n\nOf course it would be best if MSBuild just made a WarnAsError switch :frowning: \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16391611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/18031368", "body": "We should pick a better name than this. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/18031368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/18031603", "body": "Even internal options are now visible to users.  I'd say `BuildErrorIsTheKing` as an alternative. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/18031603/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/18153917", "body": "Will delete that.  It's an oversight.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/18153917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/18931196", "body": "When disabling tests don't comment them out.  Instead use the `Skip` argument to `Fact`.  This allows us to properly track tests.  When commented out it's not tracked at all. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/18931196/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/19690956", "body": "I'm frankly unsure of what the intent of the IDE code is. In some cases the waiters were implicitly part of the standard export, in others it was explicit. In the implicit case it often seemed like it was more accident than intent. \r\n\r\nI'm happy to help sort this out though if there is more deliberate design I'm missing. ", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/19690956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/23142744", "body": "Why keep the case as a comment? ", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/23142744/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "heejaechang": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/23764", "title": "solution crawler progress tracking has a race", "body": "this is caused by https://github.com/dotnet/roslyn/pull/23623\r\n\r\n..\r\n\r\nmore detail\r\n\r\nbasically, previously, we didn't account work that are still running (ex, last work that is running). we start and stop progress bar as first work is enqueued to the work queue and as last work is dequeued. which can be misleading since last work might still running even if progress bar said work is done. so the PR above changed progress bar to consider work still running, but failed to change logic on when we start progress bar since now even if queue is empty, progress bar might still not done yet. restarting progress bar while it is still running will mess up its state tracking. this fix that issue.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/dotnet/roslyn/commits/8554e9c180c3c19309afbe56bea6cb046e8d6f68", "message": "Oop cleanup (#24297)\n\n* Clean up RemoteHost crash info bar.\r\n\r\nthis info bars have added one by one in different places without merging those to one. and that caused sometimes similar info bar to show up multiple times.\r\n\r\nthis merge all to one and make sure it shows up only once if multiple failures are happen (ex, OOP is killed, so multiple connection gets disconnected)\r\n\r\n* added soft crash exception"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/823d9730aed86f9bba80e18b9888ca103dbee9ab", "message": "moved waiter from diagnostics.dll to features.dll where all interface\u2026 (#24120)\n\n* moved waiter from diagnostics.dll to features.dll where all interfaces are defined.\r\n\r\n* simplified listener and waiter and moved those in product.\r\n\r\n* cleaned up a bit\r\n\r\n* fixed some comments\r\n\r\n* forgot to add new AsyncListenerProvider in test export composition\r\n\r\n* fixed dead lock found on unit tests\r\n\r\n* remove all waiters left\r\n\r\n* added dispatcher event processing in one more place\r\n\r\n* added a way to enable waiter through env variable in test such as DDRIT\r\n\r\n* added env var support so that It can be used without internalvisibleTo us.\r\n\r\n* dont wait for all waiters but only onces each test used to wait.\r\n\r\n* removed dependency to Roslyn.Services.Test.Utilities in integration test. that dll is not in probing path.\r\n\r\n* fixed test failures\r\n\r\n* fixed bug in integration tests\r\n\r\n* move call to enable waiter before creating workspace so that workspace event queue get proper async listener\r\n\r\n* expose concret type as well so that it can be directly used in test for waiter\r\n\r\n* addressed PR feedbacks.\r\n\r\n* rename mess up\r\n\r\n* extra ) left out\r\n\r\n* fixed build failure"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/143102e636a19eb73498c084f8e53aa8abe0cb21", "message": "added Microsoft.VisualStudio.IntegrationTest.Setup.vsix to signing (#24057)\n\n* added Microsoft.VisualStudio.IntegrationTest.Setup.vsix to signing\r\n\r\n* removed duplicated entry.\r\n\r\n* now test setup vsix is part of signtooldata.json no need to have special case for it.\r\n\r\nalso made exception to have better message"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/be4040979bf72c10cf79bceb29a630d75f27d57f", "message": "fixed issue where same analyzer reference is installed in both vsix and nuget. deduplication in inproc analyzer manager wasn't present in OOP case. (#23772)\n\nthis doesn't address our workitem to merge those two. that work is a separate work item. this just follow what we currently do in proc."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/b996fa37eaa918e0a64ebbef2dca29bcbfa8429f", "message": "found a race where we might double start progress bar for solution crawler (error list) (#23765)"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/f0c4eb98c821c5f212bf2c5524ae493d0975f4b5", "message": "made bucketing to be better even in telemetry site. (#23648)\n\n* made bucketting to be better even in telemetry site.\r\n\r\nprevious way made bucketting to be better in watson site but not telemetry site. this should make it to better on both site.\r\n\r\n* turns out bucket number is 0 based for API but document is 1 based.\r\n\r\n* changed to use hashcode rather than full callstack since watson will only use first 255 for bucketing."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/98ab9f4e8ba6082c4f57dfc0e112bf8ce2ac68b9", "message": "added a way to set logging information synced to remote host and more logging for error list. (#23614)"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/c08bd5b8bd38b4b618fc6ba95664fb03aa400107", "message": "we called work done too early. (#23623)\n\npreviously, we set all work as done when we pass out last work from the queue without waiting that work to be done.\r\n\r\nnow, we raise works as done only when last item passed out are actually done."}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24043", "title": "Blame", "body": "### Customer scenario\r\n\r\nThis doesn't affect visible user experience. rather it is a foundation for building blame features later on. for now, it collects diagnostic analyzer performance as they run, and when it detects an analyzer that really badly affect VS's performance, it record that information. information about our own analyzer will be reported through telemetry, third party analyzers information will be saved to log folder so that we can ask users to provide them when they are needed.\r\n\r\n### Bugs this fixes\r\n\r\nN/A\r\n\r\n### Workarounds, if any\r\n\r\nnew feature. nothing to workaround.\r\n\r\n### Risk\r\n\r\nLow risk. shouldn't bring down VS.\r\n\r\n### Performance impact\r\n\r\nIt uses resource to calculate the performance number and to save history data. but that is done in OOP and low priority, so it shouldn't matter VS's performance directly in normal situation.\r\n\r\n### Is this a regression from a previous update?\r\n\r\nN/A - new feature.\r\n\r\n### Root cause analysis\r\n\r\nRight now, when expensive analyzers bring down VS's performance, there is no easy way to detect which analyzers are bad one. this should provide that information. we don't have UI for it yet. but once we have high confident on the algorithm, we will add one.\r\n\r\n### How was the bug found?\r\n\r\nN/A\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/22875", "title": "added assert for explicit invariant", "body": "this is related to this issue (https://github.com/dotnet/roslyn/issues/22229)\r\n\r\nsince @AlekseyTs's work for IsImplicit (https://github.com/dotnet/roslyn/pull/22894) is in, I can enable this debug assert in code to find violation out side of tests.\r\n\r\n\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/22281", "title": "example only", "body": "example only for @ToddGrun ", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/19179", "title": "Make Solution/Project/Document checksum persist-able when its data is persist-able.", "body": "currently checksum contains volatile information which makes it not persist-able in some cases. this PR removes such data from checksum if possible.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/16806", "title": "support navigating to external file in error list", "body": "**Customer scenario**\r\n\r\nuser built and got build error (not live error) at xaml file in error list. user double-clicked on the item but VS didn't navigate to the position in xaml file.\r\n\r\n**Bugs this fixes:** \r\n\r\nhttps://devdiv.visualstudio.com/DevDiv/_workitems?_a=edit&id=365348\r\n\r\n**Workarounds, if any**\r\n\r\ndouble click from output window\r\n\r\n**Risk**\r\n\r\nit doesn't change any existing behavior and this is for very specific case, so I think risk is low. it now let VS open to any arbitrary file returned by analyzers (including compiler), but we already does that in other features so it shouldn't be doing something we didn't do before.\r\n\r\n**Performance impact**\r\n\r\nthis code change is for explicit user command. no perf impact.\r\n\r\n**Is this a regression from a previous update?**\r\n\r\nNo\r\n\r\n**Root cause analysis:**\r\n\r\nour error list never allowed users to open and go to a file that is not part of Roslyn solution. now we allow that.\r\n\r\n**How was the bug found?**\r\n\r\ncustomer report.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/8525", "title": "Support showing diagnostics on additional files.", "body": "this change is turned off by default. and can be turned on by reg key to dogfood changes.\n\nthis only let analyzer author to report such diagnostics but consumer doesnt have any knob to control (including suppressing it) yet.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70352911", "body": "workspace event still gives you old and new snapshots of the solution which has a way to give you diff. we also provide a way to diff syntax tree so in a sense it provides all the detail, only difference, I think in actual consumption of data, is that analyzer does many plumbing work for you but workspace just give you data and tool, but it is still you who have to do all the plumbing to get to actual information you are interested in.\n\nI guess, we could have another central event mechanism which do things like register for type added, deleted, a kind of node added, removed and etc. so user doesnt need to do all those plumbing himself. and do bunch of performance work to make sure it doesn't affect typing.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70352911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70384673", "body": "in unit test, if a specific test doesn't care about formatting, how about comparing sequence of tokens and trivia except whitespace trivia?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70384673/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70555285", "body": "probably it requires some changes (since it currently loses diff info quite early) but could be supported. but regardless where it is implemented, it seems good thing to support centrally since diff is expensive. if multiple people do diffing themselves, we might waste a lot CPU just for diffing.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70555285/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/9680511", "body": "it looks like I did something wrong and pushed to master directly.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/9680511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/9680523", "body": "it looks like I did something wrong and pushed to master directly. should I revert it back?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/9680523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/13362054", "body": "@balajikris did it broke Close side?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/13362054/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/13376290", "body": "I did sync. But still build failure.\n-          heejae\n\nFrom: Balaji Krishnan [mailto:notifications@github.com]\nSent: Tuesday, September 22, 2015 9:42 AM\nTo: dotnet/roslyn roslyn@noreply.github.com\nCc: HeeJae Chang Heejae.Chang@microsoft.com\nSubject: Re: [roslyn] Move ReferencePathUtilities out of Workspaces (59c3eac)\n\n@heejaechanghttps://na01.safelinks.protection.outlook.com/?url=https%3a%2f%2fgithub.com%2fheejaechang&data=01%7c01%7cHeejae.Chang%40microsoft.com%7cbd1e0c6e9fa04837f08f08d2c36caf2a%7c72f988bf86f141af91ab2d7cd011db47%7c1&sdata=hdBWBEG2p0eNm4W7BkJn6I3d3mt533t1f7fhOktGJPA%3d you probably need to sync closed as well? I made a corresponding change to closed. PR 172 in internal repo\n\n\u2014\nReply to this email directly or view it on GitHubhttps://na01.safelinks.protection.outlook.com/?url=https%3a%2f%2fgithub.com%2fdotnet%2froslyn%2fcommit%2f59c3eac3af2fa4a2e0d20b450dce73559157dd62%23commitcomment-13372218&data=01%7c01%7cHeejae.Chang%40microsoft.com%7cbd1e0c6e9fa04837f08f08d2c36caf2a%7c72f988bf86f141af91ab2d7cd011db47%7c1&sdata=uIHO7ZmMNj2JetiryTd1CjnPnogck%2bH%2fxO9tQ%2bB8h20%3d.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/13376290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/18031532", "body": "these are internal options to test different user experience. but sure, we can change name of option to something else. suggestion?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/18031532/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/18031824", "body": "sure will do. this one is old one.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/18031824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/18407339", "body": "this and InProcCompilerDiagnosticAnalyzer are only real change\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/18407339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/18407351", "body": "this is not actually new file. just renamed from AnalysisResult to DiagnosticAnalysisResult due to conflict with the type in compiler layer.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/18407351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/18407353", "body": "same here. renamed from compilerResultBuilder to DiagnosticAnalysisResultBuilder\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/18407353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/18407358", "body": "same here. just rename. actually changed a bit but this is just named tuple to move data around.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/18407358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/18407362", "body": "existing type. moved from feature layer to workspace layer.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/18407362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/18408272", "body": "I will remove this comment. now code handles exception properly\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/18408272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "khyperia": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/23761", "title": "`MetadataTypeTests.EmptyNamespaceNames` fails on Mono", "body": "Possibly related: https://github.com/dotnet/roslyn/issues/23760\r\n\r\nIt seems as though the order of namespaces is different from desktop/coreclr and mono. I've added a sort for now, but we should look into why.\r\n\r\nNot sure if it's a ilasm issue or a assembly loading issue (similar to the related issue).\r\n\r\n---\r\n\r\n@jaredpar Ping again, this issue needs labeling too", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23760", "title": "`Bug530209_DecimalConstant_FromIL` fails on Mono", "body": "Discovered in https://github.com/dotnet/roslyn/pull/23747 - just skipping it for now.\r\n\r\nI don't understand the bug, so I'm not 100% sure, but:\r\n\r\n* It seems like there are two `DecimalConstantAttribute`s per parameter: the first one is `-7m`, and the second one is `-8m`.\r\n* The test asserts that the constant value of the parameter is `-7m`.\r\n* It fails, because the value is `-8m`.\r\n\r\nI don't know why that could be - if we're using Mono's loader, it could be that they handle double-attributes differently (so there's either a bug with desktop/coreclr, or with mono - whatever the spec says). It could be a bug in Mono's ilasm - I'm not 100% sure which ilasm we're using, it could be that we're invoking out to the coreclr ilasm, or we could be using mono's ilasm. If the latter, again, there's either a bug with desktop/coreclr, or with mono, with spec deciding who is wrong.\r\n\r\nI'll leave investigation up to a separate discussion unrelated from https://github.com/dotnet/roslyn/pull/23747 , because this seems way out of scope for a PR for \"just get tests running on mono\"\r\n\r\n---\r\n\r\n@jaredpar No idea what to label this or who to assign it to - help would be appreciated :)", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/dotnet/roslyn/commits/f611efcf682a96f42ff4680b962e563b9d043421", "message": "Add mono as a test runner"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/2c1d64826d5ec7cd43ecc3f3a3b2960136c9b3d2", "message": "Merge pull request #23507 from khyperia/linux_stuff\n\nGeneral improvements to Linux story"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/906d5cb370f1aee6303d9daf5790aea13fb1d3c1", "message": "Merge pull request #23518 from khyperia/flaky_server_test\n\nFix flaky compiler server test"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/71a7653ec1882839d0ee9d6acc48718a24920164", "message": "Fix microbuild for VBCSCompiler"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/b5c8c9a376a227ef3b8b0e04cfe7ea4d90c547dd", "message": "Add VBCSCompiler.dll to the Microsoft.NETCore.Compilers package"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/19444", "title": "Mark local function default parameter expressions as used", "body": "**Customer scenario**\r\n\r\nReferencing a local/local-function with `nameof` or a constant expression in a local function default parameter expression does not mark the other variable as used. This would emit a warning, and cause VS to suggest to eliminate the variable - which doesn't work, as it *is* being used.\r\n\r\n**Bugs this fixes:**\r\n\r\n#16821, #16454\r\n\r\n**Workarounds, if any**\r\n\r\nUser ignores the warning.\r\n\r\n**Risk**\r\n\r\nThe only major modification is changing the way `SourceComplexParameterSymbol` calculates the default value (it now holds onto the bound expression) - but it's unlikely this would affect anything.\r\n\r\n**Performance impact**\r\n\r\nExtra allocation when storing the `ConstantValue` and `BoundExpression` (to allow a single Interlocked.CompExch to update both), plus retaining the `BoundExpression`. Note this only happens in `SourceComplexParameterSymbol`, which is a subset of all parameters - only \"special\" ones (complex means \"has default value\", etc.)\r\n\r\n**Is this a regression from a previous update?**\r\n\r\nNo.\r\n\r\n**Root cause analysis:**\r\n\r\nOverlooked probably because it's not a very intrusive error, easy to ignore and not report. The case where this could go wrong is also new (with local functions), as we never needed to report usage before (but note that a couple tests changed - a normal method referencing a static variable in a default param now recognizes it as being used)\r\n\r\n**How was the bug found?**\r\n\r\nGithub issues (linked above)\r\n\r\n---\r\n\r\nPing @dotnet/roslyn-compiler for review. The weirdest thing up for review is probably the LazyDefaultValue class I created - I think that's the cleanest way to do it (lazy init two fields linked together), but I'm open for other suggestions.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "danmosemsft": {"issues": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/23743", "title": "When Roslyn fails it should format callstacks to enter the build's error log", "body": "Version  2.6.0-beta3-62316-02. Commit Hash: fbe99784a6b17a4aa8b35e5068d01b3c18a4e1d6\r\n\r\nRoslyn crashed (in this case due to bad install on my box) and this is all I get in the MSBuild error log and in the console (which is filtering to errors):\r\n```\r\n  91:2>C:\\git\\corefx\\Tools\\net46\\roslyn\\tools\\Microsoft.CSharp.Core.targets(84,5): error MSB6006: \"csc.exe\" exited with code -532462766. [C:\\git\\corefx\\src\\System.Memory\\ref\\System.Memory.csproj]\r\n```\r\n\r\nIn the full log is the real information:\r\n\r\n```\r\n    34>CoreCompile:\r\n         Using shared compilation with compiler from directory: C:\\git\\corefx\\Tools\\net46\\roslyn\\tools\r\n         \r\n         Unhandled Exception: System.IO.FileLoadException: Could not load file or assembly 'System.Collections.Immutable, Version=1.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. Access is denied.\r\n            at Microsoft.CodeAnalysis.CSharp.CommandLine.Program.MainCore(String[] args)\r\n            at Microsoft.CodeAnalysis.CSharp.CommandLine.Program.Main(String[] args)\r\n    34>C:\\git\\corefx\\Tools\\net46\\roslyn\\tools\\Microsoft.CSharp.Core.targets(84,5): error MSB6006: \"csc.exe\" exited with code -532462766. [C:\\git\\corefx\\src\\System.Collections.Memory\\ref\\System.Collections.Memory.csproj]\r\n```\r\n\r\nThis output should be in the error log. To achieve that every line of the console output must be in the same format CSC uses for compilation errors, eg:\r\n\r\n```\r\nCSC: error CS0000 : Unhandled Exception: System.IO.FileLoadException: Could not load file or assembly 'System.Collections.Immutable, Version=1.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. Access is denied.\r\nCSC: error CS0000 :             at Microsoft.CodeAnalysis.CSharp.CommandLine.Program.MainCore(String[] args)\r\nCSC: error CS0000 :             at Microsoft.CodeAnalysis.CSharp.CommandLine.Program.Main(String[] args)\r\n```\r\n\r\nThe initial CSC can be replaced with a path if you have a useful one.\r\n\r\nTo achieve this you will have to have an exception handler somewhere near the top of the stack (MainCore perhaps) that does this wrapping, then Console.Write's the result of ex.ToString() with each line prefixed, then rethrows it for Watson/debuggers.\r\n\r\nWhen you rethrow, you should do it with `ExceptionDispatchInfo.Capture(ex).Throw();` instead of `throw ex;` because it will not reset the callstack.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/23743/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jasonmalinowski": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/roslyn/commits/3bf3a102e61c1e12ad7d6b9f05c1bc6d4eab523a", "message": "Merge pull request #24321 from agocke/add-15.7-branches\n\nAdd 15.7-vs-deps to published branches list"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/1650b9e32298d267222302281bb49e89e855a07a", "message": "Merge pull request #24132 from jasonmalinowski/more-publishdata-fixes\n\nFurther update PublishData.json for correct publishing semantics"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/f809a7f799d2175c42da312d79265b7d41d87db4", "message": "Further update PublishData.json for correct publishing semantics"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/6d840bedcdeb58f69c1fcc94d5ffdedb9bba4105", "message": "Merge pull request #24115 from dotnet/merges/dev15.6.x-to-master-20180109-080016\n\nMerge dev15.6.x to master"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/067ed0a21ff6b34b32d1deffab31b2c0ae990291", "message": "Merge pull request #24109 from VSadov/15_6\n\nAdding entries for 15.6 branches"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/a213194a975b4fb7d3327997eaf2e5c4b046b425", "message": "Merge pull request #24107 from dotnet/master\n\nSnap master into dev15.6.x"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/73d0261441fe8c88d1be8c0be45a3b0d5cade490", "message": "Merge remote-tracking branch 'dotnet/dev15.6-preview2' into merges/dev15.6-preview2-to-master-20180104-080013"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/ee2a411ff9aeb2f78da962e2abaa0b69da3f925c", "message": "Merge pull request #24002 from dotnet/dev15.5.x\n\nMerge dev15.5.x into master"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/c1472c8a3912dc2ea639e4e72caa9f4d113a1eca", "message": "Merge pull request #23999 from jasonmalinowski/fix-version-stamping\n\nCorrect date stamping logic for the new year"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/56ec3cfa6ede7c45dc9bc1ca53c07f6243d8e016", "message": "Correct date stamping logic for the new year\n\nIdeally, we'd apply a version number to our binaries like 20180102\nfor the 2nd of January, 2018, but the Windows PE file format restricts\neach number to a 16-bit unsigned integer. This means even trimming\nto 80102 still isn't enough. The solution is to continue to decrement\nthat 'year' digit, and each time we do so add another 12 to the month.\nThis buys more time until we can rebaseline where we start."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/92eadcd85032e25d3f5006c41a406f0ccec1e43d", "message": "Merge pull request #23906 from jasonmalinowski/fix-fsharp-assembly-load\n\nAdd MEF metadata to IDeferredQuickInfoContentToFrameworkElementConverter"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/553101704893a0255df466f7932c09188952cdca", "message": "Merge pull request #23909 from dotnet/merges/dev15.6-preview2-to-master-20171222-080016\n\nMerge dev15.6-preview2 to master"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/8b8028eb25589d01725c24d93ba67f3fe1d80fe1", "message": "Switch to a concrete metadata type to keep things internal"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/b812f5d5350761d6909e69c47bcf8dee4ad09a93", "message": "Merge branch 'dotnet/dev15.6-preview2' into merges/dev15.6-preview2-to-master-20171222-080016"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/fa6ee581a9655bce28a90a835c1aea65794294e6", "message": "Merge pull request #23914 from v-zbsail/loc_20171214\n\nLOC CHECKIN | dotnet/roslyn \u2013 master | 20171222"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/72ec327431b87e54bae9e330e34bce84c29251aa", "message": "Add MEF metadata to IDeferredQuickInfoContentToFrameworkElementConverter\n\nWhen I added this interface, I had the implementations expose their\napplicable type not by metadata, but by simply calling a method on\nthe instance. This is problematic if the implementation is in a\ndifferent assembly as we'll load it too early. This is causing F#\nto load when they shouldn't.\n\nThis is intended as a temporary shim that fixes the perf load for\nthe F# case (the only current exporter of these outside the Roslyn\nrepo itself) without forcing an interface change. This will get deleted\nsoon enough once we migrate to newer Quick Info APIs."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/a9cee9f52ff9251abe12901ee46ce9b4d71cf821", "message": "Merge pull request #23843 from jasonmalinowski/fix-microbuild-publishing\n\nFix publish-assets.ps1 to call the right helper function"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/41415c9f6283dd9eeacd85c9acf96a7ef1602773", "message": "Fix publish-assets.ps1 to call the right helper function\n\nEnsure-DotnetExe should be Ensure-DotnetSdk."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/1ead9e9c4dab6dc5092c1690b560dd2f113a236c", "message": "Merge pull request #23731 from dotnet/features/vs-for-mac-refactorings\n\nMerge features/vs-for-mac-refactorings into master"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/15814d57f7596fc18d53b984bc8b78179482016b", "message": "Merge branch 'dotnet/master' into features/vs-for-mac-refactorings"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/2c94423e50a72aea8a4962d8722641d06bc88b13", "message": "Merge pull request #23773 from jasonmalinowski/enable-binary-log-in-dev15.5.x\n\nUse binary log in microbuild"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/147178c3fc09f1a340d1b8d28eb3aad9670cd6ae", "message": "Merge pull request #23733 from jasonmalinowski/merge-master-into-vs-for-mac-refactorings\n\nMerge master into features/vs-for-mac-refactorings"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/d1f1c4f43106f2f09747dcfbce6be8f3e19418af", "message": "Merge dotnet/master into features/vs-for-mac-refactorings"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/92231b4fc574932a1045f46a8feff2bb43dd454a", "message": "Merge pull request #23746 from jasonmalinowski/dev15.6-preview2-snap\n\nStandard updating of stuff for -beta3"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/d4b5e5f0a5d326004a0678880f4d98911466274b", "message": "Merge pull request #23748 from jasonmalinowski/bump-version-number\n\nBump version number to 2.6.1"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/ccc724f5531bb1aac3a68ec7d781d11ef9c1e289", "message": "Bump version number to 2.6.1"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/2d4537396f051fdb58a1a4701c5e27738a258e6a", "message": "Bump Roslyn version to -beta3"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/52f4af2b8df4c951358f0a1398b2e73a1a97acf6", "message": "Update list of branches to publish"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/576b9c6ce646c26158fe421b642859e3fd0da03b", "message": "Merge pull request #23353 from jasonmalinowski/decouple-miscellaneous-files-workspace-and-documentprovider\n\nDecouple some icky coupled bits in the Visual Studio project layer"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/1ad10e6a8d0df79bc37e0f35bf936e1386144354", "message": "Put IVisualStudioHostProject back\n\nThis interface is used for TypeScript to call TryGetDocumentForFile.\nLeave a shim in place."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/1b24e9bf2ddea8d6d80f1107c628fce9f9b3e1cd", "message": "Delete VisualStudioMetadataReference.Project\n\nI'm not sure why this existed, but it's not being used now."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/606da76335ff229820dbf3eb052a163305c6ee05", "message": "Delete IVisualStudioHostProject[Container]\n\nWe now only have one implementation of these interfaces, so let's just\nstate the underlying types directly. The system is still just as\ncoupled as it is before, but this will make it easier to find dead\ncode."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/a24b2378af5a22cdd8c136248dae6880a40192dc", "message": "Decouple MiscellaneousFilesWorkspace from DocumentProvider\n\nThere was no deep reason to use DocumentProvider here, since the only\nthings it was being used for was to fetch the text buffer out of the\nRDT (which MiscellaneousFilesWorkspace already did anyways) and to\napply text edits, which was just calling into one static function\nanyways. Deleting this means DocumentProvider can be further refactored\nand simplifed without this all getting in the way."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/3b6536f4a616e5f3b8ede940c63663a828e68b5d", "message": "Merge pull request #23676 from chborl/fixbuild\n\nRebuilt xlf files to fix build break"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24314", "title": "Fix up some NuGet private package definitions", "body": "We produce a number of pre-release packages for partner teams to get copies of certain APIs we haven't ratified. We never produce 'stable' versions of those packages because they aren't stable in any meaningful way. But sometimes, you want to mix those pre-release packages and their equivalent stable packages in the same build, which is something that ASP.NET needs to do. This means that we can't use strict package version rules that require exact versions everywhere, or else a 1.2.3-beta1 package will be \"incompatible\" with 1.2.3 the final release.\r\n\r\nThe easiest fix for this is to change the package dependencies that go from private unofficial packages to official packages as being a \"or higher\" version requirement, so it works. There's no promise this will work at runtime, but since there's prerelease packages in the mix in the first place there never really was such a promise.\r\n\r\nThis is an infrastructure only change (and only changing some non-shipping NuGet package metadata), so no ask mode is required.\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24296", "title": "Make a perf tweak in the DataTipInfoGetter", "body": "Often, these only require fetching the syntax tree, which we now do synchronously. Since this is called on the UI thread, it's good practice not to call GetSyntaxRootAsync, as if we do have to recompute it it means we're having the UI thread wait for the thread pool which might be backed up. By having the UI thread do it directly, it'll always be faster.\r\n\r\nI noticed this while working with @ivanbasov investigate some other perf issues. Awhile back we did an \"async everything\" approach, and have since learned that was perhaps overly aggressive, at least when that's stuff that's on the UI thread. We saw a user complaint of this taking longer than it should have, and this might help a lot, and won't hurt at all.\r\n\r\n<details><summary>Ask Mode template</summary>\r\n\r\n### Customer scenario\r\n\r\nUser mouses over an expression, and they get a dialog saying we're computing this. The user doesn't want that dialog.\r\n\r\n### Bugs this fixes\r\n\r\nObserved while investigating customer issue with @ivanbasov.\r\n\r\n### Workarounds, if any\r\n\r\nNone, but this is just a perf fix.\r\n\r\n### Risk\r\n\r\nVery low: localized fix replacing with a faster but equivalent method.\r\n\r\n### Performance impact\r\n\r\nShould improve things. Can't make things worse.\r\n\r\n### Is this a regression from a previous update?\r\n\r\nNope, this has been like this in Roslyn for awhile.\r\n\r\n### Root cause analysis\r\n\r\nA few years ago in Roslyn we did an async-pass where we converted as much as possible to async. We observed that in a few cases this made things worse for perf: if you are on the UI thread responding to a legacy API call, calling an async API and awaiting it is potentially worse for perf than doing the work synchronously: it means you're giving up your thread (which was running code!) and waiting for a thread pool that might be backed up. @ivanbasov and I were looking at this code for another bug, and I noticed this wasn't following the current best practice, and might help the customer in the case we were looking at. We don't have traces to confirm this might be their problem, but the fix is cheap and zero-risk.\r\n\r\n### How was the bug found?\r\n\r\nCustomer report.\r\n\r\n</details>\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24165", "title": "[WIP] Remove IVisualStudioWorkspaceHost and related interfaces", "body": "*THIS CHANGE IS A WORK IN PROGRESS, DO NOT REVIEW*\r\n\r\nThis interface was originally introduced to support CodeLens, when we needed the ability to create a Workspace that was out-of-proc but connected to the in-process project system interfaces. This created the abstraction of how we pushed updates to the workspace, and came with the rule that the VisualStudioProjectTracker was unable to ever touch a workspace directly.\r\n\r\nToday, that's not how we build our out-of-proc components. We now have an in-proc workspace, and we mirror that in-proc workspace via a pull model to the out-of-process workspace. This meant that the\r\ninterface was nearly pointless, except it was being used for the out-of-proc workspace setup to mirror some persistence settings over. Providing a new interface to do that directly is simpler and also\r\nmuch cheaper, as it doesn't come with the overhead of pushing workspace changes to the remote host that were being ignored.\r\n\r\nThis has the direct perf benefit of removing some delays around setting up the remote workspace since we're not computing useless data. It has longer-term benefits to aid in further refactorings, as we now have workspace updates going directly to the in-proc workspace, which we can start to do in a free-threaded manner.\r\n\r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/22845", "title": "Upgrade System.Collections.Immutable and System.Reflection.Metadata", "body": "These new packages contain the exact same bits (and same assembly versions) as the previous packages, but with updated partial ngen data.\r\n\r\n----\r\n\r\n**Customer scenario:** load a WinForms designer, and lots of JITting happens.\r\n**Bugs this fixes:** https://devdiv.visualstudio.com/DevDiv/_workitems/edit/433634\r\n**Workarounds, if any:** none\r\n**Risk:** very low, packages contain new partial ngen data but should otherwise contain the same code.\r\n**Performance impact:** better; this improves some load times by around 100ms in Visual Studio.\r\n**Is this a regression from a previous update?** was regressed around the 15.0 time frame, and caught late.\r\n**Root cause analysis:** dependencies moved and changed. The exact root cause was never understood.\r\n**How was the bug found?** RPS.\r\n\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/21699", "title": "Move machine image to the RTM version of 15.0", "body": "Moving the microbuild queue image to the same as everything else.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/20220", "title": "Assert that we have actually subscribed before calling EnsureSubscription", "body": "@Pilchie realized we didn't have this, and it's a good idea.\r\n\r\n**Review:** @dotnet/roslyn-ide", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/19725", "title": "Enable integration tests to write out to the test log", "body": "Right now if a first chance exception happened, we would log a screenshot. But we wouldn't log the text or stack of the exception, which might be useful for debugging. This does that now too.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/19541", "title": "Create and thread through an options API into the compiler", "body": "This PR creates the API skeleton for introducing options into the compiler. This is still a very fancy no-op in that the .editorconfig parsing isn't implemented (that's the next step), but this should allow conversation at the overarching shape. The pattern that ended up here was:\r\n\r\n- CompilationOptions consumes a new provider a la the other providers that are already there. This is an abstraction of \"get me options for a syntax tree\", with no policy statements made (other than expectations of immutability.)\r\n- An implementation of that provider that will consume/parse .editorconfig files. NB: the IDE will eventually have an alternative implementation that does the .editorconfig parsing but backstops on VS IDE options if there is no .editorconfig.\r\n- The API Compilation.GetOptionsForSyntaxTree() which fetches the option set.\r\n\r\nThe earlier thought we were going with was the API was constrained to the AnalyzerOptions type, so this is a change. The main challenge was although not in the plan for 15.3, the eventual hope is the compiler is also consuming .editorconfig for impacting the effective diagnostic severity of compiler warnings; in the case where you want to control warnings but otherwise have no other options, you don't (today) have an AnalyzerOptions at all, and the compiler doesn't otherwise have any visibility (as far as I can tell) to the AnalyzerOptions type: that's constrained to the analyzer driver.\r\n\r\nThere was a smaller benefit that if you're doing code generation and have a Compilation object you might want to get options for a tree without being in an analyzer as well. In those scenarios you're probably in a workspace though and could still stay at the workspace layer to get options, but once again the distinction felt a bit strange.\r\n\r\nIf we did want to keep this back on AnalyzerOptions we could do that, but then need a plan for how the compiler would consume this from an AnalyzerOptions even if there isn't an analyzer active. If we had a solution, then I think the API changes would be to move:\r\n\r\n1. CompilationOptions.SyntaxTreeOptionsProvider to AnalyzerOptions.SyntaxTreeOptionsProvider\r\n2. Compilation.GetOptionsForSyntaxTree() to AnalyzerOptions.GetOptionsForSyntaxTree()\r\n\r\nand with the obvious follow ups.\r\n\r\nStill to do before this particular PR merges:\r\n\r\n- [x] Make matching API updates in VB (there's a TODO or two)\r\n- [x] Update the API shape for also getting options for additional files, which I'm realizing probably means I have to rename SyntaxTreeOptionsProvider to something a bit more vague. (ugh.)\r\n\r\n*Out of scope for this PR:*\r\n\r\n- Actual parsing of .editorconfig files\r\n", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70047045", "body": "Yep, we haven't migrated our historical branches from CodePlex yet. I think @jaredpar is working on that.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70047045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/342687693", "body": "@tmat I think you get the honor of closing the oldest active issue in Roslyn. :smile:", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/342687693/reactions", "total_count": 5, "+1": 3, "-1": 0, "laugh": 0, "hooray": 2, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70333162", "body": "Can you clarify what type of feature you're looking to write? It's helpful to have motivation so we can ensure we actually meet your (imagined) needs.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70333162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70537171", "body": "@heejaechang Would the incremental analyzer stuff be good enough for what he wants?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70537171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/9813921", "body": "Why TaskCanceledException specifically vs. OperationCancelledException (a base type)?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/9813921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12427677", "body": "LGTM.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12427677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15246739", "body": "It looks like it was written as a part of 515c3f96b088cd5f047aefd305a108f8b539c48b, so yes, @mavasani is the right person.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15246739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/18363930", "body": "I'm indifferent.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/18363930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "JieCarolHu": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/roslyn/commits/5a9c469cedf844e092184d63af8b99a7c4e8c5c2", "message": "Merge pull request #24279 from JieCarolHu/bug23513\n\nAdd a link to Tools>Options>\u2026>Code Style to link to EditorConfig documentation. Bug#23513"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/3cf6aa66c07d41473cb5daf36deb89d14f62264a", "message": "use PascalCase for const name"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/abb68e74bc5f85e7b0e47906b2d2a53cd4ab7045", "message": "remove unused usings"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/ab205e43a328a17d7b6251409be30d31690e3526", "message": "use .editorconfig files"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/6e9e9e27686a0eb9c565c28743d608566ea2ae03", "message": "address more comments"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/0e386ba55b6d0bba438a4f18dd9db3f344b74b77", "message": "address code review comments"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/a5110f6b6946b3822ffd74076ad426994387955e", "message": "move newly added text into resource file"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/619213b55badce1f494f9489e33119e0e2148505", "message": "add text and hyperlink to C# code style page"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24219", "title": "fixing EditorBrowsable bug#4434", "body": "<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "OmarTawfik": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/roslyn/commits/591bdbad0172bb32b857edfe62701bbf267c572c", "message": "Make sure 'in' is honored in cref parsers/completion lists (#24023)\n\n* Make sure 'in' is honored in cref parsers/completion lists\r\n\r\n* Clean up\r\n\r\n* PR Comments\r\n\r\n* Document API breaking change"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/3d4ac1218c8a37aa17d0a8de3a421160bc5f3438", "message": "Reject ref as an invalid modifier for accessors (#23905)\n\n* Reject ref as an invalid modifier for accessors\r\n\r\n* Updated test plan\r\n\r\n* PR Comments\r\n\r\n* Accept ref in parsing, and error out in binding\r\n\r\n* Update test plan\r\n\r\n* Fix build break"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/9ddfec9644192bd0c66af39ee1a33f5b8739f244", "message": "Ignore escape analysis for erroneous field access nodes (#23796)"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/a8279d011a77171dd7911405709a9f10b267de38", "message": "Suggest stackalloc keyword in Span legal places (#23655)\n\n* Suggest stackalloc keyword in Span legal places\r\n\r\n* Address PR Comments\r\n\r\n* More PR Feedback\r\n\r\n* Clean up"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/1868584feed5aca00492f6788fb3bf21c98a1c10", "message": "Pass in optional arguments by ref (#23728)\n\n* Pass in optional arguments by ref\r\n\r\n* IOperation tree tests\r\n\r\n* PR Comments"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/fdb037fd82d61f9db246fc7a54c6b3c9c8e0f14d", "message": "Tests to make sure compiler produces errors on empty key path for signing (#23646)\n\n* Fixes #11497 - Error on empty key path for signing\r\n\r\n* Address PR Feedback"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/1688be032197dd23eb48253512b5797731d389cb", "message": "Accept PE Operator Symbols having in parameters (#23508)\n\n* Accept PE Operator Symbols having in parameters\r\n\r\n* Address PR Comments"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/919b606f53975172f4b8c2d930e2afa8a32c5cee", "message": "Prefer by-val methods over in methods in overload resolution (#23122)\n\n* Prefer by-val methods over in methdos in overload resolution\r\n\r\n* More tests\r\n\r\n* Moved check to the end of OR chain\r\n\r\n* Address PR comments\r\n\r\n* Operators overloading\r\n\r\n* Address PR Comments\r\n\r\n* Clean up"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/d13df4a3d945d99bb60475ca0bc27c36e79febfd", "message": "Move C# tests to testing metadata emitted attributes through `CompileAndVerify` (#22896)\n\n* Refactored synthesized attributes tests\r\n\r\n* Remove rest of calls to CompilationUtils.GetSynthesizedAttributes()\r\n\r\n* Fix EE tests\r\n\r\n* Fix [Dynamic] tests\r\n\r\n* Clean up\r\n\r\n* Remove EmitMetadataTestBase.ValidateDeclSecurity(Compilation)\r\n\r\n* Remove C# GetDefaultPEBuilder\r\n\r\n* Fix Assembly Attributes tests\r\n\r\n* Clean up\r\n\r\n* Address PR Comments\r\n\r\n* Clean up"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24199", "title": "Support System.Enum as a valid generic type constraint", "body": "Enables using `System.Enum` as a constraint for generic parameters. Example:\r\n```csharp\r\nclass Test<T> where T : System.Enum\r\n{\r\n}\r\n```\r\nLanguage design issue: https://github.com/dotnet/csharplang/issues/104\r\nRoslyn issue: https://github.com/dotnet/roslyn/issues/262\r\n\r\n@dotnet/roslyn-compiler @dotnet/roslyn-ide @VSadov  for review", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zaytsev-victor": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/roslyn/commits/3de8a19646e7d39cf0e30655944970452d10318e", "message": "Fixed code style option 'prefer var' for delegate type. (#23718)\n\nMerging on behalf of @zaytsev-victor. Thanks for the contribution!"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23946", "title": "Fixed VS2017 crash with :: operator", "body": "Fixes #23940\r\n\r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23721", "title": "Fixed incorrect suggestion for collection initialization simplification", "body": "Fixes #23672 \r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23696", "title": "Fixed completion for variable initializer.", "body": "Fixes #13682\r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23693", "title": "\"Generate method\" refactoring enabled if method name is equal to imported type.", "body": "Fixes #16975\r\n\r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23616", "title": "Fixed 'Generate Constructor' for sealed class.", "body": "Fixes #22699\r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23594", "title": "Disabled 'Replaces a method with property' refactoring for a method that overrides a metadata method.", "body": "Fixes #23593\r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23515", "title": "Fixed formatting for 'Use pattern matching code fix'", "body": "Fixes #23504\r\n\r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23498", "title": "Added support for pattern matching syntax to smart variable completion provider", "body": "Fixes #23497\r\n\r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23466", "title": "Minor update for 'Generate delegate constructor' refactoring", "body": "Using more efficient way to get number of instance constructors.\r\n\r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23465", "title": "Fixed remaining case for 'Use local function' refactoring.", "body": "Fixes #23149\r\n\r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23395", "title": "Fixed incorrect suggestion for object initialization simplification", "body": "**Customer scenario**\r\n\r\nUser can see suggestion for object initialization simplification even if result won't compile.\r\n\r\n**Bugs this fixes:**\r\nFixes #23368\r\n\r\n**Risk**\r\nLow\r\n\r\n**Performance impact**\r\nLow\r\n\r\n**Is this a regression from a previous update?**\r\nNo\r\n\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/22199", "title": "Disabled Ctrl + click for `get`/`set` when they are keyword", "body": "**Customer scenario**\r\npress Ctrl and hover over get or set in a property\r\n\r\nExpected:\r\nnot linkified\r\n\r\nActual:\r\nshows link, but clicking does nothing except scrolling the editor view.\r\n\r\n**Bugs this fixes:**\r\nFixes #22097 \r\n\r\n**Workarounds, if any**\r\n\r\n**Risk**\r\nLow\r\n\r\n**Performance impact**\r\nLow\r\n\r\n**Is this a regression from a previous update?**\r\nNo\r\n\r\n**Root cause analysis:**\r\n`get`/`set` keywords have IMethodSymbol. Excluded `get`/`set` keywords from navigation targets.\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/21374", "title": "Removed text truncation logic from Introduce Variable codeaction", "body": "Fixes #5258", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/21338", "title": "Fixed IntelliSense suggestion for read-only class properties in object initializers ", "body": "**Customer scenario**\r\nIntelliSense doesn't show read-only class properties in object initializers\r\n\r\n**Bugs this fixes:**\r\nFixes #15205\r\n\r\n**Risk**\r\nLow\r\n\r\n**Performance impact**\r\nLow\r\n\r\n**Is this a regression from a previous update?**\r\nNo\r\n\r\n**How was the bug found?**\r\ncustomer reported", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dpoeschl": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/roslyn/commits/07aaeed60ff13a52a7660e776ada987d4e2df7a6", "message": "Merge pull request #22714 from dpoeschl/HandleMissingOOPProcess\n\nBe resilient to the OOP process going away in TodoComments and DesignerAttribute processing"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/8374cdf68acf400238dc4d79828d277212ef8056", "message": "Correct merge conflict"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/d008691f42683e3f31138351863eaed354cd985d", "message": "Be resilient to the OOP process going away in TodoComments and DesignerAttribute processing\n\nFixes https://devdiv.visualstudio.com/DevDiv/_workitems?id=503862"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/22939", "title": "Don't crash calculating checksums when reading invalid PE image formats", "body": "Fixes https://devdiv.visualstudio.com/DevDiv/_workitems?id=234447\r\n\r\nConsumers of AssemblyMetadata.GetModules() are expected to handle\r\nBadImageFormatExceptions and IOExceptions, which were both left\r\nunhandled by the mvid writer in the ReferenceSerializationService.\r\n\r\n**Customer scenario**\r\n\r\nThere is a referenced assembly with an invalid public key or public key token, and then calculating the referencing project's checksum crashes VS.\r\n\r\n**Bugs this fixes:**\r\n\r\nhttps://devdiv.visualstudio.com/DevDiv/_workitems?id=234447\r\n\r\n**Workarounds, if any**\r\n\r\nNo known workarounds\r\n\r\n**Risk**\r\n\r\nLow. Other pathways through this code have similar recovery logic, and there's already a similar failure mode in this code when the metadata for the reference can't be read at all. This case is now handled in the same way.\r\n\r\n**Performance impact**\r\n\r\nNone.\r\n\r\n**Is this a regression from a previous update?**\r\n\r\nTODO: Unknown.\r\n\r\n**Root cause analysis:**\r\n\r\nTODO: How did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n**How was the bug found?**\r\n\r\nWatson (3644 hits)", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/21201", "title": "Disable BasicLineCommit.CommitOnSave", "body": "It's been failing. Tracked by https://github.com/dotnet/roslyn/issues/20991", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/20492", "title": "Report as being on the foreground thread in more cases", "body": "Fixes https://devdiv.visualstudio.com/DevDiv/_workitems?id=428108\r\n\r\nPrior to this change, we would only report a call into\r\nForegroundThreadAffinitizedObject as being on the foreground thread if\r\nthe calling thread was the same thread as the one believed to be the\r\nforeground thread at the time the object was instantiated. But,\r\nsometimes our understanding of the foreground thread changes (because\r\nxUnit changes the foreground thread during test runs or because\r\nForegroundThreadAffinitizedObject gets statically constructed from a\r\nbackground thread and we later determine that there's a more correct\r\n\"foreground thread\"), and we now allow calling threads to match the\r\nthread currently understood to be the foreground thread.\r\n\r\nThis change also records the StackTrace of every ForegroundThreadData\r\nconstructed for debugging purposes (so we can see when the\r\nForegroundThreadAffinitizedObject is statically constructed from a\r\nbackground thread).\r\n\r\n<details><summary>Escrow template coming</summary>\r\n\r\n**Customer scenario**\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n**Bugs this fixes:**\r\n\r\n(either VSO or GitHub links)\r\n\r\n**Workarounds, if any**\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n**Risk**\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n**Performance impact**\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n**Is this a regression from a previous update?**\r\n\r\n**Root cause analysis:**\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n**How was the bug found?**\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n</details>", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/19818", "title": "Disable CSharpEncapsulateField.EncapsulateThroughCommand", "body": "Until it can be investigated in\r\nhttps://github.com/dotnet/roslyn/issues/19816\r\n\r\nAsk Mode Template\r\n============\r\nTest Change Only", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/17513", "title": "[Testing] Enable the VB Change Signature Lightbulb test", "body": "", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/17461", "title": "[Ignore] Testing the tests", "body": "", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/7539", "title": "Fix NullRef in SemanticClassificationViewTaggerProvider", "body": "@balajikris @jasonmalinowski @rchande @KevinH-MS \n@dotnet/roslyn-ide \n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/9684620", "body": "287? :smile: \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/9684620/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/11504340", "body": "@jaredpar What?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/11504340/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14971067", "body": "VerifyTriangleInequality\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14971067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14971078", "body": "TestTriangleInequalityTop50\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14971078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14971113", "body": "Can you call this \"TestSpecificMetric\"\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14971113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14971160", "body": "And can you rename Top1000Test to TestTwoElementMetricPropertiesTop1000? :smiley_cat: \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14971160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "tmeschter": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/roslyn/commits/c273b6a9f19570a344c274ae89185b3a2b64d93d", "message": "Merge pull request #24015 from v-zbsail/loc_20180103\n\nLOC CHECKIN | dotnet/roslyn-master | 20180103"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/0923887afc2fb1858ad2e0742752f49d96714149", "message": "Merge pull request #23744 from tmeschter/Localization20171212\n\nLOC CHECKIN | dotnet/roslyn-master | 20171212"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/6caacb5f7a4bb0c0f822f1beb80c4dab9e885e0b", "message": "Update a unit test to reflect localized resources\n\nOne of the VB scripting tests changes the default culture to \"de-DE\" and\nlater prints out a string subject to localization. Now that we actually\nhave satellite assemblies with real translations where the runtime will\nfind them, we're getting the German version rather than the English\nversion.\n\nThe fix here is to simply update the baseline."}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/8cd9b47017219002cf05d798f3cd98b29b4f3ab6", "message": "Update .xlf files to include recent changes"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/949c9b4f4dbd4880884c64456db7955748645e1f", "message": "Merge pull request #23620 from tmeschter/MarkInternalToolSetNonShipping\n\nMark Toolset projects non-shipping"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24353", "title": "Add satellite assemblies to Microsoft.NETCore.Compilers", "body": "Add satellite assemblies for the Roslyn assemblies that we ship in\r\nMicrosoft.NETCore.Compiler.nupkg. This includes\r\nMicrosoft.CodeAnalysis.dll, Microsoft.CodeAnalysis.CSharp.dll,\r\nMicrosoft.CodeAnalysis.VisualBasic.dll, and\r\nMicrosoft.Build.Tasks.CodeAnalysis.dll.\r\n\r\nThis increases the resulting .nupkg size from about 8,988KB to about\r\n12,000KB.\r\n\r\n### Customer scenario\r\n\r\nThis allows consumers of the Microsoft.NETCore.Compilers package to see localized strings when using the tools it contains. However, the immediate motivation for this change is to make it much simpler for the CLI to find and include these localized resources.\r\n\r\n### Bugs this fixes\r\n\r\nN/A\r\n\r\n### Workarounds, if any\r\n\r\nCurrently the CLI has a complicated process for locating and pulling in these localized resources.\r\n\r\n### Risk\r\n\r\nLow.\r\n\r\n### Performance impact\r\n\r\nN/A\r\n\r\n### Is this a regression from a previous update?\r\n\r\nN/A\r\n\r\n### Root cause analysis\r\n\r\nN/A\r\n\r\n### How was the bug found?\r\n\r\nN/A\r\n\r\n### Test documentation updated?\r\n\r\nN/A\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24295", "title": "Add a Jenkins job to determine Loc status", "body": "This is an infrastructure-only change.\r\n\r\nAdd a Jenkin's job to check that all localizable resources in a branch have, in fact, been localized. If unlocalized resources are found the job will fail. Otherwise, it will succeed. This will allow us to use Jenkins to verify that we've taken care of all the translations prior to shipping out of a release branch.\r\n\r\nBy default it is turned off for PRs (since it will, by design, fail a lot), but I leave open the option of turning it on for PRs to release branches. This would prevent unlocalized resources from slipping in.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "v-zbsail": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/roslyn/commits/4993bfa2adba88e4eac71b3b03764ab5480f1b99", "message": "LOC CHECKIN | dotnet/roslyn-master | 20180103"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/0ee58d116245017e3c782f17b07ec2d2a76f9392", "message": "LOC CHECKIN | dotnet/roslyn-master | 20171212"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24205", "title": "LOC CHECKIN | roslyn - master | 20180112", "body": null, "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "v-mdriml": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/roslyn/commits/257e34046d6f59a48ff737f2f9a3a752132bcdc5", "message": "LOC CHECKIN | dotnet/roslyn \u2013 master | 20171222"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jinujoe": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/roslyn/commits/a9a2edb28acb090f095d84b68b017f9eb4bb0462", "message": "Removing the rename command as it will be part of core editor platform"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "schovanec": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/roslyn/commits/aab0c81a1f95d4ea4f291de30bbc0b4c9e27352d", "message": "Add negative test cases"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/aa98f1a5ad6dbad56237d0c7d108d29b4f4a8840", "message": "Recognize condition with logical negation"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/250d883c10e10bbbef6a5017a60ef68123b6a74c", "message": "Refactor so that GetSymbolInfo can be called last"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/4bd68ef0e191af4ff31c08ffa8ddcaa7bd266c3e", "message": "Change the code fix to find the expression so that we don't need to unwrap the argument"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/2442bf3ec9f06ef840e76502e40a96c825b983e5", "message": "Add check for null argument syntax"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/28ea97a08bc90e37401079d83b9a6e90c2977c74", "message": "Fix argument names"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/e6726d3c1e45c67a3abb34a317a8930bb7783656", "message": "Formatting adjustments"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/72fc237f75d51b871ed3ed99ef3d8a3aa4941a73", "message": "Add VB tests for omitted arguments"}, {"url": "https://api.github.com/repos/dotnet/roslyn/commits/6eb2182e092cc8cc585332ba5803f9b57fcb8a57", "message": "Add WorkItem attributes"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AlexEyler": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24378", "title": "Remove ExtensionInstallation* properties from VisualStudioSetup.Dependencies project", "body": "These properties are used at build time to generate a catalog file that\r\ntells the setup engine to install the extension to a specified location.\r\nHowever, this extension is a per-user extension so the catalog file is\r\nignored. Additionally, it appears this extension is only used during F5\r\nanyway, so the VSSDK would ignore the properties in the catalog there\r\ntoo.\r\n\r\nThe reason this fix is needed is that in future versions of the VSSDK,\r\nbuilding a per-user extension with an ExtensionInstallationRoot of\r\nCommonExtensions will cause an error (in order to reduce confusion at\r\ninstall time and to protect ourselves in case the SetupEngine begins to\r\ninstall per-user extensions).\r\n\r\n<details><summary>Ask Mode template</summary>\r\n\r\n\r\nIs ask mode required for master? I'm not sure. In any case, here it is:\r\n\r\n### Customer scenario\r\n\r\nThis doesn't affect customers other than developers building roslyn. It's to prevent a future issue if roslyn were to adopt the latest versions of the VSSDK.\r\n\r\n### Bugs this fixes\r\n\r\nI didn't create an issue to track this but I can if you'd like.\r\n\r\n### Workarounds, if any\r\n\r\nNo workarounds at build time other than removing those properties.\r\n\r\n### Risk\r\n\r\nLow risk if the assumptions are correct about this only be used for F5. If this is used for dogfooding/installation, then there's a bit more of a risk - if vsixinstaller is invoked with `/a`, this would be break that installation in that the extension would install to a random folder in Extensions other than CommonExtensions. In that case, though, the fix should be to mark this extension as a per-machine extension in the vsixmanifest.\r\n\r\n### Performance impact\r\n\r\nNone.\r\n\r\n### Is this a regression from a previous update?\r\n\r\nNo.\r\n\r\n### Root cause analysis\r\n\r\nNot sure how this project was created in the first place, need confirmation from Tomas.\r\n\r\n### How was the bug found?\r\n\r\nI found the build issue when testing building Roslyn against the changes I made in the VSSDK (slated for 15.8 but we might release the packages under preview to get some testing).\r\n\r\n### Test documentation updated?\r\n\r\n</details>\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dotnet-bot": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24374", "title": "Merge dev15.7.x to features/compiler", "body": "\nThis is an automatically generated pull request from dev15.7.x into features/compiler.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev15.7.x-to-features/compiler-20180122-080036\ngit reset --hard upstream/features/compiler\ngit merge upstream/dev15.7.x\n# Fix merge conflicts\ngit commit\ngit push merges/dev15.7.x-to-features/compiler-20180122-080036 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24373", "title": "Merge master to master-vs-deps", "body": "\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps-20180122-080034\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-master-vs-deps-20180122-080034 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24372", "title": "Merge dev15.7.x to dev15.7.x-vs-deps", "body": "\nThis is an automatically generated pull request from dev15.7.x into dev15.7.x-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev15.7.x-to-dev15.7.x-vs-deps-20180122-080032\ngit reset --hard upstream/dev15.7.x-vs-deps\ngit merge upstream/dev15.7.x\n# Fix merge conflicts\ngit commit\ngit push merges/dev15.7.x-to-dev15.7.x-vs-deps-20180122-080032 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "eatdrinksleepcode": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24364", "title": "Update docs and add logging for x-plat contributors", "body": "The `build.sh` script was added in November and is a much easier starting point for new contributors than the various commands previously recommended by the docs.\r\n\r\nA bit of additional logging was also added to `obtain_dotnet.sh`, to help new contributors understand how the build is interacting with any existing dotnet installations (and particularly to help allay fears about the error message generated by `dotnet version` as part of that script, when the system installation does not include the required version).", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "genlu": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24163", "title": "Add Xunit adapter to enable testing in VS", "body": "", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/15000729", "body": "@JohnHamby This is largely an experiment of mine, having a single array initlizer type feels more natural to me, as a bonus we now can use existing bound node (`BoundArrayInitialization` in both CS and VB ) for it to simplify the logic. The best part is it seems works OK :)\nJust curious, what's the reason for having `IExpressionArrayInitializer` and `IDimensionArrayInitializer`? Did I missed something important here? \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15000729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15036102", "body": "@JohnHamby I'm not sure. On one hand, `BoundArrayInitialization` is a subtype of `BoundExpression`, therefore has everything an expression has in bound tree, but on the other hand, something like `{1,2,3}` can't be used as an expression in source unless it's in a array creation expression (at least this is the case in C#).\n\nFor example, this is invalid\n\n``` cs\nvoid SomeMethod(int[] array) {}\nSomeMethod({1,2,3});\n```\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15036102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15036473", "body": "@JohnHamby The way C#/VB bound tree structured for variable declaration makes it impossible to associate `IVariable` to any bound node, so I created this. The problem isthis causes an extra object allocation for each variable declaration per query (through `IVariableDeclarationStatement.Variables` property). Should I save the list of IVariable to a field instead of always compute on the fly?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15036473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15036669", "body": "So basically `BoundLocalDeclaration` and `BoundAsNewLocalDeclarations` don't bind to any statement, they are corresponding to the declarators in Dim-statements.\n\nFor example, a Dim-statement might have a list of both:\n\n``` cs\nb1 As Integer, b2, b3, b4 As New Foo\n```\n\nIn this case, this Dim-statement has 2 local declarations \n- The first is a `BoundLocalDeclaration` (`b1 As Integer`)\n- The second is a `BoundAsNewLocalDeclarations` (b2, b3, b4 As New Foo), which in turn has 3 `BoundLocalDeclaration`\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15036669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15051354", "body": "Yes, that's one of the reasons, another one is we can't have a node is an `IVariable` and `IVariableDeclarationStatement` at the same time if we want to make `IVariable` an `IOperation`.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15051354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15051373", "body": "Thanks! I will take a look at CWT and fix this :)\n\nEdit: Fixed in next commit.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15051373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15051408", "body": "@JohnHamby I don't quite understand what do you mean by \"unless the return value is an immutable array\". Could you please elaborate a little? Thanks!\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15051408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "sievajetnamdar": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/24020", "title": "Correct naming when 'Introduce Variable' is applied on an InvocationExpression in a ForEachStatement", "body": "<details><summary>Correct naming when 'Introduce Variable' codefix is applied on a InvocationExpression in a ForEachStatement</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nCreate a ForEachStatement and iterate over an InvocationExpression like:\r\n\r\n        foreach (var num in GetNumbers())\r\n        {\r\n        }\r\n\r\n### Bugs this fixes\r\n\r\nhttps://github.com/dotnet/roslyn/issues/56\r\n\r\nAter codefix is applied, code changes to:\r\n\r\n        var getNumbers = GetNumbers()\r\n        foreach (var num in getNumbers)\r\n        {\r\n        }\r\n\r\n### Performance impact\r\n\r\nSpecific check whether an invocationexpression has a foreach statement as parent. Complexity for this fix is low.\r\n\r\n### Root cause analysis\r\n\r\nThis is a specific case thats uncommon. \r\nAdded one unit-test for C# and VB.\r\n\r\n### How was the bug found?\r\n\r\n@rchande opened this issue.\r\n\r\n</details>\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "shaggygi": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23989", "title": "Updated summaries", "body": "<details><summary>Updated wording in summaries.</summary>\r\n</details>\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kzu": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23980", "title": "Remove workaround that's already included in MSBuild 15.5", "body": "See https://github.com/Microsoft/msbuild/commit/052ad30f8f706a87e9fa9431fda1ec9c0b73893b\r\n\r\nI suppose this would need to wait until all CI systems use 15.5+ though? But since it's already RTM, maybe all checks will pass? We'll see ;)", "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23977", "title": "Properly set DevEnvDir under VS2017/MSBuild 15+", "body": "In MSBuild 15+, the environment variable for VS doesn't exist anymore, and instead \r\nit can be determined by inspecting `$(VsInstallRoot)`.\r\n\r\n### Risk\r\n\r\nI think this is zero risk :)\r\n\r\n### How was the bug found?\r\n\r\nJust exploring the targets to learn how the Roslyn team does builds and project configurations\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "srivatsn": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23920", "title": "Fix a crash for a codeaction with overridden PostProcessAsync in the PreviewChanges dialog", "body": "PreviewCodeAction was overriding ComputeOperations but returning a post-processed operation from the original action. This results in another PostProcess being called on the codeaction. If postprocess was overriden in originalaction that'll be ignored the second time\r\n\r\n### Customer scenario\r\nBring up the a lightbulb for a codeaction that has the postprocess method overridden. Click on the Preview Changes button to bring up the preview dialog and then apply the codeaction. This can lead to the codeaction crashing and being disabled.\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70378144", "body": "We've made a change to the codefix engine such that if there are nodes with elastic trivia we automatically add the formatter annotation. This is because most often people are generating new nodes in codefixes through `SyntaxFactory` or `SyntaxGenerator` which have elastic trivia and most often they would want those nodes formatted.\n\nIn your cases I assume you are generating the tokens for the parentheses and so I would expect formatter annotation around the parentheses but (without looking at the code) i wouldn't expect the code inside the parentheses to get formatted as well. @mattwar, are we putting formatter annotation on the entire expression here?\n\nYou can remove the elastic trivia from your generated nodes and then you shouldn't see the formatting behavior. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70378144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/15234449", "body": "Tagging @mavasani\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15234449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24382899", "body": "Can you add the id of the bug tracking the reenabling of these tests?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24382899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24384180", "body": "Ah yes. Fixed them. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24384180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24445686", "body": "Instead of  this method, can you not simply update your SymbolDisplayFormat to set [IncludeType](http://source.roslyn.io/#Microsoft.CodeAnalysis/SymbolDisplay/SymbolDisplayMemberOptions.cs,0fc0013d966050fc) ?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24445686/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24445745", "body": "Not that I know of.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24445745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24446605", "body": "I see. Ok.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24446605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24467273", "body": "No I've deleted this on my machine. That'll be part of the next change.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24467273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24467667", "body": "Yes I'll collect a list of these as I make move more of this stuff around.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24467667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24604264", "body": "Both the implementations simply return true - is there a need for this property?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24604264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24605559", "body": "I see. ok. Please add a comment about this as well.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24605559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24605641", "body": "Don't we want to remove the `annotation` in this code path? \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24605641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24606497", "body": "Ignore that, I see that because of the while(true) eventually it will get removed.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24606497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24607081", "body": "Can you please add a bunch of comments here as to why we need the parent fixups.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24607081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24629510", "body": "I've added the projects to Roslyn2013.sln since they don't depend on anything in 2015.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24629510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24768449", "body": "I think there are a lot more ExcludeFromStyleCop directives in a bunch of other project files. Can you clean those up too?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24768449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24769124", "body": "Ah, looks like you removed them from csprojs when you did the pass to apply the style conventions. Workspaces.csproj some for example has some that were removed.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24769124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24786088", "body": "Why is this being removed? I think the public api analyzer won't run if this file isn't present in this project.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24786088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24788937", "body": "Can you add a better doc comment? Maybe similar to the one in the Create method\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24788937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24789067", "body": "Is there some problem with whitespace here?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24789067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24789127", "body": "The formatting is making the diff hard to understand - is there any change in this file at all?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24789127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24790261", "body": "Did you have any changes? It looks like some methods are being moved\\deleted as well (hard to tell since the diff is messed up). Can you fix up this file so that the changes are obvious?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24790261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24919428", "body": "rename field\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24919428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24919451", "body": "rename\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24919451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24919481", "body": "rename local - here and everywhere below where the type is being renamed,\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24919481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24919700", "body": "typo in solution\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24919700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24920933", "body": "Rename the file? All the WorkCoordinator.\\* files?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24920933/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24921896", "body": "Can you please add the case of adding more work once the queue is empty again so that we can see start stop start stop? \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24921896/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/25116178", "body": "Can you remove the < param > nodes if there is nothing interesting to say about them?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/25116178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/25116949", "body": "If there are no param tags at all then VS won\u2019t produce the error. It\u2019s only when some of the params have tags that happens.\n\nFrom: JohnHamby [mailto:notifications@github.com]\nSent: Friday, February 20, 2015 5:23 PM\nTo: dotnet/roslyn\nCc: Srivatsn Narayanan\nSubject: Re: [roslyn] BaseDiagnosticIncrementalAnalyzer doc comments (#747)\n\nIn src/Features/Core/Diagnostics/BaseDiagnosticIncrementalAnalyzer.cshttps://github.com/dotnet/roslyn/pull/747#discussion_r25116906:\n\n> @@ -19,24 +19,145 @@ protected BaseDiagnosticIncrementalAnalyzer(Workspace workspace)\n> \n> ```\n>      }\n> \n> \n> \n>      #region IIncrementalAnalyzer\n> ```\n> - ```\n>      /// <summary>\n>   ```\n> - ```\n>      /// Analyze a single document such that local diagnostics for that document become available,\n>   ```\n> - ```\n>      /// prioritizing analyzing this document over analyzing the rest of the project.\n>   ```\n> - ```\n>      /// Calls <see cref=\"DiagnosticAnalyzerService.RaiseDiagnosticsUpdated(object, DiagnosticsUpdatedArgs)\"/> for each\n>   ```\n> - ```\n>      /// unique group of diagnostics, where a group is identified by analysis classification (syntax/semantics), document, and analyzer.\n>   ```\n> - ```\n>      /// </summary>\n>   ```\n> - ```\n>      /// <param name=\"document\"></param>\n>   ```\n\nVS produces a warning, which turns into an error, if a parameter does not have a corresponding element.\n\nI'll try to put some meaningful text in all the elements now--I wanted to draw attention to the points where my inferences might have been incorrect.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dotnet/roslyn/pull/747/files#r25116906.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/25116949/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/25210059", "body": "Wouldn't @JohnHamby's suggestion of running the CompilationStart actions inside the Driver be better?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/25210059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/25272908", "body": "named properties for the various nulls would be nice.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/25272908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/25309469", "body": "Even if round tripping wasn't in the picture, and I simply created such a diagnostic and inspect it's descriptor wouldn't it be good to have that be a TriggerDescriptor?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/25309469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/25310167", "body": "I don't understand this. Two questions:\n1. If this we weren't checking for File.Exists, then LoadCore would throw an exception - what are the semantics of throwing an exception in the assembly resolve event? How were we catching this exception and logging a warning before? \n2. It sounds like we return null instead of throwing an exception, the CLR continues its search for the fallback - why doesn't this happen in the IDE and happens only in the compiler? Have you found any clues to why this worked fine a period in between and suddenly seems to have regressed?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/25310167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/25310554", "body": "Ah I see your point. Makes sense to me.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/25310554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/25311474", "body": "Since this is a user-facing error message, talking about the descriptor sounds weird. Can we just say \"An error was encountered while producing a diagnostic with Id {0} - {1}\"?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/25311474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/25312144", "body": "+1\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/25312144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/25365446", "body": "Spoke with Manish offline. For 1, we should ping the CLR folks to make sure this was an intended change because this will break a lot of code in the wild and needs to be done intentionally. \nFor 2, It's bizarre that Codebase is set in VS but not in the commandline. Manish is going to investigate a bit more to see why that's happening and if setting that to null would break pdb resolution for example.\n\nThis change is very simple and correct and so let's merge this change and then follow up on 1 and 2.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/25365446/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/25446813", "body": "If WithAccessor is called with a set accessor on a reaonly property, should the readonly modifier be removed from the property or should the caller make sure to do that? \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/25446813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/25527976", "body": "Few things:\n- I think we are all vehemently agreeing with each other over and over that no exceptions from extensions should bring down any product code (VS or command line compilers).\n- When we say exceptions can escape to the \"compiler\" I assume csc.exe is being meant. The code being discussed is in unit tests which don't launch csc.exe. The commandline compilers' entry points catch all exceptions and csc itself doesn't need to be hardened any further.\n- Having said, I agree with Jared that the rethrow flag means that some future refactoring could inadvertently set it to true casing bad things to happen (even though it's called testonly). Since we already have an Action<>, can the tests not simply pass in a handler that calls `Environment.FailFast` and cause the crash to happen (or rethrow in the Action if it wants)?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/25527976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/25528226", "body": "Also the rethrow seems to be only in the IDE code and not even in the compiler. Regardless, I think passing in Action with a failfast is probably best.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/25528226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/25528608", "body": "Even compiler as an API isn't easily defined. Here is our current layering:\n-  `Compilation` and friends (what some think of the core compiler API).\n-  `AnalyzerDriver` and friends (purely on top of the core compiler API and so by definition any exceptions here cannot bring down the Compilation APIs).\n- `CommandLineCompiler` which calls into Compilation and AnalyzerDriver and therefore can potentially be affected by exceptions from analyzers but that's the piece that has the big catch all. \n\nThe unit tests are directly calling AnalyzerDriver to execute analyzers and that's the code being discussed.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/25528608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/25549054", "body": "typo - analyzerDriver\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/25549054/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/25549288", "body": "Agreed.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/25549288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/25549375", "body": "You can just click on the expander to left of the greyed out line to see a little bit more context.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/25549375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/25831625", "body": "Yes, from an user perspective, errors stop output from being produced and that should apply to analyzer errors as well.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/25831625/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/25890193", "body": "Would changing the order of these actions interfere with telemetry that we've already collected? If so, we should probably just put the new actions at the end. @heejaechang would know. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/25890193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/25890436", "body": "How come you always run into this - especially in this file? :)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/25890436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/25899742", "body": "Is that true? This method filters to the tree but the diagnostics passed in - wouldn't they have all the diagnostics reported by the syntax\\symbol analyzers in other documents as well? AnalyzeDocument above would only return local diagnostics but AnalyzeProject should return the non-local ones as well isn't it? Or are the diagnostics passed in here filtered elsewhere?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/25899742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/25916351", "body": "Maybe add a comment about the reasons for message=null and the notconfigurable tag?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/25916351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/26345980", "body": "On the LCID thing - will the CLR assembly resolution for normal contexts pick up a Japanese resource if it was in the 1041 directory for example? If so, yes we should look for the LCID directory - otherwise I don't think there'll be a scenario where the user will expect it.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/26345980/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/26406848", "body": "It would be nice to keep the descriptor here so that both of the descriptors are together instead of being spread across three files. Instead of the abstract GetClassificationIdDescriptor, you could simply have an abstract GetMessage(). That way if we make changes to the descriptor we can make it in one place.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/26406848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/26439145", "body": "Shouldn't we search through all tags for the well known tags instead of just the first one? What if the order changes for EnC for example?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/26439145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/26439153", "body": "Why <=? If we just have one tag and that's the one we are interested in, we will return null here.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/26439153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/26450120", "body": "Probably want to say compiler and analyzer diagnostics.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/26450120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/26450148", "body": "I don't understand this, we don't need this try\\catch anymore?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/26450148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/26451118", "body": "It's a little odd that TryGet will return true even when there is no logger. Maybe the check for errorlogpath should probably be split out from this method?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/26451118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/26451155", "body": "Is this github or is there a real formatting issue here?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/26451155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/26451425", "body": "typo\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/26451425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/26451481", "body": "I would recommend moving the check to the callsite for readability. The callsite reads like the compiler just stops when there is no logger. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/26451481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/26716859", "body": "Ya that sounds like a good idea. I'll add it to the onenote.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/26716859/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/26768302", "body": "The change makes sense. However this means that there is no way to disable an analyzer that contains a notconfigurable trigger diagnostic. I think that is a problem but I can't think of any good solutions to it. We probably need to think about that scenario some more.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/26768302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/26770769", "body": "Right, this change is correct. What I mean was your second statement and I think that's a problem especially for trigger-like scenarios.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/26770769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/26811098", "body": "Why is not suppressed? If it is not configurable then it should not be configurable by any means - so something that's off by default and not configurable should never be able to be turned on. That's not entirely useful but that's consistent and keeps the meaning of the tag simple.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/26811098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/27182008", "body": "I don't understand this - why are we not registering the CompilationAction?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/27182008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/27234135", "body": "Maybe add a comment here explaining that we think that diagnostics without locations are the only ones that are not produced by the compiler's live analysis.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/27234135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/27235411", "body": "Can you please add comments here about the heuristics? \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/27235411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/27677776", "body": "Another option is to remove the warning but log the names of all the recognized analyzer types by assembly in the error log. That was a request for compliance anyway. It might make the error log too big. Another option is to log the typees on the command line itself under a verbose flag\n\nSent from my Windows Phone\n\n---\n\nFrom: Manish Vasanimailto:notifications@github.com\nSent: \u00fd4/\u00fd2/\u00fd2015 10:18 AM\nTo: dotnet/roslynmailto:roslyn@noreply.github.com\nCc: Srivatsn Narayananmailto:srivatsn@microsoft.com\nSubject: Re: [roslyn] Don't error when an assembly has no analyzers (#1755)\n\nIn src/Compilers/Core/Desktop/AnalyzerFileReference.cshttps://github.com/dotnet/roslyn/pull/1755#discussion_r27677412:\n\n> @@ -208,13 +213,12 @@ internal void AddAnalyzers(ImmutableArray<DiagnosticAnalyzer>.Builder builder, s\n>                  // If there are no analyzers, don't load the assembly at all.\n>                  if (!analyzerTypeNameMap.ContainsKey(language))\n>                  {\n> -                    this.AnalyzerLoadFailed?.Invoke(this, new AnalyzerLoadFailureEventArgs(AnalyzerLoadFailureEventArgs.FailureErrorCode.NoAnalyzers, null, null));\n\nI actually think it at least deserves to be a Warning. Skipping running analyzers when provided with a true analyzer assembly with analyzers, is a bad false positive about the project being clean against analyzers. Keeping it as info is likely going to cause it to never show up on the console output for command line builds, and not show in the output window by default.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dotnet/roslyn/pull/1755/files#r27677412.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/27677776/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/27844372", "body": "I don't understand this - why are we passing null here and not originalFilePath?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/27844372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/27844496", "body": "As it stands, if we don't fix the setter, it would get squiggled and the user would get a fix to fix up the accessibility but I agree we should just that do that in one fix. I'll fix that.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/27844496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/27851887", "body": "Not sure. I actually like the overloaded operators\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/27851887/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/27851893", "body": "Fixed\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/27851893/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/27851915", "body": "The default formatting rules for C# puts a blank line between accessors. When we change the accessor, it ends up formatting that line. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/27851915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/27921591", "body": "Agreed. Would we want to distinguish between live and build here or should it simply be \"VB Compiler\"\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/27921591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/27925451", "body": "Good point. Today I believe it's just Microsoft.CodeAnalysis.VisualBasic but we should change that to \"VB Compiler\" as well\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/27925451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/27930087", "body": "There's not much interesting work happening here to check for cancellation.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/27930087/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/27930239", "body": "It should also be CA1813. I'll move CA1813 in my next PR (which is moving one more rule).\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/27930239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/28084986", "body": "IsKind does a null check - it's an extension method.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/28084986/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/28085819", "body": "The base type is in the language agnostic layer - ArgumentSyntax doesn't exist there. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/28085819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/28162733", "body": "Maybe but I think that currently falls in the 20% bucket were you are expected to dive in to the language specific parts.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/28162733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/28162864", "body": "Yes that was an oversight. Fixed it.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/28162864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/28164101", "body": "Yes, added a check.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/28164101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/28164468", "body": "The codeaction.create method needs a Task<Document> to force people to think about delaying their work on invoke as opposed to doing all the work beforehand and return. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/28164468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/28167038", "body": "It should be IntelliSense\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/28167038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/28167119", "body": "Should these strings be localized? The word Build I mean.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/28167119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/28732415", "body": "Hmm ya.. I hadn't created a VSIX project for System.Runtime.Analyzers either. I'll add them both in a later checkin.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/28732415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/29607390", "body": "Interesting that we had explicitly blocked this scenario - do you know if there was some good reason for it?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/29607390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/29642948", "body": "Makes sense. I don't have a strong opinion either way but for consistency sake offering GFU here might be fine.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/29642948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/29910655", "body": "Do we really need these Abstract types (this and the SyntaxNode one)? I don't think they add much value - they reduce a couple of lines of typing but I think they just add complexity to the analyzer in that it's all not in one place. Seeing the Initialize method, in my opinion, is a much clearer way of understanding what the analyzer is doing.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/29910655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/30097465", "body": "I have no good answer here. We've gone back and forth on this many times. I do agree that using {0} as the message is a big hack. FxCop used to have a rule remapping table for backcompat purposes. If we had such a table, we could have unique ids and offer codefixes to change the suppressions to the remapped rule. If we are choosing 'a', 'b', 'c' I would rather just give them new numbers CA10xx ca10xx+1 ca10xx+2. We could try that and see if people are complaining about broken suppressions and then build a remapping fixer if necessary\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/30097465/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/30098547", "body": "Can you please add comments explaining what's happening here? Why are we looking at the symbol's parameters? Do we need to look at return types? \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/30098547/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/30098571", "body": "Refactor code below into a method and just pass in originalSymbol?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/30098571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/30377522", "body": "Looks good.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/30377522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/31263230", "body": "Can we simplify this and remove all the places where we are plumbing the userID through. We should make minimally necessary changes. We can always add the plumbing for userid later.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/31263230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/31773913", "body": "We should promote short errorcodes otherwise the error list's errorcode column starts looking ugly. I suggest CSS001\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/31773913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/31774072", "body": "Expression bodied member?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/31774072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/31774175", "body": "Having this be a lambda instead of a method in a separate class is less cognitive load. Given we are not capturing anything here, I think that would make it easier to understand the registration since you can see the nesting.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/31774175/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/31775015", "body": "Actually we will be captured unusedparameters as locals but I think that's a more intuitive pattern.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/31775015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/31775172", "body": "Add a comment here explaining what this analyzer is doing?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/31775172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/31775403", "body": "If you convert the registration to be lambda based, this would become a static method on the outer class\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/31775403/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/32182777", "body": "We already have a src/Samples directory - should we just move the samples there so that there's one place for people to find the samples?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/32182777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/32183249", "body": "I still think this is more complicated than having the state just be locals that are closed over by a lambda for the AnalyzeSyntaxNode call. Given this is almost a stylistic preference, can we demonstrate both ways to do it - maybe this analyzer can have locals and lambdas and the CompilationStarted ones can create a real type to hold the data?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/32183249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/32183358", "body": "Or the other way since for the CompilationStarted one, we are creating a type to hold one field - that would be a lot simpler with just a local for the interface type.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/32183358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/32233436", "body": "Agree with the second statement - lambdas are going to make it confusing once the analyzer is big. However for the simple ones, especially the very common case of getting a well known symbol on compilation start (or the interface type in your example) it is, in my opinion, very appropriate. I don't think there's much value in protecting people from language features but that devolves into a style discussion. I think we should demonstrate the pattern of using locals for wellknown symbol in compilationstart - most people wouldn't think of that as state and so your goal of being explicit about state would still be met.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/32233436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/32236434", "body": "No you can do this:\n\n``` csharp\n             context.RegisterCompilationStartAction(compilationContext =>\n            {\n                // We only care about compilations where interface type \"DontInheritInterfaceTypeName\" is available.\n                var interfaceType =      compilationContext.Compilation.GetTypeByMetadataName(DontInheritInterfaceTypeName);\n                if (interfaceType == null)\n                {\n                    return;\n                }\n\n                // Register an action that accesses the immutable state and reports diagnostics.\n                compilationContext.RegisterSymbolAction(sc => { AnalyzeSymbol(sc, interfaceType); } SymbolKind.NamedType);\n            });\n```\n\nwhere AnalyzeSymbol is a static method. Most of our FxCop analyzers use this pattern.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/32236434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/32266408", "body": "Doing 1 is sufficient I think. Having one sln is better than many and the inconsistenly is in a small detail.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/32266408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/32565490", "body": "ThrowIfCancellationRequested is fine - the engine catches OperationCanceledExceptions with this cancellation token and handles them properly.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/32565490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/32566254", "body": "It might be simpler and less error prone to use DocumentEditor here. Something like:\n\n``` csharp\nvar editor = await DocumentEditor.CreateAsync(document);\neditor.SetModifiers(classDeclaration, editor.GetModifiers(classDeclaration) - DeclarationModifiers.Sealed + DeclarationModifiers.Static);\nreturn editor.GetChangedDocument();\n```\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/32566254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/32566518", "body": "here you'd do `editor.RemoveNode(defaultConstructor)`\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/32566518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/32566753", "body": "Can ParameterList be null?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/32566753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/32568089", "body": "A doc comment here explaining the purpose of the rule and a remark about the merging of CA1052 and CA1053 would be good.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/32568089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/32568322", "body": "Can you please create an issue for this so that we don't lose track (and reference the issue in code here).\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/32568322/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/32842433", "body": "I think this needs to be AdditionalFiles (plural) since that's what's passed to the csc task. Btw I have never tried adding an additional file like this. Can you make sure to test that this works?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/32842433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/32844773", "body": "Just tried - it is plural. Also looked at the input to the csc task in the CSharp targets and we pass in @(AdditionalFiles) and there no singular AdditionalFile mentioned anywhere.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/32844773/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/32872352", "body": "typo: equivalence class _from_ the other \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/32872352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/32872448", "body": "Maybe write this as - `this` expression simplification: Reading the English word there is confusing\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/32872448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/32879077", "body": "You might want to talk about the spectrum of fixallproviders. Something like:\n\nWhen multiple fixes need to be applied to documents, there are various way to do it:\n- **Sequential approach**: One way to do it is to compute diagnostics, pick one, ask a fixer to produce a codeaction to fix that, apply it. Now for the resulting new compilation, recomputed diagnostics, pick the next one and repeat the process. This approach would be very slow but would lead to correct results (unless it doesn't converge where one fix introduces a diagnostic that was just fixed by a previous fix). We chose to not implement this approach.\n- **Batch fix approach** - Another way to do this to compute all the diagnostics, pick each diagnostic and give it to a fixer to and ask it apply it to produce a new solution. If there were 'n' diagnostics, there would be 'n' new solutions. Now just merge them all together in one go. This may produce incorrect results (when different fixes change the same region of code in different ways) but it is very fast. We have one implementation of this approach in `WellKnownFixAllProviders.BatchFixer`\n- **Custom approach** - Depending on the fix, there may be a custom solution to fix multiple issues. For example, consider an analyzer that simply needs to generate one file as the fix for any instance of the issue. Instead of generating the same file over and over using the previous two approaches, one could write a custom `FixAllProvider` that simply generates the file once if there were any diagnostics at all.\n\nSince there are various ways of fixing all issues, we've implemented a framework and provided the one general implementation that we think is useful in many cases.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/32879077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/36006360", "body": "Ya because ImmutableArray is a value type and can't ever be null\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/36006360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/36536836", "body": "You can simply check if namedTypeSymbol.SpecialType == SpecialType.System_String and don't need to store the symbol anywhere.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/36536836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/36537392", "body": "With this you are suppressing this check for all value types - so all structs as well. If you want to suppress just primitive types you'll have to check for that explicitly something like - http://source.roslyn.io/#System.Runtime.Analyzers/Reliability/DoNotLockOnObjectsWithWeakIdentity.cs,92432dae4f408c01\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/36537392/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/37567024", "body": "Should we use the documentationId instead of the displaystring since it's the documentationid that gets spit into the attribute to represent the targetsymbol?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/37567024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/37802868", "body": "Makes sense.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/37802868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/43058434", "body": "If only we invoked SymbolAnalyzers for LocalSymbols then this could be simpler..\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/43058434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/43058729", "body": "I know this is a temporary location for these analyzers but it'll be nice to keep it one analyzer per file to make it more readable.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/43058729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/44173327", "body": "If there was code like Foo(ref field1) would the assignment to field1 be covered by the AssignmentExpression?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/44173327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/44478195", "body": "Should this be in [PortableShim](http://source.roslyn.io/#Microsoft.CodeAnalysis.Workspaces/InternalUtilities/PortableShim.cs,cb6e25f2fad41144)? \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/44478195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/44729305", "body": "Do you also want to wrap analyzerFile in a using to make sure it's disposed?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/44729305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/45398238", "body": "Should this be awaited?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/45398238/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/48878568", "body": "Naming: RaiseDiagnostics instead of RaiseDiagnostic?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/48878568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/48878667", "body": "Typo - we know tasks will only run sequentially.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/48878667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/49804995", "body": "unused?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/49804995/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/49805492", "body": "Looks like this test trying to ensure that we only reported one diagnostic before but now we report 3? why is that?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/49805492/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/49805522", "body": "Can you add some unit tests for these cases? \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/49805522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/50734286", "body": "It's worth adding this to the comment.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/50734286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/51915672", "body": "Well it's a public api whose primary use is testing but we don't know how else it's being used. I don't think adding a new constructor here is painful enough to warrant a break.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/51915672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/51916044", "body": "+1 to calling it ContainingSymbol - that'll be consistent with `semanticModel.GetSymbol(node).Symbol.ContainingSymbol` which is how one would get at it today.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/51916044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/52498187", "body": "I suspect that the Solution explorer code looks for attributes derived from the DisplayNameAttribute and calls the DisplayName property on them.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/52498187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/52504584", "body": "Yes done.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/52504584/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/52516769", "body": "If I understand Gen correctly - if there's code like `Foo(regularParam, paramsParam1, paramsParam2)` the syntaxtree will only have one SyntaxList for all the arguments and so for this operation what would be the syntax to return - paramsParam1's syntax or a conjured up SyntaxList(paramsParam1, paramsParam2)? \n\nI don't know if we conjure up new syntax node anywhere for the operation trees - if we don't I wouldn't start doing that now. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/52516769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/52517025", "body": "You mean naming the F# dlls? Currently these are the names of the existing F# LS dlls. @otawfik-ms's  plan is to start adding code to those existing dlls and refactor later.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/52517025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/52517417", "body": "This method is only called by the SuggestActionProviders (through `codeFix.GetPrimaryDiagnosticData()`) and so TypeScript shouldn't be affected. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/52517417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/52517517", "body": "http://source.roslyn.io/#Microsoft.CodeAnalysis.Workspaces/Diagnostics/Extensions.cs,115196bb0cd32bb3,references\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/52517517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/52523724", "body": "Yes\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/52523724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/52526982", "body": "typo: the the (copy\\pasted below as well)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/52526982/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/52572759", "body": "Moved all the F# IVTs next to the TypeScript ones.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/52572759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/54033317", "body": "I agree that we should have this text somewhere other than just the description so that it's searchable by a search engine. We already use fwlinks when we have the precise link instead of depending on bing and so using fwlink makes sense. \n\nIf this is the description then this will only appear hidden under the chevron - correct? The error list is not going to be flooded with these messages but they are available if someone needs them? That might be fine.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/54033317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/55884760", "body": "Non blocking: Would be nice to do the same thing for VB as well (just below this line). If you won't have the time for it, please file an issue about it.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/55884760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/56101514", "body": "Don't remove the workitem attribute - it's good to have a historical link to the bug.\n\nIs wpffact not needed here?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/56101514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/60354931", "body": "I'm not a fan of exposing this type and having two ways to get diagnostics from CompilationWithAnalyzers - however i don't have any great suggestions either :(\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/60354931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/60355280", "body": "+1\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/60355280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/60940015", "body": "You should probably add a check for the key.Name as well in case we add some more keys to ServiceFeatureOnOffOptions in the future.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/60940015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/60983433", "body": "suppressParent causes the binaries to not get dropped in the output folder? If so, that's a horrible name.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/60983433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/64125272", "body": "Can you just use dynamic and not refer to ierrorlist2 at all?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/64125272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/64125300", "body": "This should now be deleted right?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/64125300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/64235927", "body": "Why? We don't want this anymore?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/64235927/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/64293626", "body": "We are using the word \"Suspend\" which gives the indication that it's temporary. Adding more wording will just complicate the message.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/64293626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/65421246", "body": "I like the approach as well. Instead of having the operation tree inline though, can we instead have a partial type with constants like `TestBug11947_OperationTree` and the tests just get an extra line `.VerifyOperationTree(TestBug11947_OperationTree)` so that it doesn't clutter the binding tests?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/65421246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/67039060", "body": "Didn't we decide to not touch the compiler but rename Info to Suggestion in the configuration UI?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/67039060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/67930602", "body": "Sounds ok to me. /cc @heejaechang \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/67930602/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/71559841", "body": "The solution creates the project guids and calls the project system to set it. We will just hold onto it in memory instead of setting it. The guid will still be persisted in the sln file. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/71559841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/72545295", "body": ">  It would be akin to us crashing on some thread and then asking the user \"running code asynchronously failed, do you want us to run it synchronously\". It's not something they have the context to make a decision on, nor can they understand the implication of their choice. \n\nUnless they went to task manager and killed the process (which atleast i do a lot).  We don't have to show the UI to the user but crashing VS in this case seems bad to me. We could atleast catch and swallow this exception. HeeJae tells me that we can distinguish between the process going down because of an exception thrown in that process versus it disappearing without reason (most likely user killed it). \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/72545295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/72551293", "body": "In this case the other process is just computing diagnostics and I believe the user impact will just be lack of diagnostics or stale diagnostics and not anything that causes data loss or corruption to the user's session. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/72551293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/75416280", "body": "Rename to _singleElementChecksumObject?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/75416280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/85134781", "body": "What does CPS pass in when the path is unrooted? Is it something like bin\\debug? If so, should we make the path be `Path.Combine(Path.GetDirectoryName(projectFilePath), binOutputPath)'? \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/85134781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/85135181", "body": "Is null okay? I thought we blow up when the path is null - or is that only if it was empty?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/85135181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/99702062", "body": "I think 'Base' refers to that property being the base for all the configurations of that *project*. If you want it to be the Base of the solution, then you can change BaseIntermediatePath to `$(BaseIntermediatePath)$(MSBuildProjectName)` which is what we do in the project system repo for eg.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/99702062/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/101619203", "body": "To be clear, I prefer 2 as in `ShowInfoBarAndDisableAllFeatures`. I agree with Cyrus - we'll be in a more broken state if we continue running these features and some features won't even work properly. It's better to state that upfront.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/101619203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/108776412", "body": "Yes you need these if someone's installing the package to a packages.config-based project which is still the majority of projects out there.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/108776412/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/112789655", "body": "Add tests for the CpsDiagnosticItem*?", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/112789655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/115847374", "body": "Test for this?", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/115847374/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/118103957", "body": "Add some tests?", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/118103957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/124140158", "body": "Ya there's a CPS issue that single file generators doesn't run in all the cases that the old PS did. ", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/124140158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/124644738", "body": "Ya ProjectTypeGuids are only used by the old PS. Not needed anymore.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/124644738/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/124650401", "body": "There are more properties that can go away either because they are defaulted or not used anymore. We can also convert to file globs and get rid of the individual file includes - (it is a big time saver for merges\\switching branches). That should be a separate PR though. I'll volunteer to do that (will be good testing for my [tool](https://github.com/srivatsn/ProjectSimplifier)) as long as you don't object to globs.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/124650401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/124725619", "body": "You should remove this - this will mean that the dependencies node in solution explorer won't function. ", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/124725619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/125124079", "body": "It's UnitTestContainer", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/125124079/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/125131018", "body": "File the bug in https://github.com/microsoft/vstest", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/125131018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/125798585", "body": "By default the SDK adds a None item for any file in the project directory that's not a source file or a resx. This means that any other files in the tree will start showing up in solution explorer. It's not an useful feature in the SDK and one that sometimes causes unexpected behaviors. This property simply turns off that behavior - so only Compile and EmbeddedResource items are automatically added,", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/125798585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/125798670", "body": "Yes it's unnecessary. The guid is stored in the sln file anyway and the project will have it in memory. There's no need to store it here. P2P refs to legacy don't need it either.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/125798670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/125798785", "body": "This is new MSBuild syntax for adding metadata to an existing item. Since the default glob would have picked up this .cs file there will be a Compile item for this file already. So another Compile Include would mention this file twice. Instead, the Update syntax adds the metadata that's needed, by the resx designer in this case, to an existing msbuild item.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/125798785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/125798877", "body": "AssemblyName defaults to the name of the project which is csc in this case.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/125798877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/125798898", "body": "The SDK defaults Prefer32Bit to false.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/125798898/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/125799095", "body": "None globs are, in my opinion, a mistake we made in the SDK. Changing it now is a breaking change - we've had some discussions about doing it in a non-breaking way but avoiding it here entirely.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/125799095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/125945289", "body": "Yes P2PRefs to and from legacy don't need it.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/125945289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/125946269", "body": "I don't see the default being set anywhere in the msbuild properties - are you saying that's the compiler's default? I don't know about that.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/125946269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/125947028", "body": "Nothing afaik - especially if it's empty. My tool didn't remove it because there's no default in the SDK for this property. ", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/125947028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/125947565", "body": "Fixed up in a later commit.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/125947565/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/125948476", "body": "NuGetTargetMoniker is basically the TFM except if the TFM is .NETCore 5.0 (the UWP\\PCL stuff). For a netstandard library NTM == TFM.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/125948476/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/125948870", "body": "Yep I opted out of globbing for this project and put it back as it was but I agree putting the compile items in a separate itemgroup is better. Will do that.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/125948870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/125950662", "body": "The way I did this is that I loaded up the project and evaluated all props\\items. Then cleared out the project except for the imports and then evaluated again and compared the diffs. So if there are any properties that are defaulted in the targets (either Roslyn's or the SDK or msbuild itself) then those were removed. Anything that's not defaulted but is semantically unnecessary, my tool doesn't know about those. Having said that, which properties do you think are unnecessary?", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/125950662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/125952274", "body": "It had metadata (SubType=Code) originally and so this preserves that - however I just looked at the source and it doesn't seem to have any components. So not sure this is needed.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/125952274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/125952579", "body": "There are 56 cs files that are used as test assets - so we'll remove 4 \"includes\" and add 56 \"removes\". Didn't seen worth it. If devs change this project, it's likely to add a test asset and globbing will just get in the way rather than being helpful.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/125952579/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/125953043", "body": "These are the content items that are vb files and hence have corresponding Compile removes. So I moved them to the same itemgroup to keep them together. Open to other organization suggestions.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/125953043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/125953426", "body": "Yep that would be nice - if it's .either EmgbeddedResource or Content, it probably should get automatic removes. I'll log a SDK bug.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/125953426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/125953807", "body": "Yes NTM == TFM for all projects except UWP\\PCL.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/125953807/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/125953936", "body": "@mgoertz-msft can you take a look at this file?", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/125953936/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/127004110", "body": "The property is set to this same value in the Settings.props of this repo - hence the tool removed it as unnecessary.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/127004110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/127300591", "body": "EnableDefaultNoneItems=false is a good thing and shouldn't be disabled. Basically the SDK picks up any file in a given directory and adds it as a None item. This causes some weird issues in the IDE like https://github.com/dotnet/sdk/issues/1157. Basically we shouldn't have done that in the SDK and we should set EnableNoneItems=false by default in the SDK if it wasn't a breaking change.\r\n\r\nThis change here of adding None globs for the files that we want to show explicitly is preferable.\r\n\r\nNote though that once we have WPF support, we would Page items so that line may become unnecessary.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/127300591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/136205460", "body": "This is for early experimentation and prototyping of some ideas. We need to figure out the right long term strategy if these ideas have legs.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/136205460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "onovotny": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23919", "title": "Omit Default modifier style & code fix", "body": "This a PR to implement https://github.com/dotnet/roslyn/issues/7066", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "gewarren": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23642", "title": "Update NamingStyle.cs", "body": "Corrected resource string for error message for CheckAllLower.\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DiablosOffens": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23619", "title": "Partially revert changes from 0f5b10ac92573603591f623a5e55f1f87fae70e5", "body": "Fixes #23617", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rik-smeets": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23589", "title": "Escape curly braces in string literals when converting concatenation to interpolated string", "body": "### Customer scenario\r\n\r\nCustomer has a string concatenation where the string literal contains curly braces. For example:\r\n```cs\r\nvar firstExample = \"Something {X} = \" + 9;\r\nvar secondExample = \"Something {\" + 9 + \"}\";\r\n```\r\n\r\nUsing the \"Convert to interpolated string\" refactoring does not escape the curly braces in the string literal(s). When applying the refactoring, this can lead to compile errors or unmeant escapes:\r\n\r\n```cs\r\n// results as of now:\r\nvar firstExample = $\"Something {X} = {9}\"; // compile error: {X} does not exist in context\r\nvar secondExample = $\"Something {{9}}\"; // '9' is escaped when it should not be\r\n```\r\n\r\n### Bugs this fixes\r\n#23536 \r\n\r\n### Workarounds, if any\r\nEscape the braces manually in the string literal(s) before or after applying the refactoring.\r\n\r\n### Risk\r\nThe scope of the fix is limited to this specific refactoring.\r\n\r\n### Performance impact\r\nLow, the fix only adds two extra string operations (which are only executed if necessary).\r\n\r\n### Is this a regression from a previous update?\r\nI don't know.\r\n\r\n### Root cause analysis\r\nThis specific situation was not covered by unit tests yet. I added these tests now.\r\n\r\n### How was the bug found?\r\nCustomer reported, see #23536.\r\n\r\n### Test documentation updated?\r\nNo impact on test documentation.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dabutvin": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23576", "title": "trim extra lines between copyright and namespace (#23568)", "body": "<details>\r\n\r\n### Customer scenario\r\n\r\nThis addresses the case where you remove unused usings and there are none left afterwards.\r\n\r\n### Bugs this fixes\r\n\r\nhttps://github.com/dotnet/roslyn/issues/23568\r\n\r\n### Root cause analysis\r\n\r\nadded `TestNoReferencesWithCopyright` to specifically check this scenario\r\n\r\n</details>\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pentp": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23544", "title": "Reduce async overhead in CodeAnalysis", "body": "This removes unnecessary async state machines from functions that forward to other async functions.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "filipw": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23214", "title": "fixed CA1044 in ConsoleIO", "body": "**Bugs this fixes:**\r\n\r\nFixes [CA1044: Properties should not be write only](https://docs.microsoft.com/en-gb/visualstudio/code-quality/ca1044-properties-should-not-be-write-only) violation in `ConsoleIO` in scripting code.\r\n\r\ncc @tmat \r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "maca88": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23165", "title": "Added an option for SyntaxRemoveOptions to preserve the EOL from the original node", "body": "Here is the implementation for [this feature request](https://github.com/dotnet/roslyn/issues/22924). The implementation adds a new option for `SyntaxRemoveOptions` in order to preserve the original EOL, proposed by @CyrusNajmabadi. I've added additional tests to test all six `AddEndOfLine` calls that occur when `KeepEndOfLine` option is used.\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sputier": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/23032", "title": "Fixes the issue #22955 related to attributes renaming.", "body": "Fixes #22955 \r\nAs stated in the issue comments, wiping out a call to GetFinalSymbolName at [InlineRenameSession.cs, line 378](https://github.com/dotnet/roslyn/blob/878ffad23b8b06cb229c9ab31eada7634a473508/src/EditorFeatures/Core/Implementation/InlineRename/InlineRenameSession.cs#L378) seems to solve the problem. \r\n\r\n## Suggested reviewer \r\n@sharwell ", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "06needhamt": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/22874", "title": "Improved error message for CS0191", "body": "Fixes #16982\r\n\r\nImproved Error Message", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/22871", "title": "Add code fix to add 'Shadows' modifier", "body": "Fixes #21946\r\n\r\nAdded Shadows QuickFix does, however, suffer from #21948\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "panopticoncentral": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/22711", "title": "Delay starting file watcher for metadata references in VS", "body": "**Customer scenario**\r\n\r\nWhen opening a solution in VS, Roslyn adds file watchers on assemblies referenced by the solution so it can update if any of them are changed. The issue is that the file watchers are started immediately, which causes unnecessary disk I/O during solution open because no one has actually looked at the references yet (and so changes don't make any difference). This can have an impact, especially on HDDs. Opening Roslyn on a HDD spends about 1% of the trace time setting up file watchers.\r\n\r\nThe fix is to not immediately start the file watcher but instead to wait until someone actually asks for the file (after which point they will start to care if it changes).\r\n\r\n**Bugs this fixes:**\r\n\r\nhttps://devdiv.visualstudio.com/DevDiv/_workitems/edit/501653\r\n\r\n**Workarounds, if any**\r\n\r\nNone.\r\n\r\n**Risk**\r\n\r\nRelatively low, we are just delaying starting a file watcher. It's possible this could cause something to get out of sync, but closing/reopening the project would fix it.\r\n\r\n**Performance impact**\r\n\r\nImproves performance, especially with solutions that have lots of references and are on HDDs.\r\n\r\n**Is this a regression from a previous update?**\r\n\r\nNo\r\n\r\n**How was the bug found?**\r\n\r\nTracing solution load.\r\n\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sys27": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/22350", "title": "Remove duplicate copies of test helper ToTestDisplayString extension method", "body": "**Bugs this fixes:**\r\n\r\n#11915\r\n\r\n**Risk**\r\n\r\nNo risks, just removed duplicates of code and added 'usings' to class with extension method.\r\n\r\n**Performance impact**\r\n\r\nNo performance impact. The logic of code is not changed.\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dezsiszabi": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/22154", "title": "21754: Removing trailing backslash from path passed to NuGet OutputDi\u2026", "body": "Fixes #21754", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "seesharper": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/22040", "title": "Added support for scripting environment #5979", "body": "**Scripting**\r\nWhen running scripts it would be very useful to get access to the path of the executed script.\r\n\r\nUsage (from within a script file)\r\n```\r\nvar pathToScript = ScriptEnv.FilePath;\r\n``` \r\n\r\nThe `CommandLineRunner` has been updated to pass the path of the script. \r\n\r\nThis also represents a unified way for other script runner to provide the path of the executed script.  \r\n\r\nOmniSharp.Script also provides metadata for `CommandScriptGlobals` so we get intellisense for this new property as well. \r\n\r\n**Bugs this fixes:**\r\nIf not fixes, let's say addresses :)\r\n\r\nhttps://github.com/dotnet/roslyn/issues/5979\r\n\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tcNickolas": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/21833", "title": "Add null checks for node and its parent in NewLineUserSettingFormattingRule.IsControlBlock", "body": "**Customer scenario**\r\n\r\nIf syntax tree has `NamespaceDeclaration` as a root node instead of `CompilationUnit`, `IsControlBlock` is called for `NamespaceDeclaration` node which has null `Parent`, and this code throws `NullReferenceException` at line 19. This is not a common scenario, as valid trees are supposed to have `CompilationUnit` as a root node, but it's better to have the checks in place.\r\n\r\n**Workarounds, if any**\r\n\r\nUse `CompilationUnit` as root node of the tree.\r\n\r\n**Risk**\r\n\r\nLow because these checks were present in the code before.\r\n\r\n**Performance impact**\r\n\r\nLow perf impact because the only extra work done is two null checks.\r\n\r\n**Is this a regression from a previous update?**\r\n\r\nYes, these checks were removed in 146b391d5b622df48da465ded66f2747375ab1b9.\r\n\r\n**How was the bug found?**\r\n\r\nCustomer reported\r\n\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DustinCampbell": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/21670", "title": "Move MSBuildWorkspace into separate project", "body": "Fixes #5557\r\nFixes #5668\r\nFixes #15102\r\n\r\nThere a few other things to do for MSBuildWorkspace:\r\n\r\n- [ ] Get general buy off on this source breaking change.\r\n- [ ] Add a Nuspec for the new Workspaces.MSBuild package.\r\n- [ ] Change API to account for the fact that a multi-TFM project will need to be loaded as multiple projects.\r\n- [ ] Add design-time batch build logic to improve performance.\r\n- [ ] Document how MSBuildWorkspace can be used by clients.", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/20554", "title": "New Quick Info API", "body": "This is a PR to create a new public Quick Info API (#11103)\r\n\r\n- [x] Move @mattwar's original PR (#13623) forward to the latest master bits and get it building.\r\n- [x] Get all tests passing and ensure Quick Info actually still works.\r\n- [x] Update with @CyrusNajmabadi's comments on the original PR (#13623).\r\n- [x] Close #13623.\r\n- [ ] Finalize public API surface area.\r\n\r\ncc @dotnet/roslyn-ide ", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70300130", "body": "With regard to keyword IntelliSense, we'd talked about doing that at one point if there was a request. (I'm guessing this is one!) The current recommendataion data API for the completion list was born out of a request from a browser-based host that was only showing completion on \".\". So, keywords were unnecessary for that case.\n\nAs @JoshVarty say, simply making every internal API public isn't going to work. Most of these aren't even reasonable APIs. Like @jmarolf, I'd rather see sensible requests for specific APIs so that we can track them in milestones and make progress toward getting the necessary APIs exposed. Sound good?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70300130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70314598", "body": "@nvivo, yes, this gets very hard on the IDE. You're right that you would get no IntelliSense initially for x and y unless we first bind all of the callsites to Add(). However, allowing type inference for method return types or fields gets even nastier. Essentially, any change in a method body can affect type-checking of the entire program, resulting in low performance for things like live error squiggles and quick fixes. We've looked at this in the past, and it's definitely **hard** (not necessarily impossible, but hard). F# makes the problem somewhat better by enforcing that declarations are only in scope after the declaration appears in source. But that isn't a restriction we could impose on C# at this point.\n\nMy 2 cents. :moneybag: \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70314598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70318247", "body": "We haven't abandoned scripting, but needed to stop working on it a couple of years ago to focus on finishing the compilers. Hopefully, we'll have some news to share soon.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70318247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70343785", "body": "Not a perfect solution, but remember that you can create aliases for closed generic type names when they get long:\n\n``` C#\nusing MyFunc = System.Func<Board, int, int, System.Generic.Collections.IEnumerable<Board>>; \n```\n\nThe later:\n\n``` C#\nMyFunc newBoard = (int rows, int cols, IEnumerable<Board> previousGames) => { \n   // calculate a game board\n   return new Board(data);\n};\n```\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70343785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70344046", "body": "Oh yes, @mattwar did change the API. It'll be way better than it was when it finally sees the light of day. :smiley: \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70344046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70344134", "body": "@mattwar, do you ever ramble? :smile:\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70344134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70655751", "body": "@mkrueger we totally get that. It's for that reason that the IDE doesn't use internals from the compilers and only relies on compiler public APIs. The problem is that the Workspaces layer actually grew out of the IDE. It even used to have a dependency on the Visual Studio editor. So, we naturally had plenty of internal code that, when separated into layers, turned into internal APIs. Taking the time to properly expose more APIs to get rid of some of the \"internals visible to ugliness\" is definitely a goal, but each requires design work to create a sensible API. So, if you have specific API requests, please create issues for them. That's extremely helpful for us to get the prioritization right.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70655751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70655830", "body": "Yes it should. :smile: \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70655830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70683024", "body": "@tenor, all of those are internal types in the compiler and aren't used by the IDE. It'd be great to understand what you're using them for in C# Pad to see if there's a need for a new public compiler API.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70683024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70843704", "body": "I remember now. We changed F2 to focus the dashboard to provide keyboard access to various checkboxes. Now that I try that experience, I think that might not be the right behavior. In order to keep users fluid productive, I think F2 should probably commit the active session and start a new one. @Pilchie, what do you think?\n\nIf we change this back, are users still able to use the options on the dashboard with the keyword? Using accelerator keys should still work, right?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70843704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70903596", "body": "What if we had a separate accelerator key that could provide focus without invoking a particular UI element. Is that possible?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70903596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/12357472", "body": "Even though this is the same as it was before, this list of commit characters feels incomplete. I haven't tried it, but I'm pretty sure it's not quite right. Consider the following case:\n\n``` C#\npublic class ABC\n{\n    public class DEF : ABC\n    {\n    }\n}\n\nABC abc = new |\n```\n\nIn the code above, ABC should be preselected. I expected it'd fail if the user tried to commit on '.' to get to DEF..\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12357472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12383620", "body": "LOL. Thanks for your timely review.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12383620/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12384803", "body": "Why thank you for fixing this embarassing typo. :smile:\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12384803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/13344671", "body": "FWIW, you shouldn't need to add the whitespace trivia. The formatter should add that.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/13344671/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/13647547", "body": "Could you describe the behavior of the change? I'd rather see that over that over sussing it out from reading the code.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/13647547/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/13647734", "body": "Sounds great!\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/13647734/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "aelij": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/21492", "title": "DesktopShim throws on .NET Core", "body": "On .NET Core this method throws a `NullReferenceException` since `Type` (and thus `s_fusionLog`) is null.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/10819", "title": "Fix a NullReferenceException in DocumentExtensions", "body": "I encountered this while using the `Classifier`. This happens if you specify a span outside the the document. I wasn't sure if it should return the entire document's semantic model or throw an `ArgumentOutOfRangeException`; I chose the former.\n\nStack trace:\n\n```\nat Microsoft.CodeAnalysis.CSharp.CSharpSyntaxFactsService.GetMemberBodySpanForSpeculativeBinding(SyntaxNode node)\nat async Microsoft.CodeAnalysis.Shared.Extensions.DocumentExtensions.GetSemanticModelForNodeAsync(ISemanticModelService semanticModelService, ISyntaxFactsService syntaxFactService, Document document, SyntaxNode node, TextSpan span, CancellationToken cancellationToken)\nat async Microsoft.CodeAnalysis.Shared.Extensions.DocumentExtensions.GetSemanticModelForSpanAsync(?)\nat async Microsoft.CodeAnalysis.Classification.Classifier.GetClassifiedSpansAsync(?)\n```\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "brettfo": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/21221", "title": "update merge tool script to match what's actually running", "body": "The Azure Function performing the auto-branch merges has gotten out of sync with the copy here, so this is simply a copy/paste from what is actually running to this copy.\r\n\r\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/13690", "title": "create duplicate insertion VSIX packges that won't appear in Tools -> Extensions and Updates", "body": "- Duplicates the `Roslyn.VisualStudio.Setup.vsix` and `Roslyn.VisualStudio.Setup.Next.vsix` packages with a `.Insertion` infix.\n- Removes the `Experimental=\"true\"` attribute from the manifest.\n- Adds the `InstalledByMSI=\"true\"` attribute to the maniest.\n\nThe end result is that once we use the `.Insertion` packages for VS setup, they'll no longer erroneously appear in the `Tools -> Extensions and Updates` menu.\n", "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/13014", "title": "fail fast if the anonymous type display service could not be found", "body": "Investigating internal bug 221007 led to a `NullReferenceException` [here](https://github.com/dotnet/roslyn/blob/master/src/Features/Core/Portable/LanguageServices/SymbolDisplayService/AbstractSymbolDisplayService.AnonymousTypes.cs#L46) which could only be caused by the `_anonymousTypeDisplayService` field.  This can be traced back to [here](https://github.com/dotnet/roslyn/blob/master/src/Features/CSharp/Portable/LanguageServices/CSharpSymbolDisplayService.cs#L13).  The existing dump files didn't contain enough information to diagnose this (infact, even `!dso` failed.)\n\nAs to why this service couldn't be resolved, I currently don't know (I'm open to suggestions) but my thought is that we can force the generation of more crash dumps by failing earlier in the process.\n", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tuespetre": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/20872", "title": "Modify DataFlowAnalysis implementations to only report referenceable symbols (fixes #5891)", "body": "Fixes #5891\r\n\r\n\ud83d\udc7d I saw this one was up-for-grabs.", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/20825", "title": "Use a ScaleTransform to prevent text clipping in the outlining tag hint (fixes #2128)", "body": "Fixes #2128 \r\n\r\n\ud83d\udcbb \ud83d\uddb1 \u2328\ufe0f ", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/20795", "title": "Report conflicts when renaming a partial method definition's parameters", "body": "Fixes #18566", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "TyOverby": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/20407", "title": "Allow the creation of 1-arity tuples", "body": "Replaces #20217\r\n\r\ncloses https://github.com/dotnet/roslyn/issues/14304", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/16937", "title": "override Equals and GetHashCode in subtypes of diagnostic info", "body": "closes https://github.com/dotnet/roslyn/issues/4786", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/13481659", "body": "RE: camelCase\n\nMan that's embarrassing.  Too much Rust programming has gotten to my head :stuck_out_tongue_closed_eyes: \n\nRE: features flag\n\nI didn't want to break anyone that was using the features flag, but if you think no one is depending on it, I'll remove it.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/13481659/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14225074", "body": "Done\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14225074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14225075", "body": "Done\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14225075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14225305", "body": "Done\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14225305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14225310", "body": "How about a generic ArgumentException with a descriptive message?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14225310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "drcjt": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/20154", "title": "Add an async test case for a try/finally with an uncaught exception", "body": "Added an extra async test case covering finally block entered from exceptional control flow rather than ordinary control flow.\r\n\r\nFixes #19905", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "basoundr": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/19814", "title": "Add MS.VS.DataDesign.Common to Roslyn Tools Myget feed", "body": "Tagging @jasonmalinowski @srivatsn @jaredpar for review.\r\n\r\nI am going to start a conversation to find who owns this dll and get their consent, if required, to udpate this binary to myget. Until then, this PR will not be checked in.\r\n\r\n**Customer scenario**\r\n\r\nSigned builds for the Project system are failing because the machine does not seem to contain this dll.\r\n\r\n**Risk**\r\n\r\nLow - since we are adding just one dll to the list of the Nugets already generated\r\n\r\n**Performance impact**\r\n\r\nInfra tool", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/10784844", "body": "I am not quite sure if there are others case that would get affected with this change. Hoping to get some test failures to understand the impact of the change.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10784844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10836999", "body": "Integration test has been added to test this behavior \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10836999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10996036", "body": "Would the caller of Formatter.Format would always be expected to do the trivia replacement before calling Formatter.Format?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10996036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "hickford": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/19585", "title": "Set proxy credentials in download-nuget.ps1", "body": "Following the [build instructions](https://github.com/dotnet/roslyn/blob/master/docs/contributing/Building,%20Debugging,%20and%20Testing%20on%20Windows.md) I ran `Restore.cmd` but the download of NuGet.exe failed with error \"401 Proxy Authentication Required\".\r\n\r\nMy Windows proxy settings are 'automatically detect settings'. Most applications work without any special setup.\r\n\r\nThe patch attached fixed the problem for me.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ellismg": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/19560", "title": "Support building on all Unix flavors", "body": "This infrastructure only change moves away from listing an incomplete set of Unix rids and instead defines a new property `UnixRuntimeIdentifier` which can be set to the RID of the current platform.  This allows us to support any platform that .NET Core already has packages for when building.\r\n\r\nIn addition, the Makefile now respects `DOTNET_RUNTIME_ID` which is the escape valve the dotnet CLI uses to override the RID for the current platform.  This is important for cases where dotnet doesn't know about you platform but you know a compatible RID.  This happens often on RHEL where 1.0 versions of the tooling incorrectly included the minor version of host OS when computing the RID.\r\n\r\nThere's some additional cleanup (deleting some unused scripts to build out old versions of the toolsets and removing some unix rids from projects where they didn't seem to make sense).\r\n\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "omajid": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/19519", "title": "Add RHEL CI jobs", "body": "PR 19472 (https://github.com/dotnet/roslyn/pull/19472) adds support for building on RHEL 7. Lets add a CI job for it to ensure it doesn't regress.", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lachbaer": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/19495", "title": "Changed GetContextualKeywordKinds(), always return all contextual keywords", "body": "The iterator function `GetContextualKeywordKinds()` only returns keywords up to `WhenKeyword`, even if new contextual keywords are appended to the end of the section.\r\n\r\nThe change makes it unnecessary to adapt the function every time a new contextual keyword is added.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "diryboy": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/19391", "title": "Avoid toggle checkbox when clicked on an option's description.", "body": "**Customer scenario**\r\n\r\n\"Tools, Options, Text Editor, C#, Code Style, Formatting, New Lines.\r\nIt's currently impossible to just select one of the items in the list with mouse click - it registers as a toggle for the checkbox, no matter where on the line you click.\r\n\r\n**Bugs this fixes:**\r\n\r\nFixes #18614\r\n\r\n**Workarounds, if any**\r\n\r\nClick on places without description text\r\n\r\n**Risk**\r\n\r\nLow\r\n\r\n**Performance impact**\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n**Is this a regression from a previous update?**\r\n\r\n**Root cause analysis:**\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n**How was the bug found?**\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/6642", "title": "Use cached delegate instances for method group conversions", "body": "See #5835 \n\nThis changes C# but not yet VB, vb files are changed to allow compile.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "marvac": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/19145", "title": "Rename instances of \"Langauge\" to \"Language\"", "body": "\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Hosch250": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/19067", "title": "Add Make Field Readonly analyzer/code fix", "body": "Close #10273\r\n\r\n## Specs\r\n\r\n- Only works on private fields (more accessible fields should be replaced with properties anyway)\r\n- Quick fix separates any fields declared in a single statement\r\n- Fields are split for Fix One and declared in the same order as originally\r\n- For Fix All, if all the fields in a declaration can be readonly, they are not split\r\n- User-facing option allows user to enable/disable and set the severity for this analyzer", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AaronNGray": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/18578", "title": "Added links to build instructions for Windows and Unix", "body": "I spent a day befoe finding this so it should be made easy to find", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "SeanFarrow": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/18574", "title": "Interface completion provider shows objects fix", "body": "Fixing issue https://github.com/dotnet/roslyn/issues/15988 to prevent methods from the object base class showing up when the completion list is requested from the ExplicitInterfaceCompletionProvider.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dopare": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/18455", "title": "Fixes #18240 - \"Generate class ...\" causes inconsistent accessibility", "body": "Fixes #18240.\r\n\r\nCurrently if nested class is protected then we generate internal class which can cause compilation error if  protected class is under public class.\r\nThis PR also fixes that issue.\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Pasick": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/17982", "title": "PVS-Studio: fixed weaknesses CWE-476 (NULL Pointer Dereference)", "body": "We have found and fixed vulnerabilities CWE-476 (NULL Pointer Dereference) using PVS-Studio tool.\r\nAnalyzer warnings: [V3019](https://www.viva64.com/en/w/V3019/), [V3042](https://www.viva64.com/en/w/V3042/) and [V3125](https://www.viva64.com/en/w/V3125/).\r\nPVS-Studio is a static code analyzer for C, C++ and C#.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "richlander": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/17741", "title": "Add 3PN entry for murmurhash2", "body": "https://github.com/dotnet/roslyn/blob/master/src/Workspaces/Core/Portable/Shared/Utilities/BloomFilter.cs", "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/17665", "title": "Update to best practice use of Apache 2 license", "body": "", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "zebmason": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/17630", "title": "Partial results of running LOC8 to identify dead code.", "body": "You'll want to review these changes to ensure the code identified as dead is actually dead. Some of it looks like it is there for debug purposes.\r\n\r\nThe tool used to find the \"dead\" code is currently under development with a log at https://github.com/zebmason/LOC8. More work is needed on the tool to avoid false positives. If you don't find this useful let me know and I'll train the tool on other code.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jeffanders": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/17524", "title": "Fix tests for paths with spaces", "body": "Various aspects of the test projects construct paths and command line arguments for running various tests. Some of these simply don't worth if the relevant path environment variable contains a space (for example when the temp path contains a space as will typically happen when using a user account that has a space in the name). \r\n\r\nThis included the main BuildAndTest.proj file not being able to run most tests at all due to command line arguments being interpreted incorrectly due to the presence of spaces in paths and lack of quoting around file paths. There was also one test that generated an rsp file for use with a test that was also outputing a path without appropriate quoting leading to the test failing.\r\n\r\nDisclaimer, not all tests are passing for me due to issue #16998. However, I cloned roslyn/master and ran the tests under a user account that didn't have a space in the name/path and the set of test failures due to #16998 appeared identical. \r\n\r\nWould it be possible to also change the test infrastructure to always perform builds under paths  containing a space to ensure that in future and changes to tests that will break on systems with paths containing spaces will show up quickly. ", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "martinzimmermann": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/17253", "title": "Fixes #16984: Accessors not correctly indented", "body": "Fixes #16984\r\n\r\nNow `get` and `set` behave like `if`.\r\nUnfortunately I had to change the test `AccessorList5` to match the new behavior.\r\nSeeing that `if` also has the same behavior if there are no matching closing brackets, I think this is another issue.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AviAvni": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/16814", "title": "Enable generic attributes", "body": "Implements feature proposal https://github.com/dotnet/roslyn/issues/953\r\n\r\nSuccesfully compile and run https://gist.github.com/AviAvni/00831abbddf4ceca198236de362ed449\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1097246/22398987/54601efa-e59b-11e6-894a-b61ce9f4bc83.png)\r\n\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1097246/22398992/6dc6f81e-e59b-11e6-9c8e-b5504f473296.png)\r\n\r\nDepend on: https://github.com/dotnet/coreclr/pull/9189\r\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "SLaks": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/16541", "title": "Expose Deconstruct() method as symbol on deconstructing AssignmentExpressionSyntax", "body": "This lets F12 on the `=` token jump to `Deconstruct()`.\r\n\r\nI will soon also make this report rename conflicts (#16102)\r\n\r\n**Customer scenario** \r\n\r\nUsing F12 to explore how deconstructing assignments are compiled, or to explore deconstructing assignments in a complex unfamiliar codebase\r\n\r\n**Bugs this fixes:** #16529\r\n\r\n**Workarounds, if any** None\r\n\r\n**Risk** Moderate; adds new return value to core method, but shouldn't matter, because it didn't previously do anything meaningful here.\r\n\r\n**Performance impact** None; this codepath should only run for this new feature\r\n\r\n**Is this a regression from a previous update?** No\r\n**Root cause analysis:** Missing part of new feature\r\n**How was the bug found?** Reported", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70412002", "body": "@HaloFour Actually, the reason that C# needs the `async` keyword is that `await x;` is already valid code if you have a class named `await`.  \n`yield return` is never valid syntax, so there is no need for an `iterator` keyword.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70412002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70493823", "body": "Anonymous iterators would be more useful for `SelectMany()`; there have been a couple of times when I've needed to do that.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70493823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70545241", "body": "The outermost crash (from the third copy &ndash; the debugging debugger) is also a nullref, from \n\n```\n>   VSDebugEngine.Utils.IsNativeCompliation(Microsoft.VisualStudio.Debugger.Symbols.DkmModule module)   Unknown\n    VSDebugEngine.SymReader.SymUnmanagedReader.GetMethodByVersionImpl(Microsoft.VisualStudio.Debugger.Clr.DkmClrMethodId methodId, bool IsPreRemap, out VSDebugEngine.SymReader.SymUnmanagedMethod retVal)  Unknown\n    VSDebugEngine.SymReader.SymUnmanagedReader.GetMethodByVersion(System.Diagnostics.SymbolStore.SymbolToken methodToken, int version, out Microsoft.VisualStudio.SymReaderInterop.ISymUnmanagedMethod retVal)  Unknown\n    [Native to Managed Transition]  \n    [Managed to Native Transition]  \n    Microsoft.VisualStudio.VIL.VisualStudioHost.FakeExpressionEvaluator2.GetMethodProperty120(Microsoft.VisualStudio.Debugger.InteropEE.IDebugSymbolProvider pSymbolProvider, Microsoft.VisualStudio.Debugger.InteropEE.IDebugAddress pAddress, Microsoft.VisualStudio.Debugger.InteropEE.IDebugBinder pBinder, int fIncludeHiddenLocals, uint dwEvalFlags, out Microsoft.VisualStudio.Debugger.Interop.IDebugProperty2 ppProperty) Unknown\n    VSDebugEngine.ShimManagedEE.EntryPoint.GetMethodName(Microsoft.VisualStudio.Debugger.InteropEE.IDebugExpressionEvaluator expreval, Microsoft.VisualStudio.Debugger.InteropEE.IDebugSymbolProvider symprov, VSDebugEngine.ShimManagedEE.CDebugAddress addr, VSDebugEngine.ShimManagedEE.Binder binder, Microsoft.VisualStudio.Debugger.DkmRuntimeInstance runtime, Microsoft.VisualStudio.Debugger.Evaluation.DkmVariableInfoFlags argumentInfoFlags, Microsoft.VisualStudio.Debugger.Evaluation.DkmEvaluationFlags dkmEvalFlags, uint radix, uint Timeout)  Unknown\n    VSDebugEngine.ShimManagedEE.EntryPoint.GetFrameName(Microsoft.VisualStudio.Debugger.DkmWorkList workList, Microsoft.VisualStudio.Debugger.Evaluation.DkmInspectionContext inspectionContext, Microsoft.VisualStudio.Debugger.CallStack.DkmStackWalkFrame frame, Microsoft.VisualStudio.Debugger.Evaluation.DkmVariableInfoFlags argumentFlags, Microsoft.VisualStudio.Debugger.DkmCompletionRoutine<Microsoft.VisualStudio.Debugger.Evaluation.DkmGetFrameNameAsyncResult> completionRoutine)   Unknown\n    VSDebugEngine.ShimManagedEE.EntryPoint.Microsoft_VisualStudio_Debugger_ComponentInterfaces_IDkmLanguageFrameDecoder_GetFrameName.AnonymousMethod__4()   Unknown\n    VSDebugEngine.ShimManagedEE.EEInvoker.MaybeInvokeRoutine()  Unknown\n    VSDebugEngine.ShimManagedEE.EEInvoker.Invoke.AnonymousMethod__1()   Unknown\n    VSDebugEngine.ShimManagedEE.ExpressionEvaluatorDataItem.AppendEnsureMetrics.AnonymousMethod__1(Microsoft.VisualStudio.Debugger.Evaluation.DkmGetLanguageSettingsAsyncResult result) Unknown\n    Microsoft.VisualStudio.Debugger.Evaluation.XapiManagedCompletionRoutineWrapper_DkmGetLanguageSettingsAsyncResult.FireToManaged(System.IntPtr Result)    Unknown\n    Microsoft.VisualStudio.Debugger.XapiManagedCompletionRoutineWrapper.NativeStub(System.IntPtr managedObjectCookie, System.IntPtr pResultStruct)  Unknown\n```\n\nThe `module` parameter is null.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70545241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70545496", "body": "My host code is https://github.com/madskristensen/WebEssentials2015/blob/master/EditorExtensions/Markdown/Classify/RoslynEmbedder.cs#L83-L86\n\nIs that wrong?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70545496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70546856", "body": "I uploaded two dumps to OneDrive.\nWhat Microsoft account should share them with?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70546856/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70547211", "body": "Done\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70547211/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70547470", "body": "@Pilchie No; http://source.roslyn.codeplex.com/#Microsoft.CodeAnalysis.Workspaces/Workspace/Solution/TextDocumentState.cs,127\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70547470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70548378", "body": "I think the problem is http://source.roslyn.codeplex.com/#Microsoft.CodeAnalysis.Workspaces/Workspace/Solution/TextDocumentState.cs,58; you should either change that to create a CVS, or change the VS hosting layer to _immediately_ replace it with a CVS (by calling WithText), as opposed to waiting for activity in the buffer.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70548378/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70548513", "body": "@mattwar That doesn't seem to be helping; I call that immediately on every document.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70548513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70549014", "body": "Yes; that's exactly what I meant. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70549014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70550065", "body": "After stepping further in the fourth debugger (Dev12 debugging the outer debugger), it looks like the null ref was harmless.\n\nThe actual crash was a `Microsoft.VisualStudio.VIL.DebuggerHost.RealFuncEvalException`, with the following stack:\n\n```\n>   Microsoft.VisualStudio.VIL.DebuggerHost.RealFuncEval.DoRealFuncEval(Microsoft.VisualStudio.Debugger.Metadata.MethodBase method, Ilrun.CallArgs args)    Unknown\n    Microsoft.VisualStudio.VIL.VisualStudioHost.FeqaLoader.CreateBindContext(Microsoft.VisualStudio.VIL.DebuggerHost.ICorValue list)    Unknown\n    Microsoft.VisualStudio.VIL.VisualStudioHost.FeqaLoader.LoadFeqaAssemblyUsingImmersiveBindContext()  Unknown\n    Microsoft.VisualStudio.VIL.VisualStudioHost.FeqaLoader.LoadFeqaAssembly()   Unknown\n    Microsoft.VisualStudio.VIL.VisualStudioHost.FeqaLoader.LoadFEQADllImpl(out int fRetry, Microsoft.VisualStudio.VIL.VisualStudioHost.LocalContextWrapper lcw) Unknown\n    Microsoft.VisualStudio.VIL.VisualStudioHost.FeqaLoader.LoadFEQADll(out int fRetry, Microsoft.VisualStudio.Debugger.Clr.DkmClrAppDomain appDomain, Microsoft.VisualStudio.Debugger.CallStack.DkmStackWalkFrame frame)    Unknown\n    Microsoft.VisualStudio.VIL.VisualStudioHost.Interpreter.LoadAndInitFEQADll(Microsoft.VisualStudio.Debugger.CallStack.DkmStackWalkFrame frame, ulong sharedMemoryAddr, Microsoft.VisualStudio.VIL.VisualStudioHost.IDebugBinderInterpCallback2 binder, out bool fRetry)  Unknown\n    VSDebugEngine.ClrInspector.VilHelper.LoadFeqaIfNeeded(Microsoft.VisualStudio.Debugger.CallStack.DkmStackWalkFrame frame, Microsoft.VisualStudio.VIL.VisualStudioHost.IDebugBinderInterpCallback2 binder)    Unknown\n    VSDebugEngine.ClrInspector.VilCallback.LoadFeqaIfNeeded(Microsoft.VisualStudio.Debugger.CallStack.DkmStackWalkFrame frame, Microsoft.VisualStudio.VIL.VisualStudioHost.IDebugBinderInterpCallback2 binder)  Unknown\n    Microsoft.VisualStudio.VIL.VisualStudioHost.VSGlobalContext.IsRealFuncEvalSupported()   Unknown\n    Microsoft.VisualStudio.VIL.VisualStudioHost.VSGlobalContext.ShouldDoRealFuncEval()  Unknown\n    Microsoft.VisualStudio.VIL.VisualStudioHost.VilEvaluationServices.GetPropertyValue(Microsoft.VisualStudio.VIL.VisualStudioHost.LocalContextWrapper lcw, Microsoft.VisualStudio.VIL.VisualStudioHost.VilEvaluationResult evalResult, Microsoft.VisualStudio.Debugger.Metadata.PropertyInfo propertyInfo, Microsoft.VisualStudio.Debugger.Metadata.Type parentType, string memberName)    Unknown\n    Microsoft.VisualStudio.VIL.VisualStudioHost.VilEvaluationServices.GetMemberValue(Microsoft.VisualStudio.Debugger.Evaluation.DkmInspectionContext inspectionContext, Microsoft.VisualStudio.VIL.VisualStudioHost.VilEvaluationResult evalResult, string parentTypeName, System.Reflection.MemberTypes memberType, string memberName) Unknown\n    VSDebugEngine.ClrInspector.DisplayAttribute.MemberAccessSegment.GetDisplayValue(VSDebugEngine.ClrInspector.ClrValue value)  Unknown\n    VSDebugEngine.ClrInspector.DisplayAttribute.GetDisplayStrings(VSDebugEngine.ClrInspector.ClrValue value)    Unknown\n    VSDebugEngine.ClrInspector.ClrValue.EvaluateDebuggerDisplayString(string attributeString)   Unknown\n    VSDebugEngine.ClrInspector.EntryPoint.Microsoft.VisualStudio.Debugger.ComponentInterfaces.IDkmClrValueInspectionCallback.EvaluateDebuggerDisplayString(Microsoft.VisualStudio.Debugger.Evaluation.ClrCompilation.DkmClrValue clrValue, string formatString) Unknown\n    Microsoft.VisualStudio.Debugger.EntryPoint.IDkmClrValueInspectionCallback_EvaluateDebuggerDisplayString(System.IntPtr pvClassInfo, System.IntPtr ClrValue, System.IntPtr FormatString, ref System.IntPtr Result)    Unknown\n    [Native to Managed Transition]  \n    [Managed to Native Transition]  \n    Microsoft.VisualStudio.Debugger.Evaluation.ClrCompilation.DkmClrValue.EvaluateDebuggerDisplayString(string FormatString)    Unknown\n    Microsoft.CodeAnalysis.ExpressionEvaluator.TypeHelpers.GetDebuggerDisplayStrings(Microsoft.VisualStudio.Debugger.Evaluation.ClrCompilation.DkmClrValue value, out string nameString, out string valueString, out string typeString) Unknown\n    Microsoft.CodeAnalysis.ExpressionEvaluator.ResultProvider.GetResult(Microsoft.CodeAnalysis.ExpressionEvaluator.EvalResultDataItem dataItem, Microsoft.VisualStudio.Debugger.Clr.DkmClrType runtimeType, Microsoft.VisualStudio.Debugger.Clr.DkmClrType declaredType, Microsoft.CodeAnalysis.ExpressionEvaluator.EvalResultDataItem parent)  Unknown\n    Microsoft.CodeAnalysis.ExpressionEvaluator.ResultProvider.GetRootResult(Microsoft.VisualStudio.Debugger.Evaluation.ClrCompilation.DkmClrValue value, string resultName) Unknown\n    Microsoft.CodeAnalysis.ExpressionEvaluator.ResultProvider.Microsoft.VisualStudio.Debugger.ComponentInterfaces.IDkmClrResultProvider.GetResult(Microsoft.VisualStudio.Debugger.Evaluation.ClrCompilation.DkmClrValue value, System.Collections.ObjectModel.ReadOnlyCollection<string> unusedFormatSpecifiers, string resultName, string resultFullName)  Unknown\n    Microsoft.VisualStudio.Debugger.EntryPoint.IDkmClrResultProvider_GetResult(System.IntPtr pvClassInfo, System.IntPtr ClrValue, System.IntPtr FormatSpecifiers, System.IntPtr ResultName, System.IntPtr ResultFullName, ref System.IntPtr Result) Unknown\n    [Native to Managed Transition]  \n    [Managed to Native Transition]  \n    Microsoft.VisualStudio.Debugger.Evaluation.ClrCompilation.DkmClrValue.GetResult(System.Collections.ObjectModel.ReadOnlyCollection<string> FormatSpecifiers, string ResultName, string ResultFullName)   Unknown\n    VSDebugEngine.ClrInspector.VilHelper.ConvertVilEvaluationResult(Microsoft.VisualStudio.Debugger.Evaluation.DkmInspectionContext inspectionContext, Microsoft.VisualStudio.Debugger.CallStack.DkmStackWalkFrame frame, string resultName, string resultFullName, System.Collections.ObjectModel.ReadOnlyCollection<string> additionalFormatSpecifiers, Microsoft.VisualStudio.VIL.VisualStudioHost.VilEvaluationResult evalResult)   Unknown\n    VSDebugEngine.ClrInspector.DebugGeneratedLocalsEnum.GetItems(Microsoft.VisualStudio.Debugger.Evaluation.ClrCompilation.DkmClrDebuggerGeneratedLocalEnumContext enumContext, int startIndex, int count)  Unknown\n    VSDebugEngine.ClrInspector.EntryPoint.Microsoft.VisualStudio.Debugger.ComponentInterfaces.IDkmClrInspectionQueryProcessor.GetItemsForLocalsEnum(Microsoft.VisualStudio.Debugger.Evaluation.ClrCompilation.DkmClrDebuggerGeneratedLocalEnumContext enumContext, int startIndex, int count)   Unknown\n    Microsoft.VisualStudio.Debugger.EntryPoint.IDkmClrInspectionQueryProcessor_GetItemsForLocalsEnum(System.IntPtr pvClassInfo, System.IntPtr ClrDebuggerGeneratedLocalEnumContext, int StartIndex, int Count, ref NativeXapiArray Items)   Unknown\n```\n\nI added a third dump at this exception to the existing shared OneDrive folder.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70550065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70550337", "body": "So basically remove http://source.roslyn.codeplex.com/#Microsoft.CodeAnalysis.Workspaces/Workspace/Workspace_Editor.cs,403\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70550337/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70550780", "body": "No; that was also harmless (it looks like that's just an exception thrown from a FuncEval running in the original debugger?)\n\nI then got a null ref (because `GetILFrame()` returned null) at\n\n```\n>   Microsoft.VisualStudio.VIL.DebuggerHost.CorFrame.GetArgument(int index) Unknown\n    Microsoft.VisualStudio.VIL.VisualStudioHost.InspectionFrame.GetArgumentAddress(int index)   Unknown\n    Microsoft.VisualStudio.VIL.VisualStudioHost.InspectionFrame.GetArgument(int index)  Unknown\n    Ilrun.VirtualState.LdArg(int argumentIndex) Unknown\n    Ilrun.Stuff.ExecuteInlineNone(Ilrun.VirtualState vs, Ilrun.Stuff.ILOpCode opCode, Ilrun.Slot pendingException)  Unknown\n    Ilrun.Stuff.ExecuteInstructionWorker(Ilrun.VirtualState vs, out Ilrun.Stuff.ILOpCode opCode, Ilrun.Slot pendingException)   Unknown\n    Ilrun.Stuff.ExecuteInstruction(Ilrun.VirtualState vs, out Ilrun.Stuff.ILOpCode opCode)  Unknown\n    Ilrun.Stuff.ExecuteWorker(Ilrun.VirtualMachine vm, Ilrun.IVirtualStackFrame frame, Ilrun.CallArgs callArgs) Unknown\n    Ilrun.VirtualMachine.ExecuteMethodWithInterpreter(Microsoft.VisualStudio.Debugger.Metadata.MethodBase method, Ilrun.CallArgs args, Ilrun.IVirtualStackFrame frame)  Unknown\n    Ilrun.VirtualMachine.ExecuteMethodInternal(Microsoft.VisualStudio.Debugger.Metadata.MethodBase method, Ilrun.CallArgs args, bool fAllowHooks, Ilrun.IVirtualStackFrame inspectionFrame) Unknown\n    Microsoft.VisualStudio.VIL.VisualStudioHost.VilEvaluationServices.InterpretInspectionQuery(Microsoft.VisualStudio.Debugger.Evaluation.DkmInspectionSession inspectionSession, Microsoft.VisualStudio.Debugger.Evaluation.DkmEvaluationFlags evalFlags, Microsoft.VisualStudio.Debugger.Evaluation.DkmFuncEvalFlags funcEvalFlags, uint timeout, Microsoft.VisualStudio.Debugger.CallStack.DkmStackWalkFrame frame, Microsoft.VisualStudio.Debugger.Metadata.Assembly queryAssembly, string expression, string queryClassName, string queryMethodName, Microsoft.VisualStudio.Debugger.Evaluation.ClrCompilation.DkmClrCompilationResultFlags queryCompilationFlags, Microsoft.VisualStudio.Debugger.Evaluation.DkmEvaluationResultCategory resultCategory, Microsoft.VisualStudio.VIL.VisualStudioHost.VilEvaluationResult targetValue, out string error)   Unknown\n    VSDebugEngine.ClrInspector.VilHelper.ExecuteQueryInternal(Microsoft.VisualStudio.Debugger.Metadata.Assembly queryAssembly, string queryTypeName, string queryMethodName, Microsoft.VisualStudio.Debugger.Evaluation.ClrCompilation.DkmClrCompilationResultFlags queryCompilationFlags, Microsoft.VisualStudio.Debugger.Evaluation.DkmEvaluationResultCategory resultCategory, Microsoft.VisualStudio.Debugger.Evaluation.DkmInspectionContext inspectionContext, Microsoft.VisualStudio.Debugger.CallStack.DkmStackWalkFrame frame, string resultName, System.Collections.ObjectModel.ReadOnlyCollection<string> additionalFormatSpecifiers)    Unknown\n    VSDebugEngine.ClrInspector.VilHelper.ExecuteLocalsQuery(Microsoft.VisualStudio.Debugger.Evaluation.ClrCompilation.DkmCompiledClrLocalsQuery query, Microsoft.VisualStudio.Debugger.Evaluation.DkmInspectionContext inspectionContext, Microsoft.VisualStudio.Debugger.CallStack.DkmStackWalkFrame frame, int firstLocalIndex, int count)    Unknown\n    VSDebugEngine.ClrInspector.EntryPoint.Microsoft.VisualStudio.Debugger.ComponentInterfaces.IDkmClrInspectionQueryProcessor.GetLocalValues(Microsoft.VisualStudio.Debugger.Evaluation.ClrCompilation.DkmCompiledClrLocalsQuery query, Microsoft.VisualStudio.Debugger.Evaluation.DkmInspectionContext inspectionContext, Microsoft.VisualStudio.Debugger.Evaluation.DkmILContext iLContext, int firstLocalIndex, int count)   Unknown\n    Microsoft.VisualStudio.Debugger.EntryPoint.IDkmClrInspectionQueryProcessor_GetLocalValues(System.IntPtr pvClassInfo, System.IntPtr CompiledClrLocalsQuery, System.IntPtr InspectionContext, System.IntPtr ILContext, int FirstLocalIndex, int Count, ref NativeXapiArray Items) Unknown\n```\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70550780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70550966", "body": "That was the final exception before both inner debuggers vanished.\nI uploaded a fourth dump\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70550966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70551559", "body": "Interestingly (though perhaps unsurprisingly), after both inner debuggers crashed, the original process (VS Exp instance) hung (I had started it outside the debugger, hoping this wouldn't happen).\nI attached a new debugger to it, and it won't pause.\nHitting stop after pause hung the debugger in MsgWaitForMultipleObjectsEx() called from vslog.dll\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70551559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70552892", "body": "The innermost debugger threw a null ref in\n\n```\n>   VSDebugEngine.SymReader.SymUnmanagedReader.GetCustomDebugInfo(VSDebugEngine.SymReader.SymUnmanagedMethod method, bool IsPreRemap, string name, out byte[] data) Unknown\n    VSDebugEngine.SymReader.SymUnmanagedReader.GetSymAttributeImpl(System.Diagnostics.SymbolStore.SymbolToken parent, string name, bool IsPreRemap, int sizeBuffer, out int lengthBuffer, byte[] buffer)    Unknown\n    VSDebugEngine.SymReader.SymUnmanagedReader.GetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken parent, string name, int sizeBuffer, out int lengthBuffer, byte[] buffer) Unknown\n    [Native to Managed Transition]  \n    [Managed to Native Transition]  \n    Microsoft.VisualStudio.VIL.VisualStudioHost.FakeExpressionEvaluator2.GetMethodProperty120(Microsoft.VisualStudio.Debugger.InteropEE.IDebugSymbolProvider pSymbolProvider, Microsoft.VisualStudio.Debugger.InteropEE.IDebugAddress pAddress, Microsoft.VisualStudio.Debugger.InteropEE.IDebugBinder pBinder, int fIncludeHiddenLocals, uint dwEvalFlags, out Microsoft.VisualStudio.Debugger.Interop.IDebugProperty2 ppProperty) Unknown\n    VSDebugEngine.ShimManagedEE.EntryPoint.GetMethodName(Microsoft.VisualStudio.Debugger.InteropEE.IDebugExpressionEvaluator expreval, Microsoft.VisualStudio.Debugger.InteropEE.IDebugSymbolProvider symprov, VSDebugEngine.ShimManagedEE.CDebugAddress addr, VSDebugEngine.ShimManagedEE.Binder binder, Microsoft.VisualStudio.Debugger.DkmRuntimeInstance runtime, Microsoft.VisualStudio.Debugger.Evaluation.DkmVariableInfoFlags argumentInfoFlags, Microsoft.VisualStudio.Debugger.Evaluation.DkmEvaluationFlags dkmEvalFlags, uint radix, uint Timeout)  Unknown\n    VSDebugEngine.ShimManagedEE.EntryPoint.GetFrameName(Microsoft.VisualStudio.Debugger.DkmWorkList workList, Microsoft.VisualStudio.Debugger.Evaluation.DkmInspectionContext inspectionContext, Microsoft.VisualStudio.Debugger.CallStack.DkmStackWalkFrame frame, Microsoft.VisualStudio.Debugger.Evaluation.DkmVariableInfoFlags argumentFlags, Microsoft.VisualStudio.Debugger.DkmCompletionRoutine<Microsoft.VisualStudio.Debugger.Evaluation.DkmGetFrameNameAsyncResult> completionRoutine)   Unknown\n    VSDebugEngine.ShimManagedEE.EntryPoint.Microsoft_VisualStudio_Debugger_ComponentInterfaces_IDkmLanguageFrameDecoder_GetFrameName.AnonymousMethod__4()   Unknown\n    VSDebugEngine.ShimManagedEE.EEInvoker.MaybeInvokeRoutine()  Unknown\n    VSDebugEngine.ShimManagedEE.EEInvoker.Invoke(Microsoft.VisualStudio.Debugger.DkmWorkList workList, Microsoft.VisualStudio.Debugger.DkmInstructionAddress address, Microsoft.VisualStudio.Debugger.Evaluation.DkmLanguage language, VSDebugEngine.ShimManagedEE.EEInvokeRoutine routine, VSDebugEngine.ExceptionHandlerRoutine exceptionHandler) Unknown\n    VSDebugEngine.ShimManagedEE.EntryPoint.Microsoft.VisualStudio.Debugger.ComponentInterfaces.IDkmLanguageFrameDecoder.GetFrameName(Microsoft.VisualStudio.Debugger.Evaluation.DkmInspectionContext inspectionContext, Microsoft.VisualStudio.Debugger.DkmWorkList workList, Microsoft.VisualStudio.Debugger.CallStack.DkmStackWalkFrame frame, Microsoft.VisualStudio.Debugger.Evaluation.DkmVariableInfoFlags argumentFlags, Microsoft.VisualStudio.Debugger.DkmCompletionRoutine<Microsoft.VisualStudio.Debugger.Evaluation.DkmGetFrameNameAsyncResult> completionRoutine)  Unknown\n    Microsoft.VisualStudio.Debugger.EntryPoint.IDkmLanguageFrameDecoder_GetFrameName(System.IntPtr pvClassInfo, System.IntPtr InspectionContext, System.IntPtr WorkList, System.IntPtr Frame, Microsoft.VisualStudio.Debugger.Evaluation.DkmVariableInfoFlags ArgumentFlags, System.IntPtr CompletionRoutine)   Unknown\n```\n\nIt then threw the same null ref in `CorFrame.GetArgument` that the outer debugger threw\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70552892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/9367079", "body": "`ContentEquals() already checks reference equality, so you don't really need to`==` check.\nhttp://source.roslyn.codeplex.com/#Microsoft.CodeAnalysis/Text/SourceText.cs,dc290adccf6f9ba7\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/9367079/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10334839", "body": "This should be replaced with a simple `SelectMany()`, or even just an addition `from` clause in the query comprehension.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10334839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10413614", "body": "Why not `=>`?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10413614/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10413625", "body": "Why not make an analyzer to prevent this altogether?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10413625/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10414057", "body": "I can't; I'm not allowed to sign your CLA. :cry: \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10414057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/13755737", "body": "I'm hitting this error in https://github.com/SLaks/DroidMaster, when the cursor is in a symbol with a quick fix.\nNote that I'm in a projection buffer.\n\nHow should I debug this? \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/13755737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/13756110", "body": "Debugging further (https://github.com/dotnet/roslyn/issues/5943), it looks like this was called three times with three different buffers, and only logged this error twice.\nThe three buffers are a `text` buffer (which fails this) with the file source, a `CSharp` ProjectionBuffer that wraps it in a class (which works) and a final `projection` ProjectionBuffer to elide out the wrapping lines.  ([source](https://github.com/SLaks/DroidMaster/blob/master/DroidMaster/Scripting/Editor/EditorWorkspaceCreator.cs#L74-L81))\n\nTherefore, I don't actually have a problem, but you might want to skip this log for non-source-language buffers.\n\nI haven't tried, but you'll probably get similar issues from Razor & ASPX.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/13756110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/20291759", "body": "That should be \"Deconstructing\"", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/20291759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/22406282", "body": "They're undocumented.\r\n\r\nhttp://source.roslyn.io/#Microsoft.CodeAnalysis.CSharp.Workspaces/Formatting/CSharpFormattingOptions.cs\r\n\r\nhttps://github.com/dotnet/roslyn/issues/16556#issuecomment-273316563", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/22406282/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "dlegien": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/15521", "title": "Corrected mistakes in xml sample of the ruleset", "body": "There were syntax errors in the xml sample of the ruleset description.", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "daveaglick": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/15494", "title": "Adds support for namespace XML doc comments", "body": "This PR addresses the lack of support for namespace XML comments as described in #15474. Since it was a fairly simple change, I decided to go ahead and implement so that the PR could be used for discussion (and hopefully merged eventually).\r\n\r\n**Customer scenario**\r\n\r\n.NET documentation generators have been forced to come up with their own ways of representing namespace documentation, and nearly all of them have tried to approach namespace-level documentation in one way or another. This shows that the lack of official compiler support for namespace documentation comments is an ongoing deficit. This PR adds support for reporting XML documentation comments at the namespace level in both Roslyn symbol representations and the generated XML documentation output file.\r\n\r\n**Bugs this fixes:** \r\n\r\n#15474\r\n\r\n**Workarounds, if any**\r\n\r\nReflection can be used to get the formatted XML documentation for a namespace (see #15474).\r\n\r\n**Risk**\r\n\r\nThere is a chance that changes to the generated XML documentation output file to include namespace XML documentation comments might break consumers of the file. This is mitigated by the fact that unless a namespace has XML documentation comments in the first place, they won't be output to the file. The presence of such comments on a namespace prior to this change is unlikely as they wouldn't have been picked up by the compiler and so would have been of little use.\r\n\r\n**Performance impact**\r\n\r\nI suspect (though do not know for sure) that this has a low performance impact since it uses the same mechanisms of compiling documentation comments as do other symbols, which have already been optimized.\r\n\r\n**Is this a regression from a previous update?**\r\n\r\nNo.\r\n\r\n**Root cause analysis:**\r\n\r\nThis is new functionality, and a test has been added to verify correct operation.\r\n\r\n**How was the bug found?**\r\n\r\nWhile developing a Roslyn-based .NET documentation generator and requiring information about namespaces to be available.\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ctaggart": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/15206", "title": "include portable pdb in nupkg", "body": "Revisiting @davkean's [plan from February](https://github.com/dotnet/roslyn/issues/3#issuecomment-180123687), this is the start of Step 1. Step 1 is to add the portable pdb files to all of the nupkg files. Step 2 will be to source link (index) those pdb files, but that will be a separate pull request at a later date.\r\n\r\nThere are several more nupkg's and this is so far just an example for one by adding the portable pdb to the Microsoft.CodeAnalysis.CSharp nupkg. I [posted the analysis](https://github.com/NuGet/Home/issues/1696#issuecomment-260168364) of the file size increase here, so the NuGet team could review the proposal again. It sounds like we may have gotten the green light or will get it very soon. @yishaigalatzer, can you confirm that it is okay now/soon for Microsoft open source to include the portable pdb files in the nupkg files? \r\n\r\n\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/155207323", "body": "I'm the author of [SourceLink](http://ctaggart.github.io/SourceLink/). I met with @tmat last week. The portable pdb format looks awesome! I commented at https://github.com/aspnet/Universe/issues/131#issuecomment-154227813 last week, but this is a more appropriate place. The size of the portable pdb files is several times smaller. I recommend including them in the `nupkg`s, but let's use https://github.com/NuGet/Home/issues/1696 to get NuGet team's blessing. I'll work with @tmat to get the source indexes in the portable pdb files.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/155207323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/155236754", "body": "My understanding is that `Microsoft.DiaSymReader.PortablePdb` allows existing Windows debuggers that use that COM API for debugging to work with the new format. Is that correct?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/155236754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/165594447", "body": "Yes, my ask is to please begin packaging the portable pdb files with the NuGet packages. Separately, I'l work with @tmat to get the source index into the portable pdb files. I will have time soon to work on that.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/165594447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/165604513", "body": "@agocke Portable PDBs because \n1) they are compact enough to put in the NuGet packages (several times smaller)\n2) they work cross platform\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/165604513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "axel-habermaier": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/14423", "title": "Added test for fix of #9828", "body": "Issue #9828 apparently has been fixed by commit 1b4ef7a1f5d6982169a5c5a0e914a26eb92a3c40. Added a minor, more explicit test for the fix and removed a comment that become outdated by the fix.\n\nCloses #9828.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70370706", "body": "Another idea: What you actually want are local function declarations. So, why not:\n\n``` C#\nint MyFunc()\n{\n      int innerFunc(int x) => x * 2;\n      return innerFunc(4);\n}\n```\n\nThat's pretty close to how it works in F#. Consider:\n\n``` F#\nlet MyFunc () =\n   let innerFunc x = x * 2\n   innerFunc 4\n```\n\nNo one would write `let innerFunc = fun x -> x * 2`, which would be equivalent to `var innerFunc = (int x) => x * 2`\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70370706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70464101", "body": "@MadsTorgersen: Inferred return types for local function declarations would certainly be interesting. For \"real\" methods, however, I would not support adding that feature (or else you probably should also add `var` for fields and (potentially?) properties). But then again, I'm also not a fan of C++'s auto return types.\n\nOptimization is certainly an interesting topic when considering local function declarations, as there are many opportunities. Let's go through a couple of cases:\n\n``` C#\nint F()\n{\n   int f(int x) => x;\n   return f(3);\n}\n```\n\nIn that case, the compiler could simply emit a static function into the class which is then called directly. No delegate construction is required. As efficient as it gets.\n\n``` C#\nstatic int y;\nint F()\n{\n   int f(int x) => x + y;\n   return f(3);\n}\n```\n\nSame as above, as the local function only accesses its own parameters and static variables of the enclosing class. The closure does not require a display class in that case.\n\n``` C#\nint y;\nint F()\n{\n   int f(int x) => x + y;\n   return f(3);\n}\n```\n\nWe can simply create an _instance_ method in that case to capture the closure semantics of the instance variable. Again, no delegate needs to be constructed.\n\n``` C#\nint F(int y)\n{\n   int f(int x) => x + y;\n   return f(3);\n}\n```\n\nThis is an interesting case. We either have to instantiate a display class that captures the method parameter. Or we change the signature of f such that y is also passed as an parameter (but that is most likely not always possible, I'd guess). In any case, no delegate construction is required. The invocation of f simply invokes the generated method on the display class.\n\nGenerally, for small functions like the one above, it might even be beneficial to completely inline them. So the compiler should probably emit them with the `aggressiveinlining` flag, allowing the JIT compiler to do its inlining magic.\n\nWhen a local function is passed to another function, a delegate must of course be created. In that case, I suggest to use the same rules for caching as for lambdas (i.e., only cache functions without a closure, if I recall correctly).\n\nTwo other things to consider: Do we want to expose local functions in the metadata explicitly? That is, should the reflection APIs be extended such that `MethodInfo` has a property `IEnumerable<MethodInfo> LocalMethods { get; }`?\n\nLocal function declarations probably should support attributes, so that I'm able to write, for instance:\n\n``` C#\nint F(int y)\n{\n   [DebuggerHidden]\n   int f(int x) => x + y;\n   return f(3);\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70464101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70464259", "body": "@paulomorgado: Conceptual clarity.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70464259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70464259", "body": "@paulomorgado: Conceptual clarity.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70464259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70496406", "body": "@paulomorgado (also @mikedn): Your first example defines a local function `m` which you subsequently call. Your second example defines an _anonymous_ local function and a delegate `m` to that function which you subsequently call. Sure, the _syntactic_ difference is small, the _semantic_ difference (*) is rather large, I'd say. At least, the first example was a lot easier to explain, requiring a lot less knowledge about the internals of .NET and the C# compiler. So the first example directly states what you want to achieve, whereas the second example first constructs some unnamed function which it subsequently assigns a name to, so that it can be indirectly called later. See my point?\n\nAlso, look at my F# example again, which highlights the conceptual problem at a syntactical level already:\n\n``` F#\nlet M () =\n   let m1 () = 0 // Simple local function\n   let m2 = fun () -> 0 // The delegate way\n```\n\n(*) Semantic in the sense of programming language semantics; the actual output is, of course, the same, disregarding the different heap layout.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70496406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70519242", "body": "@paulomorgado: Other than performance, probably none if you don't care about the (admittedly only slightly) simpler semantics. It's just an alternative I mentioned so that we can discuss the potential advantages or disadvantages. It probably all comes down to personal preference. For me, especially coming from F#, local function declarations just make more sense than \"named anonymous delegates\". It seems like @MadsTorgersen and @sharwell found the idea interesting, so there might be something to it.\n\nWhile I seem to be unable to come up with better reasons other than the somewhat obscure \"conceptual clarity\" argument and delegate avoidance (which seems to be a goal we can all agree on), @sharwell mentioned recursion as a potential benefit (and rightly so, because the way recursive lambdas work at the moment is just horrible and completely non-intuitive). \n\nDo you have any arguments specifically _against_ local function declarations?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70519242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "zanqi": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/14068", "title": "Inline temp retain comment. Fix for #1017", "body": "Fix for #1017", "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/11743", "title": "Default constructor reference: fix issue #11049", "body": "Add the logic into the finder. Fix issue #11049\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mattwar": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/13962", "title": "New signature help API", "body": "This is a draft proposal of the new signature help API.  Please take a look at the shape of the service API and leave feedback.\n\n@DustinCampbell @CyrusNajmabadi @Pilchie @jasonmalinowski @dotnet/roslyn-ide \n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/13741", "title": "Classification API", "body": "@Pilchie @CyrusNajmabadi @DustinCampbell @dpoeschl @jasonmalinowski @rchande  please take look and comment on this draft change to the Classification Service API.\n\nThe interesting things that happened here is that the editor layer service got removed, and the workspace layer service got refactored.  A change to take note of is that the GetClassificationsXXXAsync API's now return an ImmutableArray of ClassifiedSpan's instead of passing a list in.  It appears this list argument enabled the API to optimally not cause any allocations, or quite few.  With the change, the returned list is allocated each time the API is used.  Of course, this needed to change for a variety of reasons, such as potentially using the API cross process boundaries and the fact that async methods with out-like args is an easy pit of failure for users.\n\nNote, the provider/classifier model has not been changed and has been left as a C#/VB only implementation detail, since it depends on syntax trees and symbols.  It is not intended to be made public.\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/13442", "title": "Track incremental parse depth", "body": "Fixes issue #13398 \n\nAdd ability to track the number of incremental parses queued up on a document and switch to using full parsing if the queue gets too long.\n\n@heejaechang @Pilchie @jasonmalinowski @CyrusNajmabadi  please review\n", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/12685", "title": "Fix crash in inline rename", "body": "This change fixes #7566\n\nThe change adds a check for null after trying to get the snapshot of a supposedly open document. This can fail due to the weak reference map used to associate source texts with their editor text snapshots.\n\n@rchande @tmat @Pilchie  please review\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70334466", "body": "You can say\n\n```\nnew Predicate<int>(predicate)\n```\n\nbut it would be nicer if C# allows this as an implicit conversion.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70334466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70335738", "body": "If you respond to a workspace event by starting the work for some plug-in, you won't be competing with background compilation.  Background compilation is built to respond to the same events by accessing the same API's you would, causing the compilations to be built. If your plug-in calls the same API's, you'll get the same compilation instance. Just make sure you are not blocking the async API's and are responsive to cancelling your work in progress when then next workspace event occurs, and possibly for expensive work to start it after a delay so it doesn't interfere with typing.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70335738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70336484", "body": "The reason anonymous types are not passable outside the scope where they are created is due to a lack of unification of types across assemblies in the runtime, not a design philosophy.  Giving anonymous types an interface is a good idea. I believe it was proposed during the design for anonymous types but was outside the intent of the feature at the time.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70336484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70336730", "body": "The ScriptEngine type specifically?  No. I changed the API. :innocent:\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70336730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70337326", "body": "Another problem: At some point these methods are parts of runtime types that are persisted in actual assemblies with metadata describing them; and the runtime rules are not that loosey-goosey. So if you don't actually call the method in the same assembly it is defined, or have a definite type inference path within the code in that assembly then it would be impossible to infer the static type contract that needs to be emitted as part of the assembly.  So maybe encode it as a generic, but then the body wouldn't bind unless you invested in a bunch of other technologies?  Or maybe just encode it as dynamic, that would work, but then you could also just use the dynamic keyword in place of the type, and wouldn't be static typing or compile-time inferred.  Am I rambling?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70337326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70338033", "body": "The analysis engine is one of those expensive work items that gets kicked off so the IDE can eventually tell you about diagnostics. It would be perfectly reasonable to subvert the use an analyzer to feed information to your plug-in, its just not the typical use for an analyzer.   The workspace events are not meant to convey that level of detail, since it does require much additional work to determine. They are there to tell you about changes to the workspace model itself, changes to projects and documents, but  not to the level of detail of the semantic changes in your source code.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70338033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70352016", "body": "You can't actually emit a method body for a generic that relies on knowing specific operators like +.  So you'd need some representation other than IL that would describe this method, more like a template of some sort that binds/emits code later. Of course that would end up pushing the logic of picking that operator into the runtime, or an extension of the runtime that would know about C# rules.  I guess it wouldn't be that different than the dynamic runtime (DLR) that IronPython uses (and implements the C# dynamic feature), but then we just get back to it being equivalent to the dynamic feature which the language already has. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70352016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70352237", "body": "It's a nice feature, and we had it on the list when we did IEnumerable, or the release after, not entirely sure.  But it is kind of niche feature.  I think the syntax was going to be something like: \n\n```\nyield foreach x\n```\n\nErik Meijer had an algorithm to make it near non-recursive.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70352237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70377874", "body": "A CodeAction now treats any occurrence of elastic trivia the same as if a formatter annotation was attached. Any time you create a token without explicitly specifying leading and trailing trivia, the token gets special elastic marker trivia that acts a hint to the formatter. Normally, this is a good thing, but maybe not in your case.\n\nYou have two possible ways to work around this behavior.  \n\n1) always specify the trivia explicitly, even when there is none (use default(SyntaxTriviaList)) \n2) make a sub type of CodeAction that has different logic for post processing documents.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70377874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70378296", "body": "A delegate is an actual class instance that holds onto the function pointer and the instance pointer. When a lambda is converted to a delegate, a delegate instance is allocated. To convert to another delegate type you have to construct an instance of the new delegate type. With C++, you just have to cast the function pointer, no allocations involved. This is the cost that Mads was alluding to. Typically, casts in C# do not cause allocations either (except possibly with user-defined conversions and boxing), and object identity is preserved.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70378296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70383669", "body": "The yield foreach I was referring to was just a syntax. It did not translate to a foreach instruction and required a very different codegen for the iterator methods.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70383669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70540233", "body": "I think he wanted the simplicity of analyzer API where you just register for a particular kind of event, and these events might be when a declaration node is changed, added or removed. So the incremental analyzer stuff, which is a more general plug-in abstraction that the IDE diagnostic analyzer engine is built on is probably not the right level of abstraction, directly, but may be the right place to build out another engine that does what he wants.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70540233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70546500", "body": "All open documents get `PreservationMode.PreserveIdentity` which translates to using `ConstantValueSource<TextAndVersion>` in the `DocumentState` class, which keeps a strong reference to the `TextAndVersion`, so `TryGetText`should always succeed on those.   However, `InlineRenameSession.InitializeOpenBuffers` operates on a solution that is the result of a call to `GetOpenDocumentInCurrentContextWithChanges()`, which forces that document to have its text based on the snapshot that initiated the rename, in case it was not already, but that update to the document also used `PreservationMode.PreserveIdentity`, so it too should always succeed a `TryGetText` call.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70546500/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70548135", "body": "It seems like we force observation of the text during the call to Workspace.OnDocumentOpened.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70548135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70548749", "body": "Okay, if you start with a document with a TextLoader that has a SourceText (not a file), and then you call OnDocumentOpened with the same SourceText, we don't end up changing the preservation mode, so the DocumentState does end up with a RecoverableTextAndVersion.  Instead, we should always call WithDocumentText just to change the preservation mode.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70548749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70549968", "body": "I'm fixing it now. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70549968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70556431", "body": "@Slaks, yes basically that. Though I'm pushing the equality test down into the next if.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70556431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70720268", "body": "FindDerivedClassesAsync looks like a candidate for an API to be exposed on SymbolFinder.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70720268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70743589", "body": "This is fixed as of commit 157cf3726b2d304ab43bdc7511171a202a6c4844. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70743589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70941974", "body": "Yes. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70941974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "antonssonj": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/13464", "title": "Don't use static overloads on instance for QuickInfo", "body": "Fix #13462\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "lorcanmooney": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/13430", "title": "Completion fixes", "body": "- Fixes #4585\r\n- ~Fixes #13161~ Cherry-picked and merged by @rchande\r\n- Fixes a regression in VB where commiting a generic symbol with `(` wouldn't truncate the insertion text\r\n- Fixes a handful of issues around escaping identifiers\r\n  - In C#, `await` identifiers weren't being escaped in async methods\r\n  - In VB, `Await` identifiers were always escaped, even when preceded by `.`\r\n  - ~~Contextual keyword identifiers in symbol display strings weren't being escaped~~ Opened #13610 instead\r\n- Fixes #17269 - use `ImmutableArray.Empty` instead of `Nothing`.\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "viceroypenguin": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/13264", "title": "Add new options for switch case statement blocks", "body": "Change \"Indent case contents\" to be a radio button for three options:\n1. Always indent case block\n2. Never indent case block\n3. Only indent if case block is statements and not if case block is a block statement.\n\nFixes #12304. \n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Pvlerick": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/13257", "title": "Fix attempt for issue #13067", "body": "The issue seems to come from AttributeSignatureHelpProvider.cs that marks the SignatureHelpItem as variadic [only if the last parameter has `params` and there is no `namedParameters`](https://github.com/dotnet/roslyn/blob/master/src/Features/CSharp/Portable/SignatureHelp/AttributeSignatureHelpProvider.cs#L131) . However, `namedParameters` is declared a few lines above and takes all the properties available to be treated as named parameters in ([see INamedTypeSymbolExtensions.cs](https://github.com/dotnet/roslyn/blob/master/src/Workspaces/Core/Portable/Shared/Extensions/INamedTypeSymbolExtensions.cs#L419)).\n\nThis prevents the item to be marked as variadic so the help provider will always advance as items are added, while it should stay on the params.\n\nI added a unit test for this, but I'm not able to run a dev instance of VS that work properly (I get the \"Visual C# 2015 compiler could not be created\" or a vanilla C# editor with no intellisense or syntax highlighting.\n\nIt would be wise to check that as soon as you wrote a few param and an attribute, it switches to a potential next attribute.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/13245", "title": "Bugfix: possible NRE in SymbolsAreCompatibleCore", "body": "Changing `a && b || c` to `a && (b || c)`\n", "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/11054", "title": "Bugfix: NullReferenceException should not be thrown in SymbolKeyTestB", "body": "\u2026ase.GetBlockSyntaxList\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Shiney": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/12982", "title": "Fix for issue #12544 ", "body": "Created a fix for the issue and added a test for it. This fix will solve a similar issue in VB as it was shared code that the change was made in. It avoids listing overridden and replaced by `new` attribute members.\n", "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/12977", "title": "Fix #12708 and add two tests for it", "body": "Fixes issue #12708 \n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MatthieuMEZIL": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/12494", "title": "Add a non recursive rewriter and a full tree non recursive visitor", "body": "Adding a non recursive rewriter and a full tree non recursive visitor in order to avoid InsufficientExecutionStackException.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jramsay": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/12414", "title": "[Salsa] Fix InvalidOperationException when attempting to validate a breakpoint location in a script block", "body": "Issue: an InvalidOperationException can occur in Salsa when setting a breakpoint in a script block.  This exception is caught but it means the TSLS never gets the request to resolve the breakpoint and thus the breakpoint cannot be set.\n\nThe pCodeSpan that is passed to AbstractLanguageService`3.VsLanguageDebugInfo's ValidateBreakpointLocationWorker contains the iStartLine and iEndline for the full HTML document. The snapshot textbuffer is actually only the contained language document though (JS script block).  This means the attempt to get the span from the snapshot can fail because the span endline can be larger then the snapshot line count.\n\nFix: add a check to ensure the span endline is less than the snapshot line count before attempting to get the snapshot.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tvand7093": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/12243", "title": "Change Signature refactoring no longer appears when caret is on an expression body", "body": "This is a fix for #8333. I wasn't sure where exactly the best place for the test case was, so I placed it in the best place I could find.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ericfe-ms": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/11734", "title": "Fix bug in expression evaluator's logic to deal with multi-module ass\u2026", "body": "\u2026emblies.\n\nThe 'modulesByName' dictionary needs to use case-insensitive comparison since the of the netmodule in the metadata of the netmodule\nand the primary assembly might differ in case.\n\nFor example, consider a managed C++ application compiled as follows:\n\n> cl /clr /Zi /LN Stringer.cpp\n> cl /clr Client.cpp /Zi /link /ASSEMBLYMODULE:stringer.netmodule\n\nThe difference in casing between the two command-lines will cause subsequent lookups\nof the netmodule's metadata by mvid to fail.  The eventual symptoms include missing text\nin the breakpoints window and callstack window and expressions failing to evaluate.\n\nThe fix is to use case-insensitive comparison for the dictionary.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bkoelman": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/11647", "title": "Adds SyntaxGenerator.ConditionalAccessExpression", "body": "I missed this while writing a language-independent FixProvider.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "msJohnHamby": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/11450", "title": "IInvocationExpression and IArgument refinement and testing", "body": "This change set removes syntactic concerns from IInvocationExpression and IArgument. Specifically, the ArgumentsInSourceOrder property of IInvocationExpression has been replaced with ArgumentsInEvaluationOrder, and the ArgumentKind property of IArgument has been removed.\n\nThose interested only in the API surface are can confine their attention to changes to the IExpression.cs file.\n\nThis change set also includes new tests to cover the surface areas of these interfaces for a variety of circumstances, along with a set of bug fixes to make the tests pass.\n\nThis change set does not includes fixes for all previously-reported issues related to invocations. For example, there are still some problems with matching array arguments to paramarray parameters, and the reported issues remain open for the time being.\n\n@dotnet/roslyn-compiler @dotnet/roslyn-analysis @AlekseyTs @jcouv @genlu @jaredpar @DustinCampbell @nguerrera @Srivatsn @gafter @mattwar @CyrusNajmabadi @mavasani @ManishJayaswal  and anyone else eager to read 1600 lines of new tests are requested to review.\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/15028031", "body": "Are array initializers truly expressions, in that code that processes expressions should be expected to deal with them? Do they always have a meaningful result type?\n\nThe simplification your change achieves is certainly compelling, provided that it doesn't artificially inflate the expression domain with things that aren't expressions.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15028031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15049961", "body": "We generally guarantee that pulling on a property twice returns an identical value, unless the return value is an immutable array.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15049961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15050513", "body": "While it's OK to generate the array multiple times, the VariableDeclaration node should be created only once. ConditionalWeakTable is our mechanism for accomplishing this. Given that the BoundMultiple case below will have to keep track of multiple VariableDeclaration nodes, maybe storing an array as the CWT value is OK.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15050513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15050560", "body": "Again, these cases need the CWT trick to avoid creating equivalent nodes multiple times.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15050560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15050683", "body": "Is the motivation for eliminating the implement-both-interfaces trick and introducing the extra node here so that all cases are completely regular and walking won't encounter a node twice? If so, that's cool, so long as the new node is gaining us something.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15050683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15050720", "body": "This is a good change that cleans up a mess I left behind.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15050720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15052224", "body": "Given that ImmutableArray is a value type, the question of object identity doesn't really arise. Two immutable arrays that contain identical elements are essentially identical, making it permissible to create an immutable array anew at each request. However, the elements of the two arrays should be identical.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15052224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "paulvanbrenk": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/11411", "title": "Completion improvements", "body": "This adds a WithDescription method on the CompletionItem, this makes it easy to add synchronously created completion descriptions to a completion item. e.g. in the case of Snippets.\n\n@CyrusNajmabadi, @mattwar \n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aochagavia": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/11004", "title": "Add a null check for TextLoader parameter in DocumentInfo.Create()", "body": "Fixes #7310\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bmay2": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/10863", "title": "Remove as/is after various expressions", "body": "Includes lambdas, anonymous methods, and expressions of type 'void' or 'method group'\n\nFixes #8319\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dmytrolypai": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/9356", "title": "Fix cref's IntelliSense ordering for generic types (#8623)", "body": "Comparing on symbol text resulted in the opposite order, because of the ordering between > or } and , (comma). More discussion was happening in the issue #8623.\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "praeclarum": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/7915", "title": "Support for Xamarin.iOS", "body": "Hello,\n\nThis PR is just to get the discussion rolling on getting Roslyn working with Xamarin.iOS.\n\nWith these patches, I am able to emit CSharpCompilations into MemoryStreams. (I assume the VB compiler works too.)\n\nWorkspaces still do not work on iOS due to MEF issues.\n\nI had to make the following changes:\n- Create a copy of `OperandType` in `Microsoft.CodeAnalysis.Emit`\n\nXamarin.iOS does not include any of Reflection.Emit, so I just stuck in a copy from the reference sources in there. This is terrible, I know. I'm open to ideas.\n- Create a copy of `FILETIME` in `Microsoft.CodeAnalysis.Interop`\n\nXamarin.iOS is mysteriously also missing this. I filed a bug.\n- Many hacks to disable the native PDB writer\n\nXamarin is missing two Marshal functions that the writer needs and, oh yeah, it won't work anyway on iOS. :-) I got a little hacky disabling it. I think I heard rumors of a managed PDB writer some day?\n- Added AOT helper classes\n\nXamarin hates structs with comparison interfaces - these sometimes cause the runtime to dynamically create classes that Xam doesn't support. So I added some `IComparer` implementations to make everything work.\n\nIs anyone interested in this?\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "esdrubal": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/4556", "title": "Fixes for scripting tests in Mono", "body": "This fixes tests that do not pass in Mono except those that require GAC and\n\nRoslyn.Services.UnitTests.MetadataShadowCopyProviderTests.Modules [#33007](https://bugzilla.xamarin.com/show_bug.cgi?id=33007)\nMicrosoft.CodeAnalysis.Scripting.CSharp.UnitTests.InteractiveSessionTests.AssemblyResolution [#32966](https://bugzilla.xamarin.com/show_bug.cgi?id=32966)\n", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DavidKarlas": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70043193", "body": "It would be also nice if you could make [git tag](https://github.com/dotnet/roslyn/tags) for NuGet releases.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70043193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/165606607", "body": "About source code... Imho, just make git tags for every NuGet package version uploaded to NuGet.org... I think everyone debugging Roslyn code is capable of git clone roslyn && git checkout sha1 of tag that matches NuGet version....\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/165606607/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "DickvdBrink": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70281193", "body": "``` csharp\n    public static Add( x, y )\n    {\n        return x + y;\n    }\n```\n\nSo you want that x and y and the return value are automatically inferred to `int`? How do you know it is a `int`? It could be a long, double, string or anything else for that matter? Or I'm I missing your point here.\n\nTip: start with 4 spaces and github will make it a code block making it a lot easier to read so you might want to edit your post :) \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70281193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "nosami": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70286685", "body": "So far, I've wanted  CSharpCodeGenerationService and FindDerivedTypesAsync.\n\nHow about making all methods that Visual Studio uses public? :)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70286685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70326982", "body": "Hey, I totally understand the reasons you have for not making everything public.\n\nI'm just used to working with NRefactory, where everything was public from the beginning... and if any breaking changes were introduced, I'd just fix them. It was simple that way :)\n\nOK.... just to be clear, I don't need CSharpSyntaxContext right now if you are planning on adding keywords to the Intellisense API. I would need it if you weren't planning on doing that, but I have no way of knowing :)\n\nFindDerivedTypesAsync would be useful though... I currently have an extremely naive brute force version of this.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70326982/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70663939", "body": "Which parts of Roslyn does VS use that wouldn't be useful to other IDEs / editors?\n\nPretty sure that I would use anything that you made public. Currently resorting to reflection hacks.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70663939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70678935", "body": "@sharwell You are correct. I have a bad memory. I was referring to `FindDerivedClassesAsync` in `DependentTypeFinder`\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70678935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70683493", "body": "I wanted to use FindDerivedClassesAsync so that I could find implementations / overriden methods.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70683493/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "nvivo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70291199", "body": "I think I get the point of making the code simpler to write, like most dynamic languages. Typescript has this:\n\n``` ts\nclass Foo {\n    method() {\n       return 1;\n    }\n}\n```\n\nis the same as: \n\n``` ts\nclass Foo {\n    public method(): int {\n       return 1;\n    }\n}\n```\n\nThis is already works in visual studio and the compiler can infer the correct types.\n\nThe thing is that I think this doesn't match well with C# syntax, and there are the accessibility modifiers you have to provide already. Not sure if there would be much gain.\n\nI found quite ugly the `new typeof(return)()` syntax. The current one does the trick in a much nicer way.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70291199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70311468", "body": "I like the idea of typing less types.  But I think the problem is that in this case you throw away a lot of compiler checking and replace with a lot of doubts and edge cases. First of all, in this case:\n\n``` cs\npublic static Add(x, y)\n{\n    return x + y;\n}\n```\n\nOnce you type {, you have no intellisense at all, there is no way we can infer what x can be, so the method implementation is basically a dynamic language with no type checking and everything is possible.\n\nIf we assume T, is it even possible to sum two T? Are they numbers? are we concatenating strings? do they have implicit casts to another type that has a + operator overload? And that is just a very simple example. What if you have two methods with conflicting rules? What if after all the type inference, the compiler sees two or more types?\n\nIt just feels that there are too many ways this could go wrong, and too many cases to handle just to avoid creating a generic.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70311468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70340122", "body": "The idea here is just to make the code more readable. For example:\n\n``` cs\nFunc<Board, int, int, IEnumerable<Board>> newBoard = (rows, cols, previousGames) => { \n   // calculate a game board\n   return new Board(data);\n};\n```\n\nIt would be better as:\n\n``` cs\nvar newBoard = (int rows, int cols, IEnumerable<Board> previousGames) => { \n   // calculate a game board\n   return new Board(data);\n};\n```\n\nIt is a small difference, but I think that the types together with parameters are much more readable.\n\nMy initial idea was not to infer every parameter, but just make the declaration simpler. This syntax is enough and don't need implicit conversions.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70340122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70364644", "body": "@agocke,\n\nI probably didn't express myself well. The point is not forcing the lambda to be Action or Func, but be able to use `var <identifier> = <lamba expression>;`. @DustinCampbell idea doesn't solve this. Looking at the language:\n\n``` cs\nvar a = true;\nvar b = SomeMethod();\nvar c = (string x) => x.Length;\nvar d = () => 1;\n```\n\nLooking at this code, there is no reason why `c` and `d` should be written differently from `a` and `b`. The compiler is able to correctly infer the delegate type. I mentioned Action or Func because I know the compiler already uses those delegates when building Linq expressions from lambdas.\n\nIt wouldn't matter if the compiler internally created some anonymous delegate signatures.\n\nFrom what you said, it seems that the problem is that the spec states that the way lambdas are interpreted depends on the destination of the value. It may be a delegate or an expression tree.\n\nBut in this specific case, couldn't it include something like \"when a lambda expression is assigned to an implicitly typed variable, it is always evaluated as a delegate\"?\n\nRemember this is a method-scoped variable primarily used for closures. If you need to do anything else, the previous syntax still works and you can force an expression tree with:\n\n``` cs\nExpression<Func<int>> x = () => 1;.\n```\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70364644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70367260", "body": "Thinking out loud here, it seems that I could break my proposal in two:\n1. Allow anonymous objects to include methods and writeable properties.\n2. Allow anonymous objects to implement interfaces\n\nOnce the first is achieved, the second one should be straightforward.\n\nTo me, it is clear the idea is very useful and would reduce drastically the number \"dumb\" classes I need just to return models in interface driven code.\n\nBut it raises some questions:\n- How to declare a writeable property in an anonymous object? \n- If the property is writeable, does it require an initial value?\n\n``` cs\nnew {\n    // new modifier keyword?\n    readwrite Name = \"foo\",  \n    readwrite string Name,\n\n    // no types, always infer from the value?\n    readwrite Name = default(string),\n\n    // no value implies it will be set later, hence writeable? - looks strange\n    string Name;\n\n    // borrow syntax from real properties?\n    string Name { get; set; },\n    Name { get; set; } = \"initial value\",\n\n    // or imply the get and require only the set?\n    string Name { set; },\n    Name { set; } = \"initial value\",\n}\n```\n- And If I know beforehand the declaration type, could it infer the interface?\n\n``` cs\ninterface IPerson {\n    string Name { get; set; }\n    bool IsDeceased { get; set; }\n}\n\nIPerson GetPerson() {\n    return new {\n        Name = \"John\"\n    };\n}\n```\n\nThis would create some form of \"duck typing\", making like implementing one-time used interfaces easier. \n\n``` cs\ninterface ISystemClock {\n    DateTimeOffset Now()\n} \n\niocContainer.Resolve<ISystemClock>().With(new { Now() => DateTimeOffset.Now });\n```\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70367260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70367716", "body": "@mikedn, I'm not getting the reason to care about casting or changing the runtime. It is all compilation time checking I'm proposing.\n\nThe way \"var\" works is that the compiler uses whatever it sees on the right hand side of the expression. Once the type is set, everything remains the same.\n\nWhen using var, you don't care about the type of \"var\". If you need a delegate to be of a specific type, just create that with that type. I think this solves most of the problems without creating edge cases.\n\nYou can already do this pretty easily:\n\n``` cs\nvar p = new Predicate<string>(s => s.Length > 10);\n```\n\nThe reason I think it is better to not care about casting is because this:\n\n``` cs\nvar predicate = (string s) => s.Length > 10;\nvar filtered = list.FindAll(predicate);\n```\n\nto me makes as much sense as this:\n\n``` cs\nvar ticks = \"635556672000000000\";\nvar date = new DateTime(ticks);\n```\n\nThere shouldn't be any conversion or casting. If you need a long, create a long. If you need a predicate, create a predicate.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70367716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70371998", "body": "@mikedn,\n\nI see what you mean now. That makes sense. But then I think these are two independent ideas.\n1. Be able to compile `var <identifier> = <lambda expression>` requires nothing new, it just requires the compiler to see this as `<some deletage type> <identifier> = <lambda expression>`.\n2. Be able to cast delegates with the same signatures, or \"intern\" delegate signatures, so all signatures point to the same reference regardless of how they are called require some changes to the runtime.\n\nTo me specifically, I keep bumping into the missing \"var id = lambda\" syntax much more often. But that is probably just my use case.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70371998/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70532364", "body": "@axel-habermaier \n\nI think the syntax of lambdas as much cleaner than local functions. I know it is the same syntax used for real functions but looking at some code looks like there is a syntax error somewhere.\n\n``` cs\nint X() {\nint Y() { // is this supposed to be a inner function or I forgot to close braces?\n```\n\nLooks like while adding or removing a brace, the compiler could treat the entire class as a function body and start pushing reference errors everywhere in the project, instead of having a clear indication of a missing brace somewhere.\n\nAnother argument is that to me, looking at an inner function as a \"value\" rather than a \"language construct\" seems like a nicer abstraction. It is also a syntax that is already being used, so the learning curve is lower. As I said before, it is just changing `Func<int> x = () => 1` to `var x = () => 1`.\n\nThat doesn't mean I think it needs to be delegates.The compiler already compiles lambdas in different ways today. That could be just another case. Private static methods sounds like a good solution.\n\nIn any case, I'd like to say that accessing local method variables is _very important_, so if local functions means losing that, it wouldn't make any sense.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70532364/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70557952", "body": "@svick,\n\n> That doesn't sound like a good idea to me, because it would mean x would behave very differently than other local variables, for example, you wouldn't be able to write x.GetType() or object o = x;.\n\nWhy not? You can assign a method currently to another variable:\n\n``` cs\nprivate void SomeMethod() { }\nAction x = SomeMethod;\n```\n\nwhich is compiled to:\n\n``` cs\nAction x = new Action(SomeMethod);\n```\n\nOnce x is a delegate, both your examples should work.\n\n``` cs\nvar x = (string s) => s.Length;  \n\n// would compile to\nprivate static SomeAnonymousMethod(string s)\n{\n    return s.Length;\n}\n...\nFunc<string, int> x = new Func<string, int>(SomeAnonymousMethod); \n\nvar y = x; // works fine by type inference\nobject z = x; // works fine because Delegate extends Object\nx.GetType(); // works fine because x is an actual type\n```\n\nThe only thing with this is that a lambda could not be turned into an expression tree. But I think local function declarations wouldn't either. And if they could, the same solution could be applied to lambdas.\n\nBut I'm probably missing something here as @MadsTorgersen leans toward local function declarations.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70557952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70582477", "body": "@svick, there are a lot of proposals here, so it is getting confusing. =)\n\nMy first idea was to compile `var x = () => 1` as `Func<int> x = () => 1`. That is what we were referring as \"compile a lambda to a delegate\". The C# spec currently says that a lambda has no type, so that would break the spec. Also, in this solution, the delegate used is incompatible with other delegates with the same signature (eg. Func<bool> vs Predicate)\n\n@axel-habermaier  suggested that instead of that, a lambda could be compiled to a static method sometimes. This is what I referred as compiling to a static method. In this case, the method is compatible with any delegate that matches the signature. And if you are just creating a simple local function that is just called, but there is no reflection or anything fancy going on, the compiler could optimize that to a static method call, which would avoid the delegate at all (and probably match 99% of use cases).\n\nMy example just showed that even if it is compiled to a static method, the compiler can generate code that allows your examples to work by using delegates. It doesn't need to be all or nothing.\n\nWhy do you think it would be weird to do that? Sounds like normal compiler optimization to me.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70582477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70831952", "body": "@dsaf this has nothing to do with open formats, it has to do with how easily I can look at it, and PDF is much more common than DOCX.\n\nA website would also be great. Most modern languages have them instead of a document, and would be even easier to read than a PDF.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70831952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "kasajian": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70302221", "body": "DickvdBrink, code like this:\n    public static Add( x, y )\n    {\n        return x + y;\n    }\n\nshould automatically turn into:\n    public static T Add( T x, T y )\n    {\n        return x + y;\n    }\n\nnvivo, I agree that:\n    new typeof(return)() \nis not great syntax, however that's an extreme case.   Imagine the up-side to this -- most of your code will not have to specify types.   Most of the time, when you have an explicit type, you can make it a generic type.   But it doesn't work in all cases.   Sometimes you have to provide hints, such as \"Type T is comparable\" or \"Type T is new'able\".   So rather than use the \"where\" keyword in those cases, I am saying let the compiler determine that based on usage.   If the code does \"new\" on the type, then assume it's new'able.   If the code compares the type, assume it's comparable.  \n\nI'm am significantly trivializing this for illustrations.   There are multiple edge-cases which will be difficult or impossible to address, in which case you have to go back to what we do now and provide more specificity.  But in some of those more difficult cases, there can be more things we can do than give up.  For instance, let's say the parameter has to be comparable based on the fact that the code in the method is comparing values of that type.   But what if the comparison is not being done in the body of the method, bur rather in another method.   And so on.   So inferring \"where\" keyword is also an option.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70302221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70302488", "body": "Some of this reminds me of Haskell where things are strongly typed, but rarely do you specify a type.  You can always specify a type in Haskell, in some cases you have to since the compiler cannot infer the type from usage.   However, those cases few and far between.   In C#, you currently have to specify the type in too many places where the compiler could infer it.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70302488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70351525", "body": "nvivo, \n\n> > > throw away a lot of compiler checking<<<<\n> > > I agree.   I don\u2019t want to do that.   Remember, this is not about getting rid of types.  It\u2019s about inferring types.   Generics are still type-safe.   Haskell does this and it\u2019s a type-safe language.   No, I\u2019m not trying to turn C# into Haskell.  Just saying this works in other places.\n> > > \n> > > > If we assume T, is it even possible to sum two T? Are they numbers?<<<<\n> > > > Excellent question.   This means that if you call this function passing in types that do not support the + operator, such as numbers or strings, then it should not compile.   This is what would happen in case of C++ templates, for instance.\n> > > > \n> > > > What if you have two methods with conflicting rules? <<<<\n> > > > Fair question.   Give me an example so we can talk it through.   You may be right.  I\u2019m just thinking out loud here, but let\u2019s talk about specifics.\n> > > > \n> > > > It just feels that there are too many ways this could go wrong, and too many cases to handle just to avoid creating a generic.<<<<\n> > > > I\u2019m trying to avoid those feelings because we tend to think what we are familiar with is normal, and something we\u2019re not familiar with must be wrong.   That doesn\u2019t mean anything new is good.  And this may be a bad idea.  I just want to talk it through.\n\nWhen say \u201ctoo many cases to handle just to avoid creating a generic\u201d.   So I would like to say now that maybe we should say categorically that we will not be willing to give up on any features that one would have if Generics are used.  Perhaps this is a shortcut way to create a generic.   For instance, we all know that\n\nvar s = \u201cabc\u201d;\n\nis a shortcut way of saying:\n\nstring s = \u201cabc\u201d;\n\nSo there\u2019s no downside.\n\nSimilarly, code such s this:\npublic static Add(x, y)\n{\n    return x + y;\n}\n\nIs will simply convert into:\npublic T static Add(T x, T y)\n{\n    return x + y;\n}\n\nWhat do you think?  Do you think it's worth pursuing ?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70351525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70351764", "body": "agocke \n\n> > > > what you're basically asking for is a variant of Hindley-Milner type inference for type members.<<<<\n> > > > Yes.  That\u2019s right.\n\nIs that a bad idea for C#?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70351764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70351771", "body": "mattwar \n\n> > > > So maybe encode it as a generic, but then the body wouldn't bind unless you invested in a bunch of other technologies? <<<<\n\nCan you explain how the body wouldn\u2019t bind?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70351771/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70351759", "body": "DustinCampbell,\n\n> > > allowing type inference for method return types or fields gets even nastier.<<<\n> > > and it's definitely hard <<<\n\nI agree with you on that.    It sounds hairy and hard.\n\nBut we like hard things.\n\n> > > any change in a method body can affect type-checking of the entire program, resulting in low performance for things like live error squiggles and quick fixes<<<\n\nI see.   But you can make the same argument for Generics right?  If not, how would this be different.   The more I discuss this topic in this thread, the more I\u2019m leaning toward this being a shortcut way of specifying Generics.\n\n> > > F# makes the problem somewhat better by enforcing that declarations are only in scope after the declaration appears in source. But that isn't a restriction we could impose on C# at this point.<<<\n\nI guess I should know more about F#, because I don\u2019t know what this means.   Is there a way for you to easily explain this statement without fully learning F#, or is this one of those things that unless I really understand F# I\u2019m just not gonna get it.   In which case, I\u2019ll probably go look up F# on my own.   I\u2019ve been learning Haskell lately, so maybe that can help in finding a common ground of communication as well.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70351759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "KamyarNazeri": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70323248", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70323248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "nemec": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70323690", "body": "I like the idea. Although anonymous types aren't meant to be passed outside the scope where they're created, interfaces are all about the contract so it doesn't matter much that the implementation is compiler-generated.\n\nPer your suggestion about methods, it looks like C# 6 already [blurs the line](http://davefancher.com/2014/08/25/c-6-0-expression-bodied-members/) between methods and delegates (from a syntax standpoint), so maybe it's not such a far-fetched suggestion.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70323690/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "MadsTorgersen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70326695", "body": "Thanks for the suggestion!\n\nIf the main scenario of this is being able to change the names of parameters in a backwards compatible way, then I'm not sure this is worth the cost of a language feature - in terms of added language complexity.\n\nAre there other good scenarios? Please post them here! Maybe I'm missing something valuable.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70326695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70337443", "body": "I would really like to address the lack of asynchronous sequences in C#. We've discussed this at length since back when we were still adding async/await to the language.\n\nThere are a couple of issues. First off I am not sure if `IObservable<T>` is the right \"async IEnumerable\" type to use. It has gratuitous differences from IEnumerable and Task that I think count against it. But if necessary, we could certainly cook up an `IAsyncEnumerable<T>` that fits in better with the current async infrastructure.\n\nAnother concern is how to best deal with batching/chunking. Oftentimes a data stream would arrive in big chunks. If you access every element of each chunk asynchronously (with await) you are incurring a lot of overhead, and essentially blurring the \"degree of asynchrony\" of the source.\n\nA third issue is query operators. You could certainly imagine implementing the Linq pattern over an asynchronous stream type, but the way query expressions work today, they generate synchronous lambdas, so logic applied in the query clauses themselves couldn't use await. This would be severely limiting. Maybe we can find a way to extend query expressions to deal with this.\n\nLanguage support for asynchronous sequences would at least support iterators, and possibly also foreach loops and asynchronous query expressions.\n\nSo: this is something I'd love for us to look at for the next version of C#. We would have to land with a design that we are _very_ comfortable with in order to include it.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70337443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70338359", "body": "This proposal seems related to object expressions in F# or anonymous inner classes in Java, both of which let you specify class implementations right when you new the objects up.\n\nYou could certainly imagine an evolution of anonymous objects in C# that would combine the current behavior with the ability to inherit classes, implement interfaces and supply member implementations.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70338359/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70338621", "body": "This is one that we talk about often. VB has implicit types for delegates (not Func and Action but compiler generated ones), and quite liberal implicit conversions between delegate types.\n\nWe could do the same in C#, and maybe we should. One concern would be that the relative cost of these conversions might be on the highside, and invisible to users because of the implicit conversions.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70338621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70446621", "body": "The more I think about it, the more I think that @axel-habermaier has the right idea that these scenarios are better addressed by adding local functions to the language; i.e., method declarations inside of method bodies.\n\nTo use @HaloFour's predicate example, it would look like this:\n\n``` c#\nvar list = Enumerable.Range(0, 10).ToList();\nbool predicate(x) => x % 2; // local function\nvar evens = list.FindAll(predicate);\n```\n\nThat way the delegate isn't even _created_ until the method group `predicate` is passed as an argument and thereby implicitly converted to a delegate of the expected type.\n\nOne downside is that lambdas have implicit (inferred) return type, whereas named methods _today_ are always required to specify an explicit return type (`bool` above). But we could lift that restriction for (at least) local functions, allowing `var` instead:\n\n``` c#\nvar list = Enumerable.Range(0, 10).ToList();\nvar predicate(x) => x % 2; // inferred return type bool\nvar evens = list.FindAll(predicate);\n```\n\nI think this would address many of the scenarios where a need for implicitly typed lambdas is currently felt, as well as being more generally useful.\n\nThoughts?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70446621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70448545", "body": "I'm somewhat suspicious of anonymous iterators as a feature. Think about how you would use one to actually start getting values out:\n\n``` c#\nFunc<IEnumerable<int>> iterator = () => { ... yield return some stuff ... };\nvar enumerable = iterator();\nvar enumerator = enumerable.GetEnumerator();\nenumerator.MoveNext();\nvar actualElement = enumerator.Current;\n```\n\nI'm exaggerating a little here to draw out the number of steps it actually takes to unpack such an iterator lambda. That seems a little too far removed!\n\nBut think about it: you are rarely required to actually pass a `Func<IEnumerable<T>>` to anything. More likely you need to pass an `IEnumerable<T>`. So you would create an iterator delegate, execute it immediately and henceforth only use the result:\n\n``` c#\nFunc<IEnumerable<int>> iterator = () => { ... yield return some stuff ... };\nSomeMethod(iterator()); // need to invoke the iterator. The delegate object itself is ignored\n```\n\nMaybe local functions (as discussed in #14) would be a slightly better approach. Here you could define an actual named iterator function inside your method body, and use the result of calling that:\n\n``` c#\nIEnumerable<int> iterator() { ... yield return some stuff ... } // local iterator function\nSomeMethod(iterator()); // still need to invoke the iterator, but there's no delegate object\n```\n\nNot perfect, but better than creating a delegate object just to immediately invoke and discard it.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70448545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "HaloFour": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70329028", "body": "I think that with this it would be important for C# to support a form of duck-typing delegates based on their signature, otherwise the following wouldn't work since C# would infer that `predicate` is a `Func<int, bool>`:\n\n``` cs\nvar list = Enumerable.Range(0, 10).ToList();\nvar predicate = x => x % 2;\nvar evens = list.FindAll(predicate);\n```\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70329028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70349412", "body": "The one issue that I agree with being how you'd use `await` with an `IObservable<T>`.  I think the most natural behavior would be to read each value sequentially like consuming a queue, which is not how the `ForEachAsync()` extension method works.\n\nI disagree that we'd need yet another interface to represent asynchronous streams.  `IObservable<T>` and `IObserver<T>` are already a part of the BCL and I think that it would be confusing to have two interfaces that effectively represent the same thing.  Assuming that interfaces like `IAsyncEnumerable<T>` and `IAsyncEnumerator<T>` would effectively mirror `IEnumerable<T>` and `IEnumerator<T>` save for `MoveNextAsync()` returning a `Task<bool>` you also lock the behavior to be more sequential and complicate the possibility of representing chunked and parallel consumption of that stream.  Note that Rx already has `IAsyncEnumerable<T>` in the Ix assembly.\n\nAs for query operators, Microsoft already has this project and it works fantastically well.  I don't know what kind of conversation needs to happen to get Rx to be shipped as a part of the runtime but just by sticking with `IObservable<T>` you'll get this for free.  If you wanted to expand on the query expressions to allow them to be async themselves that would be a question of extending Rx with the appropriate extension methods, e.g. `Observable<T>.WhereAsync(Func<T, Task<bool>> predicate)`.  The language could then be extended to support `await` contextually with the query expression, e.g. `where await foo.SomeAsyncOperation()`.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70349412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70366000", "body": "A wildcard character had been described in the [C# Pattern Matching proposal](https://onedrive.live.com/view.aspx?resid=4558A04E77D0CF5!5396&app=Word) which may be up for further discussion for C# 7.0.  That character was `*` which does make more sense as `_` is considered a valid C# identifier.\n\nHow about also allowing skipping multiple arguments?\n\n``` cs\nvoid Foo(Func<string, int, bool, DateTime, decimal> func) { ... }\n\nFoo(delegate { return 0m; }) // already valid C# 2.0+\nFoo((*) => 0m); // shorthand for above\nFoo((s, i, *) => 0m); // capture first two args, skip the rest\n```\n\nIf there are overloads which accept `Func<>`s of differing numbers of arguments the overload resolution would select the one with the fewest remaining parameters:\n\n``` cs\nvoid Foo(Func<string, int, bool, DateTime, decimal> func) { ... }\nvoid Foo(Func<string, int, bool, byte, DateTime, decimal> func) { ... }\n\nFoo((s, i, *) => 0m); // calls the first Foo\nFoo((s, i, *, *, *) => 0m); // calls the second Foo\n```\n\nThe one issue here, which also affects normal lambdas, is if there are overloads which accept a delegate with the same number of arguments but only differ by the type of those arguments.  The only solution that I can think of there is to require specifying the type of the parameter in the lambda, but that makes the entire concept of catching multiple arguments feel weird.\n\n``` cs\nvoid Foo(Func<string, int, bool> func) { ... }\nvoid Foo(Func<string, string, bool> func) { ... }\nvoid Foo(Func<string, string, int, bool> func) { ... }\n\nFoo((s, int *) => true); // calls first Foo\nFoo((s, string *) => true); // calls second Foo\nFoo((s, string *, *) => true); // calls third Foo, but ewww\n```\n\nI think that a wildcard would be useful in a number of other scenarios as well, like the following:\n\n``` cs\nstring s = ...;\nif (int.TryParse(s, out *)) {\n    // Don't need the parsed value, no need to declare an extra variable\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70366000/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70366301", "body": "Yes, we like hard things, and we like shorthand, but there is a difference between \"succinct\" and \"terse\" and this definitely falls into the latter category and that is not a good thing.  The types do represent a form of documentation and allow, at a quick glance, a determination as to what the method expects.  Yes, the IDE could help, particularly with Roslyn, but in your case the method definition itself may change based on how it is used.  This is something that belongs in other languages.\n\nThe method sample that you proposed as numerous problems.  For starters, you're trying to add the two parameters.  Even if the compiler ditched to just using generics there are no existing constraints that would allow such a call, and if such constraints were to be added you run into the issues of either requiring their declaration or an additional form of inference.  More inference just makes it more confusing to determine what the method expects and the method definition could change if you happen to change how you treat the arguments somewhere buried within the method body.  Also, how do you proposed to deal with the possibility of the two parameters being different generic types?  The compiler would likely have to treat every argument as an individual generic type and then the constraint concerns explode in complexity.\n\nSorry, my opinion is that stuff like this should remain in dynamic un-typed languages (TypeScript is not a typed language).\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70366301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70376042", "body": "@mikedn,\n\nThe weird limitation doesn't exist in C/C++ because in those two languages a function pointer is just that, a pointer.\n\nIn .NET all delegates are separate sealed classes which happen to inherit from MulticastDelegate and provide a specialized `Invoke` method, which the runtime is designed to regard as a form of function pointer but with the additional functionality of multicasting and optional `this` binding.  The runtime does not allow casting from one delegate type to the other because they are separate unrelated classes.\n\nI agree, however, that it would be very nice if C# glossed over this detail and made it appear that you could simply assign a variable of one delegate type to a variable of a different delegate type as long as the signatures matched.  The problem is that the only way to do this in .NET is to actually bind the new delegate to the `Invoke` method of the existing delegate instance, e.g.:\n\n``` cs\nFunc<int, bool> f1 = i => true;\nPredicate<int> f2 = new Predicate2<int>(f1.Invoke); // the same as new Predicate<int>(f1)\n```\n\nInvoking the new delegate results in two delegate dispatches each of which has more overhead than a normal method call.  Granted, we're talking about fairly minuscule amounts of time but if that delegate is called incredibly frequently, such as in a LINQ query over a large number of elements, it could add up.  This is the issue that would be nice to solve in the runtime in order to make similar delegates directly assignable to one another.\n\nNote that VB.NET has allowed this relaxed conversion of delegates for some time now by hiding the detail of creating a new delegate and incurring that overhead.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70376042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70377397", "body": "The one Devil's advocate argument against that is that you wouldn't be able to tell that the lambda was an iterator unless you read through the contents of the body.  In VB.NET they dedicated a new keyword `Iterator` which is a required component of the method signature in order for that method to be an iterator.  This is also why C# has the `async` keyword for denoting methods (and lambdas) as asynchronous and allowing the use of `await`.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70377397/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70378273", "body": "You didn't mention pointers, but what's what \"function types\" are and it's really the closest thing you'll find to a delegate built-into the C/C++ languages, unless you break out functors or other function-like objects, which are mostly syntax candy via operator overloading.  I'm not sure what you mean about C/C++ not allowing the creating of equivalent but distinct types.  Assuming you used functors you could definitely define two which are equivalent and you can force the compiler to cast between them but the results at runtime will probably not be pretty.\n\nThe remaining explanation was for the benefit of anyone reading the thread and I apologize if I appeared to be lecturing you.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70378273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70515519", "body": "Having yet another separate class to represent `params` defeats most of the purpose of this feature which is to allow an API to expose a method that accepts `IEnumerable<T>` and support using `params` without having to explicitly write two separate methods.\n\nAlso, the performance of using `foreach` over an `IEnumerable<T>` which happens to be an instance of `T[]` is quite efficient, generally on par (if not faster) than using `for`, as unintuitive as that sounds.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70515519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70521099", "body": "The problem with `__arglist` is that it is painfully slow.  But that is the official mechanism in .NET for supporting variable arguments.  It really only exists for the purposes of supporting varargs methods via P/Invoke, e.g.:\n\n``` cs\n[DllImport(\"user32.dll\")]\nstatic extern int wsprintf([Out] StringBuilder lpOut, string lpFmt, __arglist);\n```\n\nSee also:  [System.ArgIterator](http://msdn.microsoft.com/en-us/library/system.argiterator%28v=vs.110%29.aspx)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70521099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70531167", "body": "@jaredpar \n\nI'm still not seeing any advantage to having an `Arguments` intermediary.  If an API has specific optimized paths for dealing with a small number of arguments then even with `Arguments` they would have to be coded separately anyway so why is `Arguments` an improvement over having the overloads?  The separate overloaded methods already provide the appropriate separation for the different algorithms and passing the arguments as individual values on the stack is more efficient than copying those values into a struct and copying that struct.  If the API doesn't have specialized paths and will just enumerate the arguments via `for` or `foreach` then there is no performance benefit to this struct, even with 2 or fewer arguments.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70531167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70534980", "body": "> The algorithms, minus the loop, were identical to the params overload.\n\nWhich is a different algorithm by definition since you're treating the arguments differently.  You're better off keeping the specialized overloads since bouncing through a struct intermediary will be slower, even if you reference the fields containing the values directly.  If you have to instead bounce through an indexer it will be significantly slower, on par with the speed of just working with an array.\n\nThe purpose of supporting `params IEnumerable<T>` is for the cases where performance isn't important because the performance will absolutely be slower even compared to even enumerating over `params T[]`.  It's simply to eliminate the need to write that additional overload as this has become a common pattern:\n\n``` cs\npublic void Foo(params int[] args) {\n   Foo((IEnumerable<T>)args);\n}\n\npublic void Foo(IEnumerable<int> args) {\n   // enumerate here\n}\n```\n\nFor those cases where the performance is important and you can behave differently given a small number of arguments the compiler story is already quite good through overload resolution.  I see no need to complicate that and force a single code path which couldn't be a single code path anyway.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70534980/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70539069", "body": "> Why push for a solution that is slower and allocates more memory over one which is solves the same problem + additional scenarios?\n\nBecause those additional scenarios don't benefit without adding onus onto the developer of the method to write even more code than they need to today.\n\nThe following is slower than `params T[]`:\n\n``` cs\nvoid Foo(params Arguments<int> args) {\n    for (int i = 0; i < args.Count; i++) {\n        int arg = args[i];\n        // do stuff here\n    }\n}\n```\n\nAnd the following is slower than overloads:\n\n``` cs\nvoid Foo(params Arguments<int> args) {\n    if (args.Count == 2) {\n        // assuming accessible public readonly fields, using indexers here is significantly slower\n        int x = args.arg1;\n        int y = args.arg2;\n    }\n    // need to handle other possibilities here as well\n}\n```\n\nThe one place where this could be nominally faster is in the case of `params IEnumerable<T>` where optimized `IEnumerable<T>` implementations can be provided for specific argument counts, which is something that the C# team could do when consuming `params IEnumerable<T>` rather than just emitting an array.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70539069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70542216", "body": "> I would expect the vast majority of consumers to use a foreach loop.\n\nI agree, and in those cases I do think that it would be worthwhile for the C# team to emit specialized implementations of `IEnumerable<T>` and `IEnumerator<T>` to improve performance, but that is a detail that could be hidden.  The one gotcha there is that if the method is written to also check to see if the `IEnumerable<T>` is an `T[]` as that would not be true. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70542216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70545790", "body": "@jaredpar \n\nI do like elements of your rethinking on `IEnumerable<T>`.  Without `IEnumerator<T>` don't you lose the capacity for generic variance?  Also, and probably a fairly minor tweak, I'd also prefer `TEnumerator` to have a generic constraint of `IDisposable`, although I guess the compiler could just emit a `try/finally` which would check to see if `TEnumerator` was disposable and, if so, call `Dispose()`.  Variance aside I love the idea of `current` being an `out` parameter.  `TEnumerator` being a `ref` seems a tad weird but I get why you do it.\n\nIn the end, though, I think I'd rather be stuck with one slightly-less-perfect method than have a bunch of disparate but similar methods.  `IEnumerable<T>` is still better than Java's `Iterable<T>` or `Enumeration<T>`.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70545790/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70548960", "body": "@mburbea Just supporting `params IEnumerable<T>` you also solve the additional overloads \"problem\" and can have one method with one implementation.  You could then opt-into the additional overloads to provide optimized scenarios for accepting arrays or specific numbers of arguments but only if you wanted to.  If your one implementation is just going to be using `foreach` or LINQ then it doesn't really matter as you're using the most expensive implementation anyway.  But if you know that you can have an optimized path given exactly one or two arguments then it always makes sense to have the overloads since that already works very well with overload resolution and provides the least expensive path for passing the values.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70548960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70551265", "body": "I'd have to question the design of these methods if the intention of the arguments can change based on the caller.  And if the caller is what determines that intent, why would those \"aliases\" be dictated by the method?  If you discover a new intent you'd be stuck unless you modify the attribute decorating the method.\n\nI don't see why you can't just accomplish this through comments:\n\n``` cs\nMember1(/*Initial*/ \"Initially it sounded moot... :)  \",\n        /*secondAndHalf*/ \"secondly, this is not a bad idea after all\");\n\nMember1(/*first*/ \"1st\",\n        /*quarterToThree*/ \"almost there\");\n```\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70551265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70709747", "body": "@mburbea In which case you'd likely not be writing those additional overloads anyway as they would serve no purpose for you and having an intermediate struct would be of no benefit, either syntactically or performance-wise.\n\nI believe where you would see the improvement of an intermediate `struct` would be to have the compiler emit such a struct as the `IEnumerable<T>` rather than just creating an `T[]` as the former can be more optimized than the default array enumeration.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70709747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70712085", "body": "@mikedn The compiler will automatically convert a `foreach` to a `for` over an array, which is definitely a lot faster.  If you cast the array to an `IEnumerable<T>` prior to `foreach` the enumeration is a good 5-6 times slower.  Custom enumerators can beat that by a good 20% margin or so.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70712085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70715213", "body": "@mikedn This feature request is to support `params IEnumerable<T>`, which is what makes this relevant.  In terms of the existing `params T[]` support, you're correct, although if people are just passing that array to an overload that accepts `IEnumerable<T>` then the benefit is lost.\n\nIn the C# 6.0 timeframe the proposed solution was to support `params IEnumerable<T>` and to have the caller emit `new T[] { 1, 2, 3 }`, so we're back to enumerating via `IEnumerable<T>` unless that method converts/casts to an array, which would kind of defeat the point of supporting `params IEnumerable<T>`.  My statement is that if the compiler instead emitted a `struct` which had a better `IEnumerable<T>/IEnumerator<T>` implementation that it could edge out the performance of the array enumeration in that case.\n\nC# 5.0:\n\n``` cs\npublic void Foo(params int[] args) {\n    Foo((IEnumerable<int>)args);\n}\n\npublic void Foo(IEnumerable<int> args) {\n    // do stuff with args\n}\n\n...\nFoo(1, 2, 3);  // -> Foo(new int[] { 1, 2, 3 });\n```\n\nC# 6.0 proposal which was cut due to schedule:\n\n``` cs\npublic void Foo(params IEnumerable<T> args) {\n    // do stuff with args\n}\n\n...\nFoo(1, 2, 3); // -> Foo(new int[] { 1, 2, 3 });\n```\n\nAlternate proposal:\n\n``` cs\npublic void Foo(params IEnumerable<T> args) {\n    // do stuff with args\n}\n\n...\nFoo(1, 2, 3); // -> Foo(new CompilerGeneratedArgsStruct(1, 2, 3));\n```\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70715213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70720919", "body": "@mikedn Well, the performance improvement is because I can write a better case-specific implementation than `SzArrayEnumerator`.  :smile: \n\nI do think that the indexer case is already covered, just continue to use the existing `params T[]`.  You can then opt-in to a non-`params` overload that accepts an `IEnumerable<T>` which would cast/convert to an array before passing it to the `params` overload.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70720919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70760565", "body": "Didn't we discuss this in some length on the codeplex forums?  If I recall while there was an alternate algorithm which made these scenarios much faster they were also found to be much slower for the common non-nested cases.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70760565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70912822", "body": "Ya know I was tempted to add a comment to the feature request for `params IEnumerable<T>` to also ask for something like `params IDictionary<string, T>` where the latter would be satisfied by using named arguments:\n\n``` cs\nvoid Execute(string command, params IDictionary<string, object> arguments) {\n   // do stuff here\n}\n\nExecute(\"SELECT * FROM table WHERE name = @name AND date = @date;\",\n    name: \"Joe\",\n    date: DateTime.Today\n);\n// equivalent to\nExecute(\"SELECT * FROM table WHERE name = @name AND date = @date;\",\n    new Dictionary<string, object>() {\n        { \"name\", \"Joe\" },\n        { \"date\", DateTime.Today }\n    }\n);\n```\n\nWhat do you think?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70912822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70916158", "body": "Absolutely.  The compiler could emit a specialized struct which implements the interface (as large and as obnoxious as that is).\n\nFor your use case (an SQL statement) I imagine that we'll see more of a push towards string interpolation via `FormattedString`, although that lacks the capacity to get the names of the holes at the moment which is a limiting factor.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70916158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70919255", "body": "If the API accepted `FormattedString` it could apply its own interpolation strategy so that the string contained generated parameter names rather than embed the values, something akin to:\n\n``` cs\npublic static int Execute(this SqlConnection connection, FormattedString command) {\n    using (SqlCommand command = connection.CreateCommand()) {\n        int length = command.Args.Length;\n        string[] parameterNames = new string[length];\n        for (int i = 0; i < length; i++) {\n            string parameterName = \"@p\" + i;\n            parameterNames[i] = parameterName;\n            command.Parameters.AddWithValue(parameterName, command.Args[i]);\n        }\n        command.CommandText = String.Format(command.FormatString, parameterName);\n        return command.ExecuteNonQuery();\n    }\n}\n```\n\nWhich you should be able to call like this:\n\n``` cs\nstring name = \"Joe\";\nDateTime date = DateTime.Today;\nint result = connection.Execute($\"SELECT * FROM dbo.table WHERE user = {user} AND name = {name};\");\n```\n\nWhich would execute the following SQL:\n\n``` sql\nSELECT * FROM dbo.table WHERE user = @p0 AND name = @p1;\n-- @p0 NVARCHAR(4000) N'Joe'\n-- @p1 DATETIME2 '2015-01-21 ...'\n```\n\nOf course if `FormattedString` also carried the hole names then you could name the parameters better.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70919255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/71046682", "body": "@mburbea \n\nI was able to handily beat the array enumerator by using the following:\n\n[Struct Enumerable for params](http://pastebin.com/fDTaAHu4)\n\nI ran that through the following test methods:\n\n``` cs\npublic int Test1(CompilerGeneratedArgs3 args) {\n    int tally = 0;\n    foreach (int value : args) {\n        tally += value;\n    }\n    return tally;\n}\n\npublic int Test2<TParams>(TParams args) where TParams : struct, IEnumerable<int> {\n    int tally = 0;\n    foreach (int value : args) {\n        tally += value;\n    }\n    return tally;\n}\n\npublic int Test3(IEnumerable<int> args) {\n    int tally = 0;\n    foreach (int value : args) {\n        tally += value;\n    }\n    return tally;\n}\n```\n\nWith 10,000,000 hard-loop iterations the performance using .NET 4.5.2 was as follows:\n\n```\nTest1:       00:00:08.3613572\nTest2:       00:00:08.6540710\nTest3:       00:00:09.2925556\nTest3/Array: 00:00:11.3223353\n```\n\nHere's the source if you want to give it a spin:\n\n[Enumerable/Struct Perf Tests](https://gist.github.com/HaloFour/a986f87949145c4c19d3)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/71046682/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "JoshVarty": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70335988", "body": "For one project I'm working on called [Code Connect](http://codeconnect.io) we display a static call graph to the user at design-time. As the user adds/removes invocations, the call graph updates automatically.\n\n[RegisterCodeBlockEndAction](http://source.roslyn.codeplex.com/#Microsoft.CodeAnalysis/DiagnosticAnalyzer/DiagnosticAnalysisContext.cs,8558cfe8959b7a2a,references) looks like it might be useful for this purpose. Currently we've had to build a custom differencing engine to find the differences between two files and then look within method bodies for added/removed invocations.\n\n[RegisterSyntaxNodeAction](http://source.roslyn.codeplex.com/#Microsoft.CodeAnalysis/DiagnosticAnalyzer/DiagnosticAnalysisContext.cs,c5bcffd3f9d32603,references) Might also be useful as well. It would allow us to operate only on MethodDeclarationSyntax and completely ignore changes to things like Fields and Comments (for which the WorkspaceChanged event still fires).\n\nI guess it feels like there's a lack of granularity to the changes we can listen to.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70335988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70336223", "body": "@mattwar My fears about performance might have been misplaced. (We haven't run into any issues with performance or anything).\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70336223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70563171", "body": "@heejaechang I agree that independent diffing seems like a waste.\n\nHowever, this should probably only be implemented if other extension creators actually need this functionality. If I'm the only one asking for it, it may not be worth the development time. :)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70563171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "mikedn": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70360204", "body": "It's probably worth adding that the difficulty of debugging C++ template errors is the reason why the C++ world is trying to add 'concepts', a feature that's similar to C#'s generic constraints. In other words, they too figured out that attempting to the let the compiler figure it out can be problematic.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70360204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70366020", "body": "I think that for this to work really well the runtime would have to be convinced to allow casting between different delegate types that have identical signatures. Then the whole problem of implicit conversions would go away because their cost will be 0.\n\nWhen it comes to invoking a delegate it makes no difference if the delegate type is `Predicate<string>` or `Func<string, bool>`. The method signature is identical and the generated code will also be identical.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70366020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70370286", "body": "Well, I don't get why you'd think that the predicate/FindAll example doesn't make sense. Perhaps that's because you're used to the way things work now. Let's take a simpler example which doesn't involve generics because they can complicate things:\n\n``` C#\ndelegate void foo();\ndelegate void bar();\n```\n\nIs there any difference between foo and bar except the name? Nope, no difference whatsoever.\n\nLet's try to use these 2 delegates:\n\n``` C#\nstatic void fn() {\n}\n\nstatic void Main() {\n    foo f = fn; f(); // works, calls fn\n    bar b = fn; b(); // works, calls fn\n    f = b; // doesn't work\n}\n```\n\nBoth delegate types do exactly the same thing, you can delete one of them and replace all its usages with the other, this program will work exactly like before except that `f = b` will be now valid. There's only one case where such a substitution wouldn't work: overloading. But I don't remember ever seeing method overloading on delegate parameter and I hope I won't ever see such a bad use of overloading.\n\nThis weird limitation doesn't exist in C/C++. Function types simply don't have associated names, `void()` is a void function type with no parameters and there's no other type with the same meaning. Names may be associated to such types via `typedef` but those are simply aliases, not distinct types. As a result, implementing a similar feature in C++ is a no-brainer: `auto f = fn;`. The type of `f` is deduced as pointer to `void()` and `f` can be used anywhere where a pointer to a void function is expected.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70370286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70377594", "body": "Erm, I have no idea what \"a function pointer is just that, a pointer\" is supposed to explain. Isn't a managed reference just that, a reference? The reason why this weird limitation doesn't exist in C/C++ has nothing to do with pointers and I specifically avoided talking about pointers. The reason is that C/C++ simply doesn't allow you to create such equivalent but distinct types in the first place.\n\nAnd I know very well what a delegate is and why the runtime doesn't allow the cast. The point is that it could allow the cast and that would avoid the problem mentioned by Mads Torgersen earlier, the potential cost of the improvised conversions the C# compiler would need to make to get around the runtime limitation.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70377594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70378982", "body": "Function types and pointers aren't the same thing. The `void()` that I used in my example is a type in it's own right and it's certainly not a pointer. From it you can build a pointer (`void(*)()`), a reference (`void(&)()`) or a wrapper object like `std::function<void()>`.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70378982/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70454324", "body": "That should work pretty well and I've seen requests for local functions before. They have the advantage that they can be called from the enclosing function without having to pay the cost of delegate creation.\n\nI think the main concern with this solution is delegate caching. Should the compiler attempt to cache the delegate in cases like the following?\n\n``` C#\nforeach (var list in listOfLists) {\n    var e = list.FindAll(predicate);\n    ...\n}\n```\n\nIf it doesn't cache then you risk having people coming back and saying: hey, it would be nice to be able to write `var d = predicate;` :smile:\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70454324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70496233", "body": "Let's be realistic, this has nothing to do with clarity. It's just an attempt at working around delegate issues: allocation costs (and in general, absence of any sort of optimizations) and impossibility of converting between delegates with the same signature.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70496233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70531267", "body": "Access to an `__arglist` is complicated because it requires checks to ensure type safety. varargs functions get a hidden argument which is used to pass some sort of description of the arguments - count and types. ArgIterator has to parse that description and it does so via calls to runtime helpers, accessing a single argument from the list ends up being more expensive that reading an element from an array.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70531267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70543071", "body": "Hmm, and if you want more than 2 arguments what happens? Will the compiler go and create an array and pass it to `Arguments<T>`? And if you need arguments of different types and they're value types you still end up allocating due to boxing, the only T you can use in such cases is Object. I'm a bit of a performance freak myself but this particular optimization attempt seems a bit overdone.\n\nAnd I can't help not to notice that the allocation cost problem comes up quite often and every time we end up with solutions that are either incomplete or have some other not so great effects. Back in .NET 2.0 generic collections got struct enumerators, great, allocations avoided. And then you look at the JIT generated code and go hrmm. It looks like RyuJIT will produce better code but it took \"only\" 10 years.\n\nMaybe at some point we need to accept that the system works the way it works and it has certain performance characteristics. If you want to make it better, well, use .NET Native, add escape analysis and stack allocation to it and call it a day.\n\nJust my 2 cents.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70543071/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70546091", "body": "I believe the working version for the varargs looks like the following, at least that's what I tested:\n\n``` C#\nstatic int Sum(__arglist) {\n            var value = new ArgIterator(__arglist);\n            var count = value.GetRemainingCount();\n            var sum = 0;\n            for (int i = 0; i < count; i++)\n                sum += __refvalue(value.GetNextArg(), int);\n            return sum;\n}\n```\n\n1,000,000 `Sum(__arglist(1, 2, 3))` calls take 288ms on my machine.\n\nCan you guess how much time the `params int[]` version takes? \n\nIt takes 10ms. No comment :smile:\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70546091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70557936", "body": "@jaredpar Actually struct enumerators were added in 2.0, check ArrayList for example, it has a class enumerator and its GetEnumerator returns IEnumerator. And yes, I read your blogpost and I know you worked with Joe Duffy on a certain project :smile:.\n\nOh well, I suppose it makes sense for the compiler and framework to strive to minimize allocations. The main problem is how will the indexer deal with IEnumerable<T>. I suppose you'll end up with something like this, otherwise you'll end up enumerating multiple times:\n\n``` C#\nT this[int index] {\n    if (count > 2) {\n        var list = _enumerable as IList<T>;\n        if (list == null) {\n            list = _enumerable.ToArray();\n            _enumerable = _list;\n        } \n        return list[index];\n    }\n    ...\n```\n\nAs for boxing, that's likely unavoidable. You'd need something similar to C++'s variadic templates to get make it work.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70557936/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70692421", "body": "Yes, the call itself is fast, the arguments are simply pushed on the stack like any other call arguments. The problem is extracting the arguments from the list, that requires parsing the signature used at the callsite and that's done via calls to runtime helper functions. \n\nGetting the pointer won't help, you need to know the format of that signature. In general, any attempt at extracting the arguments from the pointer is a recipe for disaster.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70692421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70696603", "body": "Stackcrawls as in System.Diagnostics.StackTrace? \n\nEven if it would be possible how would that help? You'll end up allocating at least one object, if you're going to do that then you may as well use the `params int[]` version.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70696603/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70699661", "body": "The JIT may place a struct in a register if it contains only one field that fits in a register (a field of type `int` for example) so Arguments<T> has no chance of being passed in registers. Anyway, x86 and even x64 have too few registers for this to be useful.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70699661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70711018", "body": "@HaloFour  What do you mean by the former can be more optimized than the default array enumeration? Array enumeration is as fast as it gets, there's nothing more optimized than that. Maybe you meant the opposite or I did I read it wrong?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70711018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70714336", "body": "@HaloFour Exactly, the `foreach` is converted to `for` so what's this 20% faster custom enumerator thing? An enumerator that tries to cast the `IEnumerable<T>` back to array?\n\n@mburbea I know that and HaloFour knows it to, the misunderstanding is somewhere else. And a struct array enumerator wouldn't not help, it will end up boxed to IEnumerator<T>.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70714336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70717514", "body": "@HaloFour OK, so it's like I said in my previous post, the claimed performance improvement would came from an enumerator which tries to cast back to array (or `IList<T>`). All clear.\n\nAs I shown in a previous post something like this also has to happen in the indexer. Let's not forget that methods like String.Format do not need to enumerate the params, they need to access them by index and they may access an index more than one time\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70717514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70981351", "body": "An array is a reference type, reference types can never be allocated on the stack because you may end up with references to objects that have been deallocated.\n\nStack allocation for reference types is possible as a JIT compiler optimization, it could stack allocate if it finds that the array reference is never stored in the heap or another place that would allow the use of the object after the function returns. Unfortunately this requires some rather expensive analysis and it's more likely to see such an optimization in a AOT compiler like .NET Native rather than in the traditional JIT compiler.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70981351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70986478", "body": "I'm not sure what in C++/CLI makes you think that you can stack allocate arrays. You seem to be drawing the wrong conclusion, that \"reference on the stack (using %)\" avoids GC allocations. And anyway, if this requires the callers to be marked unsafe it's kind of useless. unsafe has its good uses but C# is primarily a type safe language and that's not going to change.\n\nAs for reference counting & co. - it's probably easier to improve __arglist than go that way.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70986478/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70988810", "body": "What does stackalloc has to do with this? You cannot use stackalloc to store reference types.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70988810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70992482", "body": "Oh, the \"stack semantics\" thing. That terminology is misleading, it should be called \"scoped semantics\" as the feature has nothing to do with the stack. Reference types can never be allocated on the stack and C++/CLI doesn't do that. It just claims \"stack semantics\" because it calls Dispose on the object at the end of the scope in which the object variable was declared. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70992482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/71008349", "body": "You can do that but it's the same trick, A1 will end up on the GC heap and A will only store a reference to it. You need to separate language syntax and semantics from implementation details.\n\nI suppose it's technically possible to allocate reference types on the stack but neither the runtime nor the language currently allow this. Basically the reference types would have to be treated as value types and passed around by using C#'s `ref` which is already restricted to stack usage.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/71008349/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/71022444", "body": "I don't know what you have checked in memory but what you're describing is not possible. Maybe the B class from your example is a traditional C++ class instead of a C++/CLI `ref class`. That's a completely different story.\n\nAs for the rest of the stuff, we'll see. It's one thing to do that in a research project and it's another thing to do that in an existing language with millions of lines of library and application code already written. I'm not sure if you noticed but one of the authors of that paper, Jared Parsons, is now a member of the Roslyn team and even posted in this discussion. And Joe Duffy is now the director of the language group at Microsoft.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/71022444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/71049941", "body": "You didn't beat the array enumerator, your code simply avoids an allocation, the array. If you hoist the array allocation out of the loop in Test3/Array then you'll get similar results:\n\n```\nTest1:       00:00:04.3801256\nTest2:       00:00:04.2367054\nTest3:       00:00:04.7327582\nTest3/Array: 00:00:04.8988729\n```\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/71049941/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "codespare": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70369485", "body": "And re-reading myself I realize nuget also has an issue merrily upgrading Microsoft.Net.ToolsetCompilers 1.0.0-beta2-20141223-03 to Microsoft.Net.ToolsetCompilers 1.0.0-beta2-20141216-04 instead of Microsoft.Net.ToolsetCompilers 1.0.0-rc1-20150113-03... but the issue remains after rectifying that (and double checking the .csproj and the build output and restarting Visual Studio).\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70369485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "KevinRansom": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70373518", "body": "Hey Omer,\n\nPer \u2026 https://github.com/dotnet/roslyn/wiki/Building-Testing-and-Debugging  you should build, test and debug against the branch releases/Dev14Preview.\n\nThere is work currently underway will make master branch suitable for testing and debugging, however, currently our internal processes are so different from our open source ones that the OSS master branch will not work with the released toolsets.  Our goal is to have our Dev team using the exact same processes and tools as the OSS community, but, we are not quite there yet.\n\nI hope this helps,\n\nKevin\nFrom: OmerRaviv [mailto:notifications@github.com]\nSent: Saturday, January 17, 2015 7:20 AM\nTo: dotnet/roslyn\nCc: Kevin Ransom\nSubject: [roslyn] Build and Unit test failures in 'master' branch (#22)\n\nTo carry on the CodePlex discussionhttp://roslyn.codeplex.com/discussions/571919 with @MattGertzhttps://github.com/MattGertz and @KevinRansomhttps://github.com/KevinRansom, I'm still seeing many unit test failures on the GitHub master branch. I assume you are still working on this as part of the move to GitHub but I thought it might be helpful to report the issues I'm seeing right now.\n\nI created a clean VS2015 CTP5 machine on Azure today, installed the CTP SDK, cloned Roslyn (at the time master's HEAD was 7fed8e8https://github.com/dotnet/roslyn/commit/7fed8e8e946c080aa6daf5933effdf1b9e40d15c) and ran msbuild /m BuildAndTest.proj /p:DeployExtension=false.\n\nHere are the problems I saw:\n\nBuild Failure\n\nC:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v14.0\\VSSDK\\Microsoft.VsSDK.targets(760,5):     error : CreatePkgDef : error : FileLoadException: Could not load file or assembly 'OpenSourceDebug,    Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its    dependencies. Strong name validation failed. (Exception from HRESULT: 0x8013141A)   [c:\\dev\\roslyn\\Src\\Tools\\Source\\OpenSourceDebug\\OpenSourceDebug.csproj]\n\nI ran sn -Vr *,31bf3856ad364e35 to work around this.\n\nCrashes during test run\n\nWhen the tests run, for every test tries to launch the command line compiler (and there are many), a crash dialog pops up saying that \"VBCSCompiler has stopped working\" or \"csc.exe has stopped working\". I also got an error saying:\n\nUnhandled Exception: System.IO.FileLoadException: Could not load file or assembly 'csc,Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. Strong name validation failed. (Exception from HRESULT: 0x8013141A) ---\n\nAgain, this seems to be related to strong name validations, and this time the fact I SN -Vr'ed that same public key didn't help. To get past the crash dialogs, I manually deleted Roslyn.Compilers.CompilerServer.UnitTests.dll Roslyn.Compilers.CSharp.CommandLine.UnitTests.dll and Roslyn.Compilers.VisualBasic.CommandLine.UnitTests.dll, and then ran:\nmsbuild /target:test /m BuildAndTest.proj /p:DeployExtension=false\n\nRemaining unit test failures\n\nFinally, the resulting UnitTestResults.html filehttps://drive.google.com/file/d/0B_DL7JsBKCwiVkpjVFlTQ180ZDg/view?usp=sharing reported 2 unit test failures, while the command-line window consistently reported 39.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dotnet/roslyn/issues/22.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70373518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70378888", "body": "I expect it will be fine.\n\nAnd thanks for your contributions.\n\nKevin\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70378888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "am11": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70375867", "body": "@MadsTorgersen, \n\nBackward compatibility will certainly make things complicated here.\n\nIt is a syntactic sugar to state the intent, in pursuit of keeping the code compact and bring about DRY.\n\nThis decorator may replace the nicknames with the original counterparts at compile time and keep the IL isolated (from capturing this incident).\n\nThe idea really is to explicitly _tag_ the multifaceted parameter, without specifying the code comment at caller to describe its purpose.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70375867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70779580", "body": "Why not simply [embed the docx](http://windows.microsoft.com/en-us/onedrive/embed-files-website-blog) via onedrive in GitHub [repo's wiki](https://github.com/dotnet/roslyn/wiki)? \n\nSomething like:\n\n``` html\n<iframe\n  src=\"https://onedrive.live.com/embed?cid=...\"\n  width=\"100%\" height=\"100%\" frameborder=\"0\"\n  scrolling=\"yes\"\n></iframe>\n```\n\nI have seen this practice used on http://isocpp.org/ (for excel files) and some WordPress blogs.\n\nupload > right-click > embed > generate ..\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70779580/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "OmerRaviv": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70377166", "body": "Thank you for the clarification! I actually just finished porting my two pull requests from CodePlex to GitHub as per @Pilchie's request on Twitter, made sure they do not cause any failures on top of what was already failing, and was about to send them in. I assumed it would be more convenient to the team if I send them on master. I hope that's okay?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70377166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "Khazuar": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70381558", "body": "The choice of the wildcard-symbol is not that important. I agree that `_` may be a poor choice because it breaks backwards-compatibility and I like `*` just as much.\nPattern-matching might be an interesting feature, but I think this here might be something independent. It's nonetheless a good idea though to keep the wildcard-symbol consistent.\nI like the idea of having a way to also skip all following arguments, although I am not sure this increases readability in the end. An explicit symbol might be useful, so a reader knows there is some magic happening:\n\n``` csharp\nvoid Foo(Func<string> func) { ... }\nvoid Foo(Func<int, int, string> func) { ... }\nvoid Foo(Func<int, int, bool, DateTime, string> func) { ... }\n\nFoo(() => \"0\"); //->Calls first function\nFoo(* => \"0\"); //->Compiler error, no function with 1 argument available\nFoo((*) => \"0\"); //->Compiler error, no function with 1 argument available\n\nFoo(** => \"0\"); //->Calls second function\nFoo((**) => \"0\"); //->Calls second function\nFoo((i, *) => i.ToString()); //->Calls second function\nFoo((*, n) => n.ToString()); //->Calls second function\nFoo((i, **) => i.ToString()); //->Calls second function\n\nFoo((i, *, *) => i.ToString()); //->Compiler error, no function with 3 arguments available\nFoo((i, *, **) => i.ToString()); //->Calls third function\nFoo((i, *, *, *) => i.ToString()); //->Calls third function\nFoo((i, *, *, **) => i.ToString()); //->Calls third function\n\nFoo((i, *, *, *, *) => i.ToString()); //->Compiler error, no function with 5 arguments available\nFoo((i, *, *, *, **) => i.ToString()); //->Compiler error, no function with 5+ arguments available\n```\n\nThe `**` can therefore be used to skip all following (at least 1) parameters, choosing the function with the fewest arguments available. `**` can only be used as the last argument of the lambda.\n\nI actually have no problem with typing the wildcards. Of course the `**` can not be typed, but single-wildcards should not be a problem. This also avoids the ugly example of @HaloFour to be _that_ ugly. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70381558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "pdelvo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70426616", "body": "It works for me\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70426616/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "tenor": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70427234", "body": "@pdelvo Not working for me in the latest CTP (in the static Main method of a C# console application). It didn't work in the previous VS 2015 Preview either.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70427234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70672522", "body": "C# Pad uses the following types which are marked internal:\n- enum Microsoft.CodeAnalysis.CSharp.ErrorCode\n- class Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol\n- property Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GlobalUsings\n- class Microsoft.CodeAnalysis.DiagnosticBag\n- class Microsoft.CodeAnalysis.CSharp.DiagnosticBagExtensions\n- method Microsoft.CodeAnalysis.CSharp.DiagnosticBagExtensions.Add (All overloads)\n\nI added an `InternalsVisible` attribute to access them.\nChanging these types to have a public access modifier requires that so many other types are changed as well to resolve inconsistent accesibility errors.\n\nThe VB counterparts of these types will also need to be changed.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70672522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70686964", "body": "@DustinCampbell , I took another look and realized that `NamedTypeSymbol` and `GlobalUsings` are in some dead code that isn't referenced anymore.\n\nI do use `DiagnosticBag` and `ErrorCode` but only because I needed to reimplement the ScriptEngine.\nThe `ValidateReferences` method which is part of the ScriptEngine references these types.\nThis may no longer be the case when the official ScriptEngine is released.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70686964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70711840", "body": "Do these questions also apply for C#, or has that already been decided?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70711840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70721940", "body": "My opinion is that FormattableString should be preferred to string during overload resolution because FormattableString carries more information and IMO more useful than a string.\n\nLanguage intrinsic conversions and user defined conversions should apply to interpolated strings because developers should be able to think of interpolated strings simply as strings.\n\nI'm looking at it from a C# mindset. VB developers might have better thoughts.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70721940/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "paulomorgado": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70429478", "body": "It's working for me too.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70429478/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70463405", "body": "Other than the allocation and invocation of the delegate, what are the other benefits of local functions over lambdas or anonymous delegates?\n\nAs for the consuming source code, once you get the delegate, it's not much different than calling any method.\n\n```\nforeach(var item in (() => { ... yield return some stuff ... })())\n{\n    ...\n}\n```\n\nI don't think I ever wanted to do that on production code. Usually it's some LINQ query over an existing enumerable. But for test code, that could be useful.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70463405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70463767", "body": "Other than the allocation and invocation of the delegate, what are the other benefits of local functions over lambdas or anonymous delegates?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70463767/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70492699", "body": "@axel-habermaier,\n\nWould you care to elaborate on that conceptual clarity?\n\nWhat is more conceptual clear in this:\n\n```\nvoid M()\n{\n    int m() => 0;\n    ...\n    var i = m();\n}\n```\n\nthan here:\n\n```\nvoid M()\n{\n    Func<int> m() => 0;\n    ...\n    var i = m();\n}\n```\n\n?\n\nDon't get me wrong, I'm ALL for conceptual clarity.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70492699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70497030", "body": "@FlorianRappl,\n\nThis is not intended to please the ones that don't like `var d = new Dictionary<string, List<int>>();`. They'll probably like this even less:\n\n```\nDictionary<string, List<int>> d;\n...\nd = new();\n```\n\nI don't expect the compiler to read the developer's mind or beyond that.\n\nThis would only be possible if the type of the variable/parameter/field has a publicly accessible constructor with that signature.\n\nThis wouldn't be possible:\n\n```\nIDictionary<string, List<int>> d = new();\n```\n\nOverload resolution would be a bit harder but not impossible.\n\nAs for readability, I don't think it's worth than other cases we already have.\n\n@thomaslevesque,\n\nHow would that work for `Foo(new Bar{ X = 42 })`? It would be a call to `void Foo(Bar bar)`, right?\n\n`T` in `void Foo<T>(T arg)` is not a type, it's a type parameter. There are two implementation decisions that can be made here. Either the compiler doesn't try to bind to `void Foo<T>(T arg)`, because it's missing information to do so, and just tries to bind to `void Foo(Bar bar)`; or it doesn't try at all.\n\n@dsaf, I don't know. It would be inferring the type of the parameter from the method definition. Not inferring the return type of anything.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70497030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70505356", "body": "I'd which there was a website we could link to.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70505356/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70513145", "body": "@sharwell,\n1. You \"can\" write recursive anonymous methods using lambdas:\n   \n   Func<int, int> f = null;\n   f = (i) => i == 0 || i == 1 ? 1 : i \\* f(i - 1);\n   \n   var x = f(5)\n2. Do you really believe that it will be accepted that local functions won't be able to close over function parameters and function local variables? Won't that cause confusion for the average developer?\n\n@axel-habermaier,\n\nOther than delegate allocations, what's the practical difference? And I'm not even assuming that most of the local functions/anonymous methods are used to close over locals and to pass along as a delegate.\n\nI think a lot of assumptions are being made about the implementation. I'm assuming that the difference between a local function and an anonymous method is the lack of the need for a delegate. I assume it will implemented just the same way.\n\nMaybe it was a bad decision the name the generated methods based on the type name instead of the function name.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70513145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70571802", "body": "Oops! Missed that one. I don' think we can get around that one.\n\nEven if we could come up with an alternative to anonymous types (`new ?{ X = 42 }`) that would still be a breaking change.\n\nSomething like `new !{ X = 42 }` to indicate a non anonymous type would look ridiculous.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70571802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70573154", "body": "Oh, that! Now I see it too.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70573154/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70578234", "body": "I wonder why it no longer works. I don't see the usefulness of this, but it should work.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70578234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70583796", "body": "@axel-habermaier, like [I said before](#issuecomment-70492699), \"Don't get me wrong, I'm ALL for conceptual clarity.\"\n\nFor those use cases that a delegate is not needed, it makes a lot more sense to have local functions. Recursion is also a valid use case - even if a delegate is needed.\n\nSo it comes down to:\n1. Conceptual clarity\n2. Ocasional delegate allocation and invocation.\n\nThat's enough for me.\n\n@sharwell, how strongly do you feel that closures should not be possible for local functions?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70583796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70584796", "body": "According to [\"nameof operator - v5\"](https://roslyn.codeplex.com/discussions/570551), it should work.\n\nAnd it works for `U`.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70584796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mysticatea": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70441579", "body": "I'm looking forward to the news.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70441579/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "FlorianRappl": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70467881", "body": "How is this readable? I see people complaining that\n\n```\nvar d = new Dictionary<string, List<int>>();\n```\n\nis not readable (which I can't understand at all, as the full information is on the line -- it just avoids duplication). So the provided one wouldn't satisfy these guys, I guess.\n\nBut okay, now to your second point: If I just omit the possibility of having overloads (and how that should be handled) then I don't see how this is more readable at all. First it looks like an anonymous class instance, which is a false friend (and how this ambiguity should be handled is also unclear). Second, even if some constructor is used, we need to know the available method signatures for knowing which constructor to call. Therefore no one can read the code just from that one line.\n\nSo what are my doubts?\n- Overload resolution\n- Readability (especially in combination with method calls)\n- Clash with anonymous objects\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70467881/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "thomaslevesque": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70468353", "body": "I don't like the fact that it clashes with anonymous objects. In the case you show with `XmlReaderSettings`, there is no ambiguity, but what about this?\n\n```\nvoid Foo(Bar bar);\nvoid Foo<T>(T arg);\n\nclass Bar { public int X { get; set; } }\n```\n\nIf I write `Foo(new { X = 42 })`, am I calling `Foo(Bar)` or `Foo<T>(T)`?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70468353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70502992", "body": "> How would that work for `Foo(new Bar{ X = 42 })`? It would be a call to void Foo(Bar bar), right?\n\nYes, but in this case you explicitly specify the type, so it's obvious you want to call the one that takes a `Bar`. But if you use `Foo(new { X = 42 })`, with your proposal both methods are valid candidates, when currently only the generic one is valid. This adds another case where the compiler must either fail with an ambiguous match error, or make a decision that might not be obvious to the developer.\n\n> T in void Foo<T>(T arg) is not a type, it's a type parameter. There are two implementation decisions that can be made here. Either the compiler doesn't try to bind to void Foo<T>(T arg), because it's missing information to do so, and just tries to bind to void Foo(Bar bar); or it doesn't try at all.\n\nBut currently the compiler _does_ bind to `Foo<T>(T arg)` if you pass an anonymous type... If you change that, you break a _lot_ of existing code.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70502992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "dsaf": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70470748", "body": "It seems that people want (this and other inference discussions) elements of Hindley-Milner, but not the total way it was implemented in F#.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70470748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70471075", "body": "Docx is an open standard and there is a free viewer available:\n\nhttp://en.wikipedia.org/wiki/Office_Open_XML\n\nhttp://www.microsoft.com/en-us/download/details.aspx?id=4\n\nhttp://superuser.com/questions/141435/is-there-anything-to-open-docx-documents-on-linux-ubuntu\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70471075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mburbea": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70516605", "body": "Isn't varargs already available via the `__arglist` keyword? And unless I'm mistaken this method was much slower than taking a `params object[]` but probably more memory efficient.  \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70516605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70518987", "body": "Yeah, it like `__makeref` and `__reftype` and `__refvalue` are part of a set of secret keywords in VS. I'm not sure if Mono, Roslyn or other compilers support them. Yeah, they are completely undocumented But my guess is that is how the secret overloads of `Console.WriteLine` and `string.Concat` were written. I'm assuming in managed C++ .net 1.1 there were some more efficient means of dealing with these varargs methods, but even they were pretty much deprecated and it has always been nearly impossible to find anything on this feature set of the CLR. I'm still annoyed there is no version of `IlGenerator.Call` that works with constructors with varargs. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70518987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70521423", "body": "Is it `__arglist` or the `argiterator` struct that are slow? I've never really seen anything conclusive on the matter. And I've read, though never seen that in C++ you apparently could avoid the iterator entirely. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70521423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70546363", "body": "@HaloFour , But at the same point, unless you are writing some very high specialized code like LINQ where you have optimized paths for different type of `IEnumerable<T>`, its very uncommon to actually inspect the underlying type of an `IEnumerable<T>`. \n\n@mikedn, But boxing is always the problem if you have incompatible types. If you need different types and presumably need different handling for said type, you have no choice but to box. As for the rest of your points I'm not sure. \n\nI like that @jaredpar 's idea as it help solves the extra overloads problem that my original suggestion was getting at.\ne.g.\n\n```\nvoid SomeMethod(T item1, T item2)\nvoid SomeMethod(params T[] items)\nvoid SomeMethod(IEnumerable<T> items)\n```\n\nUnder Jared's model this would be one method with one implementation. I also agree that IDisposable is very useful on enumerators. Especially those generated from `yield return`. Sometime s you want to tie resources lifecycle to iteration.  \nI think `TryGetNext` isn't bad but I'd probably want to still keep the abstraction of a Enumerator<T>. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70546363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70682538", "body": "I just tested and the slow part seems to be the `ArgIterator`. Calling a method with __arglist on its own is actually pretty fast Instantiating the iterator is horribly slow. They seem to be calling some native code on instantiating that does all the handling.  Unfortunately, C# is extremely cautious about letting you mess with the `RuntimeArgumentHandle`. C# won't let you box or turn it to a valuetype. I imagine if you can extract the pointer you might be able to parse arguments if you know what your doing in a wildly unsafe manner. I suppose with some IL you might be able to pull it off but C# isn't convinced that you can write a delegate that takes an Arglist. Edit: You can write a delegate that takes a RuntimeArgumentHandle. It can't be generic either as they can't be boxed and thus can't be used as a generic arg. \nHere is a method to get the PointerValue if anyone wants to play...\n\n``` csharp\npublic delegate IntPtr GetPtrType(RuntimeArgumentHandle a);\npublic GetPtrType GetPtr = new Func<GetPtrType>(()=>{\nvar dynamicMethod = new DynamicMethod(\"name\", typeof(IntPtr),\n                new[]{typeof(RuntimeArgumentHandle)}, true);\n            var ilgen = dynamicMethod.GetILGenerator();\n            ilgen.Emit(OpCodes.Ldarga_S, 0);\n            ilgen.Emit(OpCodes.Call,\n                typeof(RuntimeArgumentHandle).GetMethod(\"get_Value\", BindingFlags.NonPublic | BindingFlags.Instance));\n            ilgen.Emit(OpCodes.Ret);\n            var func = dynamicMethod.CreateDelegate(typeof(GetPtrType)) as GetPtrType;\n            return func;\n}.Invoke();\n```\n\nI'm not sure what you can do with it but maybe somebody can write some unsafe code to parse out values. \n\nUsage\n\n``` csharp\nstatic IntPtr GetThePtr(__arglist){\n     GetPtr(__arglist);\n   }\n```\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70682538/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70691629", "body": "@HaloFour , when I'm at the point where I'm taking variadic arguments I rarely will be doing much differently then with one argument or N arguments.e.g.`DoSomething(arg1)` vs `foreach(var arg in args){ DoSomething(arg)}` I'm after that easier calling convention. Perhaps I could avoid the loop, but this type of code usually isn't the bottle neck of performance for me. \n\nI probably would use it like `params IEnumerable<T>` as long as Arguments implements `IEnumerable<T>` and the compiler would handle the conversion itself. Can the jit put structs like this into registers or is that a bridge too far?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70691629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70692680", "body": "Is there anyway to get that data via stackcrawls? Or is that what is so horribly slow?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70692680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70711822", "body": "I think he means array enumerators aren't the fastest. e.g.\n\n```\nvoid SomeFunc(T[] args){\n   foreach(var a in args){ DoSomething(a)};\n}\n```\n\nwill actually get compiled as a for loop to avoid creating an enumerator. If you instead change the signature to `IEnumerable<T>` it'll actually be slower than if you past it a `List<T>`. This has something to do with the `SzArrayHelper` jit stuff last I read about it on stackoverflow. \nIt's too late now but is there any reason that the array enumerator isn't a struct one?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70711822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70915590", "body": "That's pretty great. Very similar to python's `**kwargs` and would solve most of my needs and be a nice boon to APIs that need this type of functionality.  However, like the previous discussion if the usage is primarily for iterating and with a small number of arguments it might be worthwhile to create something more specialized.  Dictionaries are pretty lightweight but certainly an object with an array of KeyValuePairs would be cheaper.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70915590/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70917375", "body": "If I wore my DBA hat, I'd groan at the idea of replacing an rpc to `sp_executeSql` to a `FormattedString` that is potentially susceptible to sql injection.  I think formattedString is really cool and will help in general, but I see this still as a useful construct for sql. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70917375/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/71043045", "body": "Actually just a quick set of trails, Array seems really fast when passed to a method that takes an `IEnumerable<T>`. Even for a small number of arguments ( I tried 2 3 and 4) It won every time.  I suppose it may not be the best from a memory perspective but its hard to beat unless you change the signature from `params IEnumerable<T>`. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/71043045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/71050951", "body": "Do you mind using a gist? I did the following and I came to the conclusion that arrays seem to be a winner most of the time. I wrote these quickly so they may not be the best struct enumerators possible. \n\n```\nCallWithArray     :    527ms\nCallWithList      :   1301ms\nCallWithArg2      :    677ms\nCallWithArg2Unsafe:    638ms\n```\n\nMy times with this gist::\nhttps://gist.github.com/mburbea/683f74ff5cc589d512c5\nThis is doing 1<<24 iterations so quite a good bit. Every method calls the sum method taking 2 bytes and using an enumerator to sum them. Even an unsafe buffer was slower than an array. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/71050951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "balajikris": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70555007", "body": "this looks very similar to another issue we were tracking internally (1084052, where it showed up during a rename in project buffer scenario). from my notes in the bug \"the issue is that we're using a recoverable syntax tree and text for an open document, whereas we should always be using a strong version of tree and text if the document is open in the editor\".. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70555007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70710904", "body": "Looks like our current design sets the focus to the dashboard in such a scenario.\n\nthe command handler has a comment and a piece of code to do this:\n// If there is already an active session, focus its dashboard;\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70710904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/12425572", "body": "do we still need to hold onto the condition (NetFx20 & CSharp) - for it may work in the future? \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12425572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12426007", "body": "Thanks for explaining - LGTM.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12426007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/13372218", "body": "@heejaechang you probably need to sync closed as well? I made a corresponding change to closed. PR 172 in internal repo\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/13372218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/13378234", "body": "I still think something is out of sync on your box. Builds clean on my box after fetching latest from repo.. also jenkins builds are passing. Lets take this offline and figure out what's amiss.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/13378234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/13647294", "body": "@DustinCampbell @Pilchie : tagging for any early feedback and also as FYI. I'm still trying this out and adding tests..\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/13647294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/13647691", "body": "sure, in cases of pressing shift enter after typing open parenthesis to open a block, assuming brace completion is on, we produced code like this:\n\ninitial:\n\n``` C#\ntry { |}\n```\n\nfinal:\n\n``` C#\ntry { }\n|\n```\n\nbasically, in such a case, we didn't have anything to complete the line (like a semicolon that we need to insert), yet we handled it anyway and inserted a Newline after the block and positioned caret on the next line.\n\na better output here could be what we produce on enter:\n\n``` C#\ntry \n{\n    |\n}\n```\n\nthe implementation is simple: detect cases like this and delegate the command to the editor whose default implementation is exactly what we need.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/13647691/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/13647695", "body": "also see: http://stackoverflow.com/questions/32259287/visual-studio-2015-brackets-not-automatically-formatting-when-pressing-shift\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/13647695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16368685", "body": "Cyrus hinted that one could possibly use `IsSpecialType` for this in my PR. IsSpecialType however also returns true for void, string and object - which you may or may not want. I'll leave it to you to decide if you want to add this or use IsSpecialType. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16368685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "controlflow": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70555863", "body": "Hm, I'm checking this with 08 of January 'master' branch:\n\nhttp://tryroslyn.azurewebsites.net/#b:master/MYGwhgzhAEDC0G8BQ1XWAewHYQC7TwCcBLLAc2gDloBeaLMAWwFMMAzACkoEoBuJAL5AAA==\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70555863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70570002", "body": "Yep, it works in CTP4: http://tryroslyn.azurewebsites.net/#b:releases-Dev14CTP4/MYGwhgzhAEDC0G8BQ1XWAewHYQC7TwCcBLLAc2gDloBeaLMAWwFMMAzACkoEoBuJAL5AAA==\n\n```\nvar x = nameof(x);\n```\n\nAlso works in CTP4, but fails to compile with current 'master'\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70570002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70587540", "body": "Ugh, according to examples from v5 spec, maybe this is not a bug...\n\n``` c#\n[Foo(nameof(T))] void f<T> { }\n// result error \"T not defined\": A method type parameter is not in scope in an attribute on that method\n```\n\n``` c#\nvoid f([Attr(nameof(x))] int x) {}\n// result error \"x is not defined\": A parameter is not in scope in an attribute on that parameter, or any parameter in the method\n```\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70587540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70587679", "body": "Accidentally closed the issue :/\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70587679/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/9697549", "body": "YAAAY!\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/9697549/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/9870657", "body": "Unfortunately, checking for outer `ParenthesizedExpression` is not enough.\nActually, counting depth of three kinds of parentheses (`()`, `[]` and `{}`) affects lexing of string interpolation argument expression and format specifier. All this expressions are valid without any extra parenthesizing:\n\n``` c#\n$\"{Invocation(b ? x : y)}\"\n$\"{checked(b ? x : y)}\"\n$\"{() => { return b ? x : y }}\"\n$\"{Indexer[b ? x : y]}\"\n```\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/9870657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "theoy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70584732", "body": "@Vsadov - any context on why this is commented instead of deleted?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70584732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70759762", "body": "I think it already has the VB tag, right?\n\nAm I confused about something?\n\nCheers,\n--Theo\n\nFrom: Adam Speight [mailto:notifications@github.com]\nSent: Tuesday, January 20, 2015 3:21 PM\nTo: dotnet/roslyn\nCc: Theo Yaung\nSubject: Re: [roslyn] Feature Request: Recursive Iterators (non-quadratic) (#15)\n\n@theoyhttps://github.com/theoy Co-Evolution? Why no VB.net tag?\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dotnet/roslyn/issues/15#issuecomment-70755229.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70759762/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ljw1004": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70716563", "body": "C# had already decided to do basically the same thing.\n\nC# doesn't have the same type inference for array literals, so that part doesn't apply. C# also has a different generic-method type-inference algorithm but it gives pretty much the same behavior. C# also doesn't use delegate-relaxation-levels in the same way. C# also has never accepted full-width characters so that doesn't apply.\n\nThe only concrete change we want to make to C# as a result of this meeting is to improve the error reporting if the factory is bad in some way.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70716563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/18288874", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/18288874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "MattGertz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70721786", "body": "As Dustin says, we'll have more to say on all of this Real Soon Now.  Lotsa other stuff has been taking all of our cycles, keeping us from writing out a cogent plan here, but we're starting to get some breathing room now for that.  Apologies for the delay!\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70721786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "MrJul": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70846421", "body": "Personally, I've needed `SymbolEquivalenceComparer`, it's the only way to correctly compare two symbols across compilation units, and it's unfortunately internal. `ITypeSymbolExtensions` could be public too, as it's mostly using already public API. Rewriting methods such as `IsNullable`, `IsNumericType` or `GetBaseTypes` is easy, but why should we when it's already here?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70846421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "matwilko": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70900054", "body": "Love this idea :+1:\n\nMy ten cents on how to somewhat simplify the idea so that the problems of eager/lazy initialization hopefully go away is to just restrict the semantics of the declaration to mean that it is a private instance/static field on the class, but lexically scoped only to the method.\n\nThis makes the hoist completely trivial - just give it an \"unpronounceable\" name - and the compiler rewrites references to it with the new name in the method.\n\nIt also solves the initialization problem as the semantics are the same with any other instance/static field. If there is an initializer, the restrictions on it are the same as for regular initializers, and it is run at the same time as other instance/static initializers.\n\nIf there isn't an initializer for non-readonly fields, it's up to the method to do any necessary initialization and locking etc. if thread safety is required. Alternatively, constructors could be allowed to set the field via MethodName.fieldname = blah; , much like they can for get-only auto-props now, although this falls apart when more than one overload uses an identically named method-local field :/\n\nIf the developer wants lazy semantics for the field - it's just the same as with a \"normal\" field, declare it as type Lazy<T>, and refer to field.Value in the method.\n\nMulti-threaded scenarios are also explicitly not handled, as is the case with normal fields.\n\nI think all this fulfils the principle of least astonishment better as the syntactic sugar is incredibly thin, and it means that we get better scoping without having to worry about some complicated codegen going on underneath (which could change assumptions about things like memory use/locality etc.)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70900054/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70907015", "body": "Don't we then reintroduce the problem of making it harder for the developer to know easily at a glance when the field is going to be initialized? And what if I explicitly don't want the lazy semantics?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70907015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "MgSam": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70926816", "body": "I think the biggest benefit of anonymous iterators hasn't been mentioned yet, which is to combine the argument checking and iterator body into a single method.\n\n``` C#\npublic IEnumerable<T> Where<T>(this IEnumerable<T> enumerable, Func<T, bool> filter)\n{\n    if(enumerable == null) throw new ArgumentNullException();\n    if(filter == null) throw new ArgumentNullException();\n\n    Func<IEnumerable<T>, Func<T, bool>, IEnumerable<T>> iter = (enumerable, filter) => \n    {\n          foreach(var item in enumerable)\n              if(filter(item)) yield return item;\n    }\n    return iter(enumerable, filter);\n}\n```\n\nMuch nicer than having separate methods. A local named function would also work well.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70926816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "xen2": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70973953", "body": "Probably too much to change/implement, but maybe that could work.\n\nJust wondering:\n- CLR allows you to have reference on the stack (using %), avoiding GC alloc (it is only on the stack).\n- CLR doesn't allow you to have array/string on the stack (error C3699: '%' : cannot use this indirection on type 'cli::array<System::String ^,1>')\n\nHowever, since array size is constant, it would probably be fine to allow it and use the stack (even if dynamic size _alloca() could work on small values; maybe a if (arraySize < 16) _alloca else GC_alloc()).\n\nThen, any small fixed size array that is not shared (as the ones used with `params`) could be allocated directly on the stack, avoiding any allocation.\n\nStack allocated objects would then need to be mapped to C# somehow (maybe using same syntax, MyType%?).\n\nIt could also open the door to many other optimizations.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70973953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70984783", "body": "I agree that this not safe, but it is definitely possible (as an example, C++/CLI allows you to do so, so it can be expressed in terms of MSIL).\n\nOf course, it should only be allowed inside an unsafe block.\n\nOr better, have something similar to https://wiki.gnome.org/Projects/Vala/ReferenceHandling : have \"owned\" pointer to make it safe (easy to know if somebody borrow a reference).\n\nAnd as you said, it can also be an automatic optimization when it can proven to be safe.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70984783/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70990215", "body": "It does allocate on the stack (MS named it the \"stack semantic operator\") and you don't have to use gcnew but directly the value type ctor like a struct, without even a \"new\": https://msdn.microsoft.com/en-us/library/ms177191.aspx \n\nIt doesn't work on arrays/string in C++/CLI (because they have variable size), but it _could_ be possible for MS to technically support it (using _alloca()).\n\nI definitely agree it is not safe (except if you can guarantee reference are \"owned\" with additional keyword, similar to Vala, or MS research http://research.microsoft.com/pubs/170528/msr-tr-2012-79.pdf ).\n\nJust wanted to mention this would avoid most drawbacks of params.\nIf not supported at language level, it could still be done internally by JIT/AOT (but could be quite heavy as you mentioned).\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70990215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70995021", "body": "Right, my bad, sorry for the confusion.\n\n``` csharp\nref class A\n{\npublic:\n    B A1; // Edit: Looks like inside the class, but it's not\n    B^ A2;\n};\n```\n\nEdit: Thought first A1 was inside the class, but it actually is NOT inside (despite a modreq(IsByValue) in IL, and misleading C++ syntax).\nI assumed it was possible in class, and inside a function would be same, but it's not the case in both case.\n\n``` csharp\nint main(array<System::String ^> ^args)\n{\n    Object% a1 = Object(); // This is actually allocated with an indirection\n    Object^ a2 = gcnew Object();\n}\n```\n\nHowever, I was wondering, is anything really preventing such ref to be allocated directly on the stack? (as long as GC knows about it, and ref to stack is not transferred outside of scope)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70995021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/71010700", "body": "~~A1 is actually embedded inside A (I checked the memory). Since both are still in GC heap, it's probably not a problem. That's why I thought stack % was doing the same.~~ Edit: Actually it's not\n\nConcerning ref stack alloc, I meant allocating like a value type on the stack but still include vtable (like A1) and pass this stack pointer around like a normal reference. Basically it would just replace GCalloc by stack alloc.\nIt would work with any function (no need for `ref`) as long as:\n- no ref to it are kept after stack is removed (unsafe)\n- GC understand that values in stack space should be traced but not reclaimed (since not in GC heap)\n\nThis could be quite useful for LINQ, params and many custom scenario that were usually avoided in game engine dev due to unecessary GC pressure (sometimes it is hard to avoid allocating, esp. BCL internals).\n\nI might try to experiment this feature later in https://github.com/xen2/SharpLang\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/71010700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/71011354", "body": "Of course the implementation I proposed is part of the \"unsafe\" realm, but could be made safe if ownership concept was added to the language (same as Vala or MS research http://research.microsoft.com/pubs/170528/msr-tr-2012-79.pdf ).\n\nNote that http://joeduffyblog.com/2013/12/27/csharp-for-systems-programming/ mentions it in first point: \"We\u2019ve stolen a page from C++ \u2014 in areas like rvalue references, move semantics, destruction, references / borrowing \u2014 and yet retained the necessary elements of safety, and merged them with ideas from functional languages. This allows us to aggressively stack allocate objects, deterministically destruct, and more.\". I guess it is probably something similar.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/71011354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/71033361", "body": "Sorry, after careful checking, seems it is in fact not laid out in memory inside the class (despite the modreq(IsByVal) being emitted in MSIL -- syntax and IL can be deceiving!). Must have checked too quickly the memory and since both instances were close in memory, I didn't see there was more in between.\n\nConcerning stack alloc of ref types, of course I didn't say it would be good to add in roslyn and commercial project (lot of implications and corner case to deal with when adding such a language feature -- note: unsafe feature is probably much easier to add than a safe one though).\nMostly wanted to have some advices/opinions on such an idea and discuss it, and possibly later try some experimentation, nothing more. Esp. because I know people that already played with such ideas are here, I thought it would be a good place to ask.\n\nNote: updated previous post to strike out the wrong assumptions. Thanks for pointing it out, I really thought it was laid out differently in memory.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/71033361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "d-kr": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70986779", "body": "https://msdn.microsoft.com/en-us/library/cx9s2sy4.aspx\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/issues/comments/70986779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "davidfowl": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/9579306", "body": "looks like tabs. Also looks like you're compiling against .NET 4.6?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/9579306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10068220", "body": "@tmat one problem is that JSON.NET can no longer serialize CSharpCompilationOptions.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10068220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10068229", "body": "```\nError: [ApplicationContext]: Error occured: System.InvalidOperationException: This operation cannot be performed on a default instance of ImmutableArray<T>.  Consider initializing the array, or checking the ImmutableArray<T>.IsDefault property.\n   at System.Collections.Immutable.ImmutableArray`1.ThrowInvalidOperationIfNotInitialized()\n   at System.Collections.Immutable.ImmutableArray`1.System.Collections.IEnumerable.GetEnumerator()\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(JsonWriter writer, IEnumerable values, JsonArrayContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeValue(JsonWriter writer, Object value, JsonContract valueContract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(JsonWriter writer, Object value, JsonObjectContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeValue(JsonWriter writer, Object value, JsonContract valueContract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(JsonWriter writer, Object value, JsonObjectContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeValue(JsonWriter writer, Object value, JsonContract valueContract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(JsonWriter writer, Object value, JsonObjectContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeValue(JsonWriter writer, Object value, JsonContract valueContract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.Serialize(JsonWriter jsonWriter, Object value, Type objectType)\n   at Newtonsoft.Json.JsonSerializer.SerializeInternal(JsonWriter jsonWriter, Object value, Type objectType)\n   at Newtonsoft.Json.Linq.JToken.FromObjectInternal(Object o, JsonSerializer jsonSerializer)\n   at Newtonsoft.Json.Linq.JToken.FromObject(Object o)\n\n```\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10068229/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14183220", "body": "Why don't you guys just implement https://github.com/dotnet/roslyn/issues/1171 :smile: \n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14183220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16947002", "body": "how does this still work?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16947002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16947014", "body": "pretty sure these TFMs need to change\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16947014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "mstrobel": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/10080505", "body": "This could interfere with LINQ queries where the query provider supports `NewArrayInit` expressions but not arbitrary `Call` expressions.\n\nConsider the snippet below.\n\n```\npublic class C {\n    public void M() {\n        Expression<Action<F>> e = f => f();\n    }\n\n    public delegate void F(params int[] args);\n}\n```\n\nThe compiler would rewrite `M` as something like this:\n\n```\npublic void M()\n{\n    var p = Expression.Parameter(typeof(C.F), \"f\");\n    Expression.Lambda<Action<C.F>>(\n        Expression.Invoke(\n            p,\n            Expression.Call(null, methodof(System.Array.Empty()))),\n        p);\n}\n```\n\nWithout the `Array.Empty<T>()` optimization, the LINQ expression tree emitted would not contain any `Call` expressions.\n\nCredit to @controlflow for realizing the problem.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/10080505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "Ark-kun": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/11017500", "body": "Can you please explain why you replaced this property with a method? This goes against the guidelines, so I really want to learn the reason.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/11017500/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "wschae": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/11056093", "body": "I meant to update this one but forgot.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/11056093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "taspeotis": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/11101246", "body": "FYI, the build is broken\n\nhttp://dotnet-ci.cloudapp.net/job/dotnet_roslyn_windows/930/consoleFull#923032420a82fefab-f698-416f-8fca-58544c94cd4e\n\n> Implementation\\Interop\\WrapperPolicy.cs(22,43): error CS0246: The type or namespace name 'IComWrapperFactory' could not be found (are you missing a using directive or an assembly reference?) [d:\\j\\workspace\\dotnet_roslyn_windows\\Src\\VisualStudio\\Core\\Def\\ServicesVisualStudio.csproj]\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/11101246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "tannergooding": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/11223134", "body": "Reverted the rest of the original commit with f622717227b79be6b29610f60533ed237a4bb922\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/11223134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16897770", "body": "This has broken the signed build, because `%VSINSTALLDIR%` is only available from the developer command prompt. However, `$(VS140COMNTOOLS)` is available from the normal command prompt.\n\nI'm still trying to figure out why it wasn't failing on the old signed build machines before today (as the failure is now repro'ing on the original signed build machines as well as their replacements).\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16897770/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/20161359", "body": "The documentation for this will probably do a better job explaining it than I could (see below). It doesn't look like we use it directly here and it could probably be removed. However, we may use it in other locations, in which case it would still cause an issue (but only in those command files). You should be able to remove this line and see if it things start working for you.\r\n\r\n>Delayed environment variable expansion is useful for getting around\r\n>the limitations of the current expansion which happens when a line\r\n>of text is read, not when it is executed.  The following example\r\n>demonstrates the problem with immediate variable expansion:\r\n>\r\n>    set VAR=before\r\n>    if \"%VAR%\" == \"before\" (\r\n>        set VAR=after\r\n>        if \"%VAR%\" == \"after\" @echo If you see this, it worked\r\n>    )\r\n>\r\n>would never display the message, since the %VAR% in BOTH IF statements\r\n>is substituted when the first IF statement is read, since it logically\r\n>includes the body of the IF, which is a compound statement.  So the\r\n>IF inside the compound statement is really comparing \"before\" with\r\n>\"after\" which will never be equal.  Similarly, the following example\r\n>will not work as expected:\r\n>\r\n>    set LIST=\r\n>    for %i in (*) do set LIST=%LIST% %i\r\n>    echo %LIST%\r\n>\r\n>in that it will NOT build up a list of files in the current directory,\r\n>but instead will just set the LIST variable to the last file found.\r\n>Again, this is because the %LIST% is expanded just once when the\r\n>FOR statement is read, and at that time the LIST variable is empty.\r\n>So the actual FOR loop we are executing is:\r\n>\r\n>    for %i in (*) do set LIST= %i\r\n>\r\n>which just keeps setting LIST to the last file found.\r\n>\r\n>Delayed environment variable expansion allows you to use a different\r\n>character (the exclamation mark) to expand environment variables at\r\n>execution time.  If delayed variable expansion is enabled, the above\r\n>examples could be written as follows to work as intended:\r\n>\r\n>    set VAR=before\r\n>    if \"%VAR%\" == \"before\" (\r\n>        set VAR=after\r\n>        if \"!VAR!\" == \"after\" @echo If you see this, it worked\r\n>    )\r\n>\r\n>    set LIST=\r\n>    for %i in (*) do set LIST=!LIST! %i\r\n>    echo %LIST%", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/20161359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "pharring": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/12138008", "body": "I don't think I can predict that. It could just as easily make it worse.\nLeave it the way it is for now, but add a comment here indicating that we could, if necessary, sort the blobs by heap offset.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12138008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12138059", "body": "I think you need to set `writer.Position` to `writer.Length` (or just seek to the end) here before writing the size bytes because there's no guarantee that the last entry written will be at the end.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/12138059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "SamB": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/14107012", "body": "Will this make a nice link to here on https://github.com/NuGet/Home/issues/1471 ?  _[Answer: it did!]_\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14107012/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "i3arnon": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/14264776", "body": "Is there a reason the new `TaskCreationOptions.RunContinuationsAsynchronously` can't be used here instead of `Task.Run` (i.e. `new TaskCompletionSource<TElement>(TaskCreationOptions.RunContinuationsAsynchronously)`)?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14264776/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "leppie": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/14607980", "body": "Getting this now...\n\n```\nd:\\roslyn\\roslyn>Restore.cmd\nRestoring packages: Toolsets\nRestoring packages: Samples\nRestoring packages: Roslyn (this may take some time)\nCould not find a part of the path 'd:\\roslyn\\roslyn\\Roslyn.slnRoslyn.sln'.\n```\n\nThe line should be:\n\n```\ncall %NugetExe% restore -verbosity quiet \"%RoslynSolution%\" -configfile \"%~dp0nuget.config\"\n```\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14607980/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14609999", "body": "Fine now, thanks :) Did you have an environment variable set maybe?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14609999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14945839", "body": "restored\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/14945839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "joeduffy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/15164288", "body": "Is this a known bug?  If y, can you link to it?  (as in #coreclr/1234)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15164288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "Phrohdoh": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/15168941", "body": "This still exists and I have added a `Restore.sh` ~~(because I am no longer able to compile using the Makefile)~~.\n\nI am running into various issues:\nhttps://github.com/NuGet/Home/issues/1874#issuecomment-167449374\nhttps://github.com/NuGet/Home/issues/1875#issue-124001862\n\nOnce those are resolved I can fix this as part of that PR, if it isn't done before then.\n\n**Edit**: I lied! not intentionally, but I did lie.\nThe makefile is fine and my sh script may not be needed.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/15168941/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "atanasmihaylov": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/16229982", "body": "`[](`https://github.com/dotnet/roslyn/commit/b91ce33bb8d7f707bb2b60237e850626408f140e#diff-be69ed459f2579d7cab796591c445808```)`\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16229982/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "AArnott": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/16380089", "body": "Hi @jaredpar: Rather than manually parse the log looking for what might be warnings, you can have MSBuild create multiple log files: one for just errors, one for just warnings, one for the regular log. Then you can simply check that the error and/or warning files are empty to be certain that none were emitted. \n\nSee https://github.com/AArnott/pinvoke/commit/65f04e9ed8a00d73e40fdd0085d2c1426de78a21\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16380089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16392174", "body": "No arguments there.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/16392174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/21053836", "body": "@VSadov  How was it that this public interface had a member added to it? Adding members to interfaces is a breaking change. And right now, it's breaking me, and I'm not even implementing it. I'm not sure what's going on yet, but on CoreCLR when I'm hosting all the Roslyn dll's (v1.3.1) *something* thinks this member should be here, and in v1.3.1 it isn't. So I'm getting a crash with a TypeLoadException.\r\n\r\nWhy is such a breaking change allowed?", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/21053836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/21053840", "body": "I figured out why it's breaking me: For some reason (the one mentioned in https://github.com/Microsoft/msbuild/issues/1737 in fact, which is I can't provide AppDomain isolation) MSBuild Core is mixing the Roslyn DLLs it ships with, with the ones my MSBuild Task ships with, so we have a binary incompatibility here due to the breaking change.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/21053840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/21054250", "body": "Makes sense. But as I said, in this case, it's Roslyn breaking itself -- not because any 3rd party implemented the interface. :frowning:", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/21054250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24712627", "body": "This whole discussion seems to suggest I _added_ the cancellationToken to the wait function. I did not. It was already there. I merely preserved prior behavior. The `WaitAll` method took a cancellationToken. This not only allowed the async method's `Task` to complete quickly upon cancellation regardless of the tasks it is waiting on, but it increased the odds that in that event an `OperationCanceledException` would be thrown instead of some other fault.\nI'm happy to remove the `WithCancellationToken` extension method call if you would rather not have it though.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24712627/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24712806", "body": "No worries. I just wanted to make sure we were on the same page about what would be a deviation in behavior. Is the simple change leaving the behavior as-is, or removing the cancellationToken from the WhenAll? I'll do either one.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24712806/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24712844", "body": "I'm not sure I understand the concern, @jasonmalinowski. Are you saying the cancellationToken should be sent to the task when it's created and it should respond quickly enough to cancellation that you don't need this? If you are, I agree. However I've found this extension method useful for those tasks you cannot guarantee will respond in an acceptable time period yet you need to ensure the caller isn't held at its mercy.\nBut if you'd rather not have this extension method, and you're OK with just calling WhenAll without cancellation, I can avoid adding this to your code base. But personally I think this extension method is more generally useful than a WhenAll specific extension method would be.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24712844/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24712868", "body": "It doesn't matter. All this does is allow the TCS to transition to a completed state, which completes the WhenAny. After that, if the original task isn't what completed, we know cancellation occurred.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24712868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24712884", "body": "The intended contract is that if the `task` argument is already completed that the result of `task` is returned from the `Task` returned in the method, regardless of the state of the `cancellationToken`. But if the `cancellationToken` is canceled before the `task` completes, then the returned `Task` transitions to a canceled state, and yes possibly without the async method ever yielding if the token is canceled soon enough (or before entry to the method).\nWhat is strange?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24712884/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24712900", "body": "Doing so would increase the GC pressure from calling this method because it would require allocating another Task and usually an async state machine. I typically try to write the low-level threading functions so they are highly tuned so you can focus on program logic as the source of any GC pressure rather than the plumbing you're using.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24712900/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24712914", "body": "The reason is that this method should not throw `OperationCanceledException` if `task` has already completed. The `task` may have completed successfully or faulted, or even already been canceled itself. In any of those cases, we should return the result of the completed task rather than throwing as if the operation were canceled before it finished.\nI believe TPL and other .NET code follow the same guidelines, and I am trying to be consistent with that: don't report an operation is canceled if it has already completed.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24712914/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24712930", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24712930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24712963", "body": "@CyrusNajmabadi The non generic version of this is alsy an _async_ method and therefore returns an instance of `Task` not a `Task<T>`. So we can't cast it back in order to get its result. We have to implement it ourselves here.\n\n@jasonmalinowski I think your proposal would work fine if `task` completed successfully or if `cancellationToken` is canceled. But if `task` transitioned to either a canceled or faulted state, the result would not be what the caller expects. If `task` faults, `t.Result` will throw AggregateException, then the task returned from `ContinueWith` will wrap that in _another_ AggregateException. So you end up wrapping the exception in extra layers that a catch block later may not be expecting. And if `task` transitions to a canceled state, instead of WithCancellation returning a canceled Task, it would return a `Task` faulted with an AggregateException and an inner `OperationCanceledException`. These methods are implemented to preserve behavior of the original task exactly when it completes. So yes, your way is simpler, but it doesn't meet the behavior requirement.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/24712963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/26155434", "body": "Ooh, for what it's worth, that option sounds awesome. But if I had to choose, I'd rather have #1151 fixed than the option (for now).\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/26155434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/37248808", "body": "I suppose we could have just one bool property that is true to emit command line and false to execute the command line instead as that would fit my requirement, but it seems unnecessarily coupled. What if folks want to both compile and get the command line? That's why I separated the possibility of skipping.\nThere are plenty of ways to play practical jokes on folks. I'm not too concerned with this providing yet another way.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/37248808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/37248919", "body": "I'm not familiar with the issue. Does the Vbc task do other work besides ExecuteTool that this doesn't effectively skip?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/37248919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/37249130", "body": "C++ claims to have recently done this (and I imagine they scale even larger than C#). But I don't know the details.\nBut yes, the large string risk is why I have it \"off by default\".\nAlternatively, if we can produce a `string[]` of arguments I'm happy to consume that. I hope that is almost as easy as getting the full string.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/37249130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/37249212", "body": ":) One issue with that idea though is that folks will expect the GetCommandLineInvocation target to always work (regardless of project or global properties). Yet it won't, unless we copy the entire CoreCompile target so that it can invoke the Csc task itself.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/37249212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/37250562", "body": "OK. It looks like I'll have to fix that then.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/37250562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/37252203", "body": "So it seems MSBuild ToolTasks commonly throw around entire strings for this. Case in point, just below this addition, the entire commandLineCommands string is only divided into other strings when it's being sent to the resident server compiler.\n\nHowever, I like the idea of a `string[]` of arguments better anyway. I've prepared such a change.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/37252203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/37252305", "body": "I've accounted for it in the Vbc task by having it observe the `SkipCompilerExecution` property.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/37252305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/37252352", "body": "This extra arg was required to avoid logging to the server a compilation step that would never occur.\nIt comes from mixing logging into a method simply called GetArguments. Arguably, the logging code should be moved to the caller that wants it.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/37252352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/37260336", "body": "I was divided on that point myself. I'm happy to make that change.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/37260336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/37260358", "body": "Great. I'll take care of that.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/37260358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/88721610", "body": "Wow. 15 minutes for 60 PDBs is awful. When I wrote (some of) the PdbGit code, I remember that there was non-performant code I was writing that could be improved if necessary (the whole \"optimize after you measure\" philosophy). So given how _bad_ it is, can you please send an ETL trace of the tool running (perhaps the command line invocation on just one of your larger PDBs)? I bet we can fix it significantly (perhaps an order of magnitude).\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/88721610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/88724502", "body": "Explicitly specifying the URL to avoid forks sounds good. But you should only need the `--baseDir` parameter if there is no .git folder. I think you can remove that from your script here.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/88724502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/88732635", "body": "Ya, that's where I thought it would be. At the time I wrote that, I knew it was horrifically poor, but I couldn't find a more efficient way to \"walk the tree\" to normalize capitalization (which is very important, it turns out). If you know the more efficient way, yes please do send a PR. :)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/88732635/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/88743390", "body": "@tmat I've been meaning to ask: I read in docs that PDBs can actually _store_ the source code itself. Is that possible? Because where the build generates code that is then compiled, no git hosted source code could work to step into. So for the generated source files, I was considering embedding the source into the PDB. What do you think?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/88743390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/88745312", "body": "Cool. Then we might even be able to use the srcsrv support in the PDB to self-extract the source. :)\nI'll mention you on an issue where I'll track the work to ask you more questions. :)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/88745312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/88745623", "body": "hey, whatever the new thing is, I'm game. Just point me at the docs. :)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/88745623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/89621411", "body": "This method seems poorly named. `IsCanceled` sounds very benign (and the exception type seems unrelated unless it were somehow included in the cancellation check). The fact that the exception crashes the product if it isn't canceled would be totally unexpected given the method name and lack of xml doc comments to help call out otherwise.\r\nPerhaps simply \"ThrowIfNotCanceled\"?", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/89621411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/90302126", "body": "I don't know, as I'm just copying this from other scripts in your repo to make them consistent.\r\nBut my guess is that failing to uninstall doesn't help the user, and may break a chain of packages being uninstalled. And the user can see the analyzer in SE and remove it him/herself.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/90302126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/90302344", "body": "Thanks for the approval. I don't have permission to complete the PR, BTW", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/90302344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/98966359", "body": "This \"let us retry\" is *exactly* why StreamJsonRpc and HubClient don't. As we have multiple levels in our callstack here, and generally the scenario owner will have a retry, if the lower-level libraries had retries as well, they would multiply their effect, in the end making the user wait *much* longer than the scenario owner intended.\r\nWhen I was on the .NET Compact Framework we learned this. We had a 3x retry for network connections in NetCF, and some middleware lib had a 5x retry, and the app itself would retry a few times. In the end, the network connection attempt hung the app for minutes because it was retrying several dozen times.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/98966359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/98973361", "body": "> I think if timeout is part of contract, it should accept timeout value or behavior flag and/or should throw timeout exception rather than cancellation exception.\r\n\r\nThat's a very fair point. I'd add \"Or document it\" to the list of options. Please file a bug against us to consider this.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/98973361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/101199695", "body": "@kirankulkarni747", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/101199695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/102271850", "body": "@IlyaBiryukov that's something to consider. Can you add a user story for it to our backlog under the servicehub experience?", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/102271850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/102301362", "body": "@heejaechang that is a fair point, but we'd probably only file NFWs for specific failures. For instance, if we can't find the requested service we would *not* file an NFW as that could be very much by design for a componentized, optional install model -- or just development error on the part of the caller. But if something infrastructural goes wrong (an internal error of ServiceHub) than ideally ServiceHub should file the NFW, I agree.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/102301362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/103021567", "body": "Is this really unreachable? The call above it is `ReportUnlessCanceled` -- the name doesn't suggest you can't get past that point.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/103021567/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/103021758", "body": "observation: you dereference `faultUtility` without checking that you were handed a non-null value. Will that be a problem?", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/103021758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/108286337", "body": "For code running in your ServiceHub process, you can pick any version of sqlite you want since your process is isolated. But if you're loading this in VS, yes, you should sync up with our team and P&T to make sure it's the same version we already ship with VS.\r\nFWIW, you might want to use the same version VS already uses within your service anyway, in case it can leverage reusing memory for the shared image across processes (I think Windows can do that). In which case, I suggest you email Viktor Veis to ask what version they use.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/108286337/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/108291095", "body": "P&T = Project & Telemetry (Viktor's team)", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/108291095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/112751796", "body": "The background call won't be coming from the one scenario that led to this PR, since that will be fixed to call from the UI thread. But to answer your question, I think the answer is \"you don't know. And yes, it can lead to more deadlocks.\"\r\n\r\nThe only way to do this without deadlocking in those scenarios is to (ONE of):\r\n1. Require the caller to be on the UI thread (and leverage the SynchronizationContext to get you back to it if you need it).\r\n2. Use the JoinableTaskFactory to switch to the UI thread. This lets you choose below input priority as well, if you want. Although typically it's the scenario owner that sets the priority for you so you don't usually have to do anything special there.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/112751796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/112835928", "body": "Why not just `throw new Win32Exception();` ? That will automatically look up the last win32 error and throw with the best message. \r\nOr perhaps your goal is that `ThrowExceptionForHR` may throw a more specific exception type? That's possible I suppose.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/112835928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/112836061", "body": "Yes, ServiceHub runs on mac and Linux.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/112836061/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/112836135", "body": "ServiceHub sets the appdomain base directory according to your `*.servicehub.service.json` file.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/112836135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/117395063", "body": "This defines the old interfaces. The new ones for 15.3 are in Microsoft.VisualStudio.Shell.Framework.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/117395063/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/117395174", "body": "Your MEF parts should not have thread affinity in their importing constructors since MEF provides no guarantees about what thread they are activated on (other than, it's defined by the thread that happens to first request the dependency chain that requires it). Please revise this to call IServiceProvider.GetService in a method within the class that doesn't run while MEF is activating the part.\r\n\r\nIf you want, you can also file a bug requesting that we expose this service via MEF. It's a free-threaded service so we could do that.\r\n\r\nFWIW it looks like all your uses of this service are or could be async, so ideally you lazily initialize this service, and query for it using IAsyncServiceProvider instead.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/117395174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/117395285", "body": "These APIs are obviously the old ones. When you switch to the newer interfaces you'll need to fix up some of this to avoid build breaks.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/117395285/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/117395359", "body": "Please don't define a no-op delegate. We'll create an obviously clickable UI element if you define it, and an empty delegate would provide a poor experience for the user. Just leave it null if you won't do anything when the user clicks on your task.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/117395359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/117395544", "body": "If the operation is a download, that seems like a scenario where you could support providing meaningful progress to the user. I would encourage you to consider that.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/117395544/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/117896558", "body": "I see. The P&T team owns that class, I think. Have you filed a bug requesting that they add an `IProgress<T>` or something to it for later?", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/117896558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/127617433", "body": "I see Shell.Framework 26606 has been released on nuget.org, so yes, I think you can remove this line.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/127617433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/135183615", "body": "Why do you think a `TimeoutException` would be appropriate here? I don't see any timing related exception being thrown.\r\nI haven't heard of a Connection Closed exception. Can you clarify the actual type name you have in mind? I agree that if we're canceling a request because the stream closed that such an exception would sound right.\r\nIn the case of `JsonRpc` itself being disposed, what would you have us throw? `ObjectDisposedException`? Even for the requests that came in (but didn't complete) before the object was disposed?\r\n\r\nI'm certainly open to discussing these possibilities.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/135183615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/139031082", "body": "Should you be using `Stopwatch` here instead of doing manual arithmetic on DateTime?", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/139031082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/139034422", "body": "I prefer Stopwatch whenever I need timer like functionality since it reads easier and I feel like I have less chance of getting my arithmetic wrong through a simple authoring error.\r\nAlso, I assume that if the user changed his system time during the interval, that if that caused my code to malfunction it would be a bug in Stopwatch rather than my own datetime arithmetic logic.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/139034422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/139036243", "body": "At least you used `UtcNow` instead of `Now`, so I think you're defending against changes to time *zone* and DST.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/139036243/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/140244907", "body": "Since the package ID is going to change before this goes public, do you want to use a macro for the ID now, or just use search and replace once later? \r\nI suspect search and replace is better since the ID will only change once, but thought I'd offer.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/140244907/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/142294029", "body": "`c`?", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/142294029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/142294222", "body": "Are you aware of the dangers of disposing `CancellationTokenSource` objects?\r\nIt's the right thing for Linked CTS's, most of the time. But you should be aware of the risks if any of your CT's outlast your CTS.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/142294222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/142300730", "body": "Yes, you definitely want to avoid the memory leaks. The caution is around CT's that survive beyond the lifetime of their CTS. Seemingly benign calls like CT.Register and CT.ThrowIfCanceled() start throwing ObjectDisposedException after their CTS is disposed. I filed [a bug](http://vstfdevdiv:8080/DevDiv2/DevDiv/_workitems?id=369196&_a=edit) a long time back on this and it was fixed, but in a 'quirks' mode way. So I was never quite clear on who/where/how it may still bite.\r\nI see the [relevant code in CoreCLR](https://github.com/dotnet/coreclr/blob/8a163ca04ae8734f4a9ee51e470beda933c96333/src/mscorlib/src/System/Threading/CancellationTokenSource.cs#L449) doesn't have this throwing behavior at all, but I'm not sure what is in NetFX at this point.\r\n\r\nSo morale of the story, unless you find out NetFX won't bite you, is make sure you await all your async work that accepts your CT, and then don't dispose the CTS until all awaited work is done.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/142300730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/142527605", "body": "Yes, I can confirm that `ImmutableDictionary` and `ImmutableSortedDictionary` have nearly equivalent trees and algorithmic complexity. In fact, `ImmutableDictionary` internally hashes its keys and then stores them using the same tree structure as `ImmutableSortedDictionary`. So leaving the hashing out of it and just sorting the keys may be slightly faster than `ImmutableDictionary` (provided your CompareTo routine is fast).", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/142527605/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159807518", "body": "It looks like you're solving the problem twice over: you're both using NonShared *and* you're using ThreadStatic here. \r\nIt seems ThreadStatic by itself should fix this, shouldn't it?", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159807518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159817793", "body": "> what's the creation semantics of an exported property?\r\n\r\nAn exported property's getter is called for each and every importer. Basically the same thing as an exported type when it's tagged as a NonShared part.\r\n\r\nMy first guess about the deadlock is that different importers are getting unique instances of JTC even within the same test and MEF graph, which means they can't interact to resolve deadlocks. If you're all on the same (main) thread, this probably wouldn't actually be an issue. But if you actually have multiple threads going for an individual test, and you care about the simulated 'main' thread, then you need to ensure that you have one JTC instance shared for the whole test and you need a way for a non-main thread in the test to schedule work for the 'main' thread. This would require that you set up a SynchronizationContext on the 'main' thread that can schedule work, and then see that that thread actually pumps those messages. It's not hard, but it must be done within your test project.\r\n\r\n> Roslyn tests reuse ExportProvider\r\n\r\nThat's unfortunate. ExportProvider itself is actually really cheap. It's composing the graph that's expensive. I wonder if they've tried just constructing the catalog and graph once, and sharing the resulting ExportProviderFactory for all tests, but each individual test gets its own ExportProvider? That sounds like it would be the best combination of perf and test isolation.\r\nBut if you *must* share the ExportProvider, then we're basically saying that all tests need to share a JTC and thus share a 'main' thread. So there should be a static thread that's running a message pump for all tests to occasionally switch to during the test.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/159817793/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/160009139", "body": "@jaredpar I'd like to understand why you had to derive types for ExportProvider and/or JoinableTaskContext. You can 'inject' a JoinableTaskContext into a VS MEF composition using an exporting field/property and avoid any type deriving.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/160009139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "smoothdeveloper": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/17597114", "body": "Is it nuget.exe or Nuget.exe or NuGet.exe? I see that upstream NuGet.CommandLine package it is still NuGet.exe.\n\nAny reason to not stick to what comes out of upstream?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/17597114/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "chriswelles": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/18048059", "body": "Updating immutable and metadata to these versions (which are higher than what the analyzers are built against) is causing problems.  Any reason for this specific change?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/18048059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "nguerrera": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/18613283", "body": "Will rebase away unintentional whitespace diff.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/18613283/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/22735073", "body": "Looks like this is not System.Diagnostics.Contracts, but http://source.roslyn.io/#Microsoft.CodeAnalysis.Workspaces/Utilities/Contract.cs,93a577d4a7695a6c,references\r\n\r\nso #if DEBUG. \r\n\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/22735073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "mgoertz-msft": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/18726006", "body": "I sure did. Thank you.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/18726006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "COLLABORATOR"}], "review_comments": []}, "ashmind": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/20146648", "body": "@tannergooding A question if you have time -- how is this used? I've found a side-effect where Roslyn can't be built if a parent directory contains \"!\", so I'm curious on how essential this is.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/20146648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/20199335", "body": "Thanks a lot for explaining. I removed it for now and it seems ok.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/20199335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "sclarke81": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/comments/22401441", "body": "Where do these settings come from? They don't appear in the documentation (https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference) and don't conform to the rules specified in the _Possible values_ section.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/22401441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/roslyn/comments/22410010", "body": "Great, thanks for the info.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/comments/22410010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "bradwilson": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/114412857", "body": "It should, at the very least, probably only `Task.Run` when there's a sync context. \ud83d\ude09 ", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/114412857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/115281594", "body": "By default, we limit parallel tests in flight to the # of logical processors (i.e., 8 on my quad core i7 with hyper-threading). You can control this with configuration and/or runner switches.", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/115281594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "jskeet": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/47102111", "body": "Is this check actually correct?\n\nConsider `[XmlAttribute]` - that looks for `XmlAttribute` and `XmlAttributeAttribute` - the latter of which exists. Given that the compiler looks for both, I'd expect both to be in the failure text.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/47102111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "mgravell": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/115417141", "body": "@DavidKarlas i could forgive it in GetHashCode and ToString *as long as*  it is just caching a lazily computed value to prevent recalc", "reactions": {"url": "https://api.github.com/repos/dotnet/roslyn/pulls/comments/115417141/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}}}}