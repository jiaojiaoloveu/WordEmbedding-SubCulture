{"_default": {"1": {"dagood": {"issues": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/1865", "title": "Tool DLLs should have meaningful assembly versions", "body": "Right now assembly version is 1.0.0.0 for these DLLs, for example:\r\n\r\n * Microsoft.DotNet.Build.Tasks.dll\r\n * Microsoft.DotNet.Build.Tasks.Feed.dll\r\n * Microsoft.DotNet.VersionTools.dll\r\n\r\nIf their assembly versions matched up in some way to package versions, it would help figure out what's going wrong when (for example) the wrong version of VersionTools was loaded by MSBuild causing a missing API.\r\n\r\nThis showed up in CLI when the Feed and VersionsTools packages mismatched, causing a type loading error that didn't have much actionable information.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1864", "title": "Deprecate/remove CreateRequest.cmd symbol archiving/indexing flow", "body": "The new Microsoft.SymbolUploader.Build.Task package handles all our symbol indexing/archiving needs, using VSTS Symbol. The old flow that uses a file share and CreateRequest.cmd should be removed from BuildTools (and anywhere it's used) in favor of the new utility.\r\n\r\n/cc @mikem8361 ", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1855", "title": "PushToBlobFeed error when two items have same Identity and different RelativeBlobPaths", "body": " > error : Unable to upload to [...] due to System.IO.IOException: The process cannot access the file '[...]' because it is being used by another process.\r\n\r\nThe error seems to be that `PushToBlobFeed` is trying to do both uploads at the same time and the two reads collide. The scenario is the way to upload the same file to two places. In orchestrated build, aspnet uses this.\r\n\r\n@jcagme ", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1853", "title": "Create build output manifests in non-orchestrated-build scenarios", "body": "https://github.com/dotnet/core-setup/pull/3572#discussion_r160189684\r\n\r\n> [eerhardt] Would it make sense if these manifests were built during the normal build as well, not just during publish?\r\n> \r\n> That way we can use it in other places - ex. source-build, or even in normal dev box scenarios.\r\n\r\n> [dagood] It would, but the way things are factored right now this would either require some decent sized refactoring or some scenario-specific work. So that non-BuildTools repos can create manifests easily, the manifest code is in the `Feed` package and built into the `PushToBlobFeed` task. That task and the `Feed` package in general depend on some non-source-build-friendly libs.\r\n> \r\n> **The refactoring way is to create a new independent MSBuild task package that is included by both main BuildTools and Feeds.** Creating these is pretty painful with the current BuildTools structure.\r\n> \r\n> **Adding additional manifest tasks to the main BuildTools package would be the way to get the dev + source-build scenarios working quickly**, but that would be specific to the non-orchestrated-build scenarios so I haven't done it.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1839", "title": "Make new VersionTools tests run during build/CI", "body": "While working on orchestration, I added a `Microsoft.DotNet.VersionTools.Tests` project. It uses the new simplified MSBuild project style, so I only run it in Visual Studio right now. It doesn't run in CI or command line builds. We need to either:\r\n\r\n 1. Convert the project to the old test project style.\r\n    * I tried this briefly without much success. I managed to make it work at one point in command-line builds on Windows, but with an intensely degraded dev flow in VS--not what I want when working on time-sensitive orchestration features.\r\n 2. Upgrade BuildTools' CLI to support running the new test project style.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1824", "title": "Configurable init-tools restore: enable/disable certain packages", "body": "We should support turning off certain packages when they can't be used for some reason, e.g. source-build. Devs may also want to skip some to speed up init-tools time. The main BuildTools package has not been split yet, but there is a Feed Tasks package and Symbol Publisher package already. \r\n\r\nThe init-tools.msbuild should be configurable somehow:\r\nhttps://github.com/dotnet/core-setup/blob/edce50fc0abd3f5ed8db17897427e2d4b5d81ddf/init-tools.msbuild\r\n\r\nThis could be a step towards selectively restoring BuildTools packages needed by a repo.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1816", "title": "Reimplement Azure tasks using official Azure API NuGet packages", "body": "Currently we have custom implementations using the REST API: https://github.com/dotnet/buildtools/blob/f3694f40462f458f9253a3df6d333cdcfd6e17b1/src/Microsoft.DotNet.Build.CloudTestTasks/DownloadFromAzure.cs\r\n\r\nMoving to the official .NET client could make our downloads/uploads more reliable and faster, and it would give us less to maintain.\r\n\r\n/cc @MattGal ", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1813", "title": "Download package version props in MSBuild, not init-tools", "body": "It might be possible to use a flow like the build version props or configuration props:\r\n\r\nhttps://github.com/dotnet/buildtools/blob/78260239e4db68ad5c2df774a27d5f9a54fd92e5/src/Microsoft.DotNet.Build.Tasks/PackageFiles/BuildVersion.targets#L6\r\n\r\nhttps://github.com/dotnet/buildtools/blob/03988127f489bcd1cf58d71131ac628620d53de9/src/Microsoft.DotNet.Build.Tasks/GenerateConfigurationProps.cs#L15\r\n\r\nThis seems fine if we don't need the static values in build.proj.\r\n\r\nSuggested by @eerhardt in https://github.com/dotnet/core-setup/pull/3433#discussion_r152067278.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1760", "title": "Figure out/clarify mirroring process for packages the BuildTools build depends on", "body": "Right now, BuildTools master is configured with a few feeds we don't control:\r\n\r\nhttps://github.com/dotnet/buildtools/blob/b68dbb06bb69535f849770c4487afe8ed6e8777c/dir.props#L89-L92\r\n\r\nTo be sure old BuildTools builds won't break if one of those feeds removes a package, we typically mirror them to the `dotnet-buildtools` feed. As things are currently, there is no way for a dev to know that these packages should be mirrored: simply upgrading package versions works because the feeds are configured, and if we removed the feeds to only depend on mirrored packages, the feeds would probably just be added back eventually.\r\n\r\nWe should figure out our strategy, and how to make it discoverable.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1709", "title": "Create a common build script auto-updater", "body": "Core repos all have a few scripts (`init-tools.cmd/sh`, `run.cmd/sh`, etc.) that are duplicated and drift apart over time. These should be automatically updated from a central source. A VersionTools updater can do this.\r\n\r\nThe complicated part of this is figuring out the \"path\" to the central source. I suggest we put the \"master copy\" of the scripts into BuildTools. Each Core repo then updates to the script version associated with the BuildTools package it's depending on. The updater would:\r\n\r\n * Download the currently-used BuildTools package\r\n * Open it and read `version.txt` for the BuildTools commit that built it\r\n * Download the scripts from BuildTools at that commit hash.\r\n\r\n(When we publish built commit hashes to dotnet/versions, the updater doesn't need to do the package download of ~5 MB.)\r\n\r\nWe planned to do this for `bootstrap.sh/ps1` initially (https://github.com/dotnet/core-eng/issues/393), but auto-updating scripts is useful independent of that.\r\n\r\nCame up in https://github.com/dotnet/core-setup/pull/3252#issuecomment-333167334. /cc @weshaggard @dleeapho @eerhardt ", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1678", "title": "FilePackageUpdater (used to update BuildTools) should support CRLF and LF independent of platform", "body": "Right now the updater depends on the line ending being the same as what .NET expects on the current platform:\r\n\r\nhttps://github.com/dotnet/buildtools/blob/4a4c225ca82b08bb638b2b85beb930e5401f457e/src/Microsoft.DotNet.VersionTools/Dependencies/FilePackageUpdater.cs#L32\r\n\r\nWe should make it lenient and leave the current line ending in place to support more scenarios/environments. This is mostly a problem when building CoreCLR, which has `VerifyDependencies` enabled: if you check out with LF on Windows, the build breaks at the start of the test build.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1608", "title": "Remove DiaSymReader runtime binplace workaround", "body": "https://github.com/dotnet/buildtools/pull/1605 uses `PrereleaseResolveNuGetPackageAssets` during `AfterBuild` to manually grab and binplace some runtime dependencies. We should remove this workaround.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1607", "title": "Support Portable PDB to Windows PDB conversion on .NET Core", "body": "https://github.com/dotnet/buildtools/pull/1605 adds the ability to create a derived Windows PDB, and uses it during the symbol archive flow. As of that PR, .NET Core support wasn't needed, and the required workaround wasn't worthwhile.\r\n\r\n> Currently I chose not to support this task on .NET Core. The task does compile and ship on Core, and when the dependencies are present, it works fine. But there was no clear way to gather and pack up all the dependencies needed, and full desktop framework is the only scenario. There isn't a whole lot to figure out (or work around) if it's useful to support Core in the future.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1607/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1593", "title": "Auto-upgrade feature: wait for packages to be available on MyGet before creating PR", "body": "This would let us reduce the constant delay from 10 minutes to something much lower, improving auto-update PR turnaround in the best case. The worst case also improves, because we can wait longer than 10 minutes if necessary.\r\n\r\nWe need to consider the desired behavior if the packages never become available. I think it makes sense to create the PR anyway, and warn anyone looking at the PR's CI by describing the situation in a comment. This lets users retry the CI to get the PR through, even when indexing takes much longer than normal.\r\n\r\nTo implement this, we can use http://docs.myget.org/docs/reference/feed-state-api-endpoint to poll until the packages are available/indexed.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1589", "title": "1.0.0: Port auto-update \"update existing PR\" feature to servicing branch", "body": "See https://github.com/dotnet/buildtools/issues/1588", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1550", "title": "Use PackageReference instead of project.json for optional tooling restore", "body": "We use a project.json called [optional.json](https://github.com/dotnet/buildtools/blob/341dc6b7cfd9c28f4a8d5f257b149f49543e4361/src/Microsoft.DotNet.Build.Tasks/PackageFiles/optional-tool-runtime/optional.json) to specify the optional tooling to restore. BuildTools-using repos have moved on to msbuild-based restore, other than this file.\r\n\r\nWe should change that file and the [EncryptedConfigNuGetRestore](https://github.com/dotnet/buildtools/blob/341dc6b7cfd9c28f4a8d5f257b149f49543e4361/src/Microsoft.DotNet.Build.Tasks/EncryptedConfigNuGetRestore.cs) task that currently uses the NuGet package APIs to restore using an encrypted username/password.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1550/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1514", "title": "Update dotnet/versions LKG_Packages file automatically", "body": "This file is like Latest_Packages in that old entries aren't cleared (https://github.com/dotnet/buildtools/pull/1118), but for LKG_Packages, updates should only be performed if the current build produced a stable version. /cc @ericstj @chcosta \r\n\r\nSee https://github.com/dotnet/versions/issues/161 (the LKG file being out of date since it's a manual step)", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1436", "title": "Restore OptimizationData package as optional tooling", "body": "Right now there is a specific target to restore this package, `RestoreOptimizationDataPackage`.\r\n\r\n~~Note: this means that optional tooling restore will need to be configured for multiple feeds.~~", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1259", "title": "Auto-update pull request flow doesn't handle partial matches for PR head branch name", "body": "When finding an existing PR for an upgrade, the GitHub search API can only perform searches for partial matches. For example, searching for `master-UpdateDependencies-rel-1.0.0-preview2` will find:\r\n\r\n```\r\nmaster-UpdateDependencies-rel-1.0.0-preview2\r\nmaster-UpdateDependencies-rel-1.0.0-preview2.1\r\n```\r\n\r\nThe PR search process needs to be improved to pick the exact match.\r\n\r\nThe PR search API doesn't return the base/head branches for each result, so using that API would require an additional API call per found PR.\r\n\r\nWe should use the [`GET /repos/:owner/:repo/pulls`](https://developer.github.com/v3/pulls/#list-pull-requests) API, which lets us filter on an exact branch. For example: https://api.github.com/repos/dotnet/corefx/pulls?head=dotnet-bot:master-UpdateDependencies&state=open\r\n\r\n@MichaelSimons ran into this with Docker repo auto-update.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1153", "title": "Make NuGet dependency auto-update case-insensitive", "body": "Currently package ids from dotnet/versions have to match the ones in a project.json exactly. NuGet itself is case-insensitive, so Package update should be too.\n\nIssue was spotted in auto-PR: https://github.com/dotnet/corefx/pull/12958#issuecomment-255822892\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1106", "title": "When bootstrapping buildtools, resume from last successful step", "body": "Bootstrapping might be cancelled intentionally (ctrl-c) or fail during certain steps. When possible, we should be able to resume the bootstrapping process from where it stopped.\n\nOne clear cutoff, for example, is that bootstrapping should be able to avoid redownloading the CLI if the buildtools package init fails.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1106/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1085", "title": "Inherit some Run.exe config from buildtools", "body": "Some commands are shared between all buildtools-using repos because they only use functionality defined in buildtools. Instead of repeating these commands in each repo's `config.json`, they should be inherited from a repo-agnostic `config.json` defined in buildtools.\n\nMost recently I brought this up in https://github.com/dotnet/buildtools/issues/1046#issuecomment-250205226, and I realized that there isn't an issue for this (that I could see).\n\n@maririos @markwilkie Is there a plan already for someone to work on this?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1004", "title": "Determine correct buildtools-wide xunit version", "body": "Currently there are multiple versions, and it would be good to add one repo-wide version to dependency validation.\n\nCreated this task to avoid figuring this out while working on https://github.com/dotnet/buildtools/issues/954 (Upgrade buildtools to RTM shared framework).\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1004/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/942", "title": "On auto-upgrade, post errors/warnings to PR to make them visible", "body": "Currently they only show up in the Maestro build, and nobody checks those unless something goes obviously wrong. It would be useful to post errors and warnings into the PRs, giving them high visibility.\n\nThis should be doable by making a trace listener in the msbuild task, but we should aim for something that's reusable with only VersionTools.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/745", "title": "Move native symbol package creation logic into buildtools", "body": "Right now native symbol packages are created differently in https://github.com/dotnet/coreclr/tree/master/src/.nuget/Microsoft.NETCore.Runtime.CoreCLR vs https://github.com/dotnet/corefx/tree/master/src/Native/pkg although the core logic could be shared. We should move what we can into buildtools, especially any symbol \"discovery\" functionality that could be applied across packages in any .NET Core repository.\n\nA few things that should go along with this: including pdbs for exe files and more focused review/refinement of the logic.\n\n/cc @weshaggard @ericstj \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/dotnet/buildtools/commits/54f73706fc8c990ab9260ade357bdc901b9fd40b", "message": "Fix behavior when there is no CurrentRef property (#1863)\n\nAssuming the match was successful prepended the CurrentRef value to the file because Index and Length are 0 for a failed match."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/82f7170e45545f405bf9eb110f650ec7618e9711", "message": "Create final publish tooling tasks/targets (#1854)"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/94af7e60b3365bf478f843ed24170cfcac19b5e4", "message": "Include manifest info properties in feed targets (#1852)"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/22ab0360196acd9e6fd6f74fda4287d364a39165", "message": "Put detected symbol packages in assets/symbols/ (#1846)"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/c66dc838c180a43054f06db863344a2b8a0d8299", "message": "Move commit link out of summary: make it clickable (#1844)\n\nAlso only add CI info when info exists to avoid creating a confusing empty collapsible section."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/066653e95cb0f1b31365b7f6fee20be6e53bdd3c", "message": "Add build output manifest dotnet/versions client (#1838)"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/4ef4b9acb9f23f73ceebb25134917aa98f639f3d", "message": "Merge pull request #1836 from dagood/generate-manifest\n\n Create build manifest in PushToBlobFeed for orchestrated build final publish"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/fef5345e3f2ec1ba47508b300d6cfff788363abb", "message": "Add a LaunchDebugger task"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/79e2b44ee10146a04cb68b34548c012dbc56ae53", "message": "Create build manifest in PushToBlobFeed"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/c5efbc43753e6c91095d5a6eb642c3ace02c315c", "message": "Refuse to create an unnamed virtual directory (#1837)"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/0121cf2ed5206d14c6a9d6473499eacc9957e9ee", "message": "Merge pull request #1755 from dagood/sync-versions/master\n\nUpdate all package outputs to 2.1.0-prerelease"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/a9adeef4d839d9139dbd861c01302088f62d0097", "message": "Merge pull request #1805 from dagood/convert-continue\n\nTry to convert all Portable PDBs to Windows PDBs even if some fail"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/280705d9d12af2fe0997509474825d2c9cbe7932", "message": "Tasks to create package version props using Sleet (#1807)\n\n* Tasks to create package version props using Sleet"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/2339f0f37353f9daf0a56e41a7c96954d809ddb1", "message": "Try to convert all files even if some fail\n\nThe partially-failed state may still be useful to users of this task."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/d7e90fd2dcd57bd92c4e347930fa6a7f1e2c6e21", "message": "Track discarded commits in a comment, not PR description (#1794)\n\n* Track discarded commits in a comment, not PR desc\r\n\r\nThis prevents the auto-PR description from growing in size over time. The description is fed into an environment variable in CI, which has a length limit.\r\n\r\n* Simplify: post one comment per discarded commit"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/456042be675f7725dc7febd6552f182f4ca624d1", "message": "Merge pull request #1787 from dagood/init-tools-packageversions\n\nAdd init-tools PackageVersionProps download"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/0dd9bfbfad916676b7d61de47345e777c94c41b2", "message": "PR review changes\n\nDon't rely on 'PB_' prefix.\n\nStandardize download location to Tools dir root.\n\nDetect download and set DotNetPackageVersionPropsPath in Repo API implementation instead of in run.cmd/sh."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/4f8dd23f15c548490a54212b937f46078afc72b5", "message": "Add init-tools PackageVersionProps download"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/2282a072c9ce477a1b08f42e53ed7e6f04a62e84", "message": "Optional tooling restore null argument workaround\n\nWork around ArgumentNullException encountered in NuGet when restoring optional tooling from a project.json file."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/cfa0356cc8231214ba3ae6b74737fd4f4333bf1e", "message": "Update all package outputs to 2.1.0-prerelease"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/8944c2682dbc27eb21169d09f9a1f3b143f1ae3d", "message": "Merge pull request #1775 from dagood/fix-ci-tracking\n\nAuto-update discarded commit list: use combined status; only include Details link if a target exists"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/dc3941928ba21e25aef9504584c2c579464026d7", "message": "Save combined status, not every status entry"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/4acd1276322cac6f35b65b0017aa29d1db04886d", "message": "Only include Details link if there is a target url"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/4eaad31763c6a2cfaf3cf709ca4c522f830ceace", "message": "Warn and skip if a DLL has no Debug directory (#1771)"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/5c1faac55706ad6a0656ac125b4cfb00e621043a", "message": "Merge pull request #1754 from dagood/pr-target/master\n\nSplit PR creation into new target, track discarded auto-PR commits"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/8dc74f0f4777ad866264e8507ff00fcc23815cc4", "message": "Make a list of discarded commits in PR description"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/0b1db6d097b6eba82b8127c62283757703f2d3fe", "message": "Move submodule update into BuildTools and improve\n\nSplit auto-PR creation into new target.\n\nAdd ReadGitConfigFile task.\n\nAdd submodule updater generation targets."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/411f9d02eb682ebb38ebab9fe019280c82f4e773", "message": "Improve build-info Get failure error message (#1768)"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/29fdd02997435889dfb0d6cd72fa67d0974200f0", "message": "Merge pull request #1756 from dagood/repo-api/master\n\nPort to master: Repo API common implementation"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/e21f2da53bbc763bc8d6ce3ba3b49034a308ae1c", "message": "Only set [Symbol]PackageOutputPath if empty\n\nThis is generally friendlier in the MSBuild ecosystem. It allows the repo to provide a PackageOutputProps in dir.props if it knows better.\n\n(cherry picked from commit 9035220ee11495fd4c4b0c03f31d83af2f6bbfe7)"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/205affe245bc53563033ef80412655a25ecc8127", "message": "Add Repo API common implementation\n\n* Add Repo API common implementation\n\n* Append DotNetRestoreSources\n\nAllow default RestoreSources to be defined before and after this file is imported rather than only after.\n\n(cherry picked from commit a782f5bf00ebd8b541a68650a074696fd95a88e7)"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/b5492cb18b5df56fac255e9351f4962f3be9c9ba", "message": "Merge pull request #1753 from dagood/submodule-update/master\n\n(Port to master) Add \"UpdateToRemote\" concept for better submodule update"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/adc8d443d90cb68d3412ee510f9399abe6445f19", "message": "Add \"UpdateToRemote\" concept for better submodule update\n\n(cherry picked from commit ff35999bcebf28e4a737bb52bee200fd1c7f6e19)"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/dfea7f77c5e34f960f61a5ff4881c80a621818f3", "message": "Rename ConvertPdbsToPortablePdbs to ConvertPortablePdbsToWindowsPdbs (#1736)"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/e2043a3d5864cb0189ac695e81e7d78aee97b0b4", "message": "Remove DotnetCLIVersion.txt, no longer used. (#1057)\n\nBootstrap init flow uses \".cliversion\"."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/3b2f393f1dbffa73b3faa04d914f4f38a6062bd9", "message": "Merge pull request #1666 from dagood/fix-tab-chars\n\nFix a few indentation problems, tab characters"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/c4769a5c62bea11d43fd0cf44881baac1c3b25f0", "message": "Fix a few indentation problems, tab characters"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/80da51aa59ae5fe14fbce1894183bf8d5c6d7b42", "message": "Retry PDB conversion in a new msbuild process (#1623)"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/1867", "title": "Synchronize manifest updates using feed lock", "body": "This prevents race conditions for builds that have multiple legs potentially pushing manifest changes.\r\n\r\nDiff is much better ignoring whitespace changes: https://gist.github.com/dagood/e8e990c675357131154ff7859e9fbdf6\r\n\r\nFYI @johnbeisner this fixes an edge case CLI could hit.\r\n\r\n---\r\n\r\nTested:\r\n * Existing Sleet feed with the lock blob initially unleased or leased. Behavior is as expected: this task will wait for me to free my lease before taking its own lease and continuing.\r\n * Virtual dir with no blobs at all. I was concerned that Sleet would require a feed to exist to lock it, but it just creates the lock blob if needed. (And *only* the lock blob, no other Sleet feed blobs.)", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "weshaggard": {"issues": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/1851", "title": "Have ApiCompat warn about unused baseline file entries", "body": "See https://github.com/dotnet/corefx/pull/26175#discussion_r159817816.\r\n\r\nIt would be nice if APICompat would detect unnecessary baseline file entries and warn about them. ", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1851/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1850", "title": "Teach genapi and apicompat about tuple syntax", "body": "tuple arguments/returns: (int My1, int My2) MyMethod()\r\n\r\nWe should update the CSharp writer in CCI Extensions to understand tuple syntax. We should also update apicompat to validate parameter names for tuples with names.\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1833", "title": "Move \"GenerateReferenceSource\" target into buildtools", "body": "@mellinoe commented on [Wed May 24 2017](https://github.com/dotnet/corefx/issues/20258)\n\nWe should move this new target into buildtools if we decide that the functionality is general-purpose enough to warrant it. This might involve cleaning it up, making it \"automatic\", and fixing some of the problems around multiple build configurations.\n\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1833/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1762", "title": "Microsoft.CCI dependency needs to be able to build from source", "body": "A lot of our tools in this repo depend on Microsoft.CCI which currently isn't fully open. We depend on a package we built internally. The source has been opened at https://github.com/microsoft/cci but that doesn't have a package build currently nor does it fully support an official build. We will need to do that in order to fully build BuildTools from source. ", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1762/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1648", "title": "Need windows ps script to download and unzip a file", "body": "As you can see from https://github.com/dotnet/corefx/pull/23467 the inline powershell to download and unzip the CLI/SDK is getting a little crazy and I feel like we need to have a sample script in BuildTools that is well factored and easier to maintain. I realize we have to have the script checked into the individual repo's but as part of the bootstraping work we plan to have auto-update PR's for scripts and I think this should be one of them. ", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1467", "title": "Move dir.traversal.targets into BuildTools", "body": "We should move most of the common logic for traversing projects into BuildTools. Things in https://github.com/dotnet/corefx/blob/master/dir.traversal.targets and https://github.com/dotnet/corefx/blob/master/buildvertical.targets for example. ", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1467/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1464", "title": "Fix Microsoft.CSharp.Targets import workarounds", "body": "Microsoft.CSharp.Targets is imported in multiple places with different casing which causes issues on our linux builds which are case-sensitive file systems. Some of the imports are coming from SdK/portable targets and some from ours but we have number of workarounds in places that we should try to reconcile and eliminate.\r\n\r\nhttps://github.com/dotnet/buildtools/blob/master/src/Microsoft.DotNet.Build.Tasks/PackageFiles/init-tools.sh#L146\r\n\r\nhttps://github.com/dotnet/buildtools/blob/master/src/Microsoft.DotNet.Build.Tasks/PackageFiles/FrameworkTargeting.targets#L70\r\n\r\n```\r\n  <!-- workaround file casing issue where it has different casing in different places which fails on linux builds -->\r\n  <PropertyGroup>\r\n    <CSharpTargetsFile>$(MSBuildToolsPath)\\Microsoft.CSharp.targets</CSharpTargetsFile>\r\n    <CSharpTargetsFile Condition=\"!Exists('$(CSharpTargetsFile)')\">$(MSBuildToolsPath)\\Microsoft.CSharp.Targets</CSharpTargetsFile>\r\n  </PropertyGroup>\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1458", "title": "Remove msbuild from BuildTools package", "body": "Instead of pulling in our own msbuild we should use the msbuild that comes from the CLI. That will require all repo's to update the cli they depend on so once we get those converted we should test this out and do it. ", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1458/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1398", "title": "AssemblyInfo for ref assemblies should not use AllowPartiallyTrustedCallersAttribute", "body": "@jcouv commented on [Wed Jan 04 2017](https://github.com/dotnet/corefx/issues/14868)\n\nWhile working on adding ref assemblies for `System.ValueTuple` (PR https://github.com/dotnet/corefx/pull/14786) I ran into this problem with the `portable-net40+sl4+win8+wp8` TargetGroup (which uses a PCL profile).\r\nFrom discussion with @ericstj and @weshaggard, it sounds like the `_AssemblyInfo.cs` file should not use `AllowPartiallyTrustedCallersAttribute` in the first place.\r\n\r\nI'm using a workaround to unblock my PR. This issue is meant to track the follow-up.\r\n\r\n```C#\r\nusing System;\r\nusing System.Reflection;\r\n[assembly:System.Security.AllowPartiallyTrustedCallers]\r\n[assembly:System.Runtime.CompilerServices.ReferenceAssembly]\r\n[assembly:System.Reflection.AssemblyFlags((System.Reflection.AssemblyNameFlags)0x70)]\r\n[assembly:AssemblyTitle(\"System.ValueTuple\")]\r\n[assembly:AssemblyDescription(\"System.ValueTuple\")]\r\n[assembly:AssemblyDefaultAlias(\"System.ValueTuple\")]\r\n[assembly:AssemblyCompany(\"Microsoft Corporation\")]\r\n[assembly:AssemblyProduct(\"Microsoft\\x00ae .NET Framework\")]\r\n[assembly:AssemblyCopyright(\"\\x00a9 Microsoft Corporation.  All rights reserved.\")]\r\n[assembly:AssemblyVersion(\"4.0.2.0\")]\r\n[assembly:AssemblyFileVersion(\"4.6.24902.0\")]\r\n[assembly:AssemblyInformationalVersion(@\"4.6.24902.0 built by: jcouv-JCOUVDEV. Commit Hash: 0f771c8a9a11b54e1f3feed43772a9fc7f6da983\")]\r\n[assembly:CLSCompliant(true)]\r\n[assembly:System.Reflection.AssemblyMetadata(\".NETFrameworkAssembly\", \"\")]\r\n[assembly:System.Reflection.AssemblyMetadata(\"Serviceable\", \"True\")]\r\n```\r\nfrom `C:\\repos\\corefx\\bin\\obj\\ref\\System.ValueTuple\\4.0.2.0\\portable-net40+sl4+win8+wp8\\_AssemblyInfo.cs`\n\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1229", "title": "run tool should use common logic for detecting RID", "body": "The run tool should not use its own custom logic for detecting RID. https://github.com/dotnet/buildtools/blob/master/src/Run/SettingValueProvider.cs#L97\r\n\r\nIt should use similar logic like https://github.com/dotnet/buildtools/blob/master/src/Microsoft.DotNet.Build.Tasks/GetTargetMachineInfo.cs#L52\r\n\r\ncc @mellinoe ", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1229/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1224", "title": "traversals targets don't correctly capture errors when serialized", "body": "https://github.com/dotnet/corefx/blob/master/dir.traversal.targets\r\n\r\nWhen SerializeProjects=true we batch over the projects at https://github.com/dotnet/corefx/blob/master/dir.traversal.targets#L122 which in turns drops any errors and only takes the task error code of the last project built. \r\n\r\nInstead of doing this batching we should consider other options like BuildInParallel=false to see if that gets us the serialized behavior we want as well as correctly captures the failures while allowing all projects to build. ", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1059", "title": "Need to update tool source from internal CoreFXTools repo", "body": "Port all remaining changes from our internal CoreFxTools repo to the open and delete the internal repo. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/820", "title": "Add validation to detect stable runtime packages depending on prerelease packages", "body": "We need to ensure any runtime dependencies going into runtime.json are also stable if the package containing it is stable. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/820/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/dotnet/buildtools/commits/b74644ab65ef2425ac2fdba5414da0e721a36296", "message": "Fix official build break\n\nOfficial builds are still on VS2015 so they are pinned to C# 6 for now."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/529953418d6568af1f41b5fb411d658ace18c792", "message": "Merge pull request #1859 from weshaggard/UpdateToolsToHandleStructFields\n\nUpdate CSharpWriter to handle private fields in structs"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/2518fcaa34eafc8ea871d332b82fe4ef8a491aad", "message": "Fix typos in comments"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/4b80362df58e1ef45e58ca482b718084baddbcf2", "message": "Treat ByReference<T> as a reference type\n\nThe runtime treats ByReference<T> special as a ref T, so we need the tools\nto also treat it as a reference."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/7f72f683d195ad17fa002434ff86722cfa9b91a6", "message": "Use primitive field type for private fields of primitives"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/f34ee45b4184e48638b3d62f0f7d016c581896e7", "message": "Escape chars from compiler generated backing fields"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/04124b36399be8aaebdb9f58072f920a50d8d144", "message": "Update IsOrContainsReferenceType function\n\nIsReferenceType is not always the inverse of IsValueType. Things like\nunmanaged pointer references aren't value types nor are they a managed\nreference type. Changed to use the logic already in CCI to detect a\nreference type but it requires a resolved type definition instead of\na type reference."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/f2b02029f45cea37ed4e0b4889e5c8b02d9f75e7", "message": "Update CSharpWriter to handle private fields in structs\n\nFor compile-time compat, the following rules should work for producing a reference assembly. We drop all private fields, but add back certain synthesized private fields for a value type (struct) as follows:\n- If there are any private fields that are or contain any value type members, add a single private field of type int\n- If there are any private fields that are or contain any reference type members, add a single private field of type object.\n- If the type is generic, then for every type parameter of the type, if there are any private fields that are or contain any members whose type is that type parameter, we add a direct private field of that type.\n\nFor more details see issue https://github.com/dotnet/corefx/issues/6185\nthis blog is helpful as well http://blog.paranoidcoding.com/2016/02/15/are-private-members-api-surface.html"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/6f4e224cf61fc129b58a8b833f26c974500cfafa", "message": "Merge pull request #1860 from weshaggard/UpdateBuildToolsToUseVS2017\n\nUpdate run.cmd and update CI to not call VS2015 any longer"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/1ceaab865612e23b49204b9f179b20cc9381f98c", "message": "Update run.cmd and update CI to not call VS2015 any longer\n\nAlso add the dotnet cli env variables to both run.cmd/sh."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/80b4371810fed924212ece07854b588481d754f1", "message": "Merge pull request #1849 from weshaggard/UpdateToolsForNewLangFeatures\n\nUpdate CCI extensions to understand new C# lang features"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/34b8e1c4bfb3796d02895791fb52371939733d20", "message": "Fix readonly struct compat rule"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/e9e80d8a37d23df10e6da2f4287f83c32abb27bb", "message": "Switch to using throw null in more method both types.\n\nAlso includes a fix for a bug in typeof expressions in attributes\nthat contain generic type parameters"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/a8f2b25c051ecfde5c1d1e19c9a39a6e8c9f67ec", "message": "Update CCI extensions to understand new C# lang features\n\nWith this change our tools like genapi and apicompat will understand\n\nin params\nref readonly returns\nreadonly structs\nref structs\n\nAlso added apicompat rules to ensure the new annotations are compatible"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/796852680ccb25dd24228e83d0b7d81eb8ac5b5a", "message": "Merge pull request #1847 from weshaggard/FixDependencyPromotion\n\nFilter out empty dependencies from promotion consideration"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/e8f73c0d8d8891fddacc344ddda1e702015d5dbd", "message": "Filter out empty dependencies from promotion consideration\n\nWe have a number of cases were we were incorrectly promoting\ndependencies from netstandard refs to net4x dependency groups which\naren't needed and cause extra dependencies and in some cases cause\nissue (see https://github.com/dotnet/corefx/issues/26129).\n\nA diff of corefx nuspec's before and after this change shows about\n14 different affected packages which now have correctly cleaned\nup dependency groups for net4x."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/a2adcfd6c99aca52dab38e7edc550e5dc618a0f9", "message": "Merge pull request #1843 from dotnet/MichalStrehovsky-patch-1\n\nAllow disabling fxcop analyzers"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/250d00c99047b3035ec5caf1636057991e17d496", "message": "Merge pull request #1796 from weshaggard/UpdateFeedTargets\n\nUpdate feed targets file to add docs and examples"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/358e6aa385716503e4ac35f3177e85df9157d7c5", "message": "Update feed targets file to add docs and examples"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/2697b83f8417136de2c31fefe929a3312ada7389", "message": "Fix quoting in condition"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/068a9ede7786e7d6b2cf01c35eaa1097f57a2785", "message": "Merge pull request #1779 from weshaggard/SupportPublicSignType\n\nMake public the default SignType"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/930cb6e7a8acdc60b494b8fce5294ca4c5b0fd2c", "message": "Make public the default SignType\n\nAs part of our repo API we are using 'public' as the signtype to\nindicate what we formally referred to as oss signing. We still work\nif oss is specified for back-compat but we now default to public\nif it isn't set."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/c9e10a2fedde79a3a8ab841f9158da289e7d0403", "message": "Merge pull request #1761 from weshaggard/FixToolRuntimeWarnings\n\nFix the tool-runtime restore warnings"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/535648eda812a401c8c3dbcb98f5ca777a10a076", "message": "Fix the tool-runtime restore warnings\n\nMoved BuildTools back to a version of CCI which depended on all stable\npackage versions. This version happens to align with .NET Core 1.0 but\nwe don't currently have a newer version of that package with stable\ndependencies.\n\nDisable NU1701 that we are getting for Microsoft.Net.Compilers.Targets.NetCore\nas we know it is safe to resolve its assets as net461. We also plan to remove\nthis package when we start compiling against the CLI itself instead of the\ntargets/msbuild we carry with BuildTools.\n\nDelete tool-runtime\\project.json because it is no longer used after\nhttps://github.com/dotnet/buildtools/pull/1743"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/18a4c9a6746568bc543044fdec933d52846305c5", "message": "Merge pull request #1684 from DrewScoggins/FixReadmeLink\n\nUpdate links for build status"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/ba78289d0d9b2c55a6f57940aec5863a08970e1e", "message": "Merge pull request #1624 from benaadams/PackageTargetFallback\n\nRemove deprecated PackageTargetFallback"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/d686f12cf3d1de45195c4fe150087eaf8c0ea934", "message": "Merge pull request #1619 from weshaggard/UpdatePackageIndex_baseline\n\nAdd option to UPdatePackageIndex task to update basline ..."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/1371d2a9dd51f3c254b5c79f12846d28100ba61a", "message": "Add option to UPdatePackageIndex task to update basline ...\nversions based on the latest stable versions"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/64105266", "body": "I suggest we consider having a common dir.settings.targets and dir.targets that all the projects import which in turn imports a lot of the common targets and tools from this buildtools repo/package. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/64105266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/64106099", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/64106099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/64106103", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/64106103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/64129253", "body": "Thank you for point this out. It actually uncovered some other things that need clean up as well. Some of these files are already listed in a Content item and a None item. I've filed issue #20 to track this work. I will merge your change in as it does incrementally improve this problem as those files don't exist at all and we will use issue #20 to address the other issues.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/64129253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/64130075", "body": "I'm fine with a .props file for the settings. I've not started working on this yet, right now I have been digging into our build system to better understand it. If you believe you can get to it soon go for it, otherwise I expect I will be putting together some PR's for this over the next week or two. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/64130075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67256662", "body": "Lets open the other issues and get the change merged.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67256662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67256916", "body": "You could use the logic that @FiveTimesTheFun is using in https://github.com/dotnet/buildtools/pull/28 which is the test projects and asking for the target path. That will give you the exact test binary that is the output of the test projects. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67256916/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67263799", "body": "I added a comment to the PR https://github.com/dotnet/buildtools/pull/28:\n\n_We should gather the list of test assemblies from the test projects below when you call GetTargetPath. That will be more reliable and prevent false positives with other assemblies that have test in their name._\n\nWe should wait until that PR is complete and update your fix to do something along those lines instead.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67263799/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67266289", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67266289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67603584", "body": "See PR #31, this removes this property completely and expects it to be set by the dir.props.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67603584/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67662789", "body": "This is a blocker for my next change so I'm merging this in but @FiveTimesTheFun please review at let me know if you find any issues.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67662789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67716733", "body": "This change also makes all the tests run in their own directory as opposed to all form the same directory. This is because now we are copying more of the assemblies to the output and they are starting to conflict.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67716733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67716765", "body": "This change has been published to myget. Microsoft.DotNet.BuildTools.1.0.17-prerelease.nupkg\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67716765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67729352", "body": "Fixed with commit https://github.com/dotnet/buildtools/commit/5a199a36d0cbc885ae2b9e6cb04bd4cdeb844ed7\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67729352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67729366", "body": "Fixed with commit https://github.com/dotnet/buildtools/commit/5a199a36d0cbc885ae2b9e6cb04bd4cdeb844ed7.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67729366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67729846", "body": "I believe this is address with the latest changes where we look at the at directories in the bin dir that end in \".Tests\". So I'm closing this issue if you thin there is still an issue please reactive or create a new issue.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67729846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67729881", "body": "build /t:clean now completely deletes the BinDir and PackagesDir so it should take care of this problem now. Also tests aren't being picked up via assembly name but instead via directory names ending in \".Tests\" so we should only be running test projects now.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67729881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67729905", "body": "Test should now be detected via directories in the bin directory that end in \"*.Tests\" so this should no longer be picking up random assemblies that have test in their name.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67729905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/68111832", "body": "LGTM \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/68111832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69098230", "body": "@mmitche I get a 404 when I click on those links. Is that expected?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69098230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69098504", "body": "We shouldactually create another wrapper script to run tests for a single test as opposed to overloading build.cmd to run just one test. Perhaps adding a RunTests.cmd helper script.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69098504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69298010", "body": "The changes look good to me thanks @FiveTimesTheFun. We should verify that our CI can build successfully looking at the log it seems like something went wrong with our Azure storage. @mmitche any ideas?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69298010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69684858", "body": "How do you expect people to call this? Can you provide the command line you expect people to use?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69684858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69685072", "body": "Unless I'm missing something this would break the running the tests as I don't think OutDir is set. Can you please verify that all the tests aren't just skipped now? Also I believe this will conflict with @FiveTimesTheFun change he is making (or made not sure if it was committed yet).\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69685072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69685402", "body": "Also as another question is OutDir the only option for this? I think we generally have an OutputRootPath that is more appropriate to set so people can build on that.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69685402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69692457", "body": "The problem with using OutDir directly is that it doesn't take into consideration all the different project names and such. OutDir ends up getting set correctly via OutputPath which we set using OutputRootPath appended with different things like the flavor and project name. We need the flexibility to set this differently per project (i.e. bin\\debug\\System.Collections.Immutable) and not have it set to bin\\debug for all the projects. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69692457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69692709", "body": "What happen to the idea of having a RunTests.cmd that just takes the test assembly? Personally I think this would be useful because it also allows us to do other things like start the tests under a debugger and such without needing to pass a bunch more options that we have to remember to Build.cmd.\n\nIf we do still go with a property I also don't know that IncludeTestAssemblies really conveys what we are doing here. It seems like this is just additional tests to include as opposed to just the tests to run. Perhaps something like \"TestsToRun\" or something like that.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69692709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69692749", "body": "Assuming CI passes the change looks good to me.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69692749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69695120", "body": "LTGM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69695120/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69695162", "body": "@dotnet-bot okay to test\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69695162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69695278", "body": "@akoeplinger Is this change still needed? If so @FiveTimesTheFun can you please investigate further? I would prefer we not hack this in the ResolveNugetPackages task. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69695278/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69695364", "body": "@nguerrera Are you aware of any reason we cannot do the OpenSourceSign task after Compile?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69695364/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69695392", "body": "@dotnet-bot okay to test\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69695392/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69858407", "body": "@jhendrixMSFT Can you help me understand how that works if you are explicitly setting it via a property being passed to build.cmd? Perhaps what I'm missing is how OutDir is getting set.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69858407/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69858493", "body": "Thanks @akoeplinger. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69858493/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69858793", "body": "Yes this is the buildtools part of the change which looks good to me. Thanks @Priya91 we can consider a runtests.cmd wrapper on the CoreFX if necessary. My guess is that RunTests.cmd would be a wrapper that we could use to iterate on the test runs without need to rebuild everything else so it would build the library and tests you need and that is it. I'm not sure if that is fully necessary however we can stick with just the build.cmd option for now.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69858793/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69858824", "body": "By the way you will need to update this slightly based on @FiveTimesTheFun recent changes.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69858824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69858911", "body": "Yes I think we are good thanks @FiveTimesTheFun \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69858911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/70352798", "body": "I don't have much context here so I will let @davkean and @terrajobst chime in.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/70352798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/70600422", "body": "LGTM @FiveTimesTheFun how/where are you currently building xunit.runner.dependencies.netcore package?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/70600422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/70964963", "body": "This will not work with the way we are currently running tests in the corefx repo, see PR https://github.com/dotnet/corefx/pull/479. We will need to figure out how to merge this with that change.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/70964963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/71287740", "body": "Fixed the commit message typo thanks. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/71287740/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73398529", "body": "@nguerrera The change looks good to me as well. Are you planning to upload the new packages?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73398529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73571018", "body": "Thanks @eatdrinksleepcode I'm slowing working on changing how we restore packages as part of the build so I will think about this as well. If you want a early look at my changes see my branch https://github.com/weshaggard/corefx/tree/RestorePackagesPerProject. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73571018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73780145", "body": "LGTM\ncc @bartonjs as an FYI\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73780145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73781623", "body": "Thanks @alexperovich. @eatdrinksleepcode while this will mean we get a results file I don't know that we want to make the running of the test incremental on the existents of the results file. I would prefer it is incremental only on a passing test run. I definitely want to be able to re-run tests that have failures for debugging, etc, and preferably that wouldn't require a complete rebuild of the projects to accomplish.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73781623/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73803516", "body": "@alexperovich @eatdrinksleepcode I don't think the mark file is a bad idea, that is what I was planning to do before we had the results file. While it is kind of a hack I've began to except it as a way to handle these type of cases in MSBuild and where the inputs/outputs are too complex and unknown statically.\n\nAs an example look at RestorePackages target in my branch https://github.com/weshaggard/corefx/blob/RestorePackagesPerProject/src/dir.targets I'm using working on a change to use this method to block the package restore and test copying for each build.  \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73803516/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73835135", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73835135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73835399", "body": "Overall LGTM I added a couple more minor comments.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73835399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73844494", "body": "@eatdrinksleepcode please go ahead and take a crack at this. At this point I'm primarily looking at the packaging, which is going slowly as I've not had enough time to finish it yet.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73844494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74010768", "body": "cc @chcosta @jhendrixMSFT \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74010768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74118316", "body": "Looks like our CI is still failing with the same issue you already fixed. It does work for me locally so perhaps there is something else wrong or we need to reset the CI somehow.\n\nAs for the change it looks good to me. I'm assuming that is one of the parameters you need to pass at the command line to publish an updated package, but I will way for those instructions offline.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74118316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74122704", "body": "@dotnet-bot test this please\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74122704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74126709", "body": "LGTM once we here back from CI please merge.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74126709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74162275", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74162275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74175558", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74175558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74213298", "body": "Thanks @jthelin-microsoft while the change looks good to me I'm curious what prompted you to make the env variable changes? How does this make them more discoverable in the log file? Don't you already need to know the log file to discover what is in it :)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74213298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74219228", "body": "More interesting to me is the actual build command line which we are also putting into the log which is why we call the build target twice once with echo and once without. However I'm also perfectly fine with having them be in environment variables assuming your CI system or logs are capturing those. As for the duplication it isn't really bad in this build.cmd it is a little worse in the build.cmd in our corefx repo so feel free to submit a PR with an update for that one as well (assuming you are doing work with that repo as well, which I assume you are otherwise I'm not sure why you are using our build tools :))\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74219228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74344200", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74344200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74617504", "body": "LGTM just had a couple minor questions/comments.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74617504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74804275", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74804275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74813782", "body": "@AlexGhiondea other than the last few comments and a squash the changes look good to me.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74813782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74982701", "body": "The support for this has been included in the build tools we now just need to decide whether or not we include it by default by setting AssemblyComVisible=false in our src\\dir.targets in the CoreFX repo. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74982701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74983464", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74983464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/75165527", "body": "LGTM We need to ensure it gets set early enough before it is used.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/75165527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/75175596", "body": "@jhendrixMSFT I assume you will be producing a new build tools package soon with your other change can you please also review/merge this change to get it included in that update.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/75175596/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/75354912", "body": "LGTM. However I do wonder of BuildRevisionNumber or BuildMinorVersion would be better names, but I'm fine either way.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/75354912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/75416868", "body": "Thanks @JeremyKuhne we originally did have these listed in VS but the list kept getting stale as we added more so I ended up removing them. Perhaps we can just wildcard them to avoid that issue and still have them easily available in VS. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/75416868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/75451631", "body": "While considering that we should also consider using wildcards to specify the list in the nuspec https://github.com/dotnet/buildtools/blob/master/src/nuget/Microsoft.DotNet.BuildTools.nuspec. The less explicit lists we have to maintain the less likely we are to cause issues.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/75451631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/76209800", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/76209800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/76430304", "body": "cc @nguerrera @jhendrixMSFT \n@JeremyKuhne could you squash these commits?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/76430304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/76430365", "body": "@JeremyKuhne could you squash these commits?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/76430365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/76490408", "body": "> Wes, do I need to change the package version here too with my changes? \n\nDon't update the package version as part of these changes. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/76490408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/76774672", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/76774672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77023564", "body": "That seems reasonable to me as well.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77023564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77428380", "body": "I think you may need to also improve your diffing such that it works with different line endings. I don't think a default string compare will work.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77428380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77456968", "body": "@tarekgh I think it maybe required now because I suspect the mix of TFS and git will mess around with the line endings and we may likely cause more breaks when mirroring to TFS.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77456968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77676047", "body": "@jhendrixMSFT my comments would apply to all the project files in this initial check-in. What is the plan for using these?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77676047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77676211", "body": "I think we should just let the task handle the message writing on error but the other parts looks good.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77676211/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77781212", "body": "cc @nguerrera @FiveTimesTheFun @mmitche \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77781212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77781606", "body": "cc @tarekgh @FiveTimesTheFun \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77781606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77879134", "body": "@mmitche Yes that is the plan, any .NET Core based repo that is using buildtools should be importing this.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77879134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77949587", "body": "As we chatted please update to 00015 instead.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77949587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/comments/16808418", "body": "Should this be a \"-\" or just a \".\"?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/16808418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/16808423", "body": "Why is this required now?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/16808423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/16818139", "body": "What is the \"K\" for?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/16818139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/16818161", "body": "We should remove this default from the targets file now since we have it in the task. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/16818161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/16818172", "body": "With our new minor version plan I don't think we actually need the time any longer correct?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/16818172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/16818769", "body": "nit: Why do you need a local variable to captured here? Why not just put the TryParse in the if condition?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/16818769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/17112634", "body": "This should be the full file path not just the directory. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/17112634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/17112635", "body": "These should come from the targets not be hardcoded.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/17112635/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/17112639", "body": "I expect that this should be part of the command line being passed \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/17112639/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/17112647", "body": "Why are we using the assemblylist? Why wouldn't we just pass the items directly through msbuild item groups? We should avoid the intermediate file writing if we can. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/17112647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/17112652", "body": "This should be set set of command lines and not just one. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/17112652/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/17112662", "body": "I don't think this should be a parameter to the script it should just be hard coded based on what we pass to our task. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/17112662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/17112670", "body": "This should not be a script parameter it should be one of the command lines we run. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/17112670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/17112677", "body": "Shouldn't be special cased in every script. Should just be an extra command generated when making an ILC test runner. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/17112677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/17112719", "body": "We should simplify this and make it only take 2 parameters `RunTests.bat {PackageRoot} {ExecutionDir}` and we just `set PACKAGE_ROOT=%1` and `set EXECUTION_DIR=%2` and beyond that nothing should be needed. We can check if those are valid after you set but that is all that is needed we don't need any fancy arg parsing. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/17112719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/17112780", "body": "I don't think there is a need for this split with the new model. We should just use `%EXECUTION_DIR%` in the command line. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/17112780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/20236236", "body": "oops I must have a had a brain fart and dumped the wrong key. Thanks @akoeplinger.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/20236236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/22545835", "body": "I already fixed that based on your feedback in the PR. Look at the follow-up commit. ", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/22545835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/23950340", "body": "I still think you should check the !allowOverwrite flag before Checking if the blob exists we don't need to do the network call for cases were we allow overwriting. ", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/23950340/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/23950347", "body": "Do we need to do ignorecase comparison here? ", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/23950347/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/23950400", "body": "Why is this check interesting? I would just always pass allowOverwrite for this case. ", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/23950400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22276101", "body": "Looks like there is already a mis-match with the M.B.F being 12, so I'm happy with this change. Should we also explicitly put Version=12.0.0.0 on the M.B.Utilities.v12 as well?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22276101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22277512", "body": "Don't worry about. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22277512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22619300", "body": "Just a question as I don't know what this does, why is it needed? \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22619300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22633825", "body": "If you don't actually need these outputs you can just remove them as opposed to putting them in the None itemgroup.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22633825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22633917", "body": "Immo and I were having trouble getting this to work like this Is this why you had to change the directories to end in \".Tests\" instead?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22633917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22634020", "body": "Don't you want to update the build tools version number as well? Or are you planning to do that at another point?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22634020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/23122377", "body": "The reason for that semaphore file is to support incremental building. In some targets like this one there aren't any clear outputs that we can pick before hand so we have to make one, and the semaphore file is a way to handle that. We don't want msbuild to do any work here if the pacakge.config files aren't newer than the semaphore file so we skip the target all together. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/23122377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/23790494", "body": "I would have preferred powershell I guess I can live with perl :)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/23790494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/23824040", "body": "This was fixed differently in the corefx repo (see https://github.com/dotnet/corefx/pull/406) should we instead fix it that way or do you think it is better to remove the Microsoft.Common.targets import? \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/23824040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/23827574", "body": "I kind of like this approach as well, I don't actually remember why I ever did that import :) However I was just pointing out that it was different and thus inconsistent in the CoreFX repo, we could of course do the same fix over there. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/23827574/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/24287122", "body": "Just for clarity it may be worth adding a comment here that we need a version already on the nuget feed to build the buildtools repo and it cannot be the currently built one.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/24287122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/24287134", "body": "Should we use int.TryParse to be more resilient to failure? \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/24287134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/24287138", "body": "nit: NuSpecFile\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/24287138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/24287145", "body": "This line is getting way too long. Would you mind splitting it up into a set of Property concats?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/24287145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/24287151", "body": "With this change I assume we can remove the dependency on the git library now correct?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/24287151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25543064", "body": "nit:Indent level\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25543064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25543116", "body": "Why is this the only file that supports the .vb extension?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25543116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25543843", "body": "The comment about checking out the file doesn't make sense in a git based world perhaps we just remove the second sentence.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25543843/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25543919", "body": "Can you put these in a using statement instead of calling Close directly?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25543919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25543954", "body": "Generally we put fields at the top of the class. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25543954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25544036", "body": "This comment should be updated now with this model.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25544036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25545038", "body": "We may want to generalize this message a little to make have it make sense on both TFS and github.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25545038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25545067", "body": "Agreed and you should leave the ToolsVersion=\"12.0.\"\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25545067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25546724", "body": "I think I would simplify it to:\n\n> Do not edit this file manually it is auto-generated during the build based on the .resx file for this project.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25546724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25993857", "body": "Why are you passing out the Message?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25993857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25993864", "body": "I wouldn't expect you to need to pick up the message as an out parameter now that you are calling Log.Error I would expect it to already do what you appear to be doing with that message.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25993864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26000798", "body": "We can walk through it on Monday but from my local testing it works as I expect and you shouldn't need anything but the Log.LogError. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26000798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25993836", "body": "Shouldn't this project use the common versioning.targets file from buildtools?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25993836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25993852", "body": "I assume with our ResolveNugetPackages this reference isn't actually needed correct?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25993852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26061340", "body": "Yes I have another change that will address this once my current PR for the Build.Common.targets gets merged and we produce a new drop.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26061340/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26623326", "body": "\"Failed to generate the resource code with error:\\n\"\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26623326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26881453", "body": "Can we try to keep most of these in the perf testing targets? It looks like you are putting it here for the batching parameters but in general I think the directory structure will be able to keep these files from clashing. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26881453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26881481", "body": "You are going to clash with @eatdrinksleepcode current PR https://github.com/dotnet/buildtools/pull/116\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26881481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26881027", "body": "Don't update the version in the nuspec as this will get updated with a build number after prerelease automatically when we produce a new build tools package. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26881027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26548833", "body": "Can you please capture these inputs into an item group so they can be shared between this and the Copy target? Perhaps capture these in the TestCopyLocal item group. While you are at this could you handle https://github.com/dotnet/buildtools/issues/92 as well?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26548833/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26548889", "body": "Why not just add a DependsOnTarget=\"CopyTestToTestDirectory\"? Does that still force it to run even if the Inputs/Outputs are in-sync for this target?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26548889/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26548926", "body": "Why isn't the test results file enough for a semaphore? Is it because it also exists when the a failure occurs? \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26548926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26548942", "body": "I think it is probably worth actually using he same Inputs/Outputs the copy as you are doing for the Run.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26548942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26549018", "body": "While right now we only have one TestTrargeFramework the goal is to have more in he future and by moving this outside the target you have broken the batching that as occurring in the target. You may need to actually do the file path building inline in the target (even if it is duplicated). \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26549018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26549047", "body": "This \"%\" he is what made this target batch on all TestTargetFrameworks but by removing from the target it we are no longer batching.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26549047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26549081", "body": "Based on your other work you made me realize that we are going to have a conflict with the testResults.xml file as well when we start batching. We are going to need to figure out a work around for that.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26549081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26549111", "body": "Perhaps we should just rename/move/copy the testresults.xml file to a testResults.failed.xml or testResults.succeeded.xml and use that as the semaphore. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26549111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26549714", "body": "Your correct as the tests will be in a different directory so they won't conflict.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26549714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26623666", "body": "Yes you are probably right and perhaps a specific semaphore files is still best. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26623666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26623694", "body": "We haven't fully defined any others yet but I would expect there will be multiple TestTargetFramework items each with their own folder. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26623694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26623841", "body": "For the Outputs here I was kind of thinking about a similar Semaphore file. However given that you are going to still use the CallTarget on this the inputs/outputs aren't really necessary. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26623841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26623892", "body": "This seems reasonable to me, at least for now. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26623892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26881191", "body": "I would still like these inputs to be pulled out into their own item group as they are shared with the CopyTestToTestDirectory. They aren't going to be used an Inputs to that target but they are used as part of the copy step (i.e. TestCopyLocal item group) and I would perfer we only have one place to keep these sets in sync. For example when you added AllItemsFullPathWithTargetPath you add to add it in both places and if we add others in the future I suspect people will miss one or the other locations. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26881191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26881272", "body": "At some future point we will need to figure out how to pass the batch parameters to CopyTestToTestDirectory as well but for now I'm fine with ignoring that.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26881272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26976268", "body": "Two more comments\\questions:\n1) Is it worth putting this target with RunTestsForProject or just keeping it here? Just a question I'm not sure which I like better.\n2) We should probably rename this to be more specific. Something like RunTestsForProjectTargetInputs to make sure it doesn't class with other things that maybe TestInputs. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26976268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/27001989", "body": "For #1 I kind of agree with you I'm fine with combining both into tests.targets\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/27001989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/27132915", "body": "It is my understanding that you cannot use a DependsOnTargets value to compute the Inputs/Outputs/Conditions for a target as all those are evaluated at the same time. Can you please double check that this is doing what you expect? \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/27132915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/27141606", "body": "What is unclear to me from that is when the property values in Inputs/Outputs are actually evaluated. It was my impression (could be wrong) that all those properties are evaluated at the same time and in which case the properties for inputs wouldn't have the correct values if they were computed by the DependsOnTargets targets. However that should be easy to test and that is all I was asking for verification on.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/27141606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/27158199", "body": "Thanks for verifying. That invalidated one of my MSBuild assumptions that I'm going to need to play around with more later to better understand.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/27158199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/27342064", "body": "I would prefer if we didn't need to do this in everyone's dir.props and we only had one way to have DefineConstances which is with semi-colon's and then all in one place you translate them to comma delimited.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/27342064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/27342072", "body": "This is the place I would translate the DefineConstants to be \"comma\" delimited.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/27342072/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/27342177", "body": "I was hoping that we could keep the general defines non-duplicated by just having one set that is semi-colon delimited and we could split that and then comma delimited it in a single location. Any VB projects should choose to be semi-colon or comma delimited as I think either would still work.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/27342177/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/27368141", "body": "Have you verified that both the native and Roslyn C# compiler supports comma? We still support both.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/27368141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/27415707", "body": "Thanks @AlekseyTs. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/27415707/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/27342083", "body": "Why would you set this all the time? I would expect this to be conditioned in some way. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/27342083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "MattGal": {"issues": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/1826", "title": "Add support for signing .NuPkgs to existing BuildTools workflow", "body": "Currently, files which require signing\r\n\r\n- Product assemblies pick up a default props file which specifies an AssemblyKey property.  This can be customized [like this](https://github.com/dotnet/corefx/blob/45d30e6bdf44d4a0e55df5a6064e8275cdf14d25/src/System.IO.Pipes.AccessControl/dir.props#L6) to specify different keys (PRSS / Microbuild must know these key monikers)\r\n- A task named ReadSigningRequired figures out all assemblies built by all CoreFX projects which expect to be signed and the key they will use. \r\n- A task named WriteSigningRequired places marker files adjacent to all assemblies we want to sign.\r\n- All the files with an adjacent marker are discovered into an ITaskItem group. \r\n- Microbuild signing tasks are invoked on this group of items.\r\n\r\nNow, we will need to do the same thing for nupkgs.  Potentially, we may not want to sign ALL nupkgs at once, or sign some with different keys (as the assemblies are).  So, we'll need a build-tools friendly way for a repo to specify:\r\n\r\n- Store value of desired assembly key name somewhere relevant.  An obvious place is inside the [pkgproj files](https://github.com/dotnet/corefx/blob/master/src/Microsoft.CSharp/pkg/Microsoft.CSharp.pkgproj).  \r\n- Make sure ReadSigningRequired can traverse these and produce the signing required files adjacent to nupkgs.\r\n- submit these to microbuild AFTER all other signing and packaging work happens.\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1757", "title": "Handle hitting MAX_PATH in Microsoft.DotNet.Build.CloudTestTasks.DownloadFromAzure ", "body": "We need to augment the Microsoft.DotNet.Build.CloudTestTasks.DownloadFromAzure class to check for MAX_PATH and log any file names that hit MAX_PATH, and either \r\n\r\n1) use MAX_PATH aware paths and APIs to make this just work or\r\n2) Error out with a full list of all >= MAX_PATH files that it would have liked to have written to disk.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1417", "title": "Need to investigate and fix missing GetTargetFrameworkProperties target when updating buildtools", "body": "It's likely a mis-set property or path construction, but when upgrading WCF to the latest build tools version  I ended up having to make the following workaround:\r\n\r\nhttps://github.com/dotnet/wcf/blob/master/src/dir.targets#L28 \r\n\r\nWhile it's fairly innocuous, it should be understood and fixed.  GetTargetFrameworkProperties is defined in Microsoft.Common.CurrentVersion.targets so should always be around.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1414", "title": "No way to disable Dumpling on Helix runs", "body": "See https://github.com/dotnet/buildtools/blob/66dc7235af5e0a9f3edcaa929da7f0a5fdd21259/src/Microsoft.DotNet.Build.Tasks/PackageFiles/tests.targets#L343\r\n\r\nWe should add some sort of explicit check for false, or any other way to opt out of this.\r\n@sepidehMS  FYI.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1230", "title": "Run tool \"Setting\" values default behavior can be confusing", "body": "I noted this while adding whatif / dry-run support to Run.exe.  Specifically, for boolean setting flags the only way to get them to work properly is to set the default value to string.empty, as any other value prevents the user from providing a value at all.  This leads to code like this:\r\n\r\n                    Values = new List<string>() { \"true\", \"false\" },\r\n                    ValueType = RunToolSettingValueTypeReservedKeyword,\r\n                    Description = \"Run tool specific setting.  Set to 'true' to only display commands chosen and not execute them\",\r\n                    // Currently, providing a default value for this setting will prevent it being overwritten by the command line.\r\n                    // While it is not intuitive, the code as-is supports \"<some command> -whatif\" without requiring a boolean argument.\r\n                    DefaultValue = string.Empty\r\n                };\r\n                Settings.Add(WhatIfReservedKeyword, whatIfSetting);\r\n\r\n... which makes folks think they will have to provide values like -whatif=true to use it.    This is lower priority but it's definitely the sort of thing you don't figure out until stepping through in a debugger (or noticing the comments I added).", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1097", "title": "SendToHelix task should print out raw response text if response is not JSON-Deserializable", "body": "In the case of receiving a response from POST'ing to the Helix API, the response may be HTML and not JSON.  IN this case, we should catch the exception and print the raw content of the stream we're attempting to deserialize.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1097/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1090", "title": "Change project type for Run.exe to a dotnet core app", "body": "Currently Run.exe builds as a \"Portable .NET Console app\" project type despite being runnable from dotnet.exe.  As such, F5 debugging of the project doesn't work.\n\nFor engineers working to debug and add features to this library, having a F5-debug-able project makes good sense and should be fairly cheap.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1089", "title": "Run.exe can capture input state, resulting in strange console behavior", "body": "I routinely run into this issue when using Ctrl-C / Break to cancel a build started by Run.exe.  The symptoms include:\n- Tab no longer causes file name completion, but rather inserts a tab (indentation)\n- Pressing Enter/Return causes a carriage return the first time, works as expected the second time.\n\nThere's no obvious reason for this;  there's some theories around it being related to Win32 APIs that the System.Console libraries PInvoke to, but no proof yet. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1079", "title": "Consider not requiring '-' character before action verbs for Run.exe", "body": "Consider how a tool like dotnet.exe works:\nTo restore nuget packages (a command), one calls: **dotnet restore**, to publish **dotnet publish** etc.\n\nFor the commands supported by Run.exe, they are not stored in config.json this way but they expect and print usage with a '-' character preceding them, e.g. \"**build.cmd -binaries**\"\n\nThis behavior is confusing to the user since a flag like -binaries looks to the untrained eye more like a flag or a parameter versus an action.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1079/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1078", "title": "Run.exe's usage output is always max verbosity", "body": "Currently, when using -? to get help with the standard developer work flow, the output ends up as several pages of information, much of which is not necessary to actually use the program.\n\nIdeally the basics of each command could be shown using 1-2 lines apiece and fitting on a single page;  Users could see the large paragraph explaining what run.exe is, every option, and the resultant msbuild command produced with an argument like \"-?  -v \" or similar.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1078/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/dotnet/buildtools/commits/cb48d1119ecc33b29df16a31079a28aed0f55488", "message": "Merge pull request #1848 from MattGal/Enable_NuPkg_signing\n\nAdd WriteSigningRequired calls to Packaging (for nupkg signing in future)"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/3819e8e9f03fc54193af5c4a2afde264bb5e287d", "message": "Add WriteSigningRequired calls to Packaging immediately after package is created."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/ee5cdfa030cf6c66a32e2eb9b22fc1d6e2a6f4dd", "message": "Merge pull request #1660 from MattGal/helix_runners_license_headers\n\nRemove unused runner scripts, add license header to remaining ones"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/d7c7b5bb415839d0cc9d95d45009a0bbf2a384b6", "message": "Remove unused runner scripts, add license header to remaining ones"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/1457", "title": "Include Pdb for xunit console netcore", "body": "@weshaggard , @chcosta , @yizhang82 \r\n\r\nThis helps call stacks and debugging tests which use this executable.  \r\n\r\nSince we provide no way to do this on a per-nuspec basis, I just did this for the entire buildtools repo;  since in most cases (some exceptions) files are included explicitly, this adds just 176.5 KB for the entire 8 MB suite of NuPKgs to bring along all adjacent pdbs that happened to already be included by the nuspecs.\r\n\r\nIt also turned out that the packaging .targets file never actually plumbed through the ability to set the IncludeSymbolsInPackage property, so I fixed that as well.  We may want to plumb through more there in the future.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/comments/22544459", "body": "Releative?", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/22544459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/22545878", "body": "ah :) Was just chasing down the recent DownloadFromAzure issue.  GitHub confusion.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/22545878/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "mmitche": {"issues": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/1822", "title": "PublishOutputLeg target doesn't exst", "body": "From https://github.com/dotnet/buildtools/blob/280705d9d12af2fe0997509474825d2c9cbe7932/src/Microsoft.DotNet.Build.Tasks.Feed/PackageFiles/Microsoft.DotNet.Build.Tasks.Feed.targets#L1\r\n\r\nThis shouldn't set the default target", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [{"url": "https://api.github.com/repos/dotnet/buildtools/commits/137894bcdaa36a5481939af12dfcb0f1d0c33ee6", "message": "Filter should be appended when getting the next page of results (#1861)\n\nThe next marker is often non-empty even when the first page of blob results returned is empty.  Without adding the filter again, we will then list everything in the container"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/e67995e49c659f3fddfc49aa64fede46375dcb89", "message": "Fix misbalanced parens (#1857)"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/43e3b056bd7ab9bf75711ebc638bf90925983b17", "message": "Parse blob url (#1856)\n\nMake feed parsing task more generic.  Do not require the feed url to end in index.json"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/e7c1ec2df66fd078999faeb22bf95641a9c7d081", "message": "Fix typo - Move anchor to beginning of regex. (#1835)"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/313928e5c6f1321fccd61953db0559416e6c27b6", "message": "Merging feed/blob tasks (#1831)\n\n* Merging feed/blob tasks\r\nTwo tasks are implemented in here:\r\n    1) Copies a set of blobs folders to a target blob folder\r\n    2) Parses a blob url to obtain the interesting bits of the URI (account name, container, blob path)\r\nThis supports a future PR (currently staged in the pipeline repo but will be moved to buildtools.  Which merges a set of feeds and feed related items (like assets) for product construction"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69067364", "body": "Refer to this link for build results (access rights to CI server needed): \nhttp://corefx-ci.cloudapp.net/jenkins/job/BuildTools_Build/2/\nTest FAILed.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69067364/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69068017", "body": "Refer to this link for build results (access rights to CI server needed): \nhttp://corefx-ci.cloudapp.net/jenkins/job/BuildTools_Build/3/\nTest FAILed.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69068017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69069857", "body": "Refer to this link for build results (access rights to CI server needed): \nhttp://corefx-ci.cloudapp.net/jenkins/job/BuildTools_Build/4/\nTest FAILed.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69069857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69070477", "body": "Refer to this link for build results (access rights to CI server needed): \nhttp://corefx-ci.cloudapp.net/jenkins/job/BuildTools_Build/5/\nTest FAILed.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69070477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69071246", "body": "Refer to this link for build results (access rights to CI server needed): \nhttp://corefx-ci.cloudapp.net/jenkins/job/BuildTools_Build/6/\nTest FAILed.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69071246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69072224", "body": "Refer to this link for build results (access rights to CI server needed): \nhttp://corefx-ci.cloudapp.net/jenkins/job/BuildTools_Build/7/\nTest PASSed.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69072224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69074924", "body": "Okay this is for real then.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69074924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69075661", "body": "Refer to this link for build results (access rights to CI server needed): \nhttp://corefx-ci.cloudapp.net/jenkins/job/BuildTools_Build/8/\nTest FAILed.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69075661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69090534", "body": "Refer to this link for build results (access rights to CI server needed): \nhttp://corefx-ci.cloudapp.net/jenkins/job/BuildTools_Build/9/\nTest FAILed.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69090534/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69098286", "body": "Refer to this link for build results (access rights to CI server needed): \nhttp://corefx-ci.cloudapp.net/jenkins/job/dotnet_buildtools_prtest/1/\nTest PASSed.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69098286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69098960", "body": "Refer to this link for build results (access rights to CI server needed): \nhttp://corefx-ci.cloudapp.net/jenkins/job/dotnet_buildtools_prtest/2/\nTest PASSed.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69098960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69099535", "body": "Refer to this link for build results (access rights to CI server needed): \nhttp://corefx-ci.cloudapp.net/jenkins/job/dotnet_buildtools_prtest/3/\nTest PASSed.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69099535/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69099568", "body": "Yes, I am changing around the job names right now to be a little clearer since it looks like we have to have separate PR and non PR jobs.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69099568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69368981", "body": "15:16:11 C:\\Jenkins\\workspace\\BuildTools_Build>\"C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\vcvarsall.bat\" x86   && build.cmd /p:SkipTests=true \n15:16:26   Unable to find version '2.0.0-beta5-build2785' of package 'xunit.runner.dependencies.netcore'.\n15:16:26 C:\\Jenkins\\workspace\\BuildTools_Build\\src\\Microsoft.DotNet.Build.Tasks\\targets\\depending.targets(10,5): error MSB3073: The command \"\"C:\\Jenkins\\workspace\\BuildTools_Build\\bin\\tools\\NuGet.exe\" restore \"C:\\Jenkins\\workspace\\BuildTools_Build\\src\\xunit.console.netcore\\packages.config\" -PackagesDirectory \"C:\\Jenkins\\workspace\\BuildTools_Build\\src\\packages\\ \" \" exited with code 1. [C:\\Jenkins\\workspace\\BuildTools_Build\\src\\dirs.proj]\n15:16:26 Build step 'Execute Windows batch command' marked build as failure\n15:16:34 MicrosoftAzureStorage - Build failed, hence canceling the upload of the artifacts to Azure storage\n15:16:34 Finished: FAILURE\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69368981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69819145", "body": "PR for consumption coming up soon.;  The build is currently broken (not related).\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69819145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69822717", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69822717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69823153", "body": "test this please\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69823153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69823594", "body": "@FiveTimesTheFun Looks good now\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69823594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69826633", "body": "@FiveTimesTheFun We don't today, and I think as policy it makes sense not to.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69826633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/70343027", "body": "test this please (trying to diagnose the Jenkins remoting failures)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/70343027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/70345306", "body": "test this please (trying to diagnose the Jenkins remoting failures)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/70345306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/70347234", "body": "test this please (trying to diagnose the Jenkins remoting failures)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/70347234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/71059156", "body": "Yeah you're right, I'll take a look.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/71059156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74119200", "body": "@dotnet-bot test this please\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74119200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77875426", "body": "This looks great.  Are you going to push to import this in the other repos?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77875426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26985987", "body": "Should this be changed to ClrMetrics Condition=\"'$(ClrMetrics)' == ''\"?  That way individual projects could overload the metric types.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26985987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/27045892", "body": "Gotcha sounds good.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/27045892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "maryamariyan": {"issues": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/1784", "title": "Problem with baselining ApiCompat error ", "body": "In corefx, System.ComponentModel.Composition project had to skip running apicompat in order to skip the following error:\r\n\r\n```\r\nApiCompat Error: 0 : Unable to resolve assembly 'Assembly(Name=System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e)' referenced by the contract assembly 'Microsoft.Cci.DummyModule'.\r\n```\r\n\r\nWhen using the msbuild option /p:BaselineAllAPICompatError the src project of System.ComponentModel.Composition succeeds. \r\nBut even when the apicompat txt file exists and without the above baseline option the build will fail.\r\n\r\nNote: After this issue gets fixed we'll need to enable running apicompat again on System.ComponentModel.Composition\r\n\r\ncc: @weshaggard @danmosemsft ", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "maririos": {"issues": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/1734", "title": "Fix SkipCreateWindowsPdbsFromPortablePdbs in BuildTools", "body": "@dagood commented on [Thu Sep 28 2017](https://github.com/dotnet/core-eng/issues/1838)\n\nI tried to use this property to disable the conversion target in CoreCLR release/2.0.0 with https://github.com/dotnet/coreclr/pull/13925, but it didn't work: https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build?_a=summary&buildId=1020348.\r\n\r\nThe skip is needed because a certain CoreCLR dll/pdb is failing to convert.\r\nBuild failure issue discussing skip: https://github.com/dotnet/core-eng/issues/1769\r\nUnderlying conversion issue: https://github.com/dotnet/core-eng/issues/1771\r\n\r\n@MattGal will be working around this by turning off the whole step in the build definition json. Once we fix the Skip property (or the underlying issue) we can enable the step again.\r\n\r\nI think the issue is that the property doesn't flow through properly to the target it's meant to disable.\n\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1734/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1633", "title": "Enable BuildTools in Debian 9 for core-setup", "body": "@rakeshsinghranchi commented on [Wed Aug 02 2017](https://github.com/dotnet/core-eng/issues/1407)\n\nBuild Tools uses CLI version 2.0.0-preview1-005899 and it doesn't work on Debian 9 ( stretch ).\r\n\r\nRepro steps:\r\n1. On a Debian 9 docker image , execute core-setup/init-tools.sh \r\n\r\nExpected result:\r\ninit-tools.sh should execute successfully\r\n\r\nActual result:\r\nFailed with error : No usable version of the libssl was found\r\n\r\nReason:\r\nDotnet exhibits dependency on libssl1.0.0 which is not present in debian 9. Debian 9 carries libssl1.0.2. This issue has been fixed in latest builds of CLI. Currently build tools uses 2.0.0-preview1-005899 CLI.\n\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1633/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/974", "title": "Is it mandatory for settings and commands to have different names?", "body": "Right now the Settings, the Commands or the Alias names can't have the same name in the config.json file.\nThis is now causing problems when defying a setting that is a target in MsBuild and a Command with the same name.\nFor more information see PR dotnet/corefx#11003.\n\nWe should take a look to see if it is possible to work around this.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/857", "title": "Merge change of CommandLine.cs from the run folder to the common folder", "body": "The Run Command Tool (merged with PR #672 ) is using a copy of the class CommandLine.cs.\nInstead of having a copy we would like to merge the changes from the class under Run to the CommandLine.cs class under the common folder.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/857/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "eerhardt": {"issues": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/1730", "title": "Need to port release/2.0 changes to master", "body": "We made https://github.com/dotnet/buildtools/pull/1707 in just the release/2.0.0 branch.\r\n\r\nThis is to track getting these same changes ported to master, so repos that use buildtools can use these changes in master as well.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1714", "title": "run.exe should default {OSRid} to win10 when on a win10 machine", "body": "When building on a win10 machine, the `{OSRid}` parameter in config.json files should be `win10` instead of `win7`.\r\n\r\nhttps://github.com/dotnet/buildtools/blob/78260239e4db68ad5c2df774a27d5f9a54fd92e5/src/Run/SettingValueProvider.cs#L24\r\n\r\nWhen building non-portable assets on Windows (like we do in `source-build`), we are producing `runtime.win10` packages when building on `win10`.  Then later when we want to consume those packages from a higher repo (like core-setup), `run.exe` is setting the repo's `OSRid` to `win7`.  So when we are restoring the packages, it is trying to find `runtime.win7` or `runtime.win` packages, but they haven't been created.  Only `runtime.win10` packages have been created.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1708", "title": "Automatically update BuildTools for release/2.0.0 branches", "body": "BuildTools gets automatically updated in corefx, coreclr, wcf, and core-setup in the master branches.  See https://github.com/dotnet/buildtools/issues/892.\r\n\r\nWe should hook this up for the release/2.0.0 branches as well.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1708/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1548", "title": "BuildVersion support update for SDK based projects", "body": "We should make the following changes to the BuildVersion support in order to work better with SDK-based .csprojs.\r\n\r\n- `BuildVersionFilePath` should be conditional based on whether it is set or not. https://github.com/dotnet/buildtools/blob/78260239e4db68ad5c2df774a27d5f9a54fd92e5/src/Microsoft.DotNet.Build.Tasks/PackageFiles/BuildVersion.targets#L5.  \r\n  - The definition of `$(BaseIntermediateOutputPath)` morphed a bit with SDK-based projects.  It was acceptable with original-style .csproj to have multiple projects pointing to the same `$(BaseIntermediateOutputPath)` location.  However, this is where NuGet writes the project.assets.json file by default, which means it has to be unique across different projects.\r\n- The `BuildVersionFile` should set the `<VersionSuffix>` property.\r\n  - VersionSuffix is a new property that is respected by SDK-based projects.  We are already setting it during the build if the `BuildVersionFile` doesn't exist: https://github.com/dotnet/buildtools/blob/36c522b935eec92c8b0440e9c5dde36e6e122d71/src/Microsoft.DotNet.Build.Tasks/PackageFiles/versioning.targets#L404-L410.  We should ensure this property is set in the file as well.\r\n\r\n/cc @chcosta @weshaggard ", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1471", "title": "Debian and Ubuntu docker files warning \"setlocale: LC_ALL: cannot change locale (en_US.UTF-8)\"", "body": "When building `dotnet/core-setup/master` inside of a docker container using any of the following images:\r\n\r\n```\r\nmicrosoft/dotnet-buildtools-prereqs:debian-8.2-debpkg-9f87c3c-20173003023006\r\nmicrosoft/dotnet-buildtools-prereqs:ubuntu-16.10-debpkg-ec863bb-20170003030028\r\nmicrosoft/dotnet-buildtools-prereqs:ubuntu-16.04-debpkg-e5cf912-20174703024721\r\nmicrosoft/dotnet-buildtools-prereqs:ubuntu-14.04-debpkg-e5cf912-20175003025046\r\n```\r\n\r\nI'm getting warnings during the build that look like:\r\n\r\n```\r\n/bin/bash : warning : setlocale: LC_ALL: cannot change locale (en_US.UTF-8) [/root/core-setup/src/pkg/packaging/dir.proj\r\nperl : warning : Setting locale failed. [/root/core-setup/src/pkg/packaging/dir.proj]\r\nperl : warning : Please check that your locale settings: [/root/core-setup/src/pkg/packaging/dir.proj]\r\nperl : warning : Falling back to the standard locale (\"C\"). [/root/core-setup/src/pkg/packaging/dir.proj]\r\nperl : warning : Setting locale failed. [/root/core-setup/src/pkg/packaging/dir.proj]\r\n```\r\n\r\nWe've seen this before, and it causes problems when commands' output are trying to be parsed.  See the discussion starting at https://github.com/dotnet/sdk/pull/935#issuecomment-285087032 for when this broke the CLI builds.\r\n\r\nWe should configure our docker images to not get these warnings.\r\n\r\n/cc @MichaelSimons @ellismg @chcosta ", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1471/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1367", "title": "Rename $(ProjectDir) to $(RepoDir) or something similar", "body": "`$(ProjectDir)` is a poor name to be used for the directory that is the root of the repository.  When you are looking at MSBuild logic, and come across `$(ProjectDir)` in a .csproj, your first inclination is that this is the directory in which the .csproj (the \"project\" in msbuild) is contained.\r\n\r\nWe should rename this property (which is required to be declared in all repos that use build tools) to something that is more understandable to new people.  That way folks don't get confused, and don't need \"tribal knowledge\" to know that `$(ProjectDir)` really means `$(RepoRootDir)`.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1367/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/dotnet/buildtools/commits/563273deddaed3f5d4931509a06a6b663f292b5c", "message": "Merge pull request #1808 from eerhardt/UpdateRoslyn\n\nUpdate Roslyn to 2.6.0-beta3-62316-02"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/e6efdf8c6ca499e114919afa5e94f4614e767d3e", "message": "Update Roslyn to 2.6.0-beta3-62316-02"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/f8dd37582242ed25d0e9f102703f877f6b23ffe9", "message": "Fix RestorePackages to respect Repo API args.\n\nWhen restoring a .depproj, the Repo API args for dependency flow are not getting passed through, so the correct package versions are not being respected.\n\n(cherry picked from commit 9d555b6e0f101c9f6456a2d14de96dc68d6ee127)"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/a177c85d78799e6c2407ce88e857546e490d83c2", "message": "Merge pull request #1686 from eerhardt/MaintainerCanModify\n\nAllow maintainers to modify auto PRs by default."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/595934ba08f372ca112a339630307de4fe8ab8c4", "message": "Allow maintainers to modify auto PRs by default."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/4f8d9aa95e25807923c5dc5e5276826374f0d822", "message": "Merge pull request #1651 from eerhardt/SdkSupport\n\nAllow projects to disable the Roslyn in BuildTools."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/11bf8ed7ce8b3431d2c00e0797658e734073ffeb", "message": "Allow projects to disable the Roslyn in BuildTools.\n\nWhen using BuildTools in a repo like core-setup, where we want to use the dotnet-cli to build managed projects, we need to be able to not use the Roslyn properties that come in BuildTools.\n\nFor example, setting `<RoslynTargetsPath>$(ToolRuntimePath)</RoslynTargetsPath>` breaks any SDK project using the dotnet-cli."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "joperezr": {"issues": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/1726", "title": "Set checksum algorithm using csc task parameter instead of response file", "body": "Before, the csc msbuild task didn't support passing in a checksum algorithm as a parameter, so currently we are passing a response file that would set the algorithm. This may cause problems since VS won't pass in response files when building, so it could lead to having to different outputs whether you build in VS or if you don't. We should instead move and use the MSBuild task parameter to set the checksum property to fix this.\r\n\r\ncc: @weshaggard ", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1697", "title": "Remove workaround that copies RID specific assets when initializing buildtools in non-Windows", "body": "On PR #1687 we had to make a workaround that manually copied a few assets that were getting published to RID specific locations into the tools directory when running init-tools on non-Windows. This issue is to track the work of removing that workaround, and instead trying publishing the tool runtime to the right RID so this is won't be required.\r\n\r\nWorkaround is here: https://github.com/dotnet/buildtools/pull/1687/files#diff-519820c77125188495c6a22d71f859ceR112\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1669", "title": "[To-Do] Remove workaround in init-tools that is renaming the compilers to have a .exe extension", "body": "In our repos we use a custom task library in order to launch the compilers, and this task will try to find them like: `csc.exe` and `vbc.exe` in order to spawn them. The problem is that newer versions of roslyn have changed the extension of the compilers to be `csc.dll` and `vbc.dll` instead. This causes the custom task library to not be able to find them anymore. As a workaround, PR #1661 added a line in init-tools that would rename the extension which will make it all work, but this issue is to track the work of removing that workaround and instead use the real task library.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1076", "title": "The archiving of the test build shouldn't use project-specific configuration for the location of the zip", "body": "Today, official builds have a step after running tests for a particular project that zips them and puts them in a directory. The selection of this directory, [is using that project's specific configuration](https://github.com/dotnet/buildtools/blob/master/src/Microsoft.DotNet.Build.Tasks/PackageFiles/publishtest.targets#L254-L255) to build the `<TestArchiveDir>`.\n\nOnce all test builds and runs are done, we use a _centralized_ project to call a target on it, which will push to helix all of these zip files. This project obviously is not aware of the individual project's configuration, so [it tries to make wild guesses](https://github.com/dotnet/buildtools/blob/master/src/Microsoft.DotNet.Build.CloudTestTasks/PackageFiles/CloudTest.targets#L311-L330) to try to find where these zip files live. We were getting lucky before and it was being able to find them, but that is not the case anymore since we recently added a bit more logic on where the perf zip tests are located for netcoreapp1.1 runs (they use to live in ...\\archives\\netcoreapp1.1*.zip folder, and now they live in ...\\archives\\netstandard1.7\\netcoreapp1.1*.zip) so the zip files can't be found any longer. This problem is currently blocking our official builds.\n\nThe proposed solution would be to instead use a static test archive dir where all zip files are located, and only add any project specific configuration to the name of the zip file if needed.\n\ncc: @weshaggard @markwilkie @chcosta @MattGal \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/705", "title": "GenFacades don't support rewriting Portable PDBs", "body": "Currently our x-plat builds for corefx generate portable PDBs for each library. After generating each one, we run GenFacades on top of the binary and symbols to add some type-forwards. Even though this works fine in Windows(because Windows doesn't generate Portable PDBs), it doesn't work on x-plat because CCI (GenFacades dependency) doesn't support Portable PDB rewriting. This issue is to track that once CCI adds support for them, we should make sure that GenFacades work as expected and that the symbols can now be used for debugging.\n\nCC: @weshaggard \nrelated: dotnet/corefx#5733 dotnet/corefx#5825\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/414", "title": "Move the portable targets dependency with the rest of the runtime dependencies once dotnet cli supports content files", "body": "Currently the CLI doesn't support content files so we need a workaround to manually copy some folders and files into the build tools runtime. Once dotnet supports them, we should remove this workaround.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/dotnet/buildtools/commits/34bc851ed314aa52aa6dd5a4d9c8f6350647fcef", "message": "Merge pull request #1715 from rartemev/fixed_GenerateDepsJson_task\n\nFixed GenerateDepsJson msbuild task"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/be18810164fe7bda4bc20ed9dcd16d25ee0f25e9", "message": "Merge pull request #1698 from joperezr/UpdateRoslyn\n\nUpdating roslyn to version 2.6.0-beta1-62126-01"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/1f91f424a78fcf2ea70e950fd86b45cbd93bc474", "message": "Updating roslyn to version 2.6.0-beta1-62126-01"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/cca3af948594a02102fb459f2e7b226fcb670c41", "message": "Changes required in order to move corefx to 2.0.0 CLI (#1687)\n\n* Changes required in order to move corefx to 2.0.0 CLI\r\n\r\n* Fix nativeDependencies for non-Windows\r\n\r\n* PR Feedback\r\n\r\n* Changing the default behavior of GenerateDepsJson task to be backwards compatible\r\n\r\n* Moving MSBuild runtimeconfig to the same as the rest of the jsons"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/81773bf377b42aa4f07f07281c413e07d7bad7a9", "message": "Merge pull request #1681 from joperezr/RoslynUpdate\n\nUpdating Roslyn to version 2.6.0-rdonly-ref-62111-06"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/af161ab739effbc14518c55c1b30b7ada459927d", "message": "Updating Roslyn to version 2.6.0-rdonly-ref-62111-06"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/2523deb675aaea33ac93da7f03c369e3e49d919b", "message": "Merge pull request #1679 from joperezr/RoslynUpdate\n\nUpdating the version of the roslyn compiler"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/70d554b826954857337b7912888640881ba6b657", "message": "Updating the version of the roslyn compiler"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/5c346cdf78bf42a566ac19460878681aceffd871", "message": "Merge pull request #1673 from joperezr/RevertUpdate\n\nRevert \"Updating the version of the roslyn compilers we use for building (#1661)\""}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/4c825f3f80a13b25589bb3307e3a624f335d1873", "message": "Revert \"Updating the version of the roslyn compilers we use for building (#1661)\"\n\nThis reverts commit ef6e0ca1922f9c5d50250484d598d7c1860dab4a."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/ef6e0ca1922f9c5d50250484d598d7c1860dab4a", "message": "Updating the version of the roslyn compilers we use for building (#1661)\n\n* Updating the version of the roslyn compilers we use for building\r\n\r\n* PR Feedback\r\n\r\n* Adding condition for incompatible versions\r\n\r\n* Changing the extension of the compilers as a workaround so that the msbuild task can find the compilers"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/comments/14724035", "body": "mmm not sure why this change was made, I'm sorry.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/14724035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/16818226", "body": "this is for the Timezone information. For example: -07:00 for PST or Z for UTC.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/16818226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/16818275", "body": "Actually you are right, I'll remove time from the DateFormat. We still need this format here though, because this is the format that matches what MSBuild returns as a Modified time.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/16818275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/16818304", "body": "I still need to pass it into the task, so that if somebody overrides it it may be passed along to the task.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/16818304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "danmosemsft": {"issues": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/1716", "title": "Cannot have multiple conditions on ConditionalFact unless they are on same type or all types are in test assembly", "body": "Right now you cannot have multiple conditions on a test attribute unless they are on the same type or on a type in the tes assembly.\r\n\r\nThis would be very useful but is not possible\r\n`[ConditionalFact(nameof(PlatformDetection.IsNotWindowsNanoServer), nameof(AdminHelpers.IsElevated))]`\r\n\r\nThe code below looks for the type PlatformDetection only in the current test assembly. If it would look in all loaded assemblies, it would find it inside xunit.netcore.extensions.dll. Same for AdminHelpers.\r\n\r\nhttps://github.com/dotnet/buildtools/blob/master/src/xunit.netcore.extensions/Discoverers/ConditionalTestDiscoverer.cs#L91\r\n\r\n/cc @safern ", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1585", "title": "Tests skip even if implementation assembly was updated", "body": "The incrementality fix https://github.com/dotnet/buildtools/pull/1584 (so that the tests don't get triggered 100% of the time) exposes the problem that the tests aren't triggered when the product changes.\r\n\r\nFor example, `msbuild /t:test` in `System.Console\\tests` will skip even if `System.Console\\src` was rebuilt. The `DiscoverTestInputs` target in `tests.targets` is supposed to include `System.Console.dll` in `@(RunTestsForProjectInputs)` but it does not because it is not present in `@(ReferenceCopyLocalPaths)` because it is an implicit dependency (? I'm not sure how this works)..\r\n\r\n@joperezr how should this correctly be fixed?", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1571", "title": "Pinvoke analyser isn't handling multiple baseline files", "body": "https://github.com/dotnet/buildtools/blob/master/src/Microsoft.DotNet.CodeAnalysis/Analyzers/PinvokeAnalyzer.cs#L31\r\n\r\nWe expect it to potentially pick up a generic one + a target group specific one and it shouldn't ignore all but one.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1305", "title": "build -? is busted", "body": "In CoreFX\r\n\r\n```\r\nC:\\git\\corefx.dan>build managed -?\r\nTools are already initialized.\r\nError: Object reference not set to an instance of an object.    at Microsoft.DotNet.Execute.Setup.FormatSetting(String option, String value, String type, String toolName)\r\n   at Microsoft.DotNet.Execute.Setup.BuildParametersForCommand(Dictionary`2 commandParameters, String toolName)\r\n   at Microsoft.DotNet.Execute.Setup.BuildCommand(String commandSelectedByUser, List`1 parametersSelectedByUser, Dictionary`2 parameters)\r\n   at Microsoft.DotNet.Execute.Setup.GetHelpCommand(String commandName, String alias)\r\n   at Microsoft.Fx.CommandLine.CommandLineParser.GetHelp(Int32 maxLineWidth, String parameterSetName, Boolean displayGlobalQualifiers)\r\n   at Microsoft.Fx.CommandLine.CommandLineParser.<>c.<ParseForConsoleApplication>b__0_0(CommandLineParser parser)\r\n   at Microsoft.Fx.CommandLine.CommandLineParser.Parse(Action`1 parseBody, Action`1 helpHandler, Action`2 errorHandler, Setup setupContent, String[] args)\r\n   at Microsoft.Fx.CommandLine.CommandLineParser.ParseForConsoleApplication(Action`1 parseBody, String[] args, Setup setupContent)\r\n   at Microsoft.DotNet.Execute.Executor.DefineParameters(String[] args, Setup setupInformation)\r\n\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1141", "title": "dot-net bot repo update PR's should include commit SHA's", "body": "eg https://github.com/dotnet/corefx/pull/12721/files tells me   <CoreClrCurrentRef>28bce260e5ca4c279913dd523ae70b3f4adb1e19</CoreClrCurrentRef> but this is the SHA for dotnet/versions. \n\nWhat I want to know is what changes this will bring me, ie., what the SHA is in coreclr. Right now I have to go to myget and get the package with the stated version, crack it and look at the commit ID inside it. \n\nIt would be simpler if the bot would just include this SHA in a comment in the XML file or similar.\n\n@joperezr \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1067", "title": "Improve BinClashLogger alert", "body": "http://dotnet-ci.cloudapp.net/job/dotnet_corefx/job/master/job/windows_nt_release_prtest/693/\nfailed with\n\nMSBuild Error\n\nerror MSB4015: The build stopped unexpectedly because the \"ReusableLogger\" logger failed unexpectedly during shutdown.\nIndication 1 \n\nif you look at the log though, it's the BinClashLogger telling us about a problem. Probably there is no way to do this cleaner than throwing an exception but we should add an Indication to jenkins for \n\nError : Multiple projects built twice with the same target path D:\\j\\workspace\\windows_nt_re---37265eab\\bin\\Windows_NT.AnyCPU.Release\\System.Net.Requests\\System.Net.Requests.dll.\n\nMSBUILD : error MSB4015: The build stopped unexpectedly because the \"ReusableLogger\" logger failed unexpectedly during shutdown.\n11:16:46 System.Exception: 1 bin clashes were detected during the build.\n11:16:46    at Microsoft.DotNet.Build.Tasks.BinClashLogger.Shutdown()\n11:16:46    at Microsoft.Build.Evaluation.ProjectCollection.ReusableLogger.Shutdown()\n11:16:46    at Microsoft.Build.BackEnd.Logging.LoggingService.ShutdownLogger(ILogger logger)\n11:16:46 Error : Multiple projects built twice with the same target path D:\\j\\workspace\\windows_nt_re---37265eab\\bin\\Windows_NT.AnyCPU.Release\\System.Net.Requests\\System.Net.Requests.dll.\n11:16:46 D:\\j\\workspace\\windows_nt_re---37265eab\\build.proj -->\n11:16:46   Global Properties:\n11:16:46     OSGroup = Windows_NT\n11:16:46     TargetOS = Windows_NT\n11:16:46     ConfigurationGroup = Release\n11:16:46     WithoutCategories = IgnoreForCI\n11:16:46 D:\\j\\workspace\\windows_nt_re---37265eab\\src\\dirs.proj -->\n11:16:46   Global Properties:\n11:16:46     TargetOS = Windows_NT\n11:16:46     ConfigurationGroup = Release\n11:16:46     WithoutCategories = IgnoreForCI\n11:16:46     DefaultBuildAllTarget = Build\n11:16:46     BuildAllProjects = true\n11:16:46     InputOSGroup = Windows_NT\n11:16:46     FilterToOSGroup = Windows_NT\n11:16:46 D:\\j\\workspace\\windows_nt_re---37265eab\\src\\src.builds -->\n11:16:46   Global Properties:\n11:16:46     TargetOS = Windows_NT\n11:16:46     ConfigurationGroup = Release\n11:16:46     WithoutCategories = IgnoreForCI\n11:16:46     DefaultBuildAllTarget = Build\n11:16:46     BuildAllProjects = true\n11:16:46     InputOSGroup = Windows_NT\n11:16:46     FilterToOSGroup = Windows_NT\n11:16:46 D:\\j\\workspace\\windows_nt_re---37265eab\\src\\System.Private.Xml\\src\\System.Private.Xml.builds -->\n11:16:46   Global Properties:\n11:16:46     TargetOS = Windows_NT\n11:16:46     ConfigurationGroup = Release\n11:16:46     WithoutCategories = IgnoreForCI\n11:16:46     DefaultBuildAllTarget = Build\n11:16:46     BuildAllProjects = true\n11:16:46     InputOSGroup = Windows_NT\n11:16:46     FilterToOSGroup = Windows_NT\n11:16:46 D:\\j\\workspace\\windows_nt_re---37265eab\\src\\System.Private.Xml\\src\\System.Private.Xml.csproj -->\n11:16:46   Global Properties:\n11:16:46     TargetOS = Windows_NT\n11:16:46     ConfigurationGroup = Release\n11:16:46     WithoutCategories = IgnoreForCI\n11:16:46     BuildAllProjects = true\n11:16:46     InputOSGroup = Windows_NT\n11:16:46 D:\\j\\workspace\\windows_nt_re---37265eab\\src\\System.Net.Requests\\src\\System.Net.Requests.csproj\n11:16:46   Global Properties:\n11:16:46     TargetOS = Windows_NT\n11:16:46     ConfigurationGroup = Release\n11:16:46     WithoutCategories = IgnoreForCI\n11:16:46     BuildAllProjects = true\n11:16:46     InputOSGroup = Windows_NT\n11:16:46 \n11:16:46 D:\\j\\workspace\\windows_nt_re---37265eab\\build.proj -->\n11:16:46   Global Properties:\n11:16:46     OSGroup = Windows_NT\n11:16:46     TargetOS = Windows_NT\n11:16:46     ConfigurationGroup = Release\n11:16:46     WithoutCategories = IgnoreForCI\n11:16:46 D:\\j\\workspace\\windows_nt_re---37265eab\\src\\dirs.proj -->\n11:16:46   Global Properties:\n11:16:46     TargetOS = Windows_NT\n11:16:46     ConfigurationGroup = Release\n11:16:46     WithoutCategories = IgnoreForCI\n11:16:46     DefaultBuildAllTarget = Build\n11:16:46     BuildAllProjects = true\n11:16:46     InputOSGroup = Windows_NT\n11:16:46     FilterToOSGroup = Windows_NT\n11:16:46 D:\\j\\workspace\\windows_nt_re---37265eab\\src\\src.builds -->\n11:16:46   Global Properties:\n11:16:46     TargetOS = Windows_NT\n11:16:46     ConfigurationGroup = Release\n11:16:46     WithoutCategories = IgnoreForCI\n11:16:46     DefaultBuildAllTarget = Build\n11:16:46     BuildAllProjects = true\n11:16:46     InputOSGroup = Windows_NT\n11:16:46     FilterToOSGroup = Windows_NT\n11:16:46 D:\\j\\workspace\\windows_nt_re---37265eab\\src\\System.Net.Requests\\src\\System.Net.Requests.builds -->\n11:16:46   Global Properties:\n11:16:46     TargetOS = Windows_NT\n11:16:46     ConfigurationGroup = Release\n11:16:46     WithoutCategories = IgnoreForCI\n11:16:46     DefaultBuildAllTarget = Build\n11:16:46     BuildAllProjects = true\n11:16:46     InputOSGroup = Windows_NT\n11:16:46     FilterToOSGroup = Windows_NT\n11:16:46 D:\\j\\workspace\\windows_nt_re---37265eab\\src\\System.Net.Requests\\src\\System.Net.Requests.csproj\n11:16:46   Global Properties:\n11:16:46     TargetOS = Windows_NT\n11:16:46     ConfigurationGroup = Release\n11:16:46     WithoutCategories = IgnoreForCI\n11:16:46     BuildAllProjects = true\n11:16:46     InputOSGroup = Windows_NT\n11:16:46     OSGroup = Windows_NT\n11:16:46 \n11:16:46 \n11:16:46 \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/dotnet/buildtools/commits/e6171d70ee98f62489939b9f07bf21c5b4b8f245", "message": "Update OneCore allowed list (#1840)\n\n* Update OneCore allowed list\r\n\r\n* Put httplistener back"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/44177fc45c2520b6459cc8117bf1d329af424d21", "message": "Fix typo (#1781)"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/e8b060b6a1e0e702a1c092f93bf123bee338eaab", "message": "Allow UAP remote runner service to run methods that return void (#1759)"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/d6756d4238149b7abd0368544fd218e4b318e727", "message": "Add XUnitShowProgress property (#1745)\n\n* Add XUnitShowProgress property\r\n\r\n* Fix for netfx which doesn't support it currently"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/df147b895deb4a12c9c9e09ffeb5c8e90824d533", "message": "Remove project.json from init-tools (#1743)\n\n* Remove project.json from init-tools\r\n\r\n* Redundant line"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/8e34d7c93b2beaa332640482e88d85d59f6329aa", "message": "Update ReportGenerator to 3.0.1 (#1728)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/80520675", "body": "Oops, I missed this comment.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/80520675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/87631463", "body": "Thank you. Same change though.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/87631463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/90799750", "body": "Given it's an untyped language I'm leaning towards leaving it as a boolean so nobody using it someplace new could trip up and not realize there's two versions of true.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/90799750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/90799778", "body": "No, but right now it's why I need it. Perhaps I should have put it in separately but it doesn't seem worth separating now.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/90799778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/90800054", "body": "Since the hack is only one line and makes it much simpler to type", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/90800054/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/91639361", "body": "echo Dumpling not found, installing...", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/91639361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/91789608", "body": "as general good practice Execute() on all MSBuild tasks should return thus\r\n`return !Log.HasLoggedErrors;`\r\n\r\nIn this case it will be true anyway -- but are there any exceptions/error cases to handle and log here?", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/91789608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/91789713", "body": "line spacing ", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/91789713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/91790095", "body": "Isn't this \r\n```\r\n+        <_FileNamesInTestCopyLocalByFileNameWithoutDuplicates Include=\"@(_TestCopyLocalByFileNameWithoutDuplicates->'%(Filename)%(Extension)')\">\r\n +          <SourcePath>%(_TestCopyLocalByFileNameWithoutDuplicates.SourcePath)</SourcePath>\r\n +        </_FileNamesInTestCopyLocalByFileNameWithoutDuplicates>\r\n```\r\n\r\nthe same as \r\n```\r\n<_FileNamesInTestCopyLocalByFileNameWithoutDuplicates  Include=\"@(_TestCopyLocalByFileNameWithoutDuplicates)\"/>\r\n```\r\n\r\nie., metadata like `SourcePath` should be copied automatically when you populate one list from anotehr using an item transform (an @ expression)", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/91790095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/91790226", "body": "I'm not sure what this accomplishes\r\n```\r\n+        <_FilteredListForBindingRedirect Include=\"@(_FileNamesInReferenceCopyLocalPaths)\" Exclude=\"@(_FileNamesInTestCopyLocalByFileNameWithoutDuplicates)\" />\r\n +        <_FilteredListForBindingRedirect Include=\"@(_FileNamesInReferenceCopyLocalPaths)\" />\r\n```\r\n\r\nIt includes one list excepting some things, then includes it again entirely.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/91790226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/91790705", "body": "It's a lookup in a small dictionary so no need. Some built-in metadata like %(FullPath) is expensive, but it's cached by MSBuild in that dictionary.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/91790705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/91792315", "body": "This String.Copy trick is so horrible I opened a suggestion https://github.com/Microsoft/msbuild/issues/1465", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/91792315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/91792725", "body": "Suggestion, instead of all these item manipulation expressions, is it possible to just give @(ReferenceCopyLocalPaths) to the task ? It can filter out all but exe and dll, and can consult %(SourcePath) if needed.\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/91792725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/112784066", "body": "Oh that's a really good idea! Force everyone to add one.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/112784066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/113030812", "body": "We won't localize for 2.0 and we are already going to ship with 5% of our exceptoin strings not being in resources. I'm fine with these not being localized and we can have an issue to implement that after we ship.  This is OK for now.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/113030812/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/113036397", "body": "You're right OK sounds good", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/113036397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/113591264", "body": "typo, PropertySeparator", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/113591264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/113828438", "body": "Another option is to always write it without quotes. I always have to use SR. And why not? ", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/113828438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/113828562", "body": "I think at this point GeneratePlatformNotSupportedAssemblyMessage is definitely not empty, don't need the condition here, right? It didn't preivously have a condition.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/113828562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/119236656", "body": "exc.ToSTring() maybe?", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/119236656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/121242065", "body": "What I learned after Exec, ToolTask, Task, etc is that composition is often easier to rationalize about and maintain than implementation inheritance.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/121242065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/122751794", "body": "Good point..", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/122751794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/122856176", "body": "? dummy compiler has to run I guess", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/122856176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/128872837", "body": "I checked on SHGetKnownFolderPath. They are not adding it to WACK. We will have a new API. So please leave this out of this file, and keep the baseline file in CoreFX until we stop calling it.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/128872837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/132327859", "body": "if symbols.Length != 2 then throw?", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/132327859/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/132329545", "body": "Eh, probably the LookupConditionalMethod would then fail anyway (can't find the type with an ! in the member name) so you get your failure.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/132329545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/132329829", "body": "I agree `AssemblyName!ClassName.PropertyName` is much clearer and more standard. I jsut realized that's what I assumed it was and misunderstood.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/132329829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/132579331", "body": "you don't need the directory.exists check. it will just do nothing if it already exists", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/132579331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/138203412", "body": "isn't it `e.ExceptionObject`", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/138203412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/139587392", "body": "nit: `string issue`", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/139587392/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/141447149", "body": "If I have to specify both anyway, why not just have Destination that takes a path? Taht way if I have a path, I don't have to split it to pass it in.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/141447149/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/141447975", "body": "maybe TreatErrorsAsWarnings, it is used elsewhere", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/141447975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/141448722", "body": "nit.. line", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/141448722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/141450487", "body": "Can you rewrite this to write to the file async? And avoid the intermediate byte array with ReadAsStreamAsync.\r\n\r\nI realize that perf may not be critical but it's nice to do it the \"right\" way as it's no more lines.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/141450487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/143393895", "body": "@safern I'm not sure what this file does: is it superseded by xunit.runtime.depproj in corefx? Nevertheless, changing it here also.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/143393895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/145539789", "body": "I wonder what the Unix equivalent is", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/145539789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "johnbeisner": {"issues": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/1675", "title": "The 'dotnet/buildtools' repo does not build on Debian 9 Stretch", "body": "_From @bazzilic on September 9, 2017 9:19_\n\nOn Debian 9 (Stretch), do\r\n\r\n```\r\ngit clone https://github.com/dotnet/buildtools.git\r\ncd buildtools\r\n./build.sh\r\n```\r\n\r\nIt will fail due to inability to detect an OS while executing a script from this repository located at `scripts/obtain/dotnet-install.sh`.\r\n\r\nAfter taking a closer look at the script, it is clear that this function does not detect Debian 9: https://github.com/dotnet/cli/blob/8e756edce1573c30c0c5a0708ff323dda0f673fc/scripts/obtain/dotnet-install.sh#L58-L109\n\n_Copied from original issue: dotnet/cli#7622_", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wfurt": {"issues": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/1662", "title": "default RUNTIME_PATH for RunTests.sh", "body": "I was trying to run \r\n/Users/furt/github/corefx/bin/Unix.AnyCPU.Debug/System.IO.Pipes.Tests/netstandard/RunTests.sh\r\nerror: RUNTIME_PATH is not defined. Usage: /Users/furt/github/corefx/bin/Unix.AnyCPU.Debug/System.IO.Pipes.Tests/netstandard/RunTests.sh RUNTIME_PATH\r\n\r\nThis is something I talk about with @weshaggard : It would be nice if the script is runable directly and defaults RUNTIME_PATH to something reasonable.\r\n\r\nRUNTIME_PATH=/XXXX\r\nif [ \"$1\" != '' ]; then\r\n  RUNTIME_PATH=\"$1\"\r\nfi\r\nexport RUNTIME_PATH=$RUNTIME_PATH\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1662/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ericstj": {"issues": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/1655", "title": "Microsoft.xunit.netcore.extensions references a bunch of non-existent nuget package versions", "body": "These versions never shipped. https://github.com/dotnet/buildtools/blob/16ea4a8909bfb0761d5af85da44553fca92f7aef/src/nuget/Microsoft.xunit.netcore.extensions.nuspec#L34-L35\r\n\r\nThe versions shipped in 1.0 for both of these were 4.1.0.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1564", "title": "Limit filename / path length in packages", "body": "We should add a warning or error to package build so that we don't create packages that can't be installed in typical projects on platforms where MAX_PATH may be an issue.\r\n\r\nConsider the path\r\nc:\\users\\username\\documents\\visual studio 2017\\projects\\solutionName\\packages\\packageId.version\\packageSubPath\\fileName.\r\n\r\nWe should come up with some reasonable upper-limits for the things out of our control (user name, solution name: path to solution folder).  Then we should look at the length of paths that we're producing as a combination of packageId, version, and package path and ensure that it doesn't exceed MAX_PATH.\r\n\r\nThis is roughly ~58 characters of boilerplate path information.  Lets give 20 for user name, and 40 for solution name.  That leaves **118** for package Id, version, subpath and file name.\r\n\r\nWe should also consider that NuGet will place the package and a SHA file in the extracted dir that repeats the package ID and version, so we should also calculate that.  A good method for doing this would be to calculate the extracted path for all files in the nupkg, including thsoe that NuGet will write, and make sure that they are under the limit.\r\n\r\nThis isn't meant to be exact other than to just set an upper limit that will keep us reasonably safe.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1519", "title": "Eliminate PackagePlatform from buildtools", "body": "See https://github.com/dotnet/buildtools/blob/3309085641d2fe6a6193915dd89ffbb159dad9fb/src/Microsoft.DotNet.Build.Tasks.Packaging/src/PackageFiles/Packaging.targets#L90-L104\r\n\r\nThis is a remnant of the old way we filtered project builds prior to the configuration system and prior to even the builds files.\r\n\r\nNo-one should be relying on this anymore, but its presence causes pain for folks in CoreFx and CoreCLR.\r\n\r\nWe need to completely deprecate it and remove it from packaging.\r\n\r\n/cc @chcosta @karajas ", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1466", "title": "Package validation doesn't catch building on netstandard, running on concrete framework", "body": "Previously I validated this the other way around:\r\nFor any concrete framework we'd derive the version of the API that *must* be supported by the netstandard version it supported.  This was because in v1 we had a goal to always ensure we exposed *all* API to netstandard to support the greatest portability.\r\n\r\nThat desire changed in v2 so I removed the check: https://github.com/dotnet/buildtools/commit/973289565299399a356455150e6f3c65ccec5e82\r\n\r\nI should add a new check which is for any framework, compare its supported netstandard compile asset with the runtime asset to ensure runtime >= compile.  This will validate that we have no ref-def mismatches on core where we auto unify up but not down and that on desktop bindingRedirects can redirect to the higher version (never lower).\r\n\r\n/cc @weshaggard ", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1465", "title": "BuildTools needs to identify some stable contract for project targeting", "body": "Consider that old CSProj has a contract of TargetFrameworkIdentifier/TargetFrameworkVersion and the targets you import.\r\n\r\nNew SDK projects have the contract of TargetFramework or TargetFrameworks and the rest is handled by the SDK targets.\r\n\r\nAfter either of these are set there are a set of properties that you can depend on being set by the common targets, like TargetFramework(Identifier,Version,Profile), NuGetTargetMoniker, potentially others.\r\n\r\nIn buildtools we've been sloppy about this sort of thing.  Its changed over time and right now there is no garuntee in what we'd expect the repo to set vs what BuildTools will then derive from what the repo sets.\r\n\r\nI reccomend that in order to converge on a common contract we have the repo set TargetFramework (deriving it from TargetGroup or however the repo deems fit) then BuildTools is reponsible for everything else.\r\n\r\n/cc @weshaggard ", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1465/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1432", "title": "ApplyBaseline doesn't handle nuget versions", "body": "It was written to process assembly versions, however now with more cross-repo references going on we need to declare package version dependencies.\r\n\r\nIt should split up the NuGetVersion and only baseline it if the version portion is lower than the baseline version.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1420", "title": "Add AsmDiff.exe to buildtools", "body": "This is a commandline version of ApiReviewer and helpful for generating assembly metadata diffs.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1339", "title": "ApiCompat is not catching mismatched ref return values", "body": "@mellinoe and I noticed this when creating a reference assembly for Unsafe.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1334", "title": "Create a better minimal MSBuild logger", "body": "When running the build in jenkins and on the commandline we only get -v:minimal spew from the console logger.  This is often not enough info to understand the cause of the failure.  In the local build case we can crack open the log, but this is often not convenient or even available for official builds.  Even when we do have the log we need to dig through interleaved messages, and even then we might be missing context (eg: property values) since the log file is rightfully not a diag log.\r\n\r\nWe should consider adding our own logger that has the same message spew as -v:minimal but includes more detail in Error messages.\r\n\r\nSome suggestions:\r\n1. Preceding message spew (Normal and up) from the same node/project.\r\n2. Some properties from the failing project, eg: Configuration.\r\n3. Project stack for the failing project.\r\n\r\nAll of these should be relatively easy to get, I keep track of some similar things in the binclash logger.\r\n\r\n/cc @danmosemsft @stephentoub @mellinoe @alexperovich ", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1299", "title": "Building an individual project doesn't validate tools/cli version", "body": "When tools or CLI are updated build.cmd/init-tools will catch this and redo the install, but if you aren't building those you will never know.  I think it should be straight forward to do a similar check during the Build target and give an error that init-tools should be run.\r\n\r\n/cc @weshaggard @danmosemsft ", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1273", "title": "Packaging doesn't gracefully handle TargetingPack/Framework-packages", "body": "I ran into the following issues when building the combined packages for NETCoreApp.\r\n\r\n1. To calculate the identity of the package we were trying to resolve all files.  \r\n - When we're building an identity package, we don't want to try to resolve the platform specific files for other platforms.\r\n - This was done to attempt to list the lowest NETStandard version supported by those files but we don't care about this for these TargetingPack/Framework packages.\r\n\r\n2. In DetermineRuntimeDependencies we depend on AssignPkgProjPackageDependenciesTargetFramework which depends on GetFiles.  Causing the same problem as issue 1 above.\r\n- This was done to \r\n\r\n3. We call DetermineRuntimeDependencies on all references in the lineup package but should only call it on pkgproj references.\r\n\r\n\r\nThe solution for 1 & 2 is to refactor these to depend on harvesting, which is disabled for these projects.  The solution for 3 is straightforward: just use the pkgproj references already split.\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1093", "title": "Index packages with only runtime-specific impls", "body": "https://github.com/dotnet/buildtools/commit/e6f32a54deeaee94063eb6d4164221ad1d66e363 fixed indexing so that it could handle packages without refs, but I missed the case where a package only had runtime-specific Impls.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1086", "title": "Remove use of AllowFallbackOnTargetSelection", "body": "This is causing mismatched NuGetTargetMoniker and project.json to result in a warning, which folks never pay attention to, until they pile up.  EG: https://github.com/dotnet/corefx/issues/12233\n\nWhen this change is made we'll need to make sure corefx is in good shape and we weren't relying on the fallback behavior anywhere.\n\n/cc @alexperovich \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1086/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1017", "title": "Make support harvesting explicit", "body": "Harvesting of assets is intentionally an opt-in automatic behavior.\n\nThe problem with this is that there is no safegaurd in place if harvesting doesn't happen, and there is also no trace in the PKGProj that harvesting is required.  As such it appears as \"magic\" in the pkgproj.\n\nTo address this, we'll create a property called \"HarvestSupportedFramework\" which says that the package expects to support a set of frameworks and those frameworks are expected to come from harvesting.\n\nOptionally, we can strictly enforce that this property is set, so that if a framework is supported through harvesting only the pkgproj must contain a HarvestSupportedFramework property to declare that.\n\n/cc @weshaggard \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1017/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/917", "title": "Remove fork of ResolveNuGetPackageAssets ", "body": "Once we have a way to consume ResolveNuGetPackageAssets x-plat we should remove our fork of it.  This should be coming with the dotnet-CLI-msbuild work.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/877", "title": "Update Xamarin Assembly lists", "body": "Here are the latest file lists.  We should translate these to xml and update our validation lists.\n\n[monotouch_watch.txt](https://github.com/dotnet/buildtools/files/364538/monotouch_watch.txt)\n[xammac_net_4_x.txt](https://github.com/dotnet/buildtools/files/364540/xammac_net_4_x.txt)\n[monodroid.txt](https://github.com/dotnet/buildtools/files/364542/monodroid.txt)\n[monotouch.txt](https://github.com/dotnet/buildtools/files/364539/monotouch.txt)\n[monotouch_tv.txt](https://github.com/dotnet/buildtools/files/364541/monotouch_tv.txt)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/846", "title": "Incremental build drops source files", "body": "See comment: https://github.com/dotnet/buildtools/commit/65080e8a3bd132cfe51ebe73009f75cef02c9b1d#commitcomment-18068059\n\nI noticed this when building packages because our symbol packages include all source files and on an incremental build were dropping _AssemblyInfo.cs and SR.cs\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/831", "title": "Update lineup/platforms references in buildtools", "body": "Need to bump version to 1.0.2 in https://github.com/dotnet/buildtools/blob/3c700d1ecc358c6c1b3ffbaaeb49e7864a8e9ba7/src/Microsoft.DotNet.Build.Tasks.Packaging/src/PackageFiles/Packaging.targets#L86\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/810", "title": "Improve package build number validation", "body": "Currently we do not validate the following:\n1. With split packages that all packages in a set use consistent version.\n2. If the package version is explicitly set and lower than the calculated package version (its ok if it is higher).\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/788", "title": "PInvoke checker data files are too sparse", "body": "The logic for applying the pinvoke checker data files is really flaky.  We should look at all the targetgroups we have holistically and map the right data file to all of them.  We should also provide a way for TargetGroup='' to say what it actually represents.\n\nOne thought here is a layer of indirection where we map the project settings to some named API grouping (eg: OneCore, UWP, Win8, ClassicDesktop, etc) and then use that to find the data file.  If the API grouping is already set directly in the project, don't try to calculate it.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/788/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/780", "title": "Disable live packaging task dll after updating buildtools version in buildtools", "body": "I had to run against the live task to get a NuGet fix.  Disable this once we've updated the buildtools package version used by buildtools repo to one that has the fix.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/709", "title": "Allow for unknown SupportedFramework entries for validation", "body": "Let folks use unknown SupportedFrameworks and treat those as frameworks that should restore without RID.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/639", "title": "Remove baseline targets from BuildTools.", "body": "See discussion https://github.com/dotnet/buildtools/pull/638\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/639/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/617", "title": "Don't strip System.Private references from dependencies if package exists", "body": "We strip out all System.Private references from dependencies: https://github.com/dotnet/buildtools/blob/master/src/Microsoft.DotNet.Build.Tasks.Packaging/src/PackageFiles/Packaging.targets#L478\n\nThis causes folks who build against a System.Private package to manually sepecify the reference: https://github.com/dotnet/wcf/blob/6b79b1193b5f213cee8f93fb5fe98982c311ab1b/src/System.ServiceModel.Duplex/pkg/System.ServiceModel.Duplex.pkgproj#L14\n\nWhich ineveitably gets out of sync with the project's PackageTargetFramework.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/dotnet/buildtools/commits/4e1c39824d4f9ad8419849d0ab38cb97ff61fc9a", "message": "Make VerifyClosure handle an assembly referencing itself (#1713)\n\nDon't crash on an assembly with a reference to itself, instead\r\ntreat it like any other cycle."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/938037b167acbfae5a11ec6c79598f377bbf0da3", "message": "Merge pull request #1703 from ericstj/generateRIDGraph\n\nMake GenerateRuntimeGraph diff files by default"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/3db0ff2fc89630443d6830df948db8f77d4b19af", "message": "Make GenerateRuntimeGraph diff files by default\n\nThis makes the task do a diff with existing files by default and only updates the files\nwhen UpdateRuntimeFiles is set to true.\n\nWhen updating the files we'll clear the readonly bit to handle the case where someone\nhas made the files readonly (since they are explicitly setting UpdateRuntimeFiles)."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/5746a3ec1d3abbf8a99444504719a3132edfcc39", "message": "Merge pull request #1692 from ericstj/generateRIDGraph\n\nAdd some options to GenerateRuntimeGraph for testing"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/fd6ceec3bac5ae751f8e2e8bed780a5a6fc811e8", "message": "Add some comments and format GenerateRuntimeGraph"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/804602e37c3d886660ae93b4de8fde4ab4926bb8", "message": "Make qualifier expansion explicit and eliminate qualifier policies\n\nPreviously we had applied Qualifiers to a RID by copying that RID's imports,\napplying the Qualifier to all, then importing the previous RID.  This created very\nunusual compatibility precedence.\n\nFor example, consider `win8-x86: [ win8, win7-x86 ]`\n\nWhen applying `aot` we'd get `win8-x86-aot : [ win8-aot, win7-x86-aot, win8-x86 ]`\n\nThis can cause a `win7-x86-aot` asset to be preferred over `win8-x86` asset, however a\n`win-x86-aot` asset would not be preferred over a `win8` asset.\n\nWhat was lacking from this is a clear precedence relation of the components.\nEG: First prefer something that's an exact match, then prefer matching\nversion and qualifier, then prefer matching version and architecture, then just version,\nthen previous version (with others matching).\n\nI first tried to solve this with VersionPrecedence QualifierPolicy but that was a poor model,\nbecause I was operating on strings where I had lost the context of component parts.\n\nInstead I've switched to a fully expressed set of precedences.  This isn't the most general\nbut I think it provides the best clarity.  For now this represents a single precedence:\nVersion, qualifier, architecture\n\nIf in the future we need more precedences we'll have to refactor this, one thing to watch\nout for in particular is that if version doesn't have the highest precedence we'll have to\nflatten the version list to imports for a single RID for compatible versioned groups.  That\nwill not scale well which is another reason I've avoided exposing such functionality.\n\nUsing the CompatibilityMap is particularly helpful for examining the final precedence\nand seeing if it agrees with a component precedence model."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/35b22d171307a7aefb56600e4c8bc25b0cc8a514", "message": "Add some options to GenerateRuntimeGraph for testing\n\nThis adds support for emitting a DGML and a compatibility mapping from a runtime graph.\n\nThe DGML is handy for visualizing the runtime graph and the compatibility mapping\nhelps identify what the effects of a RID graph change will be on package asset resolution."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/74d0e6e16a089951cf240ed64ecda459ea5e9504", "message": "Merge pull request #1689 from ericstj/generateRIDGraph\n\nAdd GenerateRuntimeGraph task"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/e974396ae819bea581165ede8a5a3094a347b4c1", "message": "Add GenerateRuntimeGraph task\n\nThis task can be used to generate the RID heirarchy of a runtime.json from a simpler set of inputs."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/fcddc57cac0738e4ad0de79a3b094664a56d39fc", "message": "Merge pull request #1671 from ericstj/fixDepsFile\n\nEnsure deps file contains correct extension"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/652cd6b1f2da5221cd73fbfafd6a9c43108779eb", "message": "Ensure deps file contains correct extension\n\nPreviously the GenerateDepsJson task was assuming all assemblies were\ndlls, however that is not the case; xunit.console.netcore.exe is an exe.\n\nThis didn't seem to cause an issue if the file existed in the\napplication folder.  If xunit.console.netcore.exe existed in the app folder, the host would\nignore the incorrect entry in the framework deps file.\n\nIf, however, the file was missing from the app folder and had incorrect\nextension, the host would fail at startup.\n\nThis change fixes the deps file to have the correct extension."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/14c896a2d32af48a562ad1c7dea9c3232b36a7f1", "message": "Merge pull request #1663 from ericstj/removeRefAssm\n\nRemove reference assembly attribute from partial ref facade when it is a full facade"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/1f3329cb4cf8b5932f7adad6854b83a7989444a2", "message": "Remove reference assembly attribute from partial ref facade when it is a full facade"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/7159e98e1b518f98b4607b9b4ea6b6a4f781ceda", "message": "Merge pull request #1657 from ericstj/treatAsOutOfBox\n\nAdd an override so that packages can treat frameworks as out of box."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/d1d6053e3ed4c5de8bbf8ce4c9f5cbadd7fcc9c4", "message": "Add an override so that packages can treat frameworks as out of box."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/9714ddaaef88b530a9054ca6f99687fc090fd057", "message": "Merge pull request #1654 from ericstj/buildTask\n\nMake all BuildTools tasks derive from BuildTask"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/f14ea1c750ae2f7198bbece4ef75af07c0060b80", "message": "Make all BuildTools tasks derive from BuildTask\n\nBuildTask provides our common desktop support in a base class by\nhooking AssemblyResolve and providing runtime unification for assemblies\nreferenced by the task."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/fe78c74748285023c47910a768177a7845755872", "message": "Merge pull request #1650 from ericstj/updateCompilers\n\nComplete roslyn update to 2.0.0-rc4"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/07fdbc41426b1684e3c2f8d95a12cdce0ba651bd", "message": "Complete roslyn update to 2.0.0-rc4\n\nPreviously f99e5ef88ac3e6b909676619a309147283f7c241 updated the roslyn package restored\nby the tool-runtime to 2.0.0-rc4 but missed updating these two other places.\n\nThe result was that the new compiler was used on core but not desktop-MSBuild.\n\nThis change completes the update."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/cf0bce0297ee5ee75d05e2c0fdd516d5e6586b1b", "message": "Merge pull request #1649 from ericstj/buildTaskBase\n\nMake ExtractResWResourcesFromAssemblies derive from BuildTask"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/56cd202cf1dd9b885489593905fdf34396c476b7", "message": "Make ExtractResWResourcesFromAssemblies derive from BuildTask\n\nThis is necessary so that the AssemblyResolver unifies dependencies."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/387611cbd489b7275500eea70429734235bd4f50", "message": "Merge pull request #1647 from ericstj/removeRtFxVer\n\nTool-runtime should use MS.NETCore.App version built into CLI"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/6f6756472d36a1eac7b6a4768d45192da96c0e1f", "message": "Tool-runtime should use MS.NETCore.App version built into CLI"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/3df4ae209338fc74e29c2395d808a74b9612f0fd", "message": "Merge pull request #1645 from ericstj/harvestCopy\n\nAllow for files to be copied to a new path while harvesting"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/e8808f9fefcdcba730a8a0d83d5a33104c6d8569", "message": "Allow for files to be copied to a new path while harvesting"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/0d5177dfbcef15a7d20aaf759e84c421df7216fd", "message": "Merge pull request #1637 from ericstj/validateNCA21\n\nAdd netcoreapp2.1 as a valid option for SupportedFrameworks"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/719451e81eacc7f19008de529805d7a527f9b03c", "message": "Add netcoreapp2.1 as a valid option for SupportedFrameworks"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/72056931", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/72056931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/comments/14723970", "body": "Any reason why you removed this?  I'm adding it back.  It's helpful when editing the targets from Visual Studio.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/14723970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/14724048", "body": "No worries.  Could have been that VS made it for you.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/14724048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/14773765", "body": "It looks like you are missing GenerateAssemblyList.cs.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/14773765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/14794447", "body": "Bug here, this just checks if there are any elements.  You need to see if any elements are true.  This is causing build failures since you are always round-tripping the project.json.  When two configurations build the same project at once you get a sharing issue.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/14794447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/18068059", "body": "I noticed that on an incremental build of a project the AssemblyInfoFile isn't added to the compile item.  Seems like we should always add it to the item if `Condition=\"'$(GenerateAssemblyInfo)'=='true'\"` but only regenerate it based on these inputs/outputs.  I noticed the same problem for SR.cs.  /cc @weshaggard @tarekgh \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/18068059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/18933001", "body": "This change introduced dependency conflicts.  NETStandard.library includes the latest System.Net.Http, but this project explicitly references the stable one: 4.1.0 at line 19.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/18933001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/19154388", "body": "This should have been an  '$(DesignTimeBuild)' != 'true'\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/19154388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/19179473", "body": "It looks like this change broke the test build of https://github.com/dotnet/corefx/blob/master/src/System.ServiceProcess.ServiceController/tests/System.ServiceProcess.ServiceController.Tests/System.ServiceProcess.ServiceController.Tests.csproj.  Likely due to its use of \"SetConfiguration\" metadata.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/19179473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/19179591", "body": "I found a way to workaround this, but we should probably fix this.  I think conditioning this fix on SetConfiguration metadata not being set might be the right thing to do.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/19179591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/19639057", "body": "I wonder if this should also be conditioned on '$(PackageInstallPath)' != ''.  Right now I'm blocked on picking up buildtools because CoreFx hasn't set this yet.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/19639057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/19649372", "body": "This change is breaking consumption of buildtools.  Did you intend to make _BuildAgainstPackages always true rather than have it derive from BuildTestsAgainstPackages?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/19649372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/19651092", "body": "This error is firing when we skip package build due to _SkipCreatePackage.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/19651092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/23791008", "body": "Was going to say the same, but PS isn't friendly to our x-plat devs.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/23791008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "omajid": {"issues": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/1641", "title": "Missing license headers in some python files", "body": "Most of the files under https://github.com/dotnet/buildtools/tree/master/src/Microsoft.DotNet.Build.CloudTestTasks/RunnerScripts/xunitrunner-perf are missing a license header. Is it safe to assume that they are under MIT?\r\n\r\ncc @leecow ", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AndyGerlicher": {"issues": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/1631", "title": "GenAPI: DLLs in package not signed.", "body": "```PowerShell\r\nPS C:\\Users\\angerlic\\Desktop\\Microsoft.DotNet.BuildTools.GenAPI.1.0.0-beta3-01909-01> Get-ChildItem -recurse *.dll | foreach { sn -vf $_.fullname} | Select-String delay\r\n\r\nC:\\Users\\angerlic\\Desktop\\Microsoft.DotNet.BuildTools.GenAPI.1.0.0-beta3-01909-01\\tools\\System.Collections.NonGeneric.dll is a delay-signed or test-signed assembly\r\nC:\\Users\\angerlic\\Desktop\\Microsoft.DotNet.BuildTools.GenAPI.1.0.0-beta3-01909-01\\tools\\System.IO.FileSystem.dll is a delay-signed or test-signed assembly\r\nC:\\Users\\angerlic\\Desktop\\Microsoft.DotNet.BuildTools.GenAPI.1.0.0-beta3-01909-01\\tools\\System.IO.FileSystem.Primitives.dll is a delay-signed or test-signed assembly\r\n```\r\n\r\nThis was causing issues for us, I had to revert back to an old version.\r\nhttps://github.com/Microsoft/msbuild/pull/2413", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "safern": {"issues": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/1600", "title": "Move MakePri.exe to nuget package", "body": "Move MakePri.exe to nuget package. This was added into buildtools on: https://github.com/dotnet/buildtools/pull/1599\r\n\r\ncc: @tarekgh @weshaggard ", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/dotnet/buildtools/commits/2160838afe6f31a582d975692c2aca7792a3b971", "message": "When creating the supportedProjectConfigurations dictionary we need to make sure they are distinc elements (#1845)\n\n* When creating the supportedProjectConfigurations dictionary we need to make sure they are distinc elements, if not we would fail with an ArgumentException that the key is already present if a project duplicates a build configuration for some reason.\r\n\r\n* Remove not neccessary Dictionary's constructor call since .ToDictionary already returns one"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/f3e5b5e7e8c65a09c4068dbd1d7e181e4224c883", "message": "Add osGroup scenario to placeholder build configurations to FindBestConfiguration task (#1842)\n\n* Add osGroup scenario to placeholder build configurations to FindBestConfiguration task\r\n\r\n* Cleanup to use IsPlaceHolderConfiguration flag when choosing bestConfiguration\r\n\r\n* Change to use Dictionary instead of HashSet to avoid linear searchs"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/d39757c8face16455d99a51a2ac0875147d474d2", "message": "Ignore placeholder configurations in UpdateVSConfigurations task (#1841)"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/44dbde73e56847e4be028f8cffe37837468ab310", "message": "Provide a way to ignore BuildConfigurations through _ prefix in the build configuration (#1828)"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/e639cfa061b4f490f60baabc499123eb826055b6", "message": "Fix GenApi so that when creating a PNSE Assembly Deconstructors throw as well (#1746)"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/583046217f68333c04521e119e9cf97eca6f2494", "message": "Add conditions for DownloadFilesTask and DownloadSymbolPackages to do nothing when SymbolPackagesToDownload is empty (#1732)"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/4e493515f1ce0369d852ec8830e7b41787d6a982", "message": "Fix disposed exception when downloading a file and calling the task multiple times on the same msbuild process (#1725)\n\n* Fix disposed exception when downloading a file and calling the task multiple times on the same msbuild process\r\n\r\n* Change to using statement and cleanup"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/0eb0784a856382d75994e73db2dcc14c1335f276", "message": "Add task to download files from url (#1700)\n\n* Add task to download file from url\r\n\r\n* PR Feedback and handle proxy issue\r\n\r\n* Add cleanup in finally to avoid locks in the file\r\n\r\n* PR Feedback and improve task to be able to download multiple items\r\n\r\n* Rename to File(s)\r\n\r\n* Calculate default file name based on the Url and move targets to Symbols.targets\r\n\r\n* If url ends with / or multiple /// remove them to get the file name from there\r\n\r\n* Use Path.GetFileName to get the filename from the Url if metadata filename is empty\r\n\r\n* Fix comment and remove warning"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/f63f0db49454c9d29718d9551d6a2c81ffd8cb03", "message": "Improve UAP Runner logging and enable showprogress flag (#1685)\n\n* Improve UAP Runner logging and enable showprogress flag\r\n\r\n* PR Feedback and update stdout file location\r\n\r\n* Fix typo and add new line in output\r\n\r\n* Fix deadlock caused in ui thread"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/13b233144c8def46d1f92d845b6eef4d4f1a312b", "message": "Revert \"Improve UAP Runner logging and enable showprogress flag (#1667)\" (#1683)\n\nThis reverts commit 5b80a247972c700bef73d60139199df81dff6a38."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/5b80a247972c700bef73d60139199df81dff6a38", "message": "Improve UAP Runner logging and enable showprogress flag (#1667)\n\n* Improve UAP Runner logging and enable showprogress flag\r\n\r\n* PR Feedback and update stdout file location\r\n\r\n* Fix typo and add new line in output"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/6a8a2bc7a1be14b019fdbd96d6ce5e6a06d3867d", "message": "Add necessary configurations in order to binplace the tests per buildconfiguration (#1652)\n\n* Add necessary configurations in order to binplace the tests per buildconfiguration\r\n\r\n- Why is this necessary? \r\n\r\nThis is necessary in order to be able to have a test working directory different than the output directory. The output directory is shared across target groups if the test assemblies target netstandard or uap, but when running in different runtimes (uap, netcoreapp, etc.) dependencies in order to be able to run the tests change and we fill the directory with a bunch of items that are specific to that target framework. This causes to have some clashes in the bin when trying to run the same test assembly against different target frameworks without having a clean repo/output test directory. (i.e without this changes if I want to run a test project against both uap and uapaot, assuming I already built vertical for both, I would have to run tests against one TFM and then delete the test's output directory and rerun them against the other one).\r\n\r\nThis change will avoid that, and will allow to have a specific test working directory different than the output directory. This can be per tfm, pero build configuration or however the consuming repo sets this up.\r\n\r\n- New Behavior\r\nWith this change we will have the next behavior when building/running tests:\r\n\r\n- When building the tests we will still bin place the test assets to the `OutputDirectory` (`corefx\\bin\\OSGroup.Configuration\\TestProject\\TargetGroup/`)\r\n- When running the tests we will bin place the tests assets to this new [`TestPath`](https://github.com/dotnet/corefx/pull/23633/files#diff-4de71e7a0fd952be821f8af2768281dcR34) which will be the `TestPath`. This new path will be the test's working directory where we will bin place the RunTests.cmd and necessary dependencies in tests.targets. Also the `testResults.xml` will be found here after the test execution.\r\n- `TestPath` is set to be `bin/tests/<TestProject>/<BuildConfiguration>/` (i.e `corefx\\bin\\tests\\System.Collections.Immutable.Tests`) in `dir.props`\r\n- This `TestPath` will be added to the `BinPlaceDir` in `FrameworkTargeting.targets` when `BinPlaceTest` is set to true. \r\n- Then in the [`BinPlaceFiles`](https://github.com/safern/buildtools/blob/4d39247ff2c152ac50ade6128a44afc6f9993ca2/src/Microsoft.DotNet.Build.Tasks/PackageFiles/FrameworkTargeting.targets#L243) target the test assets will be hardlinked to the `TestPath`.\r\n\r\nThis will isolate every test execution per build configuration and will allow people to run the same test project for all of the supported configurations on the same repo without having to clean the repo."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/34df12c76df040faa512dd8cc47bd996ad246454", "message": "Add task to get the resources and merge them into the common pri for external dependencies (#1630)\n\n* Add task to get the resources and merge them into the common pri for external dependencies\r\n\r\n* PR Feedback\r\n\r\n* PR Feedback, remove System.Windows.Forms dependency, and change target Outputs\r\n\r\n* Make RewResourceWriter IDisposable\r\n\r\n* Fix assembly filtering when it doesn't need resources to be extracted\r\n\r\n* Change to NS implementation using MetadataReader instead of Assembly.LoadFrom\r\n\r\n* Add option to disable external resources extraction and use runner's default pri file if common pri doesn't exist"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "crummel": {"issues": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/1598", "title": "Symbol signing should be refactored", "body": "Symbol signing depends on some scripts from PipeBuild right now, so if you want to add symbol signing to a build you need to clone the PipeBuild repo as well.  Ideally symbol signing could be one all-inclusive package with just what you need and nothing extra.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1598/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1207", "title": "Not having PDBs should be a hard/loud error on coverage builds", "body": "See https://github.com/dotnet/buildtools/issues/1144 and https://github.com/dotnet/corefx/issues/12927, which were eventually resolved by https://github.com/dotnet/buildtools/issues/1205.  This might have been easier to track down if we fail on not having PDBs instead of just getting reduced coverage, which might not be as obvious.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1192", "title": "Changing .cliversion in consuming repo does not cause bootstrapper to re-run", "body": "Updating .cliversion in a consuming repo using bootstrapper should re-run bootstrapper, download the new CLI, and re-symlink the current CLI version.  Currently this does not happen because the bootstrap.complete file still exists and CLI is not one of the checked version numbers.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Chrisboh": {"issues": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/1597", "title": "As a dev, restoring packages always uses NuGet.Config, not \"--source\" parameters in command line builds", "body": "@dagood commented on [Wed Nov 09 2016](https://github.com/dotnet/core-eng/issues/109)\n\nRight now there is duplication: VS requires a NuGet.Config, but in command-line builds we use `--source ...` parameters for `dotnet restore`. Unless there's been a regression, we should be able to use `--configfile` to use the same NuGet.Config in both scenarios.\r\n\r\nThis also opens the door to restore packages from VSTS feeds, because NuGet.Config is compatible with authenticated sources. (`--source ...` doesn't work with auth, and NuGet doesn't want to fix this.)\n\n---\n\n@Chrisboh commented on [Fri Jan 06 2017](https://github.com/dotnet/core-eng/issues/109#issuecomment-270974602)\n\ncoordinate with the work @ellismg is doing for build from source.\n\n---\n\n@ellismg commented on [Fri Jan 06 2017](https://github.com/dotnet/core-eng/issues/109#issuecomment-270980819)\n\nThis is a nice to have for the build from source work.  It makes changing the sources when building CoreFX (e.g. to augment the package source list to include a private on disk source that contains a freshly built CoreCLR) easier.  We can always work around it by having a custom task that just edit's the .props file where stuff is defined, so it's not blocking any progress.\n\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1597/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1581", "title": "As a repo owner, I can configure per branch whether dotnet/versions Latest_Packages.txt is merged or overwritten", "body": "@dagood commented on [Tue Mar 07 2017](https://github.com/dotnet/core-eng/issues/560)\n\nFor servicing, a \"merge\" strategy is used when updating Latest_Packages.txt so that it contains all latest packages available, even for previous servicing releases.\r\n\r\nAs of writing, this is the mode non-servicing branches use, too (e.g. corefx/master). It doesn't make sense to keep \"old\" packages around in this case, because they are no longer considered part of the product. We should allow this behavior to be configured per branch.\r\n\r\nBrought up in https://github.com/dotnet/versions/pull/136, /cc @weshaggard \n\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jkotas": {"issues": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/1586", "title": "init-tools requires 4.5GB of disk space", "body": "The total size of `tools\\*` and `packages\\*` after running `init-tools.cmd` on Windows is 4.5GB. Can we trim this down?\r\n\r\nThere are many Unix packages under packages. They should not be needed on Windows.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1586/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77262408", "body": "@FiveTimesTheFun @stephentoub  Could you please take a look?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77262408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "ravimeda": {"issues": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/1565", "title": "Extract restored nupkg to a specified folder - a new build task request", "body": "NuGet packages are restored by running `sync` command. To access the assemblies in a package, the .nupkg has to be expanded manually or writing additional scripts. Consider providing a build task that can extract all the restored packages to a specified folder.\r\n\r\nA simple file extraction task is already available at (https://github.com/dotnet/buildtools/blob/master/src/Microsoft.DotNet.Build.Tasks/ZipFileExtractToDirectory.cs) Extend this to operate over multiple nupkgs.\r\n\r\nA usecase for this task is security build where restored packages are extracted so that security extensions can scan the assemblies. Currently, a PowerShell script is being used to extract packages. Using a PowerShell script for now suffices since security extensions are available only for Windows. If extensions become available for non-Windows, then a shell script to extract packages needs to be prepared. Having a build task that can be used cross-plat will provide a consistent experience.\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "karajas": {"issues": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/1554", "title": "Simplify init-tools flow", "body": "Currently we have a process where each repo has an init-tools that calls into the buildtools init-tools.\r\nFor the Windows case this further calls into the init-tools.ps1 which has folder dependencies on the inner init-tools. \r\n\r\nIt would be nice to simplify this process to a single call.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/dotnet/buildtools/commits/8482216fd4a71c534b64f63cfee3edbe2f9ce92c", "message": "Merge pull request #1793 from karajas/downloadFlat\n\nEnable download flat files and download in parallel"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/cea33bfc33d71c3c5b7ffff6044aee73f886131e", "message": "Enable download flat files and download in parallel"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/868a2dd719771247293471b7dad0a911528e178d", "message": "Merge pull request #1772 from karajas/fixFeedErrors\n\nFix renew lease function and enable more logging"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/91da41aea09a7db4cac7ec78737a09b17e75a236", "message": "Fix renew lease function and enable more logging"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/8bc74f90524b14ea0feb178dd5d5352503168aeb", "message": "Merge pull request #1763 from karajas/addLogger\n\nAdd PackageRestoreLogger to log restore urls"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/98e4d4ebf8e6e6fa68389c71f529d29307372896", "message": "Add PackageRestoreLogger to log restore urls"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/8ed849bd4d8e0f3169f6633a8f94dad34a9d7351", "message": "Merge pull request #1750 from karajas/fixFeedNupec\n\nInclude props that imports custom feed task"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/9918b746214e74e16a37d3569c0d020037382cd6", "message": "Include props that imports custom feed task"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/44cf49867eb6f280a6454b3ff689a2e75751f454", "message": "Merge pull request #1733 from karajas/fixTiming\n\nMake nupkg lowercased"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/cae435b03c67b91fed6bbaaa6c46bc7d00a93580", "message": "Make nupkg lowercased"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/165724395ab21325b0b43fea67e9a01e81220201", "message": "Merge pull request #1722 from karajas/fixTiming\n\nUpdate timeout and delay time for lease during upload"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/81b67fb1a84f7900855d931fd0d34a65db77e596", "message": "fix casing"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/ef3f85cf8410676ca838c78ce83eabcb2df80b46", "message": "RelativePath should be lower case"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/b7de4075269ba9c9f976cbaf6a540066723095c5", "message": "Update timeout and delay time for lease during upload"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/7b03ed4942befc7d13eefac4992b75a9c946b93f", "message": "Merge pull request #1720 from karajas/fixFlatUpload\n\nFix Flat upload of assets"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/fd0c01f7234ee1b716dc25fc857b11fa04c9c1c4", "message": "Enable Flat upload of assets"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/4d7dfa7463e903f60596da181859d4f107c69258", "message": "Merge pull request #1717 from karajas/fixRelativePathParse\n\nPass relativePath instead of feedUrl in BlobFeed constructor"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/5cda2eff0e943909dcd235be772aaf8bd473cadf", "message": "Pass relativePath instead of feedUrl in BlobFeed constructor\n\nEnsure feedUrl is written into the index.json"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/55bf54c873b71c96458c72e4869c818744c54957", "message": "Merge pull request #1711 from karajas/secureFeed\n\nUpdate sample Publish.targets to match current parameters in Microsoft.DotNet.Build.Tasks.Feed"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/8b7ab06ccc1cf7a0740b1c7f6140788050a90479", "message": "Update sample Publish.targets to match current parameters"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/d907fde549472929ce8d87840ea95740afd91042", "message": "Merge pull request #1695 from karajas/secureFeed\n\nAdd ability to create secure feed"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/f853c9fe6518da4bb1671e9ff26976d81ff49d57", "message": "Add ability to create secure feed"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/57ac79a55928b9693ed3973ef068d75d490d4c5c", "message": "Clean up fixes (#1656)"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/fe5846026295b3dc265828e67b6ccf1c0d186f71", "message": "Add ability to create transport feeds (#1644)"}], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/1769", "title": "Revert \"Add PackageRestoreLogger to log restore urls\"", "body": "This reverts commit 98e4d4ebf8e6e6fa68389c71f529d29307372896.\r\n\r\nWill move the project into a separate tool.\r\n\r\n@chcosta @weshaggard ", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/comments/23950388", "body": "They should both be lower at this point.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/23950388/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/23950612", "body": "This is because when first creating packageIndexFiles we can't lease it", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/23950612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/23950616", "body": "Good point, will fix", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/23950616/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "mellinoe": {"issues": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/1552", "title": "RunnerTemplate.Unix complains when /cores is empty", "body": "OSX machines may not have any crash dumps under /cores/, or the folder may have not been created yet. RunnerTemplate.Unix still runs `ls -A /cores`, which will print out a message if the folder doesn't exist.\r\n\r\nhttps://github.com/dotnet/buildtools/blob/master/src/Microsoft.DotNet.Build.Tasks/PackageFiles/RunnerTemplate.Unix.txt#L55", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1360", "title": "[Dumpling] Traversal test builds should only run \"Dumpling install\" once", "body": "Right now, we are running the install script multiple times in our traversal builds. This adds a lot of unnecessary spew in the output logs, and just isn't necessary. We should be able to just run it one time before the test traversal, and we can continue to run it per-project if you are building individual projects.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1225", "title": "Bootstrap process downloads and executes scripts from GitHub", "body": "There's a few problems that I see here:\r\n\r\nhttps://github.com/dotnet/buildtools/blob/master/run.ps1#L14\r\nhttps://github.com/dotnet/buildtools/blob/master/bootstrap/bootstrap.ps1#L42\r\n\r\n1. We are not pinned to specific versions of these files. This means that breaking changes at any point in the future can cause breaks in our historic commits. Realistically this means that we can never safely change these scripts in the future without testing every single commit that uses them.\r\n2. We're implicitly trusting the contents of the files delivered by GitHub here. I think there are some security implications around downloading and executing raw scripts like this.\r\n3. (more subjective) We don't really need this dependency on GitHub here. It would be nice if the repo was still buildable without GitHub. I realize we have many other dependencies similar to this, but at least we have more control over others, or have alternatives when they go down.\r\n\r\nRight now, the master branch is not buildable because of this change in another repo: https://github.com/dotnet/cli/issues/4715", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1225/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1221", "title": "Remove OpenSourceSign from Microsoft.DotNet.Build.Tasks", "body": "Ported from https://github.com/dotnet/corefx/issues/6759 (cc @tmat)\r\n\r\n> Csc now supports OSS signing via /publicsign switch. The build task is not needed anymore and can be removed and CoreFX build simplified.\r\n\r\nhttps://github.com/dotnet/buildtools/blob/e7768f0b40786251c787daaac43533f06fee8b26/src/Microsoft.DotNet.Build.Tasks/PackageFiles/sign.targets#L9\r\n\r\nhttps://github.com/dotnet/buildtools/blob/78260239e4db68ad5c2df774a27d5f9a54fd92e5/src/Microsoft.DotNet.Build.Tasks/OpenSourceSign.cs", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1221/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/310", "title": "Use Console.WindowWidth/Height in the (.NET Core) CommandLine helper", "body": "Now that this is supported in the portable System.Console library: https://github.com/dotnet/corefx/issues/3558, we should be able to use it in the command line parsing helper. See:\nhttps://github.com/dotnet/buildtools/blob/master/src/common/CommandLine.cs#L1705\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/246", "title": "Test targets don't copy satellite resource assemblies", "body": "It seems like our current test targets (or perhaps resource targets) don't copy over satellite resource assemblies for other languages, if they exist. I could take a stab at this if someone pointed me to where the fix should be made. I mainly wanted this so I could add some tests to ResourceManager that tried grabbing strings from other languages than the default.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/200", "title": "Minimize the set of targets and properties needed to consume buildtools", "body": "Over time, we have increased the amount of settings and configuration needed to get a blank project building with the buildtools package. From the https://github.com/dotnet/corefx repo, the following msbuild files are all needed to build, or exist because of workarounds on various platforms, etc:\n- build.proj\n- dir.props\n- dir.targets\n- dir.traversal.targets\n- mono.targets\n- override.targets\n- roslyn.xplat.targets\n- src/BuildValues.props\n- src/dir.props\n- src/dir.targets\n- src/dirs.proj\n- src/.nuget/packages.Windows_NT.config\n- src/.nuget/packages.Unix.config\n\nNot all of the configuration above is strictly necessary for a blank build, but a lot of it is. There's also a very substantial amount of stuff in some of the files, like dir.props, dir.targets, and dir.traversal.targets.\n\nWe should try to consolidate some of the common properties into buildtools itself, and perhaps provide a sample template for minimal builds using buildtools.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [{"url": "https://api.github.com/repos/dotnet/buildtools/commits/89fc42990eb3c92af852a875cfcfc3025fd848b8", "message": "Merge pull request #1622 from mellinoe/no-alpine-validation\n\nRemove alpine from the list of validate RIDs for netcoreapp2.0."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/5d44d077f86aebe3983d446454b83783916d83c6", "message": "Remove alpine from the list of validate RIDs for netcoreapp2.0."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62666272", "body": "Looks good to me as well. :+1: \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62666272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67256148", "body": "Although this is probably an improvement over our current situation, we should come up with a more robust solution that doesn't depend on the assembly name, IMO. I'm fine with this for now, though.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67256148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69111274", "body": "> Could this be achieved by reusing the xunit traits infrastructure that @krwq plumbed through?\n\nYou could do something sort of similar, but you'd probably have to add a trait to all of the classes in the assembly that you want to test (like \"Category', \"RunThis\") and then include that on the command line. Would be kind of annoying to do that for all your test classes and then remember to delete it at the end. I think Wes's suggestion is best.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69111274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/comments/17112683", "body": "Condition is wrong\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/17112683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/17112689", "body": "I'd like \"TestHostDirectory\" better, to make it obvious it's a directory\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/17112689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/18933208", "body": "Yes, you're right. I can remove the explicit reference.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/18933208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22615612", "body": "I'm a little concerned that we are making too many assumptions about the names of assemblies (if we weren't already). We already assume a lot about what test assemblies are named (which isn't actually always true for some of our tests), and this here seems to add the assumption that test assembly names have the product assembly name somewhere in their path. In general I think this seems a bit too fragile. What do others think?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22615612/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "AtsushiKan": {"issues": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/1486", "title": "Generated PlatformNotSupported constructors may not throw PlatformNotSupported.", "body": "They'll first invoke the base constructor with default(this), default(that). The base constructor could be in another package that has an implementation.\r\n\r\nThe base constructor might respond to that with an ArgumentNullException or NullReferenceException and the caller will see that rather than the PNSE.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "WonyoungChoi": {"issues": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/1475", "title": "GenAPI generates incorrect code when using fixed buffer in a structure", "body": "When using fixed buffer in a strcture as follows:\r\n```\r\nusing System;\r\nusing System.Runtime.InteropServices;\r\n\r\nnamespace Test\r\n{\r\n    [StructLayout(LayoutKind.Explicit, Size = 12)]\r\n    public unsafe struct MyStruct {\r\n        [FieldOffset(0)]\r\n        public uint A;\r\n        [FieldOffset(4)]\r\n        public fixed uint B[2];\r\n    }\r\n}\r\n```\r\n\r\nGenAPI generates incorrect code, the generated code can not be built.\r\n```\r\nnamespace Test\r\n{\r\n    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Explicit, Size=12)]\r\n    public partial struct MyStruct\r\n    {\r\n        [System.Runtime.InteropServices.FieldOffsetAttribute(0)]\r\n        public uint A;\r\n        [System.Runtime.InteropServices.FieldOffsetAttribute(4)]\r\n        public Test.MyStruct.<B>e__FixedBuffer B;\r\n        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]\r\n        [System.Runtime.CompilerServices.UnsafeValueTypeAttribute]\r\n        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Size=8)]\r\n        public partial struct <B>e__FixedBuffer\r\n        {\r\n            public uint FixedElementField;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nGenAPI should generate a field using \"fixed\" keyword instead of using the auto generated FixedBuffer structure.\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/1532", "title": "GenAPI: Add global prefix to explicit interface method and property", "body": "When use \"-global\" option, the global prefix \"global::\" should be added to name of explicit interface methods and properties as follows.\r\n\r\n```\r\nobject global::System.Collections.IEnumerator.Current { get { throw new global::System.PlatformNotSupportedException(\"Not Supported Feature\"); } }\r\n```", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ellismg": {"issues": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/1430", "title": "Tests should build and run when building on *nix", "body": "Today tests are disabled in the top level dir.props.\r\n\r\nThere are a few issues:\r\n\r\n1. We need to add rids to the test projects\r\n2. We need to ensure NuGetRuntimeIdentifier is getting set correctly (today projects hard code things to win7-x64 which means the wrong assets are deployed)\r\n3. Some tests depend on file system enumerator order and we need to update these tests.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1423", "title": "GetPackageVersion is defined in two task assemblies.", "body": "It's defined in both Microsoft.DotNet.Build.Tasks and Microsoft.DotNet.Build.Tasks.Packaging which means you have to choose one or the other to Using task or everything goes sideways.  Is this expected (I ran into this problem when trying to update buildtools to consume the latest buildtools and packaging.builds pulled in targets files that tried to UsingTask both and it went about as well as you'd expect).", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1311", "title": "Revisit how (and when) we do public signing", "body": "I think we need to make a few improvements in how our signing targets play with dev-build/community builds.  Where I'd like to get to is this place (but I'm not a signing expert, so maybe this is wrong)\r\n\r\n1. For assemblies where we have full keys checked in (open.snk and test.snk?) we always<sup>1</sup> full sign\r\n2. For other assemblies, the default is to public sign, not delay sign the assemblies.\r\n3. If Microsoft is doing an \"official\" build and plans to sign, we instead delay sign these assemblies so we can full sign in PRSS later.\r\n\r\nI'd also like us to start leveraging the /PublicSign switch in CSC (available via the `<PublicSign>` property in MSBuild) instead of using our custom task or FakeSign tool.  This requires that we are using a someway newish version of Roslyn.  This is already supported today when building on *NIX, I assume we use the same compiler for Windows, but I can't recall for sure.  Certainly it's present in VS 2017.\r\n\r\n1: On *NIX today, full signing is not supported.  As a workaround we should just public sign in this case on these platforms, until the issue is addressed.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1311/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/558", "title": "init-tools.cmd/.sh per repo should be simpler.", "body": "Today, each repository has a bunch of logic in `init-tools.sh` and `init-tools.cmd` to download the correct version of dotnetcli, restore build tools and then call the stage two scripts.\n\nThis logic is starting to differ across corefx and coreclr, for no good reason.\n\nI propose we do the following:\n1. Tag our git repository with the build tools version number, each time we update it.\n2. Add a file in this repository that does what init-tools.cmd/.sh does today (downloads the cli, creates and restores a project.json and then jumps into init-tools.sh/init-tools.cmd from the package).  Call this file bootstrap-tools.sh or something\n3. Change init-tools.cmd/.sh in each repository to read the BuildTools version from the text file, then download the newly added script via a stable location (`https://raw.githubusercontent.com/dotnet/buildtools/<tag-name>/<path-to-bootstrap-tools.sh>`) and invoke that.  If we want to add a very simply check to invoke some other file instead (for local development) via something like an environment `PATH_TO_BOOTSTRAP_TOOLS`, that's fine.\n\nNow all the logic about figuring out the distro/version, allowing overrides of different pacakges, etc. can be in a common location.\n\nNow init-tools.cmd has very little logic that has to be duplicated across repositories.  Going forward we would consider it an anti-pattern to have to edit the init-tools file in the repository\n\nIf we do this, it might be a good idea to change the name of the `init-tools` that we call via bootstrapping to something like `deploy-tools` so each script has a unique name.\n\nDoes this seem reasonable?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/437", "title": "Provide helper script for computing rid for a *NIX platform", "body": "Everyone is doing their own thing in different ways.  We should have a common script that does the work of reading `/etc/os-release` and friends and computing a rid.\r\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62981075", "body": "@FiveTimesTheFun, this addresses the issue I was having earlier.  @davkean , I am sure you'll want to take a look as well.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62981075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62983192", "body": "Yeah, I sent him a copy of the entire log, which I won't include here.  The relevant portion looks like this:\n\n```\nPrimary reference \"System.Collections.Immutable, Version=1.1.32.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\". (TaskId:13)\n    Resolved file path is \"C:\\Users\\matell\\Documents\\GitHub\\buildtools\\src\\packages\\System.Collections.Immutable.1.1.32-beta\\lib\\portable-net45+win8+wp8+wpa81\\System.Collections.Immutable.dll\". (TaskId:13)\n    Reference found at search path location \"{HintPathFromItem}\". (TaskId:13)\n    Found related file \"C:\\Users\\matell\\Documents\\GitHub\\buildtools\\src\\packages\\System.Collections.Immutable.1.1.32-beta\\lib\\portable-net45+win8+wp8+wpa81\\System.Collections.Immutable.xml\". (TaskId:13)\n    This reference is not \"CopyLocal\" because it's registered in the GAC. (TaskId:13)\n    The ImageRuntimeVersion for this reference is \"v4.0.30319\". (TaskId:13)\n```\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62983192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62985141", "body": "So @davkean, do you want me to abandon this PR?  My preference here would be to check in this fix so the build works in this scenario.  I'm happy to file an issue (and even reference the issue number with a comment in the project file) to go clean things up once the relevant nuget issue is fixed, but I'd rather not wait for a fix in nuget when the build is broken today in a popular configuration.  Is that reasonable?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62985141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62988209", "body": "Thanks, all.  I submitted the fix to the CI system.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62988209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/64097250", "body": "Looks good to me!  Thanks for the patch!\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/64097250/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/65328921", "body": "LGTM.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/65328921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73396435", "body": "LGTM.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73396435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/comments/13169481", "body": "If you would rather me rename the property on BuildValues.props and just include that in the Nupkg instead, I am happy to.  I don't think it's a good idea to not prefix the thing we consume with BuildTools or something to \"namespace\" it.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/13169481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/13169500", "body": "These changes will require me to spin a new build tools, then consume it here and spin another build in order to get everything up to date.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/13169500/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/comments/15966741", "body": "I think you need rhel.7-x64 here as well?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/15966741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "chcosta": {"issues": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/1381", "title": "Centralize MSBuild resolution logic skip", "body": "CoreFx and CoreClr currently have workarounds for MSBuild resolution logic which is throwing MSB3644 because we use our own resolution logic.  We should centralize this logic in BuildTools rather than sprinkling the workaround throughout the corefx / coreclr code base.\r\n\r\nhttps://github.com/dotnet/coreclr/pull/10020/files\r\n\r\n/cc @weshaggard ", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1381/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1050", "title": "Refactor targets out of repo's and into BuildTools where appropriate", "body": "Related to https://github.com/chcosta/corefx/blob/f2673c97a30e8ad79b0dc4c4bb7b29cc2454def8/Documentation/building/build-guidelines.md\n\nAlso see https://github.com/dotnet/buildtools/issues/1049\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1049", "title": "Refactor properties out of repo's and into BuildTools where appropriate", "body": "Related to build cleanup - https://github.com/chcosta/corefx/blob/f2673c97a30e8ad79b0dc4c4bb7b29cc2454def8/Documentation/building/build-guidelines.md\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1023", "title": "ExternalPackages cleanup in AddDependenciesToProjectJson", "body": "ExternalPackage versions are no longer used, we now use exclusively the package drop or a versions file.   ExternalPackage code should be cleaned up from BuildTools in these locations:\n\nhttps://github.com/dotnet/buildtools/blob/master/src/Microsoft.DotNet.Build.Tasks/AddDependenciesToProjectJson.cs#L57\nhttps://github.com/dotnet/buildtools/blob/master/src/Microsoft.DotNet.Build.Tasks/AddDependenciesToProjectJson.cs#L288\nhttps://github.com/dotnet/buildtools/blob/master/src/Microsoft.DotNet.Build.Tasks/AddDependenciesToProjectJson.cs#L288\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/968", "title": "Avoid duplication of Roslyn versions", "body": "There are a couple of places where Roslyn versions are duplicated.  We should look to avoid the duplication where possible.  See https://github.com/dotnet/buildtools/pull/947\n\n> Can we avoid having to hard code this version and package name here by moving the logic to the init-tools scripts and just copy the props files into the ToolsRuntimePath similar to the portable targets? \n> \n> I really don't like seeing this version copied multiple places :( Do we have any strategies to try and avoid this duplication? \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/852", "title": "Add version.txt to nuspec's when buildtools version is updated", "body": "After this PR https://github.com/dotnet/buildtools/pull/849  is submitted, undo commit https://github.com/dotnet/buildtools/pull/849/commits/29a0841c2cb35fe0d60540bab4a3b0f1a14a3e4c\n\nThis will add version info to buildtools packages\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/852/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/429", "title": "Package validation misses when assembly is inbox and claimed to be not supported", "body": "opened by @ericstj \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [{"url": "https://api.github.com/repos/dotnet/buildtools/commits/bb78c5abba284a829aa86da81b5cccaf140b2439", "message": "unsplit props (#1869)"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/9b8f463ed27a6c51911c87a5118c26f647e54197", "message": "Add Feed props file, alleviate taskdir property conflict  (#1868)\n\n* Add feed props file, alleviate potential taskdir property conflict\r\n\r\n* Follow MSBuild property convention"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/1547e7292e1fc29d7726df25e314fea73dcd6bf7", "message": "Revert no restore (#1832)\n\n* omit restore during publish\r\n\r\n* Revert \"omit restore during publish\" commit"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/f9f8d64cf54098d786c89d3da15c0e0121d6f085", "message": "omit restore during publish (#1829)"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/2bd3c49e2ace5f8d9130ff07d4c7cefd033f7e64", "message": "Handle additional false-positive NuGet push scenarios (#1823)\n\n* Handle additional false-positive NuGet push scenarios\r\n\r\n* move duplicated text into propertygroup"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/30baeccc46560b4579437fde0047f49d1409f0e0", "message": "Use feeds version with package globbing"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/5cd2f78ff853d1be73913d1c6aed005f97b2557f", "message": "Add feed package to buildtools init (#1748)\n\n* Enable using the publish.targets file without creating a wrapper target\r\nfile\r\n\r\n* Add feed package for publishing"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/70129243646ad4d4ab0c747a36d8ad7746eeddc2", "message": "Enable ignore condition for timeout followed by forbidden  (#1621)\n\n* Enable ignore condition for timeout followed by forbidden\r\n\r\n* Fix usingtask name\r\n\r\n* PR feedback\r\n\r\n* Dupe ExecWithRetries rather than deriving\r\n\r\n* minor PR feedback"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "richlander": {"issues": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/1372", "title": "Update to latest XUnit", "body": "Update checked-in xunit to latest xunit. Goal is to include xunit licensed to the .NET Foundation. See #1371.\r\n\r\nThis search for \"outercurve\" should no longer return any results in the repository: https://github.com/dotnet/buildtools/search?utf8=%E2%9C%93&q=outercurve", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/1447", "title": "Update license for .NET Core NuGet packages", "body": "We are adopting a plan to change the license and copyright of .NET Core packages. We want to make this change for open source packages. If there are packages that are still closed source, in part of in full, they should not be affected by this change.\r\n\r\nIs this the right change to make to achieve the stated goal, above?\r\n\r\nI saw that there are [nuspecs in this repo](https://github.com/dotnet/buildtools/search?utf8=%E2%9C%93&q=329770&type=) and know that Roslyn and other components have their own approach. I thought we should start here.\r\n\r\nMore context: https://github.com/dotnet/corefx/issues/12190", "author_association": "OWNER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ratishphilip": {"issues": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/1356", "title": "Including xml documentation of methods in the Generated CS file", "body": "In the .CS file which is generated by the Microsoft.DotNet.BuildTools.GenAPI package, is it possible to include the xml documentation of the methods which are listed for each types listed in the file?", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1356/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Petermarcu": {"issues": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/1268", "title": "Repo API should allow for specifying nuget cache location", "body": "So the cache can be shared when doing multi-repo builds.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1268/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69700505", "body": "@dotnet-bot add to whitelist\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69700505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "naamunds": {"issues": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/1261", "title": "Eliminate duplication in GenerateTestExecutionScripts.cs", "body": "There is a significant amount of duplication between `WriteShExecutionScript` and `WriteCmdExecutionScript` that should be cleaned up in https://github.com/dotnet/buildtools/blob/master/src/Microsoft.DotNet.Build.Tasks/GenerateTestExecutionScripts.cs.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1245", "title": "Eliminate separate CopySupplementalTestData target", "body": "publishtest.targets currently contains a `CopySupplementalTestData` target for copying the `SupplementalTestData` items to the test directory.  This copy is done in a separate target because it cannot use hard links, whereas the other files being copied to the test directory use hard links by default.  This is because the supplemental test data is shared between multiple projects, so using hard links would result in race conditions between the archiving and copying of different links of the same files.\r\n\r\nHaving this separate copy adds complexity to the test targets.  It may not be necessary if the supplemental test data were included in Content and the output directory were archived when preparing to run in Helix instead of the test directory being archived, because Content is already copied to the output directory without using hard links.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/comments/15967231", "body": "Fixed.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/15967231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "ghost": {"issues": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/1137", "title": "Looking for documentation about the build tools", "body": "It is not immediately accessible to me the entry points to our build tooling nor how to use them properly (without resulting in many cycles of guess and check to 'figure it out').\n\nIs there some way we can get an enumeration of the test tooling, along with the intended 'use scenarios'? \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1137/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "hughbe": {"issues": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/1091", "title": "Xunit UWP runner crashes on certain invalid char enums", "body": "Yes, char enums do exist! When moved into MemberData, the tests found here: https://github.com/dotnet/corefx/blob/master/src/System.Runtime/tests/System/EnumTests.cs#L1453-L1461 crash with the following mesage:\n![error](https://cloud.githubusercontent.com/assets/1275900/19095982/05241d1a-8a91-11e6-8ce9-fd9e6f53d02e.png)\n\nNote: I have tested and made sure that invalid chars work, so that part of the crashing bug is fixed.\n\n/cc @jamesqo \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jhendrixMSFT": {"issues": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/1045", "title": "Add property to version-stable location of dotnet.exe", "body": "In https://github.com/dotnet/buildtools/pull/1038 a change was made to make the path to the shared framework copy of dotnet.exe resilient to versioning, e.g. $RepoRoot\\Tools\\dotnetcli\\shared\\Microsoft.NETCore.App\\version\\dotnet.exe; this way when the CLI is updated and a new version of FX is brought it we don't need to update a bunch of runtime config JSON files.  Only run.ps1 is consuming this at present, we need to expose this in our msbuild targets so that tools like GenAPI.exe etc can take advantage of it.  The change would likely go in toolruntime.targets that ships as a part of build tools.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/1045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69667536", "body": "Thanks for the feedback, I'll update the commit message.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69667536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69776492", "body": "The tests are executed (I verified this yesterday before sending the PR).  In this context $(OutDir) is explicitly set in src\\dirs.proj to $(BaseOutputPathWithConfig) before importing this target so the net effect is the same (note there will be a slight tweak to this as well in a future PR).\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69776492/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69777616", "body": "Also, from combing through build logs yesterday I see that $(OutDir) is properly set per project, i.e. it isn't bin\\debug for everything.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69777616/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69951903", "body": "By default $(OutDir) is set to $(OutputPath) in Microsoft.Common.CurrentVersion.targets and we build the correct $(OutputPath) per project in our top-level dir.props file.  src\\dirs.proj is a special case as it defines $(OutDir) explicitly to $(BaseOutputPathWithConfig) (packages.targets needs the root output directory); this breaks the VSO build scenario as $(OutDir) is specified on the command line (I have a fix ready for this to conditionally set $(OutDir) but the first step is to get tests.targets updated).\n\nAlso FWIW packages.targets correctly keys on $(OutDir) so making this change keeps our targets consistent.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69951903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/70013308", "body": "I see.  I'm going to close this PR and will look at the new changes.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/70013308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74119195", "body": "test this please\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74119195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74896508", "body": "test this please\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74896508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/75165667", "body": "Yep I will fix this up on the corefx side as required.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/75165667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/75176740", "body": "New build is ready.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/75176740/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77049074", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77049074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26057106", "body": "I've fixed up all of the AssemblyInfo.cs files for the new projects I've added.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26057106/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26057564", "body": "The reference is required for the build to resolve the dependency.  I see this same pattern in other csproj files in this repo but not in corefx.  Apparently whatever mechanism is used to resolve references in corefx hasn't been moved to buildtools?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26057564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/27045717", "body": "This is only set when CollectConsumptiveMetrics is true.  The pattern I have in mind is there would likely be predefined sets of perf data to collect, controlled by a \"top-level\" property like you see here.  And if the predefined categories aren't what you want you can specify the individual bits (CollectPerfEvents=true to enable, then specify ClrMetrics and KernelMetrics with the values you want).\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/27045717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "stephentoub": {"issues": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/449", "title": "Strings.resx generating dead properties for EventSource entries", "body": "For when generating a manifest, EventSource supports messages for each event, with text that can be written to provide a human-readable representation of the event's data.  Because this text can then be localized, these messages can be put into the .resx, and EventSource is able to pull them from the resources.  However, it pulls them directly, not via the property accessors generated into SR.cs/vb.  As a result, any project that has an EventSource typically has a bunch of property accessors that are generated but are dead code.\n\nWe should modify the resource SR.cs/vb generator to support excluding certain resources from being code gen'd, e.g. if there's a `<Comment/>` that contains the text \"DisableCodeGeneration\".\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/244", "title": "Switch to official xunit console runner", "body": "The xunit netcore console runner has drifted significantly from the full xunit console runner.  We should work with the xunit team to incorporate whatever changes are necessary to support .NET Core, and then adopt the official runner in build tools rather than having a forked runner.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/70591617", "body": "For reference, this significantly reduces the startup time for a bunch of tests... on my machine, tests that previously took ~2 seconds now take ~0.2 seconds. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/70591617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/70601188", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/70601188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77265628", "body": "One comment, otherwise LGTM.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77265628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25821805", "body": "Consider calling Console.ResetColor() here instead; that'll have the same effect, and is supported.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25821805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "bartonjs": {"issues": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/444", "title": "There should be a shared value for the \"all Unix\" RID collection", "body": "When making a package be dnxcore50/unix-only the package validation logic requires explicitly saying all of the Unix RIDs to test.\n\nIt would be good to have the list from (https://github.com/dotnet/buildtools/blob/master/src/Microsoft.DotNet.Build.Tasks.Packaging/src/PackageFiles/Packaging.targets#L755)\n\n``` xml\n<DefaultValidateFramework Include=\"dnxcore50\">\n  <RuntimeIDs>win7-x86;win7-x64;osx.10.11-x64;centos.7.1-x64;ubuntu.14.04-x64;linuxmint.17-x64</RuntimeIDs>\n</DefaultValidateFramework>\n```\n\nbe in a shared property file, so that instead of writing\n\n``` xml\n<ExcludeDefaultValidateFramework Include=\"dnxcore50\" />\n<ValidateFramework Include=\"dnxcore50\">\n  <RuntimeIDs>osx.10.11-x64;centos.7.1-x64;ubuntu.14.04-x64;linuxmint.17-x64</RuntimeIDs>\n</ValidateFramework>\n```\n\none could instead write\n\n``` xml\n<ExcludeDefaultValidateFramework Include=\"dnxcore50\" />\n<ValidateFramework Include=\"dnxcore50\">\n  <RuntimeIDs>$(UnixCommonRIDs)</RuntimeIDs>\n</ValidateFramework>\n```\n\nand the default validator would be something like\n\n``` xml\n<DefaultValidateFramework Include=\"dnxcore50\">\n  <RuntimeIDs>$(Windows7RIDs);$(UnixCommonRIDs)</RuntimeIDs>\n</DefaultValidateFramework>\n```\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/382", "title": "Packaging: There is no \"public\" equivalent to Dependency for pre-release extra references", "body": "When a project reference can be made to a prerelease package (from another package) the version gets correctly built with the prerelease versioning stamp.\n\nFor manually encoded dependencies, registering a `_FilePackageReference` will accomplish this goal, but with the underscore prefix it suggests it wasn't intended for direct use.\n\n@ericstj asked me to file this to be able to avoid using _FilePackageReference directly from corefx.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73790312", "body": "https://github.com/dotnet/corefx/pull/557/files shows the version of this change from corefx (includes more variants of the swp file)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73790312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73799160", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73799160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74344483", "body": "LGTM.\n\nI was concerned that the integer values (like the number of tests) was going to be affected by this, too; but the XAttribute constructor's conversion writes down all the primitive types in a way that is indistinguishable from invariant.   So only custom ToString calls are areas for concern.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74344483/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/27435893", "body": "Condition=\"'$(TargetsWindows)'=='true'\"\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/27435893/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "billwert": {"issues": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/355", "title": "Const enums are missing a cast", "body": "This code:\n\n``` csharp\nnamespace ClassLibrary4\n{\n    public class Class1\n    {\n        public const MyEnum Enum = MyEnum.Two;\n\n    }\n\n    public enum MyEnum\n    {\n        One,\n        Two,\n        Three\n    }\n}\n```\n\nTurns into this code:\n\n``` csharp\nnamespace ClassLibrary4\n{\n    public partial class Class1\n    {\n        public const ClassLibrary4.MyEnum Enum = 1;\n        public Class1() { }\n    }\n    public enum MyEnum\n    {\n        One = 0,\n        Three = 2,\n        Two = 1,\n    }\n}\n```\n\nWhich of course doesn't compile.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "akoeplinger": {"issues": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/209", "title": "Reenable hardlink support for xplat build", "body": "See https://github.com/dotnet/buildtools/issues/197 and https://github.com/dotnet/buildtools/pull/208.\n\nRemaining tasks for reenabling hardlinks on xplat builds:\n- [x] https://github.com/Microsoft/msbuild/pull/132\n- [ ] Publish new MSBuild package containing the above fix and use it in corefx etc\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/68110973", "body": "> We should probably fix this in corefx as well.\n\nYep, I will. I wanted to wait a bit to avoid conflicts should you change [this line](https://github.com/dotnet/corefx/pull/324/files#r22274879) again :)\n\n> did you do a search for  `&quot;` ? Not sure these are the only places.\n\nYes, they are the only places that are problematic (i.e. space before the `&quot;`)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/68110973/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69736092", "body": "I just checked the new \"xunit.core.netcore\" nupkg from @FiveTimesTheFun PR https://github.com/dotnet/corefx/pull/358 and it doesn't contain the problematic xunit.runner.tdnet.dll anymore, so I think this shouldn't be needed anymore once that PR is in.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69736092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/76439845", "body": "FYI I changed this to the Compile target in https://github.com/dotnet/buildtools/pull/39 to make it work on Mono/xbuild. PrepareForRun works there as well, so this is fine from my part :)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/76439845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77021971", "body": "@nguerrera PrepareForRunDependsOn [seems to do the same thing](https://github.com/mono/mono/blob/6733010353a6024a2b437a6cd5c5c30ae6e99218/mcs/tools/xbuild/data/12.0/Microsoft.Common.targets#L463-L465) on Mono, so that should work.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77021971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/comments/20235822", "body": "For future readers: the public key / token mentioned in the commit message for Open.snk is wrong, here's the correct info:\r\n\r\n```\r\nPublic Key:\r\n00240000048000009400000006020000002400005253413100040000010001004b86c4cb78549b\r\n34bab61a3b1800e23bfeb5b3ec390074041536a7e3cbd97f5f04cf0f857155a8928eaa29ebfd11\r\ncfbbad3ba70efea7bda3226c6a8d370a4cd303f714486b6ebc225985a638471e6ef571cc92a461\r\n3c00b8fa65d61ccee0cbe5f36330c9a01f4183559f1bef24cc2917c6d913e3a541333a1d05d9be\r\nd22b38cb\r\n\r\nPublic Key Token: cc7b13ffcd2ddd51\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/20235822/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22276240", "body": "Since the assembly name is already suffixed with v12 it wouldn't make a difference (compared to the other assemblies) other than consistency.\n\nDo you want me to add it?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22276240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22116180", "body": "Is there a way to get this path without hardcoding ProgramFiles here? E.g. by passing it in from the MSBuild script somehow?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22116180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22117265", "body": "[GetReferenceAssemblyPaths](http://msdn.microsoft.com/en-us/library/microsoft.build.tasks.getreferenceassemblypaths%28v=vs.110%29.aspx) might be a good alternative, I believe this works on Mono as well.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22117265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22117992", "body": "@weshaggard yeah, Mono defines a directory similar to `C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework` with the usual `.NETFramework` and `.NETPortable` subfolders (and an env var to override where it looks for that dir).\n\nFalling back to Profile7 should be fine for now.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22117992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22276240", "body": "Since the assembly name is already suffixed with v12 it wouldn't make a difference (compared to the other assemblies) other than consistency.\n\nDo you want me to add it?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22276240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25547885", "body": "This should be ToolsVersion=\"12.0\" as well like the rest of the targets.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25547885/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25548004", "body": "There's also a space missing in the condition `And'$(ExcludeResourcesTarget)'`, which might cause problems.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25548004/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/28740390", "body": "unrelated to this PR, but can you replace `\\\\` with `Path.DirectorySeparatorChar`? it should help Unix portability.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/28740390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/35268991", "body": "\"OS\" is automatically set by msbuild.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/35268991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/35269793", "body": "It is indeed the former and we should use OS, not OSGroup (as that one is the compile target) :)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/35269793/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/36475053", "body": "The xplat MSBuild turns `\\` -> `/` if that's what you're concerned about.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/36475053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/38805909", "body": "@ellismg back when this code was added to MSBuild you said there's some stuff missing from PE Reader that needs to be exposed: https://github.com/Microsoft/msbuild/pull/43#issuecomment-88251329\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/38805909/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/39883530", "body": "The comment above still mentions this is done for all nested types regardless of their accessibility, etc. Would be good to update it.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/39883530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/41973029", "body": "nit: there's an additional space in front of this condition that isn't there in the next line\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/41973029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/54322330", "body": "This should be TVOS here.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/54322330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/54322336", "body": "And WatchOS here.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/54322336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/56723569", "body": "Shouldn't this be `'$(IsTestProject)' == 'false'` ?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/56723569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/80514755", "body": "Fixed.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/80514755/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/105277837", "body": "Microsoft.Cci.dll is coming from a nuget package already so that could (should?) just be a `<dependency>`", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/105277837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/111605997", "body": "@weshaggard this is in GenAPI.Desktop which only targets .NET Framework, so relying on mono as the \"Desktop\" runtime outside of Windows sounds fine to me.\r\n\r\nThe `--runtime=v4.0.30319` is unnecessary though, unless you have a very old Mono (and GenAPI probably wouldn't work there anyway).", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/111605997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25547885", "body": "This should be ToolsVersion=\"12.0\" as well like the rest of the targets.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25547885/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25548004", "body": "There's also a space missing in the condition `And'$(ExcludeResourcesTarget)'`, which might cause problems.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25548004/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "eatdrinksleepcode": {"issues": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/125", "title": "BuildTools tests", "body": "There are no tests in the BuildTools repo. The Tasks project could use tests both for the custom tasks themselves, as well as the targets files (e.g. importing all of the targets into a master build file and at least ensuring that they parse correctly). I haven't looked enough at the other projects in the repo to know what kinds of tests would be appropriate, but they do contain non-trivial logic that could be tested.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73471294", "body": "(In reponse to @weshaggard at https://github.com/dotnet/corefx/issues/678#issuecomment-73352719)\n\nMy strong preference would be to (a) only run the tests if the test assembly has changed (i.e. something in the tests or their dependencies has changed), and (b) only copy files to the test directory if the tests need to be run. Unfortunately the way the test targets are structured today makes (b) difficult to achieve (because the copying of the test files is almost entirely disconnected from the running of the tests); I plan to look into alternative ways of executing the tests to alleviate this problem.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73471294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73760436", "body": "I started looking into this, and quickly discovered that the current xunit.console runner does not produce any output files, because the two output types built into xunit both require xsl transformation, which is not exposed in a portable contract. My idea is to add an option to the xunit.console runner to produce an output file with the raw xml results. This would give us output files to use in the RunTestsForProject task.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73760436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73762876", "body": "@alexperovich great! I will hold off on any further work on this until your change comes through.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73762876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73776583", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73776583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73788333", "body": "I completely agree.\n\nI find myself (as I often do) pining for [Gradle](http://gradle.org/), where every task has a default up-to-date check that includes both the inputs and outputs AND whether the last task run succeeded. Unfortunately MSBuild not only lacks that functionality, but also lacks the necessary extension points to implement it from the outside.\n\nThe only ways that I can think of working around this feel hacky, and probably not worth doing. I will do some more research tonight and try to come up with something better. If you have any other ideas, please share.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73788333/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73808221", "body": "Yes, that will work. I had misread [the documentation for incremental builds](https://msdn.microsoft.com/en-us/library/ms171483.aspx) to mean that skipping a task based on timestamps would only work if there is a one-to-one mapping from the inputs to the outputs; but upon re-reading I realize that it is making a statistical observation, not a functional statement.\n\n@weshaggard, are you actively working on this, or can I take a crack at it?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73808221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26549680", "body": "What conflict will we have? If I understand correctly, batching will occur based on the target framework, which is also part of the test working directory.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26549680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26549680", "body": "What conflict will we have? If I understand correctly, batching will occur based on the target framework, which is also part of the test working directory.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26549680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26549706", "body": "Correct.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26549706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26550524", "body": "Correct, dependencies are executed prior to evaluating the Inputs/Outputs of a target. This is true even if the dependency is expressed using Before/AfterTargets instead of DependsOnTargets. (At first this was annoying, but it makes sense: what if you wanted to intentionally affect the inputs of a task using a dependency?)\n\nI am not generally a fan of using CallTarget, but it was the only reliable way I could find to achieve all of the objectives of #60. Another option would be to inline CopyTestToTestDirectory into RunTestsForProject, which is not crazy, but it would make the RunTestsForProject target quite large.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26550524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26550653", "body": "I will take another shot at this while maintaining the batching.\n\nHow would the multiple target frameworks be expressed? Multiple Folder nodes under the TestTargetFramework item? Or multiple TestTargetFramework items?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26550653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26550780", "body": "We could do that. It would slightly complicate any tools that might want to access the file afterwards (saving at the end of a CI run for example).\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26550780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26551357", "body": "The problem with using Outputs on this target - and the reason I ultimately gave up on making this target independently incremental and invoked it from RunTestsForProject instead - is that MSBuild requires Outputs to be statically identified; it will not evaluate wildcards. The reasons are explained [here](http://blogs.msdn.com/b/msbuild/archive/2006/02/22/537150.aspx) (the reasons for not using wildcards are sound, but I would have preferred the MSBuild team to allow the developer to make that decision rather than enforcing it in the tool).\n\nOutputs for the copy cannot easily be statically determined since they include packages references. The package resolution could be moved into its own task that runs prior to the copy, which would allow the outputs for the copy to be statically determined; and in fact I have a local commit that does just that. However, the result was increased complexity in the build files, as well as the running build (package resolution AND comparing timestamps on the entire test directory have to be executed every time), for what I felt was little value; executing the copy from inside RunTestsForProject felt like a cleaner solution.\n\nIf you would like, I can push my local commit to a branch so you can see what it would look like.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26551357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/27001546", "body": "1) If you are asking if the DiscoverTestInputs target should be moved to tests.targets...given the even stronger coupling between RunTestsForProject and CopyTestToTestDirectory, I am not comfortable with the separation between tests.targets and publishtest.targets. It made sense when they were happening at two different points in the lifecycle, but now it just feels strange. I have been dancing around combining them.\n2) Agreed, I will rename it.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/27001546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/27139462", "body": "It works as intended. From [MSDN](https://msdn.microsoft.com/en-us/library/ee216359.aspx):\n\n> MSBuild determines the target build order as follows:\n> ...\n> 4. Before a target is executed, its DependsOnTargets targets are run.\n> 5. Before a target is executed, any target that lists it in a BeforeTargets attribute is run.\n> 6. Before a target is executed, its Inputs attribute and Outputs attribute are compared. If MSBuild determines that any output files are out of date with respect to the corresponding input file or files, then MSBuild executes the target. Otherwise, MSBuild skips the target.\n> 7. After a target is executed or skipped, any target that lists it in an AfterTargets attribute is run.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/27139462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/27157757", "body": "Ah, I see. If I remove DependsOnTargets=\"DiscoverTestInputs\", then RunTestsForProject is skipped because it has no inputs. If I put it back, the target is executed as expected on the first run, and not executed on the second run, as expected. This tells me that the inputs for RunTestsForProject are not being evaluated until after DiscoverTestInputs has executed; otherwise, executing DiscoverTestInputs would have no effect on whether RunTestsForProject is executed.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/27157757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/27342114", "body": "What would have to be done in everyone's dir.props? Doesn't this allow each project type to continue following its normal conventions?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/27342114/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ahsonkhan": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/buildtools/commits/7003b8c57d1a17087c689fb23d32d9aa90eb8fa5", "message": "Merge pull request #1870 from ahsonkhan/AddSpaceAroundOptional\n\nAdd space around '=' when defining optional arguments"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/4d981f976f9ab21305f91abd557b27de53aa5a45", "message": "Add space around '=' when defining optional arguments"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/4ffe2088d14146a28e269d22a8fbd4a19677e515", "message": "Merge pull request #1862 from ahsonkhan/AddEnvVar\n\nLimit inner iteration count to a max of 2"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/7098cfc9fe90e1956ce739c5e169cd1c5ca74f86", "message": "Make max iteration (and max inner iteration) a property"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/8be4823c0ce762a166875022e3936dbb7333f678", "message": "Limit inner iteration count to a max of 2"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/161078882", "body": "> That way, we can only have it be two on the tests where we need it, but keep it 1 for the rest of the cases.\r\n\r\nIn what case would we want to keep it at 1?", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/161078882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/161081429", "body": "The change to 2 is not test specific. None of the test require 2 iterations. Changing to 2 allows us to verify the correctness of the test run (i.e. data is being produced), which I believe is part of the intention of running the performance tests briefly as part of outerloop. If that is not important, I could revert all back to 1 (since there isn't any requirement, from the tests perspective, to run more than that). The data from the 1st iteration is ignored across the board.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/161081429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/161082347", "body": "To unblock outerloop corefx CI for now, I could keep the change minimal (and revert back to 1 iteration). Would that be preferable?", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/161082347/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "MichalStrehovsky": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/buildtools/commits/d48624c3676bbe23aee5821df85d5b758f3454a9", "message": "Allow disabling fxcop analyzers\n\nRestores #1350 that got trampled over in e23965130c93c3cc66846efc60f6034e5710ef51."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/4c8aa056c0755017eca89675fe6b13d84ae713d9", "message": "Unify IL.targets with CoreCLR's version (#1818)\n\nSee https://github.com/dotnet/coreclr/blob/06828ca1eea8af9b2a0ac147ba8827f128a306e2/tests/src/IL.targets."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/f3694f40462f458f9253a3df6d333cdcfd6e17b1", "message": "Restore ILAsm on Unix (#1812)"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/3ce64ac8fe0a8d2f92430b220fa55feaf89aa487", "message": "Add ILAsm to buildtools (#1806)\n\nWindows-only for now."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "JohnTortugo": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/buildtools/commits/9d1eeb2aba9c4325522995cc86ec9604483aa7cb", "message": "Merge pull request #1830 from dotnet/ReproToolChanges\n\nChanges required to let scriptrunner.py run commands outside of Helix Context"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "trylek": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/buildtools/commits/14565fdd0f92ff64fd4dd41ec86fda53e1da4d3d", "message": "Support optional ContentType item metadata in UploadToAzure (#1819)\n\nPrefer explicit content type specification in the item metadata\r\nand only use autodetection when not available. We're using this\r\nfor uploading test logs and results to Azure - without proper\r\ncontent type some browsers have trouble opening them."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "riarenas": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/buildtools/commits/6902a3784ce49ed4bb3e3aa592b3921ea37d7757", "message": "Log blobs/directory names that would trigger PathTooLongException in \u2026 (#1815)\n\n* Log blobs/directory names that would trigger PathTooLongException in Microsoft.DotNet.Build.CloudTestTasks.DownloadFromAzure\r\n\r\n* Code review Comments\r\n\r\n* Fix typo\r\n\r\n* remove task output\r\n\r\n* Log unhandled exceptions with exception's ToString to view InnerException details"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jcagme": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/buildtools/commits/919fced24b5a907d7d85c08fa45eb5aa4aac04ca", "message": "Merge pull request #1814 from jcagme/master\n\nAdding 5 minute timeout to HttpClient for UploadToAzure scenarios"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/07e8d12fc1ea669b399baf9ec9418fd996278049", "message": "Making the upload timeout configurable"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/1222860ee6365a03569bcf7935c1c659be1f7ed4", "message": "Adding 5 minute timeout to HttpClient for UploadToAzure scenarios"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/eb41c61550c769023ba1e946ca819cdf007d5a20", "message": "Merge pull request #1809 from jcagme/master\n\nPublish symbols to flat containers"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/b3d8acbe3e8a8791de21ef87e1e04a9f4325201b", "message": "Removing brakets"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/99fb841506e5c9f6716cd45b4d2b7be0c5cc3337", "message": "PR feedback"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/7771a01afe0270b412cd3033964c7951eff78b9d", "message": "Feedback"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/bfa9fa729a3fcfb5dcc9f1dc6012ef46e892c26a", "message": "Jared's  comment"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/4126338301be825f098bb5d928cdbb70cafe83e5", "message": "Feedback"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/5caffdf2ce8436a2c32970f5d6fff20cfe015486", "message": "Addressing feedback and RelativeBlobPath bug fix"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/3bca8882155c4642b7be3b007a3242bf409481f6", "message": "Addressing comments"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/46d966b9512ba7c9949d23ecd0e65dad1e102fac", "message": "Publish symbols to flat containers"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/a2a6f61ed471cdde35cc3564ae964bde1dbe5fcc", "message": "Merge pull request #1804 from jcagme/master\n\nUpdating Sleet version"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/804b76e59a210aeeb542e0bc5b372c26d2187afe", "message": "Updating Sleet version since previous had a regression and was creating folders in the wrong locations"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/cea72c0624775c7d34eff5f0a82ef76c6de3b61e", "message": "Merge pull request #1800 from sunandabalu/turnOffDiskUsage\n\nTurn Off DiskUsage Reporting in CleanUpVSTSAgent"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/6d7c9485a861594a71ca904e49ab153334d4d957", "message": "Merge pull request #1798 from jcagme/master\n\nPublish only symbols.nupkg as symbols"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/6a4a1a8b5dc8dcbd9b0b10168fe43f086ad4d081", "message": "PR feedback"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/6a4d8a28239c42956b425c7538891488ba2fd50e", "message": "Merge branch 'master' of https://github.com/dotnet/buildtools"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/ca5d5368150d8f64f85375706420daa02ebb74ca", "message": "Remove unused parameters"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/1166b3cb80285d42c817047463e20dfd6e50faf5", "message": "Reverting NuGet.Commands version to 4.3.0\nRemoving push retry logic since it is now native in Sleet"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/5f3dafb25573c51476bedf9ad02dfdf17b94513b", "message": "Updating Sleet version so we don't publish packages as symbols when the extension is not symbols.nupkg"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/8594926c040fe0a60f9793a8bd9c37b551c58188", "message": "Merge pull request #1795 from jcagme/master\n\nCreate Public containers through PushToFeed"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/bd0b54aa5002d4fbd6da2f120746831959dabfbe", "message": "Keep pushing symbols"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/f0ab0ec100a94faf552b799b5c97725148691dcc", "message": "Minor changes"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/4ba6fa50703838b39b28d50703ba691b9ab1fcdc", "message": "Create public containers instead of private"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/cf4c655b2881a67af9b66da02641ce13ee59d74e", "message": "Merge pull request #1791 from jcagme/master\n\nChecking for blob existence"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/b35c18665977688d1e181bf8b4ec46b63273035f", "message": "Feedback from previous PR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/ba75e40461d5586bbe0db2ae528fa6f0b092a798", "message": "Update logic"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/b8508fd75ec23d52a710c9ff2be7f77122bba27e", "message": "Checking for blob existance"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/577995c861459a10c0611697a0c00300002141f4", "message": "Merge pull request #1789 from jcagme/master\n\nAdd asset upload support"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/a3a33bba6e4618c3a63accd0cf36a8411ab52d1d", "message": "Adding missing comments"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/2c6186b6b69583c0d3721d36b5e0881e6f001e62", "message": "Addressing last set of feedback"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/5beb5d061d13e804b23a10ff015d833bcee5e203", "message": "More PR feedback"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/3bb9ebd36e105a7d9bc6b8a6c4210fdfc1b94c56", "message": "Davis' feedback"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/a94b070055083a7a415086de7c810d9c2bbc9f46", "message": "Addressing feedback"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/af10402cd0897115a8c9686c17230f408de057f5", "message": "Calling publish methods only if they haver items to push"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/3333e1d9eb86737e46f63ef7e3493ad1aeb2fd0c", "message": "Adding try/catch aroung the UploadAsync call"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/06d3cd45f70fa781411b7cbdf1ac3954ad3697d2", "message": "Enabling assets upload using the same PushToFeed task"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/fffbc00cd3e7cc8bd5724a662e4c1a4c2cf8755f", "message": "Merge pull request #1786 from jcagme/master\n\nEnabling the Feed task to copy nuget dependencies for net15"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/77b33bc13c40f44d80b149d25d85bf8696558dca", "message": "Setting the CopyNuGetImplementations"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/a19b9d9f37f20baa338119c45c1b2a5431a10a4e", "message": "Remove dependencies for the Feed task"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/d9d306879d7a14d59df6974693e58fa839bb8a67", "message": "Merge pull request #1778 from dagood/optional-pj-workaround\n\nOptional tooling restore null argument workaround"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/1c66c0fbb15eacce3707f26fff3ac689004c31df", "message": "Merge pull request #1776 from dotnet/jcagme-patch-1\n\nUpdate Microsoft.DotNet.Build.Tasks.Feed version"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/5d05ffb02fc4eb85a4b557a54b401af1c3487599", "message": "Update Microsoft.DotNet.Build.Tasks.Feed version\n\nBumping to 1.0.0-prerelease-02131-03"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/a1a6b8059074fe11c55a40873dbe29afc1046284", "message": "Merge pull request #1742 from dotnet/sleetMove\n\nUse Sleet for package management"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/41b90dc4058a84027e4028e4c2e0df2d13da5398", "message": "Last set of feedback"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/990528d32a7f222d3557d8a8c6f74148268784dc", "message": "Merge branch 'sleetMove' of https://github.com/dotnet/buildtools into sleetMove"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/b88198e4df37795d0362510e65f1d9808a54ff2e", "message": "Async functions"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/170888c4737b6d292a6db3450457cbb995ec6a48", "message": "Merge branch 'master' into sleetMove"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/e12b5402baf354b907407547ff0a63fa46805f9a", "message": "Updating nuspec dependency"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/eb562df55468cb15077215de690226df03358a08", "message": "Addressing Davis' feedback"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/dfdd1bb0e6aca1631aa4cd90098bb504bb7d57a7", "message": "Updating Newtonsoft.Json reference and updating Sleet versio"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/194ddc2e7d6db54bc8736ae203ce86d1ae9179a0", "message": "Clean up"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/250498b30b8d196e5110e18109f302036c4173f4", "message": "Feedback"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/ba86a839945526226f4ad1823d67cb156dcdc134", "message": "Missing change"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/ea88ad8d8e4f15cfdf2d15504ba460893a143aaf", "message": "More PR feedback"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/2a39de1043b2cf9082f7bf03a4508576bb9a0fd0", "message": "Adding overwrite logic"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/20d46c61e4bf416ee27f6c51d562256dc7244479", "message": "Update Newtonsoft.Json to 10.0.3"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/a4f384ed9b2b64f79dd6d8addfe7d1ee9885dbf4", "message": "Addressing PR feedback"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/dfc90769be40fb5b5a6d8960b10bf2ba360c344e", "message": "Addressing PR feedback"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/9d92e6c5ccd8e9afc33364e2f9031894969712b2", "message": "Remove not needed SLN"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/268a2938faed5e8cf2e9a7021652ed2183e436d2", "message": "Since we decided we wanted to support nuget install(s) some changes in how we publish and delete packages were needed. We decided to use Sleet for it to manage all the heavylifting operations of updating index.json files, create registration versions, etc."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/b061a57f0a963fbe8f87269b3d45fba843b4d770", "message": "Merge branch 'master' of https://github.com/dotnet/buildtools"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/f5daffd2f5bab10abcdee11bc028fa97a72fdaa2", "message": "LC"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/3443fc7ef3415199611e466d0106ae1641ef70e3", "message": "Local commit"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "sunandabalu": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/buildtools/commits/d1179eecfae4df73730e12cfe93e60118e7c3fd5", "message": "Turn Off DiskUsage Reporting"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vancem": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/buildtools/commits/48e815d61529eeda8d1a419ae904edea9d4092aa", "message": "Fix race associted with SourceLink\n\nThe sourcelink file is generated one for the whole repo so it is possible that\ndiffernet parts of the build will race to write it.   We have seen this show up as a file\naccess error in builds.\n\nIt is already the case that there is logic that avoids running the code most of the time\n(see VersionPropsImported).  but races are still possible.  They are avoided in that\nscheme by testing for the file existing and simply warning if there is a error trying to\nwrite the file.   We follow suit here.\n\nAs a unrelated change there was already a variable SourceLinkFilePath, for the source\nlink file so I use it instead of building it out of more primitive variable."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/8e91a23831d7cf8ea3a2c51099f8de56d8033664", "message": "Review feedback.  Avoid cloning condition."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/5ceb85ed2d79069ee440f0da9acd9275066b7fe2", "message": "Fix to unbreak Linux build.\n\nThis is a second attempt.   The first attempt was a misunderstanding of how Linux builds worked.\n\nBefore trying to support protable PDBs, GenFacades had a condition that it was never called if\nPortable PDBs are used.   However we WANTED to used portable PDBs so we added support for\nthat and dropped the condition to skip GenFacades if portable PDBs were used.\n\nHowever this had the effect of running GenFacades on Linux, where previously it never ran there\n(because Linux always used portable PDBs).\n\nThis fix basically puts the behavior back EXACTLY as it was before on non-windows platforms.\nThis will fix errors (they happen to be index out of range errors) on Linux builds (because we\nare running GenFacades where we should not be)."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/53ba5e5ff58675368d5ae1d8d8ea505d544748e7", "message": "Fix for CoreFX build break on Linux (#1797)"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/4bbd28e416abcb401b8cd360ad3c4f61bae0904b", "message": "Make the GenFacades task work for Portable Pdbs (#1792)\n\n* Make the GenFacades task work for Portable Pdbs\r\n\r\nBasically we add code so that if portable PDBs are detected,\r\nwe run a portable -> windows conversion, do the old\r\nGenFacades, and then convert windows -> Portable.\r\n\r\nPreviously we just gave up and did not produce  PDB.\r\nFixes issue  https://github.com/dotnet/buildtools/issues/1739\r\n\r\n* Review feedback"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/d599de54704a3bf56ec2db2a5fc8f9baf22a9d57", "message": "Noop to force recreation of Nuget pacakge (#1765)"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/20c43960e42d1fb8ea8a9c8c5de9f33dd79f8c87", "message": "Fix failure on Unix associate with converting PDBs (#1764)\n\n* Fix failure on Unix associate with convering PDBs\r\n\r\nCode to convert portable pdbs to windows pdbs was being run on UNIX machines.\r\nThis is clearly not needed and was causing failures.   Fix it to only run on non Windows\r\nand only for coverage (which is the only thing we know that needs the Windows  PDBs).\r\n\r\nSee  https://github.com/dotnet/corefx/issues/24807.\r\n\r\n* Fixed missing quotes"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/b68dbb06bb69535f849770c4487afe8ed6e8777c", "message": "Update PDB Conversion Task to fix random crash (#1758)\n\n* Update PDB Conversion Task to fix random crash\r\n\r\nThere was a COM bug in the PDB writing code used in the task that\r\nconverts portable PDBs to windows PDBs (see https://github.com/dotnet/symreader/pull/70)\r\nThis picks up a version with this fix in the build tools.\r\n\r\n* Updated to the converter DLL as well\r\n\r\nThis was not strictly needed (the fix was in the DiasymReader dll), but is more 'obvious'  way of doing it.\r\nIt also avoids adding a direct depdenency on Microsoft.DiaSymReader.\r\n\r\n* Remove redundant entry (from merge)."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/89b5b7fd28e195a02810aee94483b66e660be3b0", "message": "Allow Code Coverage to work on Portable PDBs (#1740)\n\n* Allow Code Coverage to work on Portable PDBs\r\n\r\nCurrently OpenCover requires MSPDBs.  This change makes the coverage task generate MSPDBs from\r\nportable ones so code coverage continues to work (soon OpenCover will support Portable PDBS directly).\r\n\r\nWe need this so we can switch CoreFX over to using Portable PDBs.\r\n\r\n* Trace Rename made by PR 1736\r\n\r\n* Force Fix to make Coverage work with Portable Pdbs\r\n\r\n* Fixed comments"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/5300850f2880360d693b1c517b10f667ae458942", "message": "Merge pull request #1665 from vancem/SourceLinkSupport.9-8-17\n\nAdding SourceLink Support (source code from GitHub) for dotnet builds"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/09ce525aa619c1b30bdf928ddaa0f5caba5bb937", "message": "merged"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/00253952388aab02a1c1243255a7dc4fd3c81670", "message": "Review Feedback"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/8a74beb262fa4a66820ab8fca737a52b5118b60b", "message": "Adding SourceLink Support (source code from GitHub).\n\nYou have to set the variable UseSourceLink to activate it.  Thus this change has no effect unless you opt in.\nAlso older C# compilers this will fail unless you generate portable PDBs (later C# compilers support MSPDB).\nThis may limit when you can turn this on."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/6cad981339c96127e6cf1c1d851b68740b9a2539", "message": "Merge pull request #1636 from vancem/ManagedGitUrlInFileVersion.8-13-17\n\nEnable CoreFX build to tag DLLs with GITHub URL"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/f858aef36be56bcb97300023641fd03bfb090550", "message": "Minor Review feedback\n\nSome characters used %XX escapes and did not need to.   Used unescaped form"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/a3f6b3504bff2c24199da3ad019a057c81129757", "message": "Enable CoreFX build to tag DLLs with GITHub URL\n\nIn PR #1606 we added logic so that the version resource had not just the GIT commit ID\nbut also the full Github URL.   This worked well for native code but it turns out that\nIt did not work for managed code.\n\nThis was mostly because for managed code the variables needed to be 'exported' explicitly to a *.props\nfile so that another version of MSBUILD would pick it up.   There was already a variable that had this\nbehavior called BuiltByString, and so this fix is to simply put the additional information for the GIT commit\nID into this variable (which would then be attached appropriately.\n\nWhile I was at it I change the syntax a bit to make it more friendly to maching parsing.   key-value pairs\nnow always begin with an @ and are separted by spaces (e.g.  @BuiltBy: vancem @SrcCode: http//github."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pjanotti": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/buildtools/commits/0bf81d868dd1b328d0b209cc77014d0a864f8432", "message": "Move OpenCommPort to api set module (#1766)\n\n* Move OpenCommPort to api set module\r\n\r\n* Remove remaining APIs from kernelbase"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/1efc926ce4cfc050fac483c8456f46ef5e291af5", "message": "move CheckTokenMembershipEx to kernel32.dll (#1620)\n\nNeed to fix https://github.com/dotnet/corefx/issues/22128 on dotnet/corefx"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/f0eed91e205d1b25ee5219ad856feeb2a3b2b3eb", "message": "preparing for serial ports in UAP (#1618)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/147501302", "body": "Let me check the other kernelbase entries in this file... ", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/147501302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/147504953", "body": "It seems that we can remove all others from kernelbase, I will do some tests before adding it to the change.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/147504953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/147507450", "body": "Yes, we can.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/147507450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/147510043", "body": "`OpenCommPort` does not exist on kernel32. We should avoid API sets in general but in this case there is no alternative since it is a new API that doesn't exist on downlevel.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/147510043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/147510172", "body": "The other entries for kernelbase are not being used at all.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/147510172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/147526059", "body": "This API is for UWP only, on Win7 we use kernel32!CreateFile.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/147526059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "alexperovich": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/buildtools/commits/710f26e09a21302f69419a6b3e6757dc9eaffc2b", "message": "Increase timeout in DownloadFromAzure task (#1747)"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73762472", "body": "@eatdrinksleepcode I'm working on a change to do just that. There was a raw xml format just it was excluded along with the formats that require xslt.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73762472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73774525", "body": "Fix in PR #62\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73774525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73789122", "body": "@eatdrinksleepcode I hesitate to suggest using a marker file, but you could touch the file when the test run passes and use it in in the Output attribute of the target\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73789122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73790141", "body": "@weshaggard Are there any other temporary file types I should add to this while I'm working on it?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73790141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73791514", "body": "Updated and squashed.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73791514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73815576", "body": "cc: @weshaggard \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73815576/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74339126", "body": "CC: @FiveTimesTheFun \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74339126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "BruceForstall": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/buildtools/commits/9bc085cef38e12857f93a94ba2c9fd1faef4052a", "message": "Introduce mechanism to allow specifying environment to set before running test (#1723)\n\n* Introduce mechanism to allow specifying environment to set before running test\r\n\r\nIf the msbuild property `PreExecutionTestScript` is set, it must be\r\na set of script commands that will be incorporated into the generated\r\nruntests script.\r\n\r\nFor example, this will be used to set JIT stress modes:\r\n```\r\nbuild-tests.cmd -Release -os:Windows_NT -buildArch:x86 -- /p:WithoutCategories=IgnoreForCI /p:PreExecutionTestScript=c:\\SetStressModes.bat\r\n```\r\n\r\n* Update comments"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "DrewScoggins": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/buildtools/commits/afc32a4d05771650b128a558f3bd0f50c544bfee", "message": "Merge pull request #1706 from DrewScoggins/DumplingPath\n\nPare down include lists for dump collection"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/5fb1a919f53e75139a71a5ff827e07dd42ba9bf8", "message": "Add paths for modules on MacOSX"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/8ce00c9c6ce9e51388161b2f3dd5412627041e3e", "message": "Pare down include lists for dump collection\n\nWe started by just collecting all of the SOs in the lib and usr/lib\ndirectories, but that proved to be too big.  This brings the list to\njust the files that we need.  This also turns off dump triaging as it is\ncurrently broken and blocking regular collection."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/7a801ce112b29a8ae96916d00674a994713ba80c", "message": "Fix space"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/8a0ebbcde362ab77805f3cb6e85bb759a5ad73ac", "message": "Fix headers"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/4b3f591a10c002d0ab060f11b1460296345019ed", "message": "Update links for build status\n\nThe links in the README.md file were out of date.  I have updated them\nto inlcude the proper links to the actual jobs that live in Jenkins."}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/c71f2aeb9b17b8fb1a771a6dba24015c0ef8ab2b", "message": "Merge pull request #1682 from DrewScoggins/UpdateDumplingIncludeList\n\nUpdate the include list for dumpling"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/eb01e3e98e680fbd5c4fc9fc8a61e140e40c258f", "message": "Update the include list for dumpling\n\nThis adds saving off the full runtime that we unpack as part of running\nthe tests as well as the system libs that live in lib and usr/lib."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "rartemev": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/buildtools/commits/7b687ead8b5e4222d411818210569bcdb47eda5d", "message": "Fixed GenerateDepsJson msbuild task"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "EgorBo": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/buildtools/commits/5c19d590d5317c9f3b9813e18787b27c3a7ebfac", "message": "Add Mono to TargetFrameworkMonikers (#1690)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "wtgodbe": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/buildtools/commits/72f324959ec9f71756e33dd979ba142b530ba135", "message": "Merge pull request #1691 from dotnet/FixPublishMech\n\nHandle overwriting blob feeds for edge cases"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/9c94fa8d97c9a40bdd3893026467bcc5ea577e82", "message": "Handle overwriting blob feeds for edge cases"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "am11": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/buildtools/commits/27913d0013c35a3e128baef5217a4debafb81b99", "message": "Avoid linefeed in /proc/self/coredump_filter (#1688)\n\nOn Alpine Linux, the default shell is ash. To build .NET Core, we\r\nexplicitly install bash.\r\n\r\nIf we run the following command:\r\n\r\n```sh\r\necho 0x3F > /proc/self/coredump_filter\r\n```\r\n\r\nin bash, it raises the exception:\r\n\r\n> echo: write error: Invalid argument\r\n\r\nwhile with ash, it works fine.\r\n\r\nProblem is that, when `echo` is run from `bash`, it adds a trailing\r\nlinefeed which kernel seems to reject.\r\n\r\nAdding `-n` avoids adding the linefeed.\r\n\r\nOriginal exception while building CoreRT:\r\n\r\n```sh\r\nchmod +x /corert/Tools/dotnetcli//dotnet\r\n/corert/bin/Linux.x64.Debug/ILCompiler.DependencyAnalysisFramework.Tests/RunTests.sh: line 67: echo: write error: Invalid argument\r\n/corert/Tools/dotnetcli//dotnet xunit.console.netcore.exe ILCompiler.DependencyAnalysisFramework.Tests.dll  -xml testResults.xml -notrait Benchmark=true -notrait category=nontests -notrait category=nonlinuxtests  -notrait category=OuterLoop -notrait category=failing\r\n```"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "shawnro": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/buildtools/commits/4a4c225ca82b08bb638b2b85beb930e5401f457e", "message": "Merge pull request #1674 from shawnro/delete-appveyor\n\nRemoving appveyor.yml"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/5bb2a2d98a94e6b6782c9a5fe39d4000cea47220", "message": "Removing appveyor.yml"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tarekgh": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/buildtools/commits/1f57d19b4a19c972d7e94050cd839a4b992f39fc", "message": "Fix race condition because of assembly name normalization (#1653)\n\n* Fix race condition because of assembly name normalization\r\n\r\nWe used to generate the normalized assembly name in the target GenerateResourcesSource and we override the resw name of the resource file there too. In the incremental build the target GenerateResourcesSource will get skipped but overriding the resw item name still be done as it is used outside the target in other places. This will cause the normalized name property not initialized but it is used in setting the resw name. and that will cause a race condition because many projects will try to access the exact same resw file name while building.\r\nThe fix is to move the assembly name normalization outside GenerateResourcesSource so we\u2019ll be sure we always initialize the normalized assembly name property.\r\n\r\n* Update the Target name\r\n\r\n* Make the task inherit from BuildTask"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/bbbede8fef122f43180b343ca93d1032904a6cb7", "message": "Allow generate resources with assembly name has dashes (#1642)\n\n* Allow generating resource with assembly names have dashes\r\n\r\nAs we generate cs code for accessing the embedded resources. The generated type will be named as FxResources.AsemblyName.SR. if the AssemblyName has characters not allowed in the namespace names (e.g. dashes), this will cause compilation errors. The fix here is we normalize the assembly name before we use it.\r\n\r\n* small delta"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/80b9df47e59bd25e592782e71cb6153afae1df0e", "message": "Pass the full parameters to the XUnit Discoverer (#1635)"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/5060643ca8ed630028400e21a5e07d678c4af224", "message": "Support passing Type to XUnit ConditionalFact/Theory (#1634)\n\n* Support passing Type to XUnit ConditionalFact/Theory\r\n\r\n[ConditionalFact(typeof(PlatformDetection), \"nameof(PlatformDetection.IsNonZeroLowerBoundArraySupported)\")]\r\n\r\n* Elimenate the type qualified name support"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/0739ca6f43e4e9cc2ab72a4941c6b39a9cd61d97", "message": "Enable XUnit conditional filtering uses other assemblies (#1629)\n\nConditional Fact and Theory in our xunit filtering is always used types from the test assembly that currently running. We are working on moving PlatformDetection code to CoreFx.Private.TestUtilities assembly as it is naturally fit there and avoid including the cs files in every test project need to use it. We have many tests using Conditional Fact/Theory which calls PlatformDetection methods. The way we apply this filtering is we create the PlatformDetection type from the running test assembly. After we move PlatformDetection to CoreFx.Private.TestUtilities, this mechanism will not work. To make it work, we adding the way to allow specify the assembly containing the type through providing the qualified type name which include the assembly name."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/76479717", "body": "@weshaggard \nWes, do I need to change the package version here too with my changes? \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/76479717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/76496714", "body": "Thanks all for your comments. I am going to merge the pull request \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/76496714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/76772197", "body": "@weshaggard \nWes, could you please have a quick look at this PR?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/76772197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77022738", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77022738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77418724", "body": "@weshaggard  could you have a look?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77418724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77456466", "body": "@weshaggard  do you want improve the comparison now or we do it as separate change?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77456466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77457412", "body": "@weshaggard although I don't think this will cause a problem now as we have consistent end of line marks which should work in TFS and git. but anyway I'll look at changing the comparisons. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77457412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77642320", "body": "@weshaggard please have a look when you have a chance. Thanks.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77642320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77875552", "body": "LGTM. I was planning to do this work but Wes is faster :-)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77875552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77891871", "body": "Thanks Wes for your comments. I have fixed all issues and I am going to merge the changes\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77891871/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25543608", "body": "will fix that\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25543608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25544028", "body": "Actually you caught some issue which ResourceSRPath should check for cs or vb. so I need to add extra line there\nbut in general I think this is the only file we need to support VB. in VB projects we may manually need to add compile item to the SR.vb (I am trying to not create more extra targets file for VB as we don't have many VB projects)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25544028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25544580", "body": "will fix that\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25544580/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25544740", "body": "Wow, this will require touching all SR files when we update the buildtool with this change. I'll fix the comment \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25544740/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25545768", "body": "yes we still keeping the part saying the file is read only. also I am displaying the exception message which also helpful \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25545768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25545991", "body": "here is what I have. please update/correct as you think:\n\n\"This is auto generated file. Please don't modify manually.\nThe file is generated as part of the build which takes the project resx resource file\nand generate this source code file.\nBy default the file Resources\\Strings.resx will be used but projects can customize\nthat by overriding the StringResourcesPath property group.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25545991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25546216", "body": "will do that\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25546216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25546399", "body": "I'll remove the DefaultTargets attribute and reverted back the version to 12.0\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25546399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25546629", "body": "Is there any guidelines for naming here? Skip make sense too but I am wondering if we have standard naming we are using  \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25546629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25546706", "body": "I'll call it SkipResourcesIncludesTarget as now the target we skip is called ResourcesIncludes\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25546706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25546803", "body": "ok. will use that\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25546803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25547969", "body": "ok fixed. thanks\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25547969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26000063", "body": "@weshaggard  Log.LogError didn't work at least when compiled on TFS side. I am not sure if we have Log.Error. when used Log.LogError I am still getting the behavior we have seen before that the build break with some other errors. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26000063/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26000070", "body": "@weshaggard maybe we can look at it together on Monday.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26000070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26623600", "body": "I'll fix the message.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26623600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26623661", "body": "I think you are right. I re-checked that and is not visible. I'll remove <Visible> element\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26623661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/27993676", "body": "are we sure msbuildprojectdirectory never have '\\'? I am asking because if we get a combination of '\\' and '/' will cause a problem I think\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/27993676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "benaadams": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/buildtools/commits/1b6a978ca635aa5cbc1a9e0664d7cc4a8f10fba5", "message": "Bump versions to non-preview"}, {"url": "https://api.github.com/repos/dotnet/buildtools/commits/f99e5ef88ac3e6b909676619a309147283f7c241", "message": "Remove deprecated PackageTargetFallback"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "KoditkarVedant": {"issues": [], "commits": [{"url": "https://api.github.com/repos/dotnet/buildtools/commits/7067de52ca0cb33c28db14df81d5119529e11754", "message": "Typos. (#1626)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pgavlin": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/1659", "title": "Add support for arch-specific `ActiveIssue`s.", "body": "This allows the user to disable a particular test when targeting a\r\nspecific platform without disabling the test for other platforms. We\r\nintend to use this in CoreCLR to disable tests that e.g. fail on x86 or\r\nARM but not on other platforms.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/50192907", "body": "This is handled by the changes in CoreFX.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/50192907/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "StephenBonikowsky": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/1627", "title": "WCF does not necessarily run tests on the same OS as it built on.", "body": "* In the case of our OSX and Linux tests, we build the projects on Windows and then in Helix run the tests on Linux or OSX.\r\n* We need to be able to override this property so it does the correct thing further down the line for when tests are run in Helix.\r\n* One specific issue this should fix...\r\nhttps://github.com/dotnet/buildtools/blob/c45406f85a56c903d02eab582db455afa98dce3d/src/Microsoft.DotNet.Build.Tasks/PackageFiles/tests.targets#L34\r\ncausing error...\r\n\r\n> 2017-08-08 00:31:43,688: INFO: proc(54): run_and_log_output: Output: chmod: cannot access '%RUNTIME_PATH%dotnet.exe': No such file or directory\r\n\r\nIn: https://mc.dot.net/#/product/components/master/source/official~2Fwcf~2Fmaster~2F/type/test~2Fscenario~2Fiishosted~2F/build/20170808.03/workItem/Binding.Custom.Tests/wilogs", "author_association": "MEMBER"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "AlexGhiondea": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/1488", "title": "Fix assembly info generation for VB projects.", "body": "/cc @joperezr  (you were right ;) )", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73996573", "body": "Note: This change should be merged only after @jhendrixMSFT change.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73996573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74335117", "body": "@FiveTimesTheFun thanks for pointing this out!\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74335117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74787940", "body": "I will rebase before I commit.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74787940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/comments/9709965", "body": "I think this fails to build because it cannot find the 1.0.25-prerelease version of the package in src\\package\\\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/comments/9709965/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "JeremyKuhne": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/1227", "title": "Add WarnAsError Logger", "body": "We want to allow hard failing the build if any warnings\r\nare raised. Starting simple- we can allow configuring for\r\nspecific warnings as we hit the need.\r\n\r\n@weshaggard @ericstj ", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/75422156", "body": "Good idea. I'll mull it over and perhaps make that change later. If the IDE supported it better it would be an absolute no brainer. Unfortunately it always breaks the wildcard into single item entries if you add/remove within the IDE...\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/75422156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/76332343", "body": "Going to update to wildcards.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/76332343/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/76457620", "body": "Ugh- I can't seem to figure out how to rebase correctly. Working on it.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/76457620/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/76461274", "body": "Whatever I did to my master is making this nearly impossible for a git newbie. I've gotten to the point where I'm better off recreating this from scratch.  I'll have to spend some more quality time experimenting with rebasing.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/76461274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77022743", "body": "@nguerrera PrepareForRunDependsOn sounds good.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77022743/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "joshfree": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62568327", "body": "LGTM; what testing did you do?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62568327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62817070", "body": "applied 67c2c561d33ca1b4eed869ab0b9072a9c16df9d9\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62817070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62819317", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62819317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "nguerrera": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62569337", "body": "Ran tests with OSS signing enabled locally.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62569337/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62607291", "body": "Thanks. I'll merge it in.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62607291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62983313", "body": "> Also that seems to suggest another problem. Why are we including immutable and metadata reader in this package? It seems they ought to be package dependencies.\n\nThey are package dependencies at design-time, no? At runtime, however, the buildtools need their dependencies and I don't think we want to probe around in different packages. Or am I missing something?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62983313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62991921", "body": "I already said looks good, but seems GitHub lost the commit comment somehow.\n\nAnyhow, once more: looks good to me. Ship it.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62991921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/63415826", "body": "Modifying individual projects is a non-starter IMHO. It's a pain to maintain. We need to make sure we aren't repeating things in every project because we are going to have a LOT of projects as we put all of .NET Core on here. (The output directory is that way now, but it shouldn't be IMHO.)\n\nRight now our VS and command line builds produce slightly different artifacts so the intermediate dirs. need to be distinct or else more incremental chaos. This is why I did it this way. So I preserve the separate root obj, but inject a per-project subdir.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/63415826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/64129344", "body": "@weshaggard :+1:  As you know, I favor the suggested approach over the current one very strongly. Are you working on it? If not, I'll grab this because it's basically a prerequisite for other things on my plate.\n\nI suggest we move to a more standard naming convention of .props for settings instead of .settings.targets. What do you think about that?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/64129344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/65876787", "body": ":+1:\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/65876787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67532400", "body": "OK. Closed. Thanks for handling this @weshaggard \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67532400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67676571", "body": "Looks good to me. Is there a reason why @akoeplinger's suggestion to use GetReferenceAssemblyPaths from msbuild wouldn't work straight away?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67676571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69659301", "body": "Looks good to me. \n\nIn the future, please format commit messages as described here: \nhttps://github.com/dotnet/corefx/wiki/Contributing#commits\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69659301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69793358", "body": "LGTM. I'm not aware of any issue with that.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69793358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/71285052", "body": "There's a typo in the first commit message : \"projecte\" if you care to rewrite it away.\n\nLGTM otherwise.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/71285052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/71938219", "body": "LGTM.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/71938219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/71953354", "body": "cc: @mellinoe @ericstj \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/71953354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/72141507", "body": "/cc: @davkean\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/72141507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/72142654", "body": "@davkean Yes. It does seem strange but it's a tiny workaround of little consequence to us in the meantime. :)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/72142654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/72144435", "body": "/cc @davkean\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/72144435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73394455", "body": "cc: @weshaggard @stephentoub \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73394455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73394530", "body": "@mmitche I assume this can be closed now that we have code coverage enabled by https://github.com/dotnet/corefx/pull/648. Correct?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73394530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73415547", "body": "@weshaggard Yes. On it.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/73415547/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/75481680", "body": "/cc @FiveTimesTheFun @weshaggard @akoeplinger \n\nI will send out a PR with workaround to close dotnet/corefx#950, but this tracks getting the core issue resolved in buildtools.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/75481680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/76316050", "body": "cc @jhendrixMSFT @weshaggard \n\nJoel, I'm assuming that the infrastructure can bump BuildValues.props to 00013 and then upload both xunit and builtdools on myget after this is merged.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/76316050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/76318161", "body": "Hold off on merging this. I'm hitting test failures in corefx when bumping all packages to latest due to missing Internal.Uri.dll. :(\n\nThis just proves that it is imperative that we always run against latest. We should be updating packages all the time and all of this version bumping should be automated! We desperately need a -\\* wildcard nuget feature as in Project K.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/76318161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/76471438", "body": "Thanks.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/76471438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/76471650", "body": "Thanks. LGTM.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/76471650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/76471724", "body": "Thanks. LGTM.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/76471724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77020622", "body": "@JeremyKuhne @akoeplinger /cc @weshaggard @tarekgh \n\nThis breaks open-source signing. I'm reverting it.\n\nmsbuild is evaluating the PrepareForRunDependsOn before this BeforeTarget. \n\nWhat I had originally, before CopyFilesToOutputDirectory was most correct for Microsoft's build targets, but didn't work for Mono. I could prepend to $(PrepareForRunDependsOn) instead, but I don't know if that will work for Mono...\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77020622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77044853", "body": "cc @tarekgh @weshaggard @jhendrixMSFT \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77044853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77048575", "body": "Fixed the issues with Internal.Uri and more.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77048575/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/78118518", "body": "LGTM. Thanks for doing this. :)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/78118518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22119771", "body": "+1. Let's not check in binaries. It won't scale.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22119771/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22119818", "body": "Can you comment that?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22119818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22135924", "body": "Note that these need to be rebased out, not deleted as a separate commit or else they'll be stuck in the history and every clone forever.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22135924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/23790932", "body": "Pardon my cmd/perl. My powershell is weak and perl is oh so good at regex replace. :)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/23790932/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/23826620", "body": "Unless I'm missing something, I like what I have here better. I don't see the point of that import, and even less the point of moving things around to serve it.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/23826620/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/33788256", "body": "Should this be .NETFramework,Version=v4.5 and net45? We aren't set up to actually use DNX to run. Even the DNXCore part above will change I believe.\n\n/cc @ericstj \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/33788256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/33793310", "body": "Interesting. It looks like me like Distinct picks the first match and not the last one. I assume DistinctBy would do the same. \n\nhttps://github.com/dotnet/corefx/blob/872bb70953bcfe0a47dcc6e9789fbd330e295bc3/src/System.Linq/src/System/Linq/Enumerable.cs#L924\n\nMind you, I suppose one could reverse the input beforehand.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/33793310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/34815935", "body": "I see '$(DesignTimeBuild)'=='true' checks in the common targets. Why is that not enough to use here? If it truly isn't, calling that out here in the comment would be helpful.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/34815935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/34816006", "body": "I would not qualify this on VS version. Shouldn't we simply stop doing this everywhere?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/34816006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/34818002", "body": "OK.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/34818002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/35114977", "body": "Did you verify that VS debugging of test projects still works? I suspect the {XunitTraitOptions} will be seen by VS in the start options and xunit won't like that.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/35114977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/35116685", "body": "It is not run through that target and I don't believe we can make it so with the simple mechanism we're using instead of test explorer integration, etc.\n\nIt was broken, but for other reasons. A big part of the last update was to get the debugging fixed. I really want to make sure we keep it that way. It's a huge pain when it breaks. I think as long as you change TestCommandLine in a way that will leave StartArguments without the placeholder, everything will work as before.\n\nSee tests.targets before 4bcb9b1, it took explicit care to make the VS start arguments not have the placeholder. Basically, I think we want to revert the placeholder to be done as before.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/35116685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/35259874", "body": "Ah, was about to ask how to detect host OS in msbuild, but that would be good enough for the common case of iterating on Windows.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/35259874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/35265765", "body": "Ugh, I'm having trouble testing that condition. When I build test projects with /p:OSGroup=Linux, it sets OS to Windows_NT (!?), and building with /p:OS=Linux fails outright (!?). \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/35265765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/35268208", "body": "I'm still confused about OS vs OSGroup, but OSGroup is the one that we seem to use now so updated PR using that.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/35268208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/35269124", "body": "Is it meant to indicate the OS of the build system or the OS targeted by the binaries being compiled? If the former, then it is the right one to use and I'm just confused. :)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/35269124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/35270117", "body": "OK. Fixed.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/35270117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/35270648", "body": "Oops. Fixed.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/35270648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/39883939", "body": "+1\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/39883939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/78407580", "body": "IIRC, we used to filter to namespace types only and add nested forwarders with special logic to replicate the csc behavior, which included private nested types of the destination. Then we decided to change it so that we only forward to types that are actually defined in the reference assembly. See https://github.com/dotnet/buildtools/pull/275. \n\nI did not study things, but I suspect we broke something in that move. This comment does seem out of date. I'd remove it.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/78407580/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/137319049", "body": "IIRC, this is informational, and the real bit lives in assemblyflags. Am I misremembering or did the compiler/runtime change?", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/137319049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22119818", "body": "Can you comment that?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22119818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22135924", "body": "Note that these need to be rebased out, not deleted as a separate commit or else they'll be stuck in the history and every clone forever.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22135924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/23790932", "body": "Pardon my cmd/perl. My powershell is weak and perl is oh so good at regex replace. :)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/23790932/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/23826620", "body": "Unless I'm missing something, I like what I have here better. I don't see the point of that import, and even less the point of moving things around to serve it.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/23826620/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "FiveTimesTheFun": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62588548", "body": "I've verified this by locally creating a build tools package with your PR, referencing that from CoreFX, turning on OSS signing for Immutable and running the build.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62588548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62606751", "body": ":shipit: \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62606751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62669202", "body": "Thanks Matt looks good!\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62669202/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62811824", "body": "Looks good @joshfree and @PatrickMcDonald\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62811824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62982553", "body": "@davkean We are restoring packages during the build.  The issue here is that although the immutable collections package is restored to src\\packages\\System.Col....., and the Microsoft.DotNet.Build.Tasks project references that assembly, because the assembly with the same identity is also GACd, msbuild is not copying that file to the output directory.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62982553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62982638", "body": "Also that seems to suggest another problem.  Why are we including immutable and metadata reader in this package?  It seems they ought to be package dependencies.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62982638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62982813", "body": "@davkean is unsure that the behavior you're seeing is expected.  He expected that the GAC would be the last location we'd look, after the hint path, and that we would always copy local if we picked it up from the hint path rather than the GAC.  He'd like to see msbuild.log files for before and after to understand.\n\nEdit: He's also a lot quicker than I am and already commented about this.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62982813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62983839", "body": "> They are package dependencies at design-time, no? At runtime, however, the buildtools need their dependencies and I don't think we want to probe around in different packages. Or am I missing something?\n\nThank you for jogging my memory, that was it, so that our minimal build bootstrapper can simply copy everything from the build tools package to the tools folder (to remove policy from the build bootstrapper).\n\nIt seems this could also be done with some more work in the build tools if the build tools copied its own package dependencies to the tools folder the same way that \"tests.targets\" locates its package dependency in the package restore folder.\n\nSo in other words, seems like a possible low-priority opportunistic change that I probably wouldn't do yet.  Thoughts?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62983839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62991975", "body": "Taking this through :)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62991975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/63395243", "body": "Thanks @nguerrera.  I've had more time to look at this and test, and it appears you're right, this change does not appear necessary.\n\nIt makes sense that it wouldn't looking at the contents of CSharp.targets and Common.targets (CSharp just defining the core build tasks and then importing Common), since the DefineConstants property is used inside a task, and MSBuild evaluates all properties before running any tasks.\n\nIt was during my testing that I believed this was necessary, as I was bringing up the changes to corefx at the same time.  I've tested the corefx PR without this PR and it's building and OSS signing correctly, so I'm going to abandon this PR and take the other one in.\n\nThanks!\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/63395243/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/63408802", "body": "Thanks Nick :)  I'd like to hear your motivations for the fix in this way, though.  It seems like there are a couple other options as well.\n\nEither\n\nModify the individual csproj files to construct their intermediate path from the base path\n\nOr\n\nRemove forwarding BaseIntermediateOutputPath to the assembly builds in binaries.targets, removing the necessity for TreatAsLocalProperty here (? is that enough?)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/63408802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/63409636", "body": "Looks good - thanks @terrajobst \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/63409636/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/63531269", "body": "Sounds good, thanks @nguerrera and @krwq.  Testing this with https://github.com/dotnet/corefx/pull/81 now.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/63531269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/63554831", "body": "Testing looks good :)  Taking this through as Microsoft.DotNet.BuildTools 1.0.13-prerelease\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/63554831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/63908221", "body": "Looks good - thanks Sridhar :)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/63908221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/63913540", "body": "Looks good to me :)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/63913540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/64483865", "body": "Hi Krzysztof - looks good to me, thank you.  We should be very intentional about what our developer interface to the build system is - what properties we expose, etc.  Lets document this on the developer wiki.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/64483865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/65317297", "body": "Thanks @krwq\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/65317297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/65328700", "body": "Testing complete :) LGTanybody?  After acceptance here I'll make the same change in dotnet/corefx.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/65328700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/65329964", "body": "Thanks @ellismg .  I've merged this in and added the same changes to my pr on corefx at https://github.com/dotnet/corefx/pull/174\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/65329964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/65874096", "body": "Thanks @krwq - it looks good to me, and I gave you a buddy build both for buildtools and for corefx using these build tools.  Thanks!\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/65874096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/65877056", "body": "Thanks buddies. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/65877056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67239192", "body": "Microsoft.DotNet.TestHost 1.0.1-prerelease has a snapped version of our fx implementation assemblies, coreclr, corerun, and a ported xunit.\n\nTo do:\nUpdate this to use our real fx nuget packages with a tool to identify assets for an execution environment\nPort changes to xunit upstream\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67239192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67239551", "body": "@davkean I promise to do the right thing next and pull from our actual nuget packages\n@nguerrera Thanks for the help - you're my buddy\n@krwq Thank you for your help\n@weshaggard You were tracking this - corefx PR coming next\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67239551/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67243995", "body": "I spoke with @davkean in person - they are included in Microsoft.DotNet.TestHost.1.0.1-prerelease.  @krwq - I modified that package to include the framework libraries for this verison, future versions will only include the runtime as your nuspec does.  The next thing we need to do is fix this so it's properly grabbing the framework libraries from the framework packages.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67243995/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67264791", "body": "From @weshaggard\n\n> This looks like it is running all the tests in the same process, is there a reason for that? Also we should\n> really consider isolated all the test output directories so we don't end up with conflicts. Please file an\n> issue for that.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67264791/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67264827", "body": "From @weshaggard \n\n> We should gather the list of test assemblies from the test projects below when you call GetTargetPath. That will be more reliable and prevent false positives with other assemblies that have test in their name.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67264827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67265191", "body": "Hi @weshaggard , I addressed some feedback and filed an issue for others.  As soon as this goes through I'll upload the package to MyGet and send out the corefx pr.\n\nThanks,\nMatt\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67265191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67266348", "body": "Thanks @weshaggard  - this is uploaded as Microsoft.DotNet.BuildTools-1.0.16-prerelease\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67266348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67716809", "body": "Thanks @weshaggard :)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67716809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67888069", "body": "LGTM thanks!  Will wait to see output of AppVeyor obviously...\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67888069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67895460", "body": "Looks good - thanks @terrajobst \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67895460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/68972920", "body": "This PR goes with https://github.com/dotnet/corefx/pull/358\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/68972920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69107691", "body": "Thanks @Priya91 - I'm a bit reluctant to recommend this, I'd like to keep the \"API\" to the build (the available options/properties) as small as possible.  I imagine your scenario is that you're just modifying one library, and want to iteratively run tests for just that library?  Could this be achieved by reusing the xunit traits infrastructure that @krwq plumbed through?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69107691/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69267988", "body": "Thanks @weshaggard - I updated based on your feedback.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69267988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69419027", "body": "Thanks @mmitche - will look for the consumption in corefx.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69419027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69695684", "body": "Jenkins is still pending (appears down) but AppVeyor passes, so bringing this in.  Thanks @weshaggard .\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69695684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69696890", "body": "@dotnet-bot okay to test\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69696890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69697319", "body": "LGTM - thank you.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69697319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69822496", "body": "Sorry @mmitche - fixed in https://github.com/dotnet/buildtools/pull/49\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69822496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69822891", "body": "Thanks, in.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69822891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69823939", "body": "Thanks @mmitche - your changes LGTM, except that they remove the quotes surrounding the traits.  Do we / could we have any traits with a space?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69823939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69826765", "body": "Sounds good - lgtm, thank you.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69826765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69832126", "body": "@weshaggard https://github.com/dotnet/buildtools/pull/40 should address this issus, yes?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69832126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/70013000", "body": "Hi @jhendrixMSFT , I'm sorry it looks like this does conflict with my change.  Since 0db3add1d605df33ca4e0ca929062c84ef26fb4b we no longer used  $(BaseOutputPathWithConfig), but instead $(TestWorkingDir) which gets set in dir.props like this:\n\n```\n<PropertyGroup>\n  <ProjectDir>$(MSBuildThisFileDirectory)</ProjectDir>\n  <SourceDir>$(ProjectDir)src\\</SourceDir>\n  <BinDir>$(ProjectDir)bin\\</BinDir>\n  <ToolsDir>$(BinDir)tools\\</ToolsDir>\n  <TestWorkingDir>$(BinDir)tests\\</TestWorkingDir>\n  <PackagesDir>$(SourceDir)packages\\</PackagesDir>\n</PropertyGroup>\n```\n\nHere's the conflict:\n\n```\n<<<<<<< HEAD\n  <TestAssemblies Include=\"$(TestWorkingDir)*.Tests\\**\\*.Tests.dll\" Exclude=\"@(SkipTestAssemblies)\" />\n  <TestDirectories Include=\"@(TestAssemblies -> '%(RootDir)%(Directory)')\" KeepDuplicates=\"false\" />\n=======\n  <AllTestAssemblies Include=\"$(OutDir)*Tests\\*Tests.dll\" />\n  <AllTestAssembliesWithParent Include=\"@(AllTestAssemblies)\">\n    <ParentDir>$([System.IO.Path]::GetDirectoryName(%(AllTestAssemblies.Identity)))</ParentDir>\n  </AllTestAssembliesWithParent>\n  <TestDirectories Include=\"@(AllTestAssembliesWithParent -> '%(ParentDir)')\" Exclude=\"@(_SkipTestAssemblies -> '$(OutDir)%(Identity)')\" />\n>>>>>>> 0faaa202d1a2cb524e580c1a9f29955c50126ff6\n```\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/70013000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/70721854", "body": "@weshaggard  - the sources and nuspec are in https://github.com/FiveTimesTheFun/xunit/tree/netcore/src - I want to bring that upstream to xunit.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/70721854/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74175240", "body": "Thanks @jhendrixMSFT , looks good to me.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74175240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74335190", "body": "Thank you lgtm.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74335190/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74345067", "body": "Looks good to me too... thanks Alex :)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74345067/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/76471566", "body": "Thanks Matt LGTM.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/76471566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77268192", "body": "Thank you - LGTM too.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/77268192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22121698", "body": "Agree - I'm also using these libraries in my forthcoming test deployment change.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22121698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22121795", "body": "For consistency we should use the same header as the existing files (which is the same as we're using in corefx)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22121795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22619544", "body": "It was necessary because although multiple package sources were specified, on my machine it was not searching all of them.  From the docs (http://docs.nuget.org/docs/reference/nuget-config-settings) \"(Aggregate source)\" is a special value that means every specified package source is active.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22619544/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22664160", "body": "Thanks, will do.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22664160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22664319", "body": "The directories are the name of the project - let me double check the Exclude logic here works since I removed those skipped tests to port them. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22664319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22664885", "body": "Thanks, I'll update the PR with the build number.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22664885/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25544279", "body": "I also get UnauthorizedAccessException when a handle is opened by someone else with a restrictive sharing mode - I'd change the message to say it may be read only.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25544279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25544460", "body": "Don't think a targets file should have a DefaultTargets attribute.  Also is there a reason to change ToolsVersion?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25544460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25544829", "body": "I see you just ported it from corefx\\src\\dir.targets but it's the only msbuild property named Exclude\\* I could find to suppress a target.  The rest are called Skip\\* (SkipBuildPackages, SkipSigning, SkipTests).  How about \"SkipGenerateResources\"? \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25544829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/20330376", "body": "Should this be \"Always\"?\nhttp://msdn.microsoft.com/en-us/library/bb629388.aspx\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/20330376/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/21936034", "body": "Pardon, thank you, I was having trouble with the myget website and bumped the version number.  1.0.1-prerelease is correct.  I can try and put this in a common location but would need extra work, and this should go away soon when I depend on the actual packages instead of this package.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/21936034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/21936155", "body": "It's duplicated in the same way that the path to the package is duplicated in the corefx repository between the packages.config dependencies and csproj reference HintPaths right now.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/21936155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/21941853", "body": "I get everything in the output directory that GetTargetPath gives me:\n\n<_TestAssets Include=\"%(_TestTargetPath.RootDir)%(_TestTargetPath.Directory)_._\" />\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/21941853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/21941861", "body": "Will do.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/21941861/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/21941872", "body": "Will do.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/21941872/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/21941954", "body": "The reasons are for time, and parity with what we do today.  I'll include this in the detail of the issue to move us to using our proper nuget fx packages.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/21941954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22121698", "body": "Agree - I'm also using these libraries in my forthcoming test deployment change.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22121698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22121795", "body": "For consistency we should use the same header as the existing files (which is the same as we're using in corefx)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22121795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22619544", "body": "It was necessary because although multiple package sources were specified, on my machine it was not searching all of them.  From the docs (http://docs.nuget.org/docs/reference/nuget-config-settings) \"(Aggregate source)\" is a special value that means every specified package source is active.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22619544/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22664160", "body": "Thanks, will do.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22664160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22664319", "body": "The directories are the name of the project - let me double check the Exclude logic here works since I removed those skipped tests to port them. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22664319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22664885", "body": "Thanks, I'll update the PR with the build number.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22664885/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25544279", "body": "I also get UnauthorizedAccessException when a handle is opened by someone else with a restrictive sharing mode - I'd change the message to say it may be read only.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25544279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25544460", "body": "Don't think a targets file should have a DefaultTargets attribute.  Also is there a reason to change ToolsVersion?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25544460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25544829", "body": "I see you just ported it from corefx\\src\\dir.targets but it's the only msbuild property named Exclude\\* I could find to suppress a target.  The rest are called Skip\\* (SkipBuildPackages, SkipSigning, SkipTests).  How about \"SkipGenerateResources\"? \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/25544829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/41296316", "body": "I believe you need to lock on consoleLock to prevent this output from being intertwined with other messages or when the console colors are changed for other messages.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/41296316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/41296395", "body": "consoleLock\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/41296395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/41782050", "body": "Hi Wes, I saw you found where this is set in https://github.com/dotnet/corefx/pull/3762#discussion-diff-41768313R45.\n\nI put the definition of NuProjDir there following the pattern of PackagesDir being set in the corefx repo and consumed in the buildtools repo.  Since NuProjDir depends on PackagesDir and NuProjVersion both of which we know in buildtools, I could move the definition of NuProjDir here, and agree that would be better.  I'll update both pull requests with that change.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/41782050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/41784085", "body": "Hi Wes, do you mean the NuProj binary and targets should be embedded in this package, or the dependency should be implicit and the consumers responsible for adding it?  What's your thinking here?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/41784085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "terrajobst": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62653851", "body": "I like the change, except for the FWLink.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62653851/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62653863", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62653863/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/64097295", "body": ":+1: \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/64097295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/64097493", "body": "Thanks for submitting the PR. It was partially addressed by another PR (#17). I've fixed the incorrect link to corefx repo with 439fbf4d2bb1b01646748d517d0af674f5657889.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/64097493/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/64097535", "body": "Looks good to me.\n\n@FiveTimesTheFun can you take a look as well?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/64097535/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/64097569", "body": "Good catch! The change looks good to me.\n\n@Priya91 / @FiveTimesTheFun, can you take a look?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/64097569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/64097628", "body": "That seems like a bug.\n\n@Priya91 / @FiveTimesTheFun what are your thoughts on this? Could it be that we're just copying files? Normally, any build outputs are automatically added to the clean file.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/64097628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67746267", "body": "They who can read are clearly at an advantage ;-)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67746267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/68109895", "body": "LGTM. We should probably fix this in [corefx](https://github.com/dotnet/corefx/blob/4274fe618510181cebaab62fbb547c9f2ebf8aca/build.proj#L41) as well.\n\nOne question: did you do a search for `&quot;`? Not sure these are the only places.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/68109895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/68109953", "body": "Good addition. LGTM.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/68109953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/68123621", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/68123621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69686845", "body": "Public MSBuild keys off everything of `OutDir`. So if we use other variables we should probably base them on the value passed in for `OutDir`.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69686845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69686939", "body": "Works for me. LGTM.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69686939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/70390714", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/70390714/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/23083569", "body": "I still don't understand why we need this. I've seen this in other targets as well.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/23083569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/23129654", "body": "I see, that makes sense.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/23129654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "OWNER"}]}, "jeremymeng": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62654425", "body": "What's the recommended way to build in command-line if I only have Visual Studio vNext installed on my machine, and don't want Visual Studio 2013 installed SxS?  Currently I am installing Microsoft.Build.Tools from http://www.microsoft.com/en-us/download/details.aspx?id=40760.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62654425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "davkean": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62981534", "body": "I haven't looked at our NuGet int in this repro, but I'm trying to understand how you would run into this. MSBuild will only pick up the one in the GAC, if and only if, the one in the hint path can't be found. @FiveTimesTheFun shouldn't we be restoring packages before build?\n\nWe should probably remove {GAC} from search paths anyway so this would have failed the build.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62981534/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62984366", "body": "@nguerrera Yep, you are right and @FiveTimesTheFun and I had discussed this. \n\nThe rest of my thread is around the GAC behavior:\n\nI wanted to chase this down because it's a more general issue around NuGet packages. @JeffHandley and I discussed this, but I may have mislead him around MSBuild behavior. \n\nIn this case, MSBuild finds the file in the package location, but then does a GAC lookup to trigger determine whether CopyLocal is turned on or off. If it's already in the GAC, then they don't copy it. This is questionable behavior, not the original design and looks like it was done to fix a bug they ran into back in VS 2005. We should definitely change NuGet to make sure it always sets this bit. I believe @JeffHandley already has a bug around this.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62984366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62987985", "body": "That's fine - check it in, it doesn't harm anything,.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/62987985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67241111", "body": "I don't understand how this works - Microsoft.DotNet.TestHost does not contain enough to run tests. How does, for example, System.Runtime fa\u00e7ade get picked up?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67241111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/70355572", "body": "Looks good. This was a hack until we plumbed these through another way anyway.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/70355572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/72142329", "body": "LGTM, but I'm going to raise this with MSBuild team, this seems broken behavior.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/72142329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/72144649", "body": "LGTM.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/72144649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/21935830", "body": "Below the nuspec has a dependency on 1.0.1-prerelease and here you depend on 1.0.0-prerelease? Why do we hard code the version? Shouldn't this depend on what we dependency we include the NuSpec?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/21935830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22116091", "body": "I think we should make a package out of these instead of checking in the binaries.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22116091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22116163", "body": "I know this is temporary (and you didn't write the code), but can we catch a Directory not exists here? This is going to fail the build on a machine without VS.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22116163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22116419", "body": "Where does PackagesConfigFile actually get set?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22116419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22116497", "body": "Yeah, this is a point-in-time hack. :) We're currently consuming an internal prototype - we've already got a workitem tracking where this task doesn't even do this.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22116497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22116514", "body": "But you do bring up a good point, Wes, on non-Windows machines how do we resolve portable?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22116514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22117897", "body": "Yep, our aim isn't to develop an end-to-end solution here yet - so we should do something targeted, this work is in flux from another team.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/22117897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26623502", "body": "<Visible> is not going to work. The visual tree is calculated statically at project load, you cannot control the visibility after that.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26623502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26623502", "body": "<Visible> is not going to work. The visual tree is calculated statically at project load, you cannot control the visibility after that.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/26623502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "jeffhandley": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/63105240", "body": "Cool. We also fixed it on the NuGet side (will be in 3.0). NuGet was already setting CopyLocal=true on the reference, **_but**_ project systems were often seeing that the _default_ value of CopyLocal was true and that wasn't triggering the property changed handler to cause it to get forced into the project file.  So NuGet will start doing: CopyLocal = false; CopyLocal = true; which will force it to get burned in.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/63105240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "krwq": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/63519751", "body": "Thanks Nick! His diff fixes problem with resources in corefx. When you build on not cleaned repo you get resources from the last built binary instead of the right resources. This can be fixed either this way or by changing the way we embed resources. I believe this is better since it will simplify any changes to build in the future.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/63519751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/65121871", "body": "https://github.com/dotnet/buildtools/wiki/Build-properties\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/65121871/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/65315814", "body": "Looks good - couldn't see anything suspicious. I assume that you tested and it works.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/65315814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/65876926", "body": "Looks good, thanks!\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/65876926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67242640", "body": "Don't we have a nuget package for System.Runtime?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67242640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67242840", "body": "I think the facades should come with the nuget package although I can update TestHost as a workaround\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67242840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67256667", "body": "I agree, although the only other solution I can think of is either checking if we are in /test/ subdirectory or adding a property in csproj.\n\nWe could potentially try to run tests on every single assembly too :)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67256667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67262305", "body": "I'm not sure what part of that PR you are referring to\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/67262305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "nslottow": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/63679955", "body": "Thanks Gordon! I was about to make a similar pull request, but then I saw yours.  Since this is only a two-line change, would you mind squashing these changes into a single commit?  Also, it looks like the signing documentation has been moved to the corefx wiki here: https://github.com/dotnet/corefx/wiki/Strong%20Naming\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/63679955/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Priya91": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69090581", "body": "@FiveTimesTheFun : Please review.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69090581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69114683", "body": "@weshaggard, @FiveTimesTheFun , @mellinoe  : Yes, creating a runtests.cmd seems like a good idea, instead of modifying build.cmd. \nBut i dont need another target to run a single assembly tests, coz only the input is changing. So i'll change this PR to expect Test assembly inputs, and run only tests from those assemblies. Sounds good?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69114683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69673401", "body": "Creating a new PR for this. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69673401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69685013", "body": "build.cmd /p:IncludeTestAssemblies=\"Microsoft.Win32.Registry.Tests\"\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69685013/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69797512", "body": "If we need to have a RunTests.cmd, this is what is expected:\n1. Build all product assemblies\n2. Build just the test assembly specified\n3. RunTest\n\nThis is the same with the current build.cmd, and here only the input to build.cmd is changing, the runtests.cmd will have all the functionality equivalent to build, getting the correct msbuild version, downloading buildtools, verifying packages, etc.. \n\nSo from what i see, the runtests.cmd will just be a wrapper over build.cmd, \n1. Runtests \"Assembly1\" \"Assembly2\"\n2. In Runtests.cmd, parse the input and call build.cmd /p:TestToRun=\"Assembly1;Assembly2\"\n\nBut this change is on the corefx repo, in test.targets from buildtools, this is all is needed to filter out the tests needed to run.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69797512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/27418711", "body": "This excludes tests meant only for linux and mac to not be run on windows. Since for now, the build script for linux and mac is not up, i dunno what are the variables that will be used to condition the platform. Once that support is up, i will condition this, but for now, this script is run only on windows.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/27418711/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "dotnet-bot": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69695124", "body": "Can one of the admins approve this PR test or whitelist this user? ('@dotnet-bot add to whitelist' to whitelist, '@dotnet-bot okay to test' to accept for PR, '@dotnet-bot test this please' to retest.  Case sensitive).\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69695124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69695282", "body": "Can one of the admins approve this PR test or whitelist this user? ('@dotnet-bot add to whitelist' to whitelist, '@dotnet-bot okay to test' to accept for PR, '@dotnet-bot test this please' to retest.  Case sensitive).\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69695282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69695368", "body": "Can one of the admins approve this PR test or whitelist this user? ('@dotnet-bot add to whitelist' to whitelist, '@dotnet-bot okay to test' to accept for PR, '@dotnet-bot test this please' to retest.  Case sensitive).\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/69695368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "dsplaisted": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/70344341", "body": "@mmitche Is your comment directed at me or at one of the dotnet bots? :-)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/70344341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/40158168", "body": "> native\\xunit.console.netcore.exe\n\n@ericstj I tried this, but it didn't work.  The file gets listed in project.lock.json as expected, but the ResolveNuGetPackageAssets task doesn't deploy anything from a native folder that's not specific to a runtime.  The logic is in [GetCopyLocalItems](https://github.com/dotnet/roslyn-internal/blob/275671ee97283bbff71b59e173ed9319ac415b83/Closed/MSBuildNuGet/Tasks/ResolveNuGetPackageAssets.cs#L234).\n\nI'm not sure a fix for this would go entirely in the task, either.  You'd need to define what happens when you have a native folder that's specific to a runtime a runtime-agnostic one.  Should you take all files from both (preferring the runtime-specific ones when there is the same file in both places), or should the existence of a runtime-specific native folder mean the runtime-agnostic folder isn't used at all?  That type of decision seems like maybe it should be part of NuGet instead of the ResolveNuGetPackageAssets task.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/40158168/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/40158641", "body": "> This can be removed.\n\n@ericstj What makes you say this?  When I remove this reference from project.json, I get build errors.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/40158641/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/40380541", "body": "After some investigation, it looks like the bug is with the NuGet restore command, not the ResolveNuGetPackageAssets task.  I've filed a bug (NuGet/Home#1454) and sent a PR (NuGet/NuGet3#132) to fix it.\n\nIn the meantime we need a solution to deploy the xUnit .NET Core Console runner for MSBuild.  Can we go ahead and merge this PR to unblock us?  I think this is the cleanest solution until the NuGet bug is fixed.  NuGet v3 has improved support for .props and .targets files and no longer needs to modify your project files to include them.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/40380541/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/40382833", "body": "@weshaggard We've added *.nuget.props and *.nuget.targets to our .gitignore.  Does that address your concerns?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/40382833/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/40392075", "body": "@ericstj The aspnetcore50 moniker is currently still in use in [tests.targets](https://github.com/dotnet/buildtools/blob/65d93460c83bdcabfc1c0e53ff74f1f344cafa47/src/Microsoft.DotNet.Build.Tasks/Targets/tests.targets#L47)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/40392075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "jthelin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74216204", "body": "If your build is running on a remote build server somewhere in the cloud, you will often see the contents of the build log (for example Jenkins-CI web page) without opening the log file directly. \n\nIf [or more likely when!] you have to log in to the build server to diagnose a tricky build failure, it is very useful to be able to quickly find that log file and associated build artifacts on disk.\n\nThis is especially true if your build server handles multiple build definitions from multiple projects, all with very similar but subtly different directory path locations, like our internal tfs servers currently do.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74216204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74216463", "body": "And the \"only defined once\" bit is quite useful too ;)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74216463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74283084", "body": "Yes, seeing the full exact command line that is being executed makes things so much easier too!\n\nEquivalent change submitted to fxcore as well, as you suggested: https://github.com/dotnet/corefx/pull/762\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/issues/comments/74283084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "leemgs": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/56663092", "body": "Yes. In order to handle `/etc/os-release` and `/etc/lsb-release` used as a standard file in the Linux distributions, we may use cat `file | grep` more than `grep`.  It's is portable to aware popular Linux-based most distributions. Could you tell us if you have a better approach? \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/56663092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "davidfowl": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/28483441", "body": "You can remove the closure and just put the top level deps now\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/28483441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/28484011", "body": "Not sure you want to tool that but sure :smile: \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/28484011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/47259518", "body": "It's not needed ever. The dotnet CLI is using a CoreCLR based DNX so mono settings don't apply.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/47259518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "jaredpar": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/152370466", "body": "Private variables should be prefixed with `_`", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/152370466/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/153649179", "body": "Nit: indentation is one space off here. ", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/153649179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/156124092", "body": "Can be static", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/156124092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/156124841", "body": "High will cause this to show up on every single invocation of MSBuild, including minimal (IIRC). ", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/156124841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/156124933", "body": "Is empty string valid here? ", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/156124933/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/156125121", "body": "If `null` is a valid value consider making `subPath` an optional parameter. ", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/156125121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/156247318", "body": "What coding guidelines are in use in htis repo? Is it tied to corefx? ", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/156247318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/156248273", "body": "Private const fields should be PascalCased", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/156248273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "jasonmalinowski": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/36544302", "body": "For the record, I have no better recommendation. :smile:\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/36544302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "adityamandaleeka": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/68337361", "body": "@ellismg recommended putting the core dump logic here. I'm not too familiar with this codebase, but it seems like this is a good place to set up dump generation because it will be enabled only for the shell that this script runs in (which is pretty close to the minimum window we need it for).\n\nDo you have another place in mind that would be more suitable?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/68337361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/68441651", "body": "> Also as far as I can tell we are only doing the dumps on unix right now are there plans to add similar dump capturing on windows?\n\nDumps on Windows have been enabled via a registry change in the Server 2012 CI image (@mmitche did this recently).\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/68441651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "Pilchie": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/36473127", "body": "I'm not aware of detection.  +@jaredpar\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/36473127/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "agocke": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/35812802", "body": "@weshaggard Yes, I mentioned in the PR -- xbuild doesn't support metadata references inside the metadata declarations on items, so all those %(Identity) references cause NREs in xbuild.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/35812802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/106532222", "body": "@weshaggard Nope, we currently use two packages. I'm not sure we ever want to bundle into a single package. I'll be porting the compiler server to work on .NET Core, at which point the performance difference should be eliminated. At that point, I think it would make sense for most people to be using the .NET Core compiler everywhere.\r\n\r\nBundling the desktop facades seems a waste of space and bandwidth for very little gain. Certainly the old package will still be available if you need specific functionality we haven't ported, but even the capability difference will decrease over time.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/106532222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "justinvp": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/76891958", "body": "This should be named `SkipOnTargetFrameworkAttribute` (with the Attribute suffix).\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/76891958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/76892957", "body": "This should be plural because its a Flags enum.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/76892957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/76893587", "body": "`PlatformID` really should be plural as well, to follow the design guidelines. Then it wouldn't conflict with `System.PlatformID`.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/76893587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/76893686", "body": "https://msdn.microsoft.com/en-us/library/ms229040(v=vs.110).aspx\n\n> \u2713 DO use a plural type name for an enumeration with bit fields as values, also called flags enum.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/76893686/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/76915910", "body": "Note: If the ctor arg is `Xunit.PlatformID`, this cast will still work.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/76915910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/76915914", "body": "Note: If the ctor arg is `Xunit.PlatformID`, this cast will still work.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/76915914/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/159941958", "body": "Nit: Could be shortened to:\r\n\r\n```c#\r\ncase \"System.ObsoleteAttribute\":\r\n    return c.Arguments.OfType<IMetadataConstant>().FirstOrDefault()?.Value is string argValue &&\r\n        argValue == \"Types with embedded references are not supported in this version of your compiler.\";\r\n```", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/159941958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/159941977", "body": "Nit: Indentation of this `}` looks off.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/159941977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "tijoytom": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/123108886", "body": "Are you sure you want to do this of every test ? Ideally  this need to be done after the package is pulled from ILC . We need this happen only once , buildSharedAssemblies can take 2 - 4  minutes depending on the machine.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/123108886/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/123109021", "body": "Also remove the verbose logging , it will mess up the console output ", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/123109021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "iamjasonp": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/58977697", "body": "Question only: is this necessarily `== 2`, or can this condition be `>= 2` ? \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/58977697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "sokket": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/58275406", "body": "Do we need one for the Unix test directory as well?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/58275406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/70537791", "body": "Is this the same for nano server?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/70537791/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "AlekseyTs": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/27356234", "body": "@weshaggard I am not sure what you mean by saying: \"Any VB projects should choose to be semi-colon or comma delimited as I think either would still work.\" VB compiler doesn't accept semi-colon delimited defines. Replacing semi-colons with commas is error prone because semi-colons could be within values. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/27356234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/27356275", "body": "I do not believe that doing this properly is as simple as you think. Not worth the trouble in my opinion. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/27356275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/27356464", "body": "It looks like C# compiler handles comma separated defines, I'll switch to using commas for both languages instead. \n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/27356464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/27407977", "body": "I tested this change in corefx repository in VS2013 and VS2015 command prompt. There were no build failures.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/27407977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "karelz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/87539508", "body": "nit: It is testResults.xml\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/87539508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "brianrob": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/63786740", "body": "How do you make sure that you get the same CLI version as what we built against?  This will be required so that the right version of the shared framework is installed.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/63786740/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/63788164", "body": "Ah, I didn't see that as it's not part of the PR.  That's clever, but super brittle, as it isn't versioned with the nuget package.  We could update the CLI version today and it would break this invariant.\n\nWe will need to figure out how to keep this data along with the package itself.  Otherwise, this is bound to break and the most inopportune time.\n\nGiven that this is already in, don't block on this, but I would strongly recommend fixing this soon.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/63788164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/99901458", "body": "Yes, you do need to have the native dependencies present next to TraceEvent to control ETW.", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/99901458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "noahfalk": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/61166413", "body": "This last one should be conditional based on PackPrefixedSymbolPackage right? Perhaps even better, the NugetPack task could generate this item list for you rather than having the targets file do a parallel construction of the naming conventions. A typical place for bugs is when parallel computations of the same result get out of sync.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/61166413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "emgarten": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/67541223", "body": "@chcosta take a look at _PackageArchiveReader_ and _NuspecReader_ from _NuGet.Packaging_\n\nNuGet does some parsing on filenames also, but it is imperfect and should only be used to rule out obvious non-matches. For example packageA.1.2.3 could be either: packageA.1 version: 2.3 or packageA version: 1.2.3. The only way to know for sure is to read the nuspec.\n\nYou can see the NuGet code for this here: https://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Protocol.Core.v3/Utility/LocalFolderUtility.cs#L264\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/67541223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "AlfredoMS": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/28189985", "body": "adding missing {}\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/28189985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/28285616", "body": "done\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/28285616/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/28477661", "body": "I know this was already merged, but _TestCopyLocalFileNames seems to be unused\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/28477661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/28614413", "body": "fixed\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/28614413/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/28936987", "body": "I prefer this to be the first thing we do. After all that is the only parameter of the Task and if this is invalid nothing will work.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/28936987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/28937027", "body": "Yes, if no coverage files are found it is an error. Since this is a report generator based on  parsed information from the coverage output and we have to call it explicitly as a parameter of the build.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/28937027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/28937032", "body": "will do\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/28937032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/28937096", "body": "Yes. Two reasons to use Xdocument 1) XPath query  which allows 2) that I don't have to iterate through every level of nesting.\nThis is why I have the bottom up parsing comment.\n\nLet me know if I am missing some advantage of XmlReader (maybe faster but I prefer nicer code)\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/28937096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/28990355", "body": "I think having the possibility to do both or only one is good. One reason is doing the runs locally is better to have the options. In practice (CI) coverage run and this runs should be done together.\n\nBoth properties are to be set manually.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/28990355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/28991116", "body": "OpenCover doesn't include that. Even the tool that generates the .html reports implemented their custom parser. Although they use more Linq (https://github.com/danielpalme/ReportGenerator/blob/1deabff63aff52c419bbc811407cf7a0738c2262/ReportGenerator/Parser/OpenCoverParser.cs)\n\nThis report simplifies the OpenCover report so I think a custom one is appropiate.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/28991116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/29013645", "body": "I'll considering the future if we get to a point were this task becomes an issue.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/29013645/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/34931773", "body": "in which case is 'BaseLocalLibrariesPath' going to be set beforehand?\nI just want to understand if the new properties are for simplifying the transformations in theItemGroups below or if there is any other reason.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/34931773/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/67591015", "body": "Yes this functionality depends on outputs (correlation id) generated within this Target, so it makes sense to keep it here. It is similar to the steps above the ones I added where it sends some information to an event hub.\n\nAlso, if TestNugetRuntimeId is not set, nothing bad would happen. However for our builds we always set it.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/67591015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/67591104", "body": "The container name has a suffix that when combined with the TestNugetRuntimeId, makes it unique.\n\nIn case the same build configuration is triggered a second time, that is fine, because we only need the latest correlation id.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/67591104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/84136259", "body": "Consider using .ConfigureAwait(false)\nThis is a recommended practice for libraries that expose async methods and don't need to flow context.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/84136259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/84136776", "body": "other awaits in your class could use it too, but since this is a public method, at least this one should have it.\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/84136776/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/84137189", "body": "should we hardcode 'DevDiv' or should the project name be ingested as a paramter or from a config file?\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/84137189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/84169077", "body": "NitPick, using 'var' when the type is not obvious.\nAccording to corefx style conventions: https://github.com/dotnet/corefx/blob/master/Documentation/coding-guidelines/coding-style.md\n\n>  We only use var when it's obvious what the variable type is (i.e. var stream = new FileStream(...) not var stream = OpenStandardInput()).\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/84169077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/84169308", "body": "NitPick, using 'var' when the type is not obvious.\nAccording to corefx style conventions: https://github.com/dotnet/corefx/blob/master/Documentation/coding-guidelines/coding-style.md\n\n> We only use var when it's obvious what the variable type is (i.e. var stream = new FileStream(...) not var stream = OpenStandardInput()).\n", "reactions": {"url": "https://api.github.com/repos/dotnet/buildtools/pulls/comments/84169308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}}}