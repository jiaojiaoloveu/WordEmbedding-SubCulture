{"_default": {"1": {"ErnieAllen": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/502538b4fc20997873a1434a95d469a5bb019d61", "message": "DISPATCH-917 Get common html/js/css for console from npm module dispatch-console-pages"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/7f15440980e4633e8bbf6af919ef187cf262e127", "message": "DISPATCH-904 Add charts to overview page"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/c36f3af0d1ad38d90dd5b738bc3e40577f07ae1d", "message": "DISPATCH-909 Work around no host on some connections"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/8468525688a5985b2f54e3aba8afe8749362c695", "message": "DISPATCH-909 Preparing for new overview charts page"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/770edaf17e40bdf40add2b3ecfdc00a0897ee9ad", "message": "DISPATCH-909 Handle inter-router connections with blank host"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/cabc6f07552ee078046e01662fa81c9fa1ab56e3", "message": "DISPATCH-903 Use c3 library for charts"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/9b2b64ff913a959db7bcfb749864e5ce3b8ebb94", "message": "removing rhea since it is incorporated in dispatch-management.js"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/c1684609659eeb2872ef6056388c48e01c572629", "message": "DISPATCH-896 Use promises to connect"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/fd9485846818426e2fbc4ac0929d2b6be60a7218", "message": "DISPATCH-896 Fix HTML errors on page"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/221580611f2bae9abfd25d6fcde8c9df0c9f6095", "message": "Removed broken menu item at upper left of page"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/8e592559a6f1fa7cf1709b6c6fa53cbdfb64c3d3", "message": "DISPATCH-886 Prevent script injection for stand-alone console"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/55d7bd34bc14aad781754cab3c987bba79a36b5f", "message": "DISPATCH-886 Account for / in router name and prevent script injections"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/79ae73f9dd768005f6f8f7d4ecadc4000a97f0ae", "message": "DISPATCH-886 Use pre-npm css files"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/052d60d4074a570720c5196f664483200bcee40b", "message": "DISPATCH-801 Add aggregate column back into Entities page"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/c2a935fc8bab6d050e6801de8fad1c3fadfbf3df", "message": "DISPATCH-869 Use connection.container to distinguish unique connections to brokers/clients"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/75d9b7e31d166db3a9a61095e1e61f597f9fb023", "message": "DISPATCH-801 Display correct Create form when switching entities"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/be0194750ceddff3847ad23dd119aae7069872b1", "message": "DISPATCH-801 Remove test popover text on Router info dialog"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/72a8dc2b72644c5316933ceda5aff3389a9d092f", "message": "DISPATCH-801 Allow log messages to wrap on overview dialog"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/7166fe5450750b92b8a3d31a42713db60e422ea1", "message": "DISPATCH-801 removing unused geo data"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/8856b8cc0d67cd1789b9b1d756283e4d61b1d226", "message": "DISPATCH-876 Use connection instead of connector in linkRoute section"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/8e8c46ac0690dbaafb2082545cdf0d3cfc62033d", "message": "DISPATCH-590 Clear list of logs before adding retrieved data"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/1723015fc18134423a7effc0716c050f6e3edeca", "message": "DISPATCH-801 Ensure there is an active node on Entities page when showing page for first time"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/844ef61b820a9275618bed8cd48752f34d0f71b6", "message": "DISPATCH-801 Use buttons to trigger chart creation because of FireFox"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/6fc788c6110b569c902de12f85ae5a2d2cee2e25", "message": "DISPATCH-801 Adding Promise support for IE"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/58461d73042b274e786f23ff28a06abd25b677b8", "message": "DISPATCH-801 3rd party libraries are now installed via npm"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/a93825abc87ac4648902145198424a06561bb260", "message": "DISPATCH-801 Updated 3rd party UI components to latest available via npm"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/fdb093e4a5dee70b0865942d358a51eee0c117ec", "message": "DISPATCH-801 Removed reference to 3rd party libraries form stand-alone console"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/1a29a1006da3118ea9bee27d85123653304c363d", "message": "DISPATCH-856 Add hostName to router entity. This closes #209"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/ec6bcacdf992eb5fea98b308bbd6f5cbb2bf1947", "message": "DISPATCH-580 Adding graph=true for logStats statistics"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/eaa8901c7f64c6625a09bcd4900b28ae4888c705", "message": "DISPATCH-861 For latest rhea.js move the reply_to:, to:, and correlation_id: fields out of message properties"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/e6eb3b01fb03a3c289d6b5a70008020d50cc4b97", "message": "DISPATCH-834 Merge config utility into master"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/5f3eaff19a3751a87337a051f80fe6c8610c1131", "message": "NO-JIRA Fix author and description in setup.py for openstack dashboard console"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/c9100825c04b73a41d066b8a0ef099db9afb9889", "message": "DISPATCH-834 Check-in missing change to router edit dialog"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/e1418ab53a8219d9e5a0aff5a126f7fb732d0cb4", "message": "DISPATCH-834 Handle changing between address.prefix and address.pattern"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/d0a3dd763e41626f1d298d360eea0da8c391be3a", "message": "DISPATCH-834 Add ability to read/write addresses to one or more routers"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/251e142b1f91cbb68fdc293d4ad637955e009dd6", "message": "DISPATCH-834 Switch to npm instead of deprecated bower"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/6f7107d4229eda1754f5cabb723ece09ca3b84af", "message": "DISPATCH-834 Fix for Firefox stylesheet insertion"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/2f5ec0d8948d35c09deb4bcc7a02cfeb0a8341c4", "message": "DISPATCH-834 Now with ability to deploy with sudo password passed in"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/06f5f1201fbd95d59b1929448eceef5f602e2d20", "message": "DISPATCH-834 Add ansible playbook"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/91df5a6754b1c5778cf758c47bb0b4d271f9734d", "message": "DISPATCH-834 Added ability to deploy to multiple machines"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/f163d38eebf8a0da0b085383096a32253c6cca87", "message": "DISPATCH-834 Added 'apply to all routers' option to logs. Added log icon"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/24a7085f20b6ea2ed1916967e7a81855ebd9a036", "message": "DISPATCH-801 Reverting to retrieving 3rd party javascript libraries from CDNs"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/e95c8e071b85f8c476b9a92871d9dd1154785a44", "message": "DISPATCH-801 Add installation of bower to console install instructions"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/2baae1936e1e86feb29abdaddc3c55486df67217", "message": "DISPATCH-834 Don't check-in 3rd party javascript libraries and require a 'bower install'"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/cc3f124d6f83ddc7c2d4ae1529475e73fb16807f", "message": "DISPATCH-833 Removed 'Add New Router' mode from hawtio console"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/c77203e6f6720ac5b9e736aa14c208d8fb16aee0", "message": "DISPATCH-833 Removed 'Add new router' from stand-alone console"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/3c86ad6e97ddf3848dc7262529fe0b1990d53215", "message": "DISPATCH-801 Require 'bower install' to install 3rd party libraries"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/96db8058cf7162040d3cc4df7f84a4f832bbdc9e", "message": "DISPATCH-832 Ensure consoles handle the removal of the deprecated entities/attributes/values from the schema"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/af4d33f24745a44d5e9f703b52a4b324c2eea7a2", "message": "DISPATCH-834 Added README to console/config utility"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/93b9fa51dc2536ea23dc531eca3ade069e1d1552", "message": "DISPATCH-834 Initial commit of config file editor"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/fdab0a7e88bbfa29a2a8a32debcd43fb3239c7fe", "message": "DISPATCH-812 Update gitignore"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/5a518e8251e4a5f6c9d77d66d532e0ce1df85e34", "message": "DISPATCH-812 Remove the console stress test directories and update gitignore"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/dfad50c688de8b458d4fea5ccf844afe4b69050c", "message": "DISPATCH-800 Checking in 3rd party libraries and fonts"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/4efb180c7b01bdf5e25ca6a2452757dd6ce398fe", "message": "DISPATCH-800 For Hawtio, copy external js/css/font files locally and update LICENSE"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/27665df8909e9d9fad99c9fea914e2c22bdd121b", "message": "ENTMQIC-1950 Fix spelling error"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/41fc94588ae90761c6ff34f2e337a58f429f4dde", "message": "DISPATCH-748 Check for null in table height to avoid possible error message"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/a5bb8051b96da65832c58311841f28835afd71e6", "message": "DISPATCH-792 Fix freezing/unfreezing nodes and moving nodes on top of each other"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/b5acca6df81d4d3224f9dae4381ed9a89016f24e", "message": "DISPATCH-421 Fix syntax error"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/a8aecae5bd9459350ef7e50dd2d149d94af490fa", "message": "DISPATCH-430 Remove unused interpolation function for rate charts"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/6f408b0726e0f9cc9ddf6920aa177af4b9d375d2", "message": "DISPATCH-430 Use linear interpolation on rate charts to prevent tooltip from drawing in the wrong y position"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/2b15c8f5f91b2b2792045b4ad8882856e690fa45", "message": "DISPATCH-421 Mirror toast messages to debug console"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/be9a08b19067ebea06d28f7ad348cb2287822f98", "message": "DISPATCH-789 Adding error checks in case route changes before results arrive (user changes pages quickly)"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/b846756d7bc899f303860970dbfe6690ead89d14", "message": "DISPATCH-791 Ensure topology graph draws correctly with one node when returning to page after navigating away"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/0a35d713c200fb1ee01860d3c4cb4c234234161c", "message": "DISPATCH-771 Show required and unique fields on create entity form"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/5cc501dc1e134902fa6e69d0c8b83879e808a6fd", "message": "DISPATCH-795 Sort entity names on Schema page"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/4e55c604a441df61c2bfc8fce9385646dc737018", "message": "DISPATCH-770 Display error message when a management operation fails"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/36766377da5ae0b02d06036cfe27d9463c73bf99", "message": "DISPATCH-747 Handle connection error on overview page"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/303c3973d602db20f74e4feabb4438d36c7c4469", "message": "DISPATCH-747 Better handling of connection errors"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/2871701b51f1265083521f8ec947ffdf69ac97b9", "message": "DISPATCH-794 Fill in arrows on topology page for IE 11"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/90eeb8f5dc72983bd7431c3df4c5b7dc06c967f2", "message": "DISPATCH-790 Fix typo that kills IE 11"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/e78e29d8139893558ccb7d0a67e2dbfe06f617ec", "message": "DISPATCH-790 Fix context menu position. Allow info panel on topology page for stand-alone to expand/collapse"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/e22091b3fb3eba0870463d096a2c88ad15beb249", "message": "DISPATCH-753 'Fixing' javascript to support IE11"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/5cb320f0378ef16e31b3e68c813b6a554a74b9d5", "message": "DISPATCH-762 Remove nested angular controller so Connection details are shown for hawtio"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/f520a0792071e51b2815a15621695df93f48c0df", "message": "DISPATCH-772 Show operations for selected entity when page loads for hawtio"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/47724c7c42ee9fca15a06baeab5af40abf9aed2b", "message": "DISPATCH-750 Force font-family for FontAwesome fonts for Windows support"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/5ee5bc9beae58e4ecc841479689591e12aac28ef", "message": "DISPATCH-753 Don't use arrow functions or bitwise comparisons since they break IE"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/18d7b2c0bb7e05bc1867dc6101551b6060a06e67", "message": "DISPATCH-772 - Show operations for selected entity when page loads"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/22b11be60ae24a474a0d12a3adc61469c0af17fa", "message": "DISPATCH-769 Allow link table height to be greater than one link"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/0f0645592e13ecbf6e5ac58633a25cea25b078fc", "message": "DISPATCH-768 Handle connections that go to more than one router"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/74d1e302678a35a5dfd727153ee15f7a8db50542", "message": "DISPATCH-746 Set connection port to default if it is blank"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "ganeshmurthy": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/785c99d1cd9279505eb64ffdec87acc13eacada0", "message": "DISPATCH-908 - Modified qdr_connection_process to handle dispositions before detaches"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/791592a935fd2d9998fbf42fe4442d92cb999568", "message": "DISPATCH-907 - Added code to qdmanage to handle integer types"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/4a173e1ec0f7e0e8f9d7d37b9549d4f9c9d37fb0", "message": "DISPATCH-894 - Made the following changes to make the system tests work on CentOS 6.\n1. Modified system tests to use unittest2 instead of unittest test framework.\n2. Modified tests/CMakeLists.txt to use the unit2 test runner.\n3. Fixed some tests to use backwards compatible assert functions.\n4. Remove unused imports in tests"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/58ce3a208e698b716b26966b1ce0b723967c351b", "message": "NO-JIRA - Reverted previous change that modified calls to Proton API functions pn_proactor_connect and pn_proactor_connect"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/86ef580e429beb68ac4167e8f96ca284f2668dd2", "message": "DISPATCH-831 - Set the default value of cost in connector to be 1 instead of '1'"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/04718cfeb23ee51c86a09f218654c51f410203ca", "message": "NO-JIRA - Adjusted calls to pn_listener_accept and pn_proactor_connect due to Proton API changes"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/6d73659c3cfe1f9b0bbbf4c88c1cb966ab509778", "message": "NO-JIRA - Added Apache license information to a couple of files"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/7ff1f32372b13f1de9073e7572f1200b167de852", "message": "DISPATCH-895 - Check if underlying proton links are not closed before calling into proton. The underlying links/sessions on a connection are cleaned up silently by proton when a connection drops."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/e2a05e14eaa5740cfcd1d6be528ee548aa000441", "message": "DISPATCH-887 - Fix race condition that led to connection reopen in spite of connector being deleted"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/b46e5de3def3b26ebe3cbb45d8c03cbe2e163598", "message": "DISPATCH-883 - Prevent the router from crashing when the connection properties is not PN_STRING or PN_SYMBOL or PN_INTEGER. Also added a few system tests"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/c39d6ba64199e5c33b17b5463088c6bcd06604dd", "message": "DISPATCH-767 - Minor fix to qdr_deliver_continue_peers_CT. Activate the connection if the work is processing"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/a9e1147697930654f49f6111c508efdfa1581069", "message": "DISPATCH-767 - Backed out previous commit that was stalling links. The commit that was backed out was fff38466a6a0e8860531cf44e4ffff074bbb1cc1"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/03b09eb1e05e1f3b9744ebb27aa7a6b478412412", "message": "DISPATCH-864 - Additional fix. Move etc/qdrouterd to etc/fedora/qdrouterd"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/92d54a0dd650ddc57bc09c5f7955c816f047c949", "message": "DISPATCH-862 - Added an echo statement to print out the sha of the proton commit being used"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/470aafbe6ffc4e5b77c46413b704e429f3ec3d2c", "message": "DISPATCH-864 - Removed cmake flags SYSTEMD and SYSVINIT introduced in DISPATCH-859. Moved qdrouterd.service file to etc/fedora. Also added a minor improvement to qdrouterd file (adds more choices). Thanks to Justin Ross for the patch"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/fff38466a6a0e8860531cf44e4ffff074bbb1cc1", "message": "DISPATCH-767 - Additional fix to regression introduced in a previous checkin for this fix. Add the out_link to links_with_work only on new work creation"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/2bd0ccb97839f275e91fa782cbac1affe666c8cb", "message": "DISPATCH-834 - Added missing license information to some files"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/1dbfefa07379c2091734d7745a65547caa3a15c0", "message": "DISPATCH-859 - Introduced SYSTEMD and SYSVINIT cmake switches to install files accordingly."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/392289b751f41a65dcbaca1cdaa7a00fe61e7c1e", "message": "DISPATCH-858 - Additional fix. Add the license folder to the pom file so the mvn apache-rat:check can complete"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/2a91400336ba60e3bbe21baee2ccf65e408cd4fa", "message": "NO-JIRA - Added SysVInit and Systemd startup scripts."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/a71ff5c9613b4b408956a72fad1309c205b71088", "message": "DISPATCH-858 - Moved third party text into files and point to these files from the LICENSE file. This closes #212"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/f5d1a77d61ce9e1662f4945273d4f7beeefb5e1b", "message": "DISPATCH-829 - Added code to abort delivery on link cleanup"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/5630becc56002bcb67502bead6f5da07d80078b2", "message": "DISPATCH-829 - Added a proton_ref set flag so we can incref and decref accordingly"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/18c5f8d6293de4227c8c17ef08675cb4eaef689c", "message": "NO-JIRA - Removed accidental printf inclusion"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/a33dd4602b6a08a808eb72d1e4bf514c30478908", "message": "DISPATCH-844 - Added cipher field to sslProfile object. This will allow users to disable weak ciphers in an SSL connection"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/29c53e5e12b9234ed3d0e7db59620379fee13175", "message": "DISPATCH-819 - Added a deliberate void in front of pn_link_send showing that we are not handling the return value"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/34b202d1a2059bfa168ce1a245433e41884a579a", "message": "DISPATCH-837 - Remove unhelpful asset and add a free to iterator. Fixes for coverity errors"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/2f253d4c8091136429159f3c853e50aeea6f6f01", "message": "DISPATCH-806 - Added warning log message to indicate the the console entity is deprecated and use http:yes on the listener instead. Also made a couple of attributes on the console entity as required."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/e9b6de644f391020caed22db32b783eafcb103f3", "message": "DISPATCH-842 - Added some files to the pom so they are ignored by the rat-check. These licenses have already been added to the LICENSE file"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/7817694e24bab0be33edd0512204f96bf98aeb1e", "message": "DISPATCH-841 - Set the default limit on qdstat to 100"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/71b3b7dfd9380235c17122db1e41af108000e473", "message": "DISPATCH-824 - Remove deprecated entities and attributes from the router schema and related code changes\nThis closes #199\n\n(cherry picked from commit 8d0a2dde02b7cdbddf69019c345c13c6b930b9d6)"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/af96b23fefe0076391db35d31d612a1ab5e6f4a2", "message": "DISPATCH-818 - Added connection info list to the connector which stores the initial connection information and the backup connection information\n1. If the primary connection goes down, the primary and the backup connections will be tried in quick succession\n2. If the new backup connection does not provide failover-server-list, the list on the server is cleaned up to contain only the one pertinent connection info.\n3. The connection info list always has at least one element in it which represents the initial successful connection information\n\n(cherry picked from commit 2fc9e285f92d96f7d6c5a4e9e36bf356ab7cc256)"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/ac9cd3d1ca45763c066c87fca15ee4481c9c1366", "message": "DISPATCH-779 - Issue credit for multicast address when no receiver is connected\n\n(cherry picked from commit 405229dcc8aecc87fbee94912405cd3852ac7f86)"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/9d0a684db2b632690c611b9b05988d3fe3f7ab37", "message": "DISPATCH-816 - Check for existence of a connection object before procceding to handle new incoming and outgoing links AMQP_incoming/outgoing_link_handler. The connection that these links belong to might have disappeared at the time we are ready to handle links and the absence of the connection must sensed and the link creation process must not proceed."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/75ebbd13adb7f86892bc3d7235499272cac9fc3a", "message": "DISPATCH-815 - Excluded qdmanage and qdstat from the call to distutils setup because distutils munges python shebang. CMake is already handling the installation of these scripts, so there is no reason to have them here"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/667fab3282a20c96e2a741914b8cbfedd075d041", "message": "DISPATCH-802 - Additional fixes - 1. Modified error name to amqp:precondition-failed. 2. Modified error description 3. Prevented from setting the target on the return attach"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/49c1269fc0363c4c14f611eb4516cec856e80605", "message": "DISPATCH-808 - Allow router to respond to addresses with non-QD_TREATMENT_UNAVAILABLE treatment. This must have been part of fix to DISPATCH-803"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/098ec7d13744bbbd31fce173bc9a76daab945e9c", "message": "DISPATCH-802 - Refuse transaction coordination links if they can't be routed to a coordinator since the router by itself cannot coordinate transactions.\n\n(cherry picked from commit d17f7b58b95886ca4ee03aac7deba4eb5cad679d)"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/d1838e6b6dde4fd5aa7dd715b5cc60a70c2e033e", "message": "DISPATCH-805 - Fixed the assert on system_tests_sasl_plain.py in order to not hard code TLS version"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/c9262728dc1a6d1bcdc5a68f4b19f1b9d2221d53", "message": "DISPATCH-767 - Added code to support multi frame message streaming\n1. Added new core API function qdr_deliver_continue() that will continue\ndelivering a large message\n2. Modified qdr_link_process_deliveries() to not remove deliveries from\nthe undelivered list until they are fully delivered\n3. Modified qd_message_receive() to recieve partial messages.\n4. Modified qd_message_send() to be able to handle streaming send. This\nfunction can now be called multiple times for the same message. It keeps\ninternal pointers to the point upto which the message has been sent and\nis able to continue where it left off. Message content buffers are freed\nas soon as the message has been sent to all recipients.\n5. Added peer linkage for large settled deliveries and added a settled\nlist to handle with abrupt connection terminations when large messages\nare being transmitted.\n6. Added unit tests to test large messages."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/1ca80b6e29d105a3de43a57aa800855276c64caf", "message": "DISPATCH-803 - The following changes were made to support unavailable distribution\n1. Added a new attribute to the router entity called called defaultDistribution which defaults to balanced\nbut can be set to unavailable\n2. Attaches to addresses with distribution unavailable are rejected and the link is detached\n3. Anonymous senders sending to unavailable addresses will be sent back a disposition of PN_REJECTED but link will not be closed\n4. Added system test system_tests_default_distribution.py to test the above cases\n\n(cherry picked from commit 49f643e9fabfe381934b26b679b4f2bda39f2e4a)"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/4dd8764b341cdf9e1d5c06c99697f454d4eaa468", "message": "DISPATCH-799 - Fixed CMakeLists.txt to set the TEST_RUNNER variable correctly"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/b38d81d0f13deb6a1fc8f9b82607e4d24bac0322", "message": "Update qdmanage, qdrouterd and qdstat man pages. This closes #179."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/ccd6b0880400af03f04b6be802e9374c14ad891f", "message": "DISPATCH-737 - Additional test tests no-auth since there is no authentication on an authenticatePeer:no listener"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/c32c79c34d5443a0386e2508c2939f260214f62e", "message": "DISPATCH-737 - Set the sasl_enabled flag so that SASL exchange does not happen when not necessary"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/fb5fe90ca211a5dd1c9e9b6414344fc908909e88", "message": "DISPATCH-796 - Added header to the management agent response for Python and C management agents"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/6536288944d0051e407c6ce57c4cef8bc7dd0a88", "message": "DISPATCH-788 - Part 2 - Added a list of peer references in case there is more than one peer. This will help in the future when we introduce large message streaming\n\n(cherry picked from commit 33aab339be641e0803631018df10a30550be2e2d)"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/db96fd8f1748b4c7faeefeb8580567143ad5350a", "message": "DISPATCH-788 - First attempt at adding a core thread API around handling of peers. The next step is to introduce a list to hold more than one peer\n\n(cherry picked from commit b196ebb3159ed7670f1f295d06fed97ae0bedda1)"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/8c9f4a581f7a62158d21bbe845edb3db60ae1d06", "message": "NO-JIRA - Added extra documentation for the logMessage field. Thank you Gordon Sim"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/d5aedafe42dca0fa36dbc6104bc8e5cfbe66b130", "message": "DISPATCH-766 - Updated Dockerfile-ubuntu to include libwebsockets. Got rid of some unnecessary libraries"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/fd27ed42330ba6d481ef924f8195fa00b323810e", "message": "DISPATCH-765 - Added RAT file exclusions in pom and fix pom file execution folder"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/5a72e38da793bbd026d01687ab052db88e9ff286", "message": "DISPATCH-765 - Partial fix. Fixed system_tests_http to skip certain tests based on Python version"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/22202be221df94245139115e70fcd28aa3e01577", "message": "DISPATCH-757 - Modify sudo to true in .travis.yml"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/01e5e38c74bed649c99693518bbbcbd61b767319", "message": "DISPATCH-763 - Modified the set_config_host() function to take into account the new defaults for host and addr fields"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/7c795ac65eaddc39314a9318d86837cef33b21eb", "message": "DISPATCH-758 - Modified test_listen_error() in system_tests_one_router.py and system_tests_http.py to point to listeners that the router is already listening on"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/a00781c01461d7dc87f02742e54f5d47cabbf5fd", "message": "DISPATCH-756 - Fixed the Fedora dockerfile to use libuv and libwebsockets"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/f7a00efebbcf404720d32bc09b35ccde5896708a", "message": "DISPATCH-390 - Removed accidental checkin of config.sh"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/3b04b393298403ee90cdf28c7053da989496cd0d", "message": "DISPATCH-390 - Additional fix. Include LIBWEBSOCKETS_LIBRARIES only if LIBWEBSOCKETS_FOUND"}], "pull_requests": [{"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/246", "title": "DISPATCH-916 - Honor the type argument to qdmanage get-attributes and\u2026", "body": "\u2026 get-operations", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/245", "title": "DISPATCH-878 - Added code to display the actual listening port if 0(z\u2026", "body": "\u2026ero) is set as the listening port", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/148871056", "body": "You can use - sasldblistusers2 -f qdrouterd.sasldb - to see the user names (passwords will not be displayed)\n\nsaslpasswd2 can be used to add.modify users. \n\nI am not aware of other credential management tools.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/148871056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/149642357", "body": "I have introduced an important change to the tests/CMakeLists.txt. The python system tests are copied into the build/tests folder and executed from there. I made sure that all tests pass when I ran \"ctest -VV\" from the build folder. \n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/149642357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/149642762", "body": "Does the CI system execute \"ctest -VV\" to run the tests?\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/149642762/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/149644099", "body": "I was talking about this to crolke yesterday and the thought was that running all tests from the same folder (in this case build/tests) will make it look uniform instead of running some tests from source and some tests from build\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/149644099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/149651181", "body": "ted-ross, do you still want me to run the \"configured\" tests from the build folder and the non-configured ones from the source folder? \n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/149651181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/149690231", "body": "ted-ross, I will close this PR and create a new PR which will include the server.c change that you pointed out earlier. \n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/149690231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/149692279", "body": "Created a new pull request. Hopefully this will satisfy all parties involved.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/149692279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/149900387", "body": "This pull request is still open.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/149900387/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/149909805", "body": "Found a few more things that needs attention. I am closing this pull request\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/149909805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/151166811", "body": "Make sure you have the latest proton before testing this PR. It needs Ken's fix - https://github.com/apache/qpid-proton/commit/aceb43d20ad890e7dd9cd66d66dccec871695076\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/151166811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/155155826", "body": "Any idea where the code to handle the -h option is? \n\nAlso, if -v is not available, the following line must be removed in tools/qdstat - \n\nparser.add_option(\"-v\", \"--verbose\", help=\"Show maximum detail\",        action=\"store_true\", dest=\"verbose\")\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/155155826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/229161780", "body": "Hi Jiri,\n   Thanks for your patch. I have committed it to master. Please close this pull request. \nThanks.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/229161780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/231760469", "body": "This pull request has been rebased with master and ready to commit.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/231760469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/231764126", "body": "Hi @scholzj ,  @ted-ross   merged your pull request into the master branch a few months back. Can you please close this pull request? Thanks.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/231764126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/247106591", "body": "I verified that the newly added tests (test_check_address_name, test_check_link_route_name, test_check_auto_link_name) fail if this fix is not there\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/247106591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/247107151", "body": "@grs, I think that this patch might fix DISPATCH-502 as well. I am taking a look. Thanks.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/247107151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/260031465", "body": "I was able to successfully merge your code to my local master but ran into a compile issue.\n\nIn file included from /home/gmurthy/opensource/dispatch/include/qpid/dispatch/ctools.h:27:0,\n                 from /home/gmurthy/opensource/dispatch/include/qpid/dispatch/container.h:35,\n                 from /home/gmurthy/opensource/dispatch/src/dispatch_private.h:40,\n                 from /home/gmurthy/opensource/dispatch/src/router_core/router_core_private.h:22,\n                 from /home/gmurthy/opensource/dispatch/src/router_core/route_tables.c:20:\n/home/gmurthy/opensource/dispatch/src/router_core/route_tables.c: In function \u2018qdr_del_router_CT\u2019:\n/home/gmurthy/opensource/dispatch/src/router_core/route_tables.c:353:17: error: \u2018qdr_node_t {aka struct qdr_node_t}\u2019 has no member named \u2018maskbit\u2019; did you mean \u2018mask_bit\u2019?\n     assert(rnode->maskbit == router_maskbit);\n\nFix is easy enough (missing an underscore in maskbit)\nassert(rnode->mask_bit == router_maskbit);\n\nAfter the fix, the code compiled and I was able to run all unit tests successfully. I did not see any segfaults.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/260031465/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/310078746", "body": "@ChugR , I downloaded this PR and I see the following code repeated twice in qd_message_send() in message.c\r\n\r\n    //\r\n    // Send delivery annotation if present\r\n    //\r\n    if (content->section_delivery_annotation.length > 0) {\r\n        buf    = content->section_delivery_annotation.buffer;\r\n        cursor = content->section_delivery_annotation.offset + qd_buffer_base(buf);\r\n        advance(&cursor, &buf,\r\n                content->section_delivery_annotation.length + content->section_delivery_annotation.hdr_length,\r\n                send_handler, (void*) pnl);\r\n    }", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/310078746/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/316426550", "body": "The \"no-such-handle\" error comes from the following code in transport.c in a few places.\r\n\r\n```\r\npn_link_t *link = pni_handle_state(ssn, handle);\r\n\r\n  if (!link) {\r\n    return pn_do_error(transport, \"amqp:invalid-field\", \"no such handle: %u\", handle);\r\n  }\r\n```\r\n\r\nLooks like proton is trying to send a message to a receiver on a link that was closed abruptly. The router will try to redeliver this message to another receiver. This error can be ignored in the context of what this test is trying to achieve.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/316426550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/336893077", "body": "Looks good @ErnieAllen feel free to check it in", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/336893077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/337603920", "body": "Ship It!", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/337603920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/338007958", "body": "@gemmellr please take a look at this PR and critique it. Thanks.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/338007958/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/354811148", "body": "This looks good to me. I will commit.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/354811148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/apache/qpid-dispatch/comments/19723194", "body": "@RoddieKieley please make sure you put in a more descriptive commit message in the future.\r\n\r\nYour commit message --> DISPATCH-352 initial implementation. \r\nExample of more detailed commit message --> DISPATCH-352 - Added checks to make sure that the router config file exists and is not empty\r\n\r\nThanks.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/comments/19723194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/comments/20189881", "body": "qdr_delivery_t objects are maintained by dispatch. proton does not have knowledge of these objects.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/comments/20189881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/42528705", "body": "I will go ahead and make this fix.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/42528705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/63246808", "body": "How about I check addr->next_remote >= 0 like below\n\n```\n    qdr_node_t *next_node;\n\n    if (addr->cost_epoch != core->cost_epoch) {\n        addr->next_remote = -1;\n        addr->cost_epoch  = core->cost_epoch;\n    }\n\n    if (addr->next_remote < 0) {\n        qd_bitmask_first_set(addr->rnodes, &addr->next_remote);\n    }\n\n    if (addr->next_remote >= 0) {\n\n        qdr_node_t *rnode = core->routers_by_mask_bit[addr->next_remote];\n\n        if (rnode) {\n            //\n            // Advance the addr->next_remote so there will be link balance across containers\n            //\n            _qdbm_next(addr->rnodes, &addr->next_remote);\n            if (addr->next_remote == -1)\n                qd_bitmask_first_set(addr->rnodes, &addr->next_remote);\n\n            if (rnode->next_hop)\n                next_node = rnode->next_hop;\n            else\n                next_node = rnode;\n\n            if (next_node && next_node->peer_data_link)\n                conn = next_node->peer_data_link->conn;\n        }\n    }\n```\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/63246808/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/64082133", "body": "I removed the else and made it 2 if statements\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/64082133/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/78749765", "body": "This is an additional bug I found. free(cl) and free(cc) were called instead of qd_config_listener_free(cm, cl) and qd_config_connector_free(cm, cc) respectively. I fixed that in this method.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/78749765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/80103666", "body": "I failed to read the doc for qd_field_iterator_prefix. I have used it now instead of qd_message_is_router_annotation\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/80103666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/80103703", "body": "Done\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/80103703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/80103741", "body": "Done\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/80103741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/87621418", "body": "You are correct that these buffers are not freed. We are thinking of other ways to free the buffers without having to pass it thru to the qdr_manage_create() method because it might not be relevant to the method itself other than the fact that the method is freeing it.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/87621418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/87621680", "body": "This is a good change. It makes sure that it frees all the components of qd_server_config_t\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/87621680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/87624058", "body": "The existing code already seems to free stripAnnotations\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/87624058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/87624676", "body": "I am wondering if the function should take ownership of the passed in pointer. I feel more comfortable if the function makes its own copy. Just my 2 cents.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/87624676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/122779756", "body": "I moved this check (in_dlv->peer == 0) into the qdr_delivery_link_peers_CT, so we are good there.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/122779756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/128262784", "body": "No messages are ever received by self.near_recv_2 because of lack for credit. Same with self.mid_recv_2 and self.far_recv_2. These 3 receivers should also send some flow so that they also receive message", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/128262784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/128263178", "body": "The name of this test should not be test_05_linkroute because it is using message routing", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/128263178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/127819616", "body": "@ted-ross this function (qdr_delivery_is_all_peers_unlinked_CT) needs a little bit of your extra attention. Please take a look and let me know if you have questions.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/127819616/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/129332913", "body": "Currently, the only function calling qd_buffer_add_fanout() is qdr_forward_new_delivery_CT(in forwarder.c) which is only called by the core thread. So, there should be no contention. But I am happy to change the fanout to atomic so that anybody else calling it outside of the core thread will not be affected.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/129332913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/129333194", "body": "Agreed. Calling ZERO(msg->content) will set those flags to 0 (false) already. So, why bother setting them to false again. I will remove this.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/129333194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/129333319", "body": "yes, agreed, atomic inc ", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/129333319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/129333458", "body": "Fixed the wrong comment produced due to cut and paste", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/129333458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/132275310", "body": "Changed QD_TREATMENT_LINK_FORBIDDEN to QD_TREATMENT_FORBIDDEN", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/132275310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/132275399", "body": "Changed treatment to default_treatment", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/132275399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/132308131", "body": "Removed linkBalanced from comment", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/132308131/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/145415389", "body": "Can we remove this TODO since the buffers are eventually freed when the message is freed?", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/145415389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/152008368", "body": "This looks good. This change can be merged. Thanks.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/152008368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/151789336", "body": "Can we please add the following - \r\n\r\nIf the router is unable to successfully connect using the primary or the backup connection information, it round robins around the list until it is able to make a successful connection. ", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/151789336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/152005795", "body": "to be consistent the qdmanage query command should look like this - \r\n\r\nqdmanage query failoverList --type=connector --name=_CONNECTOR_NAME_", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/152005795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/153930129", "body": "Do we want to talk here about the EXTERNAL SASL mechanism? EXTERNAL means that the communication channel is external to SASL", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/153930129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/153930193", "body": "This looks good to me.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/153930193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/154176414", "body": "I think that is sufficient. This PR can be merged. Do you want me to merge it? Thanks.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/154176414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/155839890", "body": "setting type to \"type\": [\"TLSv1\", \"TLSv1.1\", \"TLSv1.2\"] will mean that only one in the list is allowed. That is how router schema syntax works. \r\n\r\nFor example look at \"stripAnnotations\". It type is set to \"type\": [\"in\", \"out\", \"both\", \"no\"] which means stripAnnotations can have only one of the 4 values \"in\" or \"out\" or \"both\" or \"no\"", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/155839890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/155841178", "body": "The proton API requires that I use TLSv1 and not TLSV1.0\r\nPlease take a look at the doc of this function\r\nhttps://github.com/apache/qpid-proton/blob/master/proton-c/include/proton/ssl.h#L242\r\n\r\nI will gladly change it to TLSv1.0 if proton does it. This is a question for @ssorj ", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/155841178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/155841697", "body": "Your description for protocols - \"The TLS protocols that this sslProfile can use. You can specify a list of one or more of TLSv1, TLSv1.1, or TLSv1.2. To specify multiple protocols, separate the protocols with a space. For example, to permit the sslProfile to use TLS v1.1 and TLS v1.2 only, you would set the value to TLSv1.1 TLSv1.2. If you do not specify a value, the sslProfile uses the TLS protocol specified by the system-wide configuration.\"\r\n\r\nlooks good to me. I will update.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/155841697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/158114523", "body": "since qdpn_data_as_string returns anything as string, the if check is not required - \r\nif (pn_data_type(props) == PN_STRING) {\r\n}\r\nshould be removed", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/158114523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/158332552", "body": "Yes, the if statement is unnecessary. It should be removed.\r\n\r\nIt is true that the test does not send pre-settled deliveries. \r\n\r\nThe router has allowUnsettledMulticast: yes\r\nin this specific case we send an unsettled multicast to the router. But there is no receiver, so the router sends back the following to the client - \r\n\r\n[0x7ffb1c014c50]:0 -> @disposition(21) [role=true, first=0, last=0, settled=true, state=@released(38) []]\r\n\r\nHence this delivery can be considered a dropped pre-settled?\r\n\r\nhttps://github.com/apache/qpid-dispatch/blob/master/src/router_core/transfer.c#L783", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/158332552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/161883427", "body": "Can this function be included as a part of the iterator API instead of being a static function ? Like qd_clone_iterator() ?", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/161883427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/161897073", "body": "No semi colon here", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/161897073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "gemmellr": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/1198ceeffef4c5df1bf864013774bd25c184af39", "message": "NO-JIRA: update year in NOTICE file"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/76439860", "body": "testing comment via GitHub\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/76439860/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/324650989", "body": "Tested the latest version and the attach target is now null as needed to indicate refusal, and the updated error details look good.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/324650989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/338201568", "body": "@ganeshmurthy looks good", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/338201568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "kgiusti": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/3c40c5797287e317d357fd885d4457d9d2dd9520", "message": "DISPATCH-914: correctly free mutex from qd_connector_t"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/0f521c0debe1cb06bcff5245e5b0260407cc6c55", "message": "NO-JIRA - Run Valgrind in quiet mode.\n\nThis prevents failures in tests that parse the output of qdmanage and\nqdstat."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/4844313b988d91406ab966c2abd91e661062b881", "message": "DISPATCH-89: Parse tree updates\n\nModification of the parse tree to support MQTT and AMQP 0-10 wildcard\npatterns. This closes #234"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/802e4aa97f159c8464e9f21eabf11453c2688399", "message": "DISPATCH-892: add test suite code coverage analysis\n\nThis feature was copied unabashedly from the coverage work done on the\nProton project by Andrew Stitcher, Jiri Danek, Chuck Rolke, et al.\n\nThis closes #230"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/e531e1cff723702952836d369d5d731679f121b9", "message": "DISPATCH-889: fix the parse tree token string comparison"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/6166f21accec8c305e9e3b378e76bdbdaefd57e9", "message": "DISPATCH-882: delay settlement until after the i/o thread puts the delivery on the proper list\n\nCloses #225"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/bbd6be1fe429938abff3596fafba0041e1aae48e", "message": "DISPATCH-881: Add missing delivery decref when presettled.\nRelated to github patch #213\n\nThis closes #222"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/077d053ff1aeb5ef2f50d04cbab8ef44ee0be763", "message": "DISPATCH-813: change lifecycle of link route to remove reference count\n\nRemove the ref counting when adding/removing link route patterns and\ninstead simply add the pattern when the address is first added to the\nhash table, and remove it when the address is removed.\n\nTechnique proposed by Ted Ross.\n\nThis closes #202"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/1bc362f266111fb843005dc0591b4cafa8dc8c52", "message": "DISPATCH-813: add address pattern matching to link routes\nThis closes #201\n\n(cherry picked from commit 2f70cd685c382b9f51e119d19edcbc925a0c137b)"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/355942a8a0a4aa4c221d90272c1960542fe3b37d", "message": "DISPATCH-821: actually delete the configured address"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/6def321f54b7e5baf559a51ab75cffd1c730e9db", "message": "DISPATCH-731: remove noisy debug log messages"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/043c5ccf8c51786afb0baee6ca00e7816cfcdf9e", "message": "Merge branch 'DISPATCH-731'\n\nThis closes #181"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/e87c87a087a17ef3d3cc4fddb7f58bfe7ed6853a", "message": "DISPATCH-731: fix an iterator leak"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/2c80f10877c2837af48244ff0315a12f7042eda3", "message": "DISPATCH-731: add functional tests"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/f6dab30fbeba609b227c1ed8eab5911428f10257", "message": "DISPATCH-731: add parse tree unit tests"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/778a9dd1f07389ca682469d31ad6834ecbea6612", "message": "Merge branch 'master' into DISPATCH-731"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/492ef7d4f3b22a62adf93614aa666383d0c5178b", "message": "DISPATCH-731: support wildcard configured addresses"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/704fc281d8cb44d0d8145fca8e9310b88239aa7f", "message": "Merge branch 'master' into DISPATCH-731"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/f1735eee37a498d62b14a27788a6b61755ad4737", "message": "Add token parser"}], "pull_requests": [{"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/244", "title": "DISPATCH-89: Exchange Binding forwarder (experimental)", "body": "Adds a forwarder that models the pre AMQP 1.0 model of exchanges and\r\nbindings.  Exchanges can be added via management and bound to outgoing\r\ntarget addresses.  MQTT wildcard patterns are also supported.", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/151165869", "body": "When describing the 'prefix' match I would avoid using the unqualified term 'segment' in favor of something like 'beginning segment'.   In other words:\r\n\r\n'match an exact address or **beginning segment** of an address'\r\n\r\nI'd apply that to all the other prefix descriptions throughout the doc.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/151165869/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/151166644", "body": "Would it be possible to add an additional note to urge users to consistently use either '.' or '/' as the word separator and not mix both?  IOW if using '/' don't use '.' in the address and vice versa?\r\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/151166644/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/151167247", "body": "Line 312 essentially duplicates 310, or at least that was my impression on the read through.  Perhaps replace the description on 310 with the one in 312?", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/151167247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/151441999", "body": "\"my.+\" - did you intend to use '+' as a token?   I'd avoid using '+' as an example since in the future we may want to support MQTT compatible wildcards, which use '+' as a wildcard value.  ", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/151441999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/151509115", "body": "Yeah that seems likely.\r\n\r\nHowever on re-reading line 225 I'm not sure what it describes is actually correct. \r\n\r\nThere really isn't a standard for the format of addresses.  A proposal was made to define the '/' character as a separator for hierarchical addresses, but that never reached consensus.\r\n\r\nIn the meantime, dispatch tended to use \".\" as a separator when comparing address prefixes.  Later when the proposal surfaced dispatch was changed to allow either '.' or '/' as separators, preserving backward compatibility and anticipating future uses.\r\n\r\nThe new pattern matching feature follows the same behavior: either '.' or '/' as a separator.\r\n\r\nBut that complicates things a bit, since the code can't be sure of the intent when both '.' and '/' appear in a message's address.  Should '.' designate a token boundary, or should '/'?\r\n\r\nIn the end the router treats them both as separators *but* does not compare the separators themselves when pattern matching the address.  As an example, let's assume the following pattern is configured:\r\na.b/c.d\r\nDispatch's token parser is going to split this up into the following token sequence:\r\na, b, c, d\r\neffectively stripping away the separators before the comparison is done.\r\n\r\nSo the above a.b/c.d pattern would match the following message addresses:\r\na.b.c/d\r\na/b/c/d\r\na.b.c.d\r\n\r\nSo for the purpose of documentation:\r\n 1 both '.' and '/' are considered separators when determining words (tokens) both in the configured pattern and in incoming message addresses.\r\n 2 all '.' and '/' are ignored when comparing a message's address to a configured pattern.  This means a message with address 'a.b.c' will match the pattern 'a/b/*'\r\n 3 asterisk and hash are reserved characters and must not appear in a message's address (note: _address_, not _pattern_).  Therefore a message with a to: address of 'a.#.b' may not be routed properly.\r\n \r\n\r\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/151509115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/151715642", "body": "Yes I agree on that change - but there's a typo in that last paragraph:  / is not a wildcard, # is.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/151715642/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/161904967", "body": "I don't see why not.   I'll update the patch.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/161904967/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/161905217", "body": "Heh.  One a C coder, always a C coder...", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/161905217/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "grs": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/eed8bb65497b23e512072f5ea9fefd8ed73921ef", "message": "DISPATCH-901: authorization from remote auth service\n\nIf the client specifies its desire for the ADDRESS-AUTHZ capacbility, the authorization service, if it supports this, will return a\nset of permissions in the properties of the open frame. The properties will have an address-authz key, whose value is a map of address (or wildcard pattern) to an array of permissions.\nThe only permissions recognised at present by this patch are 'send' and 'recv'."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/f8a1c9c975f3f8d859a4d57ce0d705fe4bd12e68", "message": "DISPATCH-912: move setting rhost from connection-bound to remote-open event to ensure proton has retrieved the necessary info"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/484fc63b01ec3b6c28da59bedbee0c76fc3e216a", "message": "DISPATCH-823: better logging for failed connections"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/c52d8969e42cd857d755b197a5482dbe30b1e235", "message": "DISPATCH-775: use routers logging, fix some small leaks and avoid pn_proactor_release_connection"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/e8a9156489ac9c8d1d4e9c758b31440d5a443a60", "message": "DISPATCH-810: ensure qd- & qdr- connection objects are bound together before raising event for core thread"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/f146cfcd5be2a226c759fcacccac22b1704a8a06", "message": "DISPATCH-775: release connection from proactor when disconnected"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/374053b62390ded77ddd563fef1b5bd6833e3d25", "message": "DISPATH-775: Fix typo in error handling"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/e45842d437ab590c9b7a8ad2b449f276def5ac4e", "message": "DISPATCH-775: use ip in test rather than localhost"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/8002a395ec7158bf1892e7be5064f7ec9c3eb5e5", "message": "DISPATCH-775: only close connection if it has been created"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/c98cb9049bfe1eac7f5b02cc8ab2d81fdc18e129", "message": "DISPATCH-775: allow delegation of sasl authentication to a remote authentication service"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/bc40248a1698302c53de51aec33632af12dcd80a", "message": "DISPATCH-804: use addr if specified (though it is deprecated)"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/68114603", "body": "Maybe add 'ssl' to the option also.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/68114603/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/75927487", "body": "Typo? Should this be __sync_add_and_fetch?\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/75927487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/75930357", "body": "Ah, I get it now! Sorry for the noise!\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/75930357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/132280889", "body": "linkBalanced should be removed from the comment", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/132280889/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/132281323", "body": "Or perhaps even better would be amqp:not-found, since we are really saying that this is not a recognised address?", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/132281323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "bhardesty": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/e9f8502ea393720c451f99d9a2a34e3e2332c09a", "message": "DISPATCH-906 - Create procedure for integrating dispatch router with kerberos. This closes #241"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/70cb6b762bf32a5a6f3266449ae49f63b41e9adc", "message": "NO-JIRA - Add SASL plugin requirement to SASL setup procedure"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/e494da0a957d3cbbb5daaa802dd13e73e0ca4774", "message": "DISPATCH-875 - Document the pattern attribute. This closes #218"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/95c9463e247a26d1b7374992d7826214c2805b5f", "message": "DISPATCH-877 - Document new ciphers attribute. This closes #219"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/00d1ea2207711b409eb9ef1f0f582adb502b6456", "message": "DISPATCH-879 - Document how routers use alternate failover URLs. This closes #220"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/8500b072fbc7594696713059c995fd5b2b0cd0d3", "message": "Add initialHandshakeTimeoutSeconds to config ref. This closes #221"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/2f192d0a3c6ff3e579a2cfa063947b09a373642a", "message": "NO-JIRA - Add new book dir for dispatch router book; contribute doc improvements\nThis closes #200\n\n(cherry picked from commit 0a89a302f79d9ded74508863f5c8ce31ca0a13a2)"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/f44bfdcb3db5d3cb750197a70fd98a8e1338e6dd", "message": "Update qdmanage, qdrouterd, and qdstat man pages."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/344720878", "body": "Thanks @kgiusti. I made some updates based on your review.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/344720878/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/351103199", "body": "@ganeshmurthy The improved protocol attribute description looks good.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/351103199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/357062249", "body": "@enkeys I added a bit about the keytab attribute. \r\n\r\nI don't think we need to say anything about KRB5_CONFIG since it's specific to the Kerberos implementation (which is out of scope for Dispatch Router). AFAIK, you only need to set that environment variable if you put krb5.conf in a non-default directory (which would be part of the Kerberos configuration/implementation, not Dispatch Router configuration).", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/357062249/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/357282415", "body": "@jdanekrh @enkeys I updated the example keytab attribute. I just set it to the default location indicated in the Cyrus SASL docs (https://www.cyrusimap.org/sasl/sasl/options.html#gssapi).", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/357282415/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/151506496", "body": "That's correct - it's a typo. I fixed it (\"my.+\" is now \"my.*\").", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/151506496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/151542358", "body": "It sounds like I can just remove line 225 then. While it makes sense to just use a single delimiter character (i.e. either \".\" or \"/\" but not both), it sounds like Dispatch will still route messages correctly if the address and configured pattern use a mixture of both types of delimiters.\r\n\r\nInstead of line 225, I think we need a different statement about not using reserved characters in message addresses. What do you think about this (including the previous para for context):\r\n\r\n> A pattern matches an address that corresponds to a pattern. A pattern is a sequence of words delimited by either a `.` or `/` character. You can use wildcard characters to represent a word.  The  `*` character matches exactly one word, and the `#` character matches any sequence of zero or more words.\r\n\r\n> The `*` and `/` characters are reserved as wildcards. Therefore, you should not use them in the message address.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/151542358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/152050796", "body": "Done.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/152050796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/152050824", "body": "Done.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/152050824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/154166429", "body": "In later sections, we talk about setting the SASL mechanism by using the saslMechanisms attribute (for example: https://github.com/apache/qpid-dispatch/blob/master/doc/new-book/configuration-security.adoc#adding_sasl_authentication_to_incoming_connection). Rather than list them all in the doc, we just point to the official list from the Cyrus SASL doc.\r\n\r\nDo you think that's sufficient, or is there something particular about EXTERNAL that we should mention it as a prereq to setting up SASL?", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/154166429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/154185786", "body": "Yes, please do.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/154185786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/155831204", "body": "A couple notes about the description:\r\n\r\nI think it's most user-friendly to first define the attribute and then describe the syntax for using it. Something like this:\r\n\r\n> The TLS protocols that this sslProfile can use. You can specify a list of one or more of TLSv1, TLSv1.1, or TLSv1.2. To specify multiple protocols, separate the protocols with a space. For example, to permit the sslProfile to use TLS v1.1 and TLS v1.2 only, you would set the value to TLSv1.1 TLSv1.2. If you do not specify a value, the sslProfile uses the TLS protocol specified by the system-wide configuration.\r\n\r\nInstead of \"TLSv1\", it would be better to make the value \"TLSv1.0\". That would make it clear that it's referring to the 1.0 version, and not a superset of 1.x.\r\n\r\nAlso, we should define \"system-wide configuration\" - where would this be defined?", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/155831204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/155832041", "body": "Since the value is really a list of values, would it work to define the possible values in \"type\"? Then we wouldn't have to describe the permitted values in the description, making it simpler. Sort of like this:\r\n\r\n`\"type\": [\"TLSv1\", \"TLSv1.1\", \"TLSv1.2\"]`", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/155832041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "alanconway": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/33feac55c690a9b7c7e7e251deb076a14b5692f2", "message": "DISPATCH-893: Compile fails using libwebsockets 7\n\nUpdated cmake files to require libwebsockets 2.1.0, the earliest version known\nto work. If we need HTTP support on platforms that don't support it, we should\nreconsider our options."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/892a413f84753de859e5d84a425b241197e7efe1", "message": "DISPATCH-739: Fix invalid read valgrind error in tests.\n\nChanged server shutdown order so that context objects are not used after free\nby logger."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/4c98f54136c7e5c306be540d53be24423ece714e", "message": "DISPATCH-739: Fix memory leak in http server showing in unit tests\n\nMaybe not a leak in a deployed broker but fixed it anyway to keep tests clean."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/5738079016236efb02554c6cd4536c4d8295f59a", "message": "DISPATCH-739: Fix memory leaks in unit tests, missing frees\n\nAdd missing frees in tests."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/611f8b70628d65067129a639e8df693ecde8244a", "message": "DISPATCH-874: allow .json and .woff2 files to be served by console.\n\nAdded .json and .woff2 mime-types to the recognized list.\nAdded a default rule to serve unrecognized files as \"application/octet-stream\"\n\nNew file types required by the console should be added explicitly as browsers\nmay restrict what can be done with application/octet-stream files."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/e69478a4ebfd18f76bfd682329f11e7658a06a59", "message": "DISPATCH-846: Fix leak in qd_server_connection"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/96cbc159cfe9f7da3a867f759781e69e110e74e5", "message": "DISPATCH-846: Fix memory leak in router config.\n\nqd_dispatch_set_router_default_distribution() was not freeing its argument.\n\nAlso removed some other dispatch.c private configuration functions from\ndispatch-private.h and made them static."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/0e62bd8208207d70f1f827fce4674b8ca9aacd34", "message": "NO-JIRA: Demote \"aborting link\" log messages from NOTICE TO DEBUG\n\nIt is common (and not an error) for clients to close a connection or session\nwithout closing all the contained links first so this is not an important or\neven unusual event."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/5c243f25034888d74d004b9f56e3aaf3d1562130", "message": "NO-JIRA: Minor doc update - http listeners cannot accept plain AMQP."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/75cbe215a26e52b9de9eaa2efdb6d0bea4e44927", "message": "DISPATCH-777: Restore delayed-activation code in router core.\n\nRemoved in error, required to ensure that connections are not activated\nafter they have been deleted by the router core thread."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/b1f09d5ea8101f40f3df4db5b4c5d2ee00e6ef7e", "message": "DISPATCH-777: async-signal-safe shutdown of the reactor.\n\nPreviously the server was disconnecting the proactor inside a signal handler,\nwhich is not async-signal-safe and caused occasional crashes on shutdown.\n\nNow it only signals the proactor threads to stop. The main thread does required\nclean up after all other proactor threads are joined."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/d773cc8e5e5efba135bd9dea1dcdb682b4ff11e8", "message": "NO-JIRA: Remove libuv, libwebsockets from travis build\n\n- epoll proactor is now the default, no need for libuv\n- libwebsockets on travis is too old, tested on other platforms\n- enabled ccache to speed up compilation"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/bc50c1270848b973dfb50392c90a300a188ac102", "message": "DISPATCH-390: Add missing lock around policy counts"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/653b77b1fce06db5c000be8e6e03c0e372aee966", "message": "NO-JIRA: verify that a proactor is provided by proton"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/9828f201d0d6c12bfeccf07d7b545551d809f4b5", "message": "DISPATCH-757: Build dispatch on travis CI\n\nBuild libuv, libwebsockets from source - packaged versions on \"trusty\" are too old\nRunning without valgrind\n\nBuliding OK but seeing multiple test failures."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/04d871e0b67775f571401a92a2d6b7373e0c5f2c", "message": "DISPATCH-390: Fix const error in server.c"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/d9de2ba3f2e2d03df7c4c4cfbf63c93c285e415b", "message": "DISPATCH-390: Update server.c for change in PROTON-1470"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/b974b884a7f9ac7ba2d13508af21d779d4f84beb", "message": "DISPATCH-739: Fix double free bug, remove _to_free_ lists\n\nDon't defer freeing sessions/links, just ensure they are freed exactly once."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/16980f6703f0b2b03a320c89cad60cdf669770d7", "message": "DISPATCH-390: Restore HTTP using libwebsockets\n\n- single HTTP thread uses libwebsockets standard polling features\n- works with released libwebsockets, no patches required"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/20b06ac3452ae4ecdc21b577c164538d454de3a1", "message": "DISPATCH-390: common AMQP port name string to integer function"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/6d34045e9c715b1dc949b786e097aaf6bf22c4df", "message": "DISPATCH-390: centralize qd_connection setup logic"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/7fe0ac970b195a97c007174359d5d1f615d8d246", "message": "DISPATCH-390: Log process ID with \"Operational\" notice\n\nUseful for correlating logs with running processes or core dumps."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/6f56e289bec0db4a1de257883dc456a502c42fe7", "message": "DISPATCH-390: Convert dispatch to use pn_proactor_t\n\n- remove driver.h/c, server.c uses proactor API directly\n- update stop/start, signal handling\n- refactor server connector queue processing as PN event handlers\n- qd_timer using pn_proactor_timeout()\n- deferred calls use pn_proactor_wake()\n- drop qd_thread_t struct, use sys_thread_t directly\n- document new listen \"host\" semantics in schema\n- updated logging, NOTICE for key life-cycle events\n- merge qd_listener_t+qd_config_listener, qd_connector_t+qd_config_connector_t\n- remove dead code: work_ queue, a_thread_is_waiting, owner_thread"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/243194031", "body": "I would wrap this (with inline functions or macros to avoid function call overhead) so that the impl details can be changed by platform. I think these ops are gcc specific, they definitely won't work on windows. Check the qpid-cpp codebase it has an atomic counter impl that uses GCC, windows or defaults to mutex. Its C++ but you can do  something similar in C.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/243194031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/243251782", "body": "Yep - this looks great, I approve.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/243251782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/273889204", "body": "Needs  more testing, seeing some failures.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/273889204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/273901169", "body": "Fixed, had deleted on function called from python.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/273901169/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/68114202", "body": "I'd suggest: --verify-peer-name type=bool, default=true. Bool options with negative names are confusing and \"host\" is a bit vague - peer is more clearly the _other_ host. Also the help text is very long, maybe \"Verify the peer host name matches the certificate. Default true, setting to false is insecure .\"\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/68114202/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/126155671", "body": "Q: Why record fanout per-buffer? Fanout is per-message and buffers can be re-used with different fanouts in different messages. Can we avoid duplicating the fanout value from the message onto all its buffers? Maybe not - just wondering, it seems out of place.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/126155671/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/126155845", "body": "This comment is out of date", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/126155845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/126156980", "body": "Redundant, size_t is unsigned, it can never be < 0", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/126156980/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/126158278", "body": "Add a comment to explain these here - not obvious (to me) what they mean.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/126158278/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/126160704", "body": "Delete qd_message_cursor_buffer|offset - you don't need them with qd_message_cursor()", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/126160704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/126161603", "body": "Pity that we have to copy out data only to throw it away, but I think you are correct that we do need to do it. Maybe the AMQP spec has something we can use to abort an incoming message, but even if it does this code path is probably needed as a fall-back.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/126161603/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/126161795", "body": "Remove commented-out code", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/126161795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/126163415", "body": "FYI: instead of watching for PN_EOS, you can also check for (pn_delivery_pending(d) == 0 && !pn_delivery_partial(d)). They are equivalent, PN_EOS is correct - sometimes the pending/partial test is more convenient because it stays true on the delivery so you can check it any time, not just at return from pn_link_recv(). Only FYI, no need to change this code.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/126163415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/126164203", "body": "Comment typo: says \"false\" should say \"true\"", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/126164203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/126168949", "body": "No lock here? What's the protocol for protecting buffers between send/receive threads? We can't let threads work concurrently on the same buffer (in particular change the buffer size) We could lock the use of buffers, not just the enqueue/deque, or there are some other options.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/126168949/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/126170901", "body": "I wouldn't bother with the conditional lock  - if there's no contention the cost of the lock is small, and the condition introduces one more way for a future programmer to screw up the thread safety logic by mistake.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/126170901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/126172968", "body": "For streaming we need to start forwarding before completion.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/126172968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ted-ross": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/ac9c414f25d6238ed91b134291f00ef82bb5236c", "message": "DISPATCH-872 - Shortened the header for dropped unsettleds and added help text to the qdstat man page."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/b5dcaffac9d7af9a6afa0c6f23cf91b45b4d8209", "message": "DISPATCH-872 - PR from gmurthy - Added link counter for dropped-presettled deliveries.\nThis closes #226"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/918c8f7c7ba337e44aba96ebde60fd6e3d03c1c3", "message": "DISPATCH-885 - PR from gmurthy - Compose zero-length string/symbol/binary when a null pointer is provided.\nThis closes #223"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/44ee33fc864758177cdada83bcde145f6c1964b5", "message": "DISPATCH-884 - PR from gmurthy - Add support for configured SSL protocols.\nThis closes #233"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/3bf8cfe9c326a74a076cb7e1e3ff0cee43137d10", "message": "DISPATCH-900 - PR from gmurthy, remove references to unused management entity which was moved to the core agent.\nThis closes #235"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/5ca979d53c7761e36ff95052971c1009f29441fc", "message": "DISPATCH-905 - Added a general get-as-string facility for proton data elements.  Use this facility for the port field in the failover list.\nThis closes #237"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/16d60e78759ff425a77a5996df24f90393e0d355", "message": "DISPATCH_882 - Removed unneeded rejection of aborted deliveries."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/d5f279b8b85e8ee4378c195666824b13b327e39e", "message": "DISPATCH-888 - Added optimization for balanced distribution when a zero-cost link is found.\nHat Tip: Ganesh Murthy\nThis closes #227"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/c8c4587eb608e75f3240542005d5262f0b939fc3", "message": "DISPATCH-847 - Be more defensive in the use of link mask bits."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/97de78eeb8bafab8b51aa73cf6d2cc90b5a80429", "message": "DISPATCH-873 - Remove next-hop when new route to a node is via a neighbor link.\nHat tip to Mick Goulish for identifying the root cause of this bug."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/2046a259f330ea1db217aaf3563f29fbc4db98d2", "message": "DISPATCH-870 - Fix ref-counting on server connections so deleted connectors result in closed connections."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/a512c083342e497c3c461163fb0ffd946fe586d5", "message": "DISPATCH-867 - Added missing linkage from drained output buffer to restarting a stalled link.\nThis closes #215"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/ede8b029a322c0f208359ecb47365daab648552d", "message": "DISPATCH-865 - Don't account for delivery linkage when there is no link."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/6284b7a81b04e2db2d276a6eb24de5a952a2b3f4", "message": "NO-JIRA - Log version at startup.  Remove prefix text on 'qdrouterd -v' to make it easier for downstream to modify version text."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/46ebb4d8f525895cc19cf3dbab011f256b07b43c", "message": "Added delivery reference protrection from qdr_link_deliver* to router_node. This closes #213"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/121e4065ccfeec9cc6f54b0b624db655b36d1b8f", "message": "NO-JIRA - Updated master to version 1.1.0 after the 1.0.x branch."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/976bd25dd439d306b40a39ec0328038e32874189", "message": "DISPATCH-857 - Shut down HTTP server before the AMQP server."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/b887c9e9fdc6251021acaa09ddcffd360319d318", "message": "DISPATCH-829 - Per Chuck Rolke's suggestion, grouped bool elements together in message structures."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/956a5159942db179a4dd8325502e1287ebae1971", "message": "DISPATCH-829 - Fixed delivey leak in multicast no-path case.  Removed spurious TODO."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/fea60bc83210ab5ae714f346b4209f27fc807139", "message": "DISPATCH-829 - Added a multicast-truncated test"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/83a0b70e41a4056c90a6e665f3372259be48851e", "message": "DISPATCH-829 - Resolved the delivery under-counting problem."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/bb62ac7089f20410a1c7bbd01b769e73a0d594fd", "message": "DISPATCH-829 - Changed the way delivery ref-counts are accounted for with respect to pn_delivery references to qdr_deliveries.\nNote: I moved alloh*.h from src to include/qpid/dispatch."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/b1c88114b40827f68a3d407bea802097190385d1", "message": "NO-JIRA - Added a pointer check-before-dereference in container.c"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/9871fdbfccb749c410a9f5d2ed9784e542026233", "message": "DISPATCH-829 - Added labels and debug logs to diagnose delivery ref-count issues."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/653ed7c9249241ebddf3d21e26d89aaaacc005fa", "message": "DISPATCH-829 - Handle truncated messages on routed links."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/294baf3729766ecaf1874963e466b40918e56b5a", "message": "DISPATCH-829 - Abort only deliveries that are not receive-complete. Push out undelivered messages on inbound-link-close."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/3fd09218c5903cab840eb048a209edc90bf99d5d", "message": "DISPATCH-829 - Added a test for the abort capabilities (requires proton PR #123)"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/1e6164dc5e883a37ee4d68def880396c7d72e065", "message": "DISPATCH-846 - Fixed some memory leaks flagged by Valgrind"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/3f5c3aa9cf5369f2259886ae262e6486487fea24", "message": "DISPATCH-847 - Fixed Coverity issue 126591 (Improper omission of brackets)"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/abc1db841855f4758de3d4d93352e1638151a956", "message": "DISPATCH-847 - Fixed Coverity issue 162685 (Dereference null pointer)"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/eb877c8b246ce7807b3636a79a050eef41c565c2", "message": "DISPATCH-847 - Fixed Coverity issue 162688 (Null check after dereference)"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/d55ef962d7f6c8e8eacb051b5381c39884b2aef8", "message": "DISPATCH-847 - Fixed Coverity issue 162698 (Memory leak)"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/0ed04a2c335b59b580e35943d02b8112d0540ea2", "message": "DISPATCH-847 - Fixed Coverity issue 162701 (Dereference null pointer)"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/938cdfafa291388d9fc29e8050bb3723ca742d35", "message": "DISPATCH-847 - Fixed Coverity issue 181413 (Null-check after dereference)"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/f293015b3f3a41a1791fe39a500bd1d5e43461f1", "message": "DISPATCH-847 - Fixed Coverity issue 181416 (Use after free)"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/d0dcac4d9dd76f959b74fb8b17d4cef54bb2f1d5", "message": "DISPATCH-847 - Fixed Coverity issue 181417 (Use after free)"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/9556f5871545bac99594d31acf0257cc24a9f809", "message": "DISPATCH-847 - Fixed Coverity issue 181418 (Unreachable code removed)"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/272398ddc282da2e3751917c18e4e7f8a472ba42", "message": "DISPATCH-551 - Added a configurable timeout to close connections that don't complete the opening handshake after transport establishment."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/77d0738b05575f82bed8434759821fbac95445b6", "message": "DISPATCH-839 - Increased the big-object threshold from 256 to 2000"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/f8f2b0ae736e03d31a697ecd02dcdfd774f2bdeb", "message": "DISPATCH-835 - Split the link-cleanup logic into delivery cleanup and everything else cleanup.  Added a CT function to delete links so this is no longer spread across two threads."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/02ed034cdc5ecd57715d1fa57cacb4734094c3f1", "message": "DISPATCH-820 - Properly handle the lifecycle of router addresses that may have associated incoming links."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/d37f40caaff3cd45d6b5b1c8a54293aec13982b5", "message": "NO-JIRA - Added a rule in .gitignore for generated json files in policy tests."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/08b3678655f015aeacb62eb1466649adf788af0a", "message": "DISPATCH-584 - Implemented flood limiting based on known topology radius."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/3671d8c03cfe8a5844f0486831586b12ec299b5f", "message": "NO-JIRA - Make the OneRouterTest.test_connection_properties test recognize the correct connection if there are multiple connections."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/93972821f8b18b09a65d3cbe7bd58cc3d24ae5d9", "message": "NO-JIRA - Remove unreachable code - PR from Chuck Rolke\nThis closes #155"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/340538d717aada7aca8ee82460633baa86057c1a", "message": "NO-JIRA - Update CMakeLists files to use new Proton Core and Proactor packages"}], "pull_requests": [{"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/204", "title": "DISPATCH-845 - Added connection-scoped link-route destinations.", "body": "Link route destinations can be dynamically created for a connection based on a connection property in the OPEN frame.  The lifecycle of the link-route addresses tracks the connection.\r\n", "author_association": "MEMBER"}], "issue_comments": [{"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/146205391", "body": "This should not be a NO-JIRA commit.  You should open a Jira for this feature.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/146205391/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/155157739", "body": "On 11/09/2015 01:58 PM, Ganesh Murthy wrote:\n\n> Any idea where the code to handle the -h option is?\n\nThe --help option is handled by the optparse module.\n\n> Also, if -v is not available, the following line must be removed in tools/qdstat -\n> \n> parser.add_option(\"-v\", \"--verbose\", help=\"Show maximum detail\",        action=\"store_true\", dest=\"verbose\")\n\nThe -v option is valid as a modifier to other options.  \"qdstat -v\" is \nnot a valid command line as -v is not a standalone option.  \"qdstat -n \n-v\" is valid and will show more detail than \"qdstat -n\".\n\n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/apache/qpid-dispatch/pull/30#issuecomment-155155826\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/155157739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/164567660", "body": "I think you should raise a Jira for this, so this addition can be mentioned in the next release notes.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/164567660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/193769869", "body": "Please don't merge this patch.  The use of \"label\" as the name is going to cause a problem when DISPATCH-179 is merged.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/193769869/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/204449228", "body": "This looks good, feel free to commit it.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/204449228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/212044795", "body": "This looks good to me.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/212044795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/219496913", "body": "This looks good.  Please re-base to master and commit.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/219496913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/219497479", "body": "+1  Please re-base to master and commit.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/219497479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/231374207", "body": "Two points on this change:\n- There are no tests included\n- Does this change work in all cases?  Specifically, does the proper visibility occur on the ingress router as well as the other routers in the link's path?  Also, does this work for both sender and receiver links?\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/231374207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/241877320", "body": "I like this change very much (I had planned to do it myself eventually).  It would be better I think if rather than sprinkle the directives throughout the code, you could make a portable abstraction (similar to the threading module).  Even if the abstraction is made up of macros, that would be ok.  I assume that other compilers might use different syntax for atomic operations, and some might not support it at all and might need to revert to mutexes.\nPerhaps there should be a portable ref_count abstraction with increment and decrement-test-for-zero operations.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/241877320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/266739248", "body": "Dan,\n\nI committed a modified version of this patch yesterday.  Instead of \nprocessing the password at connector/listener setup time, it does it at \nssl_profile setup time.  This ensures that the password is interpreted \nonly once, eliminating the possible issues of re-processing.\n\n-Ted\n\nOn 12/12/2016 07:53 PM, Daniel Skarbek wrote:\n> dskarbek commented on this pull request.\n>\n>\n>\n>> +{\n> +    char *pw = ssl_profile->ssl_password;\n> +    if (!pw) return pw;\n> +\n> +    /* if the \"password\" starts with \"env:\" or \"env: \" then the remaining\n> +     * text is the environment variable that contains the password\n> +     */\n> +    if (strncmp(pw, \"env:\", 4) == 0) {\n> +        char *env = pw + 4;\n> +        /* skip the space if it is there */\n> +        if (*env == ' ') ++env;\n> +\n> +        const char* passwd = getenv(env);\n> +        if (passwd) {\n> +            free(ssl_profile->ssl_password);\n> +            pw = ssl_profile->ssl_password = strdup(passwd);\n>\n> Yes, this is replacing the value, and true, could cause problems if the literal value started with \"env:\".  Actually, the fix you mention would not be so great.  On the first time through the \"literal\" may or may not be handled depending on a subtle change in the code, and on the 3rd time, might have trouble or not.  I think that the \"env:\" and \"literal:\" keywords are supposed to be in-effect on the config file value, and should not apply to the env-var value.  That keeps it cleaner and simpler.  So, that would mean that I shouldn't re-write the ssl_profile value.  What do you think of just assigning the result of getenv() directly?  Can we change the ssl_password member to be a const char*?  Otherwise, I'd have to cast away const.\n>\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/266739248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/283417115", "body": "This change looks good to me.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/283417115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/292522745", "body": "I share Chuck's concern that this PR is introducing an alternative and redundant management access mechanism.  I would certainly prefer to add the desired metrics to the AMQP-based access mechanism that is already in place.\r\nOne of the advantages of the AMQP management mechanism is that it is routable.  With a single connection to a router in a network, a process can query data from all of the routers in the network (and eventually brokers as well).  Using the HTTP access point only allows access to a single router.\r\nIs there a way to bridge the gap between the AMQP management protocol and Prometheus?", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/292522745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/292525442", "body": "At the risk of contradicting my previous post, I would add that having an HTTP front end on management data might be a worthwhile enhancement for some use cases as long as it used the same data sources as the AMQP front end.  Mind would have to be paid to the security model for such HTTP accesses to management data.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/292525442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/333935322", "body": "Note that this feature is targeted at the 1.1.0 release.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/333935322/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/353419704", "body": "I see the same failures that are reported by Travis.  None of the python-based tests pass.\r\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/353419704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/38930178", "body": "Now that this is a public function, it should have a name that starts with \"qd_\".\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/38930178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/38930284", "body": "Is this include necessary?\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/38930284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/41256608", "body": "You can combine these into one statement:  ctx->uid = qd_server->next_connection_id++;\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/41256608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/41256741", "body": "We should set the context unconditionally on all transports.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/41256741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/41256762", "body": "Same comment as above.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/41256762/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/41256821", "body": "This should be called \"connection_id\".\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/41256821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/41256898", "body": "It would be more accurate to call this function \"qd_transport_tracer\".\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/41256898/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/41393944", "body": "Router B shouldn't need two inter-router connections.  One will do.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/41393944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/42527876", "body": "Why do you move the tests to the build folder when you could simply run them from the source folder here?  Then you could run the \"configured\" tests from the build folder and the non-configured ones from the source folder.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/42527876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/42528135", "body": "I think you should treat the username and password independently.  You shouldn't assume that there will always be both present.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/42528135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/44312255", "body": "The new information is misleading (-v should not be in there and -h should).\nRather than reproducing a subset of the already existing help, why not just add a line that says \"use --help for more information\"?\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/44312255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/45268045", "body": "Why do you need this?  The body is always an empty map.  I don't see any need to pass it into the core.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/45268045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/45271010", "body": "These constant strings are redundant with the ones below in the columns array.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/45271010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/45271118", "body": "This should be done outside the core.  The core isn't adding any value here.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/45271118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/45612666", "body": "I don't think this is needed.  The \"outer\" agent should register its callbacks once at initialization time.  It is not safe to register new handlers for each request that comes in and it's not necessary to repeatedly register the same handler.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/45612666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/45612985", "body": "I think a more descriptive name is needed here.  Something like qd_router_agent_on_message.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/45612985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/45614085", "body": "This function's signature suggests that it is simply checking the message body.  In fact, it also has the side effect of composing the error message for the response.  I think it would be better to stick with the simple check.  The calling logic will then be clearer to understand as it will either go forward with the request or create an error response based on the outcome of this check.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/45614085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/45614279", "body": "Rather than have a proliferation of nearly identical type-specific validation functions, why not do a more general check on the appropriate attribute-name array?  This way, you can write the logic once for all types.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/45614279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/46554871", "body": "Rather than duplicate this entry for both listener and connector, you could put this in the \"addrPort\" annotation.  Like addr and port, protocolFamily is common to both entity types.\n\nYou have a default of IPv4 in the connector.  That is inconsistent with the document string.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/46554871/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/46555717", "body": "You should include 0 as a valid option as well.  It has a specific behavior.  Likewise on connector.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/46555717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/47559159", "body": "Why not just set the maintainer to dev@qpid.apache.org ?\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/47559159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/47559389", "body": "This would not be necessary if you installed proton in /usr like you did with dispatch.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/47559389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/47559626", "body": "This is inconsistent with the dockerfile text.  qpid-dispatch is installed in /usr, not /usr/local (and proton should be as well).\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/47559626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/47560145", "body": "I don't think the username is required here.  If a username is used, it must be the username for the Docker Index subscription (not the apache or local username).  It's ok to omit the username in the image title if there's no plan to push the image to the Docker Index.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/47560145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/47560859", "body": "This might be a bit too much information for the readme.  We don't want to write a Docker tutorial.\nThis section, \"Customizing Docker files\", is a bit mis-named.  What is described does not customize the Dockerfile.  It simply changes the image to launch a shell so the user can make non-persistent modifications to the running image.  Note that any modifications that are made will be lost once the container is shut down.\nTo make a customized image is a bit more involved and is certainly beyond the scope of a Dispatch Router readme.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/47560859/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/52058434", "body": "Taking away this test removes the protection it provided and means that test_cursor may be referenced-as-null in the body of the following switch statement.  Here's a test case that I think may cause a problem with this change:  The body (from the tag forward) contains only E0 with no data following.  This is a malformed field, but it would cause next_octet to be called with a null cursor.\nA better solution would be to leave the test in place, but allow it to pass only if the tag is a 4x-class tag (i.e. zero length).\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/52058434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/52073887", "body": "This looks ok.  One minor change that's needed:  tag is an unsigned char, so tag_bit must be of the same type.  Also, 0xF0 represents 4 bits so tag_bit might not be the best name.  The spec calls it a subcategory.  Maybe use that.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/52073887/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/56070842", "body": "This seems a bit of overkill.  There's only one column that's updatable in this entity type.  Why allow all the non-updatable columns?\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/56070842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/56071049", "body": "There are constants defined for this.  Using the numeric literal will cause bugs later when columns are inevitable moved around.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/56071049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/57875819", "body": "It would be better to not add this private linkage between container and server.  Rather, put the signature for qd_connection_set_user into the public server.h file.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/57875819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/57876034", "body": "Why did you change these?  They were so much more readable before.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/57876034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/63245326", "body": "You removed the check of the return value of qd_bitmask_first_set.  If there is no bit set in the mask, bad things will happen.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/63245326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/64077033", "body": "What happens if there is credit _and_ drain mode?  Does the credit not get issued?\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/64077033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/70125810", "body": "The name of this option seems inverted.  Allowing a mismatch is insecure, no?  How about \"--ssl-verify-hostname\"?\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/70125810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/78806621", "body": "I think you are going to leak this iterator.  After the call to qdr_manage_create, you must free the name_iter.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/78806621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/79173208", "body": "This looks wrong.  Shouldn't it be if (!ssl_profile) ?\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/79173208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/79179430", "body": "I retract the previous comment.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/79179430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/80094430", "body": "You should add a comment to document this new method.\nWhat happens if this method is called with a length that is greater than the current iterator's length?\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/80094430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/80095086", "body": "Is this function even needed?  Why not use qd_field_iterator_prefix?\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/80095086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/80095980", "body": "I believe this function is not needed.   But for the review, there is a bug in this algorithm.  It will return 'true' if the iterator field is blank or a subset of the prefix.  For example, a key of 'x-o' will be incorrectly identified as a router annotation.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/80095980/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/80100058", "body": "Two things:  This function should be a \"qd_field_iterator...\" function, not a \"qd_address_iterator...\" function.  There is nothing address-specific about this operation.\n\nAlso, it might be clearer to call this \"qd_field_iterator_trim\" with an argument called \"new_length\".  This suggests that the length can only be reduced.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/80100058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/80685950", "body": "The CMake file already passes the version from VERSION.txt into the set of defined macros in config.h.  I don't think it's desirable to create yet another authoritative source-of-version that needs to be maintained manually on each release.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/80685950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/81816919", "body": "Might it be easier to explain this if the units were frames instead of octets?\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/81816919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/81817075", "body": "What will be do with the value 0?  Should we use channel_max to avoid this question?\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/81817075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/87849568", "body": "These attributes should have names that are more descriptive and should suggest that they are counters.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/87849568/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/87849801", "body": "DEFAULT is not a level that is used in raising logs.  It is only used in setting the enabled log threshold.  In other words, it should not be counted as it will always be zero.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/87849801/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/87849930", "body": "DEFAULT and NONE are not used in raising logs.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/87849930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/87850131", "body": "You have a type problem here.  qd_log_level_t can't be used as an index into an array since it is a bitmask.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/87850131/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/87851164", "body": "You shouldn't use update:true here.  This would allow a remote user to update the value of the counter.  This is a read-only quantity.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/87851164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/88894986", "body": "Why are there histograms for DEFAULT and NONE?  These will never be raised in an actual log.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/88894986/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/88895606", "body": "Each entity has a built-in \"name\" and \"identity\" attribute.  You should use these instead of adding a new one.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/88895606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/89379660", "body": "Why are you using fprintf when you should be using a log?", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/89379660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/89392215", "body": "This should be an integer, not a string.  Seconds since the epoch is more than sufficient granularity.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/89392215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/90902246", "body": "All of the callback's need to include the context argument (even it you don't use it in your handler).", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/90902246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/92030383", "body": "I think your memory management is correct.  This code actually replaces the \"env:VAR\" text with (a copy of) the contents of the environment variable on the first reference to the ssl_profile.  Subsequent references will then see the contents and won't re-query the environment.\r\nThere is one subtle issue with this.  If the password from the environment begins with \"env:\", the second reference to the ssl_profile will interpret the password as another environment reference.  To prevent this, the copy of the password taken from the environment should be prefixed with \"literal:\".  Alternatively, you could leave the ssl_profile unmodified and simply return the password from the environment.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/92030383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/92030610", "body": "This should definitely be logged.  It might be prudent to not include the password text in the log though.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/92030610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/92234050", "body": "Please move this back down with the other typedefs.  You can add this line into router.h to solve the compilation issue.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/92234050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/92234597", "body": "sasl_mechanisms is 0 if not specified.  That causes a crash here (easily reproducible by starting the web console).  If it's not present, this should insert a NULL into the body.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/92234597/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/92235068", "body": "There is an enumerated type for direction.  You should use this rather than passing strings around.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/92235068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/92235417", "body": "I think dir and role should use the enumerated types rather than arbitrary strings.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/92235417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/93043324", "body": "When you free the error record here, the pointer (now invalid) remains in the delivery record.  It could be referenced and possibly re-freed in the future.  I think the error record should be freed when the delivery record is freed.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/93043324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/93624041", "body": "You are going to get two on_link_opened events for receivers.  This means you are creating the same sender twice.  This one sender is used for both client-send and server-send operations.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/93624041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/93624286", "body": "Both the client and server receivers are established on the same connection.  Is this what was intended?  I would think that one connection would be the client and the other the server.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/93624286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/94648211", "body": "You can get multiple tests in one here just by replicating this test with different router addresses.  For example, you could have three tests:  0->0, 0->1, 0->2.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/94648211/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/94648343", "body": "You should include all of the counters here.  If the test times out, you'll want as much information as you can get.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/94648343/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/94648607", "body": "There's a race condition here.  What if you get credit on the sender before the dynamic receiver is fully attached?", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/94648607/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/94681419", "body": "The server is sending its responses on the client's sender!", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/94681419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/99370107", "body": "I believe this will leak one qdr_connection_ref_t each time it is run.  Why did you not use qdr_del_connection_ref?\r\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/99370107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/103748543", "body": "This declaration should be inside the if statement.  You are needlessly allocating stack space when logging is disabled.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/103748543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/103748680", "body": "I think the log would look better if the link id was at the beginning and the message repr was at the end.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/103748680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/103749521", "body": "I would recommend storing this in its bit-mask form here.  Then it only needs to be parsed once at configuration time.  This also allows you to isolate the string definitions and the conversion functions to a single .h/.c module.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/103749521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/103750047", "body": "You should move this out of server.c where it doesn't really belong.  Consider adding a message_trace.[ch] module for this logic.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/103750047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/103750421", "body": "It's confusing that \"log_message\" sometimes means a character string and sometimes means a bit-mask.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/103750421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/107224807", "body": "You are calling a non-CT function from within a CT function.  The non-CT function accesses pn_link_t structures that are unsafe to access from a thread that is not the IO thread that owns the connection on which the link flows.  This is very likely to cause memory corruption and crashes.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/107224807/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/107394882", "body": "Why is this necessary?  It looks like you are ensuring that both connected links have their own copy of the terminus name.  However, in the agent code, you get the terminus name from either the direct link or the connected link.  Isn't it sufficient to have the terminus name in only one of the connected links?", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/107394882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/122775613", "body": "You should assert here.  This must never happen.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/122775613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/122776057", "body": "What if these two deliveries weren't linked to one another?  You will cause a data corruption with no indication.  You should assert that the proper mutual linkage is in place before removing it and decrementing reference counts.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/122776057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/122776504", "body": "Now that I'm looking at it, a better API might be: qdr_delivery_t qdr_delivery_first_peer_CT(dlv) instead of start_peer.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/122776504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/122777702", "body": "You've lost the in_dlv->peer == 0 check", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/122777702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/123020082", "body": "The comments for qdr_delivery_{first,next}_peer are incorrect.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/123020082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/123356056", "body": "You could do this more elegantly like this:\r\n    return dlv->peer || DEQ_SIZE(dlv->peers) > 0;\r\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/123356056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/123356457", "body": "Minor point:  You repeat this line.  Why not do this once outside of the if-then-else.  The condition does not affect the backward linkage from out to in.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/123356457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/121759130", "body": "These containerId lines have no effect and are misleading.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/121759130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/121760200", "body": "For anyone trying to understand how this test works, this text is misleading.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/121760200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/121760979", "body": "Why is this receiver here?  It serves no purpose in the test.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/121760979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/121764581", "body": "Doing this blocking, synchronous operation in a reactive event handler is not a good practice.  The reactor is prevented from maintaining its connections for the entire duration of this function.\r\nThere is an example in system_tests_multi_tenancy (LinkRouteTest) that does what's needed to wait for the link-route to propagate within the reactive framework.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/121764581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/121765790", "body": "When handing an unsolicited incoming link-attach, this handler must copy the addresses from the remote to the local.  If you trace the operation of this test, you will see that the returning attach (from the initial attach to \"myLinkRoute\") does not contain an address.  This is a protocol violation and it is by luck that the link correctly transfers the message.\r\nThe system_tests_multi_tenancy/LinkRouteTest test can be used an an example of the correct way to handle a link-routed attach.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/121765790/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/124780487", "body": "self.route_container is a host address (0.0.0.0:<some-port>), not an AMQP address.  If you look at the trace of the test, you will see that the addresses in the paired attach frames are different.  This should not be the case.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/124780487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/124780999", "body": "Is this sleep really necessary?  Why do you need to allow more time for propagation when you have just verified that the propagation is complete?", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/124780999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/124781204", "body": "More information is needed here.   Which endpoint is the initiator of the link?  Which endpoint is connected as the route_container?", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/124781204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/132259033", "body": "This constant should not have \"_LINK_\" in it.  That implies that this is only for link-routing.  You should rename it \"QD_TREATMENT_FORBIDDEN\" because this feature is not relevant for link-routing.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/132259033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/132259545", "body": "Shouldn't this be called default_treatment?", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/132259545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/132260270", "body": "Does this do the right thing protocol-wise?  Does the router send an attach with NULL terminus followed by a detach?", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/132260270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/132261405", "body": "You should be using one of the AMQP-specified error conditions that is in the amqp.[ch] files.  It seems that the appropriate error condition is \"amqp:not-allowed\", not \"forbidden\" (which is an error code only for the management protocol).", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/132261405/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/139231310", "body": "Having a fixed-length string and later using strcat (not strncat) causes this to be a buffer/stack overflow vulnerability.  Please ensure that the failover_info buffer cannot be overfilled.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/139231310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/158315973", "body": "This 'if' is unnecessary.  Also, this test doesn't send pre-settled deliveries.  Why does it expect a count of dropped pre-settleds?", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/158315973/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "ChugR": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/2c60d30ad964e350c9ab8c17665bc442f9df0356", "message": "DISPATCH-898: Remove unimplemented attribute from schema and code"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/e2966e159d26ce3a0bc117ca003520ddeb15f055", "message": "DISPATCH-897: document vhostUserGroupSettings section\n\nRemove the standalone .txt description file and move the section\ninto qdrouter.json. Configuration files defining vhostUserGroupSettings\nobjects just use .json file format."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/90a8b62ff561348438aea4035c4ad7027f64232d", "message": "DISPATCH-829: outbound aborted messages must be marked send_complete"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/a1726fac6b8720476c66e908e4526a4f507f0952", "message": "DISPATCH-829: handle aborted messages"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/4be95cd6beb4f9f1f3b9cc402be9322a07da8a9d", "message": "DISPATCH-829: Sense messages received with abort status."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/69ee4b85f413bab6972867d0c3a91c8fb6f29959", "message": "DISPATCH-798: Description of maxSessionWindow in doc is wrong\n\nClarify what units maxSessionWindow uses and how is used internally.\nCorrect examples to use the setting correctly."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/b0fcd9a54a324e62a33e3117de3092139fe655ce", "message": "DISPATCH-828: Disassociate link from message to prevent callbacks"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/d9f0f0849940e8f77a6de251800cc6ce0d9da1de", "message": "DISPATCH-827: Increase size of message discard buffer"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/fd545d4b0c06c5d7e67431daa040e380679aa578", "message": "DISPATCH-807: Adjust sizes of q2 limits"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/e4038b8b412e98ea82b4eebc04e6a32eea4740ce", "message": "DISPATCH-807: Implement Q3 limits based on send session outgoing bytes"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/a3bb4c8dc86b5ddd3b5478a220c8f4aa8b3f9dda", "message": "DISPATCH-807: remove asserts for items that disappear regularly"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/fbe35e91cc0436482fd7531efed33fe8ee14ed4c", "message": "DISPATCH-807: Implement Q2 throttling\n\n* Add container accessor for link->node->context\n* qd_message_send signals when enough room for q2 resume is available\n* Add message accessor for receiving qd_link\n* Promote server connection_wake to public\n* Use macros to name LOCK, UNLOCK functions for legibility\n* Sense and set q2 holdoff in message_receive\n* Sense and clear q2 holdoff in message_send\n* Add deferred callback for AMQP_rx_handler"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/e8b1c057c3873e18c03d3922cb773817b72751dc", "message": "DISPATCH-807: Remove delivery arg from delivery_handler interface\n\nContainer delivery handler has a qd_link arg and from that the\npn_link and the current pn_delivery may be derived."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/51e2bf8fa8c24eabefd4a2fb66451779a4e8f199", "message": "DISPATCH-807: move q2 holdoff flag from message into content\n\nRandom senders free message content buffers. Each sender must be\nable to sense the receiver's holdoff state to know when to\nschedule a callback. Message content is common to the receiver\nand to all the senders."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/71aaf446cfcb983e4c5cb7ddb433481dfc1cddcf", "message": "DISPATCH-807: Define limits, state, and accessors for Q2 input holdoff"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/fa2a4632db9804f574af4e4763677f11ae50c1af", "message": "DISPATCH-825: get rid of poorly conceived EOS assert"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/b6e10668a59fc3953698ce1fcc27f45b307276c3", "message": "DISPATCH-825: Fix interlocking between message send and receive\n\nDon't allow a buffer on the message buffer chain that might be removed.\nUse a content-based pending buffer instead.\nDon't release message lock between adding final buffer and setting\nreceive_complete flag."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/2def0a9b444288cc1c87f80b6b80e64bd59f478c", "message": "DISPATCH-759: Move freeing message and iterator out of core thread\n\nSome of delivery deletion requires core context and that part stays."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/50637b770400e106bfb1c2e2ad7c57f8f8b2321e", "message": "DISPATCH-760: Change magic numbers into formal constants\n\nRouter message annotation uses some of map keys and will at most\nuse QD_MA_N_KEYS annotation entries.\n\nThe longest key strlen is QD_MA_MAX_KEY_LEN bytes.\n\nRouter message annotation keys are at the end of the annotation\nsection. Code uses a sliding window to avoid searching each key\nfor the router prefix that indicates a router annotation. The\nsize of the sliding filter is QD_MA_FILTER_LEN map entries.\n\nWhen QD_MA_FILTER_LEN is larger than QD_MA_N_KEYS then the extra\nspace may hold a future router version's new keys and successfully\nstrip them from the input stream."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/9672b71912f50a18df0ce392e8775077336b5553", "message": "DISPATCH-760: remove strip flag\n\nThe flag is only set false and is not needed."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/425c898f623b973d30e98e1e971c70faff944da0", "message": "DISPATCH-760: Prevent user anno's from being considered in routing logic\n\nAlways provide four routing annotations by padding if necessary."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/40cb7c1ef8811b1a948f9233cd99e128d3089c15", "message": "DISPATCH-760: improve annotation V0 logic"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/b321fa26579470107fbeadc3815488155db273fd", "message": "DISPATCH-760: don't re-strip inbound annotations"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/cd7d5128ea9ece90ce1236ad027f5c4f448656df", "message": "DISPATCH-760: Fix inbound annotation stripping"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/95a05563a71cba7a46ce5f462a89e4f6b0e610d7", "message": "DISPATCH-760: Get self tests going\n\nGet rid of is_interrouter flag in favor of existing strip_annotations flags.\nPass strip_annotations_in through message to parse function."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/3b05873fcd0f04fda3682e42b024be0ff60babca", "message": "DISPATCH-760: compare key names using strcmp not iter_equal"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/21014c6e9f8dd2ea05551f341487a9d486c074cd", "message": "DISPATCH-760: Message handling uses new scheme"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/b67b2013fd6c666c80119704821b22c8ee431257", "message": "DISPATCH-760: Add new annotation parser"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/7f650d8f9f3106942201b0b6ddc7eb4fe434a9a9", "message": "DISPATCH-760: Add prefix search functions that use iterator pointers"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/cf2c76a924de2a487a92d294b2f2de39506a30ee", "message": "DISPATCH-760: promote pointer_t to public qd_iterator_pointer_t"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/6e8b56e5b5b7b2a5ea1e65b34c2f93c885bbb599", "message": "DISPATCH-760: add opaque compose map item insertion functions"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/1c3b0dd6f2e64718242c3da152ae56312ab2d365", "message": "DISPATCH-760: accessor for connection status: interrouter vs user"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/592553d7c4d83ed6889ceacac1a21612f91ac8fb", "message": "DISPATCH-784: Add test that provokes the failure and demonstrates the fix\n\nDelivery annotations are called 'instructions'. Of course!\nFailure mode requires delivery and message annotations."}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/595277845cf13dd8fd7b804c99d0054f897c8481", "message": "DISPATCH-784: Delivery annotations are not propagated by router\n\nThis is not an issue if forwarded messages have no delivery annotations.\nWith delivery annotations then random bytes are placed in output\nmessage."}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/148835284", "body": "How do we manage these credentials internally? Or when viewed through the management interface?\nWill 'qdmanage query' show the credentials in plain text?\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/148835284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/149681423", "body": "I tried this new branch and I think it's better for tests (*.py) all to end up in the <build>/tests folder.\nAt first the test failed. The problem was that the *.pyc files are all in the <source>/tests folder and there was a stale system_tests_sasl_plain.pyc that was running.\nIf all the .py files are in the build folder then the source is pristine and the build artifacts from one build are not interfering with another build.\nEither way the new test passes for me on Fedora 21.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/149681423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/292294285", "body": "This patch adds a competing statistic for one that already exists. Going forward it would require a completely redundant set and every statistic would be counted twice. That's not desirable for the long run.\r\n\r\nAnother approach might be to hook up the http-libwebsockets to the existing statistics and then to export them in the desired format. The existing management database has configuration data and runtime statistics together. See https://github.com/apache/qpid-dispatch/blob/master/python/qpid_dispatch/management/qdrouter.json.readme.txt \r\n\r\nThis would be more work to hook up the the metric_manager as the code would have to hunt for all the values where they exist today. But in the end the resulting reports would have identical descriptions and values reported by qdstat and the other management tools.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/292294285/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/310120058", "body": "Well spotted. That's a mistake from a failed merge conflict. Will fix.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/310120058/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/311665940", "body": "The straight new V2 method offers about a 35% message rate improvement over the existing method that shipped in 0.8.x. However, the new way of doing the original method offers a 25% improvement. I'm withdrawing this PR and working on better processing of \"the old way\". \r\n\r\nKeeping the old annotations eliminates incompatible versions V1 vs V2, reduces code clutter, eliminates peer version detection, and simplifies testing.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/311665940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/329874735", "body": "Merged through another branch", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/329874735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/81838905", "body": "There should be a comment that says if you specify zero then you get the default number. Using channel_max is awkward in its own way: if the setting is 1 then you get 2.\nThere is an identical setting in policy that already used the 1..N numbering (and not 0..N-1). They ought to be the same either way.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/81838905/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/81838943", "body": "Good suggestion. The setting down to proton would be <this setting value> \\* max-frame-size octets.\nThere is an identical setting in policy that operates this way, too. Again, they ought to be the same either way.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/81838943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/129305989", "body": "after ZEROing the content setting any value to 0 or false (seven places) is a waste. Maybe change the assignments to asserts if you don't trust the ZERO.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/129305989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/129306348", "body": "cut-paste issue. This function sets something and returns nothing.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/129306348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/129306967", "body": "Is this called with a lock held? Otherwise probably needs to be atomic increment.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/129306967/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/129307766", "body": "atomic inc?", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/129307766/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/129308722", "body": "prefer a 'qd_field_location_t *' return and not a copy of the whole struct", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/129308722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/129318215", "body": "qd_iterator_pointer_t might be more appropriate for a pointer into buffers. field_location has baggage that is not needed.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/129318215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/138710888", "body": "This assert is a mistake. Between sensing it a moment ago and now it may have become true.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/138710888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/145424345", "body": "For performance with smaller cache use it would make sense to group the bools together and not split them with elements that have alignment requirements.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/145424345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "jdanekrh": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/e584a3ebaaccca545ec3a716ad2eddce91b3a06b", "message": "DISPATCH-809 Add options to enable Sanitizers to CMake build\n\nTested to work with gcc 5.4.0, 7.1.0 and clang 4.0.1"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/60d3c873fc1a4b12dc92f4cdef90f7340c204bfb", "message": "NO-JIRA Silence clang 4 error: use of GNU statement expression extension\n\nThis fixes the following kind of warnings\n\n/home/jdanek/Work/repos/qpid-dispatch/src/posix/threading.c:147:5: error: use of GNU statement expression extension [-Werror,-Wgnu-statement-expression]\n    assert(result == 0);\n    ^\n/nix/store/qy94v105wag3z9rgy1rb34zk0x20lkwj-glibc-2.25-dev/include/assert.h:95:6: note: expanded from macro 'assert'\n    ({                                                                  \\\n     ^"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/0b07ebd23e86e0d9e64ab697e956712b00362e62", "message": "NO-JIRA Fix alloc-size-larger-than warning from gcc 7\n\nThe following warning is fixed by this commit\n\n```\n/home/jdanek/Work/repos/qpid-dispatch/src/entity.c: In function \u2018qd_entity_set_stringf\u2019:\n/home/jdanek/Work/repos/qpid-dispatch/src/entity.c:235:10: error: argument 1 range [18446744071562067968, 18446744073709551615] exceeds maximum object size 9223372036854775807 [-Werror=alloc-size-larger-than=]\n     char buf[len+1];\n          ^~~\n/home/jdanek/Work/repos/qpid-dispatch/src/entity.c:235:10: note: in a call to built-in allocation function \u2018__builtin_alloca_with_align\u2019\n/home/jdanek/Work/repos/qpid-dispatch/src/entity.c:235:10: error: argument 1 range [18446744071562067968, 18446744073709551615] exceeds maximum object size 9223372036854775807 [-Werror=alloc-size-larger-than=]\n/home/jdanek/Work/repos/qpid-dispatch/src/entity.c:235:10: note: in a call to built-in allocation function \u2018__builtin_alloca_with_align\u2019\ncc1: all warnings being treated as errors\nmake[2]: *** [src/CMakeFiles/qpid-dispatch.dir/build.make:273: src/CMakeFiles/qpid-dispatch.dir/entity.c.o] Error 1\nmake[2]: *** Waiting for unfinished jobs....\nmake[1]: *** [CMakeFiles/Makefile2:982: src/CMakeFiles/qpid-dispatch.dir/all] Error 2\nmake: *** [Makefile:141: all] Error 2\n```"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/226187874", "body": "@ganeshmurthy What do you think about my\n1. Add a Port type to python/qpid_dispatch_internal/management/schema.py, do the conversion to int as part of validation.\n2. Convert port to int in python/qpid_dispatch_internal/management/agent.py in ListenerEntity and ConnectorEntity, either in validate, create, or init method.\n3. Catch the error code in qdpn_listener and qdpn_connector and do a if strcmp(port, \"amqp\") ... there, Or call into Url.Port() in Python to avoid code duplication.\n\ndilemma? Is one of these preferable? I went with 2, but other may make more sense. Or surely even other options could be suggested.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/226187874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/344372894", "body": "AsciiDoc would've been even better. GitHub can render it, and Dispatch documentation either is or soon will be in AsciiDoc. https://gist.github.com/dcode/0cfbf2699a1fe9b46ff04c41721dda74", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/344372894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/151467622", "body": "I think the '+' is a typo and '*' was intended.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/151467622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/161090032", "body": "Probably not `/tmp/`, though. That would be silly thing to do in actual deployment for the fact that RHELs auto-delete old files under `/tmp`. There are AFAIK supposed to be permissions related security issues around using /tmp, but I am now unable to find more on this.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/161090032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "scholzj": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/40f1005c4aa0b4c9b74fbde0d9ad65050b8328d7", "message": "DISPATCH-737: Empty string as allowed_mechs is interpreted as no mechs allowed. Use None instead and Proton will select the best appropriatte mechanism"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/e0bbd3e2b739f8f813f7cd57a0482d8da9b94be1", "message": "DISPATCH-737: Take username and password also from the URL"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/6e09494502b9abd3d56f32a782b28e366de8da03", "message": "Use proper error condition when the link is denied"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/commits/191843190f7a535ff707a5209a166248f24e64aa", "message": "Use _qd_policy_deny_amqp_sender_link when denying sender link"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/164594810", "body": "I think the idea is good for Dispatch development and testing. But the images are IMHO not really sufficient for some \"more serious\" use (because they are always based on the Git master, because they contain all the compilers which are not necessary to run the image etc.). Maybe the README.md should be more clear about that, so that nobody takes image built using these docker files and uses it in production?\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/164594810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "enkeys": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/217", "title": "NO-JIRA - Change format of README from ReStructuredText to AsciiDoc", "body": "- Renamed README to README.md\r\n- Added badges for Travis build status and Apache 2.0 license\r\n- In README\u00a0moved 'Dependencies' under 'Building and testing'", "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/344366416", "body": "I did not notice than CMakeLists depends on this README. Other changes will be needed. ", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/344366416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/344974703", "body": "I create update and Markdown was changed to AsciiDoc. It was needed update CMakeLists.txt from README to README.adoc. \r\n(Travis CI build fails on system_tests_autolinks and mvn apache-rat:check)", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/344974703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/356869052", "body": "We are trying to setup Kerberos for qpid-dispatch and it looks, that there in /etc/sasl2/qdrouterd.conf is not mentioned option for keytab.\r\n`keytab: /tmp/keytabs/server.keytab`\r\n\r\nIt is probably not required but it's needed to provide principal somehow. I think that should be possible do it with external command:\r\n`kinit -k -t /path/file.keytab myprincipal`\r\n\r\nThe next important think what's work for us is providing environment variable KRB5_CONFIG before qdrouterd.\r\n`KRB5_CONFIG=/tmp/qdrouterd_krb5.conf`\r\n\r\nElse without set KRB5_CONFIG, qdrouterd get for every connection:\r\n`SERVER (info) Connection from 1.2.3.4:56468 (to 0.0.0.0:amqp) failed: proton:io:sasl_error SASL(-1): generic failure: GSSAPI Error: Unspecified GSS failure.  Minor code may provide more information () (Failed to authenticate client [mech=GSSAPI])`\r\n(My explanation is that cyrus-sasl/gssapi can't know about realms.)\r\n\r\nSo our qdrouterd_krb5.conf wit IPA conf:\r\n```\r\nincludedir /etc/krb5.conf.d/\r\nincludedir /var/lib/sss/pubconf/krb5.include.d/\r\n\r\n[logging]\r\n default = FILE:/var/log/krb5libs.log\r\n kdc = FILE:/var/log/krb5kdc.log\r\n admin_server = FILE:/var/log/kadmind.log\r\n\r\n[libdefaults]\r\n default_realm = example\r\n dns_lookup_realm = false\r\n dns_lookup_kdc = true\r\n rdns = false\r\n ticket_lifetime = 24h\r\n forwardable = true\r\n udp_preference_limit = 0\r\n default_ccache_name = KEYRING:persistent:%{uid}\r\n\r\n[realms]\r\n example = {\r\n  kdc = ipa-server.example:88\r\n  master_kdc = ipa-server.example:88\r\n  admin_server = ipa-server.example:749\r\n  default_domain = example\r\n  pkinit_anchors = FILE:/var/lib/ipa-client/pki/kdc-ca-bundle.pem\r\n  pkinit_pool = FILE:/var/lib/ipa-client/pki/ca-bundle.pem\r\n}\r\n\r\n[domain_realm]\r\n .example = example\r\n example = example\r\n ipa-server.example = example\r\n\r\n[dbmodules]\r\n  example = {\r\n    db_library = ipadb.so\r\n}\r\n```\r\nWhere \"example\" is TLD so can be used example.com division.example.com etc.\r\n\r\nAnd we still are not able to provide any msg through (sender -> qdrouterd -> receiver). But connection/results looks more promising.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/356869052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/161148398", "body": ":+1: true @jdanekrh ", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/161148398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "lulf": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/111", "title": "DISPATCH-476: Add support for groupId property for matching link routes and auto links", "body": "This is a proposed alternative for supporting a mapping of multiple connections - multiple link\r\nroutes/autolinks by grouping them on a 'groupId' identifier. The corresponding group is selected based on a connection property 'qd.route-container-group'.\r\n\r\nWe have discussed this approach previously, and somewhat decided that we should take a different approach. I wanted to implement this approach as a way of learning more of the router internals, so consider this PR a POC that you can close if you think this feature is not useful, though I do think it gives a lot of flexibility with little increase in complexity.", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/242024825", "body": "@ted-ross Good idea! I've updated the PR with a header for atomic operations that supports c11, gnu/clang builtins and uses mutexes as a fallback for other compilers. It might also be that the flags checked for GNUC and clang could be refined somewhat, but I think these builtins have been a part of those compilers for a long time.  I don't have access to visual studio, so I haven't tested that.\n\nIt's not pretty, but I've tried to create as little overhead for this abstraction as possible. I wasn't sure if this should be in the public api or maybe in some internal header.\n\nA generic ref_count/smart pointer abstraction can be built using this as the next step if desired.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/242024825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/243235427", "body": "@alanconway i think you might be commenting on an outdated diff. Look at the 'files changed' tab.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/243235427/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/292456087", "body": "Thank you for your comments. My example metric was perhaps too simplicic, apologies for that. Here are more examples of the metrics I'd like to be able to provide:\r\n\r\n* Counting the number of connections made (tagged with container id) in total, even if they are not active now\r\n* The number of failed connection attempts, link attaches etc.\r\n* Internal router errors of different types (could be non-amqp specific)\r\n* Latency metrics (time spent in core thread, in I/O thread etc), possibly as a histogram (not supported in this example API, but part of the prometheus metric spec: https://prometheus.io/docs/practices/histograms/)\r\n* Ability to report quantiles and histograms\r\n\r\nIs this information that I can retrieve in the same way as qdstat or specify in the management.json?  My impression was that qdstat only allowed for 'current state' type of metrics. If we can represent the above using management, I agree it could be better to use that.\r\n\r\nHowever, there is also the question of the impact of collecting metrics (tradeoff between quering for the metrics vs. the cost of reporting the metrcs). Reporting a metric explicitly may scale better, since a counter can be incremented and queried without locking in the common case. Correct me if I'm wrong, but my impression was that management operations either has to run in the core thread or do some locking?\r\n\r\nWould an alternative here be to have management/qdstat retrieve the metrics from the metrics manager? This would resolve the concerns of reporting metrics twice, and could also potentially enrich the qdstat output with values from histograms etc.\r\n\r\nFor reference, here is the document describing the format: https://prometheus.io/docs/instrumenting/exposition_formats/\r\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/292456087/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/334703601", "body": "If printing the handle on that log level is too verbose, I can change the patch to mask it on the trace  log level", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/334703601/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/75929783", "body": "No, i didn't find an atomic assign, but come to think of it, i think just regular assignment should work. This was just a workaround I did without thinking.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/75929783/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/99380500", "body": "Agreed, I think I didn't know about that one. Just pushed an update.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/99380500/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "asfbot": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/76440015", "body": "Robbie Gemmell  on dev@qpid.apache.org replies:\nTesting comment via email.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/76440015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/164851114", "body": "\"Gibson, Jack\"  on dev@qpid.apache.org replies:\n+1 on not being for production.  There are number things besides what has\nbeen pointed out that we=B9ve learned from running dispatch on Docker such\nas parameterization, config injection, security (both image & SSL)  that\nneed to be addressed.  Though I am really, really happy the community is\ndoing so I don=B9t have to going forward. That being said, I hope y=B9all\ndidn=B9t start from scratch on these ;)\n\nJack Gibson\nChief Architect\nCore Payments Platforms - PayPal\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/164851114/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "eric2a": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/230053828", "body": "password attribute can take an env variable or literal value.\npassword: env:string\nor\npassword: literal:string\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/230053828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "dskarbek": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/260016642", "body": "@ganeshmurthy Ted had mentioned that he pulled my commits and was getting a seg-fault on exit.  I haven't been able to reproduce that, and can't see any change that would be causing that just by code inspection.  Can you confirm this issue and let me know how to reproduce?\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/260016642/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/260033206", "body": "Hmm\u2026 I wonder how it compiled on my machine?\n\n-Dan Skarbek\n\nFrom: Ganesh Murthy notifications@github.com\nReply-To: apache/qpid-dispatch reply@reply.github.com\nDate: Friday, November 11, 2016 at 11:08 AM\nTo: apache/qpid-dispatch qpid-dispatch@noreply.github.com\nCc: \"Skarbek, Daniel\" dskarbek@paypal.com, Mention mention@noreply.github.com\nSubject: Re: [apache/qpid-dispatch] Fix memory leaks (#108)\n\nI was able to successfully merge your code to my local master but ran into a compile issue.\n\nIn file included from /home/gmurthy/opensource/dispatch/include/qpid/dispatch/ctools.h:27:0,\nfrom /home/gmurthy/opensource/dispatch/include/qpid/dispatch/container.h:35,\nfrom /home/gmurthy/opensource/dispatch/src/dispatch_private.h:40,\nfrom /home/gmurthy/opensource/dispatch/src/router_core/router_core_private.h:22,\nfrom /home/gmurthy/opensource/dispatch/src/router_core/route_tables.c:20:\n/home/gmurthy/opensource/dispatch/src/router_core/route_tables.c: In function \u2018qdr_del_router_CT\u2019:\n/home/gmurthy/opensource/dispatch/src/router_core/route_tables.c:353:17: error: \u2018qdr_node_t {aka struct qdr_node_t}\u2019 has no member named \u2018maskbit\u2019; did you mean \u2018mask_bit\u2019?\nassert(rnode->maskbit == router_maskbit);\n\nFix is easy enough (missing an underscore in maskbit)\nassert(rnode->mask_bit == router_maskbit);\n\nAfter the fix, the code compiled and I was able to run all unit tests successfully. I did not see any segfaults.\n\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://github.com/apache/qpid-dispatch/pull/108#issuecomment-260031465, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ADfgn1NcK3ynL9pbKhI5AXnxGWahHo8Pks5q9L0egaJpZM4KlQvY.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/260033206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/266827941", "body": "Ok, that makes sense.  Thanks.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/266827941/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [{"url": "https://api.github.com/repos/apache/qpid-dispatch/comments/20189814", "body": "why can't proton do the decref?  Would be much better to have them be parallel.  If there's a good reason that Proton can't take care of this, then that should be stated here as well.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/comments/20189814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/comments/20189919", "body": "So, then, what reference from Proton are you talking about?  This is a reference counting scheme, so there must have been an extra \"inc-ref\" that you are accounting for here.  Where does that inc-ref come from, why doesn't this dec-ref parallel it?", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/comments/20189919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": [{"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/86036444", "body": "this is a bug.  I've got an update to the commit that fixes this which I haven't pushed yet.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/86036444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/86455403", "body": "wasn't sure what the best function name would be here.  Let me know if you want a different name.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/86455403/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/86644159", "body": "What do you think about passing the buffers through the action so that the action method can free them when it is done?\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/86644159/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/87628769", "body": "yes, the change here is to group it closer together with where it is being used and to make sure to free it before the CHECK() call happens.  Otherwise, CHECK might cause the method to be exited before the memory is freed.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/87628769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/87629907", "body": "Yeah, I tried it that way also.  The advantage of this is that I can pass in NULL to cause the memory to be freed.  But, the copy in may be the better way.  Only issue, is if you look at the two places this is being use, one is passing strdup, so no problem there, the strdup could just happen inside the method.  The other one is passing the result of qd_entity_opt_string().  That also returns newly allocated memory, right?  So, I'd have to catch that return separately, pass it in and then free it.  And, we'd basically be doing a wasted extra alloc/free.  That didn't seem so nice.  So, that's why I tended toward having this internal method just manage the setting of the pointer and ensuring that prior pointee's are freed.  And, of course, that's why I  commented the method as taking ownership of the memory.  Let me know if you prefer the other approach.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/87629907/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/87630081", "body": "Yeah, I agree this is not the most pretty solution.  But, wasn't sure how else to handle it.  Happy to hear about a nicer approach.\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/87630081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/91814838", "body": "Hmm, or, if I'm correct that the config->ssl_password is never directly free'd, then I could just pass back the static getenv() returned string as the value (except I'd have to cast away const).  Then I don't have to change the string held in ssl_profile.  Thoughts?  Is my memory management correct here (and below) that the config->ssl_password is a reference to memory that it doesn't own and free is not called on it?", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/91814838/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/91815006", "body": "or, would you rather just return the password string as is and not register an error in-case it is an actual password?  If it is referring to an env var that missed getting set there's next to zero chance it will work, so better to catch the error sooner at the source so we can log it appropriately, but this does mean that someone using \"env:foobar\" as a password will suddenly stop working.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/91815006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/91815078", "body": "Not a problem unless I'm wrong about the memory management of this pointer.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/91815078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/92076291", "body": "Yes, this is replacing the value, and true, could cause problems if the literal value started with \"env:\".  Actually, the fix you mention would not be so great.  On the first time through the \"literal\" may or may not be handled depending on a subtle change in the code, and on the 3rd time, might have trouble or not.  I think that the \"env:\" and \"literal:\" keywords are supposed to be in-effect on the config file value, and should not apply to the env-var value.  That keeps it cleaner and simpler.  So, that would mean that I shouldn't re-write the ssl_profile value.  What do you think of just assigning the result of getenv() directly?  Can we change the ssl_password member to be a const char*?  Otherwise, I'd have to cast away const.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/92076291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/92076465", "body": "Oh, you mean for the case where that isn't an env variable, but actually is part of a password?  Hmm, that's true.  though, it seems like it would help you understand what is happening faster if we log it.  Is the log file less secure than the config file?  Cuz, in that case, they already have the password in the config file.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/92076465/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "mgoulish": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/265567222", "body": "Something is badly messed up here, even though the diff looks correct.  I will delete this branch and try again.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/265567222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/266524114", "body": "This is not working like I thought.  It was using the address from the previous test.  When I corrected that, it no workee.   Looking into it...", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/266524114/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/268615392", "body": "wtf", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/268615392/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/301793319", "body": "closing to replace with new PR containing 3rd test.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/301793319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/305298130", "body": "I had an 8-in-100 failure rate suddenly appear on test #3 -- so... I made on_sendable handling smarter and that gave me 4-in-100 failure rate -- all on teardown only.    I then changed a little bit how all four tests shut down -- borrowing an interesting line from another test (null out the timer after clearing it) -- and now I have  0 failures in 400 iterations -- also no teardown failures.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/305298130/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/305498377", "body": "WAIT\r\n\r\nI just had a failure on my tests while running them in the context of a full \"make check\" -- investigating.....", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/305498377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/313751542", "body": "new one coming shortly...", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/313751542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/327601009", "body": "I will file a new PR with a single commit -- re-written to use reactor::event_injector  technology.\r\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/327601009/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/327893921", "body": "Don't take this yet!   Ganesh just found my mistake in the router C and D route-container addrs.\r\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/327893921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/329176071", "body": "closing to make way for new rebased PR.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/329176071/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/329488689", "body": "I need to improve error message in one place. brb.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/329488689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "pmoravec": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/296378700", "body": "This approach (deep copy of the list and calling `.remove`) might be inefficient for long lists. If this can be an issue, some different approach shall be used, e.g.:\r\n\r\n    while len(self.mobile_addresses)>0:\r\n        self.unmap_address(self.mobile_addresses[0])\r\n", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/296378700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/296959767", "body": "Rebased the PR to more efficient fix.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/296959767/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "philfest": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/357280275", "body": "Nicely done @bhardesty. Looks ready to merge (from a docs pov) to me.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/issues/comments/357280275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jenmalloy": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/152062189", "body": "@bhardesty, remove the bold from \"openssl ciphers\"? ", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/152062189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/152065474", "body": "@bhardesty, Change \"may\" to \"might\"", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/152065474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "ssorj": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/155647744", "body": "*ssl_ciphers?", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/155647744/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/155647815", "body": "*ssl_protocols?", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/155647815/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/155649659", "body": "\"TLS V.1.1\" -> \"TLSv1.1\"", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/155649659/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/155651659", "body": "\"then all the protocols are allowed\" is not quite right.  If unset, it defers to the system-wide configuration.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/155651659/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/155652198", "body": "A possible enhancement is to sub spaces for commas and document it as a comma-separated list.", "reactions": {"url": "https://api.github.com/repos/apache/qpid-dispatch/pulls/comments/155652198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}}}