{"_default": {"1": {"davidecavestro": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/camel/commits/cffa96f92d964ef389c5471c1f3fd35fa96cecdb", "message": "Configurable sql props: decouple from private field through accessor usage"}, {"url": "https://api.github.com/repos/apache/camel/commits/b30704c19cc81fc47a5a0ea0b294fa7bb412ece9", "message": "Exposed accessors for property 'clearString'"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "oscerd": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/camel/commits/617f550c42e8b9c5446ea6f0d193a9ec50eaa796", "message": "CAMEL-12175 - Regen docs"}, {"url": "https://api.github.com/repos/apache/camel/commits/4a16e066b846fc2bbfbb964e425703cb9c8501f8", "message": "CAMEL-12175 - Camel-AWS Kinesis Firehose: Expose options to avoid a required client in the registry"}, {"url": "https://api.github.com/repos/apache/camel/commits/06829cd83f81e6c25e2416edbc777b1e51b9f423", "message": "Camel-AWS - Let set properties on endpoint too"}, {"url": "https://api.github.com/repos/apache/camel/commits/1846db484e298a1dc350482879e7c405ecd42f7a", "message": "Remove unused imports"}, {"url": "https://api.github.com/repos/apache/camel/commits/3701f2d21052799a5d907dfe3776e1c014062ff0", "message": "CAMEL-12172 - Camel-AWS Kinesis: Add the ability to specify credentials and region at component level"}, {"url": "https://api.github.com/repos/apache/camel/commits/070ed8d0d2390a142890f723ae8e12ea186b9070", "message": "Removed unused imports"}, {"url": "https://api.github.com/repos/apache/camel/commits/91f752d19559697070b73cebd9db84354dc16108", "message": "CAMEL-12171 - Camel-AWS DDB Stream: Add the ability to specify credentials and region at component level"}, {"url": "https://api.github.com/repos/apache/camel/commits/f0c4d32f38fae5853ccb864d71cd8e4c11327362", "message": "Upgrade Protobuf Maven Plugin to version 0.5.1"}, {"url": "https://api.github.com/repos/apache/camel/commits/05c876db014022b96a27b7bbc6c49482ae79fb75", "message": "Upgrade Chronicle Queue to version 4.6.65"}, {"url": "https://api.github.com/repos/apache/camel/commits/146ac4717691ef05bb293fe8b1ce96486f69b119", "message": "Upgrade Chronicle Network to version 1.9.21"}, {"url": "https://api.github.com/repos/apache/camel/commits/03100d6494335fcb2cf2d21698615092ae7de9b1", "message": "Upgrade Chronicle Wire to version 1.10.10"}, {"url": "https://api.github.com/repos/apache/camel/commits/8a4a1e43852fabb1117f25ce2e166680a1c91cb4", "message": "Upgrade Chronicle Bytes to version 1.10.9"}, {"url": "https://api.github.com/repos/apache/camel/commits/a3d2036810c13589b954884799b07432a1a9288b", "message": "CAMEL-12161 - Camel-AWS DdbStream: Expose options to avoid a required client in the registry"}, {"url": "https://api.github.com/repos/apache/camel/commits/b221b718ffcea54e6a10301606d4c3bd317e004f", "message": "CAMEL-12161 - Camel-AWS DdbStream: Expose options to avoid a required client in the registry"}, {"url": "https://api.github.com/repos/apache/camel/commits/3e8e44d59563532ba770c5b26426f66cee40a937", "message": "CAMEL-12164 - Camel-AWS Kinesis: Expose options to avoid a required client in the registry"}, {"url": "https://api.github.com/repos/apache/camel/commits/cb19e602c6e6438c840266efca263c0b21a0a326", "message": "CAMEL-12161 - Camel-AWS DdbStream: Expose options to avoid a required client in the registry"}, {"url": "https://api.github.com/repos/apache/camel/commits/f73e533d4fb90409441d8f0b53329099c85d3521", "message": "CAMEL-12160 - Camel-AWS Kinesis Firehose: Use a configuration for the options like the other AWS components"}, {"url": "https://api.github.com/repos/apache/camel/commits/80964be667647841ea2cef5dc638c353c0814920", "message": "CAMEL-12159 - Camel-AWS Kinesis: Use a configuration for the options like the other AWS components"}, {"url": "https://api.github.com/repos/apache/camel/commits/fc4f9689d73572384b4f48e0ef6adba8d8b506e2", "message": "Upgrade Dropbox Java SDK version to 3.0.6"}, {"url": "https://api.github.com/repos/apache/camel/commits/df4bf6c649488ca6aba4a9db8731a5fc43c6b8b1", "message": "Upgrade Brave Zipkin to version 4.13.3"}, {"url": "https://api.github.com/repos/apache/camel/commits/cc79f7461b985ca433d23d8f0f36819fc7f15830", "message": "Upgrade Cassandra driver to version 3.4.0"}, {"url": "https://api.github.com/repos/apache/camel/commits/8cb4dd7f2c8887e9f6ac3b2569845c445b338db8", "message": "CAMEL-12158 - Camel-AWS DdbStream: Use a configuration for the options like the other AWS components"}, {"url": "https://api.github.com/repos/apache/camel/commits/12386c2ea0a9aaeb14f15ad98c32d8c5c4bbbdc8", "message": "CAMEL-12157 - Camel-Websocket Karaf feature installs bundles with different version of Jetty (9.4 and 9.3)"}, {"url": "https://api.github.com/repos/apache/camel/commits/8fd18164294ec1251698aa497580684c43301483", "message": "Upgrade Chronicle Bytes to version 1.10.6"}, {"url": "https://api.github.com/repos/apache/camel/commits/543ebd0c0257ca9745748dc29466f99d0cfe256f", "message": "Upgrade HttpCore to version 4.4.9"}, {"url": "https://api.github.com/repos/apache/camel/commits/a5ef1d27335b7e0cab76e1e5eb0a8e24fb66444d", "message": "Upgrade Undertow to version 1.4.22.Final"}, {"url": "https://api.github.com/repos/apache/camel/commits/4f091b10178a0d78aa6bed0f4eec442e19798883", "message": "Upgrade Atmosphere to version 2.4.19"}, {"url": "https://api.github.com/repos/apache/camel/commits/36084422a6ae6779d56d9c746a1d06b1685e7f03", "message": "Upgrade Rabbitmq Amqp client to version 5.1.2"}, {"url": "https://api.github.com/repos/apache/camel/commits/86d407b942556d902dd8b0ebe795147887d03a67", "message": "Camel AWS DDB - Regen docs"}, {"url": "https://api.github.com/repos/apache/camel/commits/65746540eec0b6fa1984bbd922f06ddee473e880", "message": "Camel AWS DDB - secretKey and accessKey are secret"}, {"url": "https://api.github.com/repos/apache/camel/commits/54a79828eb329eb4786026279c2b5fda383a5aaf", "message": "CAMEL-12152 - Camel-AWS DDB: Add the ability to specify credentials and region at component level"}, {"url": "https://api.github.com/repos/apache/camel/commits/83cf5246234538d58fec285df8dd9836427e8435", "message": "Camel-AWS CW - Regen docs"}, {"url": "https://api.github.com/repos/apache/camel/commits/f43488fd6b02ff95e7ec925a3385ca3f613d919b", "message": "Camel-AWS CW - accessKey and secretKey are secret"}, {"url": "https://api.github.com/repos/apache/camel/commits/c9666fe25bf082ea41364d2d97bddb9b35b6cd44", "message": "CAMEL-12151 - Camel-AWS CW: Add the ability to specify credentials and region at component level"}, {"url": "https://api.github.com/repos/apache/camel/commits/1a6a807c0f0cc0678ef83ef7f1c839283189879a", "message": "CAMEL-12150 - Camel-AWS EC2: Add the ability to specify credentials and region at component level"}, {"url": "https://api.github.com/repos/apache/camel/commits/1b23a30419cf847a78e749ebd450acb2b899c470", "message": "Upgrade OS Maven Plugin to version 1.5.0.Final"}, {"url": "https://api.github.com/repos/apache/camel/commits/d05ee46910859037bc9c1c6aa3935a997909d9f9", "message": "CAMEL-12147 - Camel-AWS MQ: Add the ability to specify credentials and region at component level"}, {"url": "https://api.github.com/repos/apache/camel/commits/abd022d7022e276d10ae45ff2cce87e1d7846307", "message": "Camel AWS Lambda - Regen Docs and SB"}, {"url": "https://api.github.com/repos/apache/camel/commits/a07dd961e77e22841467765013c46f80ed186658", "message": "Camel-AWS Lambda - Fixed the javadoc related to the LamdbaClient"}, {"url": "https://api.github.com/repos/apache/camel/commits/2a8b0bb5adcea121b93bf366ec2d5becf40063eb", "message": "CAMEL-12146 - Camel-AWS Lambda: Add the ability to specify credentials and region at component level"}, {"url": "https://api.github.com/repos/apache/camel/commits/45ebf8ef27a0cd716c88a7499746c1f29495cc78", "message": "CAMEL-12137 - Fixed CS"}, {"url": "https://api.github.com/repos/apache/camel/commits/93dda73971af52cc83be32dcfcabf78e4d91862d", "message": "Updated ReadMe of camel-hazelcast Kubernetes example"}, {"url": "https://api.github.com/repos/apache/camel/commits/db0d5e42303a0e6a4b318e07fd0c4c3949e00b43", "message": "Bump Hazelcast-kubernetes to version 3.9.2"}, {"url": "https://api.github.com/repos/apache/camel/commits/08fb3b83f10513b30f2683981622dc09ee5fb827", "message": "Regen docs"}, {"url": "https://api.github.com/repos/apache/camel/commits/1090f61926bc7683d0209efbf3bd78eac5452456", "message": "Camel-AWS SWF: accessKey and secretKey are secret"}, {"url": "https://api.github.com/repos/apache/camel/commits/e9802d3b77194a659330d2b1c0c543e709fc8339", "message": "CAMEL-12145 - Camel-AWS SWF: Add the ability to specify credentials and region at component level"}, {"url": "https://api.github.com/repos/apache/camel/commits/33b23c7ec9443977bdb12ed3c4c140b676aaaaed", "message": "Regen docs"}, {"url": "https://api.github.com/repos/apache/camel/commits/2e6d78a2f878d90991aaf7a62761d1e871fc72a3", "message": "Camel-AWS SNS: secretKey and accessKey are secret"}, {"url": "https://api.github.com/repos/apache/camel/commits/d9c96a34ef47d877cd1162f183f7164e6cf68427", "message": "CAMEL-12144 - Camel-AWS SNS: Add the ability to specify credentials and region at component level"}, {"url": "https://api.github.com/repos/apache/camel/commits/b058e0241635752c171ac6ec0ff5e737d36cc61a", "message": "Removed unused imports"}, {"url": "https://api.github.com/repos/apache/camel/commits/b245277211b68f5df639e8348f2e4496cd191fd2", "message": "Regen docs"}, {"url": "https://api.github.com/repos/apache/camel/commits/05ea5c109bfb2ab1f16e742f59db192b7e94914e", "message": "Camel-AWS SES: secretKey and accessKey are secret"}, {"url": "https://api.github.com/repos/apache/camel/commits/be3f177afbbc9a76547c5de7932f27589be3fbd5", "message": "CAMEL-12143 - Camel-AWS SES: Add the ability to specify credentials and region at component level"}, {"url": "https://api.github.com/repos/apache/camel/commits/48739ad9f78c93dc6fa0e20852ce108f157b6a39", "message": "Upgrade Embedded MongoDB to version 2.0.0"}, {"url": "https://api.github.com/repos/apache/camel/commits/0b3b31ff0e3716b985a879d6cb16a80d54c9bba1", "message": "Upgrade Chronicle Wire to version 1.10.9"}, {"url": "https://api.github.com/repos/apache/camel/commits/0ae8ac5b1060e95b6d3d7fe700a5e308930b0161", "message": "Upgrade Box Java SDK to version 2.10.0"}, {"url": "https://api.github.com/repos/apache/camel/commits/418287f271eb2b2ad0b20aca8bd27cbe40529c57", "message": "Upgrade Wiremock to version 2.14.0"}, {"url": "https://api.github.com/repos/apache/camel/commits/0a81bca147a1f833079e63eedcb434591e195ba2", "message": "Upgrade Chronicle Queue to version 4.6.64"}, {"url": "https://api.github.com/repos/apache/camel/commits/7b9ba73eb5a4edaa683b847bfb341182299933e2", "message": "Upgrade Chronicle Wire to version 1.10.8"}, {"url": "https://api.github.com/repos/apache/camel/commits/241e2be3f0d72066450bd2d90d1908f7e8aa334b", "message": "Upgrade Chronicle Bytes to version 1.10.5"}, {"url": "https://api.github.com/repos/apache/camel/commits/b9de673c3c8afc8fef275e34eeef214eda1220bb", "message": "Upgrade Affinity to version 3.1.7"}, {"url": "https://api.github.com/repos/apache/camel/commits/726d3c10235d2bd3679cb312a9aa274ea8fddb5d", "message": "CAMEL-12139 - Fixed CS"}, {"url": "https://api.github.com/repos/apache/camel/commits/86edc1fa045f954d47e60dd0c17b5d0157afe99e", "message": "CAMEL-12139 - Camel-AWS SQS: Add the ability to specify credentials and region at component level"}, {"url": "https://api.github.com/repos/apache/camel/commits/9dee6cd8ce4b52356ba45452fbb59aed09a81b22", "message": "Camel AWS S3: AccessKey and SecretKey are secret"}, {"url": "https://api.github.com/repos/apache/camel/commits/a4f2ffb2c4e22fd8a481a5af6c868e61625acded", "message": "Upgrade PubNub to version 4.18.0"}, {"url": "https://api.github.com/repos/apache/camel/commits/ae75e7480a929a407c6f960208a9842134d0563f", "message": "Upgrade Maven SCR plugin to version 1.25.0"}, {"url": "https://api.github.com/repos/apache/camel/commits/fb05a9268ac83af81899ef16b5194b1df3b7853a", "message": "Regen docs"}, {"url": "https://api.github.com/repos/apache/camel/commits/5cd7911ec3131817d023af6d792ae2cfb4827271", "message": "Update S3 Region label, it's not only a producer option"}, {"url": "https://api.github.com/repos/apache/camel/commits/8757e5aac64107732f43a58e4ea23940b1c11429", "message": "CAMEL-12135 - Camel-AWS S3: Add the ability to specify credentials and region at component level"}, {"url": "https://api.github.com/repos/apache/camel/commits/fccaffe5d24551ec139ca39cc61619fc4371f253", "message": "Upgrade Chronicle Queue to version 4.6.63"}, {"url": "https://api.github.com/repos/apache/camel/commits/7a0ca733105e96f2ec250cd55c7eb4e2a46f4086", "message": "Upgrade Box Java SDK to version 2.9.0"}, {"url": "https://api.github.com/repos/apache/camel/commits/d83440ab91feafbdbb16567d53f476cdd830c465", "message": "Upgrade Atmosphere to version 2.4.18"}, {"url": "https://api.github.com/repos/apache/camel/commits/95c50630af07c753ea43ad6515b409b14b32f808", "message": "Upgrade Chronicle Queue to version 4.6.62"}, {"url": "https://api.github.com/repos/apache/camel/commits/6dd9d4e42120de89ee8bfbee610780341bec4c8a", "message": "Upgrade Chronicle Network to version 1.9.20"}, {"url": "https://api.github.com/repos/apache/camel/commits/ae262263b19b3a3680c444b47ca25842a8bb8714", "message": "Upgrade Chronicle Wire to version 1.10.7"}, {"url": "https://api.github.com/repos/apache/camel/commits/2134c700a3a3cdcb768487f6f382922cd9e28cc8", "message": "Upgrade Chronicle Threads to version 1.9.5"}, {"url": "https://api.github.com/repos/apache/camel/commits/9873cfda695f46d2cf2a6d6aa03280fb24021ab5", "message": "Fixed Camel-AWS Ec2 Javadoc"}, {"url": "https://api.github.com/repos/apache/camel/commits/c1c43aec54244c55e8305d57435c5d2c24fdb071", "message": "CAMEL-12053 - Generated docs for Camel-AWS-MQ"}, {"url": "https://api.github.com/repos/apache/camel/commits/17b86bb0f1d29164caeedbbf8c3e03693e124c1d", "message": "CAMEL-12053 - Fixed CS and Javadoc"}, {"url": "https://api.github.com/repos/apache/camel/commits/1d2e41d239a0cf84c3849f689305b31c58de6715", "message": "CAMEL-12053 - Camel-AWS: add a component for Amazon MQ service"}, {"url": "https://api.github.com/repos/apache/camel/commits/29bbc94f10a2fcc259286d75a4237f5dd0df5a19", "message": "Upgrade Atmosphere Websocket to version 2.4.17"}, {"url": "https://api.github.com/repos/apache/camel/commits/c5f12fa48c000c8a54494be02b1b66d2ab4ebe19", "message": "Upgrade Kubernetes Client to version 3.1.8"}, {"url": "https://api.github.com/repos/apache/camel/commits/d54ff9896e776ecf2f90ee452509932085741ecc", "message": "Upgrade Affinity to version 3.1.6"}, {"url": "https://api.github.com/repos/apache/camel/commits/59d05342b413eabd50ee22f0984eebf8aa15ef8d", "message": "Upgrade Weld to version 2.4.6.Final"}, {"url": "https://api.github.com/repos/apache/camel/commits/87b6ab02974f1574bdadaa57bd16433e2ae13e81", "message": "Upgrade Zipkin Reporter to version 2.3.0"}, {"url": "https://api.github.com/repos/apache/camel/commits/d919fb782f444aa39ff28cbe2cf99e0166dfe8e1", "message": "Upgrade Zipkin to version 2.4.3"}, {"url": "https://api.github.com/repos/apache/camel/commits/5b12f60e79b4e8923f5261859ef6fd6887f8b952", "message": "Upgrade Brave Zipkin to version 4.13.2"}, {"url": "https://api.github.com/repos/apache/camel/commits/c0596657f50ebf37dff09aafba83e09808d0f98f", "message": "Upgrade Arquillian to version 1.2.0.Final"}, {"url": "https://api.github.com/repos/apache/camel/commits/29692dd7975668d79779b118ba6579ff22616910", "message": "Use Xstream-java8 bundle in Karaf features"}, {"url": "https://api.github.com/repos/apache/camel/commits/acb631c4bc9e2078ac869b234d8101404c3670ff", "message": "Upgrade Jose4j to version 0.6.3"}, {"url": "https://api.github.com/repos/apache/camel/commits/1918076663064dfef6581c5f5519eca2e140d891", "message": "Upgrade Chronicle Wire to version 1.10.6"}, {"url": "https://api.github.com/repos/apache/camel/commits/4535cd3d562f5874bbb1f88cd328e616ca0764da", "message": "Upgrade Chronicle Queue to version 4.6.61"}, {"url": "https://api.github.com/repos/apache/camel/commits/dce72177b720cca731aefbe4f919dc8f09c968b6", "message": "Upgrade Chronicle Wire to version 1.10.5"}, {"url": "https://api.github.com/repos/apache/camel/commits/381aef27ae7eea5b4980a124fa2600b15f6de113", "message": "Upgrade Deltaspike to version 1.8.1"}, {"url": "https://api.github.com/repos/apache/camel/commits/031cedd5508d28e4437a76f59a341ec9dc3428ca", "message": "CAMEL-12122 - Fixed S3Operation enums description"}, {"url": "https://api.github.com/repos/apache/camel/commits/af3a25b83adfa1f9bed7489a39dc2dbaef92eb69", "message": "CAMEL-12122 - Added tests"}, {"url": "https://api.github.com/repos/apache/camel/commits/f253c4a8495a7469663edacb8ab9a090453a41a6", "message": "CAMEL-12122 - Fixed CS"}, {"url": "https://api.github.com/repos/apache/camel/commits/f5760e2a86b6da951beedb30629388f0c8012d14", "message": "Upgrade AssertJ to version 3.9.0"}, {"url": "https://api.github.com/repos/apache/camel/commits/c3d50a1f877db27f51696d858ac8c30989efd46a", "message": "Upgrade Chronicle Bytes to version 1.10.4"}, {"url": "https://api.github.com/repos/apache/camel/commits/d6a2311466bf6c71aed7fbed22ca897a4f0775ba", "message": "Upgrade Owasp Dependency check maven plugin to version 3.1.0"}, {"url": "https://api.github.com/repos/apache/camel/commits/155023fcc27e15a9f593da66ccd10abc7c70d6c2", "message": "Fixed CS"}, {"url": "https://api.github.com/repos/apache/camel/commits/f2e72e7abde1efa60d6dad2bda46c7e38623e26e", "message": "Upgrade Hazelcast to version 3.9.2"}, {"url": "https://api.github.com/repos/apache/camel/commits/d0d5dfc22b983ab20cef4da3bfa2282c1894e78e", "message": "CAMEL-11474 - Fixed CS"}, {"url": "https://api.github.com/repos/apache/camel/commits/f980e6b3d88f5ebb9e604aabc44315fa01a9e486", "message": "Upgrade Wiremock to version 2.13.0"}, {"url": "https://api.github.com/repos/apache/camel/commits/e742050467d06bf1ab4aa1101cde4b8fd191777a", "message": "Upgrade Commons-cli to version 1.4, required for camel-chronicle karaf feature"}, {"url": "https://api.github.com/repos/apache/camel/commits/f87e20bf871babb0bc0eeb90fee8c550248fc927", "message": "Upgrade Chronicle Queue to version 4.6.60"}, {"url": "https://api.github.com/repos/apache/camel/commits/476f689f53e8ae295213f707c3249a14249591ca", "message": "Upgrade Chronicle Wire to version 1.10.4"}, {"url": "https://api.github.com/repos/apache/camel/commits/89820082d1ab9ee6a5498089dfee4bff1704a16b", "message": "Upgrade Chronicle Threads to version 1.9.4"}, {"url": "https://api.github.com/repos/apache/camel/commits/5a768223b0924f40f67ba1a71606ce55c1393b49", "message": "Upgrade Chronicle Bytes to version 1.10.3"}, {"url": "https://api.github.com/repos/apache/camel/commits/ec3f33218ec8d2cf6f6b94db14b13d1a40559db4", "message": "Upgrade Chronicle Core to version 1.9.24"}, {"url": "https://api.github.com/repos/apache/camel/commits/2bd868daaf8fef004b2e7d7eb310b2765c316fa2", "message": "Upgrade Olingo2 and related bundle to version 2.0.10"}, {"url": "https://api.github.com/repos/apache/camel/commits/8d2d692b1f07488d1ebf24628cf7d87cc971142b", "message": "Upgrade OkHttp client and related bundle to version 3.9.1"}, {"url": "https://api.github.com/repos/apache/camel/commits/117d0bba07acc7fef21bc965cabe6ff50fb4d44f", "message": "Upgrade Saxon and related bundle to version 9.8.0-7"}, {"url": "https://api.github.com/repos/apache/camel/commits/8d1675e1b0a76c394ac034177ffb4ef59710f749", "message": "Upgrade Fastjson and related bundle to version 1.2.44"}, {"url": "https://api.github.com/repos/apache/camel/commits/484c15a38ca41bbba10d3627df1269c144473943", "message": "Upgrade Libphonenumber and related bundle to version 8.8.8"}, {"url": "https://api.github.com/repos/apache/camel/commits/bf50757b7a095d306f4b09f05a9cfe322635165c", "message": "Upgrade Java Util and related bundle to version 1.34.0"}, {"url": "https://api.github.com/repos/apache/camel/commits/79dfd872820a3a3d245d0058735870b26808ecbe", "message": "Upgrade Spark Java and related bundle to version 2.7.1"}, {"url": "https://api.github.com/repos/apache/camel/commits/b97eeba72ad0d2fb697e5d73903b38eb24b3f445", "message": "Upgrade InfluxDB Java client and related bundle to version 2.8"}, {"url": "https://api.github.com/repos/apache/camel/commits/74bb6522772feb39ab213ec7248a2fd5a335780a", "message": "Upgrade AWS SDK Java and related bundle to version 1.11.255"}, {"url": "https://api.github.com/repos/apache/camel/commits/bad9ed4bb2ce1e258039d96ac80c71a746b0520d", "message": "Final touch to the camel-gRPC Karaf feature"}, {"url": "https://api.github.com/repos/apache/camel/commits/2356ea599f39fc3616a897d1eb2ebaa7e241bb64", "message": "Upgrade Kubernetes client to version 3.1.7"}, {"url": "https://api.github.com/repos/apache/camel/commits/a9af94d9f186d451873f06b5d8a453386189e589", "message": "Removed jmockit version property placeholder"}, {"url": "https://api.github.com/repos/apache/camel/commits/2038b57795813802da0f3e989fd3215aa4f3d651", "message": "Upgrade JGit to version 4.10.0.201712302008-r"}, {"url": "https://api.github.com/repos/apache/camel/commits/b73b58f82706f2efcd014b804003dbbf4e387144", "message": "Upgrade Caffeine to version 2.6.1"}, {"url": "https://api.github.com/repos/apache/camel/commits/cd11a37c85fc549df14e5be772e8c81cc5d24cb4", "message": "Upgrade Netty Tcnative Boring SSL Static to version 2.0.7.Final"}, {"url": "https://api.github.com/repos/apache/camel/commits/b5e3d19e58230fbdd270b090efceaac0bb8e9212", "message": "Remove Protobuf guava version property"}, {"url": "https://api.github.com/repos/apache/camel/commits/a210ec1da28feab9847ff8b335ed0506b095421f", "message": "Upgrade Protobuf to version 3.4.0"}, {"url": "https://api.github.com/repos/apache/camel/commits/da5d995180559ec13ece229ead54bbe78324f452", "message": "Use gRPC bundle again"}, {"url": "https://api.github.com/repos/apache/camel/commits/7c25e9fd5babcf47f8528ca36282725a5477b5c3", "message": "Upgrade gRPC to version 1.8.0"}, {"url": "https://api.github.com/repos/apache/camel/commits/fac04b7a651f0ddd1e021c1940f8ea4858fc0807", "message": "Upgrade Tika to version 1.17"}, {"url": "https://api.github.com/repos/apache/camel/commits/17fef07b184d7ce126caac8ce60e0d150f22eea5", "message": "Upgrade Jackrabbit to version 2.17.0"}, {"url": "https://api.github.com/repos/apache/camel/commits/5d2462cff42aba9248693798e7314c1732dedc9e", "message": "Use Mongo Java Driver 3.6.x for Gridfs too and remove the property placeholder for driver 3.2.x"}, {"url": "https://api.github.com/repos/apache/camel/commits/e73b3487296b9cc98957fe195c60b1cae252385a", "message": "Upgrade Mongodb Java Driver to version 3.6.1"}, {"url": "https://api.github.com/repos/apache/camel/commits/1b6b046112c055fbde71bce4633b5d748d1a9caa", "message": "Upgrade Pubnub to version 4.17.0"}, {"url": "https://api.github.com/repos/apache/camel/commits/5174816e68f11246c22bd993cf0057fb30356a1c", "message": "CAMEL-12089 - Fixed CS"}, {"url": "https://api.github.com/repos/apache/camel/commits/c4fb57fae4ba3f7a876d885c8f391fb58e134f97", "message": "CAMEL-12089 - Polish"}, {"url": "https://api.github.com/repos/apache/camel/commits/fa740ff4f0c11aaa1b4b8e02881cba72ef7bd1a4", "message": "CAMEL-12089 - Camel-AWS: Kinesis consumer starts consuming data from the beginning even though the shard is in Closed state"}, {"url": "https://api.github.com/repos/apache/camel/commits/868357277d6fde906e775f435d462cc4c946bfdd", "message": "Fixed CS"}, {"url": "https://api.github.com/repos/apache/camel/commits/bad734ab1cdaea9e1cf7a8a24c564e1976a27c8c", "message": "CAMEL-12095 - Camel-Xstream doesn't work in Karaf"}, {"url": "https://api.github.com/repos/apache/camel/commits/55e30c64e9a95b347e12d96a4313fe7f608006ce", "message": "Upgrade Commons Pool 2 to version 2.5.0"}, {"url": "https://api.github.com/repos/apache/camel/commits/09d040bd9d56e1cb00d40cfa64cb0b03c995911e", "message": "Upgrade Atmosphere Websocket to version 2.4.16"}, {"url": "https://api.github.com/repos/apache/camel/commits/0c377785d566be584f5f41cc6dab3bc9fb645706", "message": "Upgrade Rabbitmq AMQP client to version 5.1.1"}, {"url": "https://api.github.com/repos/apache/camel/commits/4b88d29d5941e2926879fa86bf7ea0e8762b1b00", "message": "Upgrade Chronicle Queue to version 4.6.59"}, {"url": "https://api.github.com/repos/apache/camel/commits/b6029eb2074289c5948c4c28640bc34e5913a405", "message": "Upgrade Chronicle Wire to version 1.10.3"}, {"url": "https://api.github.com/repos/apache/camel/commits/82d7db37674851e7a908ad92acb10ff76c885842", "message": "Upgrade Infinispan to version 9.1.4.Final"}, {"url": "https://api.github.com/repos/apache/camel/commits/ffcdd96657e18384dfaad34d79263722d534cd03", "message": "Upgrade Milo to version 0.1.6"}, {"url": "https://api.github.com/repos/apache/camel/commits/7952d9da47f752b10cd86d747e5b85cc53862ff4", "message": "Upgrade Karaf to version 4.1.4"}, {"url": "https://api.github.com/repos/apache/camel/commits/50b88e39db85d5b8368298a6389b89e110049355", "message": "Use the AWS S3 client builder and AmazonS3 client instead of deprecated stuff in camel-cdi S3 example"}, {"url": "https://api.github.com/repos/apache/camel/commits/17fedc2a25a927379ee18546f5d96febddee92eb", "message": "Upgrade Rabbitmq client to version 5.1.0"}, {"url": "https://api.github.com/repos/apache/camel/commits/7c220eef505b05b2dde2d54f2e2e021b6bf16d99", "message": "Upgrade Netty to version 4.1.19.Final"}, {"url": "https://api.github.com/repos/apache/camel/commits/98d8dbe87354b75911c0039d83c96c98b70bff96", "message": "Upgrade Drill to version 1.12.0"}, {"url": "https://api.github.com/repos/apache/camel/commits/cfe98ed209bf68fe817e0e0d4a204b65e782a6a8", "message": "Upgrade Jgit to version 4.9.2.201712150930-r"}, {"url": "https://api.github.com/repos/apache/camel/commits/41c5545d390eec2e4fa2772c637790e01331b1c0", "message": "Use only one version property for Proton J"}, {"url": "https://api.github.com/repos/apache/camel/commits/912a89e2b5cb12d541977cc75ce84bc6c1d1b15c", "message": "Upgrade Qpid Proton J to version 0.24.0"}, {"url": "https://api.github.com/repos/apache/camel/commits/884a840509a5d14059b1f7235ac069f6f6449ea3", "message": "Upgrade Qpid JMS client to version 0.28.0"}, {"url": "https://api.github.com/repos/apache/camel/commits/a6dac23d8673579a77a0b3637030c3507e7acf9a", "message": "Upgrade Chronicle Threads to version 1.9.3"}, {"url": "https://api.github.com/repos/apache/camel/commits/7c7bad1a356f43ec7dfd89a80b33d9670e55ead0", "message": "Upgrade Chronicle Wire to version 1.10.2"}, {"url": "https://api.github.com/repos/apache/camel/commits/b89d2d2611d8b9586222f78232986bdb7c016295", "message": "Upgrade Chronicle Network to version 1.9.19"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/47881383", "body": "I can move the log wherever is needed.. I think we'll have the same problem if we put log in sync process method and async process method.\n\nI am available to move the log.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/47881383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/48436697", "body": "Hi Claus.\n\nUpdated. Sorry about the previous test. My aim was testing all the possible Locale.\n\nThanks,\nAndrea\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/48436697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/48470996", "body": "Very very fun :-)\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/48470996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/15677759", "body": "No problem ;-) These days I'm focused on this, I see Asciidoc everywhere :-D\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/15677759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/17656031", "body": "Claus, I guess you need to move the ticket to SM Jira\nIl 28/mag/2016 10:18, \"Claus Ibsen\" notifications@github.com ha scritto:\n\n> A new bundle on the way: https://issues.apache.org/jira/browse/SMX4-1988\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/apache/camel/commit/8a7e8fc7fee5c4e344598593f30c40b115932845#commitcomment-17656023,\n> or mute the thread\n> https://github.com/notifications/unsubscribe/AE3r1z1RXUsV0R3dcMT97haJKTQK25ovks5qF_pSgaJpZM4IpBnY\n> .\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/17656031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/18755546", "body": "Np, thanks for your contribution! :-)\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/18755546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/19934118", "body": "@JonW98 Can you please add your comment and problems here?\r\n\r\nhttps://issues.apache.org/jira/browse/CAMEL-10340\r\n\r\nMaybe the change breaking some scenarios.", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/19934118/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/19978770", "body": "@ge0ffrey Thanks a lot for the feedback :-)", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/19978770/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/19978816", "body": "@ge0ffrey Sure, thanks a lot ", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/19978816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/22688637", "body": "Thanks a lot @ben-manes :-) I'll update the componenti to reflect your suggestions! Thanks again. Caffeine is a really great project!", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/22688637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/22688653", "body": "Yes, thanks!", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/22688653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/22688712", "body": "Sure! :-) this should be released with 2.20.0, maybe in September :-)", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/22688712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/22688779", "body": "AFAIK we don't have a standard approach. Se can ask to @davsclaus by the way :-)", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/22688779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/22689021", "body": "Thanks for the example. Maybe we can add an option to specify the hook at endpoint level :-)", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/22689021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/22697610", "body": "We can expose an option to allow the end user to use his own StatsCounter and use the ManagedAttribute annotation ", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/22697610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/26199598", "body": "This is failing on the CI server.. The commit is for that", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/26199598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060363", "body": "I'll patch my errors. Sorry about this. I'm apologize.\nIl 09/nov/2014 19:10 \"Aaron Whiteside\" notifications@github.com ha\nscritto:\n\n> In\n> components/camel-sjms/src/test/java/org/apache/camel/component/sjms/typeconversion/JMSMessageHelperTypeConversionTest.java:\n> \n> > -        String p = \"Hello Camel\";\n> > -        StringReader test = new StringReader(p);\n> > -        template.sendBody(\"sjms:queue:start\", test);\n> > -        assertMockEndpointsSatisfied();\n> > -    }\n> >   +\n> > -    @Test\n> > -    public void testJMSMessageHelperChar() throws InterruptedException, FileNotFoundException {\n> > -        getMockEndpoint(\"mock:result\").expectedBodiesReceived(\"H\");\n> > -        char p = 'H';\n> > -        template.sendBody(\"sjms:queue:start\", p);\n> > -        assertMockEndpointsSatisfied();\n> > -    }\n> >   +\n> > -    @Test\n> > -    public void testJMSMessageHelperCharArray() throws InterruptedException, FileNotFoundException {\n> \n> Need to assert that a TextMessage was created, and the type of class in\n> Exchange.getIn().getBody() is String.class.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apache/camel/pull/326/files#r20060311.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/77137092", "body": "Yes, sorry. My mistake during review.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/77137092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/89065163", "body": "This will be available from 2.19.x", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/89065163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/89065377", "body": "Please remove docs from Ehcache.. Probably a copy/cut error.", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/89065377/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/89065767", "body": "Please add some docs about the configuration parameters, like other components.\r\n\r\nhttps://github.com/apache/camel/blob/master/components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/KubernetesConfiguration.java\r\n\r\nfor example.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/89065767/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "davsclaus": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/camel/commits/52b382b864323363fd0a5831e7f7ed8d8221c244", "message": "CAMEL-12154: camel-saxon should set parameters on saxon using their type, eg string, boolean, integer etc. Thanks to Niels Bertram for the unit test."}, {"url": "https://api.github.com/repos/apache/camel/commits/03b63be0e6a1c393d6af682da0c734cb35c913a8", "message": "CAMEL-12154: camel-saxon should set parameters on saxon using their type, eg string, boolean, integer etc. Thanks to Niels Bertram for the unit test."}, {"url": "https://api.github.com/repos/apache/camel/commits/c1ec73135b2b9f17f78d896a0f35204c2dbe0ba0", "message": "Added test based on SO issue"}, {"url": "https://api.github.com/repos/apache/camel/commits/83bd9cdd8df60c4c88a9d185032b942ac3557d8a", "message": "Regen"}, {"url": "https://api.github.com/repos/apache/camel/commits/6ce148dc3195d40226551b9481eea4fe779b7258", "message": "CAMEL-12165: Fixed CS"}, {"url": "https://api.github.com/repos/apache/camel/commits/c8fc3e0803564a3d55a16279b290f20409f210d2", "message": "Ups Claaus. Fixed compile issue after recent change in camel-jaxb."}, {"url": "https://api.github.com/repos/apache/camel/commits/d577c2b5797b1395e7fe12b83f9f413b193c6340", "message": "Fixed CS"}, {"url": "https://api.github.com/repos/apache/camel/commits/0f6ed382e6dcf551fda891d6d6757d17816f28ce", "message": "CAMEL-12165: camel-jaxb - Allow to configure severity level on schema validation"}, {"url": "https://api.github.com/repos/apache/camel/commits/8f2c6dea474529d3d60ccddb7b4667e3bfe6443a", "message": "CAMEL-12165: camel-jaxb - Allow to configure severity level on schema validation"}, {"url": "https://api.github.com/repos/apache/camel/commits/f40c728e414c087b37939cc0e30d020ec30f2e31", "message": "CAMEL-12156: Camel Karaf commands for routes should flip the order so camel context is first, so the route completion can use the selected camel context to only show routes from that context. And make both arguments as required as they should be."}, {"url": "https://api.github.com/repos/apache/camel/commits/ce4e54ed594dbea4859f105b9ea34f32aa892628", "message": "Upgrade Kotlin"}, {"url": "https://api.github.com/repos/apache/camel/commits/e52425e6b9f70a7f59e5a2b6025330470049f0f0", "message": "CAMEL-12061: camel-ftp now forces a hard disconnect in case of rollback such as error during scanning files etc, to force a fresh client/login on next poll to mitigate any transient issues in the ftp client."}, {"url": "https://api.github.com/repos/apache/camel/commits/494e9d8027db61c2894cb78f798f34ea8b053752", "message": "Polished"}, {"url": "https://api.github.com/repos/apache/camel/commits/8b42f4ec031755f0c507dcbf8538b5c10adc59e4", "message": "CAMEL-12148: Reworked FileIdempontentRepository so LRUCache is only act as quick lookup. And in case of 1st-level miss the file store is checked. File store also writes the entries in the same order they are added."}, {"url": "https://api.github.com/repos/apache/camel/commits/ce3fe3883479475579db2fb203a4b217bc50f627", "message": "Regen docs"}, {"url": "https://api.github.com/repos/apache/camel/commits/1a9f3ecb9e973deded01ab465baca26977a95db4", "message": "CAMEL-12148: Reworked FileIdempontentRepository so LRUCache is only act as quick lookup. And in case of 1st-level miss the file store is checked. File store also writes the entries in the same order they are added."}, {"url": "https://api.github.com/repos/apache/camel/commits/14e440cbbcf9f911a858501237d61f2f334a9d03", "message": "Regen"}, {"url": "https://api.github.com/repos/apache/camel/commits/3ad257cb36631d089999b807833f006b23dd739f", "message": "Polished"}, {"url": "https://api.github.com/repos/apache/camel/commits/2ddcf3c204f4ff1bc45d488a3b708aadb2c3f4b8", "message": "CAMEL-12032: camel-json-validator - switch to use networknt json parser as it does not use org.json JAR which is incompatible with ASF licesing."}, {"url": "https://api.github.com/repos/apache/camel/commits/fd9924a4d9a023469e2e57a474e96cf71d4e1c3b", "message": "Upgrade ftp server for testing camel-ftp that fixes an internal WARN due older version was not compatible with newer mina version"}, {"url": "https://api.github.com/repos/apache/camel/commits/c4b83ee0cfffd7227576524abbdcfbad65125191", "message": "CAMEL-12020: Fixed class cast exception in ftp polling consumer rollback."}, {"url": "https://api.github.com/repos/apache/camel/commits/52bb5828f3f7004ffd80bbfe4d31ffcf2bc03dc6", "message": "Fix component description and regen docs."}, {"url": "https://api.github.com/repos/apache/camel/commits/34e8854a17d198add8d7915c03f1ed7f1a1912e9", "message": "CAMEL-12136: Fix potential ClassCastException when using camel-saxon in SAXSource mode with xpath and having logging namespaces enabled."}, {"url": "https://api.github.com/repos/apache/camel/commits/3f9f920c3d9458416d3ed98785ae8d5b6ee01a66", "message": "CAMEL-12136: Fix potential ClassCastException when using camel-saxon in SAXSource mode with xpath and having logging namespaces enabled."}, {"url": "https://api.github.com/repos/apache/camel/commits/8947203d572676797d07a3a1a47286e87aaa0a58", "message": "CAMEL-11599: XPath with Saxon should load Saxon using their preferred way."}, {"url": "https://api.github.com/repos/apache/camel/commits/06046c193cae0baebad63c8b0a164978fbcd9ade", "message": "CAMEL-11599: XPath with Saxon should load Saxon using their preferred way."}, {"url": "https://api.github.com/repos/apache/camel/commits/39a7631d33d46fec6ba749f1d42c1c7f7f01c9b4", "message": "CAMEL-11599: XPath with Saxon should load Saxon using their preferred way."}, {"url": "https://api.github.com/repos/apache/camel/commits/eb216d7f302d65fb070150216d8f1afcda9574e1", "message": "Upgrade dbcp2"}, {"url": "https://api.github.com/repos/apache/camel/commits/f8564f1be1a416206182d4e89c8dbffd6e80c9a8", "message": "Regen docs"}, {"url": "https://api.github.com/repos/apache/camel/commits/f0c72f1b573afd472e60dd90372f4a536b026d91", "message": "CAMEL-12050: camel-servlet/camel-jetty etc should return 405 error if the path exists but the http method is not allowed."}, {"url": "https://api.github.com/repos/apache/camel/commits/fdccb99dff9ca3eb53035b4e117a8a7023ec47f7", "message": "CAMEL-10165: Fixed issue with camel-cxf getBasePath. Thanks to Krzysztof Mackowiak for patch. Added fix for https as well."}, {"url": "https://api.github.com/repos/apache/camel/commits/a8271e513fd8a2783e2ed7dd13790ebaa2ee8065", "message": "CAMEL-12112: Added unit test thanks to Bhuvan Gupta for the test. Validate the readLock option is configured with a valid name if in use. Fixed missing default option in the docs. Increased the in-progress cache to 50000 as 1000 was likely to small anyway."}, {"url": "https://api.github.com/repos/apache/camel/commits/9e58df3c602f2502333ca0760e1a0baee1c5a909", "message": "camel-jsonpath - As commented by @yihtserns we should not use the internal apis of jsonpath to get the default configuration."}, {"url": "https://api.github.com/repos/apache/camel/commits/3e8b368357623245161d12a962d7b74ea275d99a", "message": "CAMEL-12131: ProducerCache should not store non-singleton/non pooled producers on CamelContext."}, {"url": "https://api.github.com/repos/apache/camel/commits/1cc8257ed8cfa6091dba6ef27b809688c0d9c09c", "message": "CAMEL-12126: camel-ftp - Add option for resume download."}, {"url": "https://api.github.com/repos/apache/camel/commits/62d81658023438303aa6910e3d2acb5f79c053a4", "message": "Regen"}, {"url": "https://api.github.com/repos/apache/camel/commits/71aee7f854e3decd4e4811fffb515cb875740dec", "message": "CAMEL-12126: camel-ftp - Add option for resume download."}, {"url": "https://api.github.com/repos/apache/camel/commits/c70adaa3c2600bd888da73f64b6673463b57e723", "message": "CAMEL-12126: camel-ftp - Add option for resume download."}, {"url": "https://api.github.com/repos/apache/camel/commits/2bc883da5c7a57cf518793dc02f93572e9d5ec64", "message": "CAMEL-12127: camel-ftp - Add option to turn on logging of transfer activity. Lets also see it in the JMX consumer so we can monitor when it last downloaded something."}, {"url": "https://api.github.com/repos/apache/camel/commits/e8bb976d61f8e46ba71458197fce4dc3d8c7cb1b", "message": "CAMEL-12127: camel-ftp - Add option to turn on logging of transfer activity. Lets also see it in the JMX consumer so we can monitor when it last downloaded something."}, {"url": "https://api.github.com/repos/apache/camel/commits/e9b65f72dcf82c4302810c1f76869119a9ab6c17", "message": "CAMEL-12127: Include file-size in file operations API so we can know how big the files are to download/upload."}, {"url": "https://api.github.com/repos/apache/camel/commits/0fcbcb53969e72e8f20669d68cbef5c029e31aea", "message": "CAMEL-12127: camel-ftp - Add option to turn on logging of transfer activity. Lets also see it in the JMX consumer so we can monitor when it last downloaded something."}, {"url": "https://api.github.com/repos/apache/camel/commits/d4a4fa9fa749799e0dd2da86f1999e32a860000d", "message": "CAMEL-12127: camel-ftp - Add option to turn on logging of transfer activity. Lets also see it in the JMX consumer so we can monitor when it last downloaded something."}, {"url": "https://api.github.com/repos/apache/camel/commits/05f07b5bf41c7841555b9e3dd450175572a32c5c", "message": "Lets avoid printing null reason as users may think its from a NPE exception."}, {"url": "https://api.github.com/repos/apache/camel/commits/dcb3e1e92bab2cd42794fb42034b39da5982df13", "message": "CAMEL-12127: camel-ftp - Add option to turn on logging of transfer activity. Lets also see it in the JMX consumer so we can monitor when it last downloaded something."}, {"url": "https://api.github.com/repos/apache/camel/commits/25da2bfec3d35c6c5bbc1b24e577923b7181a51b", "message": "CAMEL-12127: camel-ftp - Add option to turn on logging of transfer activity. Lets also see it in the JMX consumer so we can monitor when it last downloaded something."}, {"url": "https://api.github.com/repos/apache/camel/commits/b4546b59f882f4acf133810b3ad718ac7bade94a", "message": "CAMEL-12127: Added todo"}, {"url": "https://api.github.com/repos/apache/camel/commits/c37855bd98b4d3e222889c1d322c8a81bf340905", "message": "CAMEL-12127: camel-ftp - Add option to turn on logging of transfer activity. Lets also see it in the JMX consumer so we can monitor when it last downloaded something."}, {"url": "https://api.github.com/repos/apache/camel/commits/4fa51b445b0a795a07f0c63b7eb78a69fa53f54b", "message": "Fixed typo"}, {"url": "https://api.github.com/repos/apache/camel/commits/6653d1cef2d49e5bc90ec82b300cd2e6e2ac2dbb", "message": "CAMEL-12127: camel-ftp - Add option to turn on logging of transfer activity"}, {"url": "https://api.github.com/repos/apache/camel/commits/d10b99c5d1075debc1a9750a6f75864855ecdc5e", "message": "Do not use deprecated api"}, {"url": "https://api.github.com/repos/apache/camel/commits/93d8f9d1f003357ddde3b3daa7e410a03a524055", "message": "Lets keep the components ordered A..Z in the pom.xml file."}, {"url": "https://api.github.com/repos/apache/camel/commits/7cf616e5e48346aeffca9307f7fd35f8303c0633", "message": "Regen docs"}, {"url": "https://api.github.com/repos/apache/camel/commits/2bab0c7d261f904a35f00e6200cf5dfba1b6e457", "message": "CAMEL-12108: Fixed CS"}, {"url": "https://api.github.com/repos/apache/camel/commits/83684bcb0e605ef799d21d3d84fba90bcb86d395", "message": "CAMEL-12120: Better solution for routing-slip/dynamic-router to use existing producer when embedded with error handler."}, {"url": "https://api.github.com/repos/apache/camel/commits/a92a2112181a7fcfa82c1445e4fc13e067bafc49", "message": "CAMEL-12124: Allow to configure cacheSize on dynamic router and routing slip EIP annotations"}, {"url": "https://api.github.com/repos/apache/camel/commits/021026be1effad794fa32a0f0d2c7a29596dc633", "message": "CAMEL-12120: routingSlip and dynamicRouter should use an embedded dynamicProcessor to send to endpoints instead of error handler cache."}, {"url": "https://api.github.com/repos/apache/camel/commits/9687a0ca2e9572c0970bc227c7755592e8652dc1", "message": "CAMEL-12120: Routingslip/Dynamic-Router EIPs can cause error handlers to be stopped for shared error handlers. Backported older working code. CAMEL-10050 is re-introduced again and we need to come up with a better solution."}, {"url": "https://api.github.com/repos/apache/camel/commits/46c57a5e672984df028f55ec3f16e25916df80ef", "message": "CAMEL-12110: camel-kafka consumer swallows exception if error creating KafkaConsumer."}, {"url": "https://api.github.com/repos/apache/camel/commits/26bb60efad35d7ddb6e5810094e5c6baffc295f1", "message": "Added camel-http4 needed when testing camel-spring-boot"}, {"url": "https://api.github.com/repos/apache/camel/commits/07533b951e6df9f6a7b800a0f0530a2eae455804", "message": "CAMEL-12108: Added unit test. Thanks to Bas Claessen for the test."}, {"url": "https://api.github.com/repos/apache/camel/commits/ab05c1dab63e28ef3dfb99ca792a3583b76b205f", "message": "Regen"}, {"url": "https://api.github.com/repos/apache/camel/commits/5d7dcf2a741d5d5fe4e81355559d0872127236b7", "message": "CAMEL-12103: camel-netty4 consumer should not be suspendable as it should really stop take in new requests when stopping/shutting-down etc, as otherwise it keeps running if new requests comes in faster than it can process. The camel-netty4-http is suspendable by sending back HTTP status 503. Thanks to Yih Tsern for reporting and providing a reproducer."}, {"url": "https://api.github.com/repos/apache/camel/commits/c6c02ff92a536e78f7ed1b9dd550d6531e852cee", "message": "Upgrade RX"}, {"url": "https://api.github.com/repos/apache/camel/commits/2e3f799668d4396f8ed3de3161ab24331fdb7461", "message": "CAMEL-12058: Added check so changing cache size is only possible if using the default lru cache"}, {"url": "https://api.github.com/repos/apache/camel/commits/10d218dd3dc1174ce07c64b50d9eaeb1b64c8ff5", "message": "Fixed CS"}, {"url": "https://api.github.com/repos/apache/camel/commits/00cb0f2ebc887026a521b41ee614c7d81123bb48", "message": "CAMEL-12094: file/ftp producer fixed so moveExisting works when using temp filename as well."}, {"url": "https://api.github.com/repos/apache/camel/commits/098118bb913953c8c32a8a079acacd981e0df140", "message": "CAMEL-12022:direct component - Let the producer able to block and wait for consumers to be started. Run tests using old behavior."}, {"url": "https://api.github.com/repos/apache/camel/commits/5d6323d4a796d6f77fa2f696bb8c35961c1416bf", "message": "CAMEL-12022:direct component - Let the producer able to block and wait for consumers to be started. Run tests using old behavior."}, {"url": "https://api.github.com/repos/apache/camel/commits/165d2607de9ded357c8a5bceeef1697fee9e0bc3", "message": "CAMEL-12086: Service call definition - Simple language expresion in uri is not being evaluated"}, {"url": "https://api.github.com/repos/apache/camel/commits/f56c82812e716acf1ac9b6d6f314f7026b419648", "message": "CAMEL-12098: URISyntaxException in OpenTracingTracer for endpoints with path parameters"}, {"url": "https://api.github.com/repos/apache/camel/commits/ad3dfd9f11de546efe357ce7624f9742ed930c57", "message": "CAMEL-12096: rest-dsl did not work configuring hostNameResolver via spring-boot auto configuration."}, {"url": "https://api.github.com/repos/apache/camel/commits/fdc7e296eaa2e0d7310862c5f2b248368329e5d4", "message": "Polished model to include doc for rest-dsl repsonse examples"}, {"url": "https://api.github.com/repos/apache/camel/commits/5a35cdbb6b2c6f6b37bb9834aff4671f016674af", "message": "Polish docs and show that camel-cdi is deprecated in OSGi"}, {"url": "https://api.github.com/repos/apache/camel/commits/27020b69a9981f8bf9a46b24d9d619db7550dced", "message": "Use correct name for documentation file"}, {"url": "https://api.github.com/repos/apache/camel/commits/24498dcbc8cc47cc83ef453ecd58e6520548af62", "message": "Regen docs"}, {"url": "https://api.github.com/repos/apache/camel/commits/45b01813edf3531efcb07ac509e348abb0b772a3", "message": "CAMEL-12074: Let okStatusCodeRange support multiple ranges. Thanks to Niels Ull Harremoes for the patch."}, {"url": "https://api.github.com/repos/apache/camel/commits/363eac23d3ea0f90c14619a2936032e372ca48e9", "message": "Added test based on user forum issue"}, {"url": "https://api.github.com/repos/apache/camel/commits/f667f6c891cb111461bfadeb7423840e86300444", "message": "CAMEL-12031: KafkaConsumer stops consuming messages when exception occurs during offset commit"}, {"url": "https://api.github.com/repos/apache/camel/commits/5baa6eae24edcc3569cac82e773a4bd48d964f11", "message": "CAMEL-11792: File/ftp producer should not do file exists check if the fileExists is TryRename as it state in the docs it does not do any exists check. The FTP producer will then not create a new connection when uploading files to the ftp server."}, {"url": "https://api.github.com/repos/apache/camel/commits/0c6df7737f3ec040d04a87934385e925dbeca773", "message": "CAMEL-11792: Polished docs"}, {"url": "https://api.github.com/repos/apache/camel/commits/b0fbf955fcbcbf115b1c48d96d4339f903802c39", "message": "CAMEL-12090: camel-kafka - Better error if brokers not configured"}, {"url": "https://api.github.com/repos/apache/camel/commits/e1aaaa26605ab940e9ed507ddbe3f5dda00023fc", "message": "CAMEL-12038: Deprecate RestSwaggerServlet as people should not use that."}, {"url": "https://api.github.com/repos/apache/camel/commits/d1418cb0134afc6bc1e63f1f695fd7e77a643d4f", "message": "CAMEL-12038: Deprecate RestSwaggerServlet as people should not use that."}, {"url": "https://api.github.com/repos/apache/camel/commits/505e058b49a01b567f01383a9c7764e368b58d07", "message": "CAMEL-12044: Fixed docs"}, {"url": "https://api.github.com/repos/apache/camel/commits/bcf9bd1cc5718486cfa1bff1526135579e218d03", "message": "CAMEL-12088: camel-zipkin - Karaf feature dont work with new upgrade"}, {"url": "https://api.github.com/repos/apache/camel/commits/7de19865bb84346becbe05fc8a0988e5e1efbf79", "message": "Fixed CS. This closes #2151"}, {"url": "https://api.github.com/repos/apache/camel/commits/790d7cca89e72ff65c517a94f78ecef33cb6490e", "message": "CAMEL-1202: use the old default of not block for direct in these tests as they rely on that."}, {"url": "https://api.github.com/repos/apache/camel/commits/6c770048826e688e0c0e6d5f6929778e6bdeee27", "message": "CAMEL-1202: use the old default of not block for direct in these tests as they rely on that."}, {"url": "https://api.github.com/repos/apache/camel/commits/958ff114ae2e30e860b4e056adda721b7c99787e", "message": "A component must have default no-arg constructor. This fixes issue with the camel-kafka-starter module."}, {"url": "https://api.github.com/repos/apache/camel/commits/8f9af0c42a7e2368f7612a74f77568df3ce9fa23", "message": "CAMEL-12083: Polished a bit in karaf features"}, {"url": "https://api.github.com/repos/apache/camel/commits/f8fe8a398238f6d46ad833ecd985839d4c76dcf3", "message": "CAMEL-12083: Fixed camel-hessian in karaf"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/7842650", "body": "Hi\n\nThanks for adding this nice new functionality. Do you mind creating a patch and attach to a JIRA ticket over at Apache. This is the way ASF works for accepting patches.\n\nYou can read about contributing to ASF Camel here\nhttp://camel.apache.org/contributing.html\n\nAnd about using git with Apache here\nhttp://www.apache.org/dev/git.html\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/7842650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/7842656", "body": "Can you close this pull requests now that it has been applied to the codebase?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/7842656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/7842660", "body": "The component is in the codebase. Can this pull request be closed?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/7842660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/13045805", "body": "Thanks for your patches. Can this pull request be closed?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/13045805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/13045822", "body": "Thanks for this work, however camel-web is being removed from Camel in the future, eg Camel 3.0. The Camel team have no desire to build and maintain our own web-console. \n\nDo you mind closing this pull request?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/13045822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/13045970", "body": "Scott, can you close this pull request?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/13045970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/13045988", "body": "Thanks for the pull request. We decided to keep the code as is, so Camel is more secure out of the box.\n\nDo you mind closing this pull request?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/13045988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/13423865", "body": "Thanks Scott I have committed your patch to the code base. Can you close this pull request?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/13423865/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/16127587", "body": "We have upgraded to jackson 2. Can this request be closed?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/16127587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/16127712", "body": "This patch has been applied. Can you close this request?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/16127712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922617", "body": "Thanks for the patch. I has been applied to the source code. Can you close this pull request?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922625", "body": "Thanks for the patch. I has been applied to the source code. Can you close this pull request?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922625/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922830", "body": "Thanks I have upgraded the master to use scalatest 2.0.M5b. Can you close this pull request?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922883", "body": "David, do you mind closing this pull request?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922897", "body": "Lukasz, can you close this pull request?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922908", "body": "Do you mind closing this pull request?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922946", "body": "Keep an eye on Camel @dev mailinglist - this is where we discuss releases\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922946/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/26192777", "body": "Thanks for this. Do you mind closing this request as the code is committed?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/26192777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/26192784", "body": "Can you close this request as the code has been fixed?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/26192784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/26192786", "body": "Can you close this request as the code has been fixed?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/26192786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/26192787", "body": "Can you close this request as the code has been committed?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/26192787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/26192800", "body": "Can you close this request as the code has been committed?\n\nAnd thanks for this contribution. Please keep on contributing, we love that. And if you have ambitions to become a committer then just keep hacking, blogging, and be a bit active on the mailing list.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/26192800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/26192803", "body": "Can you close this request as the code has been fixed?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/26192803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/26192810", "body": "Can you close this request as the code has been fixed?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/26192810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/26192814", "body": "Can you close this request as the code has been fixed?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/26192814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/26192821", "body": "Can you close this request as the code has been fixed?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/26192821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/26192925", "body": "Thanks for the pull request. The code has been commited. Can you close this?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/26192925/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/26192931", "body": "Can you close this as the code has been committed?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/26192931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/26192981", "body": "Can you close this as the code has been committed?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/26192981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/26192983", "body": "Can you close this as the code has been committed?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/26192983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/26193752", "body": "Thanks for the contribution. Do you mind closing this pull request as the code is committed?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/26193752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/26193773", "body": "Can you close this pull request as the code has been committed?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/26193773/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/26193871", "body": "Can you close this pull request as the code has been committed?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/26193871/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/26668579", "body": "Thanks, the code has been committed. Do you mind closing this pull request?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/26668579/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/27071402", "body": "Thanks. I have merged the fix into our branches. Do you mind closing this pull request?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/27071402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/27622660", "body": "Thanks for this pull request. Just merged that into the master branch. Do you mind closing this pull request?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/27622660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/27622882", "body": "Yeah keep em coming. But you may want to anonym that tweet message, eg just change some of it so it cannot be traced back to an actual tweet message - just in case, etc.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/27622882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/28146415", "body": "Thanks for the pull request. The code has been merged to the ASF repo. Do you mind closing this pull request?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/28146415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/29374985", "body": "Can this be closed. The PR has been applied.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/29374985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/29375762", "body": "See\nhttps://issues.apache.org/jira/browse/CAMEL-7017\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/29375762/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/29375886", "body": "We would need your help with documentation for this new component. Do you mind attaching a .txt file to the JIRA ticket with the documentation. You can take a look at any of the existing component as a sample.\n\nI can then style the docs and get it added to the Camel docs.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/29375886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/30450991", "body": "This PR has been applied to the code base. Can you close this PR?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/30450991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/33045634", "body": "Thanks for the pull request. Its been applied. Do you mind closing this?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/33045634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/33565830", "body": "Please do only change relevant code that is part of the needed changes.\n\nThe other changes makes noise, such as adding final / changing indent / etc.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/33565830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/34099146", "body": "Thanks, code has been merged. Do you mind closing this PR?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/34099146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/34099259", "body": "PR has been merged. Do you mind closing this PR?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/34099259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/34099485", "body": "CAMEL-7021 has been fixed. Do you mind closing this PR?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/34099485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/34099531", "body": "Can you close this request as the code has been fixed?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/34099531/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/34099552", "body": "Can you close this request as the code has been committed?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/34099552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/34099571", "body": "Can you close this pull request as the code has been committed?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/34099571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/35595447", "body": "Thanks for the PR. Its been applied to the code base.\n\nDo you mind closing this PR?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/35595447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/35599073", "body": "Thanks Preben. Do you mind closing this PR?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/35599073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/35599140", "body": "Thanks. This PR has been applied. Do you mind closing this PR?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/35599140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/35898578", "body": "Nice catch, thanks for this. Will get it merged.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/35898578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/36219526", "body": "This has been merged. Do you mind closing this PR?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/36219526/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/36219582", "body": "This has been merged. Do you mind closing this PR?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/36219582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/36219594", "body": "This has been merged. Do you mind closing this PR?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/36219594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/36219629", "body": "Can you close this request as the code has been fixed?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/36219629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/36219663", "body": "Any update on this?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/36219663/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/36219671", "body": "Can you close this request as the code has been fixed?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/36219671/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/36219777", "body": "@WillemJiang Apache Gora is in maven central. Wonder if you can move forward to get this component to the ASF code base?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/36219777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/36220331", "body": "Logged a ticket\nhttps://issues.apache.org/jira/browse/CAMEL-7245\n\nI will get this merged today. Do you mind start working on the documentation?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/36220331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/36222069", "body": "Can you close this PR as its in camel-extra! \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/36222069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/37407536", "body": "Thanks, can you close this PR?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/37407536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/37407650", "body": "Thanks. I think Willem have applied your PR. Can you close it then?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/37407650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/37407690", "body": "Thanks for the PR it has been applied. Do you mind closing this PR?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/37407690/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/37407825", "body": "@sksamuel thanks we got your camel-kafka component now. We would love some help with the documentation for it.\n\nDo you mind helping out, you can sketch something down and attach a file to a JIRA. \n\nAnd for this PR as its been applied, do you mind closing it?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/37407825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/37407854", "body": "This has been merged. Do you mind closing this PR?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/37407854/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/37910200", "body": "Thanks. This has been merged. Do you mind closing this PR?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/37910200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/45401561", "body": "Applied, do you mind closing this\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/45401561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/45401563", "body": "Applied, do you mind closing this\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/45401563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/45401565", "body": "Applied, do you mind closing this\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/45401565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/45401570", "body": "Applied, do you mind closing this\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/45401570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/45401582", "body": "Applied, do you mind closing this\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/45401582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/45401588", "body": "Applied, do you mind closing this\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/45401588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/45401589", "body": "Applied, do you mind closing this\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/45401589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/45401601", "body": "Applied, do you mind closing this\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/45401601/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/45401617", "body": "Do you mind closing this PR\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/45401617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/45401624", "body": "Do you mind closing this?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/45401624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/45433734", "body": "Thanks this has been applied. Can this PR be closed.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/45433734/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/45469236", "body": "You need to polish this PR before we can accept it, eg you have TODO in the source code\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/45469236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/46427727", "body": "Thanks though we are not there yet. I added a comment on that camel ticket.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/46427727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/48434660", "body": "Hi\n\nCan you take a look at how this unit test does set a fixed locale for a test and restore it again\n\ncomponents/camel-bean-validator/src/test/java/org/apache/camel/component/bean/validator/BeanValidatorRouteTest.java\n\nThen you can set the locale to eg, Locale.US for the test.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/48434660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/48469429", "body": "Hi \n\nNo problem. Thanks for working on this. We love contributions, so just keep on. Working on Camel can be fun :)\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/48469429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/48948832", "body": "Thanks Matt. This has been merged to the code base. Do you mind closing this PR ?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/48948832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/48948972", "body": "Thanks for this PR. The code has been merged. Do you mind closing this PR?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/48948972/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/49845662", "body": "Hi do you mind creating a new PR with the component added to the master branch of Apache Camel, and where the component is added to the components directory, where all the other components are.\n\nThe current patch / PR cannot be applied without a lot of work on our end.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/49845662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/51204059", "body": "@ge0ffrey changes to the doc page, you can do yourself if you have wiki edit permissions\nhttp://camel.apache.org/how-do-i-edit-the-website.html\n\nIf not then you can log a JIRA at CAMEL and provide the details you want changed. \nhttp://issues.apache.org/jira/browse/CAMEL\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/51204059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/51208512", "body": "@ge0ffrey do you have that Apache ICLA signed?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/51208512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/51328272", "body": "Thanks but no thanks.\n\nWe cannot have camel-core depend on OWASP encorder or any other 3rd party library for that matter.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/51328272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/51329878", "body": "No please dont. We do NOT want any components to depend on some unnecessary 3rd party JARs.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/51329878/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/51678605", "body": "Thanks do you mind adding an unit test also\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/51678605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/54590506", "body": "Thanks for this PR. Its been accepted into the codebase.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/54590506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/54591734", "body": "Thanks but we are now using commons pool in camel-sjms so we have this out of the box now.\n\nDo you mind closing this PR ?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/54591734/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/54591811", "body": "Thanks we now create the thread pools in the doStart etc. Do you mind closing this PR?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/54591811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/54591887", "body": "The if check for the debugger is needed as its a method call, and not just passing in the instance as-is. Do you mind closing this PR?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/54591887/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/54592152", "body": "We have this PR. Do you mind closing it?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/54592152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/54592232", "body": "We got this code. Do you mind closing this PR?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/54592232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/54592258", "body": "This has been fixed. Do you mind closing this PR?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/54592258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/54739164", "body": "CAMEL-7723 has been implemented.\n\nDo you mind closing this PR?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/54739164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/54739270", "body": "Thanks CAMEL-7556 has been applied. Do you mind closing this PR?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/54739270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/54739282", "body": "Thanks we got this. Do you mind closing this PR?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/54739282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/54739290", "body": "The code in rabbitmq has been changed since. Do you mind rebase and update this PR so the code can be merged to the master branch?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/54739290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/54739616", "body": "Thanks for this PR. Sorry it took so long until we got it included, but its in Camel 2.14.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/54739616/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/54739742", "body": "CAMEL-6786 has been implemented. Do you mind closing this PR?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/54739742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/54739754", "body": "Do you mind closing this PR if you do not have time to finish it. If you find time in the future you are welcome to open it again. \n\nWe would like the open PR to be a list of active PRs\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/54739754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/56273480", "body": "Thanks @jgquinn do you mind taking a look at using the header filter strategy as Willem says. \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/56273480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/56273651", "body": "Hi @alaz \n\nDo you know what license that beanstalk library uses? It seems its using GNU GPL, eg if you look inside the JAR and see the LICENSE file.\n\nAnd that license is listed under category X at\nhttp://www.apache.org/legal/3party.html\n\nWhich means unfortunately we cannot accept the code at ASF. \n\nIf this is the case, then I am sorry. We can host the code at Camel Extra however if that has interrest. Or if its possible to switch to another beanstalk client that is compatible with ASF - eg see that link above.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/56273651/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/56274212", "body": "Ah on the website, its a dual-licensed for BSD and GPL\nhttps://github.com/RTykulsker/JavaBeanstalkClient\n\nAnd BSD is category A so we should be able to accept this - yay!.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/56274212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/56980484", "body": "Willem have fixed this. Thanks for the PR. Do you mind closing this?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/56980484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/57121628", "body": "Thanks for this PR. It has been merged now.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/57121628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/57121666", "body": "Do you mind closing this PR?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/57121666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/57121711", "body": "Thanks for the component.\n\nDo you mind closing this PR?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/57121711/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/61860306", "body": "Willem have merged this PR. Do you mind closing this?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/61860306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/61860329", "body": "Willem have merged this PR. Do you mind closing this?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/61860329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/7670984", "body": "This has been fixed. Do you mind closing this PR?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/7670984/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/9990483", "body": "Thanks for spotting I am fixing this now, would be good if you could test again with the fix.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9990483/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/10729249", "body": "You are welcome to create a new PR with the suggestion\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/10729249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/10869087", "body": "I would probably named this DozerThreadContextClassLoader as otherwise its easy to mistake this class as something provided out of the box from Java itself.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/10869087/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/10869090", "body": "Can this be final?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/10869090/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/10869142", "body": "Maybe set this as DEBUG level to not have too much info logging noise. You have one INFO logging about the switch where the old is logged already\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/10869142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/15067619", "body": "yeah sure, the catalog is however a standalone module for tooling providers. As the operations is idempotent it doesnt matter if 2 threads concurrently have a cache miss and race to put to the cache.\n\nThe cache is not meant for highly concurrent environements, but for tooling.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/15067619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/15080296", "body": "afaik its our own bundle for mock testing in osgi - we dont use that external jar but mock javax mail itself.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/15080296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/15080306", "body": "Ah darn there is other components using the old mvn name - why the hell did they change it to com.sun - that company is no longer!.\n\nDo you mind doing a PR to fix the remainder?\n\nYou can find the problems with\nfind . -name 'pom.xml' | xargs grep \"javax.mail\"\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/15080306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/15080318", "body": "No problem we like to get PRs and keep the libraries up to date - there is 200+ components so plenty of work ;)\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/15080318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/15355244", "body": "Well spotted, we can just remove that check as they other api components do not have such as check\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/15355244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/15956809", "body": "btw you can use repo-add camel 2.16.1\nand also for activemq\nrepo-add activemq 5.12.1\n\nkaraf knows a number of urls for known projects where camel and activemq is known. The same for karaf 2.x.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/15956809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/16501331", "body": "You should move this in the top, eg before you write the file.\n\nAnd we usually use camel to write files by sending to a file endpoint\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/16501331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/16828188", "body": "Thanks for all the comments @ben-manes we will take a look at them when we get the OSGi issue sorted so we can build camel-core module.\n\nThe OSGi issue is a part of a larger problem with maven-bundle-plugin having its bugs and issues in different versions. So we have kept to a working 2.3.7 for a long time now. \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/16828188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/16911682", "body": "Thanks for all those comments. I have improved the docs about LRU is not real LRU and the onRemoval to only trigger if it was evicted.\n\nFor stats we keep them as is, as that is how all the other Camel stats is done.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/16911682/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/17656023", "body": "A new bundle on the way: https://issues.apache.org/jira/browse/SMX4-1988\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/17656023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/18374248", "body": "@Premkumar09 can you log a JIRA ticket and you are welcome to work on a github PR / patch to fix this. We love contributions: http://camel.apache.org/contributing\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/18374248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/18393311", "body": "I logged a ticket\nhttps://issues.apache.org/jira/browse/CAMEL-10185\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/18393311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/18488727", "body": "@Premkumar09 are you able to work on a PR? We want to do a new 2.17.3 release and it would be good to get this fixed in that release.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/18488727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/18859297", "body": "Why do you do this, eg having a special surefire configuration? \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/18859297/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/18859317", "body": "Why was this code needed? This will confuse people, we should add some code comment why this is done\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/18859317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/19935007", "body": "Yeah that matrix table makes more sense, maybe we should add that to the documentation, and make the code work as that - because that would be out intention.\r\n\r\nThen end users can look at that table and configure the options accordingly.", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/19935007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/20927071", "body": "Ah thanks @adriancole if you fancy you are very welcome to do a PR, however the Camel codebase is big, so it may take a little while to clone. But we love contributions, and would be an honor having a commit from mr zipkin ;)", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/20927071/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/20927164", "body": "There is also at the Camel in Action 2 book an example which could have a better readme file: https://github.com/camelinaction/camelinaction2/tree/master/chapter7/prototype2/rules2-springboot-hystrixdashboard\r\n\r\nAnd thanks a lot for telling us about this easier way. When I looked at this a while back I couldn't find that and it was the docker compose way that I could get the server started. But I do want non docker users to run this easy as well", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/20927164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/20927265", "body": "Ah doh of course. The zipkin is to be covered in chapter 17 which is yet to be written. Thanks for the PR will get this merged.", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/20927265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/21318798", "body": "I assume this is some testing stuff and should be scope=test", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/21318798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/21318827", "body": "We need the documentation to include the documentation again for all these options", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/21318827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/21401708", "body": "I wonder if it should be LinkedHashMap so the options are in the same order as provided?", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/21401708/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/22054218", "body": "If an exception was intended to be thrown, then you should add a fail(\"Exception should have been thrown\") to have a safe guard in case it did not happen", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/22054218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/22339869", "body": "Oh I would suggest to only use 1 field as a String type and get the status via https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/StatefulService.java#L29 which is an enum which you can then call .name() to get its string value.", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/22339869/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/22340206", "body": "I think `status` is a better name. Its the status of the route not as much _service_ which is more of an abstract term in Camel.", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/22340206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/22561098", "body": "Ah thanks, just renamed", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/22561098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/22697488", "body": "You can expose metrics for example as JMX attributes by using the `@ManagedAttribute` annotation on an endpoint/consumer/producer etc. Its not so many components doing that but for example seda does: https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/component/seda/SedaEndpoint.java#L253", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/22697488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/22699350", "body": "Ah no it does not, let me fix that. Thanks for spotting", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/22699350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/22998940", "body": "Ah well spotted you are welcome to correct", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/22998940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/24134960", "body": "I tried that first but when you use getBeanOfType or getBean etc then we had some weird error in one of the proxy unit tests in camel-spring. This way by containsBean we ensure no side-effect from spring. Also this is for internal usage only for making xml on spring boot first-class and hence not intended for end users to plugin custom configurer. And also its only for xml, and not java camel context etc.", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/24134960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/24135052", "body": "I would like to keep it as-is as its how all the other Camel components behave. However we may want to add a check that the message body is not null if localPath is not configured. ", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/24135052/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/24166683", "body": "There are different methods for put with body and put without body.", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/24166683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/26741966", "body": "You are welcome to provide a PR", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/26741966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/48041141", "body": "We do not include author tags in our javadoc at Apache Camel. Do you mind removing that?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/48041141/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/48041298", "body": "please do not do wildcard imports. See building with checkstyle here to make the code comply: http://camel.apache.org/building\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/48041298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/48041346", "body": "false is implied as default, so no need.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/48041346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/48041374", "body": "The same is 0 for a primitive long value\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/48041374/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/48041564", "body": "We should not swallow exceptions. Maybe better to set the exception on the exchange or something ?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/48041564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/52711875", "body": "there is a typo here\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/52711875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/52711908", "body": "multivalue = \"true\"\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/52711908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/52711931", "body": "add something that you can use one or more custom functions, eg its a list.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/52711931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/52712037", "body": "You need to add some logic to xstl component so people can provide the functions in the ur, as a comma separated value of names to lookup in the registry, eg `saxonExtensionFunctions=#foo,#bar` etc. to lookup foo and bar from the registry. eg add an unit test in camel-saxon to see how easy/hard it is to use as a spring/blueprint end user.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/52712037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/52717227", "body": "Yeah you would need to use org.apache.camel.util.EndpointHelper#resolveReferenceListParameter in the component. You can git grep to find other components using it. Then the type in the endpoint can be the same.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/52717227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/54140610", "body": "Reduce the logging level to debug or trace\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/54140610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/55024907", "body": "You need a little more. The option should also be added to  `org.apache.camel.model.dataformat.JaxbDataFormat`\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/55024907/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/55933495", "body": "can we flip this, as inverted options is confusing. So by default it can be true instead. dataSetIndex=true as default. And label=\"consumer,producer\" is implied so you do not need that. Also defaultValue = null is also implied, eg no default value.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/55933495/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/55933498", "body": "Our coding style is to have null on the other side in an == \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/55933498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/55972433", "body": "Use a string type, and then in the component validate its either of those 3 words. And then in the `UriParam` you can specify `enums=\"strict,lenient,off\"`\n\nAnd use `off` instead of `disabled` as its seems a better word imho.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/55972433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/56122281", "body": "Is \\z some special token for new lines on any platform? I have not seen this before?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/56122281/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/57055500", "body": "Use javaType = \"String\" so the tooling knows it can use a plain string to set multiple flags in the same string separated by comma. And write that in the javadoc as documentation.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/57055500/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/57055574", "body": "eg write that you can specify multiple flags separated by comma\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/57055574/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/56790497", "body": "this should be scope = test ?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/56790497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/56790529", "body": "Do not log and throw error, just throw error\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/56790529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/56790551", "body": "All this info logging should be TRACE or DEBUG\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/56790551/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/56790616", "body": "Looks like some weird characters in here. Use \\u9999 to refer to foreign characters. eg their unicode number.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/56790616/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/56790660", "body": "do not throw this exception, instead use getMandatoryBody\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/56790660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/56790775", "body": "Do not create your own exceptions for common errors such as invalid / url etc. Use the exceptions from camel itself.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/56790775/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/57294942", "body": "Wo do not have `@author` tags at ASF. So that should be removed also.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/57294942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/58168026", "body": "We also have a spring 4.2 version\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/58168026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/58168069", "body": "Not sure we should have hibernate here, as Apache Camel has not hibernate component. \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/58168069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/58368673", "body": "Only document one place, eg the javadoc. So remove the description. Also put space around label=\"ad...\"\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/58368673/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/58368713", "body": "Make sure the code passes checkstyle, run\n\nmvn compile -Psourcecheck\n\nto validate\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/58368713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/59506263", "body": "Please do not change an existing unit test, create a new test\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/59506263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/59506315", "body": "Dont WARN but use mandatoryLookup as if the option is missing then we should fail.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/59506315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/60599431", "body": "Please avoid/abuse using optional for a simple check like this.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/60599431/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/60599485", "body": "do not reorder the imports. Run mvn -Psourcecheck to validate the code\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/60599485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/60823897", "body": "Ah here you may need to return OUT instead. eg do a hasOut ? getOut : getIn code on the exchange, so the correct Message instance is returned.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/60823897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/61240594", "body": "You should do\n\n```\nif (exchange.hasOut()) { return exchange.getOut(); } else { return exchange.getIn(); }\n```\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/61240594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/61206392", "body": "The standard for keys in Camel is as in that red line, eg camelComponentNameKeyName\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/61206392/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/61206430", "body": "Run from command line this goal: mvn install -Psourcecheck in the camel-flink directory\nand then fix those checkstyle issues it reports\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/61206430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/61206443", "body": "Do not have empty line here\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/61206443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/63842779", "body": "Do not swallow exception. You can rethrow the exception with the given error message, but the request must fail with an exception so the end user can react.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/63842779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/63842826", "body": "Why are you adding this new code? Please keep a PR about one thing only. \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/63842826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64027335", "body": "The consumer extends ScheduledPollConsumer and therefore you likely want the endpoint to extend ScheduledPollEndpoint that gives you a lot of scheduling outputs for the consumer.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64027335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64027550", "body": "Some of these polling options you will get from ScheduledPollEndpoint\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64027550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64027599", "body": "Avoid info logging as it logs on each poll which can be noisy. Set this to debug level\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64027599/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64027713", "body": "Sometimes we overload the createExchange method on endpoint to take in parameters so we can create the exchange that is specific of this component, eg the code below can be part of the createExchange(a, b) method\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64027713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64027771", "body": "Use {} placeholders in logger\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64027771/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64027925", "body": "Since the offset is transient state, what happens if you stop the consumer and start it again? Would it poll in old messages? Would you need some kind of logic to persist that state or do some logic in doStop of the consumer? \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64027925/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64028013", "body": "Remember to call \n\n```\nconfigureConsumer(answer);\n```\n\nalso as that is needed, see other components.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64028013/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64028085", "body": "Reduce the info level logging noise.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64028085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64209940", "body": "Can you remove commented out code\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64209940/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64336283", "body": "Can we use count instead of cnt\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64336283/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64336403", "body": "Make a setter that takes a single String where the values are separated by comma so you can pass in the value in the same string. This makes it easier if loading values from properties/config/tooling\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64336403/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64336571", "body": "Ah the weather api uses cnt instead. That is a bit of shame as cnt is a bad abbreviation. Also limit is a better english term to limit the result.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64336571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64693729", "body": "I wonder if people running with locale GERMAN, CHINESE etc would get localized error messages from the JDK? You may need to just check the exception type, or maybe try to change the default locale and restore it back after the test.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64693729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64693764", "body": "eg as you already check that its caused by ArithmeticException then that is often enough and we can remove this check for the english error message.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64693764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64984997", "body": "If the super class is java.lang.Object then it does NOT have a super class. So I think you need to make a check for that.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64984997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/67815373", "body": "As its just a option for setting simple text=number, then we should make it a multi valued type, so you can configure this directly from the uris as well. See for example MailEndpoint for an example. You can then try to do this and do another PR with this improvement.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/67815373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/68181771", "body": "All the types in the Camel DSL are lower case as start, eg should be sniHostNames instead.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/68181771/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/68181827", "body": "We should not use the name xxxDefiniton in the DSL that the end user sees. It should just be sniHostNames.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/68181827/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/68181966", "body": "Maybe let it be a plain getter/setter. As this setter will add and not remove any existing. A bit unusual, as getter/setter are usually just to set or get the values as-is.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/68181966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/68182006", "body": "I wonder if you should only call this setServiceNames if the host names are not empty (eg there is some values)\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/68182006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/68888918", "body": "The value should be like the others, see just above\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/68888918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/68888978", "body": "Dont use java.util.Vector, use ArrayList\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/68888978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/71504373", "body": "Can you move this code inside the if (isResultSet) so the headers is only pass through if we set some data because there was a result set.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/71504373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/72060929", "body": "We need to do something bette than log an ERROR. Either its a DEBUG/TRACE logging error to ignore this. Or its something that needs to be wrapped and thrown as runtime exception. And is there any API on OSGi you can use to check if the syntax is correct and then just do a if correct then ... else ignore,\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/72060929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/73126080", "body": "Can you use the same license header as the other XML files in Apache Camel. They need to be similar as we have a RAT check that check the code for license alignments.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/73126080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/73126139", "body": "Same story, copy license header from existing working xml file such as from a pom.xml file\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/73126139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/73641942", "body": "We cannot have dependency on com.sun classes.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/73641942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/73641954", "body": "Please remove author tag from source code\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/73641954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/74728796", "body": "Flip the if as we do X != null style in Camel\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/74728796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/74728834", "body": "W do not use \\* imports. Run: mvn compile -Psourcecheck to run checkstyle to see what problems you have\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/74728834/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/74732667", "body": "You need to add javadoc to document this option on the setter.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/74732667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/74732753", "body": "Can we add a license header to this file?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/74732753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/74776745", "body": "This may confuse users reading this code why its doing this code. Can you add some code comments.\nAlso it seems JPA do not have a good way to re-attach an entity accordingly to SO users: http://stackoverflow.com/questions/912659/what-is-the-proper-way-to-re-attach-detached-objects-in-hibernate. \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/74776745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/75687181", "body": "you need to check if these values are null as they are Integer types.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/75687181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/77136947", "body": "We do not have headers with author names. This needs to be removed.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/77136947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/79770925", "body": "Can you check for null, if removePath is null.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/79770925/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/80191601", "body": "What if commandWithOffsets is empty? Maybe its better to avoid a split attempt?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/80191601/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/80191672", "body": "The pattern can be pre-compiled as static\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/80191672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/80191798", "body": "We cannot just dump stacktrace, this need to be set as exception on the exchange, and break out, so Camel can detect the error.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/80191798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/80191870", "body": "We use coding style where null is on the other side of the if, eg pattern != null\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/80191870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/80191956", "body": "What if the timezone do not exists? Wonder if there is a runtime exception? And is that error message good? Or can we improve this for the end user?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/80191956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/80192030", "body": "Can we use null as default timezone instead, which is the current behavior \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/80192030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/80192166", "body": "That should be date-with-timezone\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/80192166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/80192300", "body": "You still need this parser exception if the date function is invalid. This function is still the same, to use the timezone you need to use your new date-with-timezone command.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/80192300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/80192433", "body": "Please keep existing unit tests\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/80192433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/80192604", "body": "LOL, hopefully we keep it to only + and - signs, and not add \\* or / as well to really confuse users ;)\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/80192604/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/80936453", "body": "Not sure if we can import this package in Camel code as it should only use the public api from JDK, eg that is typically java. For example not sure if OpenJDK or IBM JDKs have this jdk.nashorn package.\n\nCan you research some more on the internet about this\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/80936453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/82419828", "body": "@nicolaferraro is this correct, should cassandraunit be exlucded in the SB bom generator?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/82419828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/83261720", "body": "I wonder if we should Collection instead of List to capture any kind of list like structures.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/83261720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/83439680", "body": "I think a default value of empty string is better to be null. \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/83439680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/84285922", "body": "We do not have author tags in the source code. Do you mind removing this?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/84285922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/84286193", "body": "I think we need to store the client reply code / string before doing chmod operation, so they are from the operation that performed the upload. So eg move the above code below the code below that set those headers.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/84286193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/84286286", "body": "The license header in the top of the file should be ASF standard license we use, so you can copy it from another file.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/84286286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/87689018", "body": "The syntax should be without [options]. Those are implied.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/87689018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/87689032", "body": "You need to set defaultValue in the `@UriParam` to 1 so its the same as the field value\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/87689032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/87689042", "body": "There should not be space in the `enums` attribute, eg `AUTO,NONE`\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/87689042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/87689316", "body": "Ah yeah javadoc on endpoint become the component description AFAIR in the generated docs. So please updated this.  eg its used for the description summary at https://github.com/apache/camel/tree/master/components#components\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/87689316/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/87689412", "body": "For example\nhttps://github.com/apache/camel/blob/master/components/camel-drill/src/main/java/org/apache/camel/component/drill/DrillEndpoint.java#L38\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/87689412/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/89137836", "body": "The old code was calling maybeStart that does some checks which I would like to keep using.", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/89137836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/89068125", "body": "What do you use this for? Why do you set a property to a static type reference?", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/89068125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/89068501", "body": "Ah okay there are others doing this, maybe you can change the code to do like they do so its similar?", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/89068501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/89072920", "body": "Ah yeah other way around is better. You are welcome to fix that too. Just that its consistent, so next time someone add something he/she does the same.", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/89072920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/88893430", "body": "name parameter should be urn", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/88893430/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/88893455", "body": "name parameter should be urn", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/88893455/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/88893745", "body": "Maybe just set this as this.urn = \"java:\" + clazz.getName() then you dont need the transient java type", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/88893745/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/88893886", "body": "The javadoc says bean transformer but the class is named custom", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/88893886/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/88894099", "body": "Use camelContext injector to create a new instance as it can integrates with spring/blueprint etc and supports IoC stuff", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/88894099/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/88894263", "body": "AFAIR the javadoc is use for documenting what this DSL does. Can you put a bit better documentation for those.", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/88894263/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/88894691", "body": "Avoid dependency in definition classes to a specify CamelContext instance", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/88894691/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/88894752", "body": "Add (CamelContext context) as parameter instead and remove the local CamelContext instance", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/88894752/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/88895194", "body": "Can we split this method into smaller methods where each method does one kind of conversion", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/88895194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/88895376", "body": "javadoc missing", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/88895376/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/88895518", "body": "will cause checkstyle error", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/88895518/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/88896282", "body": "I think we should create a TransformerRegistry class like we have EndpointRegistry. Then we can also use that to expose JMX information at runtime etc. \r\n\r\nhttps://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/spi/EndpointRegistry.java\r\n\r\nhttps://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/management/mbean/ManagedEndpointRegistry.java", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/88896282/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/88896750", "body": "We should ponder to make this Java DSL nicer to use, having to create an Definition class and configure it is a bit cumbersome.\r\n\r\nIt could be something alike\r\n\r\n    transform().from(\"xxx\").to(\"yyy\").withUrl(\"zzz\").withJava(MyClass).withDataFormat(myDataFormat) \r\n\r\nor something, where you can chose any of those 3 kinds url, java or data format. Yeah it takes time to come up with a good dsl.", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/88896750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/88898272", "body": "Not sure if we need to create a new exchange, we can send the existing exchange. ", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/88898272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/88898387", "body": "Use ServiceHelper.startService / and ditto for stop. No need for instanceof check either", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/88898387/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/89344720", "body": "Why did you add this maven plugin", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/89344720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/89345085", "body": "This should maybe be DEBUG logging level to reduce logging noise", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/89345085/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/89345192", "body": "LOG.warn(\"Cannot download from \" + entry.path + \" due \" + e.getMessage() + \". This exception is ignored.\");", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/89345192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/89345348", "body": "Debug level", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/89345348/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/89345448", "body": "Remove the code below that are not in use", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/89345448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/89345494", "body": "Remove code that are not in use", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/89345494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "fhassak": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/camel/commits/4f016fa2de833934141b6173414c5b12f04f3503", "message": "camel-mongodb : remove unnecessary parameter when searching for all documents"}, {"url": "https://api.github.com/repos/apache/camel/commits/c2d613564b673cdeaee7853d25488171d9a22b03", "message": "CAMEL-12142 : default mongodb host"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kkakarla": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/camel/commits/c0519fae887dee476bc3062c922648bb08dfcc68", "message": "\"CAMEL-11598:camel-spring-boot - actuator endpoints - Make it read-only by default\""}, {"url": "https://api.github.com/repos/apache/camel/commits/cde349fc9b1e85f9ad6054644a766977ee11a819", "message": "\"CAMEL-12022:direct component - Let the producer able to block and wait for consumers to be started\""}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "jamesnetherton": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/camel/commits/183b0fae3ce9cd441675e8f2100562a1a3b6aef8", "message": "CAMEL-11907: Improve test coverage for pgevent component"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "xldai": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/camel/commits/a37995cad32805bd47a615d96a354088f3951d4f", "message": "CAMEL-12149 minor fix"}, {"url": "https://api.github.com/repos/apache/camel/commits/8089a2ff011ef3cf5c6a2fca52ed996c451ef148", "message": "fix CAMEL-12149 ensure the CONTENT_TYPE header can be retrieved"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "apupier": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/camel/commits/d848f6daf0f6c24701a37cba1b8a7691a6c544e2", "message": "Indicate new Maven version requirement 3.3.3 for Camel 2.20 build\n\nsee http://camel.apache.org/camel-2200-release.html#Camel2.20.0Release-Importantchangestoconsiderwhenupgrading\r\n\r\nSigned-off-by: Aur\u00e9lien Pupier <apupier@redhat.com>"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/22559046", "body": "I'm wondering if this kind of restriction is really needed as the attribute registerEndpointIdsFromRoute has been added, , what do you think?", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/22559046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/81738213", "body": "you can avoid result != null check, result instanceof ScriptObjectMirror will return false if it is null\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/81738213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/81737934", "body": "you are looking only in the cache, you need to see if this value can be loaded also.\nThere is also a persistedCache, is persistedCache a subset of the ache or do we need to look into both?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/81737934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/81985655", "body": "you're welcome, unfortunately no, I was just reading the code to learn about this project so I'm not able to answer you about the OSGi compatibility, sorry.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/81985655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "objectiser": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/camel/commits/96b20a1988fd858e2443ed176a5ad1346e28c466", "message": "CAMEL-12153 Upgrade OpenTracing Java API version to 0.31"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "fjollberg": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/camel/commits/051a5a496c74664550f714dd0228580b4dae39e4", "message": "CAMEL-11885: Add support for creating folder by path in camel-box"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "dmvolod": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/camel/commits/308766ab90e2b671666ced96c7e6abc73b778c84", "message": "CAMEL-12099: Update camel-thrift to libthrift 0.11.0"}, {"url": "https://api.github.com/repos/apache/camel/commits/e5a7433a3ee288733b30efb5665d89ec4bd4c221", "message": "CAMEL-12084: Test encoding for query params in camel-olingo4"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/22561037", "body": "@davsclaus , the class name Olingo4Helper instead of Olingo2Helper", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/22561037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/23284444", "body": "Please pay attention, that pom.xml file formatted with TABs instead with SPACEs which is not covered with maven codecheck plugin. It would be nice to reformat it.", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/23284444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/24219582", "body": "@onders86 ,this return back to incorrect word, it would be better to fix the the base comment in class", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/24219582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/24928410", "body": "@gzurowski , Gregor, the update version script doesn't update pom.xml files inside connectors/examples", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/24928410/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "nofuss": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/camel/commits/35341491fc7ca26f552d1c6c4900f437f7e2079e", "message": "CAMEL-12137: camel-braintree - Added Support for Braintree Auth Configuration and extended some integration tests."}, {"url": "https://api.github.com/repos/apache/camel/commits/8013229758c2ec46e00fe392f08f90a42f98af3e", "message": "CAMEL-12130 - Minimal changes required to be able to upgrade braintree SDK to 2.74.0"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "MelissaFlinn": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/camel/commits/dcf0b9a3658717f362318dbe0769ab3c1d391e5a", "message": "FUSE-DOC-1921 added info for XML route definition"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "aldettinger": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/camel/commits/75e8835b6d6d720b9660a457fe5c3d483206c45d", "message": "Fixed typos in serviceCall-eip.doc"}, {"url": "https://api.github.com/repos/apache/camel/commits/e065f4aa9f79cbd9bb8bdce1606aef758f808b6f", "message": "CAMEL-12083: Fixed the camel-json-validator feature"}, {"url": "https://api.github.com/repos/apache/camel/commits/cc17d41e765173a64f8dfda71ca8be203c405dd9", "message": "CheckStyle fix"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/26045206", "body": "thanks @PascalSchumacher. If you are interested in, I've listed [the improvements have noticed](https://issues.apache.org/jira/browse/CAMEL-11869?focusedCommentId=16277630&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16277630) following the migration.", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/26045206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/26198766", "body": "Would it be that commit which generate this issue on my machine ?\r\n```\r\n[ERROR] org.apache.camel.component.file.FileConsumeTemplateTest.testConsumeFileWithTemplate(org.apache.camel.component.file.FileConsumeTemplateTest)\r\n[ERROR]   Run 1: FileConsumeTemplateTest>TestSupport.runBare:58->testConsumeFileWithTemplate:46 expected:<[Hello] World> but was:<[Bye] World>\r\n[ERROR]   Run 2: FileConsumeTemplateTest>TestSupport.runBare:58->testConsumeFileWithTemplate:46 expected:<[Hello] World> but was:<[Bye] World>\r\n[ERROR]   Run 3: FileConsumeTemplateTest>TestSupport.runBare:58->testConsumeFileWithTemplate:46 expected:<[Hello] World> but was:<[Bye] World>\r\n```", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/26198766/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/26224359", "body": "Still it's failing on my machine. `body` is valued to `\"Bye World\"` as both file exists by the time of the first call to 'consumer.receive'. They are then sorted by filename.\r\n\r\nHowever, I understand from your lines that it does not behave the same on the CI server.", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/26224359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "PascalSchumacher": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/camel/commits/c4add62486cbabc39deacb63e448acfa85a705f3", "message": "camel-ribbon-starter: fix RibbonLoadBalancerTest#testLoadBalance test failure by adding camel-http4 test dependency"}, {"url": "https://api.github.com/repos/apache/camel/commits/57d028fca3b35530cb98b39a2263431023b346c1", "message": "CAMEL-12126: camel-ftp - Add option for resume download\n\nminimal improvement of javadoc comment"}, {"url": "https://api.github.com/repos/apache/camel/commits/ac6a8d7cbbabc41e9660070689020f3321143045", "message": "Upgrade commons-text to version 1.2"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/15080288", "body": "Hi Claus,\n\nI guess groupId/artifactId should remain unchanged here, because mock-javamail still has a dependency on the old version: https://repo1.maven.org/maven2/org/jvnet/mock-javamail/mock-javamail/1.7/mock-javamail-1.7.pom\n\nCheers,\nPascal\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/15080288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/15080317", "body": "Np, I will create a PR.\n\nI should really have searched for other usages when creating the first PR. Sorry!\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/15080317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/15080345", "body": "As I understand it you rebundle a shaded version of mock-javamail. The pom (`org.apache.camel.tests.mock-javamail_1.7-2.17-SNAPSHOT.pom`) now includes these dependencies:\n\n```\n<dependency>\n  <groupId>javax.mail</groupId>\n  <artifactId>mail</artifactId>\n  <version>1.4</version>\n  <scope>compile</scope>\n</dependency>\n...\n<dependency>\n  <groupId>com.sun.mail</groupId>\n  <artifactId>javax.mail</artifactId>\n  <version>1.5.5</version>\n  <scope>compile</scope>\n</dependency>\n```\n\nthat isn't correct I think.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/15080345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/15354915", "body": "I guess this is wrong. Before it checked that the inBody is not present, so it requires an inBody to be present. According to the comment the above the inBody should never be present.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/15354915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/17656015", "body": "Hi Claus,\n\nusing the jsmpp 2.1.x will not work, because 2.1.x and 2.2.x are not compatible. 2.2.x changed and removed classes of 2.1.x.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/17656015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/17656051", "body": "Good to hear :)\n\nI requested a new jsmpp release (with the osgi fix) https://github.com/opentelecoms-org/jsmpp/issues/43\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/17656051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/26018182", "body": "Great! \ud83d\udc4d ", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/26018182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/26739080", "body": "`(which almost all FTP server does)` seems to be gramatically incorrect", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/26739080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/58045351", "body": "I was not able to use `Assume.assumeFalse`, because the test is not run with a junit4 runner. If I force junit4 (by using `@RunWith(JUnit4.class)`) `ContextTestSupport` can not do it's work.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/58045351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64985484", "body": "As this method only works with `OptionalParameter` this should not be the case. I will update the pull request anyway.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64985484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "nicolaferraro": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/camel/commits/fd1fbd3bf7f1d6bca9b8c30703645dcb3f4c1f55", "message": "CAMEL-11665: fix configuration and documentation"}, {"url": "https://api.github.com/repos/apache/camel/commits/03550e5b440f3febd9dcdb44cd61f66864da67a7", "message": "CAMEL-11665: Saga EIP"}, {"url": "https://api.github.com/repos/apache/camel/commits/8f24c4d0ae8cf15027fc5f5bcfcfde8b99ccc245", "message": "CAMEL-12134: avoid creating multiple contexts when using xml in spring-boot"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/64033575", "body": "I limited the number of INFO messages by printing them only when updates are received (if (updates.size() > 0)), so only one message per successful poll is printed. If this is not a good practice I change it to debug, but the component should have only two INFO level log (when receiving a group of messages, when sending a message).\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64033575/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64037398", "body": "Yes, I tend to avoid using placeholders in SLF4J just because varargs have been introduced recently and it is easy to make mistakes at the ERROR level (due to overloading)... But I agree, this case is safe :)\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64037398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64041758", "body": "When you attempt getting the updates with offset `i`, the service assumes that you have taken all updates up to offset `i - 1`.\nSo, if you stop the consumer and start it again, the consumer will ask for all unread updates (offset=0) and the service will return only updates with id greater than or equal to `i`.\n\nThe documentation states:\n\n> An update is considered confirmed as soon as getUpdates is called with an offset higher than its update_id\n\nThe \"_as soon as_\" statement lets me think it is a synchronous operation.\n\nA duplicate can occur in the following situation:\n1. The consumer retrieves some updates from the service\n2. The consumer is stopped before the next call to the service\n\nThis problem is unlikely to happen when you set the _delay_ parameter to its default value (500ms in next version), but when the delay is set to higher values it should happen more frequently.\n\nI looked at other projects and cannot find other examples of consumers with this kind of persistent state. Can you give me some advices?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64041758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "zregvart": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/camel/commits/1dc9315f0b6f5ce8b7e2a7e8000e17307af7a676", "message": "CAMEL-12085: Don't mandate header case for cust...\n\n...om Salesforce HTTP haders\n\nThe fix in CAMEL-12092 missed second header filter in\n`SalesforceProcessor`, this fixes at the second location as well.\n\nBased on a patch submitted by Dicken George."}, {"url": "https://api.github.com/repos/apache/camel/commits/76daaf1f24fb19ba2e5dffb09eddc8401078bb61", "message": "CAMEL-12085: Don't mandate header case for cust...\n\n...om Salesforce HTTP haders"}], "pull_requests": [{"url": "https://api.github.com/repos/apache/camel/pulls/1450", "title": "CAMEL-10803 Base undertow component on http-common", "body": "# Please don't merge\r\n\r\nI would like some feedback on this first. Still to do:\r\n- [x] Make `UndertowComponent` and `UndertowEndpoint` extend `HttpCommonComponent` and `HttpCommonEndpoint`\r\n- [ ] Implement support for options from `http-common` component\r\n   - [x] `chunked`\r\n   - [ ] `disableStreamCache`\r\n   - [ ] `proxyHost`\r\n   - [ ] `proxyPort`\r\n   - [ ] `authMethodPriority`\r\n   - [ ] `connectionClose`\r\n   - [ ] `traceEnabled`\r\n   - [ ] `responseBufferSize`\r\n   - [ ] `ignoreResponseBody`\r\n   - [ ] `copyHeaders`\r\n   - [ ] `eagerCheckContentAvailable`\r\n   - [ ] `mapHttpMessageBody`\r\n   - [ ] `mapHttpMessageHeaders`\r\n   - [ ] `mapHttpMessageFormUrlEncodedBody`\r\n   - [ ] `okStatusCodeRange`\r\n   - [ ] `urlRewrite`\r\n   - [ ] `async` (though Undertow is heavily async, so may be ignored)\r\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/20998395", "body": "Spot on :+1: ", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/20998395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/21396577", "body": "Thanks for spotting this :+1:! Definitely open a issue, if you feel like creating a PR just mention that, otherwise I'll create a fix later today.", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/21396577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/89071927", "body": "The `TypeReference` is needed by the Jackson to properly support generics. I think that it should be the other way around (change [JsonRestProcessor.java#L71)](https://github.com/zregvart/camel/blob/9a45774db503967bbfabb0bdad0f63ea8f7ace69/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/internal/processor/JsonRestProcessor.java#L71) that is to inline `TypeReference<List<Version>> `, each time that `case` branch is hit a new object is created only to pass on the type information. From performance standpoint it would be better if that line was inlined as constant. I can do a pull request against that line, didn't want to mix two issues in one PR.", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/89071927/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "isavin": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/camel/commits/8eccc39d61229ce293e63482be42d4a70fc8bf47", "message": "Minor: add link to issue tracker."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "CodeSmell": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/camel/commits/4f65a942465d82acea52a5012c00bec81d1183e6", "message": "address PR comments"}, {"url": "https://api.github.com/repos/apache/camel/commits/9cc0eedfd62be8809db4c9c97ad42eddda121d0f", "message": "[CAMEL-12125] add keepOpen to endpoint circuit breaker"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/27002609", "body": "@codecracker2014 \r\nBased on the question I assume you are consuming from a JMS queue/topic and then calling a web service. If that is the case, this policy/circuit breaker would detect failures calling the web service and then stop consuming from the endpoint once the configurable threshold was met. \r\n\r\nAny messages that are consumed from the queue/topic will be rolled back (assuming that there is a transaction) when the exception is thrown calling the failing web service. The exception will be counted by the policy. This policy/circuit breaker, once opened, will minimize the number of messages that go on the DLQ. However, the handling of the message that is rolled back will be determined by the JMS broker. If it is configured to move messages to a DLQ on rollback there is nothing the policy can do to stop that. \r\n\r\nGiven this scenario, I recommend implementing the `ThrottingExceptionHalfOpenHandler` to check on the web service rather than rely on the default behavior of resuming the route during the half open state. Any messages consumed during this check will also go to the DLQ.\r\n\r\nPS: probably best to ask the question in one place :)", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/27002609/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/27019611", "body": "I assume that if the circuit is being opened that the web service is failing and that all in-flight messages would fail. If there is a way to handle these consumed messages in a way that does not involve a rollback you may want to consider the Camel/Hystrix circuit breaker. Here each message is processed via fallback option instead of rolled back.", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/27019611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "jisikoff": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/camel/commits/03900cb2c9c6c6ceb6900e95455ce663b0a1c509", "message": "CAMEL-12129: fix broken integration test from CAMEL-12111"}, {"url": "https://api.github.com/repos/apache/camel/commits/8311af003ab888ca53a042ce5e9955b7cd5a845b", "message": "CAMEL-12111: Fix reconnect if broker is down on startup.  Also fix so channels share connections again.  Also fix consumers getting started twice on reconnect at startup.  Also fix null pointers if automaticRecoveryEnabled is not set on the endpoint."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "Fabryprog": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/camel/commits/a5cd6a7f9853e379b488af52aa7e1b20578e6031", "message": "CAMEL-12122: S3: Add createDownloadLink functionality"}, {"url": "https://api.github.com/repos/apache/camel/commits/d9594601010c2fb7a8e1f2fadf463624001c84f5", "message": "CAMEL-12118: DynamoDB: Execute query using secondary indexes"}], "pull_requests": [{"url": "https://api.github.com/repos/apache/camel/pulls/1190", "title": "CAMEL-10349, javaScript setHeader conversion fault", "body": "https://issues.apache.org/jira/browse/CAMEL-10349\n", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/78771674", "body": "I have copy the intestation from another file but i have the same error.\n\nWhat do i do wrong?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/78771674/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/78775520", "body": "I just reuse consumer endpoint setting! i wouldn't change it!\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/78775520/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/78782099", "body": "I wrote this producer 6 months ago... i remember that without this code i had an failure using snmpVersion2! you can found this code in more online examples!\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/78782099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/78790537", "body": "@lburgazzoli this \"remove\" can be a multithreading problem! What do you think?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/78790537/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/78799061", "body": "done\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/78799061/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/78913585", "body": "So... i can move on doStart also PDU!\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/78913585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/79366187", "body": "Yes... it is a mistake to declare singleton! I am fixing... Thanks!\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/79366187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/79366441", "body": "ops... ;-)\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/79366441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/79368311", "body": "I have no idea what to do.... do you have a guide about?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/79368311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/80937473", "body": "Ok, i am using openJDK!\n\njdk.nashorn.api is official package into java8!\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/80937473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/81980362", "body": "@apupier ok... thanks! Do you have any news about OSGi compatibility?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/81980362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/83391773", "body": "@lburgazzoli this code is an extract of SqlProducer.java code.\n\nYes, it is also nice! After this PR i could create another JIRA to improve component.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/83391773/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/83394376", "body": "You were right now is better!!!\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/83394376/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "onders86": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/camel/commits/71d64e7d706f578b8a363539a2e6583007f9e2be", "message": "CAMEL-12097- handle if both path and query params set and supress with the value in the path"}, {"url": "https://api.github.com/repos/apache/camel/commits/c0a9808442eeada56457721c6244658e21b77fe7", "message": "CAMEL-12108 - PR on behalf of Bas Claessen"}, {"url": "https://api.github.com/repos/apache/camel/commits/83acd1e61e00cc4f0b5cdd20e0cb5bdea4f80d47", "message": "CAMEL-12027 - removal of import org.openmuc.jasn1.ber.BerByteArrayOutputStream from encode method's param and upgrade jasn1"}], "pull_requests": [{"url": "https://api.github.com/repos/apache/camel/pulls/2188", "title": "CAMEL-11731 - add asynccallback and sync camel and servlet async APIs", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/18512646", "body": "@davsclaus, I have the master, i could not see the problem @Premkumar09 mentioning.\nI have a test case it passes. \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/18512646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/18512652", "body": "package org.apache.camel.component.file.remote.sftp;\n\nimport org.apache.camel.Exchange;\nimport org.apache.camel.builder.RouteBuilder;\nimport org.apache.camel.component.mock.MockEndpoint;\nimport org.junit.Test;\n\npublic class SFtpChangedReadLockFastExistCheckConsumeTest extends SftpServerTestSupport {\n\n```\nprotected String getSFtpUrl() {\n    return \"sftp://localhost:\" + getPort() + \"/\" + FTP_ROOT_DIR\n            + \"?username=admin&password=admin&delay=10s&disconnect=true&recursive=true&readLock=changed&readLockCheckInterval=1000&fastExistsCheck=true\";\n}\n\n@Test\npublic void testSftpFastCheckSimpleConsume() throws Exception {\n    if (!canTest()) {\n        return;\n    }\n\n    String expected = \"Hello World\";\n    String expected2 = \"Goodbye World\";\n\n    template.sendBodyAndHeader(\"file://\" + FTP_ROOT_DIR, expected, Exchange.FILE_NAME, \"hello.txt\");\n    template.sendBodyAndHeader(\"file://\" + FTP_ROOT_DIR+\"/onder\", expected2, Exchange.FILE_NAME, \"goodbye.txt\");\n\n    MockEndpoint mock = getMockEndpoint(\"mock:result\");\n    mock.expectedMessageCount(2);\n    mock.expectedBodiesReceivedInAnyOrder(expected,expected2);\n\n    assertMockEndpointsSatisfied();        \n}\n\n @Override\n    protected RouteBuilder createRouteBuilder() throws Exception {\n        return new RouteBuilder() {\n            @Override\n            public void configure() throws Exception {\n                from(getSFtpUrl())\n                    .routeId(\"foo\")\n                    .to(\"mock:result\");\n            }\n        };\n    }\n```\n\n}\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/18512652/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/18512674", "body": "\u0131 guess i am missing the point? do you have a test case that reproduce the issue?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/18512674/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/18514063", "body": "@Premkumar09 , then FtpChangedReadLockFastExistCheckTest should fail but it is not...\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/18514063/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/18515779", "body": "I wrote one more test case, it still passes. besides i log whats happening around line 78 to sysout. the code gets the file list correct and passes the test. Not sure if this fix is needed.\n\npackage org.apache.camel.component.file.remote;\n\nimport org.apache.camel.Exchange;\nimport org.apache.camel.builder.RouteBuilder;\nimport org.apache.camel.component.mock.MockEndpoint;\nimport org.junit.Test;\n\npublic class FtpChangedReadLockFastExistCheckTestRemote extends FtpServerTestSupport {\n\n```\nprotected String getFtpUrl() {\n    return \"ftp://******@******:21\" + \"/changed?password=*******&readLock=changed&readLockCheckInterval=1000&delete=true&fastExistsCheck=true\";\n}\n\nprotected String getProcuderFtpUrl() {\n    return \"ftp://******@*******:21\" + \"/changed?password=*******\";\n}\n\n@Test\npublic void testChangedReadLockFastExistCheckTestRemote() throws Exception {\n    template.sendBodyAndHeader(getProcuderFtpUrl(), \"Hello World\", Exchange.FILE_NAME, \"hello.txt\");\n\n    Thread.sleep(500);\n\n    MockEndpoint mock = getMockEndpoint(\"mock:result\");\n    mock.expectedMessageCount(1);\n    mock.expectedFileExists(\"target/changed/out/hello.txt\");\n\n    assertMockEndpointsSatisfied();\n}\n\n@Override\nprotected RouteBuilder createRouteBuilder() throws Exception {\n    return new RouteBuilder() {\n        @Override\n        public void configure() throws Exception {\n            from(getFtpUrl()).to(\"file:target/changed/out\", \"mock:result\");\n        }\n    };\n}\n```\n\n}\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/18515779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/18521494", "body": "your code runs fine as well.\nno fix requried..\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/18521494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/18532448", "body": "Hi @Premkumar09 ,\ni ran your exact piece of code.(of course by connecting to different ftp deamons on different boxes) i am sure it is working.\ntested against both a local ftp server on windows and ftp deamon running on Red Hat 6.5\n\nthese are the complete logs of these two runs.\n\n[local.txt](https://github.com/apache/camel/files/403186/local.txt)\n[remote.txt](https://github.com/apache/camel/files/403187/remote.txt)\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/18532448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/22772043", "body": "empty line", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/22772043/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/22772051", "body": "empty line", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/22772051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/22772092", "body": "not sure if you run cs, looks like of cs error. ", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/22772092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/22772096", "body": "same above", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/22772096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/22772107", "body": "empty line", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/22772107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/22772108", "body": "empty line", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/22772108/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/22772111", "body": "empty line", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/22772111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/22772116", "body": "empty line", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/22772116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/22772117", "body": "empty line", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/22772117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/22772138", "body": "empty line", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/22772138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/22772180", "body": "apart from small comments looks lgtm, would you mind checking and doing the similar change for tar dataformat? their code is very similar", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/22772180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/23976657", "body": "I suspects this is a resolution. In non utf-8 env, this may fail. Correct way may be system charset resolution and calling getbytes(charset)", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/23976657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/24220389", "body": "yes,i ll do it soon. thanks.", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/24220389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/24220598", "body": "done..\r\n\r\nhttps://github.com/apache/camel/commit/c7e190dcd925ef1d1d760c5b4ab199d263a968a8\r\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/24220598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "valdar": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/camel/commits/060f6e98570ed72af37e9bd6ba7bc77af876a989", "message": "CAMEL-12113: Camel healthcheck spring-boot actuators don't honor endpoints.*.enabled property"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/12135459", "body": "Closed because\nApplied the patch into trunk, camel-2.10.x and camel-2.9.x branches\nVia SVN.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/12135459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "ricardozanini": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/camel/commits/1f5af18f3629ecf18dc654f41b487a0373034b59", "message": "camel-11474: adding HttpClient custom configuration support"}, {"url": "https://api.github.com/repos/apache/camel/commits/fd42ef2450c2d2baae6ccdc85db0ca2d82b13355", "message": "CAMEL-12080: removing trailing slashs"}, {"url": "https://api.github.com/repos/apache/camel/commits/55b069935925e7aca5f2404663aebf52deda1caa", "message": "CAMEL-12080: documentation fix"}, {"url": "https://api.github.com/repos/apache/camel/commits/7bb1a667fed9e521735091e64c4eb24a1e76d7d0", "message": "CAMEL-12080: allow creating csvcontent without last eol"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "eximius313": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/camel/commits/0e55f86a749fd925cffce7609bb9dfd280bbd981", "message": "Add \"command\" header to the example\n\nFixes https://issues.apache.org/jira/browse/CAMEL-12102"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/24126368", "body": "I'm not sure if removing this condition is correct\r\nIf body is empty then localPath must be set.\r\nI'd change it like this:\r\n```\r\nif(isEmpty(body) && ObjectHelper.isEmpty(localPath)){\r\n   throw new DropboxException(\"ether option <localPath> must me set or body must be not empty!\");\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/24126368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/24135399", "body": "> However we may want to add a check that the message body is not null if localPath is not configured.\r\n\r\nwell, this is what I meant", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/24135399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/24166657", "body": "If you still want to support sending from the local filesystem, then this check is important!.\r\nIn order to make it work with new \"send from body\" feature, you just have to add another check before it:\r\n```\r\nif (isEmpty(body) && entry != null && !entry.isFile()) {\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/24166657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/24166727", "body": "Oh, ok!", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/24166727/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "adriancole": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/camel/commits/0b38b054636327f1ac6e5dcebefbe08877954e04", "message": "Updates to brave libraries that are OSGi friendly\n\nThis moves to latest brave, which backports span v2 format to the old\napi. It also corrects some OSGi and packaging glitches.\n\nFixes CAMEL-12088"}, {"url": "https://api.github.com/repos/apache/camel/commits/947e145309412505f8a0f497420d2bf2cf3993b1", "message": "Adds zipkin http transport and moves off deprecated collector\n\nThis allows you to use zipkin's http endpoint, and any modern transport.\nThis is important as scribe is deprecated. Notably, this doesn't change\ninternal plumbing to use new Brave Tracer api, though that can be done\nin a later change."}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/20920915", "body": "is this a copy/paste error? maybe just a link to latest zipkin would make more sense https://github.com/openzipkin/zipkin#quick-start", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/20920915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/20927087", "body": "heh I'll raise the PR, then!", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/20927087/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/20927235", "body": ">\n> There is also at the Camel in Action 2 book an example which could have a\n> better readme file: https://github.com/camelinaction/camelinaction2/\n> tree/master/chapter7/prototype2/rules2-springboot-hystrixdashboard\n>\n> hystrix and zipkin are different dashboards, so probably they'd need\ndifferent readmes I guess.\n\n> And thanks a lot for telling us about this easier way. When I looked at\n> this a while back I couldn't find that and it was the docker compose way\n> that I could get the server started. But I do want non docker users to run\n> this easy as well\n>\nyeah this probably wasn't easy to find earlier. always trying to make\neasier :)\n\n>\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/20927235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "lburgazzoli": {"issues": [], "commits": [{"url": "https://api.github.com/repos/apache/camel/commits/f87ef786b180267143aff06b48a4eb4f906cf11a", "message": "Fix HealthCheckRoutesAutoConfiguration autowiring"}, {"url": "https://api.github.com/repos/apache/camel/commits/f6742c63b954f8f72eb239794e00a464f0f2a155", "message": "CAMEL-12087: camel-core: WARN No CamelContext defined yet so cannot inject into bean"}], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/21325672", "body": "Going to have a look, got it while rebase from upstream", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/21325672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/21325678", "body": "ouch, going to fix it. Sorry", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/21325678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/21401866", "body": "Do you mean LinkedHashSet ?", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/21401866/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/22054318", "body": "Ah yeah, missed it. Thx for spotting this and welcome back ;)", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/22054318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/24124101", "body": "Would it make sense instead to search for all the beans of type XmlCamelContextConfigurer and apply it ?", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/24124101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/24135024", "body": "+1", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/24135024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/8654794", "body": "Definitively, the comment is a mistake :-)\u2014\nSent from Mailbox for iPad\n\nOn Sat, Jan 4, 2014 at 9:28 PM, Asbj\u00f8rn Aarrestad\nnotifications@github.com wrote:\n\n> > @@ -58,6 +58,7 @@ public void setType(BindyType type) {\n> >          this.type = type;\n> >      }\n> > -    /*\n> >   Personally I vote for deleting code, not commenting it out. Github keeps track of old code :-)\n> >   ---\n> >   Reply to this email directly or view it on GitHub:\n> >   https://github.com/apache/camel/pull/83/files#r8652968\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/8654794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/52715495", "body": "Is there any out-of-the box support in camel ? or I need to define saxonExtensionFunctions as String and then split/lookup values in the component ?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/52715495/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64760699", "body": "This should be 0.12.2_1 it is an OSGi bundle made by Service Mix (not yet released indeed)\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64760699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/78766977", "body": "Apache projects do not have an @author tag\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/78766977/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/78767991", "body": "Most of these instance variables are initialized, used, released inside the method `process` so the scope can be reduced to method scope otherwise you may have threading issues. \n\nOr if they can be reused, you should initialize/clenup them in `onStart/onStop`. \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/78767991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/78769005", "body": "The ASL license header is missing.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/78769005/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/78769251", "body": "@author tag should be removed here too\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/78769251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/78772956", "body": "Can this be done upon initialization ?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/78772956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/78774060", "body": "It may be good to have the option to get set the oids via an header\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/78774060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/78780735", "body": "No need to call something like SecurityModels.getInstance().removeSecurityModel() ?\nJust asking ;)\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/78780735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/78783509", "body": "I meant if you need to pair the addSecurityModel(this.usm) (in doStart) with a removeSecurityModel(...) (in do Stop)\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/78783509/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/78893136", "body": "I think this test should be marked with '`@Ignore`` and a comment should be added to explain how to properly configure the test to work. \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/78893136/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/78893442", "body": "you should override `protected doStop() throws Exception`\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/78893442/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/78893478", "body": "you should override `protected doStart() throws Exception`\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/78893478/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/78893578", "body": "Can this CommunityTarget setup be moved on doStart too ?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/78893578/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/79364976", "body": "I'm unsure if singleton is the best option here as the asterisk connection is created and managed by the endpoint so if you declare it as singleton you may have conflicts if different producer/consumers do a login/logout/addListener\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/79364976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/79365042", "body": "Best if you can respect alphabetical order\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/79365042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/79365913", "body": "This could be a problem if you set the Endpoint as singleton, see AsteriskEndpoint::isSingleton\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/79365913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/79366189", "body": "asteriskjava does not appear to be OSGi ready, maybe you can open a PR to servicemix-bundles to create an OSGi ready asteriskjava bundle\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/79366189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/79366229", "body": "Alphabetic order\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/79366229/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/79366342", "body": "oids are not relevant here, I guess ;)\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/79366342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/83390620", "body": "I think that you can create a RowMapperResultSetExtractor once and reuse it so you avoid to create a new object for each event. \n\nIt may also be nice to let the user set its own RowMapper.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/83390620/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/83392042", "body": "I think you can use the enum DrillConnectionMode here, and list possible values in UriParam\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/83392042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/83393241", "body": "This does not mean that it is the best option ;)\nWe should try to write GC-friendly code\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/83393241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "maxfortun": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/apache/camel/pulls/2186", "title": "CAMEL-12177 - Adding Dns Activation policy", "body": "Allows to start/stop routes based on CNAMEs", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tdudgeon": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/apache/camel/pulls/2185", "title": "Failing test for CAMEL-12078", "body": "This PR provides a failing test for CAMEL-12078.\r\nIt shows that the DataSource for an attachment  is read twice.\r\nThe test to look at is MimeMultipartDataFormatTest.attachmentReadOnce()", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "tdiesler": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/apache/camel/pulls/2180", "title": "[XChange] Add basic support for crypto currency ticker", "body": "Resolves CAMEL-12066", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/8441307", "body": "merci\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/8441307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/9733599", "body": "This binds the ApplicationContextClassLoader to the TCCL of the thread that happens to call CamelContext.start(). IHMO, this is unlikely to be correct.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9733599/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/19827200", "body": "This is also probably the wrong way around or can go completely", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/19827200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/21555743", "body": "This can fail with NPE if the defaultValueSupplier is not given. Not null parameters should be enforced or coded to allow for.\r\n\r\ne.g. https://github.com/wildfly-extras/wildfly-camel/blob/master/subsystem/security/src/main/java/org/wildfly/extension/camel/security/EncodedUsernamePasswordPrincipal.java#L43", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/21555743/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "snurmine": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/apache/camel/pulls/2156", "title": "CAMEL-12079: Bean language: support bean::function notation", "body": "", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/15067385", "body": "Could variable \"cache\" be  java.util.concurrent.ConcurrentHashMap?\nIf DefaultCamelCatalog.java is mutated/accessed by multiple threads, it might not be safe to use HashMap without synchronization.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/15067385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/22790045", "body": "Could  ClassResolver from CamelContext used here ?", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/22790045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/22814790", "body": "Just curios, to what optimization you refer to? ", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/22814790/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "vspiliop": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/apache/camel/pulls/2079", "title": "Salesforce composite api external ids in body support", "body": "Hope it is of use :-)\r\n\r\n1. Introducing support for Salesforce Composite REST API (https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/resources_composite_composite.htm). I could not find any related jira..\r\n\r\n2. Extending the salesforce maven plugin to generate of DTO(s) for doing updates via Salesforce External Ids in the \u201cbody\u201d json field. \r\n` \r\n         \"body\" : {\r\n              \"Account__r\":\r\n              {\r\n                \"External_Id_Of_Account__c\" : \"123456\"\r\n              } ,\r\n            \"AnotherField__c\":\"1234\"\r\n          }\r\n`\r\nRelated jira is https://issues.apache.org/jira/browse/CAMEL-10193. The implementation is the proposed solution mentioned in the discussion.\r\n\r\nThanks!!", "author_association": "NONE"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "vrlgohel": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/apache/camel/pulls/2046", "title": "CAMEL-11780: camel-amqp - SSL Transport configuration", "body": "Added amqps support, upgrading the qpid-jms-client version. ", "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/1996", "title": "CAMEL-11879: Upgraded lucene version to 7.0.0", "body": "https://issues.apache.org/jira/browse/CAMEL-11879\r\nUpgraded Lucene to latest version 7.0.0. \r\n\r\nPassed the iTests for Karaf and OSGi without issues, including the camel-lucene component tests. ", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "johnpoth": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/apache/camel/pulls/2007", "title": "Set org.apache.core as the jkd9 automatic module name for camel-core", "body": "This will be useful for people wanting to use Java 9's module system with camel-core. \r\n\r\nFrom Mark Reinhold's recommendation and common adoption, the module name should correspond to the principal exported API package:\r\n\r\n> Strongly recommend that all modules be named according to the reverse\r\n    Internet domain-name convention.  A module's name should correspond\r\n    to the name of its principal exported API package, which should also\r\n    follow that convention.  If a module does not have such a package, or\r\n    if for legacy reasons it must have a name that does not correspond to\r\n    one of its exported packages, then its name should at least start\r\n    with the reversed form of an Internet domain with which the author is\r\n    associated.\r\n\r\nThanks!", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": []}, "koscejev": {"issues": [], "commits": [], "pull_requests": [{"url": "https://api.github.com/repos/apache/camel/pulls/1938", "title": "CAMEL-11658: test for RestletProducer handling unencoded headers", "body": "This is just a unit test showing how a header with characters that are not allowed in URI path will cause a failure within RestletProducer.\r\n\r\nCAMEL-11658: The regression is only for some characters (such as space). Other characters actually didn't work very well before (question mark \"?\" could cause other parts of path to become query, etc.).", "author_association": "CONTRIBUTOR"}], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/46155658", "body": "Just a thought: maybe this `if` block should be removed to ensure that it's a Set of String, not just any other Set.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/46155658/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/46155780", "body": "Similar to comment above: maybe this `if` block should be skipped to ensure that it's a Set of Method, not just any other Set (e.g., not Set of String).\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/46155780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/46156047", "body": "For some reason, Rest DSL supports only these 4 CORS headers. Although `DefaultRestletBinding` was updated to support more headers, those extra headers cannot be set via `.corsHeaderProperty()`.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/46156047/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ddelangle": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/12596288", "body": "Instead of my previous try, use patch provided here https://issues.apache.org/jira/browse/CAMEL-5994. The endpoint is not put int he datamap anymore\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/12596288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/12779258", "body": "Corrected in SVN by camel commiters\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/12779258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "WillemJiang": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/12869878", "body": "Hi Luca\nThanks for the pull request. As you know ASF is using JIRA[1] to track the new features and bugs. \nPlease feel free to create a JIRA for it , you can add a link of this pull request, and we can take care of it.\n\n[1]https://issues.apache.org/jira/browse/CAMEL\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/12869878/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/18038487", "body": "saurabhksingh\uff0c do you mind create a JIRA https://issues.apache.org/jira/browse/CAMEL to track this change. \nBTW, please check out the for latest change of Camel from here http://git-wip-us.apache.org/repos/asf/camel.git/\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/18038487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/29267733", "body": "Hi ajagnanan ,\n\nCan you fill a JIRA https://issues.apache.org/jira/browse/CAMEL for this request?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/29267733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/30102101", "body": "I just merged the change into camel-gora branch, once Apache Gora is released, I will merge the branch into master branch.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/30102101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/30205990", "body": "I just did the merge about half hour ago :)\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/30205990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/30208370", "body": "I don't have the right  to close the pull request, maybe  yaitskov can close it himself.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/30208370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/30723807", "body": "Merge the patch into Apache camel with thanks, please close it.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/30723807/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/30723839", "body": "Merged the patch into Apache camel master and camel-2.12.x branches with thanks to David. \nPlease close it.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/30723839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/30990796", "body": "Applied the patch into camel repository, please close it.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/30990796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/31190843", "body": "Applied the patch into master and camel-2.12.x branches.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/31190843/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/36220270", "body": "camel-gora needs Apache Gora 0.4 which is not released yet. The code is in the Apache Camel git repo, I will merge the patch into master branch once Apache Gora 0.4 is released.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/36220270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/41247342", "body": "Applied the patch into master branch after fixing some check style errors.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/41247342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/43579680", "body": "This PR was merged into camel master branch. Could you close it?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/43579680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/43579763", "body": "This PR was merged into camel master, camel-2.13.x and camel-2.12.x. \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/43579763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/44161793", "body": "Applied the patch into apache camel master branch with thanks to Seiji.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/44161793/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/46742902", "body": "Can you fill a [Camel JIRA](http://issues.apache.org/jira/browse/CAMEL) for this patch, it could help us track the issue.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/46742902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/47880976", "body": "Thanks for the pull request, the info log is very useful. But I had to put it to other place to avoid write the info log very time when CxfProducer need to send out the message.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/47880976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/47906743", "body": "Don't worry about it, I already commit a quick fix for it. http://git-wip-us.apache.org/repos/asf/camel/commit/75dfe61e \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/47906743/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/48021106", "body": "OK, I just have some time to review this patch, please let me know if your patch is ready :)\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/48021106/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/48048222", "body": "Hi Alexander,\nI just applied the patch into apache camel git repo, as the HazelcastComponent may have lots of endpoint, you last patch just let the HazelcastComponent share the Hazelcast instance which is get from the uri reference across the HazelcastComponent. I just made some modification for it, please check out https://git-wip-us.apache.org/repos/asf?p=camel.git;a=commit;h=970707f4 for more information. \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/48048222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/55226845", "body": "OK, I just applied the patch into camel master branch. Can you close the pull request yourself ? as there are some conflicts, I had to apply the patch by hand.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/55226845/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/55227249", "body": "Hi Dmitri,  \nThis patch was merged into camel master branch. Do you mind close it yourself?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/55227249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/55347943", "body": "Oh. What I mean is to close this pull request. The JIRA issue can be close by a batch command :)\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/55347943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/55992387", "body": "Most camel component use the HeaderFilterStrategy to filter the message header between the protocol message and camel message. You may need to take a look at the camel-jms code, to apply the HeaderFilterStrategy  into the camel stomp component.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/55992387/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/56768770", "body": "The patch was applied into master branch.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/56768770/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/58986173", "body": "Hi Fowdalic,  \n\nI tried to apply the PR to Apache Camel master branch, now I got the lots of unit test failures:\nDid I miss something?\n\nXmppDeferredConnectionTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:311->CamelTestSupport.startCamelContext:477 ? FailedToCreateProducer\n  XmppMultiUserChatTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:311->CamelTestSupport.startCamelContext:477 ? FailedToCreateProducer\n  XmppProducerConcurrentTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:311->CamelTestSupport.startCamelContext:477 ? FailedToCreateProducer\n  XmppProducerConcurrentTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:311->CamelTestSupport.startCamelContext:477 ? FailedToCreateProducer\n  XmppRobustConnectionTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:311->CamelTestSupport.startCamelContext:477 ? FailedToCreateProducer\n  XmppRouteChatTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:311->CamelTestSupport.startCamelContext:477 ? FailedToCreateProducer\n  XmppRouteMultipleProducersSingleConsumerTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:311->CamelTestSupport.startCamelContext:477 ? FailedToCreateProducer\n  XmppRouteTest.setUp:117 ? FailedToCreateProducer Failed to create Producer for...\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/58986173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/58999721", "body": "Hi, \n\nCan you merged the patch into master branch first and send the pull request from that branch?\nI cannot go through the file changes as you just send a PR which is based on Camel 2.14.x branch.\n\nBTW, you can create Apache Camel JIRA and add the CAMEL-xxxx JIRA number into the PR comment, the PR can be linked to CAMEL-xxxx automatically.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/58999721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/60241982", "body": "I don't think we need to use netty-all here, as camel-netty4 don't need the netty-codec-http, but camel-netty4-http need that.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/60241982/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/60380873", "body": "Merged the patch into Apache Camel master branch, I also did some clean up work for it. Now it only take about 15 seconds to run the build and test. \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/60380873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/6013215", "body": "I guess the next patch release of camel-2.13.x will be targeted to Jun.\n## \n\nWillem Jiang\n\nRed Hat, Inc.\nWeb: http://www.redhat.com\nBlog: http://willemjiang.blogspot.com (English)\nhttp://jnn.iteye.com (Chinese)\nTwitter: willemjiang  \nWeibo: \u59dc\u5b81willem\n\nOn April 15, 2014 at 11:23:37 AM, Bob Tiernay (notifications@github.com) wrote:\n\n> This is great! Any chance a new release will be made soon for this?\n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/apache/camel/commit/e2a680eb947820ccd4fe20949366df3f1a3c3a33#commitcomment-6011334  \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/6013215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/18812767", "body": "We are not supposed to use com.sun packages unless you have good explain of it.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/18812767/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/19066769", "body": "OK, I got it, we can treat the com.sun.mail as a third part jar. I will merged the code shortly.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/19066769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/19276518", "body": "Can we change the default pull delay time to save some test time?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/19276518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/26436518", "body": "It looks like you just change the jdk version not the antrun plugin version.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/26436518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/27362718", "body": "Can you update the copyright comment of this file to use the ASF one?  \nWe are not supposed to commit any code which is not licensed with ASF license.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/27362718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}]}, "lfoppiano": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/12876784", "body": "Hi Willem,\n  I was not sure because I should have opened them before, but I will open\nthem.\n\nRegards\nLuca\n\nOn Wed, Jan 30, 2013 at 2:53 AM, Willem Jiang notifications@github.comwrote:\n\n> Hi Luca\n> Thanks for the pull request. As you know ASF is using JIRA[1] to track the\n> new features and bugs.\n> Please feel free to create a JIRA for it , you can add a link of this pull\n> request, and we can take care of it.\n> \n> [1]https://issues.apache.org/jira/browse/CAMEL\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/apache/camel/pull/8#issuecomment-12869878.\n\n## \n\nLuca Foppiano\n\nSoftware Engineer\n+31615253280\nluca@foppiano.org\nwww.foppiano.org\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/12876784/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/12877104", "body": "Jira related: \n- pagination: https://issues.apache.org/jira/browse/CAMEL-6021\n- result per page: https://issues.apache.org/jira/browse/CAMEL-6022\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/12877104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "matteoredaelli": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/13077824", "body": "Nice! I hope to have these features available in the next Camel release...\nThanks to lfoppiano and Camel team ...\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/13077824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "grahamlittle": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/13102416", "body": "No worries closing\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/13102416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "cabeaulac": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/13774091", "body": "Closing this pull request since passing session create/destroy events through the route was not an accepted approach. \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/13774091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "mayn": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/15553373", "body": "closing, code pulled by Willem (see https://issues.apache.org/jira/browse/CAMEL-5960)\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/15553373/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/22731917", "body": "closing pull request, code merged into master by Claus (https://github.com/apache/camel/commit/58d72abdb29fa0c772b55ada66cf17673d310c95)\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/22731917/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ahaarrestad": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/16493873", "body": "Jira issue: https://issues.apache.org/jira/browse/CAMEL-6293\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/16493873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922680", "body": "when is 2.11.1 scheduled for release?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/26358543", "body": "Hope it is possible to get this pullrequest accepted and added to the latest snapshot. I chose to let the csv record setup do the config, because it behaves more or less like the \"quoted\" feature.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/26358543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/26669677", "body": "Which version is it scheduled for?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/26669677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/8652968", "body": "Personally I vote for deleting code, not commenting it out. Github keeps track of old code :-)\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/8652968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "kzmeyao": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/17575575", "body": "Also in JIRA: https://issues.apache.org/jira/browse/CAMEL-6343\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/17575575/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922720", "body": "Sure thing. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/17922720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "splatch": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/17927731", "body": "Done! :)\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/17927731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "davidkarlsen": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/17928126", "body": "done\n\n2013/5/15 Claus Ibsen notifications@github.com\n\n> David, do you mind closing this pull request?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/apache/camel/pull/13#issuecomment-17922883\n> .\n\n## \n\n## \n\nDavid J. M. Karlsen - http://www.linkedin.com/in/davidkarlsen\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/17928126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/22513771", "body": "Woups - fixed!\n\n2013/8/12 AlesD notifications@github.com\n\n> ```\n> if (simple.getFromReceivedDate() != null) {\n>     String s = simple.getFromSentDate();\n>     if (s.startsWith(\"now\")) {\n> ```\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/apache/camel/pull/39#issuecomment-22502902\n> .\n\n## \n\n## \n\nDavid J. M. Karlsen - http://www.linkedin.com/in/davidkarlsen\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/22513771/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/47816419", "body": "This provides a specific exception as suggested on the dev mailinglist.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/47816419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "saurabhksingh": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/18141054", "body": "I have done that. Also in the latest changes I can see that changes I proposed are in\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/18141054/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/26237075", "body": "closing the pull request as my code has been merged\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/26237075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "patels3": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/21213480", "body": "A unit test for this fix involves assumptions on user's active network interface.  This opens up the possibility of it failing on different machines depending on the active network interface.   Therefore, it wasn't included in the pull request itself.\n\nFor testing, here is a unit test that assumes an active network interface eth0.\n\npackage org.apache.camel.component.netty;\n\nimport org.apache.camel.EndpointInject;\nimport org.apache.camel.Exchange;\nimport org.apache.camel.Message;\nimport org.apache.camel.Processor;\nimport org.apache.camel.builder.RouteBuilder;\nimport org.apache.camel.component.mock.MockEndpoint;\nimport org.apache.camel.converter.IOConverter;\nimport org.apache.camel.util.IOHelper;\nimport org.junit.Test;\n\nimport java.io.FileInputStream;\nimport java.io.InputStream;\n\npublic class NettyUDPMulticastAsyncTest extends BaseNettyTest {\n\n```\n@EndpointInject(uri = \"mock:result\")\nprotected MockEndpoint resultEndpoint;\n\nprivate void sendFile(String uri) throws Exception {\n    template.send(uri, new Processor() {\n        public void process(Exchange exchange) throws Exception {\n            // Read from an input stream\n            InputStream is = IOHelper.buffered(new FileInputStream(\"src/test/resources/test.txt\"));\n\n            byte buffer[] = IOConverter.toBytes(is);\n            is.close();\n\n            // Set the property of the charset encoding\n            exchange.setProperty(Exchange.CHARSET_NAME, \"UTF-8\");\n            Message in = exchange.getIn();\n            in.setBody(buffer);\n        }\n    });\n}\n\n@Test\npublic void testUDPInOnlyWithNettyConsumer() throws Exception {\n    MockEndpoint mock = getMockEndpoint(\"mock:result\");\n    mock.expectedMessageCount(1);\n    sendFile(\"netty:udp://225.1.1.1:{{port}}?sync=false\");\n    mock.assertIsSatisfied();\n}\n\n@Override\nprotected RouteBuilder createRouteBuilder() throws Exception {\n    return new RouteBuilder() {\n        @Override\n        public void configure() throws Exception {\n            from(\"netty:udp://225.1.1.1:{{port}}?allowDefaultCodec=false&sync=false&networkInterface=eth0\")\n                    .to(\"mock:result\")\n                    .to(\"log:Message\");\n        }\n    };\n}\n```\n\n}\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/21213480/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "bvahdat": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/22059970", "body": "Can you close this pull request?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/22059970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/22998803", "body": "Not sure if there's a typo here? 0.25 seconds maybe?", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/22998803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "AlesD": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/22502902", "body": "Still one error left:\n\n```\n    if (simple.getFromReceivedDate() != null) {\n        String s = simple.getFromSentDate();\n        if (s.startsWith(\"now\")) {\n```\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/22502902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "skreis": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/24263889", "body": "Sam, I've pulled the camel source today after seeing that 2.12.0 was released in hopes of using your multicast consumer patch.  I haven't been able to get it to work, however and have just tried to run this test, replacing my networkInterface with a value that would otherwise work on my system (en1).\n\nDo you have any pointers/has this unit test worked for you?  I presume it would have, but I'm also a bit lost as to what I might be doing wrong.. \n\nIf I setup a very basic multicast client in python which joins that group, the message comes through loud and clear.\n\nWould you happen to have any suggestions?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/24263889/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "crivetechie": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/26194924", "body": "sure, sorry about that \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/26194924/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "ShayMatasaro": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/26195552", "body": "done\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/26195552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "tivv": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/26196814", "body": "Sure\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/26196814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "bertramn": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/26197489", "body": "Yes sure. Tested the fixes in 2.11 and 2.12 and works like a charm. Thanks Niels\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/26197489/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "saltnlight5": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/26210016", "body": "Sure Claus, and thanks for the encouragement. I do enjoy working with Camel, and have been blogging lately with the Exploring Camel Core series. :)\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/26210016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "andreaja": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/26214946", "body": "Thank you :)\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/26214946/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "pax95": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/27622866", "body": "will do.\nMore might come. I'll take a look at a better way to tail realtime events instead of polling if possible.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/27622866/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/27622943", "body": "dooh - thanks - can you fix. \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/27622943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "mcmonster": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/27725182", "body": "Sorry for the delay in closing!\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/27725182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "daikuro": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/28175353", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/28175353/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "hifly81": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/29134594", "body": "I've included a txt file in resources about Dropbox Api Terms and Conditions\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/29134594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/37016615", "body": "Sure! no problem let's go for camel-extra\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/37016615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/37037366", "body": "Should I create a login to camel-extra jira?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/37037366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/37058850", "body": "Hi, \nI will join the discussion ASAP.\nabout Karaf I will work to create a feature next week\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/37058850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/37059160", "body": "NP it's a pleasure for me. Let me know about merging\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/37059160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/37059887", "body": "I've tried to post on nablle but I get \n\"This post has NOT been accepted by the mailing list yet.\"\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/37059887/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/37507397", "body": "By default now the integration test requiring a dropbox account are disabled.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/37507397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/37513136", "body": "last commit added a features.xml --> camel-feature\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/37513136/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/40079110", "body": "ok Henryk I will do it ASAP\n\nCiao,\nGiovanni\n\nOn Thu, Apr 10, 2014 at 3:12 PM, Henryk Konsek notifications@github.comwrote:\n\n> Sorry for the delay, Giovanni. I've been snowed with some other stuff :) .\n> \n> One more thing before we merge - would you be so kind and fix the\n> CheckStyle errors in your code? You can see these after executing the build\n> with the sourcecheck Maven profile:\n> \n> mvn clean install -Psourcecheck\n> \n> I can do it on your behalf if you want me to, but it will speed things up\n> if you help me. I'd really appreciate that.\n> \n> Cheers.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/apache/camel/pull/58#issuecomment-40076928\n> .\n\n## \n\n---\n\nGiovanni Marigi\n_mail:   *\ngio.marigi at gmail.com gio.marigi@gmail.com\n*twitter:  *\ngiomarigi\n*blog:_\nhttp://bikingdiary.wordpress.com/\n\n---\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/40079110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/40097661", "body": "Hi Henyk,\nthe code has been committed according to the checkstyle best practices; it\nshould compile fine now.\n\nCiao,\nGiovanni\n\nOn Thu, Apr 10, 2014 at 3:19 PM, Giovanni Marigi gio.marigi@gmail.comwrote:\n\n> ok Henryk I will do it ASAP\n> \n> Ciao,\n> Giovanni\n> \n> On Thu, Apr 10, 2014 at 3:12 PM, Henryk Konsek notifications@github.comwrote:\n> \n> > Sorry for the delay, Giovanni. I've been snowed with some other stuff :) .\n> > \n> > One more thing before we merge - would you be so kind and fix the\n> > CheckStyle errors in your code? You can see these after executing the build\n> > with the sourcecheck Maven profile:\n> > \n> > mvn clean install -Psourcecheck\n> > \n> > I can do it on your behalf if you want me to, but it will speed things up\n> > if you help me. I'd really appreciate that.\n> > \n> > Cheers.\n> > \n> > ## \n> > \n> > Reply to this email directly or view it on GitHubhttps://github.com/apache/camel/pull/58#issuecomment-40076928\n> > .\n> \n> ## \n> \n> ---\n> \n> Giovanni Marigi\n> _mail:   *\n> gio.marigi at gmail.com gio.marigi@gmail.com\n> *twitter:  *\n> giomarigi\n> *blog:_\n> http://bikingdiary.wordpress.com/\n> \n> ---\n\n## \n\n---\n\nGiovanni Marigi\n_mail:   *\ngio.marigi at gmail.com gio.marigi@gmail.com\n*twitter:  *\ngiomarigi\n*blog:_\nhttp://bikingdiary.wordpress.com/\n\n---\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/40097661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/40366496", "body": "Hi Henryk,\nshould I have access to confluence page to add the documentation?\n\nCiao,\nGiovanni\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/40366496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "cmoulliard": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/29375976", "body": "Do you have access to Apache JIRA Web Site ? Why : to create a jira ticket\nconcerning optaplanner component and include what is requested by Claus.\n\nOn Wed, Nov 27, 2013 at 11:58 AM, Claus Ibsen notifications@github.comwrote:\n\n> We would need your help with documentation for this new component. Do you\n> mind attaching a .txt file to the JIRA ticket with the documentation. You\n> can take a look at any of the existing component as a sample.\n> \n> I can then style the docs and get it added to the Camel docs.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/apache/camel/pull/62#issuecomment-29375886\n> .\n\n## \n\nCharles Moulliard\nApache Committer / Architect @RedHat\nTwitter : @cmoulliard | Blog :  http://cmoulliard.github.io\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/29375976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/30205452", "body": "Excellent patch. Can be merged with the trunk of camel project.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/30205452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/30205900", "body": "Is it possible that somebody already apply this patch on Apache Camel Git repo ?\n\n```\ngit pull https://github.com/yaitskov/camel bindy-timezone\nremote: Counting objects: 329, done.\nremote: Compressing objects: 100% (73/73), done.\nremote: Total 175 (delta 69), reused 145 (delta 39)\nReceiving objects: 100% (175/175), 12.07 KiB | 0 bytes/s, done.\nResolving deltas: 100% (69/69), completed with 20 local objects.\nFrom https://github.com/yaitskov/camel\n * branch            bindy-timezone -> FETCH_HEAD\nAuto-merging components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/model/fix/simple/Order.java\nAuto-merging components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/model/fix/complex/onetomany/Header.java\nAuto-merging components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fix/BindySimpleKeyValuePairMarshallDslTest.java\nCONFLICT (content): Merge conflict in components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fix/BindySimpleKeyValuePairMarshallDslTest.java\nAuto-merging components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindySimpleCsvMarshallTest.java\nCONFLICT (content): Merge conflict in components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindySimpleCsvMarshallTest.java\nAuto-merging components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindySimpleCsvMarshallDslTest.java\nCONFLICT (content): Merge conflict in components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindySimpleCsvMarshallDslTest.java\nAuto-merging components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/FormatFactory.java\nCONFLICT (content): Merge conflict in components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/FormatFactory.java\nAutomatic merge failed; fix conflicts and then commit the result.\n```\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/30205900/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/30206161", "body": "Thx for the info. Do you know if this fix will be closed automatically in\nGitHub ?\n\nOn Tue, Dec 10, 2013 at 9:00 AM, Willem Jiang notifications@github.comwrote:\n\n> I just did the merge about half hour ago :)\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/apache/camel/pull/65#issuecomment-30205990\n> .\n\n## \n\nCharles Moulliard\nApache Committer / Architect @RedHat\nTwitter : @cmoulliard | Blog :  http://cmoulliard.github.io\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/30206161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "ge0ffrey": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/29380752", "body": "@davsclaus wiki txt attached to the jira https://issues.apache.org/jira/browse/CAMEL-7017\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/29380752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/49042118", "body": "I'd also like to do a few changes on\n  http://camel.apache.org/optaplanner.html\nLet me know how I best submit those changes.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/49042118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/51206438", "body": "@davsclaus I am currently not permitted to edit that page. My username is ge0ffrey. Can I get authorization?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/51206438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/51211700", "body": "@davsclaus No, not yet. A CLA hoop is old fashioned :) See http://www.infoworld.com/d/open-source-software/red-hat-joyent-and-others-break-down-licensing-barriers-244727 and http://www.infoworld.com/d/open-source-software/governance-the-github-generation-245210\nThe irony is that I 'll have to ask my employer if I can sign the CLA and my employer is the same as yours :)\n\nAnyway, enough complaining, I 'll try jump through the hoop, as it will be useful that I can help prevent the camel-optaplanner wiki page from going stale too.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/51211700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/52504148", "body": "@davsclaus the ICLA is signed and I've gotten a mail they received it. My username is ge0ffrey (with zero), here's my profile page on confluence: https://cwiki.apache.org/confluence/display/~ge0ffrey \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/52504148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/12822745", "body": "Interesting addition :)\n\nDo note that drools & jbpm have some existing fuse integration (which is a bit hard to find because it's neither on droolsjbpm nor on fuse). IIRC, it was mostly written a few years ago, to replace drools-pipeline:\n  https://github.com/jboss-integration/fuse-bxms-integ\nThere are some build issues with it since it moved GAV's etc, see https://issues.jboss.org/browse/DROOLS-709 .\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/12822745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/12822824", "body": "Great stuff! :) Async solving is critical for enterprise use.\n\nShall I add something in the OptaPlanner release notes too about these improvements, so the OptaPlanner community is aware of these camel-optaplanner improvements?\n  https://github.com/droolsjbpm/optaplanner-website/tree/master/download/releaseNotes\n\nPS: bibryam if you 'd like your name on the optaplanner contributors list too, let me know:\n  http://www.optaplanner.org/community/team.html\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/12822824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/13734470", "body": "This is a bug. If we start with 4 computers and remove 1, only 3 should be left. This upgrade change introduces invalid tests. Instead, this test should have been ignored and an issue reported on optaplanner.\n\nI am investigating the issue and I'll provide a pull request with a fix.\n\nCC @bibryam\nThe setExpectedCount(0) change a few lines above is probably wrong too.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/13734470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/13739524", "body": "If submitted a PR to improve the current situation:\n  https://github.com/apache/camel/pull/636\n@oscerd Can you review&merge that PR?\n\nThe upstream issue in OptaPlanner is being tracked here. I can confirm it's a genuine regression:\n  https://issues.jboss.org/browse/PLANNER-468\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/13739524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/19978745", "body": "+1 This should fix the OSGi issue with optaplanner-persistence-xstream", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/19978745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/19978809", "body": "There was also an issue with drools-core's OSGi manifest (causing an annoying warning for jaxb), but that's only fixed for 7.0 IIRC. In any case, if there are any others that cause pain on this side, let us know.", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/19978809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "dhirajsb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/29407514", "body": "Hi Manuel, it does look like a valid use case. The patch needs other changes for integration tests for the component. I have created a Camel JIRA https://issues.apache.org/jira/browse/CAMEL-7021 for this issue. I will add a patch that includes your change and updated tests. \n\nThanks,\nDhiraj. \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/29407514/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/36219826", "body": "Component added to Camel\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/36219826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/41631276", "body": "Fixed with https://github.com/apache/camel/commit/34740e78fab12054100e8278f218739107353e4f at Apache, will be pulled into JBoss Fuse for the next release\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/41631276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/19150086", "body": "It's already exhausted attempts up to the configurable maximum back off. Chances are slim that Salesforce connection would work after so many retries (30 by default). Therefore the user MUST handle the exception, sending a message on a JMS queue or something to report it as a critical error to an ops team to be handled. \n\nIt could be a networking or account setup issue that could be blocking the connection. It doesn't make sense to keep trying infinitely, does it? I don't see any published policies about it, but what if Salesforce deems it as a DOS attack and locks out the account? \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/19150086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/19150654", "body": "Yeah, it's a tricky bit of recursive code. The last back off increment check at the top will fail when the back off is exceeded with no error, which will cause the previous doStart to fail (not handshook), which will then end up in the block below to report the error.\nSo the first check is to ignore the restart attempt after backoff exceeds maxbackoff, and the second check reports error after failing the last attempt. \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/19150654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/19151532", "body": "So when the connect error happens, just after handshake has succeeded and fallen through this check, CometD connect failure retries should kick in. That should ultimately cause another handshake error (sometime after this handshake check) to be handled in the latest handshake listener. So the reconnect attempts should start all over again. \nDoes CometD not re-handshake after connect listener gets the 400 error? Are you seeing a different behavior in your testing with this code from what I explained? If so, can you attach a full debug log to the JIRA issue so I can see what's happening?  \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/19151532/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/19152411", "body": "If there is a connect error after handshake succeeds, CometD has inbuilt ability to retry handshake. There is a caveat though that the CometD server should permit it. If Salesforce advises not to reconnect, then it's a potential problem and will have to be handled in the code. \n\nBut if it does the right thing and permits it, CometD will handle that, outside the component's client reconnect logic, which only handles handshake failures that CometD cannot handle. \n\nCometD client has back off and max back off options for controlling it's connect retries, but they are not exposed from the Salesforce component at the moment. That enhancement can be done if there is a compelling need for it. \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/19152411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/19233200", "body": "@sirlatrom did you get a chance to test this and see if there are still any holes in the reconnect logic? \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/19233200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "ipolyzos": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/30118588", "body": "this is great thanks a lot! \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/30118588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "yaitskov": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/30230061", "body": "I sent pull requests before and they have been closed without my participation.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/30230061/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "gzurowski": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/30570404", "body": "Will refactor the JCR component to use body/headers instead of exchange properties and submit another pull request.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/30570404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/30812629", "body": "Thanks for merging the patch.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/30812629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/32671991", "body": "Thanks for merging.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/32671991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/32672007", "body": "Thanks for merging.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/32672007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/43100734", "body": "Thanks for merging the PR.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/43100734/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/43574507", "body": "Problem was resolved with https://github.com/apache/camel/commit/c1f6b6f75c9054b529a4a5b24a79011a0513087a.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/43574507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/24929912", "body": "@dmvolod Thanks for pointing this out. It has been addressed with the following commit already: https://github.com/apache/camel/commit/2439863b60dbf5ec182ab0f86266272f4220c6d5", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/24929912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "hzbarcea": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/31103289", "body": "Hi,\n\nThanks for the contribution. I created [CAMEL-7092](https://issues.apache.org/jira/browse/CAMEL-7092) to track this. To speed things up, could you please clarify the \"Original code Copyright 2006 Google Inc\" statement from the original version of the component? Best would be to add comments to the jira, as it'll be easier to track on the ASF side, but I could cut-and-paste if necessary. Help with the documentation would be highly appreciated too.\n\nThanks again!\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/31103289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/31784987", "body": "Done. Need to figure out how to mark this as closed now...\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/31784987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "sksamuel": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/31106805", "body": "That Google message is simply because I copied the license text from another open source project of mine, https://github.com/sksamuel/diffpatch There is no code in here from google.\nIn fact I have noticed that most of my projects carry the same message, which is a complete error. I'll need to fix them all :>\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/31106805/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/37407921", "body": "No prob. I'll do what I did for the rabbit and couch plugins when I\ncontributed those.\nOn 12 Mar 2014 13:30, \"Claus Ibsen\" notifications@github.com wrote:\n\n> @sksamuel https://github.com/sksamuel thanks we got your camel-kafka\n> component now. We would love some help with the documentation for it.\n> \n> Do you mind helping out, you can sketch something down and attach a file\n> to a JIRA.\n> \n> And for this PR as its been applied, do you mind closing it?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/apache/camel/pull/76#issuecomment-37407825\n> .\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/37407921/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jwcarman": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/31296554", "body": "These aren't really cases where \"secure\" random numbers are required.  \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/31296554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "ghost": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/31561496", "body": "Hi WillemJiang,\n\nI added a JIRA issue here: https://issues.apache.org/jira/browse/CAMEL-7105?jql=project%20%3D%20CAMEL%20AND%20resolution%20%3D%20Unresolved%20AND%20component%20%3D%20camel-aws%20ORDER%20BY%20priority%20DESC Let me know if I need to do something else. thanks.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/31561496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "SvenNold": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/33586573", "body": "Done!\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/33586573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "hekonsek": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/36024327", "body": "Fixed in 2b7161c7433b75f58de987ff6d04ec00b91706f8. Thank you for your contribution. You can close the pull request.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/36024327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/37016545", "body": "Hi Giovanni,\n\nApparently DropBox SDK is distributed on some MIT-like [1] DropBox license. Due to that reason we cannot ship it with the Apache Camel. However we could include it as a part of the Camel Extra (2) project.\n\nWould you like to donate your code to the Camel Extra project?\n\nCheers.\n\n(1) http://search.maven.org/remotecontent?filepath=com/dropbox/core/dropbox-core-sdk/1.7.6/dropbox-core-sdk-1.7.6.pom\n(2) https://code.google.com/a/apache-extras.org/p/camel-extra\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/37016545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/37016789", "body": "Great. Thank you for your contribution! I'll update the Jira ticket [1].\n\n[1] https://issues.apache.org/jira/browse/CAMEL-6999\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/37016789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/37057253", "body": "Actually it seems that we will merge your code to ASF Camel, as the MIT license is compatible with [1] the Apache 2.0 license. You might be interested in tracking our discussion [2].\n\nBTW Would you mind creating Karaf feature for your component? We will highly appreciate it.\n\nThank you again for contributing to the community. Cheers!\n\n[1] https://www.apache.org/legal/3party.html#criteriaandcategories\n[2] http://camel.465427.n5.nabble.com/camel-dropbox-td5748012.html\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/37057253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/37058937", "body": "That would be great - it will save us some work. Thanks in advance!\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/37058937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/37409291", "body": "Hi Giovanni,\n\nTry to register [1] to the list before posting via Nabble.\n\nCheers.\n\n[1] mailto:users-subscribe@camel.apache.org\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/37409291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/40076928", "body": "Sorry for the delay, Giovanni. I've been snowed with some other stuff :) .\n\nOne more thing before we merge - would you be so kind and fix the CheckStyle errors in your code? You can see these after executing the build with the `sourcecheck` Maven profile:\n\n```\nmvn clean install -Psourcecheck\n```\n\nI can do it on your behalf if you want me to, but it will speed things up if you help me. I'd really appreciate that.\n\nCheers.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/40076928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/40098091", "body": "Cool! I think I should find time tomorrow and proceed with the merge. Thank you Giovanni!\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/40098091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/9377877", "body": "Hi,\n\nCan you send me the example reproducing the issue? I can't re-create it on my machine.\n\nCheers.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9377877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/9393444", "body": "Hi,\n\nYou need to refer your custom bus (`cxf`) in the endpoint URI:\n\n```\nfrom(\"cxf:/incident?serviceClass=\" + IncidentService.class.getName() + \"&bus=#cxf\")\n```\n\nOtherwise Camel will try to create the bus for you. Unfortunately Camel refreshes Spring context while creating default bus, what collides a little bit with the Spring 4 application lifecycle.\n\nPlease try it and let me know how it works. BTW I will use your example as a base for Camel+CXF tests. I will also try to make camel-spring-boot and camel-cxf a bit smarter to handle bus registration nicely.\n\nCheers!\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9393444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/9631760", "body": "Hi,\n\nI'm out for the next week. I will take a look at this as soon as I'm back.\n\nCheers.\n\nOn Fri, Feb 6, 2015 at 5:46 PM, tedp notifications@github.com wrote:\n\n> Interesting and if I take the CamleContext parameter out of the method\n> CamelAutoConfiguration#camelBeanPostProcessor and instead add it as a class\n> variable like this\n> \n> @Autowired\n> CamelContext camelContext;\n> \n> Then my application starts up nicely!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apache/camel/commit/84aab93c00c3521f59b7523a551c9f53da273aac#commitcomment-9627509\n> .\n## \n\nHenryk Konsek\nhttp://henryk-konsek.blogspot.com\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9631760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/9754081", "body": "Hi,\n\nI'm back and kicking. :)\n\nI removed the CamelContext injection from the camelBeanPostProcessor\ndefinition. CamelBeanPostProcessor is smart enough to detect CamelContext\nby itself, even without the explicit injection. That should resolve the\ninitialization issues.\n\nIn case of further \"ApplicationEventMulticaster not initialized\" problems -\nyou know where to find me :) .\n\nCheers.\n\nOn Fri, Feb 6, 2015 at 9:58 PM, Henryk Konsek hekonsek@gmail.com wrote:\n\n> Hi,\n> \n> I'm out for the next week. I will take a look at this as soon as I'm back.\n> \n> Cheers.\n> \n> On Fri, Feb 6, 2015 at 5:46 PM, tedp notifications@github.com wrote:\n> \n> > Interesting and if I take the CamleContext parameter out of the method\n> > CamelAutoConfiguration#camelBeanPostProcessor and instead add it as a class\n> > variable like this\n> > \n> > @Autowired\n> > CamelContext camelContext;\n> > \n> > Then my application starts up nicely!\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/apache/camel/commit/84aab93c00c3521f59b7523a551c9f53da273aac#commitcomment-9627509\n> > .\n> ## \n> \n> Henryk Konsek\n> http://henryk-konsek.blogspot.com\n## \n\nHenryk Konsek\nhttp://henryk-konsek.blogspot.com\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9754081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/9781628", "body": "Can you give it a try today? I suspect that there could be an old version\nof the snapshot in the repository.\n\nThanks for the reporting!\n\nOn Mon, Feb 16, 2015 at 10:16 AM, tedp notifications@github.com wrote:\n\n> I'm still getting the same problem:\n> \n> Caused by: java.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@93447b5: startup date [Mon Feb 16 09:01:52 GMT 2015]; root of context hierarchy\n>     at org.springframework.context.support.AbstractApplicationContext.getApplicationEventMulticaster(AbstractApplicationContext.java:344)\n>     at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:331)\n>     at org.springframework.data.mapping.context.AbstractMappingContext.addPersistentEntity(AbstractMappingContext.java:307)\n>     at org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntity(AbstractMappingContext.java:181)\n>     at org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntity(AbstractMappingContext.java:141)\n>     at org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntity(AbstractMappingContext.java:67)\n>     at org.springframework.data.mongodb.repository.support.MongoRepositoryFactory.getEntityInformation(MongoRepositoryFactory.java:141)\n>     at org.springframework.data.mongodb.repository.support.MongoRepositoryFactory.getTargetRepository(MongoRepositoryFactory.java:83)\n>     at org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepository(RepositoryFactorySupport.java:177)\n>     at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.initAndReturn(RepositoryFactoryBeanSupport.java:239)\n>     at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.afterPropertiesSet(RepositoryFactoryBeanSupport.java:225)\n>     at org.springframework.data.mongodb.repository.support.MongoRepositoryFactoryBean.afterPropertiesSet(MongoRepositoryFactoryBean.java:108)\n>     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1625)\n>     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1562)\n>     ... 60 more\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apache/camel/commit/84aab93c00c3521f59b7523a551c9f53da273aac#commitcomment-9758146\n> .\n## \n\nHenryk Konsek\nhttp://henryk-konsek.blogspot.com\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9781628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/9837076", "body": "Hi,\n\nOur snapshot repository contains some old snapshots. Can you try to build\nthe camel-spring-boot on your development box?\n\nCheers.\n\nOn Wed, Feb 18, 2015 at 10:45 AM, tedp notifications@github.com wrote:\n\n> Correct, it is an old version and still is. I've cleared out my repo but\n> still the code is the same after a build. I'll let you know when it comes\n> down.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apache/camel/commit/84aab93c00c3521f59b7523a551c9f53da273aac#commitcomment-9795888\n> .\n## \n\nHenryk Konsek\nhttp://henryk-konsek.blogspot.com\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9837076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/9990027", "body": "Great to hear that! In case of any further issues, just drop me a line.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9990027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "lldata": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/36219670", "body": "Sorry, will do. I am a github noob.\nBut it is a fun game, so it might get a habit ;-)\n/Lasse\n\n2014-02-27 9:13 GMT+01:00 Claus Ibsen notifications@github.com:\n\n> This has been merged. Do you mind closing this PR?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/apache/camel/pull/101#issuecomment-36219526\n> .\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/36219670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "cemmersb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/36221745", "body": "@ugol Do you want to improve the camel-couchbase component? If so, please remain within the camel-extra code repository. If you want to migrate the component to ASF Camel, it is fine but it would make sense to have the migration quickly discussed in the camel-extra mailing list.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/36221745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/45411265", "body": "Thanks for closing the ticket.\n\nKind regards,\n\nChristoph\n\nOn 07 Jun 2014, at 09:12, ugo landini notifications@github.com wrote:\n\n> Closed #87.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/45411265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "yamahama": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/37428075", "body": "sure thing, thanks!\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/37428075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "RAvontuur": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/38436709", "body": "Oops.\nI tried to update my own forked repo.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/38436709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "fchaillou": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/38744126", "body": "I created a jira ticket for that pull request : https://issues.apache.org/jira/browse/CAMEL-7329\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/38744126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/38744134", "body": "I created a jira ticket for that pull request : https://issues.apache.org/jira/browse/CAMEL-7330\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/38744134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/38744138", "body": "I created a jira ticket for that pull request : https://issues.apache.org/jira/browse/CAMEL-7331\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/38744138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "grgrzybek": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/38988800", "body": "Also I used HSQLDB in the new test. H2 and Derby do not handle:\n- retrieving multiple rows of generated keys for batch inserts\n- retrieving multiple keys for 2+ generated keys in single row\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/38988800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/22792579", "body": "right. good idea. I'll prepare a change tomorrow", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/22792579/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/22890534", "body": "Actually, after some tests, I decided to leave this as is.\r\nThe reason is that this change replaced static loading of `org.fusesource.leveldbjni.JniDBFactory` (via code reference), which didn't use ClassResolver anyway to two attempts of loading different classes in most similar way.\r\n\r\nThe problem was to fix some OSGi issues as well and I didn't want to change class loader that's used.", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/22890534/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/23817789", "body": "@igarashitm I think `org.apache.camel.component.jpa.JpaEndpoint#isSharedEntityManager` should be checked like in `org.apache.camel.component.jpa.JpaConsumer#doStart`:\r\n```java\r\n@Override\r\nprotected void doStart() throws Exception {\r\n    // need to setup entity manager first\r\n    if (getEndpoint().isSharedEntityManager()) {\r\n        this.entityManager = SharedEntityManagerCreator.createSharedEntityManager(entityManagerFactory);\r\n    } else {\r\n        this.entityManager = entityManagerFactory.createEntityManager();\r\n    }\r\n    LOG.trace(\"Created EntityManager {} on {}\", entityManager, this);\r\n    super.doStart();\r\n}\r\n\r\nwhat do you think?\r\n```", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/23817789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "igarashitm": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/40664482", "body": "merged\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/40664482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/23818747", "body": "@grgrzybek ah it looks like so. +1", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/23818747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/89432918", "body": "So there're 2 reason why I preferred creating a new exchange here:\r\n* Avoid exchange properties to be changed by transformer endpoint (not really right now though, it should do deep copy there)\r\n* Preserve original 'IN' message when transformer is invoked for OUT message. If we reuse the exchange then we need to copy that 'OUT' message as a 'IN' before send it to transformer endpoint\r\n\r\nI'm not really sure which is better for camel users. Would you tell me what do you feel about these?", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/89432918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "kevinearls": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/42663230", "body": "This doesn't close the bug, as there are still more failures.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/42663230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "commit_comments": [], "review_comments": []}, "ccancellieri": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/44175303", "body": "updated with JUnit tests\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/44175303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "ssogabe": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/44179416", "body": "thanks!\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/44179416/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "ugol": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/45403591", "body": "Yep, we did all the work in camel-extra, forgot to close it, sorry :)\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/45403591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "xdoo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/45417885", "body": "Thanks for the reminder :)\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/45417885/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jfarrell": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/45436192", "body": "Closing per INFRA-7876\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/45436192/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/45436193", "body": "Closing per INFRA-7876\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/45436193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/45436196", "body": "Closing per INFRA-7876\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/45436196/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/45436200", "body": "Closing per INFRA-7876\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/45436200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/45436202", "body": "Closing per INFRA-7876\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/45436202/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/45436204", "body": "Closing per INFRA-7876\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/45436204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/45436205", "body": "Closing per INFRA-7876\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/45436205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/45436206", "body": "Closing per INFRA-7876\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/45436206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/45436208", "body": "Closing per INFRA-7876\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/45436208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/45436212", "body": "Closing per INFRA-7876\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/45436212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/45436215", "body": "Closing per INFRA-7876\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/45436215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/45436220", "body": "Closing per INFRA-7876\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/45436220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/45436221", "body": "Closing per INFRA-7876\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/45436221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/45436224", "body": "Closing per INFRA-7876\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/45436224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/45436228", "body": "Closing per INFRA-7876\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/45436228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/45436230", "body": "Closing per INFRA-7876\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/45436230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "adessaigne": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/46529610", "body": "Seems ok now, tests success on cdi, blueprint and jasypt\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/46529610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "kubabubin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/46750091", "body": "Hi,\n\nYes, sure, I can do that. It's here: https://issues.apache.org/jira/browse/CAMEL-7527. I'm new to Jira, so I'm not sure if I did it correctly.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/46750091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/48959715", "body": "Thanks for information. Closing.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/48959715/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "alexlomov": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/48020864", "body": "Additional fix required. Will re-create pull request.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/48020864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/48021224", "body": "Sure, thank you! It will be ready in an hour.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/48021224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/48050765", "body": "Hi Willem,\nI've considered both implementation variants, yours and mine. Creating default Hazelcast instance every time no instance is directly set may lead to creation of many useless Hazelcast instances from the 'dev' group if we use some environment where multiple Camel contexts exist: for example you run Karaf with multiple Camel contexts, and each of them refers to Hazelcast objects from endpoint URIs in 'hazelcast:&lt;object&gt;:&lt;name&gt;' manner. This will lead to spawning of many Hazelcast instances that will join the same group named 'dev' (from the default config).\nWould it be better to totally prohibit implicit HazelcastInstance creation and require developers to either set the instance explicitly calling setHazelcastInstance or use bean ref?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/48050765/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/53257425", "body": "As far as I know it's target version is 2.14.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/53257425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/53388310", "body": "I use a custom camel-hazelcast build of 2.13.1 version. The code merges well.  \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/53388310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "mraible": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/48948949", "body": "Will do - thanks!\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/48948949/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "yuruki": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/49870051", "body": "Prefix/suffix resolving has been covered in http://github.com/apache/camel/commit/02da984a42b1729943ef473c6a6c1832d8e48bf2.\n\nI'll create another pull request for the override properties behavior.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/49870051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/59600824", "body": "Adding a write method to Registry interface is not possible since it has several implementations that are supposed to be read-only. (see Willem Jiang's comment here: https://issues.apache.org/jira/browse/CAMEL-7875?focusedCommentId=14168028&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14168028).\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/59600824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/60975983", "body": "Done in CAMEL-7932.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/60975983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/13153926", "body": "@davsclaus Why do you remove camelContextId from OSGi provided property map?\n\nRemoving camelContextId before call to configure method seems to mean that member variable **camelContextId** is assigned with wrong/no value.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/13153926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/13154022", "body": "@davsclaus Context name must be set after call to configure method (sets member variables such as **camelContextId** with prefix support) and it should use the value of member variable **camelContextId** for the previous reason.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/13154022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/13154168", "body": "@davsclaus Does removing this mean that camel-scr bundle can no longer be used with older version of camel-core?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/13154168/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/18436462", "body": "This check is unnecessary as prop is now initialized with new Properties().\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/18436462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/80210572", "body": "Empty command is an error and the method already checks for that later. I don't know if adding a test here would add any value.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/80210572/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/80212861", "body": "If the given timezone is invalid TimeZone will use GMT. I don't think we should add layers here either. The documentation is pretty clear that the user is dealing with a plain SimpleDateFormat here.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/80212861/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/80213294", "body": "The test doesn't make sense anymore because the pattern part is now optional. Possible extraneous parts are ignored as before.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/80213294/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/80214486", "body": "As above, pattern part is now optional. I put the test back with the correct exception class and error message.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/80214486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/80214709", "body": "Yep, that would get deep quick :)\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/80214709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/80217286", "body": "Is it sufficient to replace the dump with `throw ObjectHelper.wrapCamelExecutionException(exchange, e);`?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/80217286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "laurikimmel": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/50016111", "body": "I will look the master branch issue.\n\nThe second issue looks strange to me since new files are added to `components/camel-metrics` folder next to all other components. When I tested with local merge to master all files where there as expected. So it's hard for me to understand what exactly is misplaced.\n\nAlso noticed that some of the unit tests in camel-metrics component are broken after update from main repository. I will update them as needed.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/50016111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/50602032", "body": "Merged Camel Metric component to master branch, fixed unit tests and created new pull request https://github.com/apache/camel/pull/229\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/50602032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "RostislavReznichenko": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/51329273", "body": "Thanks, only core cannot depend on OWASP? What about if some others modules will depend on OWASP? Such as camel-quartz, camel-smpp, camel-http? Can i do another pull requst for this modules?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/51329273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/51330118", "body": "Ok, thank you.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/51330118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "jeffusan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/51679356", "body": "I included a test in MyBatisComponentConfigurationAndDocumentationTest, I added the testProvideInputStream test. \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/51679356/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "nfx": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/53257215", "body": "what version of Camel does include this PR?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/53257215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/53262998", "body": "I wonder if it makes sense to write something by hands, or somehow backport this code into project with camel 2.12.x (or 2.13.x).\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/53262998/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "gquintana": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/54746482", "body": "I rebased but I am not sure I did it right.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/54746482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/55650722", "body": "Add 2 options to Confluence when validating this PR:\nchannelPoolMaxSize | 10 | _Camel 2.x:_ Maximum number of channels used to send messages\nchannelPoolMaxWait | 1000 | _Camel 2.x_  Maximum time (in milliseconds) waiting for a channel\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/55650722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "neoramon": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/55194638", "body": "About the change: It is not necessary to reject in handleCancel or shutdown.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/55194638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "dmitrimedvedev": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/55329546", "body": "Thanks Willem, I closed the ticket.\n\nOn Thu, Sep 11, 2014 at 12:00 AM, Willem Jiang notifications@github.com\nwrote:\n\n> Hi Dmitri,\n> \n> This patch was merged into camel master branch. Do you mind close it\n> yourself?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apache/camel/pull/226#issuecomment-55227249.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/55329546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/55416637", "body": "Ok done. :)\n\nOn Thu, Sep 11, 2014 at 5:33 PM, Willem Jiang notifications@github.com\nwrote:\n\n> Oh. What I mean is to close this pull request. The JIRA issue can be close\n> by a batch command :)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apache/camel/pull/226#issuecomment-55347943.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/55416637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "brmeyer": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/55938216", "body": "Note that I still need to push a unit test, but need guidance on the best approach.  Use Mockito to mock the GH API SDK?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/55938216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/55938237", "body": "Note that I still need to push a unit test, but need guidance on the best approach.  Use Mockito to mock the JIRA API SDK?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/55938237/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/57221257", "body": "Closing -- appears to have already been applied\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/57221257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/57221266", "body": "Closing -- appears to have already been applied\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/57221266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/59387754", "body": "Appears to have been merged\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/59387754/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "alaz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/56273875", "body": "\"JavaBeanstalkClient\" is dual licensed by the author since 1.1.2: GPL and BSD. See [the repo](https://github.com/RTykulsker/JavaBeanstalkClient) and the discussion [here](https://groups.google.com/d/msg/beanstalk-talk/3tsHtEoiTB8/op5LF6uN8_4J).\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/56273875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "jgquinn": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/56391285", "body": "Sure, I'll take a look. Thanks for pointing me in the right direction.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/56391285/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "tellisnz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/57079608", "body": "Merged into camel by Willem Jiang - 78b9b8f847ca9a9127f10c757516dea3033a6c59 and 80518e29d93745bcad341e5c02bef8a0e31ece61\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/57079608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "akhettar": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/57124761", "body": "Youre welcome, sure will do.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/57124761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Flowdalic": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/58807153", "body": "Note that #93 has also related changes for camel-xmpp. I suggest to merge #299 first and then rebase #93 (if required).\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/58807153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/59095335", "body": "How did you run tun the unit tests? Are there no stacktraces or exceptions? Which java runtime version are you using?\n\nI could swear `mvn install` run without failures for me a day ago, but know I get also failures, although different ones:\n\n``` text\n-------------------------------------------------------------------------------\nTest set: org.apache.camel.component.bean.BeanComponentConfigurationAndDocumentationTest\n-------------------------------------------------------------------------------\nTests run: 2, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.104 sec <<< FAILURE! - in org.apache.camel.component.bean.BeanComponentConfigurationAndDocumentationTest\ntestComponentDocumentation(org.apache.camel.component.bean.BeanComponentConfigurationAndDocumentationTest)  Time elapsed: 0.002 sec  <<< FAILURE!\njunit.framework.AssertionFailedError: Should have found some auto-generated HTML\n    at junit.framework.Assert.fail(Assert.java:57)\n    at junit.framework.Assert.assertTrue(Assert.java:22)\n    at junit.framework.Assert.assertNotNull(Assert.java:256)\n    at junit.framework.TestCase.assertNotNull(TestCase.java:426)\n    at org.apache.camel.component.bean.BeanComponentConfigurationAndDocumentationTest.testComponentDocumentation(BeanComponentConfigurationAndDocumentationTest.java:52)\n```\n\nWhat is the standard way to invoke the unit tests in Apache Camel?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/59095335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/59115438", "body": "Now I got\n\n```\n  ConfigAdminOverridePropertiesTest>CamelBlueprintTestSupport.setUp:183->CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:247->CamelBlueprintTestSupport.createCamelContext:352 \u00bb Runtime\n```\n\nthat looks similar to yours, investigating.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/59115438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/61482859", "body": "I've pushed a new version of the commit. There are some issues I'd like to get feedback on how to solve them:\n- The EmbeddedXmppTestServer (vysper) doesn't seem to be able to run without TLS being required. In order to establish a TLS secured XMPP connection, Smack needs to accept the certificate. Right now `acceptAllCertificates`, a new field in XmppEndpoint defaults to `true` to achieve this. But for security reasons, this shouldn't be the default, and only be used e.g. for the unit tests. Not sure how to do this.\n- I just seem to can't get the unit tests to succeed, even when using the master branch, `mvn clean install` fails for me. Which makes it hard for me to further develop the smack40 branch. I think it's nearly finished, but it would be great of some experiences Apache Camel developer would help me finishing the branch.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/61482859/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "camann9": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/59691886", "body": "Has been merged, closing it\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/59691886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/issues/comments/59691909", "body": "Has been merged, closing it\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/59691909/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/18815604", "body": "But then we can not find out if a folder is an IMAP folder and we can not call the specific methods we need for sorting (only IMAP supports sorting).\nThe dependencies I referenced are all part of the maven dependency javax.mail/mail, they are not dependent on the type of JDK/JRE we are running (even though they have the com.sun prefix).\nTo make it short: there is no way of implementing this functionality without using stuff from com.sun.mail. But I think in this situation it not a problem.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/18815604/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "bonnetb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/apache/camel/issues/comments/59895914", "body": "Pull made by commiter\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/issues/comments/59895914/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "FergusNelson": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/4296908", "body": "This is a breaking change. If autoAck is false then the messages are never acknowledged. Need an ! added to the if.  Added a comment to the jira. Pull request to come.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/4296908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "btiernay": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/6011334", "body": "This is great! Any chance a new release will be made soon for this?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/6011334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "akuhtz": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/6820883", "body": "There is a typo in the method name: should be resolve, not reslove.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/6820883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "samized": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/9377800", "body": "Hello,\nSince the latest SNAPSHOT I got following Error:\n\n```\norg.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'camelBeanPostProcessor' defined in class path resource [org/apache/camel/spring/boot/CamelAutoConfiguration.class]: Unsatisfied dependency expressed through constructor argument with index 0 of type [org.apache.camel.CamelContext]: : Error creating bean with name 'camelContext' defined in class path resource [org/apache/camel/spring/boot/CamelAutoConfiguration.class]: Initialization of bean failed; nested exception is java.lang.RuntimeException: java.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@1bf3f158: startup date [Wed Jan 21 16:06:44 CET 2015]; root of context hierarchy; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camelContext' defined in class path resource [org/apache/camel/spring/boot/CamelAutoConfiguration.class]: Initialization of bean failed; nested exception is java.lang.RuntimeException: java.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@1bf3f158: startup date [Wed Jan 21 16:06:44 CET 2015]; root of context hierarchy\n    at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:749) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:464) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1111) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1006) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.context.support.PostProcessorRegistrationDelegate.registerBeanPostProcessors(PostProcessorRegistrationDelegate.java:232) ~[spring-context-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:615) ~[spring-context-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:465) ~[spring-context-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:109) [spring-boot-1.2.0.RELEASE.jar:1.2.0.RELEASE]\n    at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:691) [spring-boot-1.2.0.RELEASE.jar:1.2.0.RELEASE]\n    at org.springframework.boot.SpringApplication.run(SpringApplication.java:321) [spring-boot-1.2.0.RELEASE.jar:1.2.0.RELEASE]\n    at ch.example.camel.RunApp.main(RunApp.java:77) [main/:na]\nCaused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camelContext' defined in class path resource [org/apache/camel/spring/boot/CamelAutoConfiguration.class]: Initialization of bean failed; nested exception is java.lang.RuntimeException: java.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@1bf3f158: startup date [Wed Jan 21 16:06:44 CET 2015]; root of context hierarchy\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:547) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1127) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1051) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:949) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:813) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:741) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    ... 16 common frames omitted\nCaused by: java.lang.RuntimeException: java.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@1bf3f158: startup date [Wed Jan 21 16:06:44 CET 2015]; root of context hierarchy\n    at org.apache.camel.spring.boot.RoutesCollector.postProcessAfterInitialization(RoutesCollector.java:65) ~[camel-spring-boot-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:422) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1571) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539) ~[spring-beans-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    ... 26 common frames omitted\nCaused by: java.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@1bf3f158: startup date [Wed Jan 21 16:06:44 CET 2015]; root of context hierarchy\n    at org.springframework.context.support.AbstractApplicationContext.getApplicationEventMulticaster(AbstractApplicationContext.java:344) ~[spring-context-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:331) ~[spring-context-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:333) ~[spring-context-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:773) ~[spring-context-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:483) ~[spring-context-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n    at org.apache.cxf.bus.spring.BusApplicationContext$1.run(BusApplicationContext.java:106) ~[cxf-core-3.0.3.jar:3.0.3]\n    at org.apache.cxf.bus.spring.BusApplicationContext$1.run(BusApplicationContext.java:104) ~[cxf-core-3.0.3.jar:3.0.3]\n    at java.security.AccessController.doPrivileged(Native Method) ~[na:1.7.0_45]\n    at org.apache.cxf.bus.spring.BusApplicationContext.<init>(BusApplicationContext.java:104) ~[cxf-core-3.0.3.jar:3.0.3]\n    at org.apache.cxf.bus.spring.SpringBusFactory.createApplicationContext(SpringBusFactory.java:157) ~[cxf-core-3.0.3.jar:3.0.3]\n    at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:148) ~[cxf-core-3.0.3.jar:3.0.3]\n    at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:122) ~[cxf-core-3.0.3.jar:3.0.3]\n    at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:94) ~[cxf-core-3.0.3.jar:3.0.3]\n    at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:83) ~[cxf-core-3.0.3.jar:3.0.3]\n    at org.apache.camel.component.cxf.CxfEndpointUtils.createBus(CxfEndpointUtils.java:154) ~[camel-cxf-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.component.cxf.CxfEndpoint.getBus(CxfEndpoint.java:865) ~[camel-cxf-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.component.cxf.CxfEndpoint.setupServerFactoryBean(CxfEndpoint.java:367) ~[camel-cxf-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.component.cxf.CxfEndpoint.createServerFactoryBean(CxfEndpoint.java:686) ~[camel-cxf-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.component.cxf.CxfConsumer.<init>(CxfConsumer.java:66) ~[camel-cxf-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.component.cxf.CxfEndpoint.createConsumer(CxfEndpoint.java:245) ~[camel-cxf-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.impl.EventDrivenConsumerRoute.addServices(EventDrivenConsumerRoute.java:65) ~[camel-core-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.impl.DefaultRoute.onStartingServices(DefaultRoute.java:80) ~[camel-core-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.impl.RouteService.warmUp(RouteService.java:158) ~[camel-core-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:2858) ~[camel-core-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:2788) ~[camel-core-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:2810) ~[camel-core-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.impl.DefaultCamelContext.startRouteService(DefaultCamelContext.java:2687) ~[camel-core-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:831) ~[camel-core-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:2663) ~[camel-core-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.impl.DefaultCamelContext.addRouteDefinitions(DefaultCamelContext.java:763) ~[camel-core-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.builder.RouteBuilder.populateRoutes(RouteBuilder.java:397) ~[camel-core-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.builder.RouteBuilder.addRoutesToCamelContext(RouteBuilder.java:311) ~[camel-core-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.impl.DefaultCamelContext.addRoutes(DefaultCamelContext.java:722) ~[camel-core-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    at org.apache.camel.spring.boot.RoutesCollector.postProcessAfterInitialization(RoutesCollector.java:63) ~[camel-spring-boot-2.15-SNAPSHOT.jar:2.15-SNAPSHOT]\n    ... 29 common frames omitted\n```\n\nThanks for helping.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9377800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/9392800", "body": "Here an example with some apache code:\nhttps://github.com/samized/springboot-camel-bug\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9392800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/9393864", "body": "Thanks.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9393864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/9626020", "body": "Assumption:  The `CamelContext` injection at `CamelAutoConfiguration#camelBeanPostProcessor` forces a creation of a `CamelContext` at wrong time during startup, which leads to the problem that other dependencies are not yet initialized...\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9626020/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "segalziv": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/9378608", "body": "Hi @dabdine-r7 , I've created a PR suggesting a minor enhancement in bulk index operation to elasticsearch. As you made the last PR in the same area, I thought it is relevant to get your attention on this. thanks.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9378608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/9378621", "body": "opps, here it is:\nhttps://github.com/logshero/camel/compare/apache:master...master\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9378621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/9381750", "body": "Thanks for your reply!\n\nI understand the backward compatibility considerations.\n\nAs I'm not that experience with Camel, I might be wrong, but can't that be\nsolve with type conversions? If someone will look for the list of id's, the\nBulkResponse can get converted to a List<> by calling something like\ngetBody(List.class) on the message?\n\nI feel that getting back only the list of id's loose important info, like\nthe index failure reason for example.\nOn 21 Jan 2015 20:22, \"Derek Abdine\" notifications@github.com wrote:\n\n> hey @segalziv https://github.com/segalziv! So though I think this\n> change is fine. I contemplated doing this with my original PR but\n> eventually decided against it to preserve existing behavior with bulk\n> requests.\n> \n> I'd consult @davsclaus https://github.com/davsclaus perhaps on how to\n> handle breaking changes (as anyone now relying on the existing behavior of\n> a list of IDs will now be getting an ES java client object back).\n> \n> Sorta on a similar line of thinking, I think this component's contract\n> needs to be a bit more consistent when it comes to responses. In some cases\n> it returns fields of an elasticsearch java response object (like the id, or\n> in the case of the bulk request, the list of ids) and in some cases it\n> returns the response object itself. By _not_ returning es-java objects it\n> allows someone to decouple themselves from using that library in their\n> downstream code that uses the component, though in certain cases (like bulk\n> requests) using the es java client is required (which was the original\n> reason for my PR).\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apache/camel/commit/69de2e3dd8f9d0e61b3a9e6e5495e406c9159909#commitcomment-9381453\n> .\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9381750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "dabdine-r7": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/9381453", "body": "hey @segalziv! So though I think this change is fine. I contemplated doing this with my original PR but eventually decided against it to preserve existing behavior with bulk requests.\n\nI'd consult @davsclaus perhaps on how to handle breaking changes (as anyone now relying on the existing behavior of a list of IDs will now be getting an ES java client object back).\n\nSorta on a similar line of thinking, I think this component's contract needs to be a bit more consistent when it comes to responses. In some cases it returns fields of an elasticsearch java response object (like the id, or in the case of the bulk request, the list of ids) and in some cases it returns the response object itself. By _not_ returning es-java objects it allows someone to decouple themselves from using that library in their downstream code that uses the component, though in certain cases (like bulk requests) using the es java client is required (which was the original reason for my PR).\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9381453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/21726049", "body": "I'm wondering if it's better to do getBody() here with an instanceof instead. I'm concerned that with the type converters in place we'll try to coerce things when we shouldn't.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/21726049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/21797910", "body": "ill remove this author tag.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/21797910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "tedp": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/9625269", "body": "Hi Henryk,\n\nI'm having a similar problem but not using CXF.  Can you help please?\n\n```\njava.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@3f6358b8: startup date [Fri Feb 06 15:11:06 GMT 2015]; root of context hierarchy\nat org.springframework.context.support.AbstractApplicationContext.getApplicationEventMulticaster(AbstractApplicationContext.java:344)\nat org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:331)\nat org.springframework.data.mapping.context.AbstractMappingContext.addPersistentEntity(AbstractMappingContext.java:307)\nat org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntity(AbstractMappingContext.java:181)\nat org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntity(AbstractMappingContext.java:141)\nat org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntity(AbstractMappingContext.java:67)\nat org.springframework.data.mongodb.repository.support.MongoRepositoryFactory.getEntityInformation(MongoRepositoryFactory.java:141)\nat org.springframework.data.mongodb.repository.support.MongoRepositoryFactory.getTargetRepository(MongoRepositoryFactory.java:83)\nat org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepository(RepositoryFactorySupport.java:177)\nat org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.initAndReturn(RepositoryFactoryBeanSupport.java:239)\nat org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.afterPropertiesSet(RepositoryFactoryBeanSupport.java:225)\nat org.springframework.data.mongodb.repository.support.MongoRepositoryFactoryBean.afterPropertiesSet(MongoRepositoryFactoryBean.java:108)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1625)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1562)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)\nat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303)\nat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)\nat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299)\nat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)\nat org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1127)\nat org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1051)\nat org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:949)\nat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:533)\nat org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88)\nat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:331)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1202)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)\nat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303)\nat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)\nat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299)\nat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)\nat org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:523)\nat org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:512)\nat org.springframework.context.support.AbstractApplicationContext.getBeansOfType(AbstractApplicationContext.java:1052)\nat org.apache.camel.spring.boot.RoutesCollector.postProcessAfterInitialization(RoutesCollector.java:60)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:422)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1571)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)\nat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303)\nat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)\nat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299)\nat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)\nat org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1127)\nat org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1051)\nat org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:949)\nat org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:813)\nat org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:741)\nat org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:464)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1111)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1006)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)\nat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303)\nat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)\nat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299)\nat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)\nat org.springframework.context.support.PostProcessorRegistrationDelegate.registerBeanPostProcessors(PostProcessorRegistrationDelegate.java:232)\nat org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:615)\nat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:465)\nat org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:118)\nat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:691)\nat org.springframework.boot.SpringApplication.run(SpringApplication.java:321)\nat org.springframework.boot.SpringApplication.run(SpringApplication.java:961)\nat org.springframework.boot.SpringApplication.run(SpringApplication.java:950)\nat uk.co.steria.hmpo.belt.Application.main(Application.java:49)\n```\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9625269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/9627509", "body": "Interesting and if I take the CamleContext parameter out of the method CamelAutoConfiguration#camelBeanPostProcessor and instead add it as a class variable like this \n\n```\n@Autowired\nCamelContext camelContext;\n```\n\nThen my application starts up nicely! Thanks\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9627509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/9758146", "body": "I'm still getting the same problem:\n\n``` java\nCaused by: java.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@93447b5: startup date [Mon Feb 16 09:01:52 GMT 2015]; root of context hierarchy\n    at org.springframework.context.support.AbstractApplicationContext.getApplicationEventMulticaster(AbstractApplicationContext.java:344)\n    at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:331)\n    at org.springframework.data.mapping.context.AbstractMappingContext.addPersistentEntity(AbstractMappingContext.java:307)\n    at org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntity(AbstractMappingContext.java:181)\n    at org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntity(AbstractMappingContext.java:141)\n    at org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntity(AbstractMappingContext.java:67)\n    at org.springframework.data.mongodb.repository.support.MongoRepositoryFactory.getEntityInformation(MongoRepositoryFactory.java:141)\n    at org.springframework.data.mongodb.repository.support.MongoRepositoryFactory.getTargetRepository(MongoRepositoryFactory.java:83)\n    at org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepository(RepositoryFactorySupport.java:177)\n    at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.initAndReturn(RepositoryFactoryBeanSupport.java:239)\n    at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.afterPropertiesSet(RepositoryFactoryBeanSupport.java:225)\n    at org.springframework.data.mongodb.repository.support.MongoRepositoryFactoryBean.afterPropertiesSet(MongoRepositoryFactoryBean.java:108)\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1625)\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1562)\n    ... 60 more\n```\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9758146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/9795888", "body": "Correct, it is an old version and still is.  I've cleared out my repo but still the code is the same after a build.  I'll let you know when it comes down.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9795888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/9912290", "body": "No need, it's now working from the repository version.\n\nThanks for your help\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9912290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "arnaudchotard": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/9989261", "body": "@davsclaus Currently testing camel-rabbit 2.15-SNAPSHOT with a request reply pattern, I found a regression with the replyTo basicPublish. The body message sent on the AMQP channel is the message before processing the exchange. We would like the message after processing the exchange. The correction consist of copy the 187-193 lines at 203 line.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/9989261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/10001735", "body": "After testing, the fix is Ok. Thank you.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/10001735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "guirodriguez": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/10530983", "body": "how can i do to download this example with camel 2.12.0 version?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/10530983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/10531504", "body": "I found it!\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/10531504/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "szarekar": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/10605847", "body": "How do i access swagger-ui using this example project ?\n\nI delopyed the war file in tomcat. \n\nand access http://localhost:8080/camel-example-servlet-rest-tomcat/api-docs i get this ...\n\n{\"apiVersion\":\"1.2.3\",\"swaggerVersion\":\"1.2\",\"apis\":[{\"path\":\"/user\",\"description\":\"User rest service\"}],\"info\":{\"title\":\"User Services\",\"description\":\"Camel Rest Example with Swagger that provides an User REST service\"}}\n\nBUT MY QUESTION IS - how do i access swagger-ui/index.html?\n\nwhat is the exact URL to access swagger-UI?\n\n![swagger](https://cloud.githubusercontent.com/assets/11322386/7027718/b6b49a7a-dd16-11e4-9092-fbb28b7aeeb7.png)\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/10605847/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "yogamaha": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/10726460", "body": "It would be great if this condition is added at the end of while loop as well. \nThat would enable last batch of offsets to be commited during the client shutdown.\n\nif (processed >= endpoint.getBatchSize()) \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/10726460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "raulk": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/10869840", "body": "Hey Claus, this should only be printed once when the context initialises, that's why I set the level to INFO. The statements that are printed during exchange routing are all set to DEBUG.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/10869840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/10869843", "body": "Good catch.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/10869843/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/10869850", "body": "Yep. It's only set once from the constructor. Good point.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/10869850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "bibryam": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/12823540", "body": "Yes and Yes\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/12823540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "joaoacj": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/13498525", "body": "It's an honour, @davsclaus \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/13498525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "dhanapriyanga": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/13966417", "body": "how to download some files using apache  camel\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/13966417/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "gyc567": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/14609626", "body": "how to send multi-message throught single exchange ?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/14609626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/15155479", "body": "i found the solution :+1: split pattern+dynamic routing \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/15155479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "deniskuzZ": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/14695666", "body": "Hi Hadrian,\n\nCould you please correct isDigit method, ASCII 57 (number 9) should be included. \nIt causes issues during leader election. Sequence 0009 is considered smaller than 0008, which is wrong.\n\nThanks in advance,\nDenys\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/14695666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "astefanutti": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/15677725", "body": "Forgot about that one ;-) Thanks!\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/15677725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}, {"url": "https://api.github.com/repos/apache/camel/comments/15958160", "body": "Thanks! I've just realised that while migrating the Karaf user guide to Asciidoc :) I try to learn more Camel awesomeness in the process ;)\n\nI've included the change in #833.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/15958160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "MEMBER"}], "review_comments": []}, "ben-manes": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/16821210", "body": "You may prefer to use `recordStats` instead of maintaining your own counters. This has a slight benefit that it uses `LongAdder` instead of `AtomicLong` for better performance.\n\nThe main difference though is that statistics only accumulate and can not be reset. This is because most reporters provide the window (e.g. 95th percentile over 24 hours) so we only need to expose the raw numbers. A \"reset\" is just the difference between the current and last snapshot, e.g.\n\n``` java\nCacheStats snapshot; // class field from last reset()\nCacheStats stats = cache.stats().minus(snapshot);\nreturn ...\n```\n\nThis has the negative affect of creating a snapshot object, though. The `StatsCounter` is also pluggable, so a custom implementation that reports directly (e.g. to Dropwizard's Metrics) is another option.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/16821210/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/16821254", "body": "I don't think this will be necessary if the cache's executor is synchronous. It delegates all async tasks there (doesn't manage its own threads), so the maintenance penalty will be put onto a caller thread. The async behavior is primarily to avoid user-facing latencies in non-test cases since there's usually spare CPU cycles to do the work in the background.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/16821254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/16821340", "body": "You may want to switch from a _get then compute then put_ approach to an atomic **compute if absent** style. That avoids races where multiple threads are computing the same entry due to a cache miss by instead letting the subsequent calls wait for the first to compute the value. That is a more invasive API change, though.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/16821340/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/16821502", "body": "Caffeine (as of v2) no longer uses LRU for the maximum size, so the class name could be a little misleading. A comment would be enough I think. It now uses a [near optimal](https://github.com/ben-manes/caffeine/wiki/Efficiency) policy that takes into account recency and frequency in O(1).\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/16821502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/16821544", "body": "Note that while the `Cache` is serializable, the `Map` view currently is not. You could instead always go through the `asMap` call which has no performance penalty.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/16821544/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/16821583", "body": "Note that this would now increment for explicit removals (e.g. `Map#remove(key)`) in addition to eviction. You can inspect the removal cause if you want to filter that.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/16821583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/22688526", "body": "fyi, `clear` is `invalidateAll` which you have. `cleanUp` is to allow a user to force any pending, internal policy work to be applied. Generally this isn't needed, but can be useful in unit tests or an inactive cache where expiration has to be somewhat timely. Not sure if this is a typo or misunderstanding.\r\n\r\nFor example a traditional LRU locks on every request to reorder the entry, but that creates contention. Instead we can buffer N reorders and apply them in a batch under the lock, thereby removing contention but deferring the work. In that case `cleanUp` would be to force the buffered operations to be applied before returning, while normally it would happen when the buffer reaches a threshold due to activity.", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/22688526/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/22688631", "body": "I think you meant to use `get(key)` which will call the loader if not present.", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/22688631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/22688679", "body": "Please ping me when this is released and I'll add `Camel` to the list of integrations. :)", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/22688679/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/22688733", "body": "Does Camel has a standard approach for externalizing stats? This allows the user to query using `cache.stats()` and defers the reporting to the application (e.g. JMX, Dropwizard Metrics). You can either poll the stats or provide a custom `StatsCounter` to push them through ([example](https://github.com/ben-manes/caffeine/tree/master/examples/stats-metrics)).", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/22688733/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/22688825", "body": "Okay. If not then I am unsure how you would use this setting as is, due to the user not being able to consume the metrics. Some reporting hook would be necessary.", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/22688825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "anoordover": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/17923613", "body": "I get a few CS issues:\n- The two new classes have default access. The constructors are public;\n- A whitespace is missing before a {\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/17923613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/17924156", "body": "I have seen a jar somewhere in one of the projects that you could be able\nto use to change the configuration of IJ.\nI don't know whether this fixes this import \\* issue.\n\n2016-06-18 19:55 GMT+02:00 elakito notifications@github.com:\n\n> @anoordover https://github.com/anoordover thanks. i thought i had run\n> sourcecheck but somehow missed it.\n> \n> I also moved my camel project to IJ and I noticed its default setting\n> replaces those import statements with a wild character package import when\n> there are more than 5 classes imported from that package. I noticed this\n> one also too late. CS doesn't complain about it but I fixed it too.\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/apache/camel/commit/a9d093faf22c57b18777b5f6de6b03731157146b#commitcomment-17923972,\n> or mute the thread\n> https://github.com/notifications/unsubscribe/AFC1lSCaTb3Q5CI3Dl-Vvfbu7qJmRWquks5qNDD8gaJpZM4I497Z\n> .\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/17924156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/17967042", "body": "Great! There is a jira-issue (https://issues.apache.org/jira/browse/CAMEL-9047) about an upgrade of a component which was based on generated code.\nI will try to find this issue and let you know the result.\nOr could you do this as well?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/17967042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/67600482", "body": "Thanks for the reviews! I will provide a new patch.\nOp 18 jun. 2016 2:26 p.m. schreef \"Gijsbert van den Brink\" <\nnotifications@github.com>:\n\n> In\n> components/camel-mina2/src/main/java/org/apache/camel/component/mina2/Mina2Producer.java\n> https://github.com/apache/camel/pull/1043#discussion_r67600299:\n> \n> > @@ -65,6 +65,7 @@\n> >  public class Mina2Producer extends DefaultProducer implements ServicePoolAware {\n> > \n> > ```\n> >  private static final Logger LOG = LoggerFactory.getLogger(Mina2Producer.class);\n> > ```\n> > -    private final ResponseHandler handler;\n> >    private IoSession session;\n> >    private CountDownLatch latch;\n> \n> Maybe rename this to responseLatch (or something)? To avoid confusion\n> about what the latches are used for.\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/apache/camel/pull/1043/files/fe41b1bb9ac743214a6f6baba393a251e55037fc#r67600299,\n> or mute the thread\n> https://github.com/notifications/unsubscribe/AFC1lYinKwwwmI95aoVyKEQEpkdHyZuyks5qM-QAgaJpZM4I4bps\n> .\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/67600482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "elakito": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/17923972", "body": "@anoordover thanks. i thought i had run sourcecheck but somehow missed it. \n\nI also moved my camel project to IJ and I noticed its default setting replaces those import statements with a wild character package import when there are more than 5 classes imported from that package. I noticed this one also too late. CS doesn't complain about it but I fixed it too.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/17923972/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/17924225", "body": "IJ's automatic import options uses single-class import by default but there\nwas another value that I had to adjust to keep the single-class import\nalways working (which is called Class count to use import with '*' whose\ndefault value is 5. ;-(\n\n2016-06-18 21:19 GMT+02:00 anoordover notifications@github.com:\n\n> I have seen a jar somewhere in one of the projects that you could be able\n> to use to change the configuration of IJ.\n> I don't know whether this fixes this import \\* issue.\n> \n> 2016-06-18 19:55 GMT+02:00 elakito notifications@github.com:\n> \n> > @anoordover https://github.com/anoordover thanks. i thought i had run\n> > sourcecheck but somehow missed it.\n> > \n> > I also moved my camel project to IJ and I noticed its default setting\n> > replaces those import statements with a wild character package import\n> > when\n> > there are more than 5 classes imported from that package. I noticed this\n> > one also too late. CS doesn't complain about it but I fixed it too.\n> > \n> > \u2014\n> > You are receiving this because you were mentioned.\n> > Reply to this email directly, view it on GitHub\n> > <\n> > https://github.com/apache/camel/commit/a9d093faf22c57b18777b5f6de6b03731157146b#commitcomment-17923972\n> > ,\n> > or mute the thread\n> > <\n> > https://github.com/notifications/unsubscribe/AFC1lSCaTb3Q5CI3Dl-Vvfbu7qJmRWquks5qNDD8gaJpZM4I497Z\n> > \n> > .\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/apache/camel/commit/a9d093faf22c57b18777b5f6de6b03731157146b#commitcomment-17924156,\n> or mute the thread\n> https://github.com/notifications/unsubscribe/ABfIeJzUlSi0pD5W1zgLBP6b4hJiq4-Lks5qNEStgaJpZM4I497Z\n> .\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/17924225/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "ssharma": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/18272344", "body": "Shouldn't the StartWorkflowOptions be set before startWorkflowExecution is invoked? AWS will ignore the settings and use defaults = 0\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/18272344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/18939650", "body": "Thanks. Where can I download Camel CS lint file?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/18939650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/19073132", "body": "@davsclaus  Can you please pass on Camel code CS template? \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/19073132/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/73820181", "body": "Sure. Sorry, wasn't aware of the dependency constraint. I've updated the PR and made it generic to inject any properties for a given JAXB-RI\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/73820181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/73820216", "body": "Done! Learning about OSS best practices. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/73820216/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "Premkumar09": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/18363186", "body": "When fastExistsCheck=true we are getting f.getFileName() which returns absolute file path's and we comparing just the file name.\n\nif (f.getFilename().equals(file.getFileNameOnly()) || f.getFilename().equals(file.getAbsoluteFilePath())) {\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/18363186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/18395303", "body": "Thank you Claus Ibsen for quick response. I would like to contibute and\npatch fix for this issue.\nOn Jul 25, 2016 2:36 AM, \"Claus Ibsen\" notifications@github.com wrote:\n\n> @Premkumar09 https://github.com/Premkumar09 can you log a JIRA ticket\n> and you are welcome to work on a github PR / patch to fix this. We love\n> contributions: http://camel.apache.org/contributing\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/apache/camel/commit/91c086b7af22b6cfaf2f66b2c872b752dc10a19c#commitcomment-18374248,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/ATpfwny93BVb5kwkb0GuUdyLIMbAPsMwks5qZFltgaJpZM4JTCV8\n> .\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/18395303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/18497635", "body": "Hi Claus,\n\nI am waiting for apache committer id.  I have sent the Individual\nContributor License Agreement couple of days back. I will check in the code\nto GIT repository as soon as i get it.\n\nThanks,\nPrem\n\nOn Tue, Aug 2, 2016 at 10:43 AM, Claus Ibsen notifications@github.com\nwrote:\n\n> @Premkumar09 https://github.com/Premkumar09 are you able to work on a\n> PR? We want to do a new 2.17.3 release and it would be good to get this\n> fixed in that release.\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/apache/camel/commit/91c086b7af22b6cfaf2f66b2c872b752dc10a19c#commitcomment-18488727,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/ATpfwg1njuxCwdcyBwm2yy-5OaZLOA9qks5qb1eXgaJpZM4JTCV8\n> .\n## \n\nThanks & Regards,\nPrem\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/18497635/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/18513422", "body": "Hi, the issue i reported was for FTP when consuming files with  when fastExistsCheck = true and readLock=changed, Camel FTP component was skipping files with reason. \"Unable to acquired read lock within 20000ms\". On debugging the code i found FtpChangedExclusiveReadLockStrategy.java Line 78, f.getFileName() was returning absolute/relative path, not just the file name.  Below condition fails always\n\nif (f.getName().equals(file.getFileNameOnly())) {\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/18513422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/18519135", "body": "This is test that is failing\n\nimport org.apache.camel.CamelContext;\nimport org.apache.camel.builder.RouteBuilder;\nimport org.apache.camel.impl.DefaultCamelContext;\n\npublic class CamelFTPPickup {\n\n```\npublic static void main(String args[]) throws Exception {\nCamelContext context = new DefaultCamelContext();\ncontext.setTracing(true);\ncontext.start();\ncontext.addRoutes(new RouteBuilder() {\n    public void configure() {\n        String srcEndPoint=\"ftp://<hostname>:21/inb?noop=true&recursive=false&readLock=changed&fastExistsCheck=true&delay=5000&include=Atest.*&idempotent=true&idempotentKey=${file:path}-${file:modified}&binary=true&connectTimeout=10000&throwExceptionOnConnectFailed=true&username=<username>&password=<password>&maximumReconnectAttempts=5&reconnectDelay=3000&passiveMode=true\";\n\nfrom(srcEndPoint).to(\"log:foo\");\n    }\n\n});\n\nThread.sleep(60000);\n\n}\n```\n\n}\n\nLog message \nWARN org.apache.camel.component.file.remote.strategy.FtpChangedExclusiveReadLockStrategy - Cannot acquire read lock within 20000 millis. Will skip the file: RemoteFile[Atestout.txt]\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/18519135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/18529548", "body": "I couldn't agree its working, i am trying to connect to FTP daemon (vsftpd) running on Red Hat Linux 6.7. Here is my complete log\n\n[main] INFO org.apache.camel.impl.DefaultCamelContext - Apache Camel 2.17.2 (CamelContext: camel-1) is starting\n[main] INFO org.apache.camel.impl.DefaultCamelContext - Tracing is enabled on CamelContext: camel-1\n[main] INFO org.apache.camel.management.ManagedManagementStrategy - JMX is enabled\n[main] INFO org.apache.camel.impl.converter.DefaultTypeConverter - Loaded 185 type converters\n[main] INFO org.apache.camel.impl.DefaultRuntimeEndpointRegistry - Runtime endpoint registry is in extended mode gathering usage statistics of all incoming and outgoing endpoints (cache limit: 1000)\n[main] INFO org.apache.camel.impl.DefaultCamelContext - AllowUseOriginalMessage is enabled. If access to the original message is not needed, then its recommended to turn this option off as it may improve performance.\n[main] INFO org.apache.camel.impl.DefaultCamelContext - StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html\n[main] INFO org.apache.camel.impl.DefaultCamelContext - Total 0 routes, of which 0 are started.\n[main] INFO org.apache.camel.impl.DefaultCamelContext - Apache Camel 2.17.2 (CamelContext: camel-1) started in 0.688 seconds\n[main] INFO org.apache.camel.component.file.remote.FtpEndpoint - Using default memory based idempotent repository with cache max size: 1000\n[main] INFO org.apache.camel.impl.DefaultCamelContext - Route: route1 started and consuming from: Endpoint[ftp://hostname:21/changed?binary=true&connectTimeout=10000&delay=5000&fastExistsCheck=true&idempotent=true&idempotentKey=%24%7Bfile%3Apath%7D-%24%7Bfile%3Amodified%7D&include=slow.*&maximumReconnectAttempts=5&noop=true&passiveMode=true&password=xxxxxx&readLock=changed&reconnectDelay=3000&recursive=false&throwExceptionOnConnectFailed=true&username=xxxxx]\n[Camel (camel-1) thread #0 - ftp://hostname:21/changed] WARN org.apache.camel.component.file.remote.strategy.FtpChangedExclusiveReadLockStrategy - Cannot acquire read lock within 20000 millis. Will skip the file: RemoteFile[slowfile.dat]\n[Camel (camel-1) thread #0 - ftp://hostname:21/changed] WARN org.apache.camel.component.file.remote.strategy.FtpChangedExclusiveReadLockStrategy - Cannot acquire read lock within 20000 millis. Will skip the file: RemoteFile[slowfile.dat]\n\n![image](https://cloud.githubusercontent.com/assets/20602818/17418992/61598c08-5a69-11e6-8d77-15e2a070f69e.png)\n\nIf i change **fastExistsCheck=false** it works fine\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/18529548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "YoshikiHigo": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/18755454", "body": "Thank you.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/18755454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "chirino": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/18866440", "body": "Tests were not properly tearing down previously created camel contexts.  It was throwing off the camel route count.  Forking the tests gives us a clean JVM to test in every time.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/18866440/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/18866455", "body": "Yeah this is the fix.  The rest of the PR is test related. I'll add comment.  \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/18866455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "sirlatrom": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/19143680", "body": "@dhirajsb If the max backoff hasn't been reached yet, what will happen? As far as I can tell, the failure to restart is reported, and no further attempt is made. Shouldn't a new attempt be scheduled?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/19143680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/19150174", "body": "I've probably just stared myself blind, but I can't seem to find the line(s) that will make another attempt. If `(backoff + backoffIncrement) <= maxBackoff`, the conditional block will be skipped and the thread executed by `restartClient()` will return without exception, no?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/19150174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/19151193", "body": "So if we get a failed message inside the handshake listener added in `doStart()`, it will call `restartClient()` and we'll get back to here with `restartBackoff` increased? What if the handshake succeeds, but connect fails with `\"400::Authenticated user id does not match the session's user id\"`? Then `client.isHandshook()` will return true, despite `lastError` actually having a value... That error is one we experience when running multiple instances subscribing to the same topics and OAuth2 sessions expiring at the same time as a health check executing that tries to use the expired OAuth2 session.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/19151193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/19151828", "body": "I'm seeing different behaviour, but it could be due to many others interfering elements such as our corporate proxy server. I'll see if I can attach a full debug log when I return to work on Monday.\n\nI have yet too understand many if the involved components, but by the CometD connect failure retries, do you mean a built-in feature in the CometD client, or some code here in `SubscriptionHelper`? I haven't seen any debug log statements from the client mentioning retries when messages to /meta/connect get unsuccessful responses...\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/19151828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/19233753", "body": "I'll try and see if I can get back to you tomorrow, Friday CEST - otherwise\nI'll be going on vacation for 2 weeks, after which I'll definitely have to\nget back to this issue.\n\nOn Fri, 30 Sep 2016 at 00:47 Dhiraj Bokde notifications@github.com wrote:\n\n> @sirlatrom https://github.com/sirlatrom did you get a chance to test\n> this and see if there are still any holes in the reconnect logic?\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> \n> Reply to this email directly, view it on GitHub\n> https://github.com/apache/camel/commit/7d97e5b5800969b74e805e66a94a6c5323bfeafc#commitcomment-19233200,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AAZ-oVAmtXeAqYJ0ZD8h_VdUpOvmpmduks5qvD_ngaJpZM4KEyvs\n> .\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/19233753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/20996447", "body": "Might be an idea to change this to Long everywhere since the value range of `replayId` is not documented...", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/20996447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/67497705", "body": "This one came back as a deserialization error when setting the Salesforce API version to 37.0.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/67497705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/67497750", "body": "This one came back as a deserialization error when setting the Salesforce API version to 37.0.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/67497750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/68104247", "body": "Is this all that is needed to set the value straight from the URI? https://github.com/apache/camel/blob/master/tooling/spi-annotations/src/main/java/org/apache/camel/spi/UriParam.java#L95\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/68104247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "Neeraj-Natu": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/19350494", "body": "This line seems out of place, it assigns a boolean value and compares the localBundleContext to null at the same time.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/19350494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "neacor1": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/19728302", "body": "Hello Claus, my apologizes if this is not the correct place to ask this, but is there any date scheduled for the release this will be apart of (which I am assuming will be 2.18.1)?", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/19728302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "JonW98": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/19934084", "body": "This change has changed the behaviour of our routes and deviates from the documentation.  Can I ask if this is what was intended?  ...this doesn't seem to match what was in the Camel-SQS documentation.\r\n\r\nThe code before was:\r\n\r\n```\r\n    private boolean shouldDelete(Exchange exchange) {\r\n        return getConfiguration().isDeleteAfterRead()\r\n                && (getConfiguration().isDeleteIfFiltered()\r\n                    || (!getConfiguration().isDeleteIfFiltered()\r\n                        && passedThroughFilter(exchange)));\r\n    }\r\n```\r\n\r\nWhich matched the documentation:\r\n\r\n**deleteAfterRead**:  Delete message from SQS after it has been read (and processed by the route).\r\n**deleteIfFiltered**:  If **false** and exchange does not make it through a Camel filter upstream in the route, then don't send DeleteMessage.\r\n\r\nWith the above code, deleteAfterRead needed to be set to \"true\" for ANY message to be deleted, filtered or not.  Then, it was up to the configuration of deleteIfFiltered - if this was set to false then as the documentation states the message would not be deleted if if didn't pass through the filter.\r\n\r\nSo, our config of:\r\ndeleteAfterRead = true (default)\r\ndeleteIfFiltered = false\r\n\r\n...gave the right outcome.  Messages that were filtered out were not deleted from SQS.\r\n\r\nWhoever, the new code commit has changed this behaviour.\r\n\r\nFirstly:\r\n\r\n`return getConfiguration().isDeleteAfterRead()\r\n                && (...filteringLogic...)\r\n`\r\n\r\n..has changed to:\r\n\r\n`        return getConfiguration().isDeleteAfterRead()\r\n                || shouldDeleteByFilter;\r\n`\r\n\r\n.. an && becoming an || which means for the filtering logic to take effect the deleteAfterRead must not be set to false.\r\n\r\nSecondly:\r\n\r\n`|| (!getConfiguration().isDeleteIfFiltered()\r\n                        && passedThroughFilter(exchange)));`\r\n\r\n..has changed to:\r\n\r\n`             ...  && getConfiguration().isDeleteIfFiltered()\r\n                && passedThroughFilter(exchange);`\r\n\r\n.. this time the negation has been removed, so the logic has now changed to not looking at whether the message was filtered out, but whether is was allowed through the filter.\r\n\r\nWith the new code in this commit, to get the same behaviour as before you now have to set deleteAfterRead to \"false\" and deletedIfFiltered to \"true\" so that messages filtered out are not deleted, and those that pass the filter are.\r\n\r\nNew config:\r\ndeleteAfterRead = false\r\ndeleteIfFiltered = true\r\n\r\nIs this what was intended?  Seems a big departure from the documentation, which might have been wrong in the first place?  If so is the documentation going to be updated?  ..or should the logic be put back how it was?\r\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/19934084/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/19934151", "body": "@oscerd  ..will have a read through that now and add comments on there - thanks!", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/19934151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/19935193", "body": "Hi @yanbasic - thanks for your reply.  @davclaus - agree.\r\n\r\n...with a couple of slight tweaks!\r\n\r\nThe old logic used the deleteAfterRead parameter as a global option and took effect whichever way the deleteIfFiltered flag was set.  I believe this matches what the documentation says and how it should work.  So, the first 4 rows should all result in no deletion of messages.\r\n\r\nAlso, it depends on your interpretation of \"filtered\".  If you view it as \"filtered IN and allowed to proceed through the exchange\" then the above table is correct, but this is not how the old code and documentation view it - it views it as \"filtered\" meaning \"filtered OUT and NOT allowed to proceed through the exchange\":\r\n\r\n**deleteIfFiltered**: If false and exchange does **not** make it through a Camel filter upstream in the route, then don't send DeleteMessage.\r\n\r\nI think, the behaviour should be:\r\n\r\n| deleteAfterRead(option) | deleteIfFiltered(option) | has filter and matched | should delete | comments |\r\n| -- | -- | -- | -- | -- |\r\n| No\t| No | No | No ||\r\n| No\t| No | Yes | No ||\r\n| No\t| Yes | No | No ||\r\n| No\t| Yes | Yes |  * No * ||\r\n| Yes | No | No | * No * | Hasn't matched the filter and won't proceed through the exchange - don't delete it - let it go back onto the SQS queue |\r\n| Yes | No | Yes | Yes | Has matched the filter, revert back to \"deleteAfterRead\" behaviour |\r\n| Yes | Yes | No | Yes | |\r\n| Yes | Yes | Yes | Yes | |\r\n\r\nI believe the above table is actually how the code used to work!!!  ..and matches the documentation!!!\r\n\r\nPlease correct me if I'm incorrect!!\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/19935193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/19936365", "body": "Hi @yanbasic, I think this is the crux of the matter.  It depends if `deleteAfterRead` should be global and/or have higher precedence when used along with `deleteIfFiltered` - it then depends how you interpret \"filtered\" - whether that passes through the filter or is filtered out and does not pass through the filter.\r\n\r\nMy view is that leaving `deleteIfFiltered` as the default value (true) then defining the behaviour of your filters is how I'd expect to see it work, which is how the old code used to also work.\r\n\r\nI'd also keep with the definition in the documentation that `deleteIfFiltered` means delete the message if it does **not** pass through the filter.\r\n\r\nEither documentation needs changing or the code :-)\r\n\r\n@davsclaus @oscerd - thoughts?\r\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/19936365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "yanbasic": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/19934461", "body": "@JonW98 I have a filter in my route when I set both deleteAfterRead and deleteIfFiltered to true, all the messages have been removed in my queue finally, so I changed the shouldDelete method behaviour, currently deleteIfFiltered will work only have a filter in the route. Here is the expect result.\r\n\r\ndeleteAfterRead(option) | deleteIfFiltered(option) | has filter and matched | should delete\r\n----------------------- | ------------------------ | ---------------------- | -------------\r\nNo | No | No | No\r\nNo | No | Yes | No\r\nNo | Yes | No | No\r\nNo | Yes | Yes | Yes\r\nYes | No | No | Yes\r\nYes | No | Yes | Yes\r\nYes | Yes | No | Yes\r\nYes | Yes | Yes | Yes", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/19934461/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/19935666", "body": "Hi @JonW98 , our question is whether the deleteAfterRead parameter should be a global option(effect deleteIfFiltered), if yes, your table is good. IMO when the two parameters are used together they should not effect each other, the deleteIfFiltered parameter should work without the deleteAfterRead. In logic of your table if the deleteAfterRead is false, the deleteIfFiltered will never work whether it is true or false, so if I want to use deleteIfFiltered, I must set deleteAfterRead to true, or keep it as the default(true also), don't you think this behavior is a bit strange?\r\n\r\nRegards", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/19935666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "nguyenhoan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/20950904", "body": "Hi @davsclaus \r\nWe are a team of researchers from Iowa State, The University of Texs at Dallas and Oregon State University, USA. We are investigating common/repeated code changes.\r\nWe have four short questions regarding the change in the image below which is part of this commit.\r\n![image](https://cloud.githubusercontent.com/assets/2257582/23106022/283e05a8-f6ad-11e6-8ce2-9d7a96a8b98b.png)\r\n\r\nQuestions:\r\n\r\nQ1- Is the change at these lines similar to any other changes (from other locations of the same commit or from other commits)? (yes, no, not sure)\r\n\r\nQ2- Can you briefly describe the change and why you made it? (for example, checking parameter before calling the method to avoid a Null Pointer Exception)\r\n\r\nQ3- Can you give it a name? (for example, Null Check)\r\n\r\nQ4- Would you like to have this change automated by a tool? (Yes, No, Already automated)\r\n\r\nThe data collected from the answers will never be associated with you or your project. Our questions are about recurring code changes from the developer community, not about personal information. All the data is merged across recurring changes from GitHub repositories. We will publish aggregated data from the trends of the whole community. \r\nWe have a long tradition of developing refactoring tools and contributing them freely to the Eclipse, Netbeans, Android Studio under their respective FLOSS licenses. For example, look at some of our recently released refactoring tools: http://refactoring.info/tools/ \r\n\r\nThank you,\r\nHoan Nguyen https://sites.google.com/site/nguyenanhhoan/\r\nMichael Hilton http://web.engr.oregonstate.edu/~hiltonm/\r\nTien Nguyen http://www.utdallas.edu/~tien.n.nguyen/\r\nDanny Dig http://eecs.oregonstate.edu/people/dig-danny\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/20950904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "jrnorth": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/21190982", "body": "Return these directly so you don't need a local variable", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/21190982/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "hqstevenson": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/21384829", "body": "This looks good to me.\r\n\r\nBTW - I replied to the email a couple of days ago saying the same thing, but it didn't wind up as a comment on the PR.  Did I do something wrong?\r\n\r\nAnyway - this looks like it should help", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/21384829/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/55939525", "body": "I really struggled with this - a boolean probably isn't the right type of switch.\n\nWhat about using values like \"strict\", \"lenient\" and \"disabled\", and the default would be lenient?  Except I'm not sure how you represent that in the UriParam annotation. \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/55939525/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/56033742", "body": "I agree - off is better than disabled.  This is done.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/56033742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/56171456", "body": "It's a boundary matcher for the \"end of input\".  It's listed in the javadocs for java.util.regex.Pattern ( https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html ), so I hope it's platform portable ;-)\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/56171456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/58208004", "body": "I shouldn't have put this class in yet.  I put it there to compare with the AbstractFeatureTest class to see if it made sense as a base class, but I'm not sure it does.  \n\nMy intention is to modify this class to become what we want for Camel.  The version I used with my customer didn't have any of the system.properties changes that are in this version.  But we should put in/take out whatever makes sense for Camel.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/58208004/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "mabroukb": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/21395945", "body": "Looks like this is the same test as before => this is a bug. \r\n\r\nShould we open a bug file ?", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/21395945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/21401877", "body": "thank guys, it has been corrected :ok_hand:", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/21401877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "lhein": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/21670200", "body": "so it is needed to set it explicitely? what happens if I want to change the runtime provider? is that possible on the fly with the same instance of the catalog?", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/21670200/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/comments/21670215", "body": "isn't that doing exactly that....setting the runtime provider? I have the feeling that the catalog API is a bit too open and confusing here. Give it one method for setting provider and version and thats it. Currently there are 5+ methods to do that which is really strange.", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/21670215/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "khaledalturkestani": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/22284223", "body": "@davsclaus - can you please comment on the reason guice support is being deprecated?", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/22284223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "kimmking": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/22464622", "body": "hi, @davsclaus \r\nI think here is a nice UUID generator:\r\nhttp://johannburkard.de/software/uuid/\r\nhttp://johannburkard.de/blog/programming/java/Java-UUID-generators-compared.html\r\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/22464622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "sarhaynes": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/22626034", "body": "Should this return \"null\" or should it return the default content type for HTTP?  According to the RFC the default would be application/octect-stream.  https://tools.ietf.org/html/rfc7231#section-3.1.1.5", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/22626034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "Kaef": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/22699042", "body": "ReflectionInjector supports auto-wiring? As I understand, it's delegating to ObjectHelper#newInstance which will try to call the no-arg constructor and fail.", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/22699042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "adioss": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/22774102", "body": "Sorry but I'm not sure to understand pb with checkstyle:\r\n* mvn clean install -Psourcecheck : no pb with my commit content / nothing more to commit (according to the changeset)\r\n* it seems that I removed empty space/line. Do you ask me to put back the previously forgotten empty space?", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/22774102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "vortexalex": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/24936779", "body": "I am using Spring Boot with Camel Spring Boot Starter and I get NullPointerException at line 121 when I start my application, after Camel context get loaded...", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/24936779/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "codecracker2014": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/apache/camel/comments/26996656", "body": "Hi @CodeSmell i'm using this policy to detect availability of a web service and stop route for some time, but before onExchangeDone called error handler moves the current message to dead letter queue. I want to avoid putting messages to DLQ for specific situation which can be handled using ThrottlingExceptionRoutePolicy. \r\nIs it possible with ThrottlingExceptionRoutePolicy not to put current message to DLQ where ThrottlingExceptionRoutePolicy needs to take action. ", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/26996656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/comments/27015502", "body": "@CodeSmell \r\nOk i can configure camel to handle on going message, but in  case of concurrent consumers of source queue all the on going exchanges are getting failed on stop of route as below. Can this be handled in ThrottlingExceptionRoutePolicy \r\n\r\n\r\n\r\nLog:\r\n`EventDrivenConsumerRoute[activemq://smsqueue -> Channel[TransactionErrorHandler:PROPAGATION_REQUIRES_NEW[Pipeline[[Channel[BeanProcessor[com.nucleus.integration.ws.server.sms.route.AfterQueueProcessor(0x50c7d3e5)]], Channel[SetHeader(CamelHttpMethod, POST)], Channel[SetHeader(Content-Type, application/json)], Channel[sendTo(http://localhost:8080/camel-hello-1.0.0/newOrder?quantity=1&orderId=dd&productName=bb)]]]]]]\r\n15:54:02.088   [Camel (neutrinoCoreIntegrationCamelContext) thread #1 - JmsConsumer[smsqueue]] WARN  o.a.c.c.j.DefaultJmsMessageListenerContainer - Rejecting received message because of the listener container having been stopped in the meantime: ActiveMQBytesMessage {commandId = 53892, responseRequired = false, messageId = ID:NB1053-30288-1516615103332-1:21:17:1:2, originalDestination = null, originalTransactionId = null, producerId = ID:NB1053-30288-1516615103332-1:21:17:1, destination = queue://smsqueue, transactionId = TX:ID:NB1053-30288-1516615103332-1:21:62, expiration = 0, timestamp = 1516616473191, arrival = 0, brokerInTime = 1516616473191, brokerOutTime = 1516616642088, correlationId = null, replyTo = null, persistent = true, type = null, priority = 4, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = org.apache.activemq.util.ByteSequence@2b248ddd, marshalledProperties = org.apache.activemq.util.ByteSequence@6ba45c21, dataStructure = null, redeliveryCounter = 0, size = 0, properties = {breadcrumbId=ID-NB1053-30286-1516615089364-0-95}, readOnlyProperties = true, readOnlyBody = true, droppable = false} ActiveMQBytesMessage{ bytesOut = null, dataOut = null, dataIn = null }\r\n`", "reactions": {"url": "https://api.github.com/repos/apache/camel/comments/27015502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}, "Tcharl": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/10409430", "body": "Hi,\nI can be wrong but it looks like you've forgot the require-capability too: Require-Capability: osgi.extender;filter:=\"(osgi.extender=pax.cdi)\",org.ops4j.pax.cdi.extension;filter:=\"(extension=pax-cdi-extension)\", org.ops4j.pax.cdi.extension;filter:=\"(extension=deltaspike-core-api)\"\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/10409430/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "aaronjwhiteside": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/20056138", "body": "This seems incorrect, you should be asking to convert the payload into a byte[], not a BytesMessage which you already created on the previous line.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20056138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20056182", "body": "This method needs to be modified to check all possible types of things that can be converted into a byte array.\nTo name a few:\nInputStream (this shouldn't be mapped to type Stream, that's incorrect)\nByteBuffer\nFile\nReader\netc..\n\nWhile you're at it you might want to fix up, the mapping of Collection to Map.. (Doesn't seem correct) and add more types that can be converted to Text, char[], char, Character, StringReader, etc.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20056182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060275", "body": "ByteBuffer is Bytes not Stream\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060276", "body": "File is Bytes not Stream.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060276/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060279", "body": "Reader is Bytes not Stream.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060289", "body": "This test doesn't test the type of JMS Message produced.. You should be asserting that a BytesMessage was produced. And that the contents of the Exchange.getIn().getBody() is a byte[].\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060293", "body": "Need to assert that a TextMessage was created, and the type of class in Exchange.getIn().getBody() is String.class.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060293/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060303", "body": "Need to assert that a BytesMessage was created, and the type of class in Exchange.getIn().getBody() is byte[].class.\n\nAlso don't write files to the working dir, use the platforms temp directory (don't hardcore it, look at the methods in File)\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060305", "body": "Need to assert that a ByteMessage was created, and the type of class in Exchange.getIn().getBody() is byte[].class.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060305/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060308", "body": "Need to assert that a TextMessage was created, and the type of class in Exchange.getIn().getBody() is String.class.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060308/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060310", "body": "Need to assert that a TextMessage was created, and the type of class in Exchange.getIn().getBody() is String.class.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060311", "body": "Need to assert that a TextMessage was created, and the type of class in Exchange.getIn().getBody() is String.class.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060283", "body": "No such JMS Message exists as Reader, not needed. Please revert this change.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060283/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060273", "body": "This isn't needed, Camel can convert a Reader into a byte[] array for you.. please remove this case statement.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20060273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "inakiabt": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/20515014", "body": "Is that `Labguages` a typo?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20515014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "fluxlife": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/20515912", "body": "Grrr. yes\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/20515912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "blommish": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/24658783", "body": "Not a compaint or so, but is there some specific reason why you would use messageCount instead of just returning getConfig().consumableUsers().size() ?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/24658783/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "shreyaspurohit": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/24773605", "body": "Yup, though both should ideally be the same, one is an assumption and another is a reality. In future if someone adds a logic to handle/unhandle exception then this logic does not need to be modified as it always signifies the real number of messages consumed, else it might creep in a bug if this logic isnt changed. Just a general practice I try to follow - fact vs assumption.  \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/24773605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "svanders": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/27365904", "body": "Oops, my IDE adds those automatically.\nFixed.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/27365904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "FingolfinTEK": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/48406996", "body": "BigDecimal, Byte, Double, Float and Long are all Numbers so no need to explicitly check them too; Timestamp is a java.util.Date so already covered\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/48406996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "brreitme": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/51019635", "body": "This used to be an inner class inside of RabbitMQConsumer. I can put it back in there, I just thought it was getting too large. \n\nNote this now implements com.rabbitmq.client.Consumer instead of com.rabbitmq.client.DefaultConsumer.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/51019635/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/51020289", "body": "This gets called if the channel is closed for any reason and allows it to quickly get reconnected without starting an additional thread.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/51020289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/51020755", "body": "This was moved from RabbitMQConsumer\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/51020755/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/51021258", "body": "We dont want all the consumers to disconnect at the same and all start a new thread.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/51021258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/51021608", "body": "This used to leak threads... openConnection would leave the old consumers running and start new ones. Now it just tries to reconnect the existing consumers.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/51021608/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/51021983", "body": "This used the same exchange and queue as another test, but it used different settings so declaring the exchange and queue would randomly fail when running all the tests.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/51021983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "anistor": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/55819420", "body": "\"Consumer not supported for...\"\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/55819420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "oalles": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/56803201", "body": "Claus,\n\nGood points. I will change it asap.\nThanks for the feedback.\n\nOmar\nEl 21 mar. 2016 9:23, \"Claus Ibsen\" notifications@github.com escribi\u00f3:\n\n> In\n> components/camel-cm/src/main/java/org/apache/camel/component/cm/exceptions/MessagingException.java\n> https://github.com/apache/camel/pull/911#discussion_r56790775:\n> \n> > - \\* this work for additional information regarding copyright ownership.\n> > - \\* The ASF licenses this file to You under the Apache License, Version 2.0\n> > - \\* (the \"License\"); you may not use this file except in compliance with\n> > - \\* the License.  You may obtain a copy of the License at\n> > - *\n> > - \\*      http://www.apache.org/licenses/LICENSE-2.0\n> > - *\n> > - \\* Unless required by applicable law or agreed to in writing, software\n> > - \\* distributed under the License is distributed on an \"AS IS\" BASIS,\n> > - \\* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n> > - \\* See the License for the specific language governing permissions and\n> > - \\* limitations under the License.\n> > - */\n> >   +package org.apache.camel.component.cm.exceptions;\n> >   +\n> >   +public class MessagingException extends CMDirectException {\n> \n> Do not create your own exceptions for common errors such as invalid / url\n> etc. Use the exceptions from camel itself.\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/apache/camel/pull/911/files/6fb1026053a138b896c7a49b64ebe19558eb8a20#r56790775\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/56803201/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "arnaud-deprez": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/60620620", "body": "Sorry I didn't pay attention, Intellij did it in my back, I need to update my IDEA config. I'll fix that and use the sourcecheck profile\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/60620620/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/60620661", "body": "ok\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/60620661/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "urbanenomad": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/61555094", "body": "Ok, I apologize for not being thorough with the testing.  I thought a\nsimple fix may fix this problem but I was finally able to fix the issue by\nnot changing the lower level code but rather directly address the multiple\ncalls to the addToResult call.  I have run the unit test and it passes\nnow.  Plus I have verified the code does properly work now.  I will apply\nfor another pull request.\n\nthanks\n\nwon\n\nOn Wed, Apr 27, 2016 at 4:14 AM, Claus Ibsen notifications@github.com\nwrote:\n\n> In\n> components/camel-aws/src/main/java/org/apache/camel/component/aws/common/AwsExchangeUtil.java\n> https://github.com/apache/camel/pull/961#discussion_r61240594:\n> \n> > @@ -26,9 +26,7 @@ private AwsExchangeUtil() {\n> > \n> > ```\n> >  public static Message getMessageForResponse(final Exchange exchange) {\n> >      if (exchange.getPattern().isOutCapable()) {\n> > ```\n> > -            Message out = exchange.getOut();\n> > -            out.copyFrom(exchange.getIn());\n> > -            return out;\n> > -            return exchange.getOut();\n> >        }\n> >        return exchange.getIn();\n> >    }\n> \n> You should do\n> \n> if (exchange.hasOut()) { return exchange.getOut(); } else { return exchange.getIn(); }\n> \n> \u2014\n> You are receiving this because you modified the open/close state.\n> Reply to this email directly or view it on GitHub\n> https://github.com/apache/camel/pull/961/files/f9c65d0c621206a316ea81a9b4e3164d009dbe1c#r61240594\n\n## \n\n*(at)urbanenomad.com\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/61555094/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "jmandawg": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/63883421", "body": "Ok i removed log and now throw InvalidParameterException with message\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/63883421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/63883987", "body": "ok i removed the log and throw an invalidparameterexception\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/63883987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/63884864", "body": "I had to add the new code otherwise this unit test fails when setting the correct content type.  (All request default to APPLICATION_WWW_FORM if content-type is not set).  \n\nWithout the new code, the headers (id, 89531) do not get passed through from the request.  \nYou can test this in the master branch by just changing this test to use the correct content-type, it will fail.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/63884864/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "trohovsky": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/61438670", "body": "\"dynamic\".equals(jobName)? But, what is wrong on setting initial jobName in URI path? AFAIK this concept is not used anywhare in Camel, so please remove the check for \"dynamic\".\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/61438670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/61443653", "body": "This check is rednudant, `this.job` is never null.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/61443653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/61443938", "body": "this is redundant, `CamelContextHelper.mandatoryLookup` will trow `NoSuchBeanException` if it cannot find the exception, please remove it\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/61443938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/61444796", "body": "public static final String JOB_NAME = \"CamelSpringBoot.jobName\";\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/61444796/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/61444944", "body": "public  static final String JOB_NAME = \"CamelSpringBatch.jobName\";\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/61444944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/61445013", "body": "please remove\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/61445013/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/61445312", "body": "This check is redundant, `CamelContextHelper.mandatoryLookup` will throw `NoSuchBeanException` if it cannot find the bean.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/61445312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/61446066", "body": "please remove the ceck for \"dynamic\", there is nothing wrong on having a valid initial job configured. And AFAIK this concept is not used anywhere in Camel. Btw. !\"dynamic\".equals(jobName) is better.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/61446066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64890260", "body": "redundant blank line\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64890260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64890269", "body": "redundant blank line\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64890269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64890279", "body": "redundant blank line\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64890279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64890284", "body": "redundant blank line\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64890284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64890298", "body": "redundant blank line\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64890298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64890338", "body": "redundant blank line\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64890338/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64890522", "body": "redundant comment, the test name is enough descriptive (btw. missing space after //)\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64890522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64890530", "body": "redundant comment, the test name is enough descriptive\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64890530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64890539", "body": "redundant comment, the test name is enough descriptive\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/64890539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "jlpedrosa": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/61439728", "body": "Hi as jobName is the path and can't be made null beacause it's mandatory, \"dynamic\" keyword is used to omit the lookup of the Job and allow dynamic lookup based on message.  Due to camel URI schema it's IMPOSSIBLe as you said in the ticket to make it null, so I need a keyword  to know when it should be ignored. please check the ticket and your answer.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/61439728/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/61445259", "body": "No it's not redundant. if the jobName is dynamic, then the job will be set to null by the Endpoint.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/61445259/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/61445976", "body": "Excelent! then I'l remove that  block. \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/61445976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/61446029", "body": "Oki\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/61446029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/61446068", "body": "ok..... \n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/61446068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/61446813", "body": "of course there's something wrong, it means that you need to know beforehand a existing job... look at the line of code blow the if, if the job is dynamic, then it would try to find a job (therefore not dynamic). Fixed the equals.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/61446813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "JustinKyleHixson": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/61642093", "body": "Shouldn't this test be named `dynamicJobFailsIfHeaderWithInvalidJobName` with the word `Fails` replacing the word `Works` ?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/61642093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "gijsbert802": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/67600274", "body": "What if the session is closed remotely before the producer is able to close it? Won't closeLatch be uninitialised?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/67600274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/67600299", "body": "Maybe rename this to responseLatch (or something)? To avoid confusion about what the latches are used for.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/67600299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "dpocock": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/70110411", "body": "does this need to be here?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/70110411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/70110464", "body": "blank lines could be removed\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/70110464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/70110571", "body": "is this blank line consistent with the rest of the spacing in the document?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/70110571/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/71152454", "body": "@nikvaessen is there a reason you changed the order of these variables?  Could you put these variables back in the same order so the diff is easier to review?  Thanks for inserting the comments about each of them.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/71152454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/71152600", "body": "@nikvaessen please mention TLS in the comment too\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/71152600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/71153301", "body": "@nikvaessen is this default value consistent with the existing behavior of the component?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/71153301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/71153653", "body": "@nikvaessen why did you add \"this\" here?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/71153653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/71153726", "body": "@nikvaessen why did you add \"this\" here?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/71153726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/71153998", "body": "@nikvaessen you use this expression in several places, could you write a helper function that returns a boolean value to encapsulate this expression?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/71153998/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/71155519", "body": "@nikvaessen does this absolutely need to become public?  @davsclaus is there any other pattern you would prefer to see used instead of making this method public?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/71155519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/71155724", "body": "@nikvaessen many of these getter methods have been re-ordered, this makes the diff much longer than necessary, could you make another commit putting these methods back in the original order?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/71155724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/71156295", "body": "this appears to be a rename from SipSubscriber.java, its a shame Github doesn't show it more concisely though\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/71156295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/71156507", "body": "@nikvaessen what is the TODO on this line?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/71156507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/71156877", "body": "@nikvaessen the original name, `sstate` appears to be an abbreviation of Subscription State, not a typo.  Could you rename this variable back to `sstate`?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/71156877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/71157249", "body": "@nikvaessen are you sure it is always `MESSAGE` at this point?  Maybe check the request method == `MESSAGE` and log an error if something else comes in.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/71157249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/71158055", "body": "@nikvaessen could you allow other content types too?  They can be accepted by Camel as binary data (byte[]), just make sure you store the content type name in the header `Exchange.CONTENT_TYPE`\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/71158055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/71159482", "body": "@nikvaessen could you store whole SIP requests in this Queue, rather than just the String body?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/71159482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/71159701", "body": "@nikvaessen instead of just returning the message body as a string, could you create an Exchange object and populate the \"in\" message body and various headers?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/71159701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/71160337", "body": "@nikvaessen it looks like you moved the `{` to the next line, please use checkstyle to catch things like this, it is described here:\nhttp://camel.apache.org/building.html\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/71160337/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/71160660", "body": "@nikvaessen this should just be `from`, not `fromBranch`\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/71160660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/71160942", "body": "@nikvaessen as it is SIP \"SIMPLE\", maybe this method should be called `processSimpleMessage` to make it more obvious what it is\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/71160942/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "drsquidop": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/71556566", "body": "That is done\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/71556566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "hutchkintoot": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/74729491", "body": "Sorry, will fix!\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/74729491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "pcan": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/74703966", "body": "Maybe a `try` - `finally` block is more robust here? Just in case some strange exception comes out from `doHandleDelivery()`... I suggest the following snippet:\n\n``` Java\ntry {\n    doHandleDelivery(consumerTag, envelope, properties, body);\n} finally {\n    if (!consumer.getEndpoint().isAutoAck()) {\n        lock.release();\n    }\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/74703966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/74704013", "body": "same thing here... but it can go in the outer `finally` block, just after `catch (InterruptedException e1)`\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/74704013/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "undso": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/79773721", "body": "Good point. Thank you for the reminder. Check is added.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/79773721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "thuri": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/81969713", "body": "Not quite sure about it. The persistedCache is used only in the recoveryMode. As far as i've seen entries are added to the persistedCache only in the remove method after the entry has been removed from cache. So i think we should only look into the cache.\n\nAlso the existing getKeys method does only look into the cache too\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/81969713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/82591763", "body": "Can I do something more to help with integrating this pull request ?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/82591763/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}]}, "evmin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/87689102", "body": "Thank you. Done.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/87689102/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/87689103", "body": "Done for both params.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/87689103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/87689104", "body": "Done.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/87689104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/87689357", "body": "Gladly. What would the component to demonstrate a good example of such doco?\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/87689357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/87689496", "body": "Thank you. Done.\n", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/87689496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}, "ecausarano": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": [{"url": "https://api.github.com/repos/apache/camel/pulls/comments/89349542", "body": "Without it \"mvn install\" from within the component module doesn't create the sources jar (perhaps I'm doing it wrong?)", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/89349542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/apache/camel/pulls/comments/89349828", "body": "Ah ok, I get it...", "reactions": {"url": "https://api.github.com/repos/apache/camel/pulls/comments/89349828/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}]}}}}