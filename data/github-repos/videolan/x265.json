{"_default": {"1": {"M-Divya": {"issues": [], "commits": [{"url": "https://api.github.com/repos/videolan/x265/commits/9eec9cc1f0f91e8d817c6723df4fff05f44fa789", "message": "analysis: avoid copying lowres vbv data when vbv is disabled"}, {"url": "https://api.github.com/repos/videolan/x265/commits/33ca535e7f01e92c1cc74fb34235ca23fecd6a44", "message": "analysis: avoid creating analysis file when useanalysisFile option is disabled"}, {"url": "https://api.github.com/repos/videolan/x265/commits/7df52d4d145f61f7109da6b21a131488404d9342", "message": "api: move csv and dither functions into api structure\n\ncsv is now moved into libx265. So, we can remove x265-extras.h"}, {"url": "https://api.github.com/repos/videolan/x265/commits/905b5131ac29fed429a3b9eee1c3d86061ba19c1", "message": "Fix dts calculation when disabling lookahead in analysis load mode\n\n# HG changeset patch\n# User Divya Manivannan <divya@multicorewareinc.com>\n# Date 1506315677 -19800\n#      Mon Sep 25 10:31:17 2017 +0530\n# Node ID 623fd118479831744b7b114bdce3f0026c006f68\n# Parent  30998ebc3a3b7503f62e9ed520d7c67acca92b33\nFix dts calculation when disabling lookahead in analysis load mode"}, {"url": "https://api.github.com/repos/videolan/x265/commits/e8a6c75979f4f446e9d338d3c06972cb5706aab6", "message": "Add param option for disabling lookahead\n\nFixed crash in analysis load mode also in this patch."}, {"url": "https://api.github.com/repos/videolan/x265/commits/0d5094d913bf40b61cadd070ca25c1b95a447833", "message": "Skip the lookahead when analysis reuse mode is load and analysis file writing\nis disabled and scale factor is enabled.\n\nAll the lookahead data are shared from analysis save mode to load mode, so it is\nskipped to improve performance. All the lookahead costs are approximated based\non scalefactor."}, {"url": "https://api.github.com/repos/videolan/x265/commits/d5f6109733d05c50ce6fc8143f09fbb1c733d8a2", "message": "Add force-flush param option\n\nThis option will force the encoder to flush all frames without waiting for\nall input pictures to arrive.\n\n# HG changeset patch\n# User Divya Manivannan <divya@multicorewareinc.com>\n# Date 1499954857 -19800\n#      Thu Jul 13 19:37:37 2017 +0530\n# Node ID a80bf309ef01171a7982d0fe7dfb12ce1fb9d10f\n# Parent  3f6841d271e36dc324936f09846d1f2cb77c63e5\nAdd force-flush param option\n\nThis option will force the encoder to flush all frames without waiting for\nall input pictures to arrive."}, {"url": "https://api.github.com/repos/videolan/x265/commits/1c83e0cfae6b1d2bca411c8e6def2cbdc13f9091", "message": "Fix build failure because of header file"}, {"url": "https://api.github.com/repos/videolan/x265/commits/a053e76f2cf4884bcee37bda3fb042aef2c307f4", "message": "Move csv file pointer to param\n\n# HG changeset patch\n# User Divya Manivannan <divya@multicorewareinc.com>\n# Date 1498719699 -19800\n#      Thu Jun 29 12:31:39 2017 +0530\n# Node ID 5f9170dbf90ec865dc49cac8423d86f941b998e2\n# Parent  67dcf6e79090acb619c5ac499ef5da0b73c3a48b\nMove csv file pointer to param"}, {"url": "https://api.github.com/repos/videolan/x265/commits/28bd8c75ed9d970c20cb55523c75a3dc55a5b025", "message": "Fix slicetype mismatch between analysis save and load modes"}, {"url": "https://api.github.com/repos/videolan/x265/commits/6681d3313dd6202a1345e350b8e4f8ab4903f4fb", "message": "Add csv feature into libx265"}, {"url": "https://api.github.com/repos/videolan/x265/commits/c180181e4573a02e5cffe85d973999ce4c7b8ed6", "message": "width and height padding"}, {"url": "https://api.github.com/repos/videolan/x265/commits/3daed96a7d8f409c8e30e1226122ab4935561173", "message": "pps: remove last slice qp from pps qp calculation"}, {"url": "https://api.github.com/repos/videolan/x265/commits/28dd2a796b09a5541d3bed092592fc76adb488a8", "message": "param: remove filenames from info"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "pittalamahesh": {"issues": [], "commits": [{"url": "https://api.github.com/repos/videolan/x265/commits/8c3afc1c8218cfa2896bc97140822ed5a1c3882f", "message": "Install symbol files in MinGW\n\nIn debug and RelWithDebInfo configuration, .pdb files are installed."}, {"url": "https://api.github.com/repos/videolan/x265/commits/164015e2ada573c05fad797064e0325f0f565a63", "message": "cross compile visual studio builds from msys bash shell\n\nx265 already supports native visual studio builds but if some one wants to\nintegrate visual studio builds to the ffmpeg, they can generate from MinGw.\nHere, it sets all required environment variables.\n\nBuild procedure:\nFor 32 bit - launch msys bash shell from 'visual studio command prompt'\n             and run make-Makefiles.sh\n\nFor 64 bit - launch 'visual studio command prompt' and run '..\\vcvarsall.bat amd64 | x86_amd64 | x86_arm | amd64_x86'\n             and then launch msys bash shell and run ./make-Makefiles-64bit.sh"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "kavithasampath": {"issues": [], "commits": [{"url": "https://api.github.com/repos/videolan/x265/commits/8661a601814442dafe219fb89dfb594de665322a", "message": "Add CLI option to enable or disable picture copy to internal frame buffer"}, {"url": "https://api.github.com/repos/videolan/x265/commits/b2682c34ff96ff0ba06d80addac94d9d489ab888", "message": "Introduce refine-intra level 3"}, {"url": "https://api.github.com/repos/videolan/x265/commits/23106f104a7fd552a2a41a3ee8a2281d8a61b4ab", "message": "test: modify test file to support renamed options"}, {"url": "https://api.github.com/repos/videolan/x265/commits/7ef583b24aa1c703811422725dbc4b8e9c821c65", "message": "rename options related to analysis-mode, improve docs"}, {"url": "https://api.github.com/repos/videolan/x265/commits/d3d914a9e5c4480a303dd39ca5f3b0c7472acb25", "message": "add param option to specify file read/write of analysis data"}, {"url": "https://api.github.com/repos/videolan/x265/commits/0e151b0850520d828e76416768d67c4e3958cbed", "message": "remove global declarations and initialization function"}, {"url": "https://api.github.com/repos/videolan/x265/commits/8e491e6bc5a61f9c1c949138d2da6d37762f6ad4", "message": "replace g_maxSlices with maxSlices of param"}, {"url": "https://api.github.com/repos/videolan/x265/commits/49c1dd54e0d5e5331e8390c17b96858352a65f1c", "message": "use param to replace MACRO NUM_4x4_PARTITIONS"}, {"url": "https://api.github.com/repos/videolan/x265/commits/69fb2012ddcf868970261b45f192e6291a37a2a5", "message": "replace g_unitSizeDepth with param member"}, {"url": "https://api.github.com/repos/videolan/x265/commits/3e7b30b35267c4b4c9759ee9bfe74c9b5aaad541", "message": "add maxCUDepth to param to replace global g_maxCUDepth"}, {"url": "https://api.github.com/repos/videolan/x265/commits/5d6abba1f8950e3a3bb0f5aa1f42f544a59f9dc8", "message": "add maxLog2CUSize to param and use in place of g_maxLog2CUSize"}, {"url": "https://api.github.com/repos/videolan/x265/commits/77629b6e848d85bed282d669b0c5ef5115258169", "message": "replace global g_maxCUSize with param->maxCUSize"}, {"url": "https://api.github.com/repos/videolan/x265/commits/27a2711d625e650a2e482f20889f1a9be1b3d120", "message": "fix bugs in free up of analysis data"}, {"url": "https://api.github.com/repos/videolan/x265/commits/8fc00d980a859797e74d67f6e1df8c1b26f311f1", "message": "Reuse analysis info of low resolution for full resolution encoding.\n\nNew CLI option --scale-factor is added. This option should be coupled\nwith analysis-mode, --refine-level 10. It specifies the factor\nby which input video of save mode should be scaled down.\nCurrently only scale-factor 2 is supported."}, {"url": "https://api.github.com/repos/videolan/x265/commits/206d114c834d9b82751396bafae2c499ac2ae9b2", "message": "multi-level refinement: fix typo and missing space"}, {"url": "https://api.github.com/repos/videolan/x265/commits/cee6564b425d897689759df0a2e11200ff1f72b0", "message": "regression: include test for refine levels"}, {"url": "https://api.github.com/repos/videolan/x265/commits/14720c238b0e0840ed68fc1a7b3e33dabdf2418b", "message": "multi-level: increase maximum level from 5 to 10"}, {"url": "https://api.github.com/repos/videolan/x265/commits/fb20957627308bd7ab852a1e24bf558e80e83ff1", "message": "multi-level refinement: use level 1 to store/reuse frame level lookahead data"}, {"url": "https://api.github.com/repos/videolan/x265/commits/dc39f0186027332aa164127064e1b0a1c0043104", "message": "multi-level refinement: level 2 support\n\nLevel 2 stores/reuses lookahead info along with basic CU analysis info such\nas CU depth, CU mode."}, {"url": "https://api.github.com/repos/videolan/x265/commits/de70ef46b8c2f0ea1ce33abb8c3f3a339ca07752", "message": "multi-level refinement: support for level 3, 4\n\nLevel 3 stores and reuses lookahead info, weights, CU analysis info including\npartSize, mergeflag(exclusively for this level). Level 4 currently performs\nthe same level of refinement as level 3."}, {"url": "https://api.github.com/repos/videolan/x265/commits/b2e93763103bdb754a891b615af9b3b169d3d5a0", "message": "cli: add option to support multiple level of analysis mode refinement\n\n--refine-level option should be paired with --analysis-mode save/load"}, {"url": "https://api.github.com/repos/videolan/x265/commits/23eb03f1b1fd4e4abcbda9243742daef043ea439", "message": "analysis-mode: make weights as part of x265_analysis\n\nanalysis_inter_data structure holds CU level information. It is relevant to make\nweights member of x265_analysis_data structure."}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "mont3z": {"issues": [], "commits": [{"url": "https://api.github.com/repos/videolan/x265/commits/c991f71671e3eb57b1cfbf89f1892a1ddeade24f", "message": "Implementation of low-pass subband dct approximation."}], "pull_requests": [{"url": "https://api.github.com/repos/videolan/x265/pulls/3", "title": "Implementation of lowpass subband dct approximation with new param --lowpass-dct", "body": "Hi this implementation allows one to use lowpass dct approximation.\r\nIt reduces encoding time in approximately 10%.\r\nA new parameter was added: lowpass-dct. It allows one to select lowpass subband dct approximation instead of the default dct implementation. Compression loss is minimal in qp > 27, specially for high resolution streams. ", "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/videolan/x265/issues/comments/336368245", "body": "Thx for your reply. I'll follow the procedures for a proper submission. \r\nI did the performance tests using a x86 CPU with assembler enabled. \r\n\r\nThe encoded file is still 100% compatible with HEVC standards. The lowpass DCT gives results very similar to the standard DCT. However the DCT coefficient matrix is truncated by the lower order DCT size. So a 16x16 block after transformation will generate a 16x16 coeff but only values on the 8x8 uppper-left submatrix will be different than 0. This doesn't cause much problems in smooth blocks and if qp is large enough.", "reactions": {"url": "https://api.github.com/repos/videolan/x265/issues/comments/336368245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/videolan/x265/issues/comments/336680235", "body": "Hi Ximming,\n\nthanks for your help. You're right. They reconstruct frames don't match.\nSo, this modification probably doesn't comply with HEVC standard.\n\nThis approximated transformation was developed a long time ago and several\narticles discuss about it. Please, see below some reference links:\n\nCheck formula (2.29) - low-pass truncated approximation of the subband\ncoefficients.\nhttp://service.scs.carleton.ca/sites/default/files/thesis_repository/James_McAvoy_MCS_17May13.pdf\n\nhttps://www2.spsc.tugraz.at/people/franklyn/ICASSP97/pdf/author/ic972005.pdf\n\nIt's likely that I might have done something wrong. Thanks again. I\nunderstand that at this moment this is not ready for submission.\n\nMontez.\n\n\nOn Sat, Oct 14, 2017 at 7:41 AM, Ximing Cheng <notifications@github.com>\nwrote:\n\n> The lowpass DCT changed the DCT procedure (Give more weight on the\n> coefficients close to DC coefficient from your description), which means\n> the iDCT procedure should also be changed along with the lowpass DCT. So\n> maybe this is not an encoder only optimization scheme as iDCT procedure\n> used in HEVC decoder cannot be changed as HEVC spec is finalized in 2013.\n> You can enable your modification on x265 and use x265 to generate the\n> reconstruct YUV frames(add cmd \"--recon rec.yuv\"), and then input your\n> output bitstream to HM decoder to get a output decoded YUV frames, then use\n> MD5 checksum tools or other YUV compare tools to check whether the\n> reconstruct YUV is the same as the output decoded YUV. If the two YUV are\n> not the same, maybe this optimization is not compatible with standard HEVC\n> spec.\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/videolan/x265/pull/3#issuecomment-336639169>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/ASukhf2-n5TJC8hk5eAvOcJMYYyKXdFEks5ssMgzgaJpZM4P3_Hi>\n> .\n>\n", "reactions": {"url": "https://api.github.com/repos/videolan/x265/issues/comments/336680235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/videolan/x265/issues/comments/336722954", "body": "Hi Ximming,\n\nI performed some more tests and reconstructed frames MD5 checksum match the\ndecoded file MD5 checksum when using HM decoder. Previously I've used\nffmpeg for decoding and it seems that it doesn't decode the last frame,\nwhich was causing a difference.\n\nThanks,\nMontez\n\n\n\nOn Sat, Oct 14, 2017 at 6:53 PM, Mont3z Claros <mont3z.claro5@gmail.com>\nwrote:\n\n> Hi Ximming,\n>\n> thanks for your help. You're right. They reconstruct frames don't match.\n> So, this modification probably doesn't comply with HEVC standard.\n>\n> This approximated transformation was developed a long time ago and several\n> articles discuss about it. Please, see below some reference links:\n>\n> Check formula (2.29) - low-pass truncated approximation of the subband\n> coefficients.\n> http://service.scs.carleton.ca/sites/default/files/thesis_\n> repository/James_McAvoy_MCS_17May13.pdf\n>\n> https://www2.spsc.tugraz.at/people/franklyn/ICASSP97/pdf/\n> author/ic972005.pdf\n>\n> It's likely that I might have done something wrong. Thanks again. I\n> understand that at this moment this is not ready for submission.\n>\n> Montez.\n>\n>\n> On Sat, Oct 14, 2017 at 7:41 AM, Ximing Cheng <notifications@github.com>\n> wrote:\n>\n>> The lowpass DCT changed the DCT procedure (Give more weight on the\n>> coefficients close to DC coefficient from your description), which means\n>> the iDCT procedure should also be changed along with the lowpass DCT. So\n>> maybe this is not an encoder only optimization scheme as iDCT procedure\n>> used in HEVC decoder cannot be changed as HEVC spec is finalized in 2013.\n>> You can enable your modification on x265 and use x265 to generate the\n>> reconstruct YUV frames(add cmd \"--recon rec.yuv\"), and then input your\n>> output bitstream to HM decoder to get a output decoded YUV frames, then use\n>> MD5 checksum tools or other YUV compare tools to check whether the\n>> reconstruct YUV is the same as the output decoded YUV. If the two YUV are\n>> not the same, maybe this optimization is not compatible with standard HEVC\n>> spec.\n>>\n>> \u2014\n>> You are receiving this because you authored the thread.\n>> Reply to this email directly, view it on GitHub\n>> <https://github.com/videolan/x265/pull/3#issuecomment-336639169>, or mute\n>> the thread\n>> <https://github.com/notifications/unsubscribe-auth/ASukhf2-n5TJC8hk5eAvOcJMYYyKXdFEks5ssMgzgaJpZM4P3_Hi>\n>> .\n>>\n>\n>\n", "reactions": {"url": "https://api.github.com/repos/videolan/x265/issues/comments/336722954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [], "review_comments": []}, "SeanMcG": {"issues": [], "commits": [{"url": "https://api.github.com/repos/videolan/x265/commits/8b9ea1e58f4733efc904aab3389e196fe63b13b4", "message": "export x265_encoder_ctu_info() in the Windows DLL"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "XimingCheng": {"issues": [], "commits": [{"url": "https://api.github.com/repos/videolan/x265/commits/545ec1691d9381e85fb47a35ee3d0d640799fcb0", "message": "intra: skip RD analysis when sum of sub CUsplitcost bigger than non-split cost"}, {"url": "https://api.github.com/repos/videolan/x265/commits/10792cf2a3afa1ca94e2458f8d8556bc51cd92e0", "message": "sao: remove duplicate calculation on BO cost"}], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/videolan/x265/issues/comments/336355208", "body": "You changed the DCT procedure in x265. I want to know whether this change will get mismatch in encoder reconstruct picture and decoder output picture.\r\nAs normal DCT procedure is defined by HEVC standard and x265 must be compatible with standard HEVC spec.\r\n\r\nBesides, you should sent your modification in a HG patch with an email to x265-devel@videolan.org, you can ref more information at https://bitbucket.org/multicoreware/x265/wiki/Contribute.", "reactions": {"url": "https://api.github.com/repos/videolan/x265/issues/comments/336355208/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/videolan/x265/issues/comments/336723626", "body": "OK, now you can send your patch to x265-devel@videolan.org, and MCW will test and review your patch.", "reactions": {"url": "https://api.github.com/repos/videolan/x265/issues/comments/336723626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "commit_comments": [{"url": "https://api.github.com/repos/videolan/x265/comments/17646878", "body": "My fault, sorry!!\n", "reactions": {"url": "https://api.github.com/repos/videolan/x265/comments/17646878/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "CONTRIBUTOR"}], "review_comments": []}, "Jayashri12": {"issues": [], "commits": [{"url": "https://api.github.com/repos/videolan/x265/commits/6a1afd00794f46b0b89917b8fd4b2216960c7530", "message": "avx2: Remove redundant instruction in SEA integral vertical functions"}, {"url": "https://api.github.com/repos/videolan/x265/commits/bac67044a1d63adf86f6331f8c16fea7d67a91ca", "message": "Testbench: Check correctness of SEA integral horizontal functions for all possible strides"}, {"url": "https://api.github.com/repos/videolan/x265/commits/c4c49991d0494ae7c3291c520249dd38949f6a33", "message": "SEA motion search: Enable asm primitives for integralh functions"}, {"url": "https://api.github.com/repos/videolan/x265/commits/5948deed3c55236b2f70e871e331c602d26cf39c", "message": "avx2: 'integral32h' asm code -> 1.07x faster than 'C' version\n\n    integral_init32h  1.07x    1142.99         1218.1"}, {"url": "https://api.github.com/repos/videolan/x265/commits/42b1ffe3544b533ebbaa794e1897434e0f4781a6", "message": "avx2: 'integral24h' asm code -> 1.40x faster than 'C' version\n\n    integral_init24h  1.40x    1155.58         1614.98"}, {"url": "https://api.github.com/repos/videolan/x265/commits/4be6ac69ba7ef8fef2bc06420e5355760b0741c2", "message": "avx2: 'integral16h' asm code -> 2.25x faster than 'C' version\n\n    BIT_DEPTH = 8     : integral_init16h  2.25x    816.07          1837.95\n    BIT_DEPTH = 10|12 : integral_init16h  1.25x    1489.40         1856.91"}, {"url": "https://api.github.com/repos/videolan/x265/commits/25d96b1b8aef26acbe1c7f3d9a665f77ce387fd0", "message": "avx2: 'integral12h' asm code -> 2.42x faster than 'C' version\n\n    BIT_DEPTH = 8     : integral_init12h  2.42x    807.20          1950.56\n    BIT_DEPTH = 10|12 : integral_init12h  1.55x    1260.02         1958.27"}, {"url": "https://api.github.com/repos/videolan/x265/commits/3591bc46aa0e2670c1c7bac1fe367336137dbc3d", "message": "avx2: 'integral8h' asm code -> 3.69x faster than 'C' version\n\n    BIT_DEPTH = 8     : integral_init8h  3.69x    547.65          2020.36\n    BIT_DEPTH = 10|12 : integral_init8h  2.34x    868.53          2035.82"}, {"url": "https://api.github.com/repos/videolan/x265/commits/b616e5a47d475d23b8d85a35a904f2118839c516", "message": "avx2: 'integral4h' HIGH_BIT_DEPTH asm code -> 5.37x faster than 'C' version\n\n    integral_init4h  5.37x    457.68          2456.91"}, {"url": "https://api.github.com/repos/videolan/x265/commits/2238df48980c0b90fa60bebf2b8010675b761f75", "message": "avx2: 'integral4h' asm code -> 6.01x faster than 'C' version\n\n    integral_init4h  6.01x    353.40          2122.37"}, {"url": "https://api.github.com/repos/videolan/x265/commits/c5884d3c89f9a6223452a20273377b1d937fe6d8", "message": "avx2:'integral32v' asm code-> 7.93x faster than 'C' version\n\n    integral_init32v  7.93x    191.18          1516.95"}, {"url": "https://api.github.com/repos/videolan/x265/commits/96315c1c2dd39d737665cbd0d65cb4befd0c5016", "message": "avx2:'integral24v' asm code-> 7.30x faster than 'C' version\n\n    integral_init24v  7.30x    207.58          1515.26"}, {"url": "https://api.github.com/repos/videolan/x265/commits/9d49244600ccd8319e42ef648563adc92942ba8b", "message": "avx2: 'integral16v' asm code -> 7.25x faster than 'C' version\n\n    integral_init16v  7.25x    203.12          1472.09"}], "pull_requests": [], "issue_comments": [], "commit_comments": [], "review_comments": []}, "bjacquin": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [{"url": "https://api.github.com/repos/videolan/x265/issues/comments/147192171", "body": "Pull request made upstream in https://bitbucket.org/multicoreware/x265/pull-requests/21/build-disable-march-selection-from\n", "reactions": {"url": "https://api.github.com/repos/videolan/x265/issues/comments/147192171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "commit_comments": [], "review_comments": []}, "Warblefly": {"issues": [], "commits": [], "pull_requests": [], "issue_comments": [], "commit_comments": [{"url": "https://api.github.com/repos/videolan/x265/comments/12977997", "body": "On compiling libx265 followed by FFmpeg, the configure tests in FFmpeg show the new `bool` for `bScenecut` in x265.h to be an \"unknown type name\". Adding `<stdbool.h>` to the headers fixes this for me.\n\nEnvironment: cross-compiling using mingw32-w64-x86_64-gcc version 5.2.0 with mingw-w64 version 4.0.4\n\n``` diff\n--- source/x265.h.orig  2015-08-31 14:39:07.197126527 +0000\n+++ source/x265.h       2015-08-31 14:39:26.953126527 +0000\n@@ -25,6 +25,7 @@\n #define X265_H\n\n #include <stdint.h>\n+#include <stdbool.h>\n #include \"x265_config.h\"\n\n #ifdef __cplusplus\n```\n", "reactions": {"url": "https://api.github.com/repos/videolan/x265/comments/12977997/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "author_association": "NONE"}], "review_comments": []}}}}