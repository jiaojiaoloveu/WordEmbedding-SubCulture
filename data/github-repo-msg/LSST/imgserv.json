{"_default": {"1": {"issues": [{"url": "https://api.github.com/repos/lsst/dax_imgserv/issues/34", "repository_url": "https://api.github.com/repos/lsst/dax_imgserv", "labels_url": "https://api.github.com/repos/lsst/dax_imgserv/issues/34/labels{/name}", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/issues/34/comments", "events_url": "https://api.github.com/repos/lsst/dax_imgserv/issues/34/events", "html_url": "https://github.com/lsst/dax_imgserv/pull/34", "id": 286149812, "number": 34, "title": "DM-10765: Replace existing WCS classes with SkyWcs", "user": {"login": "r-owen", "id": 874176, "avatar_url": "https://avatars0.githubusercontent.com/u/874176?v=4", "gravatar_id": "", "url": "https://api.github.com/users/r-owen", "html_url": "https://github.com/r-owen", "followers_url": "https://api.github.com/users/r-owen/followers", "following_url": "https://api.github.com/users/r-owen/following{/other_user}", "gists_url": "https://api.github.com/users/r-owen/gists{/gist_id}", "starred_url": "https://api.github.com/users/r-owen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/r-owen/subscriptions", "organizations_url": "https://api.github.com/users/r-owen/orgs", "repos_url": "https://api.github.com/users/r-owen/repos", "events_url": "https://api.github.com/users/r-owen/events{/privacy}", "received_events_url": "https://api.github.com/users/r-owen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-01-04T23:50:06Z", "updated_at": "2018-01-04T23:50:06Z", "closed_at": null, "author_association": "NONE", "pull_request": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/34", "html_url": "https://github.com/lsst/dax_imgserv/pull/34", "diff_url": "https://github.com/lsst/dax_imgserv/pull/34.diff", "patch_url": "https://github.com/lsst/dax_imgserv/pull/34.patch"}, "body": "", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/issues/34/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}], "commits": [{"sha": "f2a825648ad5fe824d9c060f5d4ab7b4abb0718e", "commit": {"author": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-12-02T01:56:42Z"}, "committer": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-12-02T01:56:42Z"}, "message": "Merged", "tree": {"sha": "8ec39540d39d16e9c639af92890236b4f59f3723", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/8ec39540d39d16e9c639af92890236b4f59f3723"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/f2a825648ad5fe824d9c060f5d4ab7b4abb0718e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/f2a825648ad5fe824d9c060f5d4ab7b4abb0718e", "html_url": "https://github.com/lsst/dax_imgserv/commit/f2a825648ad5fe824d9c060f5d4ab7b4abb0718e", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/f2a825648ad5fe824d9c060f5d4ab7b4abb0718e/comments", "author": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55f0540d83a3ef2e45d8f0a7f8158adfe26f3cd6", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/55f0540d83a3ef2e45d8f0a7f8158adfe26f3cd6", "html_url": "https://github.com/lsst/dax_imgserv/commit/55f0540d83a3ef2e45d8f0a7f8158adfe26f3cd6"}, {"sha": "83cc0800cbbfb88bf24453bd8173b83ff9992b25", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/83cc0800cbbfb88bf24453bd8173b83ff9992b25", "html_url": "https://github.com/lsst/dax_imgserv/commit/83cc0800cbbfb88bf24453bd8173b83ff9992b25"}]}, {"sha": "55f0540d83a3ef2e45d8f0a7f8158adfe26f3cd6", "commit": {"author": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-12-02T01:41:21Z"}, "committer": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-12-02T01:41:21Z"}, "message": "Merge branch 'tickets/DM-12104'", "tree": {"sha": "8ec39540d39d16e9c639af92890236b4f59f3723", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/8ec39540d39d16e9c639af92890236b4f59f3723"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/55f0540d83a3ef2e45d8f0a7f8158adfe26f3cd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/55f0540d83a3ef2e45d8f0a7f8158adfe26f3cd6", "html_url": "https://github.com/lsst/dax_imgserv/commit/55f0540d83a3ef2e45d8f0a7f8158adfe26f3cd6", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/55f0540d83a3ef2e45d8f0a7f8158adfe26f3cd6/comments", "author": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18cba865e87c0adb845364b6af58a9c777d9bd91", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/18cba865e87c0adb845364b6af58a9c777d9bd91", "html_url": "https://github.com/lsst/dax_imgserv/commit/18cba865e87c0adb845364b6af58a9c777d9bd91"}, {"sha": "53fdc8a74c8dae79435b9e85278bc371700e6da8", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/53fdc8a74c8dae79435b9e85278bc371700e6da8", "html_url": "https://github.com/lsst/dax_imgserv/commit/53fdc8a74c8dae79435b9e85278bc371700e6da8"}]}, {"sha": "53fdc8a74c8dae79435b9e85278bc371700e6da8", "commit": {"author": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-11-14T23:05:16Z"}, "committer": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-12-01T22:03:27Z"}, "message": "Add request validation by JSON Schema as config switch to CLI_v1", "tree": {"sha": "8ec39540d39d16e9c639af92890236b4f59f3723", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/8ec39540d39d16e9c639af92890236b4f59f3723"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/53fdc8a74c8dae79435b9e85278bc371700e6da8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/53fdc8a74c8dae79435b9e85278bc371700e6da8", "html_url": "https://github.com/lsst/dax_imgserv/commit/53fdc8a74c8dae79435b9e85278bc371700e6da8", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/53fdc8a74c8dae79435b9e85278bc371700e6da8/comments", "author": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18cba865e87c0adb845364b6af58a9c777d9bd91", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/18cba865e87c0adb845364b6af58a9c777d9bd91", "html_url": "https://github.com/lsst/dax_imgserv/commit/18cba865e87c0adb845364b6af58a9c777d9bd91"}]}, {"sha": "83cc0800cbbfb88bf24453bd8173b83ff9992b25", "commit": {"author": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-12-01T17:08:06Z"}, "committer": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-12-01T17:08:06Z"}, "message": "Merge branch 'tickets/DM-11742'", "tree": {"sha": "5f5ea0dc101b30ae19d64e79f5c45e95cc350046", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/5f5ea0dc101b30ae19d64e79f5c45e95cc350046"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/83cc0800cbbfb88bf24453bd8173b83ff9992b25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/83cc0800cbbfb88bf24453bd8173b83ff9992b25", "html_url": "https://github.com/lsst/dax_imgserv/commit/83cc0800cbbfb88bf24453bd8173b83ff9992b25", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/83cc0800cbbfb88bf24453bd8173b83ff9992b25/comments", "author": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18cba865e87c0adb845364b6af58a9c777d9bd91", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/18cba865e87c0adb845364b6af58a9c777d9bd91", "html_url": "https://github.com/lsst/dax_imgserv/commit/18cba865e87c0adb845364b6af58a9c777d9bd91"}, {"sha": "e9a269b4de8beb937ad4963c88ec1a147d8c775b", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/e9a269b4de8beb937ad4963c88ec1a147d8c775b", "html_url": "https://github.com/lsst/dax_imgserv/commit/e9a269b4de8beb937ad4963c88ec1a147d8c775b"}]}, {"sha": "e9a269b4de8beb937ad4963c88ec1a147d8c775b", "commit": {"author": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-11-14T23:05:16Z"}, "committer": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-12-01T17:06:21Z"}, "message": "Support skymap API in imageREST_v1", "tree": {"sha": "5f5ea0dc101b30ae19d64e79f5c45e95cc350046", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/5f5ea0dc101b30ae19d64e79f5c45e95cc350046"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/e9a269b4de8beb937ad4963c88ec1a147d8c775b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/e9a269b4de8beb937ad4963c88ec1a147d8c775b", "html_url": "https://github.com/lsst/dax_imgserv/commit/e9a269b4de8beb937ad4963c88ec1a147d8c775b", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/e9a269b4de8beb937ad4963c88ec1a147d8c775b/comments", "author": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18cba865e87c0adb845364b6af58a9c777d9bd91", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/18cba865e87c0adb845364b6af58a9c777d9bd91", "html_url": "https://github.com/lsst/dax_imgserv/commit/18cba865e87c0adb845364b6af58a9c777d9bd91"}]}, {"sha": "18cba865e87c0adb845364b6af58a9c777d9bd91", "commit": {"author": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-11-09T22:16:11Z"}, "committer": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-11-09T22:16:11Z"}, "message": "Merge branch 'tickets/DM-12035'", "tree": {"sha": "c65a5e74cc079d75ff32b499f9668e57139ebdf8", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/c65a5e74cc079d75ff32b499f9668e57139ebdf8"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/18cba865e87c0adb845364b6af58a9c777d9bd91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/18cba865e87c0adb845364b6af58a9c777d9bd91", "html_url": "https://github.com/lsst/dax_imgserv/commit/18cba865e87c0adb845364b6af58a9c777d9bd91", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/18cba865e87c0adb845364b6af58a9c777d9bd91/comments", "author": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7e61cd3c4fdaadbf6d99a7e6678eae7b303dc4d", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/b7e61cd3c4fdaadbf6d99a7e6678eae7b303dc4d", "html_url": "https://github.com/lsst/dax_imgserv/commit/b7e61cd3c4fdaadbf6d99a7e6678eae7b303dc4d"}, {"sha": "2e61a3bafd1b2d9d505adf76c4ed89a88773c833", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/2e61a3bafd1b2d9d505adf76c4ed89a88773c833", "html_url": "https://github.com/lsst/dax_imgserv/commit/2e61a3bafd1b2d9d505adf76c4ed89a88773c833"}]}, {"sha": "2e61a3bafd1b2d9d505adf76c4ed89a88773c833", "commit": {"author": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-11-02T00:22:30Z"}, "committer": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-11-09T21:41:37Z"}, "message": "Cache instances of butler for subsequent requests", "tree": {"sha": "c65a5e74cc079d75ff32b499f9668e57139ebdf8", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/c65a5e74cc079d75ff32b499f9668e57139ebdf8"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/2e61a3bafd1b2d9d505adf76c4ed89a88773c833", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/2e61a3bafd1b2d9d505adf76c4ed89a88773c833", "html_url": "https://github.com/lsst/dax_imgserv/commit/2e61a3bafd1b2d9d505adf76c4ed89a88773c833", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/2e61a3bafd1b2d9d505adf76c4ed89a88773c833/comments", "author": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7e61cd3c4fdaadbf6d99a7e6678eae7b303dc4d", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/b7e61cd3c4fdaadbf6d99a7e6678eae7b303dc4d", "html_url": "https://github.com/lsst/dax_imgserv/commit/b7e61cd3c4fdaadbf6d99a7e6678eae7b303dc4d"}]}, {"sha": "b7e61cd3c4fdaadbf6d99a7e6678eae7b303dc4d", "commit": {"author": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-10-16T16:49:03Z"}, "committer": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-10-16T21:04:15Z"}, "message": "Use MemFileManager to write image data to fits file in memory, instead of temp file, before passing back as response.", "tree": {"sha": "bdd44a3443861458e1b0728ba381c88a46f69531", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/bdd44a3443861458e1b0728ba381c88a46f69531"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/b7e61cd3c4fdaadbf6d99a7e6678eae7b303dc4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/b7e61cd3c4fdaadbf6d99a7e6678eae7b303dc4d", "html_url": "https://github.com/lsst/dax_imgserv/commit/b7e61cd3c4fdaadbf6d99a7e6678eae7b303dc4d", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/b7e61cd3c4fdaadbf6d99a7e6678eae7b303dc4d/comments", "author": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62d757fc4cede065902a22a23aaa1bec800ff55f", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/62d757fc4cede065902a22a23aaa1bec800ff55f", "html_url": "https://github.com/lsst/dax_imgserv/commit/62d757fc4cede065902a22a23aaa1bec800ff55f"}]}, {"sha": "62d757fc4cede065902a22a23aaa1bec800ff55f", "commit": {"author": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-10-07T00:01:42Z"}, "committer": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-10-07T00:01:42Z"}, "message": "Merging", "tree": {"sha": "f569ee4b8fa5edf9f3e9b630838e19b2eee663ae", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/f569ee4b8fa5edf9f3e9b630838e19b2eee663ae"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/62d757fc4cede065902a22a23aaa1bec800ff55f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/62d757fc4cede065902a22a23aaa1bec800ff55f", "html_url": "https://github.com/lsst/dax_imgserv/commit/62d757fc4cede065902a22a23aaa1bec800ff55f", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/62d757fc4cede065902a22a23aaa1bec800ff55f/comments", "author": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b2a5707bab53ce5f63e04a063f298b15c6cf143", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/7b2a5707bab53ce5f63e04a063f298b15c6cf143", "html_url": "https://github.com/lsst/dax_imgserv/commit/7b2a5707bab53ce5f63e04a063f298b15c6cf143"}, {"sha": "5a3db8b68b1adc946bc7b01273a33db37c11e460", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/5a3db8b68b1adc946bc7b01273a33db37c11e460", "html_url": "https://github.com/lsst/dax_imgserv/commit/5a3db8b68b1adc946bc7b01273a33db37c11e460"}]}, {"sha": "7b2a5707bab53ce5f63e04a063f298b15c6cf143", "commit": {"author": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-10-06T23:43:26Z"}, "committer": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-10-06T23:43:26Z"}, "message": "Merge branch 'tickets/DM-9929'", "tree": {"sha": "2bffbd3cde9cef574e94910207071869cb6d685e", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/2bffbd3cde9cef574e94910207071869cb6d685e"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/7b2a5707bab53ce5f63e04a063f298b15c6cf143", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/7b2a5707bab53ce5f63e04a063f298b15c6cf143", "html_url": "https://github.com/lsst/dax_imgserv/commit/7b2a5707bab53ce5f63e04a063f298b15c6cf143", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/7b2a5707bab53ce5f63e04a063f298b15c6cf143/comments", "author": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6431d2d06e60f049860e4e5231e949434b8736b", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/f6431d2d06e60f049860e4e5231e949434b8736b", "html_url": "https://github.com/lsst/dax_imgserv/commit/f6431d2d06e60f049860e4e5231e949434b8736b"}, {"sha": "963ab87c819e6dee053c9d5c037d885d42302cf3", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/963ab87c819e6dee053c9d5c037d885d42302cf3", "html_url": "https://github.com/lsst/dax_imgserv/commit/963ab87c819e6dee053c9d5c037d885d42302cf3"}]}, {"sha": "963ab87c819e6dee053c9d5c037d885d42302cf3", "commit": {"author": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-09-12T01:13:42Z"}, "committer": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-10-06T23:40:07Z"}, "message": "Implemented imageREST_v1 API that enables support for VO interfaces and cutout\nrequirements from SUIT team, with imageREST_v0 API to be deprecated.", "tree": {"sha": "2bffbd3cde9cef574e94910207071869cb6d685e", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/2bffbd3cde9cef574e94910207071869cb6d685e"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/963ab87c819e6dee053c9d5c037d885d42302cf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/963ab87c819e6dee053c9d5c037d885d42302cf3", "html_url": "https://github.com/lsst/dax_imgserv/commit/963ab87c819e6dee053c9d5c037d885d42302cf3", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/963ab87c819e6dee053c9d5c037d885d42302cf3/comments", "author": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6431d2d06e60f049860e4e5231e949434b8736b", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/f6431d2d06e60f049860e4e5231e949434b8736b", "html_url": "https://github.com/lsst/dax_imgserv/commit/f6431d2d06e60f049860e4e5231e949434b8736b"}]}, {"sha": "5a3db8b68b1adc946bc7b01273a33db37c11e460", "commit": {"author": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2017-09-20T17:04:23Z"}, "committer": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2017-09-20T17:04:23Z"}, "message": "Merge branch 'tickets/DM-11596'", "tree": {"sha": "f41c400ebcb9bdb131bf0b039befaebfca26235f", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/f41c400ebcb9bdb131bf0b039befaebfca26235f"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/5a3db8b68b1adc946bc7b01273a33db37c11e460", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/5a3db8b68b1adc946bc7b01273a33db37c11e460", "html_url": "https://github.com/lsst/dax_imgserv/commit/5a3db8b68b1adc946bc7b01273a33db37c11e460", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/5a3db8b68b1adc946bc7b01273a33db37c11e460/comments", "author": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee4fe74cb3d29c7f72891ca8f4be44d50d74cb0e", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/ee4fe74cb3d29c7f72891ca8f4be44d50d74cb0e", "html_url": "https://github.com/lsst/dax_imgserv/commit/ee4fe74cb3d29c7f72891ca8f4be44d50d74cb0e"}, {"sha": "4a10c308bbd9c4796cd8ccddf638b4485cdd4696", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/4a10c308bbd9c4796cd8ccddf638b4485cdd4696", "html_url": "https://github.com/lsst/dax_imgserv/commit/4a10c308bbd9c4796cd8ccddf638b4485cdd4696"}]}, {"sha": "4a10c308bbd9c4796cd8ccddf638b4485cdd4696", "commit": {"author": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2017-09-12T17:41:01Z"}, "committer": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2017-09-20T17:00:32Z"}, "message": "Switched to using scisql_s2PtInCPoly instead of scisql_s2PtInBox.", "tree": {"sha": "f41c400ebcb9bdb131bf0b039befaebfca26235f", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/f41c400ebcb9bdb131bf0b039befaebfca26235f"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/4a10c308bbd9c4796cd8ccddf638b4485cdd4696", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/4a10c308bbd9c4796cd8ccddf638b4485cdd4696", "html_url": "https://github.com/lsst/dax_imgserv/commit/4a10c308bbd9c4796cd8ccddf638b4485cdd4696", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/4a10c308bbd9c4796cd8ccddf638b4485cdd4696/comments", "author": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee4fe74cb3d29c7f72891ca8f4be44d50d74cb0e", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/ee4fe74cb3d29c7f72891ca8f4be44d50d74cb0e", "html_url": "https://github.com/lsst/dax_imgserv/commit/ee4fe74cb3d29c7f72891ca8f4be44d50d74cb0e"}]}, {"sha": "ee4fe74cb3d29c7f72891ca8f4be44d50d74cb0e", "commit": {"author": {"name": "Tim Jenness", "email": "tjenness@lsst.org", "date": "2017-08-24T23:30:43Z"}, "committer": {"name": "Tim Jenness", "email": "tjenness@lsst.org", "date": "2017-08-24T23:30:43Z"}, "message": "Merge branch 'tickets/DM-7628'", "tree": {"sha": "58c760f8bd8ce0ef79ef315267fc49beacfbb002", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/58c760f8bd8ce0ef79ef315267fc49beacfbb002"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/ee4fe74cb3d29c7f72891ca8f4be44d50d74cb0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/ee4fe74cb3d29c7f72891ca8f4be44d50d74cb0e", "html_url": "https://github.com/lsst/dax_imgserv/commit/ee4fe74cb3d29c7f72891ca8f4be44d50d74cb0e", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/ee4fe74cb3d29c7f72891ca8f4be44d50d74cb0e/comments", "author": {"login": "timj", "id": 60622, "avatar_url": "https://avatars1.githubusercontent.com/u/60622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timj", "html_url": "https://github.com/timj", "followers_url": "https://api.github.com/users/timj/followers", "following_url": "https://api.github.com/users/timj/following{/other_user}", "gists_url": "https://api.github.com/users/timj/gists{/gist_id}", "starred_url": "https://api.github.com/users/timj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timj/subscriptions", "organizations_url": "https://api.github.com/users/timj/orgs", "repos_url": "https://api.github.com/users/timj/repos", "events_url": "https://api.github.com/users/timj/events{/privacy}", "received_events_url": "https://api.github.com/users/timj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "timj", "id": 60622, "avatar_url": "https://avatars1.githubusercontent.com/u/60622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timj", "html_url": "https://github.com/timj", "followers_url": "https://api.github.com/users/timj/followers", "following_url": "https://api.github.com/users/timj/following{/other_user}", "gists_url": "https://api.github.com/users/timj/gists{/gist_id}", "starred_url": "https://api.github.com/users/timj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timj/subscriptions", "organizations_url": "https://api.github.com/users/timj/orgs", "repos_url": "https://api.github.com/users/timj/repos", "events_url": "https://api.github.com/users/timj/events{/privacy}", "received_events_url": "https://api.github.com/users/timj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6431d2d06e60f049860e4e5231e949434b8736b", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/f6431d2d06e60f049860e4e5231e949434b8736b", "html_url": "https://github.com/lsst/dax_imgserv/commit/f6431d2d06e60f049860e4e5231e949434b8736b"}, {"sha": "24a294847f520282d619498a80057baa6bb07ff9", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/24a294847f520282d619498a80057baa6bb07ff9", "html_url": "https://github.com/lsst/dax_imgserv/commit/24a294847f520282d619498a80057baa6bb07ff9"}]}, {"sha": "24a294847f520282d619498a80057baa6bb07ff9", "commit": {"author": {"name": "Tim Jenness", "email": "tjenness@lsst.org", "date": "2017-08-22T20:24:57Z"}, "committer": {"name": "Tim Jenness", "email": "tjenness@lsst.org", "date": "2017-08-24T21:56:31Z"}, "message": "Update ignore file", "tree": {"sha": "58c760f8bd8ce0ef79ef315267fc49beacfbb002", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/58c760f8bd8ce0ef79ef315267fc49beacfbb002"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/24a294847f520282d619498a80057baa6bb07ff9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/24a294847f520282d619498a80057baa6bb07ff9", "html_url": "https://github.com/lsst/dax_imgserv/commit/24a294847f520282d619498a80057baa6bb07ff9", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/24a294847f520282d619498a80057baa6bb07ff9/comments", "author": {"login": "timj", "id": 60622, "avatar_url": "https://avatars1.githubusercontent.com/u/60622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timj", "html_url": "https://github.com/timj", "followers_url": "https://api.github.com/users/timj/followers", "following_url": "https://api.github.com/users/timj/following{/other_user}", "gists_url": "https://api.github.com/users/timj/gists{/gist_id}", "starred_url": "https://api.github.com/users/timj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timj/subscriptions", "organizations_url": "https://api.github.com/users/timj/orgs", "repos_url": "https://api.github.com/users/timj/repos", "events_url": "https://api.github.com/users/timj/events{/privacy}", "received_events_url": "https://api.github.com/users/timj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "timj", "id": 60622, "avatar_url": "https://avatars1.githubusercontent.com/u/60622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timj", "html_url": "https://github.com/timj", "followers_url": "https://api.github.com/users/timj/followers", "following_url": "https://api.github.com/users/timj/following{/other_user}", "gists_url": "https://api.github.com/users/timj/gists{/gist_id}", "starred_url": "https://api.github.com/users/timj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timj/subscriptions", "organizations_url": "https://api.github.com/users/timj/orgs", "repos_url": "https://api.github.com/users/timj/repos", "events_url": "https://api.github.com/users/timj/events{/privacy}", "received_events_url": "https://api.github.com/users/timj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10c89e9403f1f746b0ec214c32f090a24a8d04bb", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/10c89e9403f1f746b0ec214c32f090a24a8d04bb", "html_url": "https://github.com/lsst/dax_imgserv/commit/10c89e9403f1f746b0ec214c32f090a24a8d04bb"}]}, {"sha": "10c89e9403f1f746b0ec214c32f090a24a8d04bb", "commit": {"author": {"name": "Tim Jenness", "email": "tjenness@lsst.org", "date": "2017-08-22T20:22:35Z"}, "committer": {"name": "Tim Jenness", "email": "tjenness@lsst.org", "date": "2017-08-24T21:56:30Z"}, "message": "Update for pytest support\n\n* Split file checker into separate test\n* Skip test if credentials not present\n* Derive location of test data file from test file\n* Do not use logger (pytest captures output)", "tree": {"sha": "5097a48e6430ff24a9590b7c44634cf8bebb2059", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/5097a48e6430ff24a9590b7c44634cf8bebb2059"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/10c89e9403f1f746b0ec214c32f090a24a8d04bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/10c89e9403f1f746b0ec214c32f090a24a8d04bb", "html_url": "https://github.com/lsst/dax_imgserv/commit/10c89e9403f1f746b0ec214c32f090a24a8d04bb", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/10c89e9403f1f746b0ec214c32f090a24a8d04bb/comments", "author": {"login": "timj", "id": 60622, "avatar_url": "https://avatars1.githubusercontent.com/u/60622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timj", "html_url": "https://github.com/timj", "followers_url": "https://api.github.com/users/timj/followers", "following_url": "https://api.github.com/users/timj/following{/other_user}", "gists_url": "https://api.github.com/users/timj/gists{/gist_id}", "starred_url": "https://api.github.com/users/timj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timj/subscriptions", "organizations_url": "https://api.github.com/users/timj/orgs", "repos_url": "https://api.github.com/users/timj/repos", "events_url": "https://api.github.com/users/timj/events{/privacy}", "received_events_url": "https://api.github.com/users/timj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "timj", "id": 60622, "avatar_url": "https://avatars1.githubusercontent.com/u/60622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timj", "html_url": "https://github.com/timj", "followers_url": "https://api.github.com/users/timj/followers", "following_url": "https://api.github.com/users/timj/following{/other_user}", "gists_url": "https://api.github.com/users/timj/gists{/gist_id}", "starred_url": "https://api.github.com/users/timj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timj/subscriptions", "organizations_url": "https://api.github.com/users/timj/orgs", "repos_url": "https://api.github.com/users/timj/repos", "events_url": "https://api.github.com/users/timj/events{/privacy}", "received_events_url": "https://api.github.com/users/timj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c45fada1d0a7ac53425bf07a67a0ec6ee512295", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/8c45fada1d0a7ac53425bf07a67a0ec6ee512295", "html_url": "https://github.com/lsst/dax_imgserv/commit/8c45fada1d0a7ac53425bf07a67a0ec6ee512295"}]}, {"sha": "8c45fada1d0a7ac53425bf07a67a0ec6ee512295", "commit": {"author": {"name": "Tim Jenness", "email": "tjenness@lsst.org", "date": "2017-08-22T20:19:59Z"}, "committer": {"name": "Tim Jenness", "email": "tjenness@lsst.org", "date": "2017-08-24T21:56:30Z"}, "message": "Clean up isFits method\n\n* Check if the file exists.\n* Close the file handle that was opened.\n* Check for b'SIMPLE' not 'SIMPLE' when comparing contents.", "tree": {"sha": "69b1082eeb1e6209a5fc21d09cdb229286dab8e1", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/69b1082eeb1e6209a5fc21d09cdb229286dab8e1"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/8c45fada1d0a7ac53425bf07a67a0ec6ee512295", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/8c45fada1d0a7ac53425bf07a67a0ec6ee512295", "html_url": "https://github.com/lsst/dax_imgserv/commit/8c45fada1d0a7ac53425bf07a67a0ec6ee512295", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/8c45fada1d0a7ac53425bf07a67a0ec6ee512295/comments", "author": {"login": "timj", "id": 60622, "avatar_url": "https://avatars1.githubusercontent.com/u/60622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timj", "html_url": "https://github.com/timj", "followers_url": "https://api.github.com/users/timj/followers", "following_url": "https://api.github.com/users/timj/following{/other_user}", "gists_url": "https://api.github.com/users/timj/gists{/gist_id}", "starred_url": "https://api.github.com/users/timj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timj/subscriptions", "organizations_url": "https://api.github.com/users/timj/orgs", "repos_url": "https://api.github.com/users/timj/repos", "events_url": "https://api.github.com/users/timj/events{/privacy}", "received_events_url": "https://api.github.com/users/timj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "timj", "id": 60622, "avatar_url": "https://avatars1.githubusercontent.com/u/60622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timj", "html_url": "https://github.com/timj", "followers_url": "https://api.github.com/users/timj/followers", "following_url": "https://api.github.com/users/timj/following{/other_user}", "gists_url": "https://api.github.com/users/timj/gists{/gist_id}", "starred_url": "https://api.github.com/users/timj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timj/subscriptions", "organizations_url": "https://api.github.com/users/timj/orgs", "repos_url": "https://api.github.com/users/timj/repos", "events_url": "https://api.github.com/users/timj/events{/privacy}", "received_events_url": "https://api.github.com/users/timj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6431d2d06e60f049860e4e5231e949434b8736b", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/f6431d2d06e60f049860e4e5231e949434b8736b", "html_url": "https://github.com/lsst/dax_imgserv/commit/f6431d2d06e60f049860e4e5231e949434b8736b"}]}, {"sha": "f6431d2d06e60f049860e4e5231e949434b8736b", "commit": {"author": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-08-24T00:17:12Z"}, "committer": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-08-24T00:17:12Z"}, "message": "Merged conflicts", "tree": {"sha": "598ac7ac0ce159dc28d8aba6f7fa9ace5d50c6da", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/598ac7ac0ce159dc28d8aba6f7fa9ace5d50c6da"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/f6431d2d06e60f049860e4e5231e949434b8736b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/f6431d2d06e60f049860e4e5231e949434b8736b", "html_url": "https://github.com/lsst/dax_imgserv/commit/f6431d2d06e60f049860e4e5231e949434b8736b", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/f6431d2d06e60f049860e4e5231e949434b8736b/comments", "author": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2edc9d4b6d985e78ed6722333e821be44dd2a1c", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/d2edc9d4b6d985e78ed6722333e821be44dd2a1c", "html_url": "https://github.com/lsst/dax_imgserv/commit/d2edc9d4b6d985e78ed6722333e821be44dd2a1c"}, {"sha": "1df5224111b6eafce323d758f0ee7297f1097711", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/1df5224111b6eafce323d758f0ee7297f1097711", "html_url": "https://github.com/lsst/dax_imgserv/commit/1df5224111b6eafce323d758f0ee7297f1097711"}]}, {"sha": "d2edc9d4b6d985e78ed6722333e821be44dd2a1c", "commit": {"author": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-08-23T23:59:50Z"}, "committer": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-08-23T23:59:50Z"}, "message": "Merge branch 'tickets/DM-10807'", "tree": {"sha": "9f53b9433d8b1710d2331c4469d05899064f32a9", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/9f53b9433d8b1710d2331c4469d05899064f32a9"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/d2edc9d4b6d985e78ed6722333e821be44dd2a1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/d2edc9d4b6d985e78ed6722333e821be44dd2a1c", "html_url": "https://github.com/lsst/dax_imgserv/commit/d2edc9d4b6d985e78ed6722333e821be44dd2a1c", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/d2edc9d4b6d985e78ed6722333e821be44dd2a1c/comments", "author": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b33744bd6999f98a20d6be335a9807006ebe1b1", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/6b33744bd6999f98a20d6be335a9807006ebe1b1", "html_url": "https://github.com/lsst/dax_imgserv/commit/6b33744bd6999f98a20d6be335a9807006ebe1b1"}, {"sha": "2816ad423683e1ee7c6f7b71b442ceaead402aa5", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/2816ad423683e1ee7c6f7b71b442ceaead402aa5", "html_url": "https://github.com/lsst/dax_imgserv/commit/2816ad423683e1ee7c6f7b71b442ceaead402aa5"}]}, {"sha": "2816ad423683e1ee7c6f7b71b442ceaead402aa5", "commit": {"author": {"name": "Brian Van Klaveren", "email": "bvan@slac.stanford.edu", "date": "2017-03-08T00:36:36Z"}, "committer": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-08-11T23:14:22Z"}, "message": "Implemnented NEW CLI inteface to ImageServ after extensive refactoring.\nMapped API using JSON schemas as basis for API signatures.\nImplemented all existing 21 tests as unit tests using JSON input format.\nUnit test uses sha256 hashes to check generated output image files.\nTrimmed the test image dataset down to 14MB in Total for check-in.", "tree": {"sha": "9f53b9433d8b1710d2331c4469d05899064f32a9", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/9f53b9433d8b1710d2331c4469d05899064f32a9"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/2816ad423683e1ee7c6f7b71b442ceaead402aa5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/2816ad423683e1ee7c6f7b71b442ceaead402aa5", "html_url": "https://github.com/lsst/dax_imgserv/commit/2816ad423683e1ee7c6f7b71b442ceaead402aa5", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/2816ad423683e1ee7c6f7b71b442ceaead402aa5/comments", "author": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b33744bd6999f98a20d6be335a9807006ebe1b1", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/6b33744bd6999f98a20d6be335a9807006ebe1b1", "html_url": "https://github.com/lsst/dax_imgserv/commit/6b33744bd6999f98a20d6be335a9807006ebe1b1"}]}, {"sha": "1df5224111b6eafce323d758f0ee7297f1097711", "commit": {"author": {"name": "Brian Van Klaveren", "email": "brianv0@users.noreply.github.com", "date": "2017-07-26T23:44:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-07-26T23:44:36Z"}, "message": "Merge pull request #25 from lsst/tickets/DM-11370\n\nAdd better error handling", "tree": {"sha": "af811bbea3934d976117b323e8ea0f99b72d6da4", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/af811bbea3934d976117b323e8ea0f99b72d6da4"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/1df5224111b6eafce323d758f0ee7297f1097711", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/1df5224111b6eafce323d758f0ee7297f1097711", "html_url": "https://github.com/lsst/dax_imgserv/commit/1df5224111b6eafce323d758f0ee7297f1097711", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/1df5224111b6eafce323d758f0ee7297f1097711/comments", "author": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "292c868afeedcfb9619349e44b8f36060a9bc3e5", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/292c868afeedcfb9619349e44b8f36060a9bc3e5", "html_url": "https://github.com/lsst/dax_imgserv/commit/292c868afeedcfb9619349e44b8f36060a9bc3e5"}, {"sha": "0387f10a09a664aa876478a7ecc8ce215642c7ed", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/0387f10a09a664aa876478a7ecc8ce215642c7ed", "html_url": "https://github.com/lsst/dax_imgserv/commit/0387f10a09a664aa876478a7ecc8ce215642c7ed"}]}, {"sha": "0387f10a09a664aa876478a7ecc8ce215642c7ed", "commit": {"author": {"name": "Brian Van Klaveren", "email": "bvan@slac.stanford.edu", "date": "2017-07-25T20:46:52Z"}, "committer": {"name": "Brian Van Klaveren", "email": "bvan@slac.stanford.edu", "date": "2017-07-25T21:30:56Z"}, "message": "Add better error handling", "tree": {"sha": "af811bbea3934d976117b323e8ea0f99b72d6da4", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/af811bbea3934d976117b323e8ea0f99b72d6da4"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/0387f10a09a664aa876478a7ecc8ce215642c7ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/0387f10a09a664aa876478a7ecc8ce215642c7ed", "html_url": "https://github.com/lsst/dax_imgserv/commit/0387f10a09a664aa876478a7ecc8ce215642c7ed", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/0387f10a09a664aa876478a7ecc8ce215642c7ed/comments", "author": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "292c868afeedcfb9619349e44b8f36060a9bc3e5", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/292c868afeedcfb9619349e44b8f36060a9bc3e5", "html_url": "https://github.com/lsst/dax_imgserv/commit/292c868afeedcfb9619349e44b8f36060a9bc3e5"}]}, {"sha": "292c868afeedcfb9619349e44b8f36060a9bc3e5", "commit": {"author": {"name": "Brian Van Klaveren", "email": "brianv0@users.noreply.github.com", "date": "2017-07-05T22:14:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-07-05T22:14:03Z"}, "message": "Merge pull request #24 from lsst/tickets/DM-11183\n\ntickets/DM-11183", "tree": {"sha": "dfc678eb4debe6e4f47be1d22233bd28e24acbf2", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/dfc678eb4debe6e4f47be1d22233bd28e24acbf2"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/292c868afeedcfb9619349e44b8f36060a9bc3e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/292c868afeedcfb9619349e44b8f36060a9bc3e5", "html_url": "https://github.com/lsst/dax_imgserv/commit/292c868afeedcfb9619349e44b8f36060a9bc3e5", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/292c868afeedcfb9619349e44b8f36060a9bc3e5/comments", "author": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38e39d64a6b9ebc0af29deefe672b9880ac93dd3", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/38e39d64a6b9ebc0af29deefe672b9880ac93dd3", "html_url": "https://github.com/lsst/dax_imgserv/commit/38e39d64a6b9ebc0af29deefe672b9880ac93dd3"}, {"sha": "680d8ad701ccb2f80799aef9e949205a3fdfeae6", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/680d8ad701ccb2f80799aef9e949205a3fdfeae6", "html_url": "https://github.com/lsst/dax_imgserv/commit/680d8ad701ccb2f80799aef9e949205a3fdfeae6"}]}, {"sha": "680d8ad701ccb2f80799aef9e949205a3fdfeae6", "commit": {"author": {"name": "Brian Van Klaveren", "email": "bvan@slac.stanford.edu", "date": "2017-07-04T02:54:52Z"}, "committer": {"name": "Brian Van Klaveren", "email": "bvan@slac.stanford.edu", "date": "2017-07-05T21:27:55Z"}, "message": "Doc fixes and .gitignore update", "tree": {"sha": "dfc678eb4debe6e4f47be1d22233bd28e24acbf2", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/dfc678eb4debe6e4f47be1d22233bd28e24acbf2"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/680d8ad701ccb2f80799aef9e949205a3fdfeae6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/680d8ad701ccb2f80799aef9e949205a3fdfeae6", "html_url": "https://github.com/lsst/dax_imgserv/commit/680d8ad701ccb2f80799aef9e949205a3fdfeae6", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/680d8ad701ccb2f80799aef9e949205a3fdfeae6/comments", "author": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2ab07b067874a4df27cf3e80d5e7041f7b8c42a", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/b2ab07b067874a4df27cf3e80d5e7041f7b8c42a", "html_url": "https://github.com/lsst/dax_imgserv/commit/b2ab07b067874a4df27cf3e80d5e7041f7b8c42a"}]}, {"sha": "b2ab07b067874a4df27cf3e80d5e7041f7b8c42a", "commit": {"author": {"name": "Brian Van Klaveren", "email": "bvan@slac.stanford.edu", "date": "2017-07-04T01:54:28Z"}, "committer": {"name": "Brian Van Klaveren", "email": "bvan@slac.stanford.edu", "date": "2017-07-05T21:27:55Z"}, "message": "Only read with binary", "tree": {"sha": "fdcbbe342bd5d53afd71a1f8d965412fb7d50267", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/fdcbbe342bd5d53afd71a1f8d965412fb7d50267"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/b2ab07b067874a4df27cf3e80d5e7041f7b8c42a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/b2ab07b067874a4df27cf3e80d5e7041f7b8c42a", "html_url": "https://github.com/lsst/dax_imgserv/commit/b2ab07b067874a4df27cf3e80d5e7041f7b8c42a", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/b2ab07b067874a4df27cf3e80d5e7041f7b8c42a/comments", "author": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72f43244afcfdae3ae8e580759f6d648d0296306", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/72f43244afcfdae3ae8e580759f6d648d0296306", "html_url": "https://github.com/lsst/dax_imgserv/commit/72f43244afcfdae3ae8e580759f6d648d0296306"}]}, {"sha": "72f43244afcfdae3ae8e580759f6d648d0296306", "commit": {"author": {"name": "Brian Van Klaveren", "email": "bvan@slac.stanford.edu", "date": "2017-07-03T16:05:21Z"}, "committer": {"name": "Brian Van Klaveren", "email": "bvan@slac.stanford.edu", "date": "2017-07-05T21:27:48Z"}, "message": "PEP8 fixes, renaming, and dead code removal\nDon't encode filter to byte string", "tree": {"sha": "dc35d60709a92d76b71d1f09b4386eb2d03c2c60", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/dc35d60709a92d76b71d1f09b4386eb2d03c2c60"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/72f43244afcfdae3ae8e580759f6d648d0296306", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/72f43244afcfdae3ae8e580759f6d648d0296306", "html_url": "https://github.com/lsst/dax_imgserv/commit/72f43244afcfdae3ae8e580759f6d648d0296306", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/72f43244afcfdae3ae8e580759f6d648d0296306/comments", "author": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "baf709d69cb164c81955e84fbafb088848c4bbf3", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/baf709d69cb164c81955e84fbafb088848c4bbf3", "html_url": "https://github.com/lsst/dax_imgserv/commit/baf709d69cb164c81955e84fbafb088848c4bbf3"}]}, {"sha": "baf709d69cb164c81955e84fbafb088848c4bbf3", "commit": {"author": {"name": "Brian Van Klaveren", "email": "bvan@slac.stanford.edu", "date": "2017-07-03T15:44:22Z"}, "committer": {"name": "Brian Van Klaveren", "email": "bvan@slac.stanford.edu", "date": "2017-07-05T20:56:07Z"}, "message": "Python 3 fixes", "tree": {"sha": "086b745adcb250420c606850a4935f11ec8602b5", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/086b745adcb250420c606850a4935f11ec8602b5"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/baf709d69cb164c81955e84fbafb088848c4bbf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/baf709d69cb164c81955e84fbafb088848c4bbf3", "html_url": "https://github.com/lsst/dax_imgserv/commit/baf709d69cb164c81955e84fbafb088848c4bbf3", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/baf709d69cb164c81955e84fbafb088848c4bbf3/comments", "author": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a830965e2a285989d3f2912ba614c40ab2d91c3", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/0a830965e2a285989d3f2912ba614c40ab2d91c3", "html_url": "https://github.com/lsst/dax_imgserv/commit/0a830965e2a285989d3f2912ba614c40ab2d91c3"}]}, {"sha": "0a830965e2a285989d3f2912ba614c40ab2d91c3", "commit": {"author": {"name": "Brian Van Klaveren", "email": "bvan@slac.stanford.edu", "date": "2017-07-03T15:21:25Z"}, "committer": {"name": "Brian Van Klaveren", "email": "bvan@slac.stanford.edu", "date": "2017-07-03T15:21:25Z"}, "message": "fix imageServer.py", "tree": {"sha": "99e64b989da4a615cdfb1d7c0cd66dc58c4ba40e", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/99e64b989da4a615cdfb1d7c0cd66dc58c4ba40e"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/0a830965e2a285989d3f2912ba614c40ab2d91c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/0a830965e2a285989d3f2912ba614c40ab2d91c3", "html_url": "https://github.com/lsst/dax_imgserv/commit/0a830965e2a285989d3f2912ba614c40ab2d91c3", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/0a830965e2a285989d3f2912ba614c40ab2d91c3/comments", "author": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef46817b1ab41f1a3ee108d33a5950149deabf5e", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/ef46817b1ab41f1a3ee108d33a5950149deabf5e", "html_url": "https://github.com/lsst/dax_imgserv/commit/ef46817b1ab41f1a3ee108d33a5950149deabf5e"}, {"sha": "38e39d64a6b9ebc0af29deefe672b9880ac93dd3", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/38e39d64a6b9ebc0af29deefe672b9880ac93dd3", "html_url": "https://github.com/lsst/dax_imgserv/commit/38e39d64a6b9ebc0af29deefe672b9880ac93dd3"}]}, {"sha": "38e39d64a6b9ebc0af29deefe672b9880ac93dd3", "commit": {"author": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-06-24T04:32:37Z"}, "committer": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-06-24T04:32:37Z"}, "message": "Merge branch 'tickets/DM-10908'", "tree": {"sha": "56b4b90c5e2f3351927e2ccfe20a9f9d98e2aabc", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/56b4b90c5e2f3351927e2ccfe20a9f9d98e2aabc"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/38e39d64a6b9ebc0af29deefe672b9880ac93dd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/38e39d64a6b9ebc0af29deefe672b9880ac93dd3", "html_url": "https://github.com/lsst/dax_imgserv/commit/38e39d64a6b9ebc0af29deefe672b9880ac93dd3", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/38e39d64a6b9ebc0af29deefe672b9880ac93dd3/comments", "author": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b33744bd6999f98a20d6be335a9807006ebe1b1", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/6b33744bd6999f98a20d6be335a9807006ebe1b1", "html_url": "https://github.com/lsst/dax_imgserv/commit/6b33744bd6999f98a20d6be335a9807006ebe1b1"}, {"sha": "39555dea2e07bb46148f4fdcd33225a73ee26271", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/39555dea2e07bb46148f4fdcd33225a73ee26271", "html_url": "https://github.com/lsst/dax_imgserv/commit/39555dea2e07bb46148f4fdcd33225a73ee26271"}]}, {"sha": "39555dea2e07bb46148f4fdcd33225a73ee26271", "commit": {"author": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-06-13T20:56:49Z"}, "committer": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-06-22T22:22:18Z"}, "message": "Re-factor the core of ImageServ into getimage module with ImageGetter Class.", "tree": {"sha": "56b4b90c5e2f3351927e2ccfe20a9f9d98e2aabc", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/56b4b90c5e2f3351927e2ccfe20a9f9d98e2aabc"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/39555dea2e07bb46148f4fdcd33225a73ee26271", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/39555dea2e07bb46148f4fdcd33225a73ee26271", "html_url": "https://github.com/lsst/dax_imgserv/commit/39555dea2e07bb46148f4fdcd33225a73ee26271", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/39555dea2e07bb46148f4fdcd33225a73ee26271/comments", "author": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b33744bd6999f98a20d6be335a9807006ebe1b1", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/6b33744bd6999f98a20d6be335a9807006ebe1b1", "html_url": "https://github.com/lsst/dax_imgserv/commit/6b33744bd6999f98a20d6be335a9807006ebe1b1"}]}, {"sha": "6b33744bd6999f98a20d6be335a9807006ebe1b1", "commit": {"author": {"name": "Brian Van Klaveren", "email": "brianv0@users.noreply.github.com", "date": "2017-05-25T01:32:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-05-25T01:32:17Z"}, "message": "Merge pull request #22 from lsst/tickets/DM-7416\n\nFuturize and Python 3 fixes", "tree": {"sha": "01043b1a858be02923c8a9c4a0845a81a262a6d1", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/01043b1a858be02923c8a9c4a0845a81a262a6d1"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/6b33744bd6999f98a20d6be335a9807006ebe1b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/6b33744bd6999f98a20d6be335a9807006ebe1b1", "html_url": "https://github.com/lsst/dax_imgserv/commit/6b33744bd6999f98a20d6be335a9807006ebe1b1", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/6b33744bd6999f98a20d6be335a9807006ebe1b1/comments", "author": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8665952cff0fa326441b94f91b2dc2764e1f83d", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/c8665952cff0fa326441b94f91b2dc2764e1f83d", "html_url": "https://github.com/lsst/dax_imgserv/commit/c8665952cff0fa326441b94f91b2dc2764e1f83d"}, {"sha": "20cb820ea22a44e2fddef789c04fe76520410b68", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/20cb820ea22a44e2fddef789c04fe76520410b68", "html_url": "https://github.com/lsst/dax_imgserv/commit/20cb820ea22a44e2fddef789c04fe76520410b68"}]}, {"sha": "20cb820ea22a44e2fddef789c04fe76520410b68", "commit": {"author": {"name": "Brian Van Klaveren", "email": "bvan@slac.stanford.edu", "date": "2017-03-08T00:36:36Z"}, "committer": {"name": "Brian Van Klaveren", "email": "bvan@slac.stanford.edu", "date": "2017-05-25T01:26:03Z"}, "message": "Futurize and Python 3 fixes", "tree": {"sha": "01043b1a858be02923c8a9c4a0845a81a262a6d1", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/01043b1a858be02923c8a9c4a0845a81a262a6d1"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/20cb820ea22a44e2fddef789c04fe76520410b68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/20cb820ea22a44e2fddef789c04fe76520410b68", "html_url": "https://github.com/lsst/dax_imgserv/commit/20cb820ea22a44e2fddef789c04fe76520410b68", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/20cb820ea22a44e2fddef789c04fe76520410b68/comments", "author": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8665952cff0fa326441b94f91b2dc2764e1f83d", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/c8665952cff0fa326441b94f91b2dc2764e1f83d", "html_url": "https://github.com/lsst/dax_imgserv/commit/c8665952cff0fa326441b94f91b2dc2764e1f83d"}]}, {"sha": "c8665952cff0fa326441b94f91b2dc2764e1f83d", "commit": {"author": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-05-05T21:50:29Z"}, "committer": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-05-05T21:50:29Z"}, "message": "Merge branch 'tickets/DM-10441'", "tree": {"sha": "4265befbf3437afe33376a5c0a586fad61d0767d", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/4265befbf3437afe33376a5c0a586fad61d0767d"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/c8665952cff0fa326441b94f91b2dc2764e1f83d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/c8665952cff0fa326441b94f91b2dc2764e1f83d", "html_url": "https://github.com/lsst/dax_imgserv/commit/c8665952cff0fa326441b94f91b2dc2764e1f83d", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/c8665952cff0fa326441b94f91b2dc2764e1f83d/comments", "author": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23ec58ab060b80c249bcfc74e371414634fa7e0d", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/23ec58ab060b80c249bcfc74e371414634fa7e0d", "html_url": "https://github.com/lsst/dax_imgserv/commit/23ec58ab060b80c249bcfc74e371414634fa7e0d"}, {"sha": "1054ffa29bd2d5a4087d4b6c6c40ba249b7e8c6f", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/1054ffa29bd2d5a4087d4b6c6c40ba249b7e8c6f", "html_url": "https://github.com/lsst/dax_imgserv/commit/1054ffa29bd2d5a4087d4b6c6c40ba249b7e8c6f"}]}, {"sha": "1054ffa29bd2d5a4087d4b6c6c40ba249b7e8c6f", "commit": {"author": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-05-02T22:43:38Z"}, "committer": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-05-02T22:43:38Z"}, "message": "Fix centering issue with cutout size specified in Ang degrees", "tree": {"sha": "4265befbf3437afe33376a5c0a586fad61d0767d", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/4265befbf3437afe33376a5c0a586fad61d0767d"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/1054ffa29bd2d5a4087d4b6c6c40ba249b7e8c6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/1054ffa29bd2d5a4087d4b6c6c40ba249b7e8c6f", "html_url": "https://github.com/lsst/dax_imgserv/commit/1054ffa29bd2d5a4087d4b6c6c40ba249b7e8c6f", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/1054ffa29bd2d5a4087d4b6c6c40ba249b7e8c6f/comments", "author": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23ec58ab060b80c249bcfc74e371414634fa7e0d", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/23ec58ab060b80c249bcfc74e371414634fa7e0d", "html_url": "https://github.com/lsst/dax_imgserv/commit/23ec58ab060b80c249bcfc74e371414634fa7e0d"}]}, {"sha": "23ec58ab060b80c249bcfc74e371414634fa7e0d", "commit": {"author": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-05-02T16:45:46Z"}, "committer": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-05-02T16:45:46Z"}, "message": "Merge branch 'tickets/DM-10364'", "tree": {"sha": "4a53d630452f6478cf9a79fc01efc0a2604a3414", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/4a53d630452f6478cf9a79fc01efc0a2604a3414"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/23ec58ab060b80c249bcfc74e371414634fa7e0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/23ec58ab060b80c249bcfc74e371414634fa7e0d", "html_url": "https://github.com/lsst/dax_imgserv/commit/23ec58ab060b80c249bcfc74e371414634fa7e0d", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/23ec58ab060b80c249bcfc74e371414634fa7e0d/comments", "author": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ac59279d9938bee2c12ca4a2e13889a36b2f53b", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/3ac59279d9938bee2c12ca4a2e13889a36b2f53b", "html_url": "https://github.com/lsst/dax_imgserv/commit/3ac59279d9938bee2c12ca4a2e13889a36b2f53b"}, {"sha": "3e63a1ed9c8bdd98fac68bdfde8e15fae9f38480", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/3e63a1ed9c8bdd98fac68bdfde8e15fae9f38480", "html_url": "https://github.com/lsst/dax_imgserv/commit/3e63a1ed9c8bdd98fac68bdfde8e15fae9f38480"}]}, {"sha": "3e63a1ed9c8bdd98fac68bdfde8e15fae9f38480", "commit": {"author": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-04-28T17:29:11Z"}, "committer": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-05-02T16:42:59Z"}, "message": "Fix missing wcs header and off center issues in image cutouts.", "tree": {"sha": "4a53d630452f6478cf9a79fc01efc0a2604a3414", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/4a53d630452f6478cf9a79fc01efc0a2604a3414"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/3e63a1ed9c8bdd98fac68bdfde8e15fae9f38480", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/3e63a1ed9c8bdd98fac68bdfde8e15fae9f38480", "html_url": "https://github.com/lsst/dax_imgserv/commit/3e63a1ed9c8bdd98fac68bdfde8e15fae9f38480", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/3e63a1ed9c8bdd98fac68bdfde8e15fae9f38480/comments", "author": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ac59279d9938bee2c12ca4a2e13889a36b2f53b", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/3ac59279d9938bee2c12ca4a2e13889a36b2f53b", "html_url": "https://github.com/lsst/dax_imgserv/commit/3ac59279d9938bee2c12ca4a2e13889a36b2f53b"}]}, {"sha": "3ac59279d9938bee2c12ca4a2e13889a36b2f53b", "commit": {"author": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-04-21T21:06:00Z"}, "committer": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-04-21T21:06:00Z"}, "message": "Merge branch 'tickets/DM-9928'", "tree": {"sha": "255b864c97422019ac5a22e992a4648767921282", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/255b864c97422019ac5a22e992a4648767921282"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/3ac59279d9938bee2c12ca4a2e13889a36b2f53b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/3ac59279d9938bee2c12ca4a2e13889a36b2f53b", "html_url": "https://github.com/lsst/dax_imgserv/commit/3ac59279d9938bee2c12ca4a2e13889a36b2f53b", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/3ac59279d9938bee2c12ca4a2e13889a36b2f53b/comments", "author": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e32ac1eec8b1ef5ab9789f2ba252cd6cee56b100", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/e32ac1eec8b1ef5ab9789f2ba252cd6cee56b100", "html_url": "https://github.com/lsst/dax_imgserv/commit/e32ac1eec8b1ef5ab9789f2ba252cd6cee56b100"}, {"sha": "51f04bed3fa54d6b6a88e5396baab17adbba80d7", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/51f04bed3fa54d6b6a88e5396baab17adbba80d7", "html_url": "https://github.com/lsst/dax_imgserv/commit/51f04bed3fa54d6b6a88e5396baab17adbba80d7"}]}, {"sha": "51f04bed3fa54d6b6a88e5396baab17adbba80d7", "commit": {"author": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-04-21T21:03:49Z"}, "committer": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-04-21T21:03:49Z"}, "message": "Merge branch 'tickets/DM-9928' of https://github.com/lsst/dax_imgserv into tickets/DM-9928", "tree": {"sha": "255b864c97422019ac5a22e992a4648767921282", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/255b864c97422019ac5a22e992a4648767921282"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/51f04bed3fa54d6b6a88e5396baab17adbba80d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/51f04bed3fa54d6b6a88e5396baab17adbba80d7", "html_url": "https://github.com/lsst/dax_imgserv/commit/51f04bed3fa54d6b6a88e5396baab17adbba80d7", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/51f04bed3fa54d6b6a88e5396baab17adbba80d7/comments", "author": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ea2a9763cf2daf8bcf7ccc423e44b815ae21d48", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/5ea2a9763cf2daf8bcf7ccc423e44b815ae21d48", "html_url": "https://github.com/lsst/dax_imgserv/commit/5ea2a9763cf2daf8bcf7ccc423e44b815ae21d48"}, {"sha": "4292d3863a62dff61817b30fa41aef64130c1d55", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/4292d3863a62dff61817b30fa41aef64130c1d55", "html_url": "https://github.com/lsst/dax_imgserv/commit/4292d3863a62dff61817b30fa41aef64130c1d55"}]}, {"sha": "e32ac1eec8b1ef5ab9789f2ba252cd6cee56b100", "commit": {"author": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-04-21T21:02:11Z"}, "committer": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-04-21T21:02:11Z"}, "message": "Merge branch 'tickets/DM-9928'", "tree": {"sha": "255b864c97422019ac5a22e992a4648767921282", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/255b864c97422019ac5a22e992a4648767921282"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/e32ac1eec8b1ef5ab9789f2ba252cd6cee56b100", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/e32ac1eec8b1ef5ab9789f2ba252cd6cee56b100", "html_url": "https://github.com/lsst/dax_imgserv/commit/e32ac1eec8b1ef5ab9789f2ba252cd6cee56b100", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/e32ac1eec8b1ef5ab9789f2ba252cd6cee56b100/comments", "author": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0df1c2ac27a62802c2c05be5ebc58bfed27fc31", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/b0df1c2ac27a62802c2c05be5ebc58bfed27fc31", "html_url": "https://github.com/lsst/dax_imgserv/commit/b0df1c2ac27a62802c2c05be5ebc58bfed27fc31"}, {"sha": "5ea2a9763cf2daf8bcf7ccc423e44b815ae21d48", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/5ea2a9763cf2daf8bcf7ccc423e44b815ae21d48", "html_url": "https://github.com/lsst/dax_imgserv/commit/5ea2a9763cf2daf8bcf7ccc423e44b815ae21d48"}]}, {"sha": "5ea2a9763cf2daf8bcf7ccc423e44b815ae21d48", "commit": {"author": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-03-24T23:50:18Z"}, "committer": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-04-21T20:59:51Z"}, "message": "Add bug fixes for DM-9631. Output log messages to file. Load\nconfiguration from json file. Add static, templates, and config folders\nfor imgserv as flask app as well as the default contents.", "tree": {"sha": "255b864c97422019ac5a22e992a4648767921282", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/255b864c97422019ac5a22e992a4648767921282"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/5ea2a9763cf2daf8bcf7ccc423e44b815ae21d48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/5ea2a9763cf2daf8bcf7ccc423e44b815ae21d48", "html_url": "https://github.com/lsst/dax_imgserv/commit/5ea2a9763cf2daf8bcf7ccc423e44b815ae21d48", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/5ea2a9763cf2daf8bcf7ccc423e44b815ae21d48/comments", "author": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0df1c2ac27a62802c2c05be5ebc58bfed27fc31", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/b0df1c2ac27a62802c2c05be5ebc58bfed27fc31", "html_url": "https://github.com/lsst/dax_imgserv/commit/b0df1c2ac27a62802c2c05be5ebc58bfed27fc31"}]}, {"sha": "4292d3863a62dff61817b30fa41aef64130c1d55", "commit": {"author": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-04-21T19:16:12Z"}, "committer": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-04-21T19:16:12Z"}, "message": "Fix root path", "tree": {"sha": "255b864c97422019ac5a22e992a4648767921282", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/255b864c97422019ac5a22e992a4648767921282"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/4292d3863a62dff61817b30fa41aef64130c1d55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/4292d3863a62dff61817b30fa41aef64130c1d55", "html_url": "https://github.com/lsst/dax_imgserv/commit/4292d3863a62dff61817b30fa41aef64130c1d55", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/4292d3863a62dff61817b30fa41aef64130c1d55/comments", "author": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e99d2d86e97428cf9e65f65531166ecad2a828eb", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/e99d2d86e97428cf9e65f65531166ecad2a828eb", "html_url": "https://github.com/lsst/dax_imgserv/commit/e99d2d86e97428cf9e65f65531166ecad2a828eb"}]}, {"sha": "e99d2d86e97428cf9e65f65531166ecad2a828eb", "commit": {"author": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-04-21T18:48:28Z"}, "committer": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-04-21T18:48:28Z"}, "message": "Fixes", "tree": {"sha": "91fee3e6b9f0010c0ff65199060f64aa43bfe9ac", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/91fee3e6b9f0010c0ff65199060f64aa43bfe9ac"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/e99d2d86e97428cf9e65f65531166ecad2a828eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/e99d2d86e97428cf9e65f65531166ecad2a828eb", "html_url": "https://github.com/lsst/dax_imgserv/commit/e99d2d86e97428cf9e65f65531166ecad2a828eb", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/e99d2d86e97428cf9e65f65531166ecad2a828eb/comments", "author": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abe0a5a1ef9004536dc66cca98a2d7104c2ee94f", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/abe0a5a1ef9004536dc66cca98a2d7104c2ee94f", "html_url": "https://github.com/lsst/dax_imgserv/commit/abe0a5a1ef9004536dc66cca98a2d7104c2ee94f"}]}, {"sha": "abe0a5a1ef9004536dc66cca98a2d7104c2ee94f", "commit": {"author": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-03-24T23:50:18Z"}, "committer": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-04-04T00:03:05Z"}, "message": "Add bug fixes for DM-9631. Output log messages to file. Load\nconfiguration from json file. Add static, templates, and config folders\nfor imgserv as flask app as well as the default contents.", "tree": {"sha": "c37d8c32a2a630fec8b6e346a206a5688d1b2808", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/c37d8c32a2a630fec8b6e346a206a5688d1b2808"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/abe0a5a1ef9004536dc66cca98a2d7104c2ee94f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/abe0a5a1ef9004536dc66cca98a2d7104c2ee94f", "html_url": "https://github.com/lsst/dax_imgserv/commit/abe0a5a1ef9004536dc66cca98a2d7104c2ee94f", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/abe0a5a1ef9004536dc66cca98a2d7104c2ee94f/comments", "author": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0df1c2ac27a62802c2c05be5ebc58bfed27fc31", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/b0df1c2ac27a62802c2c05be5ebc58bfed27fc31", "html_url": "https://github.com/lsst/dax_imgserv/commit/b0df1c2ac27a62802c2c05be5ebc58bfed27fc31"}]}, {"sha": "b0df1c2ac27a62802c2c05be5ebc58bfed27fc31", "commit": {"author": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-03-16T22:43:33Z"}, "committer": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-03-16T22:43:33Z"}, "message": "Merge branch 'master' of https://github.com/lsst/dax_imgserv", "tree": {"sha": "64acd0cdbe706d090c10ea4b0894e545f5d5d1ce", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/64acd0cdbe706d090c10ea4b0894e545f5d5d1ce"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/b0df1c2ac27a62802c2c05be5ebc58bfed27fc31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/b0df1c2ac27a62802c2c05be5ebc58bfed27fc31", "html_url": "https://github.com/lsst/dax_imgserv/commit/b0df1c2ac27a62802c2c05be5ebc58bfed27fc31", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/b0df1c2ac27a62802c2c05be5ebc58bfed27fc31/comments", "author": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "384eb253f5e898e9c676a6635dfa18709df536e5", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/384eb253f5e898e9c676a6635dfa18709df536e5", "html_url": "https://github.com/lsst/dax_imgserv/commit/384eb253f5e898e9c676a6635dfa18709df536e5"}, {"sha": "4d90b264c308e54777c79231e91031c907c56c19", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/4d90b264c308e54777c79231e91031c907c56c19", "html_url": "https://github.com/lsst/dax_imgserv/commit/4d90b264c308e54777c79231e91031c907c56c19"}]}, {"sha": "384eb253f5e898e9c676a6635dfa18709df536e5", "commit": {"author": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-03-16T22:41:02Z"}, "committer": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-03-16T22:41:02Z"}, "message": "Merge branch 'tickets/DM-9631'", "tree": {"sha": "57a349ad4bb89d068b6b4d755f81aa59b97cdfc3", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/57a349ad4bb89d068b6b4d755f81aa59b97cdfc3"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/384eb253f5e898e9c676a6635dfa18709df536e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/384eb253f5e898e9c676a6635dfa18709df536e5", "html_url": "https://github.com/lsst/dax_imgserv/commit/384eb253f5e898e9c676a6635dfa18709df536e5", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/384eb253f5e898e9c676a6635dfa18709df536e5/comments", "author": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "081d5312ab62290bf7f4cc1db5243ab198a8aca3", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/081d5312ab62290bf7f4cc1db5243ab198a8aca3", "html_url": "https://github.com/lsst/dax_imgserv/commit/081d5312ab62290bf7f4cc1db5243ab198a8aca3"}, {"sha": "80cb4f205a55d5b88abf3f84257aeb3077939897", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/80cb4f205a55d5b88abf3f84257aeb3077939897", "html_url": "https://github.com/lsst/dax_imgserv/commit/80cb4f205a55d5b88abf3f84257aeb3077939897"}]}, {"sha": "80cb4f205a55d5b88abf3f84257aeb3077939897", "commit": {"author": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-03-04T01:26:56Z"}, "committer": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-03-16T22:31:44Z"}, "message": "Add support for image cutout by id for deepCoadd and raw images", "tree": {"sha": "57a349ad4bb89d068b6b4d755f81aa59b97cdfc3", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/57a349ad4bb89d068b6b4d755f81aa59b97cdfc3"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/80cb4f205a55d5b88abf3f84257aeb3077939897", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/80cb4f205a55d5b88abf3f84257aeb3077939897", "html_url": "https://github.com/lsst/dax_imgserv/commit/80cb4f205a55d5b88abf3f84257aeb3077939897", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/80cb4f205a55d5b88abf3f84257aeb3077939897/comments", "author": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "081d5312ab62290bf7f4cc1db5243ab198a8aca3", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/081d5312ab62290bf7f4cc1db5243ab198a8aca3", "html_url": "https://github.com/lsst/dax_imgserv/commit/081d5312ab62290bf7f4cc1db5243ab198a8aca3"}]}, {"sha": "ef46817b1ab41f1a3ee108d33a5950149deabf5e", "commit": {"author": {"name": "Brian Van Klaveren", "email": "bvan@slac.stanford.edu", "date": "2017-03-08T00:36:36Z"}, "committer": {"name": "Brian Van Klaveren", "email": "bvan@slac.stanford.edu", "date": "2017-03-08T00:36:36Z"}, "message": "Futurize", "tree": {"sha": "5913763c3ca3325ef3eac1c2ac278ceecdd63c2c", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/5913763c3ca3325ef3eac1c2ac278ceecdd63c2c"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/ef46817b1ab41f1a3ee108d33a5950149deabf5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/ef46817b1ab41f1a3ee108d33a5950149deabf5e", "html_url": "https://github.com/lsst/dax_imgserv/commit/ef46817b1ab41f1a3ee108d33a5950149deabf5e", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/ef46817b1ab41f1a3ee108d33a5950149deabf5e/comments", "author": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d90b264c308e54777c79231e91031c907c56c19", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/4d90b264c308e54777c79231e91031c907c56c19", "html_url": "https://github.com/lsst/dax_imgserv/commit/4d90b264c308e54777c79231e91031c907c56c19"}]}, {"sha": "4d90b264c308e54777c79231e91031c907c56c19", "commit": {"author": {"name": "Brian Van Klaveren", "email": "brianv0@users.noreply.github.com", "date": "2017-03-07T22:21:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-03-07T22:21:56Z"}, "message": "Merge pull request #17 from lsst/tickets/DM-7133\n\nUpdate to python_mysqlclient", "tree": {"sha": "24550403a7db920f6e09b0efe2ca596db7694f02", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/24550403a7db920f6e09b0efe2ca596db7694f02"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/4d90b264c308e54777c79231e91031c907c56c19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/4d90b264c308e54777c79231e91031c907c56c19", "html_url": "https://github.com/lsst/dax_imgserv/commit/4d90b264c308e54777c79231e91031c907c56c19", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/4d90b264c308e54777c79231e91031c907c56c19/comments", "author": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "081d5312ab62290bf7f4cc1db5243ab198a8aca3", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/081d5312ab62290bf7f4cc1db5243ab198a8aca3", "html_url": "https://github.com/lsst/dax_imgserv/commit/081d5312ab62290bf7f4cc1db5243ab198a8aca3"}, {"sha": "4562100477530523033a20d86e8c501c18c481d2", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/4562100477530523033a20d86e8c501c18c481d2", "html_url": "https://github.com/lsst/dax_imgserv/commit/4562100477530523033a20d86e8c501c18c481d2"}]}, {"sha": "4562100477530523033a20d86e8c501c18c481d2", "commit": {"author": {"name": "Brian Van Klaveren", "email": "bvan@slac.stanford.edu", "date": "2017-03-07T17:31:02Z"}, "committer": {"name": "Brian Van Klaveren", "email": "bvan@slac.stanford.edu", "date": "2017-03-07T17:31:02Z"}, "message": "Update to python_mysqlclient", "tree": {"sha": "958aafe111d07462943936f20d848eaf8d7d36e2", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/958aafe111d07462943936f20d848eaf8d7d36e2"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/4562100477530523033a20d86e8c501c18c481d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/4562100477530523033a20d86e8c501c18c481d2", "html_url": "https://github.com/lsst/dax_imgserv/commit/4562100477530523033a20d86e8c501c18c481d2", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/4562100477530523033a20d86e8c501c18c481d2/comments", "author": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d86b19161f2a750db036c7e71a966e7fbc440e17", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/d86b19161f2a750db036c7e71a966e7fbc440e17", "html_url": "https://github.com/lsst/dax_imgserv/commit/d86b19161f2a750db036c7e71a966e7fbc440e17"}]}, {"sha": "081d5312ab62290bf7f4cc1db5243ab198a8aca3", "commit": {"author": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-02-22T00:27:02Z"}, "committer": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-02-22T00:27:02Z"}, "message": "Merge branch 'tickets/DM-9115'", "tree": {"sha": "87ffeaf481f8e7101403a0e5ec3f6a604d5bb7de", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/87ffeaf481f8e7101403a0e5ec3f6a604d5bb7de"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/081d5312ab62290bf7f4cc1db5243ab198a8aca3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/081d5312ab62290bf7f4cc1db5243ab198a8aca3", "html_url": "https://github.com/lsst/dax_imgserv/commit/081d5312ab62290bf7f4cc1db5243ab198a8aca3", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/081d5312ab62290bf7f4cc1db5243ab198a8aca3/comments", "author": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3d7dd07511599c5c8ae80acaabacc982e7d8b68", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/b3d7dd07511599c5c8ae80acaabacc982e7d8b68", "html_url": "https://github.com/lsst/dax_imgserv/commit/b3d7dd07511599c5c8ae80acaabacc982e7d8b68"}, {"sha": "4d93d546ebd236efa962c26d01623cf3594fb653", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/4d93d546ebd236efa962c26d01623cf3594fb653", "html_url": "https://github.com/lsst/dax_imgserv/commit/4d93d546ebd236efa962c26d01623cf3594fb653"}]}, {"sha": "4d93d546ebd236efa962c26d01623cf3594fb653", "commit": {"author": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-02-21T23:04:07Z"}, "committer": {"name": "Kenny Lo", "email": "kennylo@slac.stanford.edu", "date": "2017-02-22T00:12:09Z"}, "message": "Added support for calexp cutout images by id", "tree": {"sha": "87ffeaf481f8e7101403a0e5ec3f6a604d5bb7de", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/87ffeaf481f8e7101403a0e5ec3f6a604d5bb7de"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/4d93d546ebd236efa962c26d01623cf3594fb653", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/4d93d546ebd236efa962c26d01623cf3594fb653", "html_url": "https://github.com/lsst/dax_imgserv/commit/4d93d546ebd236efa962c26d01623cf3594fb653", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/4d93d546ebd236efa962c26d01623cf3594fb653/comments", "author": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3d7dd07511599c5c8ae80acaabacc982e7d8b68", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/b3d7dd07511599c5c8ae80acaabacc982e7d8b68", "html_url": "https://github.com/lsst/dax_imgserv/commit/b3d7dd07511599c5c8ae80acaabacc982e7d8b68"}]}, {"sha": "b3d7dd07511599c5c8ae80acaabacc982e7d8b68", "commit": {"author": {"name": "Andy Salnikov", "email": "salnikov@slac.stanford.edu", "date": "2016-12-14T17:34:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-12-14T17:34:58Z"}, "message": "Merge pull request #14 from lsst/tickets/DM-8562\n\nRemove unused imports from db and cat packages.", "tree": {"sha": "b934fafe8572d4e14ee662a6e16759b7ab844670", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/b934fafe8572d4e14ee662a6e16759b7ab844670"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/b3d7dd07511599c5c8ae80acaabacc982e7d8b68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/b3d7dd07511599c5c8ae80acaabacc982e7d8b68", "html_url": "https://github.com/lsst/dax_imgserv/commit/b3d7dd07511599c5c8ae80acaabacc982e7d8b68", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/b3d7dd07511599c5c8ae80acaabacc982e7d8b68/comments", "author": {"login": "andy-slac", "id": 4266950, "avatar_url": "https://avatars1.githubusercontent.com/u/4266950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-slac", "html_url": "https://github.com/andy-slac", "followers_url": "https://api.github.com/users/andy-slac/followers", "following_url": "https://api.github.com/users/andy-slac/following{/other_user}", "gists_url": "https://api.github.com/users/andy-slac/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-slac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-slac/subscriptions", "organizations_url": "https://api.github.com/users/andy-slac/orgs", "repos_url": "https://api.github.com/users/andy-slac/repos", "events_url": "https://api.github.com/users/andy-slac/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-slac/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62a22f8c52eeff09edd99610a4bf9c53de05d4eb", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/62a22f8c52eeff09edd99610a4bf9c53de05d4eb", "html_url": "https://github.com/lsst/dax_imgserv/commit/62a22f8c52eeff09edd99610a4bf9c53de05d4eb"}, {"sha": "7f4eefe6c22b9cbe1d82eeacdd1df291f970d297", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/7f4eefe6c22b9cbe1d82eeacdd1df291f970d297", "html_url": "https://github.com/lsst/dax_imgserv/commit/7f4eefe6c22b9cbe1d82eeacdd1df291f970d297"}]}, {"sha": "7f4eefe6c22b9cbe1d82eeacdd1df291f970d297", "commit": {"author": {"name": "Andy Salnikov", "email": "salnikov@slac.stanford.edu", "date": "2016-12-05T19:18:29Z"}, "committer": {"name": "Andy Salnikov", "email": "salnikov@slac.stanford.edu", "date": "2016-12-05T19:18:29Z"}, "message": "Remove unused imports from db and cat packages.\n\nAlso removed cat from dependency list in table file.", "tree": {"sha": "b934fafe8572d4e14ee662a6e16759b7ab844670", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/b934fafe8572d4e14ee662a6e16759b7ab844670"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/7f4eefe6c22b9cbe1d82eeacdd1df291f970d297", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/7f4eefe6c22b9cbe1d82eeacdd1df291f970d297", "html_url": "https://github.com/lsst/dax_imgserv/commit/7f4eefe6c22b9cbe1d82eeacdd1df291f970d297", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/7f4eefe6c22b9cbe1d82eeacdd1df291f970d297/comments", "author": {"login": "andy-slac", "id": 4266950, "avatar_url": "https://avatars1.githubusercontent.com/u/4266950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-slac", "html_url": "https://github.com/andy-slac", "followers_url": "https://api.github.com/users/andy-slac/followers", "following_url": "https://api.github.com/users/andy-slac/following{/other_user}", "gists_url": "https://api.github.com/users/andy-slac/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-slac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-slac/subscriptions", "organizations_url": "https://api.github.com/users/andy-slac/orgs", "repos_url": "https://api.github.com/users/andy-slac/repos", "events_url": "https://api.github.com/users/andy-slac/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-slac/received_events", "type": "User", "site_admin": false}, "committer": {"login": "andy-slac", "id": 4266950, "avatar_url": "https://avatars1.githubusercontent.com/u/4266950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-slac", "html_url": "https://github.com/andy-slac", "followers_url": "https://api.github.com/users/andy-slac/followers", "following_url": "https://api.github.com/users/andy-slac/following{/other_user}", "gists_url": "https://api.github.com/users/andy-slac/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-slac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-slac/subscriptions", "organizations_url": "https://api.github.com/users/andy-slac/orgs", "repos_url": "https://api.github.com/users/andy-slac/repos", "events_url": "https://api.github.com/users/andy-slac/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-slac/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62a22f8c52eeff09edd99610a4bf9c53de05d4eb", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/62a22f8c52eeff09edd99610a4bf9c53de05d4eb", "html_url": "https://github.com/lsst/dax_imgserv/commit/62a22f8c52eeff09edd99610a4bf9c53de05d4eb"}]}, {"sha": "62a22f8c52eeff09edd99610a4bf9c53de05d4eb", "commit": {"author": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2016-12-01T18:21:16Z"}, "committer": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2016-12-01T18:21:16Z"}, "message": "Merge branch 'tickets/DM-7494'", "tree": {"sha": "a67231ec50b2937c7c24116f013496d3b6a536f4", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/a67231ec50b2937c7c24116f013496d3b6a536f4"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/62a22f8c52eeff09edd99610a4bf9c53de05d4eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/62a22f8c52eeff09edd99610a4bf9c53de05d4eb", "html_url": "https://github.com/lsst/dax_imgserv/commit/62a22f8c52eeff09edd99610a4bf9c53de05d4eb", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/62a22f8c52eeff09edd99610a4bf9c53de05d4eb/comments", "author": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d86b19161f2a750db036c7e71a966e7fbc440e17", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/d86b19161f2a750db036c7e71a966e7fbc440e17", "html_url": "https://github.com/lsst/dax_imgserv/commit/d86b19161f2a750db036c7e71a966e7fbc440e17"}, {"sha": "fbf2bb2e23385bde307bf9c81391e52ced743a6f", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/fbf2bb2e23385bde307bf9c81391e52ced743a6f", "html_url": "https://github.com/lsst/dax_imgserv/commit/fbf2bb2e23385bde307bf9c81391e52ced743a6f"}]}, {"sha": "fbf2bb2e23385bde307bf9c81391e52ced743a6f", "commit": {"author": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2016-12-01T17:08:20Z"}, "committer": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2016-12-01T18:18:41Z"}, "message": "Made review changes.", "tree": {"sha": "a67231ec50b2937c7c24116f013496d3b6a536f4", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/a67231ec50b2937c7c24116f013496d3b6a536f4"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/fbf2bb2e23385bde307bf9c81391e52ced743a6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/fbf2bb2e23385bde307bf9c81391e52ced743a6f", "html_url": "https://github.com/lsst/dax_imgserv/commit/fbf2bb2e23385bde307bf9c81391e52ced743a6f", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/fbf2bb2e23385bde307bf9c81391e52ced743a6f/comments", "author": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa51ff99f7cbe782c39ecd42edad1bf51282f390", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/fa51ff99f7cbe782c39ecd42edad1bf51282f390", "html_url": "https://github.com/lsst/dax_imgserv/commit/fa51ff99f7cbe782c39ecd42edad1bf51282f390"}]}, {"sha": "fa51ff99f7cbe782c39ecd42edad1bf51282f390", "commit": {"author": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2016-11-16T18:55:23Z"}, "committer": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2016-12-01T18:18:12Z"}, "message": "Changed id conversion for coadd images.", "tree": {"sha": "343a9e5f1acfd47eddcf161f20974227fd6bdd3d", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/343a9e5f1acfd47eddcf161f20974227fd6bdd3d"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/fa51ff99f7cbe782c39ecd42edad1bf51282f390", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/fa51ff99f7cbe782c39ecd42edad1bf51282f390", "html_url": "https://github.com/lsst/dax_imgserv/commit/fa51ff99f7cbe782c39ecd42edad1bf51282f390", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/fa51ff99f7cbe782c39ecd42edad1bf51282f390/comments", "author": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f736f2e7c5e7a8c303d1ee1a994daf5a1d96f385", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/f736f2e7c5e7a8c303d1ee1a994daf5a1d96f385", "html_url": "https://github.com/lsst/dax_imgserv/commit/f736f2e7c5e7a8c303d1ee1a994daf5a1d96f385"}]}, {"sha": "f736f2e7c5e7a8c303d1ee1a994daf5a1d96f385", "commit": {"author": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2016-11-14T20:29:02Z"}, "committer": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2016-12-01T18:18:05Z"}, "message": "Added ability to locate images by id number.", "tree": {"sha": "3d8017d3cee3470ab9fdd0d89c1b874b82d16a23", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/3d8017d3cee3470ab9fdd0d89c1b874b82d16a23"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/f736f2e7c5e7a8c303d1ee1a994daf5a1d96f385", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/f736f2e7c5e7a8c303d1ee1a994daf5a1d96f385", "html_url": "https://github.com/lsst/dax_imgserv/commit/f736f2e7c5e7a8c303d1ee1a994daf5a1d96f385", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/f736f2e7c5e7a8c303d1ee1a994daf5a1d96f385/comments", "author": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "876f87a67957077c6077f9c1a57bab2cd80c3a6e", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/876f87a67957077c6077f9c1a57bab2cd80c3a6e", "html_url": "https://github.com/lsst/dax_imgserv/commit/876f87a67957077c6077f9c1a57bab2cd80c3a6e"}]}, {"sha": "876f87a67957077c6077f9c1a57bab2cd80c3a6e", "commit": {"author": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2016-11-11T20:26:40Z"}, "committer": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2016-12-01T18:18:05Z"}, "message": "Added ability to get images by ids for raw and deepCoadd images.", "tree": {"sha": "4a2d5ee5402b1ee970d23343d2ccc34d12a22bf2", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/4a2d5ee5402b1ee970d23343d2ccc34d12a22bf2"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/876f87a67957077c6077f9c1a57bab2cd80c3a6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/876f87a67957077c6077f9c1a57bab2cd80c3a6e", "html_url": "https://github.com/lsst/dax_imgserv/commit/876f87a67957077c6077f9c1a57bab2cd80c3a6e", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/876f87a67957077c6077f9c1a57bab2cd80c3a6e/comments", "author": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a78ef3dfdc02b220a2ed0c9ff434eddb1af8e46", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/6a78ef3dfdc02b220a2ed0c9ff434eddb1af8e46", "html_url": "https://github.com/lsst/dax_imgserv/commit/6a78ef3dfdc02b220a2ed0c9ff434eddb1af8e46"}]}, {"sha": "6a78ef3dfdc02b220a2ed0c9ff434eddb1af8e46", "commit": {"author": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2016-11-11T18:49:11Z"}, "committer": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2016-12-01T18:18:05Z"}, "message": "Added check for filter name.", "tree": {"sha": "5422a628f68f9e3916d9f4164f557da96ced58df", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/5422a628f68f9e3916d9f4164f557da96ced58df"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/6a78ef3dfdc02b220a2ed0c9ff434eddb1af8e46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/6a78ef3dfdc02b220a2ed0c9ff434eddb1af8e46", "html_url": "https://github.com/lsst/dax_imgserv/commit/6a78ef3dfdc02b220a2ed0c9ff434eddb1af8e46", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/6a78ef3dfdc02b220a2ed0c9ff434eddb1af8e46/comments", "author": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83f148c4f8828bb7e94c49396e97923b7a781f3c", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/83f148c4f8828bb7e94c49396e97923b7a781f3c", "html_url": "https://github.com/lsst/dax_imgserv/commit/83f148c4f8828bb7e94c49396e97923b7a781f3c"}]}, {"sha": "83f148c4f8828bb7e94c49396e97923b7a781f3c", "commit": {"author": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2016-11-11T17:17:51Z"}, "committer": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2016-12-01T18:18:05Z"}, "message": "Change repository paths to complete data sets.", "tree": {"sha": "d24564b4006fbe5be047c14aab5686b2ec0bbd1f", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/d24564b4006fbe5be047c14aab5686b2ec0bbd1f"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/83f148c4f8828bb7e94c49396e97923b7a781f3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/83f148c4f8828bb7e94c49396e97923b7a781f3c", "html_url": "https://github.com/lsst/dax_imgserv/commit/83f148c4f8828bb7e94c49396e97923b7a781f3c", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/83f148c4f8828bb7e94c49396e97923b7a781f3c/comments", "author": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "712384f69cf2107235e471d35ca9aa203ee5c103", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/712384f69cf2107235e471d35ca9aa203ee5c103", "html_url": "https://github.com/lsst/dax_imgserv/commit/712384f69cf2107235e471d35ca9aa203ee5c103"}]}, {"sha": "712384f69cf2107235e471d35ca9aa203ee5c103", "commit": {"author": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2016-11-10T21:29:32Z"}, "committer": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2016-12-01T18:17:55Z"}, "message": "Added id based image retrieval.", "tree": {"sha": "47850ec2a8653c9ebc793b4254bb5185531824ed", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/47850ec2a8653c9ebc793b4254bb5185531824ed"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/712384f69cf2107235e471d35ca9aa203ee5c103", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/712384f69cf2107235e471d35ca9aa203ee5c103", "html_url": "https://github.com/lsst/dax_imgserv/commit/712384f69cf2107235e471d35ca9aa203ee5c103", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/712384f69cf2107235e471d35ca9aa203ee5c103/comments", "author": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dd221465bb7b98c4c1fa01ff7c648e58aed005f", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/7dd221465bb7b98c4c1fa01ff7c648e58aed005f", "html_url": "https://github.com/lsst/dax_imgserv/commit/7dd221465bb7b98c4c1fa01ff7c648e58aed005f"}]}, {"sha": "7dd221465bb7b98c4c1fa01ff7c648e58aed005f", "commit": {"author": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2016-11-09T17:24:48Z"}, "committer": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2016-12-01T18:17:55Z"}, "message": "Cleaned up change to locating images by RA and Dec.", "tree": {"sha": "829ecab80d12ccc3c92606ce39de918e6aa63cb9", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/829ecab80d12ccc3c92606ce39de918e6aa63cb9"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/7dd221465bb7b98c4c1fa01ff7c648e58aed005f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/7dd221465bb7b98c4c1fa01ff7c648e58aed005f", "html_url": "https://github.com/lsst/dax_imgserv/commit/7dd221465bb7b98c4c1fa01ff7c648e58aed005f", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/7dd221465bb7b98c4c1fa01ff7c648e58aed005f/comments", "author": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d9a009d14f993707af2215e58147331d257fc17", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/9d9a009d14f993707af2215e58147331d257fc17", "html_url": "https://github.com/lsst/dax_imgserv/commit/9d9a009d14f993707af2215e58147331d257fc17"}]}, {"sha": "9d9a009d14f993707af2215e58147331d257fc17", "commit": {"author": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2016-11-09T16:48:42Z"}, "committer": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2016-12-01T18:17:48Z"}, "message": "Incomplete code to test function change.", "tree": {"sha": "a8a9e70a327759b87fd234e0ef77490f7efc30ae", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/a8a9e70a327759b87fd234e0ef77490f7efc30ae"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/9d9a009d14f993707af2215e58147331d257fc17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/9d9a009d14f993707af2215e58147331d257fc17", "html_url": "https://github.com/lsst/dax_imgserv/commit/9d9a009d14f993707af2215e58147331d257fc17", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/9d9a009d14f993707af2215e58147331d257fc17/comments", "author": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a4b56bd8a8d6ad7dd67483239e6f92dfd5aeaa9", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/9a4b56bd8a8d6ad7dd67483239e6f92dfd5aeaa9", "html_url": "https://github.com/lsst/dax_imgserv/commit/9a4b56bd8a8d6ad7dd67483239e6f92dfd5aeaa9"}]}, {"sha": "9a4b56bd8a8d6ad7dd67483239e6f92dfd5aeaa9", "commit": {"author": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2016-10-28T20:30:04Z"}, "committer": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2016-12-01T18:17:40Z"}, "message": "Changed raw image root directory.", "tree": {"sha": "a8bd54c576b5ad3549f8dfa8b7932cbbef6787d8", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/a8bd54c576b5ad3549f8dfa8b7932cbbef6787d8"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/9a4b56bd8a8d6ad7dd67483239e6f92dfd5aeaa9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/9a4b56bd8a8d6ad7dd67483239e6f92dfd5aeaa9", "html_url": "https://github.com/lsst/dax_imgserv/commit/9a4b56bd8a8d6ad7dd67483239e6f92dfd5aeaa9", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/9a4b56bd8a8d6ad7dd67483239e6f92dfd5aeaa9/comments", "author": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e96388eec462ffe05dc42c4049484a9b3441de24", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/e96388eec462ffe05dc42c4049484a9b3441de24", "html_url": "https://github.com/lsst/dax_imgserv/commit/e96388eec462ffe05dc42c4049484a9b3441de24"}]}, {"sha": "e96388eec462ffe05dc42c4049484a9b3441de24", "commit": {"author": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2016-10-28T17:18:18Z"}, "committer": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2016-10-28T17:18:18Z"}, "message": "Added Calexp functions.", "tree": {"sha": "6711892d45ccd2eb7c409e17a760ba5c248ea4b5", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/6711892d45ccd2eb7c409e17a760ba5c248ea4b5"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/e96388eec462ffe05dc42c4049484a9b3441de24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/e96388eec462ffe05dc42c4049484a9b3441de24", "html_url": "https://github.com/lsst/dax_imgserv/commit/e96388eec462ffe05dc42c4049484a9b3441de24", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/e96388eec462ffe05dc42c4049484a9b3441de24/comments", "author": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57804232c0fb077437283803907cf80fd4e4799b", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/57804232c0fb077437283803907cf80fd4e4799b", "html_url": "https://github.com/lsst/dax_imgserv/commit/57804232c0fb077437283803907cf80fd4e4799b"}]}, {"sha": "57804232c0fb077437283803907cf80fd4e4799b", "commit": {"author": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2016-10-25T22:34:10Z"}, "committer": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2016-10-28T17:04:33Z"}, "message": "Added calexp option to REST.", "tree": {"sha": "f69214697f5302a56dd0783f6d057543b217f7b3", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/f69214697f5302a56dd0783f6d057543b217f7b3"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/57804232c0fb077437283803907cf80fd4e4799b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/57804232c0fb077437283803907cf80fd4e4799b", "html_url": "https://github.com/lsst/dax_imgserv/commit/57804232c0fb077437283803907cf80fd4e4799b", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/57804232c0fb077437283803907cf80fd4e4799b/comments", "author": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41d155ea2d9069ccee271542338c434d613f391d", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/41d155ea2d9069ccee271542338c434d613f391d", "html_url": "https://github.com/lsst/dax_imgserv/commit/41d155ea2d9069ccee271542338c434d613f391d"}]}, {"sha": "41d155ea2d9069ccee271542338c434d613f391d", "commit": {"author": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2016-10-24T19:39:38Z"}, "committer": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2016-10-28T17:02:46Z"}, "message": "Modified to work with data sets on PDAC.", "tree": {"sha": "eda8283a1f4a9cf409a5d1736199137ecfa1b6de", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/eda8283a1f4a9cf409a5d1736199137ecfa1b6de"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/41d155ea2d9069ccee271542338c434d613f391d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/41d155ea2d9069ccee271542338c434d613f391d", "html_url": "https://github.com/lsst/dax_imgserv/commit/41d155ea2d9069ccee271542338c434d613f391d", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/41d155ea2d9069ccee271542338c434d613f391d/comments", "author": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d86b19161f2a750db036c7e71a966e7fbc440e17", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/d86b19161f2a750db036c7e71a966e7fbc440e17", "html_url": "https://github.com/lsst/dax_imgserv/commit/d86b19161f2a750db036c7e71a966e7fbc440e17"}]}, {"sha": "d86b19161f2a750db036c7e71a966e7fbc440e17", "commit": {"author": {"name": "Joshua Hoblitt", "email": "josh@hoblitt.com", "date": "2016-01-25T20:07:05Z"}, "committer": {"name": "Joshua Hoblitt", "email": "josh@hoblitt.com", "date": "2016-01-25T20:07:05Z"}, "message": "Merge pull request #12 from lsst/tickets/DM-4347-fix-deps\n\n(DM-4347) fix anaconda deps", "tree": {"sha": "d0b525a8b887ab90d6f8c601e6fefd24e91dcd0e", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/d0b525a8b887ab90d6f8c601e6fefd24e91dcd0e"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/d86b19161f2a750db036c7e71a966e7fbc440e17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/d86b19161f2a750db036c7e71a966e7fbc440e17", "html_url": "https://github.com/lsst/dax_imgserv/commit/d86b19161f2a750db036c7e71a966e7fbc440e17", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/d86b19161f2a750db036c7e71a966e7fbc440e17/comments", "author": {"login": "jhoblitt", "id": 948901, "avatar_url": "https://avatars3.githubusercontent.com/u/948901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhoblitt", "html_url": "https://github.com/jhoblitt", "followers_url": "https://api.github.com/users/jhoblitt/followers", "following_url": "https://api.github.com/users/jhoblitt/following{/other_user}", "gists_url": "https://api.github.com/users/jhoblitt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhoblitt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhoblitt/subscriptions", "organizations_url": "https://api.github.com/users/jhoblitt/orgs", "repos_url": "https://api.github.com/users/jhoblitt/repos", "events_url": "https://api.github.com/users/jhoblitt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhoblitt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhoblitt", "id": 948901, "avatar_url": "https://avatars3.githubusercontent.com/u/948901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhoblitt", "html_url": "https://github.com/jhoblitt", "followers_url": "https://api.github.com/users/jhoblitt/followers", "following_url": "https://api.github.com/users/jhoblitt/following{/other_user}", "gists_url": "https://api.github.com/users/jhoblitt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhoblitt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhoblitt/subscriptions", "organizations_url": "https://api.github.com/users/jhoblitt/orgs", "repos_url": "https://api.github.com/users/jhoblitt/repos", "events_url": "https://api.github.com/users/jhoblitt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhoblitt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "940d969e61b6fb646a7279169552965168333a31", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/940d969e61b6fb646a7279169552965168333a31", "html_url": "https://github.com/lsst/dax_imgserv/commit/940d969e61b6fb646a7279169552965168333a31"}, {"sha": "29075265039feb268a86645329f6aea75401089b", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/29075265039feb268a86645329f6aea75401089b", "html_url": "https://github.com/lsst/dax_imgserv/commit/29075265039feb268a86645329f6aea75401089b"}]}, {"sha": "29075265039feb268a86645329f6aea75401089b", "commit": {"author": {"name": "Joshua Hoblitt", "email": "josh@hoblitt.com", "date": "2016-01-25T17:09:21Z"}, "committer": {"name": "Joshua Hoblitt", "email": "josh@hoblitt.com", "date": "2016-01-25T18:02:48Z"}, "message": "add missing deps to eups table file\n\n- doxygen\n- python\n- scons\n- sqlalchemy", "tree": {"sha": "d0b525a8b887ab90d6f8c601e6fefd24e91dcd0e", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/d0b525a8b887ab90d6f8c601e6fefd24e91dcd0e"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/29075265039feb268a86645329f6aea75401089b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/29075265039feb268a86645329f6aea75401089b", "html_url": "https://github.com/lsst/dax_imgserv/commit/29075265039feb268a86645329f6aea75401089b", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/29075265039feb268a86645329f6aea75401089b/comments", "author": {"login": "jhoblitt", "id": 948901, "avatar_url": "https://avatars3.githubusercontent.com/u/948901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhoblitt", "html_url": "https://github.com/jhoblitt", "followers_url": "https://api.github.com/users/jhoblitt/followers", "following_url": "https://api.github.com/users/jhoblitt/following{/other_user}", "gists_url": "https://api.github.com/users/jhoblitt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhoblitt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhoblitt/subscriptions", "organizations_url": "https://api.github.com/users/jhoblitt/orgs", "repos_url": "https://api.github.com/users/jhoblitt/repos", "events_url": "https://api.github.com/users/jhoblitt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhoblitt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhoblitt", "id": 948901, "avatar_url": "https://avatars3.githubusercontent.com/u/948901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhoblitt", "html_url": "https://github.com/jhoblitt", "followers_url": "https://api.github.com/users/jhoblitt/followers", "following_url": "https://api.github.com/users/jhoblitt/following{/other_user}", "gists_url": "https://api.github.com/users/jhoblitt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhoblitt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhoblitt/subscriptions", "organizations_url": "https://api.github.com/users/jhoblitt/orgs", "repos_url": "https://api.github.com/users/jhoblitt/repos", "events_url": "https://api.github.com/users/jhoblitt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhoblitt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cdb8992812fcd43f3e05c8a4d8ee7304da4337d", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/3cdb8992812fcd43f3e05c8a4d8ee7304da4337d", "html_url": "https://github.com/lsst/dax_imgserv/commit/3cdb8992812fcd43f3e05c8a4d8ee7304da4337d"}]}, {"sha": "3cdb8992812fcd43f3e05c8a4d8ee7304da4337d", "commit": {"author": {"name": "Joshua Hoblitt", "email": "josh@hoblitt.com", "date": "2016-01-25T17:06:03Z"}, "committer": {"name": "Joshua Hoblitt", "email": "josh@hoblitt.com", "date": "2016-01-25T17:06:03Z"}, "message": "Revert \"Expect test failure until dependencies are fixed.\"\n\nThis reverts commit 1b12a10ff54f5a2327597e492bda163cf690c3ce.", "tree": {"sha": "2cc1b144b380785d1269f8b9dc4d71e4c9c5b4d8", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/2cc1b144b380785d1269f8b9dc4d71e4c9c5b4d8"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/3cdb8992812fcd43f3e05c8a4d8ee7304da4337d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/3cdb8992812fcd43f3e05c8a4d8ee7304da4337d", "html_url": "https://github.com/lsst/dax_imgserv/commit/3cdb8992812fcd43f3e05c8a4d8ee7304da4337d", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/3cdb8992812fcd43f3e05c8a4d8ee7304da4337d/comments", "author": {"login": "jhoblitt", "id": 948901, "avatar_url": "https://avatars3.githubusercontent.com/u/948901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhoblitt", "html_url": "https://github.com/jhoblitt", "followers_url": "https://api.github.com/users/jhoblitt/followers", "following_url": "https://api.github.com/users/jhoblitt/following{/other_user}", "gists_url": "https://api.github.com/users/jhoblitt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhoblitt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhoblitt/subscriptions", "organizations_url": "https://api.github.com/users/jhoblitt/orgs", "repos_url": "https://api.github.com/users/jhoblitt/repos", "events_url": "https://api.github.com/users/jhoblitt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhoblitt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhoblitt", "id": 948901, "avatar_url": "https://avatars3.githubusercontent.com/u/948901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhoblitt", "html_url": "https://github.com/jhoblitt", "followers_url": "https://api.github.com/users/jhoblitt/followers", "following_url": "https://api.github.com/users/jhoblitt/following{/other_user}", "gists_url": "https://api.github.com/users/jhoblitt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhoblitt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhoblitt/subscriptions", "organizations_url": "https://api.github.com/users/jhoblitt/orgs", "repos_url": "https://api.github.com/users/jhoblitt/repos", "events_url": "https://api.github.com/users/jhoblitt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhoblitt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8afcc9a100b680a6ecf3bb5ef08805fc5621073", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/e8afcc9a100b680a6ecf3bb5ef08805fc5621073", "html_url": "https://github.com/lsst/dax_imgserv/commit/e8afcc9a100b680a6ecf3bb5ef08805fc5621073"}]}, {"sha": "e8afcc9a100b680a6ecf3bb5ef08805fc5621073", "commit": {"author": {"name": "Joshua Hoblitt", "email": "josh@hoblitt.com", "date": "2016-01-25T17:05:30Z"}, "committer": {"name": "Joshua Hoblitt", "email": "josh@hoblitt.com", "date": "2016-01-25T17:05:30Z"}, "message": "Revert \"Use proper argument\"\n\nThis reverts commit 940d969e61b6fb646a7279169552965168333a31.", "tree": {"sha": "0b6b353d0bc9347b77b6e297b41de460195fad33", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/0b6b353d0bc9347b77b6e297b41de460195fad33"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/e8afcc9a100b680a6ecf3bb5ef08805fc5621073", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/e8afcc9a100b680a6ecf3bb5ef08805fc5621073", "html_url": "https://github.com/lsst/dax_imgserv/commit/e8afcc9a100b680a6ecf3bb5ef08805fc5621073", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/e8afcc9a100b680a6ecf3bb5ef08805fc5621073/comments", "author": {"login": "jhoblitt", "id": 948901, "avatar_url": "https://avatars3.githubusercontent.com/u/948901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhoblitt", "html_url": "https://github.com/jhoblitt", "followers_url": "https://api.github.com/users/jhoblitt/followers", "following_url": "https://api.github.com/users/jhoblitt/following{/other_user}", "gists_url": "https://api.github.com/users/jhoblitt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhoblitt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhoblitt/subscriptions", "organizations_url": "https://api.github.com/users/jhoblitt/orgs", "repos_url": "https://api.github.com/users/jhoblitt/repos", "events_url": "https://api.github.com/users/jhoblitt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhoblitt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhoblitt", "id": 948901, "avatar_url": "https://avatars3.githubusercontent.com/u/948901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhoblitt", "html_url": "https://github.com/jhoblitt", "followers_url": "https://api.github.com/users/jhoblitt/followers", "following_url": "https://api.github.com/users/jhoblitt/following{/other_user}", "gists_url": "https://api.github.com/users/jhoblitt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhoblitt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhoblitt/subscriptions", "organizations_url": "https://api.github.com/users/jhoblitt/orgs", "repos_url": "https://api.github.com/users/jhoblitt/repos", "events_url": "https://api.github.com/users/jhoblitt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhoblitt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "940d969e61b6fb646a7279169552965168333a31", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/940d969e61b6fb646a7279169552965168333a31", "html_url": "https://github.com/lsst/dax_imgserv/commit/940d969e61b6fb646a7279169552965168333a31"}]}, {"sha": "940d969e61b6fb646a7279169552965168333a31", "commit": {"author": {"name": "ktlim", "email": "ktl@slac.stanford.edu", "date": "2016-01-23T06:42:28Z"}, "committer": {"name": "ktlim", "email": "ktl@slac.stanford.edu", "date": "2016-01-23T06:42:28Z"}, "message": "Use proper argument", "tree": {"sha": "5cfdfaa3b46d485e4e3cfffa1209b3c28a1971f5", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/5cfdfaa3b46d485e4e3cfffa1209b3c28a1971f5"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/940d969e61b6fb646a7279169552965168333a31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/940d969e61b6fb646a7279169552965168333a31", "html_url": "https://github.com/lsst/dax_imgserv/commit/940d969e61b6fb646a7279169552965168333a31", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/940d969e61b6fb646a7279169552965168333a31/comments", "author": {"login": "ktlim", "id": 1054393, "avatar_url": "https://avatars3.githubusercontent.com/u/1054393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktlim", "html_url": "https://github.com/ktlim", "followers_url": "https://api.github.com/users/ktlim/followers", "following_url": "https://api.github.com/users/ktlim/following{/other_user}", "gists_url": "https://api.github.com/users/ktlim/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktlim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktlim/subscriptions", "organizations_url": "https://api.github.com/users/ktlim/orgs", "repos_url": "https://api.github.com/users/ktlim/repos", "events_url": "https://api.github.com/users/ktlim/events{/privacy}", "received_events_url": "https://api.github.com/users/ktlim/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktlim", "id": 1054393, "avatar_url": "https://avatars3.githubusercontent.com/u/1054393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktlim", "html_url": "https://github.com/ktlim", "followers_url": "https://api.github.com/users/ktlim/followers", "following_url": "https://api.github.com/users/ktlim/following{/other_user}", "gists_url": "https://api.github.com/users/ktlim/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktlim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktlim/subscriptions", "organizations_url": "https://api.github.com/users/ktlim/orgs", "repos_url": "https://api.github.com/users/ktlim/repos", "events_url": "https://api.github.com/users/ktlim/events{/privacy}", "received_events_url": "https://api.github.com/users/ktlim/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b12a10ff54f5a2327597e492bda163cf690c3ce", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/1b12a10ff54f5a2327597e492bda163cf690c3ce", "html_url": "https://github.com/lsst/dax_imgserv/commit/1b12a10ff54f5a2327597e492bda163cf690c3ce"}]}, {"sha": "1b12a10ff54f5a2327597e492bda163cf690c3ce", "commit": {"author": {"name": "ktlim", "email": "ktl@slac.stanford.edu", "date": "2016-01-23T06:36:09Z"}, "committer": {"name": "ktlim", "email": "ktl@slac.stanford.edu", "date": "2016-01-23T06:36:09Z"}, "message": "Expect test failure until dependencies are fixed.\n\nThis package depends on the eups-packaged anaconda, which in turn installs a specific version.  That version differs from the miniconda used by Jenkins to build afw.  As a result, there is a numpy conflict on import.\r\n\r\nTemporarily expect test failures to avoid Jenkins complaints until we can fix this somehow.  A fix is expected to take one or more of the following forms:\r\n * update anaconda to install a compatible version\r\n * eups-package the dependencies provided by anaconda so that they can be installed into the miniconda environment\r\n * develop a better way of expressing Python dependencies that doesn't require repackaging\r\n\r\nAlso rationalized by observing that the code in this package is still more like an advanced prototype than a product -- it is fairly specific to a single camera's data products (and the code comments are specific to a particular processing of those data products).", "tree": {"sha": "0b6b353d0bc9347b77b6e297b41de460195fad33", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/0b6b353d0bc9347b77b6e297b41de460195fad33"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/1b12a10ff54f5a2327597e492bda163cf690c3ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/1b12a10ff54f5a2327597e492bda163cf690c3ce", "html_url": "https://github.com/lsst/dax_imgserv/commit/1b12a10ff54f5a2327597e492bda163cf690c3ce", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/1b12a10ff54f5a2327597e492bda163cf690c3ce/comments", "author": {"login": "ktlim", "id": 1054393, "avatar_url": "https://avatars3.githubusercontent.com/u/1054393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktlim", "html_url": "https://github.com/ktlim", "followers_url": "https://api.github.com/users/ktlim/followers", "following_url": "https://api.github.com/users/ktlim/following{/other_user}", "gists_url": "https://api.github.com/users/ktlim/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktlim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktlim/subscriptions", "organizations_url": "https://api.github.com/users/ktlim/orgs", "repos_url": "https://api.github.com/users/ktlim/repos", "events_url": "https://api.github.com/users/ktlim/events{/privacy}", "received_events_url": "https://api.github.com/users/ktlim/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktlim", "id": 1054393, "avatar_url": "https://avatars3.githubusercontent.com/u/1054393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktlim", "html_url": "https://github.com/ktlim", "followers_url": "https://api.github.com/users/ktlim/followers", "following_url": "https://api.github.com/users/ktlim/following{/other_user}", "gists_url": "https://api.github.com/users/ktlim/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktlim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktlim/subscriptions", "organizations_url": "https://api.github.com/users/ktlim/orgs", "repos_url": "https://api.github.com/users/ktlim/repos", "events_url": "https://api.github.com/users/ktlim/events{/privacy}", "received_events_url": "https://api.github.com/users/ktlim/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6344c3bb814ef9d1fd1a81edfa0057b784f8b130", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/6344c3bb814ef9d1fd1a81edfa0057b784f8b130", "html_url": "https://github.com/lsst/dax_imgserv/commit/6344c3bb814ef9d1fd1a81edfa0057b784f8b130"}]}, {"sha": "6344c3bb814ef9d1fd1a81edfa0057b784f8b130", "commit": {"author": {"name": "Brian Van Klaveren", "email": "brianv0@users.noreply.github.com", "date": "2015-09-30T20:24:27Z"}, "committer": {"name": "Brian Van Klaveren", "email": "brianv0@users.noreply.github.com", "date": "2015-09-30T20:24:27Z"}, "message": "Merge pull request #10 from lsst/tickets/DM-3571\n\nSupport default and request-defined source parameter", "tree": {"sha": "2cc1b144b380785d1269f8b9dc4d71e4c9c5b4d8", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/2cc1b144b380785d1269f8b9dc4d71e4c9c5b4d8"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/6344c3bb814ef9d1fd1a81edfa0057b784f8b130", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/6344c3bb814ef9d1fd1a81edfa0057b784f8b130", "html_url": "https://github.com/lsst/dax_imgserv/commit/6344c3bb814ef9d1fd1a81edfa0057b784f8b130", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/6344c3bb814ef9d1fd1a81edfa0057b784f8b130/comments", "author": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "278551254b16a4a4b9953d1bab6e5f7d3527312d", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/278551254b16a4a4b9953d1bab6e5f7d3527312d", "html_url": "https://github.com/lsst/dax_imgserv/commit/278551254b16a4a4b9953d1bab6e5f7d3527312d"}, {"sha": "a5b47e580fa54410f7a576bf0a1d196831de947e", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/a5b47e580fa54410f7a576bf0a1d196831de947e", "html_url": "https://github.com/lsst/dax_imgserv/commit/a5b47e580fa54410f7a576bf0a1d196831de947e"}]}, {"sha": "a5b47e580fa54410f7a576bf0a1d196831de947e", "commit": {"author": {"name": "Brian Van Klaveren", "email": "bvan@slac.stanford.edu", "date": "2015-09-30T00:09:13Z"}, "committer": {"name": "Brian Van Klaveren", "email": "bvan@slac.stanford.edu", "date": "2015-09-30T19:14:06Z"}, "message": "Support both a default source argument and allow users to append an optional query parameter for an alternate source.\nRemove print function (already logged at info level)\nRename request to _request so it's clear that method is passed from the initial call into the Blueprint methods.\nUse Sphinx REST API documentation for a few methods.\nMake PEP8 checker happier.\nCatch exception from Butler if no mapper is found or the path doesn't exist.\nRemove print import.", "tree": {"sha": "b51f9a864626aee4362c38cb311066b011c3fed7", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/b51f9a864626aee4362c38cb311066b011c3fed7"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/a5b47e580fa54410f7a576bf0a1d196831de947e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/a5b47e580fa54410f7a576bf0a1d196831de947e", "html_url": "https://github.com/lsst/dax_imgserv/commit/a5b47e580fa54410f7a576bf0a1d196831de947e", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/a5b47e580fa54410f7a576bf0a1d196831de947e/comments", "author": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d4b39ab2d045ad1ed9876b304b1dea767b0054a", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/0d4b39ab2d045ad1ed9876b304b1dea767b0054a", "html_url": "https://github.com/lsst/dax_imgserv/commit/0d4b39ab2d045ad1ed9876b304b1dea767b0054a"}]}, {"sha": "278551254b16a4a4b9953d1bab6e5f7d3527312d", "commit": {"author": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-09-30T16:55:14Z"}, "committer": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-09-30T16:55:14Z"}, "message": "Merge branch 'tickets/DM-3980'", "tree": {"sha": "8f6e4d3a1f167e9cd97a93aa49dc12228891d5bc", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/8f6e4d3a1f167e9cd97a93aa49dc12228891d5bc"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/278551254b16a4a4b9953d1bab6e5f7d3527312d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/278551254b16a4a4b9953d1bab6e5f7d3527312d", "html_url": "https://github.com/lsst/dax_imgserv/commit/278551254b16a4a4b9953d1bab6e5f7d3527312d", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/278551254b16a4a4b9953d1bab6e5f7d3527312d/comments", "author": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d4b39ab2d045ad1ed9876b304b1dea767b0054a", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/0d4b39ab2d045ad1ed9876b304b1dea767b0054a", "html_url": "https://github.com/lsst/dax_imgserv/commit/0d4b39ab2d045ad1ed9876b304b1dea767b0054a"}, {"sha": "56762e76ca199ba100eb8fa9e075a0c0faec928f", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/56762e76ca199ba100eb8fa9e075a0c0faec928f", "html_url": "https://github.com/lsst/dax_imgserv/commit/56762e76ca199ba100eb8fa9e075a0c0faec928f"}]}, {"sha": "56762e76ca199ba100eb8fa9e075a0c0faec928f", "commit": {"author": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-09-30T16:30:15Z"}, "committer": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-09-30T16:54:55Z"}, "message": "unneeded if removed", "tree": {"sha": "8f6e4d3a1f167e9cd97a93aa49dc12228891d5bc", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/8f6e4d3a1f167e9cd97a93aa49dc12228891d5bc"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/56762e76ca199ba100eb8fa9e075a0c0faec928f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/56762e76ca199ba100eb8fa9e075a0c0faec928f", "html_url": "https://github.com/lsst/dax_imgserv/commit/56762e76ca199ba100eb8fa9e075a0c0faec928f", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/56762e76ca199ba100eb8fa9e075a0c0faec928f/comments", "author": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d4b39ab2d045ad1ed9876b304b1dea767b0054a", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/0d4b39ab2d045ad1ed9876b304b1dea767b0054a", "html_url": "https://github.com/lsst/dax_imgserv/commit/0d4b39ab2d045ad1ed9876b304b1dea767b0054a"}]}, {"sha": "0d4b39ab2d045ad1ed9876b304b1dea767b0054a", "commit": {"author": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-09-23T16:02:19Z"}, "committer": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-09-23T16:02:19Z"}, "message": "fixes (typo, failure prevention when credentials not found)", "tree": {"sha": "055f2ede022f2cdd1dc97879bc638400bb19713a", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/055f2ede022f2cdd1dc97879bc638400bb19713a"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/0d4b39ab2d045ad1ed9876b304b1dea767b0054a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/0d4b39ab2d045ad1ed9876b304b1dea767b0054a", "html_url": "https://github.com/lsst/dax_imgserv/commit/0d4b39ab2d045ad1ed9876b304b1dea767b0054a", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/0d4b39ab2d045ad1ed9876b304b1dea767b0054a/comments", "author": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c75955a592a08e0d9743a486de83fb4ee33be9fc", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/c75955a592a08e0d9743a486de83fb4ee33be9fc", "html_url": "https://github.com/lsst/dax_imgserv/commit/c75955a592a08e0d9743a486de83fb4ee33be9fc"}]}, {"sha": "c75955a592a08e0d9743a486de83fb4ee33be9fc", "commit": {"author": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-09-23T15:56:26Z"}, "committer": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-09-23T15:56:26Z"}, "message": "Additional fixes applied", "tree": {"sha": "d822d719e637a815c8dbebf76b18dcc27564e364", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/d822d719e637a815c8dbebf76b18dcc27564e364"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/c75955a592a08e0d9743a486de83fb4ee33be9fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/c75955a592a08e0d9743a486de83fb4ee33be9fc", "html_url": "https://github.com/lsst/dax_imgserv/commit/c75955a592a08e0d9743a486de83fb4ee33be9fc", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/c75955a592a08e0d9743a486de83fb4ee33be9fc/comments", "author": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96e94b118b4f53cd3389b9900106e85da45f4a1c", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/96e94b118b4f53cd3389b9900106e85da45f4a1c", "html_url": "https://github.com/lsst/dax_imgserv/commit/96e94b118b4f53cd3389b9900106e85da45f4a1c"}]}, {"sha": "96e94b118b4f53cd3389b9900106e85da45f4a1c", "commit": {"author": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-09-23T15:44:12Z"}, "committer": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-09-23T15:44:12Z"}, "message": "Merge branch 'tickets/DM-3511'", "tree": {"sha": "abcbbc82ff4f48989ef62a3c0e73a378d653d769", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/abcbbc82ff4f48989ef62a3c0e73a378d653d769"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/96e94b118b4f53cd3389b9900106e85da45f4a1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/96e94b118b4f53cd3389b9900106e85da45f4a1c", "html_url": "https://github.com/lsst/dax_imgserv/commit/96e94b118b4f53cd3389b9900106e85da45f4a1c", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/96e94b118b4f53cd3389b9900106e85da45f4a1c/comments", "author": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59be5ef0dcefb8d8159029ca472557565a48372d", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/59be5ef0dcefb8d8159029ca472557565a48372d", "html_url": "https://github.com/lsst/dax_imgserv/commit/59be5ef0dcefb8d8159029ca472557565a48372d"}, {"sha": "29679f42e40ce296c20ec5ed671e3639a19a2263", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/29679f42e40ce296c20ec5ed671e3639a19a2263", "html_url": "https://github.com/lsst/dax_imgserv/commit/29679f42e40ce296c20ec5ed671e3639a19a2263"}]}, {"sha": "29679f42e40ce296c20ec5ed671e3639a19a2263", "commit": {"author": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-09-18T17:35:26Z"}, "committer": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-09-23T15:43:48Z"}, "message": "Migrated to sqlalchemy-based db", "tree": {"sha": "abcbbc82ff4f48989ef62a3c0e73a378d653d769", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/abcbbc82ff4f48989ef62a3c0e73a378d653d769"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/29679f42e40ce296c20ec5ed671e3639a19a2263", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/29679f42e40ce296c20ec5ed671e3639a19a2263", "html_url": "https://github.com/lsst/dax_imgserv/commit/29679f42e40ce296c20ec5ed671e3639a19a2263", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/29679f42e40ce296c20ec5ed671e3639a19a2263/comments", "author": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59be5ef0dcefb8d8159029ca472557565a48372d", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/59be5ef0dcefb8d8159029ca472557565a48372d", "html_url": "https://github.com/lsst/dax_imgserv/commit/59be5ef0dcefb8d8159029ca472557565a48372d"}]}, {"sha": "59be5ef0dcefb8d8159029ca472557565a48372d", "commit": {"author": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2015-09-18T22:17:41Z"}, "committer": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2015-09-18T22:17:41Z"}, "message": "Merge branch 'tickets/DM-3496'", "tree": {"sha": "6213885a985a519b77699846e59821452289afd9", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/6213885a985a519b77699846e59821452289afd9"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/59be5ef0dcefb8d8159029ca472557565a48372d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/59be5ef0dcefb8d8159029ca472557565a48372d", "html_url": "https://github.com/lsst/dax_imgserv/commit/59be5ef0dcefb8d8159029ca472557565a48372d", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/59be5ef0dcefb8d8159029ca472557565a48372d/comments", "author": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1791fdf1e4760baa6bf777aa7192841c82664b79", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/1791fdf1e4760baa6bf777aa7192841c82664b79", "html_url": "https://github.com/lsst/dax_imgserv/commit/1791fdf1e4760baa6bf777aa7192841c82664b79"}, {"sha": "284bce2309b6e6d684105eac4acc199502aa2022", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/284bce2309b6e6d684105eac4acc199502aa2022", "html_url": "https://github.com/lsst/dax_imgserv/commit/284bce2309b6e6d684105eac4acc199502aa2022"}]}, {"sha": "284bce2309b6e6d684105eac4acc199502aa2022", "commit": {"author": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2015-09-17T17:19:35Z"}, "committer": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2015-09-18T18:43:50Z"}, "message": "Added a source parameter to get skymap removed check for filter type.", "tree": {"sha": "6213885a985a519b77699846e59821452289afd9", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/6213885a985a519b77699846e59821452289afd9"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/284bce2309b6e6d684105eac4acc199502aa2022", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/284bce2309b6e6d684105eac4acc199502aa2022", "html_url": "https://github.com/lsst/dax_imgserv/commit/284bce2309b6e6d684105eac4acc199502aa2022", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/284bce2309b6e6d684105eac4acc199502aa2022/comments", "author": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acbab048550a140ea61df1c8bdf3008aa4dc849b", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/acbab048550a140ea61df1c8bdf3008aa4dc849b", "html_url": "https://github.com/lsst/dax_imgserv/commit/acbab048550a140ea61df1c8bdf3008aa4dc849b"}]}, {"sha": "acbab048550a140ea61df1c8bdf3008aa4dc849b", "commit": {"author": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2015-08-20T17:21:32Z"}, "committer": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2015-09-18T18:38:21Z"}, "message": "Changed source of deepCoadd skymaps.", "tree": {"sha": "71c990033b0cd3e6ce2dc3757e87586a06bba407", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/71c990033b0cd3e6ce2dc3757e87586a06bba407"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/acbab048550a140ea61df1c8bdf3008aa4dc849b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/acbab048550a140ea61df1c8bdf3008aa4dc849b", "html_url": "https://github.com/lsst/dax_imgserv/commit/acbab048550a140ea61df1c8bdf3008aa4dc849b", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/acbab048550a140ea61df1c8bdf3008aa4dc849b/comments", "author": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1791fdf1e4760baa6bf777aa7192841c82664b79", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/1791fdf1e4760baa6bf777aa7192841c82664b79", "html_url": "https://github.com/lsst/dax_imgserv/commit/1791fdf1e4760baa6bf777aa7192841c82664b79"}]}, {"sha": "1791fdf1e4760baa6bf777aa7192841c82664b79", "commit": {"author": {"name": "Brian Van Klaveren", "email": "brianv0@users.noreply.github.com", "date": "2015-08-26T17:45:43Z"}, "committer": {"name": "Brian Van Klaveren", "email": "brianv0@users.noreply.github.com", "date": "2015-08-26T17:45:43Z"}, "message": "Merge pull request #7 from lsst/tickets/DM-2537\n\nImprove error handling according to DM-1980", "tree": {"sha": "1ffb5b19f336372f4a82b0f0bf143cdbca9782b8", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/1ffb5b19f336372f4a82b0f0bf143cdbca9782b8"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/1791fdf1e4760baa6bf777aa7192841c82664b79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/1791fdf1e4760baa6bf777aa7192841c82664b79", "html_url": "https://github.com/lsst/dax_imgserv/commit/1791fdf1e4760baa6bf777aa7192841c82664b79", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/1791fdf1e4760baa6bf777aa7192841c82664b79/comments", "author": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0855220a14ae7ddba601acdb69ca5d74bb99bec", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/a0855220a14ae7ddba601acdb69ca5d74bb99bec", "html_url": "https://github.com/lsst/dax_imgserv/commit/a0855220a14ae7ddba601acdb69ca5d74bb99bec"}, {"sha": "875701ad63b2435e31caab2e739840aff9dbc178", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/875701ad63b2435e31caab2e739840aff9dbc178", "html_url": "https://github.com/lsst/dax_imgserv/commit/875701ad63b2435e31caab2e739840aff9dbc178"}]}, {"sha": "875701ad63b2435e31caab2e739840aff9dbc178", "commit": {"author": {"name": "Brian Van Klaveren", "email": "bvan@slac.stanford.edu", "date": "2015-07-31T22:52:51Z"}, "committer": {"name": "Brian Van Klaveren", "email": "bvan@slac.stanford.edu", "date": "2015-07-31T22:52:51Z"}, "message": "Improve error handling according to DM-1980", "tree": {"sha": "1ffb5b19f336372f4a82b0f0bf143cdbca9782b8", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/1ffb5b19f336372f4a82b0f0bf143cdbca9782b8"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/875701ad63b2435e31caab2e739840aff9dbc178", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/875701ad63b2435e31caab2e739840aff9dbc178", "html_url": "https://github.com/lsst/dax_imgserv/commit/875701ad63b2435e31caab2e739840aff9dbc178", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/875701ad63b2435e31caab2e739840aff9dbc178/comments", "author": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0855220a14ae7ddba601acdb69ca5d74bb99bec", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/a0855220a14ae7ddba601acdb69ca5d74bb99bec", "html_url": "https://github.com/lsst/dax_imgserv/commit/a0855220a14ae7ddba601acdb69ca5d74bb99bec"}]}, {"sha": "a0855220a14ae7ddba601acdb69ca5d74bb99bec", "commit": {"author": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-07-15T23:19:17Z"}, "committer": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-07-15T23:19:17Z"}, "message": "turned prefix into path", "tree": {"sha": "0a50e48413293191b34a4d33774f1527c6968f0a", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/0a50e48413293191b34a4d33774f1527c6968f0a"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/a0855220a14ae7ddba601acdb69ca5d74bb99bec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/a0855220a14ae7ddba601acdb69ca5d74bb99bec", "html_url": "https://github.com/lsst/dax_imgserv/commit/a0855220a14ae7ddba601acdb69ca5d74bb99bec", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/a0855220a14ae7ddba601acdb69ca5d74bb99bec/comments", "author": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9f69512c8e0cc1131a7ea767dff9fa99a92cda8", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/d9f69512c8e0cc1131a7ea767dff9fa99a92cda8", "html_url": "https://github.com/lsst/dax_imgserv/commit/d9f69512c8e0cc1131a7ea767dff9fa99a92cda8"}]}, {"sha": "d9f69512c8e0cc1131a7ea767dff9fa99a92cda8", "commit": {"author": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-07-15T23:16:53Z"}, "committer": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-07-15T23:16:53Z"}, "message": "turned prefix into path", "tree": {"sha": "380e4f24e4d0ae3d8ba06b4bebd0be9b496bc78b", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/380e4f24e4d0ae3d8ba06b4bebd0be9b496bc78b"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/d9f69512c8e0cc1131a7ea767dff9fa99a92cda8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/d9f69512c8e0cc1131a7ea767dff9fa99a92cda8", "html_url": "https://github.com/lsst/dax_imgserv/commit/d9f69512c8e0cc1131a7ea767dff9fa99a92cda8", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/d9f69512c8e0cc1131a7ea767dff9fa99a92cda8/comments", "author": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34e47795edd8580119195725933423905e6e23c5", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/34e47795edd8580119195725933423905e6e23c5", "html_url": "https://github.com/lsst/dax_imgserv/commit/34e47795edd8580119195725933423905e6e23c5"}]}, {"sha": "34e47795edd8580119195725933423905e6e23c5", "commit": {"author": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-07-15T22:55:18Z"}, "committer": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-07-15T22:55:18Z"}, "message": "Fix missing dax_ prefix", "tree": {"sha": "f0df27769fc405e3dff8fbf14a41faa47c94a635", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/f0df27769fc405e3dff8fbf14a41faa47c94a635"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/34e47795edd8580119195725933423905e6e23c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/34e47795edd8580119195725933423905e6e23c5", "html_url": "https://github.com/lsst/dax_imgserv/commit/34e47795edd8580119195725933423905e6e23c5", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/34e47795edd8580119195725933423905e6e23c5/comments", "author": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "293d5ab73e2fb259fd4a05393873b5a449955fae", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/293d5ab73e2fb259fd4a05393873b5a449955fae", "html_url": "https://github.com/lsst/dax_imgserv/commit/293d5ab73e2fb259fd4a05393873b5a449955fae"}]}, {"sha": "293d5ab73e2fb259fd4a05393873b5a449955fae", "commit": {"author": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-07-15T22:40:31Z"}, "committer": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-07-15T22:40:31Z"}, "message": "add dax_ prefix in python/lsst", "tree": {"sha": "165503c88ebe7c4e0aea11e8c28fc59bba3d6166", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/165503c88ebe7c4e0aea11e8c28fc59bba3d6166"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/293d5ab73e2fb259fd4a05393873b5a449955fae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/293d5ab73e2fb259fd4a05393873b5a449955fae", "html_url": "https://github.com/lsst/dax_imgserv/commit/293d5ab73e2fb259fd4a05393873b5a449955fae", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/293d5ab73e2fb259fd4a05393873b5a449955fae/comments", "author": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6736e99383261ad3a724f09139fa5d3b6e9679e3", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/6736e99383261ad3a724f09139fa5d3b6e9679e3", "html_url": "https://github.com/lsst/dax_imgserv/commit/6736e99383261ad3a724f09139fa5d3b6e9679e3"}]}, {"sha": "6736e99383261ad3a724f09139fa5d3b6e9679e3", "commit": {"author": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-07-15T22:34:36Z"}, "committer": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-07-15T22:34:36Z"}, "message": "dax_ prefix", "tree": {"sha": "31551b9896575d87e8719868aceb77e84f594fb8", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/31551b9896575d87e8719868aceb77e84f594fb8"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/6736e99383261ad3a724f09139fa5d3b6e9679e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/6736e99383261ad3a724f09139fa5d3b6e9679e3", "html_url": "https://github.com/lsst/dax_imgserv/commit/6736e99383261ad3a724f09139fa5d3b6e9679e3", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/6736e99383261ad3a724f09139fa5d3b6e9679e3/comments", "author": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7595bd54bfd96605ff460a94ca7cb1944205a877", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/7595bd54bfd96605ff460a94ca7cb1944205a877", "html_url": "https://github.com/lsst/dax_imgserv/commit/7595bd54bfd96605ff460a94ca7cb1944205a877"}]}, {"sha": "7595bd54bfd96605ff460a94ca7cb1944205a877", "commit": {"author": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-07-15T22:06:32Z"}, "committer": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-07-15T22:06:32Z"}, "message": "Merge branch 'tickets/DM-3133'", "tree": {"sha": "aabc58d009a07828db5b3977e79ce7dcd079e195", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/aabc58d009a07828db5b3977e79ce7dcd079e195"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/7595bd54bfd96605ff460a94ca7cb1944205a877", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/7595bd54bfd96605ff460a94ca7cb1944205a877", "html_url": "https://github.com/lsst/dax_imgserv/commit/7595bd54bfd96605ff460a94ca7cb1944205a877", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/7595bd54bfd96605ff460a94ca7cb1944205a877/comments", "author": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5b8ce798a6b2c3e2e6a17c1e89773f2b1c8a579", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/d5b8ce798a6b2c3e2e6a17c1e89773f2b1c8a579", "html_url": "https://github.com/lsst/dax_imgserv/commit/d5b8ce798a6b2c3e2e6a17c1e89773f2b1c8a579"}, {"sha": "745cfa33bf0d2c74adb4c6c019d04eda004d8834", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/745cfa33bf0d2c74adb4c6c019d04eda004d8834", "html_url": "https://github.com/lsst/dax_imgserv/commit/745cfa33bf0d2c74adb4c6c019d04eda004d8834"}]}, {"sha": "745cfa33bf0d2c74adb4c6c019d04eda004d8834", "commit": {"author": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-07-15T22:05:47Z"}, "committer": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-07-15T22:05:47Z"}, "message": "add dax_ prefix to data access modules", "tree": {"sha": "aabc58d009a07828db5b3977e79ce7dcd079e195", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/aabc58d009a07828db5b3977e79ce7dcd079e195"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/745cfa33bf0d2c74adb4c6c019d04eda004d8834", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/745cfa33bf0d2c74adb4c6c019d04eda004d8834", "html_url": "https://github.com/lsst/dax_imgserv/commit/745cfa33bf0d2c74adb4c6c019d04eda004d8834", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/745cfa33bf0d2c74adb4c6c019d04eda004d8834/comments", "author": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5b8ce798a6b2c3e2e6a17c1e89773f2b1c8a579", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/d5b8ce798a6b2c3e2e6a17c1e89773f2b1c8a579", "html_url": "https://github.com/lsst/dax_imgserv/commit/d5b8ce798a6b2c3e2e6a17c1e89773f2b1c8a579"}]}, {"sha": "d5b8ce798a6b2c3e2e6a17c1e89773f2b1c8a579", "commit": {"author": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2015-06-10T15:42:15Z"}, "committer": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2015-06-10T15:42:15Z"}, "message": "Merge branch 'u/jgates/DM-2467'", "tree": {"sha": "b16cf4889890b6d8f0fe85a9710b8de094256fe4", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/b16cf4889890b6d8f0fe85a9710b8de094256fe4"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/d5b8ce798a6b2c3e2e6a17c1e89773f2b1c8a579", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/d5b8ce798a6b2c3e2e6a17c1e89773f2b1c8a579", "html_url": "https://github.com/lsst/dax_imgserv/commit/d5b8ce798a6b2c3e2e6a17c1e89773f2b1c8a579", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/d5b8ce798a6b2c3e2e6a17c1e89773f2b1c8a579/comments", "author": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76b4826c3556c613aa070ed7df242261e8e13586", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/76b4826c3556c613aa070ed7df242261e8e13586", "html_url": "https://github.com/lsst/dax_imgserv/commit/76b4826c3556c613aa070ed7df242261e8e13586"}, {"sha": "f4d1722a8b51fd6a3a836e04bbe3bbffe63e6516", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/f4d1722a8b51fd6a3a836e04bbe3bbffe63e6516", "html_url": "https://github.com/lsst/dax_imgserv/commit/f4d1722a8b51fd6a3a836e04bbe3bbffe63e6516"}]}, {"sha": "f4d1722a8b51fd6a3a836e04bbe3bbffe63e6516", "commit": {"author": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2015-06-05T17:24:09Z"}, "committer": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2015-06-09T21:32:55Z"}, "message": "Sky map stitching now works across tracts.", "tree": {"sha": "b16cf4889890b6d8f0fe85a9710b8de094256fe4", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/b16cf4889890b6d8f0fe85a9710b8de094256fe4"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/f4d1722a8b51fd6a3a836e04bbe3bbffe63e6516", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/f4d1722a8b51fd6a3a836e04bbe3bbffe63e6516", "html_url": "https://github.com/lsst/dax_imgserv/commit/f4d1722a8b51fd6a3a836e04bbe3bbffe63e6516", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/f4d1722a8b51fd6a3a836e04bbe3bbffe63e6516/comments", "author": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76b4826c3556c613aa070ed7df242261e8e13586", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/76b4826c3556c613aa070ed7df242261e8e13586", "html_url": "https://github.com/lsst/dax_imgserv/commit/76b4826c3556c613aa070ed7df242261e8e13586"}]}, {"sha": "76b4826c3556c613aa070ed7df242261e8e13586", "commit": {"author": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2015-05-28T22:22:20Z"}, "committer": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2015-05-28T22:22:20Z"}, "message": "Merge branch 'u/jgates/DM-2027'", "tree": {"sha": "6a045a8656e9fd8c5aedeeaf6301fff5c72be74e", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/6a045a8656e9fd8c5aedeeaf6301fff5c72be74e"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/76b4826c3556c613aa070ed7df242261e8e13586", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/76b4826c3556c613aa070ed7df242261e8e13586", "html_url": "https://github.com/lsst/dax_imgserv/commit/76b4826c3556c613aa070ed7df242261e8e13586", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/76b4826c3556c613aa070ed7df242261e8e13586/comments", "author": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59a20ea21eab616e8a0bacfda42ca0b80fadd731", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/59a20ea21eab616e8a0bacfda42ca0b80fadd731", "html_url": "https://github.com/lsst/dax_imgserv/commit/59a20ea21eab616e8a0bacfda42ca0b80fadd731"}, {"sha": "6469ccc8d7ac3a23885679d6da46c66b33545fef", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/6469ccc8d7ac3a23885679d6da46c66b33545fef", "html_url": "https://github.com/lsst/dax_imgserv/commit/6469ccc8d7ac3a23885679d6da46c66b33545fef"}]}, {"sha": "6469ccc8d7ac3a23885679d6da46c66b33545fef", "commit": {"author": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2015-05-22T22:53:11Z"}, "committer": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2015-05-28T22:19:43Z"}, "message": "Initial version of getSkyMap.", "tree": {"sha": "6a045a8656e9fd8c5aedeeaf6301fff5c72be74e", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/6a045a8656e9fd8c5aedeeaf6301fff5c72be74e"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/6469ccc8d7ac3a23885679d6da46c66b33545fef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/6469ccc8d7ac3a23885679d6da46c66b33545fef", "html_url": "https://github.com/lsst/dax_imgserv/commit/6469ccc8d7ac3a23885679d6da46c66b33545fef", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/6469ccc8d7ac3a23885679d6da46c66b33545fef/comments", "author": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59a20ea21eab616e8a0bacfda42ca0b80fadd731", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/59a20ea21eab616e8a0bacfda42ca0b80fadd731", "html_url": "https://github.com/lsst/dax_imgserv/commit/59a20ea21eab616e8a0bacfda42ca0b80fadd731"}]}, {"sha": "59a20ea21eab616e8a0bacfda42ca0b80fadd731", "commit": {"author": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-04-13T20:23:20Z"}, "committer": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-04-13T20:23:20Z"}, "message": "Merge branch 'tickets/DM-2542'", "tree": {"sha": "f1c4fe47117152476e5284dd8da4b14d3c0b0a26", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/f1c4fe47117152476e5284dd8da4b14d3c0b0a26"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/59a20ea21eab616e8a0bacfda42ca0b80fadd731", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/59a20ea21eab616e8a0bacfda42ca0b80fadd731", "html_url": "https://github.com/lsst/dax_imgserv/commit/59a20ea21eab616e8a0bacfda42ca0b80fadd731", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/59a20ea21eab616e8a0bacfda42ca0b80fadd731/comments", "author": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e218d629fa2c9004f230c04a4065837fdc0d2236", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/e218d629fa2c9004f230c04a4065837fdc0d2236", "html_url": "https://github.com/lsst/dax_imgserv/commit/e218d629fa2c9004f230c04a4065837fdc0d2236"}, {"sha": "a41c6c704d7ba3f54b017932c0f17e2aa244c581", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/a41c6c704d7ba3f54b017932c0f17e2aa244c581", "html_url": "https://github.com/lsst/dax_imgserv/commit/a41c6c704d7ba3f54b017932c0f17e2aa244c581"}]}, {"sha": "a41c6c704d7ba3f54b017932c0f17e2aa244c581", "commit": {"author": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-04-13T20:23:00Z"}, "committer": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-04-13T20:23:00Z"}, "message": "removed obsolete dependency on log", "tree": {"sha": "f1c4fe47117152476e5284dd8da4b14d3c0b0a26", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/f1c4fe47117152476e5284dd8da4b14d3c0b0a26"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/a41c6c704d7ba3f54b017932c0f17e2aa244c581", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/a41c6c704d7ba3f54b017932c0f17e2aa244c581", "html_url": "https://github.com/lsst/dax_imgserv/commit/a41c6c704d7ba3f54b017932c0f17e2aa244c581", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/a41c6c704d7ba3f54b017932c0f17e2aa244c581/comments", "author": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e218d629fa2c9004f230c04a4065837fdc0d2236", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/e218d629fa2c9004f230c04a4065837fdc0d2236", "html_url": "https://github.com/lsst/dax_imgserv/commit/e218d629fa2c9004f230c04a4065837fdc0d2236"}]}, {"sha": "e218d629fa2c9004f230c04a4065837fdc0d2236", "commit": {"author": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2015-03-30T23:07:28Z"}, "committer": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2015-03-30T23:07:28Z"}, "message": "Merge branch 'u/jgates/DM-2013'", "tree": {"sha": "a66a4418f20a3ab9f82991a7a5f5da9cdeff9aa0", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/a66a4418f20a3ab9f82991a7a5f5da9cdeff9aa0"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/e218d629fa2c9004f230c04a4065837fdc0d2236", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/e218d629fa2c9004f230c04a4065837fdc0d2236", "html_url": "https://github.com/lsst/dax_imgserv/commit/e218d629fa2c9004f230c04a4065837fdc0d2236", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/e218d629fa2c9004f230c04a4065837fdc0d2236/comments", "author": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1288fdabdfbb3ec5da025b18b7c1824c98c45ff7", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/1288fdabdfbb3ec5da025b18b7c1824c98c45ff7", "html_url": "https://github.com/lsst/dax_imgserv/commit/1288fdabdfbb3ec5da025b18b7c1824c98c45ff7"}, {"sha": "60809338595e2c4dfc1ebefcb385058e4947667a", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/60809338595e2c4dfc1ebefcb385058e4947667a", "html_url": "https://github.com/lsst/dax_imgserv/commit/60809338595e2c4dfc1ebefcb385058e4947667a"}]}, {"sha": "60809338595e2c4dfc1ebefcb385058e4947667a", "commit": {"author": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2015-03-30T23:01:37Z"}, "committer": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2015-03-30T23:05:43Z"}, "message": "Added recommended changes.", "tree": {"sha": "a66a4418f20a3ab9f82991a7a5f5da9cdeff9aa0", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/a66a4418f20a3ab9f82991a7a5f5da9cdeff9aa0"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/60809338595e2c4dfc1ebefcb385058e4947667a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/60809338595e2c4dfc1ebefcb385058e4947667a", "html_url": "https://github.com/lsst/dax_imgserv/commit/60809338595e2c4dfc1ebefcb385058e4947667a", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/60809338595e2c4dfc1ebefcb385058e4947667a/comments", "author": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aef6f7051a21a3c9f56e6e77ea5ed6c9340dac57", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/aef6f7051a21a3c9f56e6e77ea5ed6c9340dac57", "html_url": "https://github.com/lsst/dax_imgserv/commit/aef6f7051a21a3c9f56e6e77ea5ed6c9340dac57"}]}, {"sha": "aef6f7051a21a3c9f56e6e77ea5ed6c9340dac57", "commit": {"author": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2015-03-05T17:55:45Z"}, "committer": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2015-03-30T23:05:43Z"}, "message": "Prototype image stitching code.", "tree": {"sha": "4a2db368a8d37bbca34592f3fb80a3ddccb369c3", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/4a2db368a8d37bbca34592f3fb80a3ddccb369c3"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/aef6f7051a21a3c9f56e6e77ea5ed6c9340dac57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/aef6f7051a21a3c9f56e6e77ea5ed6c9340dac57", "html_url": "https://github.com/lsst/dax_imgserv/commit/aef6f7051a21a3c9f56e6e77ea5ed6c9340dac57", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/aef6f7051a21a3c9f56e6e77ea5ed6c9340dac57/comments", "author": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1288fdabdfbb3ec5da025b18b7c1824c98c45ff7", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/1288fdabdfbb3ec5da025b18b7c1824c98c45ff7", "html_url": "https://github.com/lsst/dax_imgserv/commit/1288fdabdfbb3ec5da025b18b7c1824c98c45ff7"}]}, {"sha": "1288fdabdfbb3ec5da025b18b7c1824c98c45ff7", "commit": {"author": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-02-28T07:52:58Z"}, "committer": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-02-28T07:52:58Z"}, "message": "add missing dependency on sconsUtils", "tree": {"sha": "9b8267d4dd8d77299988a5b09cddcef5e175dc14", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/9b8267d4dd8d77299988a5b09cddcef5e175dc14"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/1288fdabdfbb3ec5da025b18b7c1824c98c45ff7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/1288fdabdfbb3ec5da025b18b7c1824c98c45ff7", "html_url": "https://github.com/lsst/dax_imgserv/commit/1288fdabdfbb3ec5da025b18b7c1824c98c45ff7", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/1288fdabdfbb3ec5da025b18b7c1824c98c45ff7/comments", "author": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84433bd4ab4e203881ad6815f9b4edfeb59962fc", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/84433bd4ab4e203881ad6815f9b4edfeb59962fc", "html_url": "https://github.com/lsst/dax_imgserv/commit/84433bd4ab4e203881ad6815f9b4edfeb59962fc"}]}, {"sha": "84433bd4ab4e203881ad6815f9b4edfeb59962fc", "commit": {"author": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-02-26T21:51:17Z"}, "committer": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-02-26T21:51:17Z"}, "message": "improve readme", "tree": {"sha": "ecbe6020270a2d4252ac24d310650ab375e0e3db", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/ecbe6020270a2d4252ac24d310650ab375e0e3db"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/84433bd4ab4e203881ad6815f9b4edfeb59962fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/84433bd4ab4e203881ad6815f9b4edfeb59962fc", "html_url": "https://github.com/lsst/dax_imgserv/commit/84433bd4ab4e203881ad6815f9b4edfeb59962fc", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/84433bd4ab4e203881ad6815f9b4edfeb59962fc/comments", "author": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3294999c6da5526cc62fd7c3bc370b292d6fe919", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/3294999c6da5526cc62fd7c3bc370b292d6fe919", "html_url": "https://github.com/lsst/dax_imgserv/commit/3294999c6da5526cc62fd7c3bc370b292d6fe919"}]}, {"sha": "3294999c6da5526cc62fd7c3bc370b292d6fe919", "commit": {"author": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2015-02-26T20:46:44Z"}, "committer": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2015-02-26T20:46:44Z"}, "message": "Merge branch 'u/jgates/DM-1697'", "tree": {"sha": "cc51fd09ccad911852c6bb5ca67b4de759747418", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/cc51fd09ccad911852c6bb5ca67b4de759747418"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/3294999c6da5526cc62fd7c3bc370b292d6fe919", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/3294999c6da5526cc62fd7c3bc370b292d6fe919", "html_url": "https://github.com/lsst/dax_imgserv/commit/3294999c6da5526cc62fd7c3bc370b292d6fe919", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/3294999c6da5526cc62fd7c3bc370b292d6fe919/comments", "author": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed85575779e9cf92413ea168e882239f8ee3c493", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/ed85575779e9cf92413ea168e882239f8ee3c493", "html_url": "https://github.com/lsst/dax_imgserv/commit/ed85575779e9cf92413ea168e882239f8ee3c493"}, {"sha": "2919ab865aad3e87b2228509d3c3dba8d569282d", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/2919ab865aad3e87b2228509d3c3dba8d569282d", "html_url": "https://github.com/lsst/dax_imgserv/commit/2919ab865aad3e87b2228509d3c3dba8d569282d"}]}, {"sha": "2919ab865aad3e87b2228509d3c3dba8d569282d", "commit": {"author": {"name": "John Gates", "email": "jgates@slac.standford.edu", "date": "2015-02-23T18:50:01Z"}, "committer": {"name": "John Gates", "email": "jgates@slac.stanford.edu", "date": "2015-02-26T20:39:44Z"}, "message": "Added DeepCoadd images and cutouts in both pixels and arcseconds.", "tree": {"sha": "e6f12097245bfca9184027f561248ff448f70fe5", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/e6f12097245bfca9184027f561248ff448f70fe5"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/2919ab865aad3e87b2228509d3c3dba8d569282d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/2919ab865aad3e87b2228509d3c3dba8d569282d", "html_url": "https://github.com/lsst/dax_imgserv/commit/2919ab865aad3e87b2228509d3c3dba8d569282d", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/2919ab865aad3e87b2228509d3c3dba8d569282d/comments", "author": null, "committer": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "970f9b3f872b97a6f92a66885761f265b16f063b", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/970f9b3f872b97a6f92a66885761f265b16f063b", "html_url": "https://github.com/lsst/dax_imgserv/commit/970f9b3f872b97a6f92a66885761f265b16f063b"}]}, {"sha": "ed85575779e9cf92413ea168e882239f8ee3c493", "commit": {"author": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-02-24T21:01:38Z"}, "committer": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-02-24T21:01:38Z"}, "message": "add missing dependency", "tree": {"sha": "b24db84881c8a73e140adbb8a229f34bd3b11c04", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/b24db84881c8a73e140adbb8a229f34bd3b11c04"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/ed85575779e9cf92413ea168e882239f8ee3c493", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/ed85575779e9cf92413ea168e882239f8ee3c493", "html_url": "https://github.com/lsst/dax_imgserv/commit/ed85575779e9cf92413ea168e882239f8ee3c493", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/ed85575779e9cf92413ea168e882239f8ee3c493/comments", "author": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "223f3a1122e021fc20de279e053aae4b766a0c76", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/223f3a1122e021fc20de279e053aae4b766a0c76", "html_url": "https://github.com/lsst/dax_imgserv/commit/223f3a1122e021fc20de279e053aae4b766a0c76"}]}, {"sha": "223f3a1122e021fc20de279e053aae4b766a0c76", "commit": {"author": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-02-24T02:47:46Z"}, "committer": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-02-24T02:47:46Z"}, "message": "Merge branch 'tickets/DM-2160'", "tree": {"sha": "1a1d6fbdc15ec6c0b405ed039246870d818ca0bd", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/1a1d6fbdc15ec6c0b405ed039246870d818ca0bd"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/223f3a1122e021fc20de279e053aae4b766a0c76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/223f3a1122e021fc20de279e053aae4b766a0c76", "html_url": "https://github.com/lsst/dax_imgserv/commit/223f3a1122e021fc20de279e053aae4b766a0c76", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/223f3a1122e021fc20de279e053aae4b766a0c76/comments", "author": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "970f9b3f872b97a6f92a66885761f265b16f063b", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/970f9b3f872b97a6f92a66885761f265b16f063b", "html_url": "https://github.com/lsst/dax_imgserv/commit/970f9b3f872b97a6f92a66885761f265b16f063b"}, {"sha": "fd41e776b63869eb2347db4eb9d1d8b53c77f5bc", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/fd41e776b63869eb2347db4eb9d1d8b53c77f5bc", "html_url": "https://github.com/lsst/dax_imgserv/commit/fd41e776b63869eb2347db4eb9d1d8b53c77f5bc"}]}, {"sha": "fd41e776b63869eb2347db4eb9d1d8b53c77f5bc", "commit": {"author": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-02-24T02:47:22Z"}, "committer": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-02-24T02:47:22Z"}, "message": "catch 'address in use'", "tree": {"sha": "1a1d6fbdc15ec6c0b405ed039246870d818ca0bd", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/1a1d6fbdc15ec6c0b405ed039246870d818ca0bd"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/fd41e776b63869eb2347db4eb9d1d8b53c77f5bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/fd41e776b63869eb2347db4eb9d1d8b53c77f5bc", "html_url": "https://github.com/lsst/dax_imgserv/commit/fd41e776b63869eb2347db4eb9d1d8b53c77f5bc", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/fd41e776b63869eb2347db4eb9d1d8b53c77f5bc/comments", "author": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "970f9b3f872b97a6f92a66885761f265b16f063b", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/970f9b3f872b97a6f92a66885761f265b16f063b", "html_url": "https://github.com/lsst/dax_imgserv/commit/970f9b3f872b97a6f92a66885761f265b16f063b"}]}, {"sha": "970f9b3f872b97a6f92a66885761f265b16f063b", "commit": {"author": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-02-20T05:06:15Z"}, "committer": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-02-20T05:06:15Z"}, "message": "Merge branch 'u/jbecla/DM-1627'", "tree": {"sha": "35fd4f3e553bb933d2fbeefcafe1f4306a05d37f", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/35fd4f3e553bb933d2fbeefcafe1f4306a05d37f"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/970f9b3f872b97a6f92a66885761f265b16f063b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/970f9b3f872b97a6f92a66885761f265b16f063b", "html_url": "https://github.com/lsst/dax_imgserv/commit/970f9b3f872b97a6f92a66885761f265b16f063b", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/970f9b3f872b97a6f92a66885761f265b16f063b/comments", "author": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69c95d05aa7f87d2d3eed5188f8eb9608c472756", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/69c95d05aa7f87d2d3eed5188f8eb9608c472756", "html_url": "https://github.com/lsst/dax_imgserv/commit/69c95d05aa7f87d2d3eed5188f8eb9608c472756"}, {"sha": "32f956ce7e189f5ce406a98ae9e7455ec7834d90", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/32f956ce7e189f5ce406a98ae9e7455ec7834d90", "html_url": "https://github.com/lsst/dax_imgserv/commit/32f956ce7e189f5ce406a98ae9e7455ec7834d90"}]}, {"sha": "32f956ce7e189f5ce406a98ae9e7455ec7834d90", "commit": {"author": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-02-07T06:51:56Z"}, "committer": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-02-20T05:06:06Z"}, "message": "V0 implementation of image cutout\n\nFirst implementation of image cutout.\nThe code is versioning-ready, it is based on\nflask blueprints. Unneeded code has been\ncleanedup.", "tree": {"sha": "35fd4f3e553bb933d2fbeefcafe1f4306a05d37f", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/35fd4f3e553bb933d2fbeefcafe1f4306a05d37f"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/32f956ce7e189f5ce406a98ae9e7455ec7834d90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/32f956ce7e189f5ce406a98ae9e7455ec7834d90", "html_url": "https://github.com/lsst/dax_imgserv/commit/32f956ce7e189f5ce406a98ae9e7455ec7834d90", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/32f956ce7e189f5ce406a98ae9e7455ec7834d90/comments", "author": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69c95d05aa7f87d2d3eed5188f8eb9608c472756", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/69c95d05aa7f87d2d3eed5188f8eb9608c472756", "html_url": "https://github.com/lsst/dax_imgserv/commit/69c95d05aa7f87d2d3eed5188f8eb9608c472756"}]}, {"sha": "69c95d05aa7f87d2d3eed5188f8eb9608c472756", "commit": {"author": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-02-05T23:54:07Z"}, "committer": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-02-05T23:54:07Z"}, "message": "Merge branch 'u/jbecla/DM-1938'", "tree": {"sha": "461c4449e7118b6c923959ba13dcad730a4984a3", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/461c4449e7118b6c923959ba13dcad730a4984a3"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/69c95d05aa7f87d2d3eed5188f8eb9608c472756", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/69c95d05aa7f87d2d3eed5188f8eb9608c472756", "html_url": "https://github.com/lsst/dax_imgserv/commit/69c95d05aa7f87d2d3eed5188f8eb9608c472756", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/69c95d05aa7f87d2d3eed5188f8eb9608c472756/comments", "author": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13ad31082b826bc522e0d8271f89c5f839882341", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/13ad31082b826bc522e0d8271f89c5f839882341", "html_url": "https://github.com/lsst/dax_imgserv/commit/13ad31082b826bc522e0d8271f89c5f839882341"}, {"sha": "c4dbb16441fa85d1143e4e09b8a1a0e2d60d0fdb", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/c4dbb16441fa85d1143e4e09b8a1a0e2d60d0fdb", "html_url": "https://github.com/lsst/dax_imgserv/commit/c4dbb16441fa85d1143e4e09b8a1a0e2d60d0fdb"}]}, {"sha": "c4dbb16441fa85d1143e4e09b8a1a0e2d60d0fdb", "commit": {"author": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-02-03T23:15:10Z"}, "committer": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2015-02-05T23:53:48Z"}, "message": "added skeleton of RESTful API", "tree": {"sha": "461c4449e7118b6c923959ba13dcad730a4984a3", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/461c4449e7118b6c923959ba13dcad730a4984a3"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/c4dbb16441fa85d1143e4e09b8a1a0e2d60d0fdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/c4dbb16441fa85d1143e4e09b8a1a0e2d60d0fdb", "html_url": "https://github.com/lsst/dax_imgserv/commit/c4dbb16441fa85d1143e4e09b8a1a0e2d60d0fdb", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/c4dbb16441fa85d1143e4e09b8a1a0e2d60d0fdb/comments", "author": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13ad31082b826bc522e0d8271f89c5f839882341", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/13ad31082b826bc522e0d8271f89c5f839882341", "html_url": "https://github.com/lsst/dax_imgserv/commit/13ad31082b826bc522e0d8271f89c5f839882341"}]}, {"sha": "13ad31082b826bc522e0d8271f89c5f839882341", "commit": {"author": {"name": "John Gates", "email": "jgates@slac.standford.edu", "date": "2015-02-04T18:16:14Z"}, "committer": {"name": "John Gates", "email": "jgates@slac.standford.edu", "date": "2015-02-04T18:16:14Z"}, "message": "Merge branch 'u/jgates/DM-1696'", "tree": {"sha": "d0ae2114be4458c755524025127152f8136a94ea", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/d0ae2114be4458c755524025127152f8136a94ea"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/13ad31082b826bc522e0d8271f89c5f839882341", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/13ad31082b826bc522e0d8271f89c5f839882341", "html_url": "https://github.com/lsst/dax_imgserv/commit/13ad31082b826bc522e0d8271f89c5f839882341", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/13ad31082b826bc522e0d8271f89c5f839882341/comments", "author": null, "committer": null, "parents": [{"sha": "fd52913acd8a67f9ae3e0ffc972045001e957ef2", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/fd52913acd8a67f9ae3e0ffc972045001e957ef2", "html_url": "https://github.com/lsst/dax_imgserv/commit/fd52913acd8a67f9ae3e0ffc972045001e957ef2"}, {"sha": "883732027134f285c201317f2a4af3a65e1277ac", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/883732027134f285c201317f2a4af3a65e1277ac", "html_url": "https://github.com/lsst/dax_imgserv/commit/883732027134f285c201317f2a4af3a65e1277ac"}]}, {"sha": "883732027134f285c201317f2a4af3a65e1277ac", "commit": {"author": {"name": "John Gates", "email": "jgates@slac.standford.edu", "date": "2015-02-04T18:05:35Z"}, "committer": {"name": "John Gates", "email": "jgates@slac.standford.edu", "date": "2015-02-04T18:05:35Z"}, "message": "Moved use case test to examples.", "tree": {"sha": "d0ae2114be4458c755524025127152f8136a94ea", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/d0ae2114be4458c755524025127152f8136a94ea"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/883732027134f285c201317f2a4af3a65e1277ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/883732027134f285c201317f2a4af3a65e1277ac", "html_url": "https://github.com/lsst/dax_imgserv/commit/883732027134f285c201317f2a4af3a65e1277ac", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/883732027134f285c201317f2a4af3a65e1277ac/comments", "author": null, "committer": null, "parents": [{"sha": "f44beab9185e44319240b3a6f91367535471674c", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/f44beab9185e44319240b3a6f91367535471674c", "html_url": "https://github.com/lsst/dax_imgserv/commit/f44beab9185e44319240b3a6f91367535471674c"}]}, {"sha": "f44beab9185e44319240b3a6f91367535471674c", "commit": {"author": {"name": "John Gates", "email": "jgates@slac.standford.edu", "date": "2015-02-03T21:44:56Z"}, "committer": {"name": "John Gates", "email": "jgates@slac.standford.edu", "date": "2015-02-03T22:47:56Z"}, "message": "Prototype image cutout using the butler.", "tree": {"sha": "e285a10309a7360bde41209c6c446643e3c887f3", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/e285a10309a7360bde41209c6c446643e3c887f3"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/f44beab9185e44319240b3a6f91367535471674c", "comment_count": 14, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/f44beab9185e44319240b3a6f91367535471674c", "html_url": "https://github.com/lsst/dax_imgserv/commit/f44beab9185e44319240b3a6f91367535471674c", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/f44beab9185e44319240b3a6f91367535471674c/comments", "author": null, "committer": null, "parents": [{"sha": "fd52913acd8a67f9ae3e0ffc972045001e957ef2", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/fd52913acd8a67f9ae3e0ffc972045001e957ef2", "html_url": "https://github.com/lsst/dax_imgserv/commit/fd52913acd8a67f9ae3e0ffc972045001e957ef2"}]}, {"sha": "fd52913acd8a67f9ae3e0ffc972045001e957ef2", "commit": {"author": {"name": "John Gates", "email": "jgates@slac.standford.edu", "date": "2015-01-30T20:01:14Z"}, "committer": {"name": "John Gates", "email": "jgates@slac.standford.edu", "date": "2015-01-30T20:01:14Z"}, "message": "Merge branch 'u/jgates/DM-1588'", "tree": {"sha": "41ebb8656d5c3ea5c4c0c5dd1030032957000cdd", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/41ebb8656d5c3ea5c4c0c5dd1030032957000cdd"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/fd52913acd8a67f9ae3e0ffc972045001e957ef2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/fd52913acd8a67f9ae3e0ffc972045001e957ef2", "html_url": "https://github.com/lsst/dax_imgserv/commit/fd52913acd8a67f9ae3e0ffc972045001e957ef2", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/fd52913acd8a67f9ae3e0ffc972045001e957ef2/comments", "author": null, "committer": null, "parents": [{"sha": "f5815c157887d81c1ac1aaf1ef05e9b1caa373de", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/f5815c157887d81c1ac1aaf1ef05e9b1caa373de", "html_url": "https://github.com/lsst/dax_imgserv/commit/f5815c157887d81c1ac1aaf1ef05e9b1caa373de"}, {"sha": "a2c3ce066c8c95f1dce044b176cabbfa2e70cf79", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/a2c3ce066c8c95f1dce044b176cabbfa2e70cf79", "html_url": "https://github.com/lsst/dax_imgserv/commit/a2c3ce066c8c95f1dce044b176cabbfa2e70cf79"}]}, {"sha": "a2c3ce066c8c95f1dce044b176cabbfa2e70cf79", "commit": {"author": {"name": "John Gates", "email": "jgates@slac.standford.edu", "date": "2015-01-30T19:55:03Z"}, "committer": {"name": "John Gates", "email": "jgates@slac.standford.edu", "date": "2015-01-30T19:55:03Z"}, "message": "Prototype DataCat FITS file register and crawler.", "tree": {"sha": "41ebb8656d5c3ea5c4c0c5dd1030032957000cdd", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/41ebb8656d5c3ea5c4c0c5dd1030032957000cdd"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/a2c3ce066c8c95f1dce044b176cabbfa2e70cf79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/a2c3ce066c8c95f1dce044b176cabbfa2e70cf79", "html_url": "https://github.com/lsst/dax_imgserv/commit/a2c3ce066c8c95f1dce044b176cabbfa2e70cf79", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/a2c3ce066c8c95f1dce044b176cabbfa2e70cf79/comments", "author": null, "committer": null, "parents": [{"sha": "f5815c157887d81c1ac1aaf1ef05e9b1caa373de", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/f5815c157887d81c1ac1aaf1ef05e9b1caa373de", "html_url": "https://github.com/lsst/dax_imgserv/commit/f5815c157887d81c1ac1aaf1ef05e9b1caa373de"}]}, {"sha": "f5815c157887d81c1ac1aaf1ef05e9b1caa373de", "commit": {"author": {"name": "John Gates", "email": "jgates@slac.standford.edu", "date": "2015-01-22T17:49:20Z"}, "committer": {"name": "John Gates", "email": "jgates@slac.standford.edu", "date": "2015-01-22T17:49:20Z"}, "message": "Merge branch 'u/jgates/DM-1257'", "tree": {"sha": "290a4e04e318af631a00b9d31aa6b95e3d13f61b", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/290a4e04e318af631a00b9d31aa6b95e3d13f61b"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/f5815c157887d81c1ac1aaf1ef05e9b1caa373de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/f5815c157887d81c1ac1aaf1ef05e9b1caa373de", "html_url": "https://github.com/lsst/dax_imgserv/commit/f5815c157887d81c1ac1aaf1ef05e9b1caa373de", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/f5815c157887d81c1ac1aaf1ef05e9b1caa373de/comments", "author": null, "committer": null, "parents": [{"sha": "b5d39c641dacca1be0f75344f4679916901d3c75", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/b5d39c641dacca1be0f75344f4679916901d3c75", "html_url": "https://github.com/lsst/dax_imgserv/commit/b5d39c641dacca1be0f75344f4679916901d3c75"}, {"sha": "850e677d71589218a7e2dbf9e30fa7fab3b98113", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/850e677d71589218a7e2dbf9e30fa7fab3b98113", "html_url": "https://github.com/lsst/dax_imgserv/commit/850e677d71589218a7e2dbf9e30fa7fab3b98113"}]}, {"sha": "850e677d71589218a7e2dbf9e30fa7fab3b98113", "commit": {"author": {"name": "John Gates", "email": "jgates@slac.standford.edu", "date": "2015-01-21T21:28:27Z"}, "committer": {"name": "John Gates", "email": "jgates@slac.standford.edu", "date": "2015-01-21T21:44:50Z"}, "message": "Added unit test with FITS data file.", "tree": {"sha": "290a4e04e318af631a00b9d31aa6b95e3d13f61b", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/290a4e04e318af631a00b9d31aa6b95e3d13f61b"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/850e677d71589218a7e2dbf9e30fa7fab3b98113", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/850e677d71589218a7e2dbf9e30fa7fab3b98113", "html_url": "https://github.com/lsst/dax_imgserv/commit/850e677d71589218a7e2dbf9e30fa7fab3b98113", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/850e677d71589218a7e2dbf9e30fa7fab3b98113/comments", "author": null, "committer": null, "parents": [{"sha": "9ea5fd2129b68bd6a6e1c40a3a077593e94eef7e", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/9ea5fd2129b68bd6a6e1c40a3a077593e94eef7e", "html_url": "https://github.com/lsst/dax_imgserv/commit/9ea5fd2129b68bd6a6e1c40a3a077593e94eef7e"}]}, {"sha": "9ea5fd2129b68bd6a6e1c40a3a077593e94eef7e", "commit": {"author": {"name": "John Gates", "email": "jgates@slac.standford.edu", "date": "2014-12-11T22:52:43Z"}, "committer": {"name": "John Gates", "email": "jgates@slac.standford.edu", "date": "2015-01-21T21:44:23Z"}, "message": "Changed to use lsst.log for logging.\n\nFixed a bug reading port from credential file.\n\nStarted integrating with DataCat by adding crawler.py.", "tree": {"sha": "97eb6d47362571cc022c6170e4a5bc320b883bc1", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/97eb6d47362571cc022c6170e4a5bc320b883bc1"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/9ea5fd2129b68bd6a6e1c40a3a077593e94eef7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/9ea5fd2129b68bd6a6e1c40a3a077593e94eef7e", "html_url": "https://github.com/lsst/dax_imgserv/commit/9ea5fd2129b68bd6a6e1c40a3a077593e94eef7e", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/9ea5fd2129b68bd6a6e1c40a3a077593e94eef7e/comments", "author": null, "committer": null, "parents": [{"sha": "a6954b5c08107a8bca959da28dcc8c493fbc75b4", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/a6954b5c08107a8bca959da28dcc8c493fbc75b4", "html_url": "https://github.com/lsst/dax_imgserv/commit/a6954b5c08107a8bca959da28dcc8c493fbc75b4"}]}, {"sha": "a6954b5c08107a8bca959da28dcc8c493fbc75b4", "commit": {"author": {"name": "John Gates", "email": "jgates@slac.standford.edu", "date": "2014-12-11T00:04:42Z"}, "committer": {"name": "John Gates", "email": "jgates@slac.standford.edu", "date": "2014-12-11T00:04:42Z"}, "message": "Now stores COMMENT and HISTORY cards while sanitizing input.", "tree": {"sha": "da08e0a7fed880b8f6b0e16dfacff5c1889d0fbc", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/da08e0a7fed880b8f6b0e16dfacff5c1889d0fbc"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/a6954b5c08107a8bca959da28dcc8c493fbc75b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/a6954b5c08107a8bca959da28dcc8c493fbc75b4", "html_url": "https://github.com/lsst/dax_imgserv/commit/a6954b5c08107a8bca959da28dcc8c493fbc75b4", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/a6954b5c08107a8bca959da28dcc8c493fbc75b4/comments", "author": null, "committer": null, "parents": [{"sha": "b5d39c641dacca1be0f75344f4679916901d3c75", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/b5d39c641dacca1be0f75344f4679916901d3c75", "html_url": "https://github.com/lsst/dax_imgserv/commit/b5d39c641dacca1be0f75344f4679916901d3c75"}]}, {"sha": "b5d39c641dacca1be0f75344f4679916901d3c75", "commit": {"author": {"name": "John Gates", "email": "jgates@slac.standford.edu", "date": "2014-12-05T20:50:27Z"}, "committer": {"name": "John Gates", "email": "jgates@slac.standford.edu", "date": "2014-12-05T20:50:27Z"}, "message": "Merge branch 'u/jgates/DM-1610'", "tree": {"sha": "3d79f42ad17e1b321e4760df9d65b14228a43986", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/3d79f42ad17e1b321e4760df9d65b14228a43986"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/b5d39c641dacca1be0f75344f4679916901d3c75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/b5d39c641dacca1be0f75344f4679916901d3c75", "html_url": "https://github.com/lsst/dax_imgserv/commit/b5d39c641dacca1be0f75344f4679916901d3c75", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/b5d39c641dacca1be0f75344f4679916901d3c75/comments", "author": null, "committer": null, "parents": [{"sha": "499ba161d2c1d71b914a710a3172a7dd130a793f", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/499ba161d2c1d71b914a710a3172a7dd130a793f", "html_url": "https://github.com/lsst/dax_imgserv/commit/499ba161d2c1d71b914a710a3172a7dd130a793f"}, {"sha": "41f5b4f82c772bb6af05edf2f2f0b369863338d7", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/41f5b4f82c772bb6af05edf2f2f0b369863338d7", "html_url": "https://github.com/lsst/dax_imgserv/commit/41f5b4f82c772bb6af05edf2f2f0b369863338d7"}]}, {"sha": "41f5b4f82c772bb6af05edf2f2f0b369863338d7", "commit": {"author": {"name": "John Gates", "email": "jgates@slac.standford.edu", "date": "2014-12-03T22:30:57Z"}, "committer": {"name": "John Gates", "email": "jgates@slac.standford.edu", "date": "2014-12-05T20:49:31Z"}, "message": "Migrated to using cat and db to create schema.\n\nThis is a combination of 4 commits.\n* MetadataFitsDb.py now uses MetadataDbSetup.py to create/destroy the database.\n* Changed to use new code in cat to and db to create the database.\n* Removed MetadataFitsDb.py as its is replaced with cat code.\n* Fixed typo", "tree": {"sha": "3d79f42ad17e1b321e4760df9d65b14228a43986", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/3d79f42ad17e1b321e4760df9d65b14228a43986"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/41f5b4f82c772bb6af05edf2f2f0b369863338d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/41f5b4f82c772bb6af05edf2f2f0b369863338d7", "html_url": "https://github.com/lsst/dax_imgserv/commit/41f5b4f82c772bb6af05edf2f2f0b369863338d7", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/41f5b4f82c772bb6af05edf2f2f0b369863338d7/comments", "author": null, "committer": null, "parents": [{"sha": "62121e53a2222fed90d05ef99c0bb9e09d13e2a8", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/62121e53a2222fed90d05ef99c0bb9e09d13e2a8", "html_url": "https://github.com/lsst/dax_imgserv/commit/62121e53a2222fed90d05ef99c0bb9e09d13e2a8"}]}, {"sha": "62121e53a2222fed90d05ef99c0bb9e09d13e2a8", "commit": {"author": {"name": "John Gates", "email": "jgates@slac.standford.edu", "date": "2014-12-02T19:02:34Z"}, "committer": {"name": "John Gates", "email": "jgates@slac.standford.edu", "date": "2014-12-05T20:49:31Z"}, "message": "Now stores line comments and line numbers for header values.", "tree": {"sha": "6610477f8d26df4be72df60dbf29fc021b983038", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/6610477f8d26df4be72df60dbf29fc021b983038"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/62121e53a2222fed90d05ef99c0bb9e09d13e2a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/62121e53a2222fed90d05ef99c0bb9e09d13e2a8", "html_url": "https://github.com/lsst/dax_imgserv/commit/62121e53a2222fed90d05ef99c0bb9e09d13e2a8", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/62121e53a2222fed90d05ef99c0bb9e09d13e2a8/comments", "author": null, "committer": null, "parents": [{"sha": "499ba161d2c1d71b914a710a3172a7dd130a793f", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/499ba161d2c1d71b914a710a3172a7dd130a793f", "html_url": "https://github.com/lsst/dax_imgserv/commit/499ba161d2c1d71b914a710a3172a7dd130a793f"}]}, {"sha": "499ba161d2c1d71b914a710a3172a7dd130a793f", "commit": {"author": {"name": "John Gates", "email": "jgates@slac.standford.edu", "date": "2014-12-01T21:17:42Z"}, "committer": {"name": "John Gates", "email": "jgates@slac.standford.edu", "date": "2014-12-01T21:17:42Z"}, "message": "Merge branch 'u/jgates/DM-1255'", "tree": {"sha": "f6c2d03d8567ce967dc8c5e014ffe59c78bc0fb0", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/f6c2d03d8567ce967dc8c5e014ffe59c78bc0fb0"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/499ba161d2c1d71b914a710a3172a7dd130a793f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/499ba161d2c1d71b914a710a3172a7dd130a793f", "html_url": "https://github.com/lsst/dax_imgserv/commit/499ba161d2c1d71b914a710a3172a7dd130a793f", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/499ba161d2c1d71b914a710a3172a7dd130a793f/comments", "author": null, "committer": null, "parents": [{"sha": "264fb53e7684752e8e0cfb5c1ee60136884efcec", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/264fb53e7684752e8e0cfb5c1ee60136884efcec", "html_url": "https://github.com/lsst/dax_imgserv/commit/264fb53e7684752e8e0cfb5c1ee60136884efcec"}, {"sha": "7905ba0489d1dda96a44f59d943feee06ddfb1e8", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/7905ba0489d1dda96a44f59d943feee06ddfb1e8", "html_url": "https://github.com/lsst/dax_imgserv/commit/7905ba0489d1dda96a44f59d943feee06ddfb1e8"}]}, {"sha": "7905ba0489d1dda96a44f59d943feee06ddfb1e8", "commit": {"author": {"name": "John Gates", "email": "jgates@slac.standford.edu", "date": "2014-11-21T18:26:41Z"}, "committer": {"name": "John Gates", "email": "jgates@slac.standford.edu", "date": "2014-12-01T21:10:40Z"}, "message": "Prototype for reading FITS header and storing in DB.\n\nThis is a combination of 6 commits.\n* Basic schema for FITS metadata.\n* Prototype for reading FITS headers and puting them in the metadata DB.\n* Added a script to test the database schema script.\n* This is the prototype for reading FITS header information and\nstoring it in the metadata database.\n* Prototype for reading FITS header data and placing it in the\ndatabase.\n* Reorganized creation of indexes and foreign keys.\n\nFor details please see branch u/jgates/DM-1255.", "tree": {"sha": "f6c2d03d8567ce967dc8c5e014ffe59c78bc0fb0", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/f6c2d03d8567ce967dc8c5e014ffe59c78bc0fb0"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/7905ba0489d1dda96a44f59d943feee06ddfb1e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/7905ba0489d1dda96a44f59d943feee06ddfb1e8", "html_url": "https://github.com/lsst/dax_imgserv/commit/7905ba0489d1dda96a44f59d943feee06ddfb1e8", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/7905ba0489d1dda96a44f59d943feee06ddfb1e8/comments", "author": null, "committer": null, "parents": [{"sha": "264fb53e7684752e8e0cfb5c1ee60136884efcec", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/264fb53e7684752e8e0cfb5c1ee60136884efcec", "html_url": "https://github.com/lsst/dax_imgserv/commit/264fb53e7684752e8e0cfb5c1ee60136884efcec"}]}, {"sha": "264fb53e7684752e8e0cfb5c1ee60136884efcec", "commit": {"author": {"name": "Fabrice Jammes", "email": "fabrice.jammes@in2p3.fr", "date": "2014-11-19T20:14:54Z"}, "committer": {"name": "Fabrice Jammes", "email": "fabrice.jammes@in2p3.fr", "date": "2014-11-19T20:14:54Z"}, "message": "Fix python import for LSST package", "tree": {"sha": "95541d1147978b9abc92e7f357e956d940d212f7", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/95541d1147978b9abc92e7f357e956d940d212f7"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/264fb53e7684752e8e0cfb5c1ee60136884efcec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/264fb53e7684752e8e0cfb5c1ee60136884efcec", "html_url": "https://github.com/lsst/dax_imgserv/commit/264fb53e7684752e8e0cfb5c1ee60136884efcec", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/264fb53e7684752e8e0cfb5c1ee60136884efcec/comments", "author": {"login": "fjammes", "id": 290045, "avatar_url": "https://avatars3.githubusercontent.com/u/290045?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fjammes", "html_url": "https://github.com/fjammes", "followers_url": "https://api.github.com/users/fjammes/followers", "following_url": "https://api.github.com/users/fjammes/following{/other_user}", "gists_url": "https://api.github.com/users/fjammes/gists{/gist_id}", "starred_url": "https://api.github.com/users/fjammes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fjammes/subscriptions", "organizations_url": "https://api.github.com/users/fjammes/orgs", "repos_url": "https://api.github.com/users/fjammes/repos", "events_url": "https://api.github.com/users/fjammes/events{/privacy}", "received_events_url": "https://api.github.com/users/fjammes/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fjammes", "id": 290045, "avatar_url": "https://avatars3.githubusercontent.com/u/290045?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fjammes", "html_url": "https://github.com/fjammes", "followers_url": "https://api.github.com/users/fjammes/followers", "following_url": "https://api.github.com/users/fjammes/following{/other_user}", "gists_url": "https://api.github.com/users/fjammes/gists{/gist_id}", "starred_url": "https://api.github.com/users/fjammes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fjammes/subscriptions", "organizations_url": "https://api.github.com/users/fjammes/orgs", "repos_url": "https://api.github.com/users/fjammes/repos", "events_url": "https://api.github.com/users/fjammes/events{/privacy}", "received_events_url": "https://api.github.com/users/fjammes/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b58f9707ad5427395f805ee975ab262f3bf9f04", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/6b58f9707ad5427395f805ee975ab262f3bf9f04", "html_url": "https://github.com/lsst/dax_imgserv/commit/6b58f9707ad5427395f805ee975ab262f3bf9f04"}]}, {"sha": "6b58f9707ad5427395f805ee975ab262f3bf9f04", "commit": {"author": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2014-11-12T07:04:26Z"}, "committer": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2014-11-12T07:04:26Z"}, "message": "added .gitignore", "tree": {"sha": "374dc3d2eeeb541dd4e75ccae7903b3af06301a0", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/374dc3d2eeeb541dd4e75ccae7903b3af06301a0"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/6b58f9707ad5427395f805ee975ab262f3bf9f04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/6b58f9707ad5427395f805ee975ab262f3bf9f04", "html_url": "https://github.com/lsst/dax_imgserv/commit/6b58f9707ad5427395f805ee975ab262f3bf9f04", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/6b58f9707ad5427395f805ee975ab262f3bf9f04/comments", "author": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24ffe56ef37aadbd098cdcda1698c176a3219a84", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/24ffe56ef37aadbd098cdcda1698c176a3219a84", "html_url": "https://github.com/lsst/dax_imgserv/commit/24ffe56ef37aadbd098cdcda1698c176a3219a84"}]}, {"sha": "24ffe56ef37aadbd098cdcda1698c176a3219a84", "commit": {"author": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2014-11-12T06:40:07Z"}, "committer": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2014-11-12T06:40:07Z"}, "message": "fixes, added missing SConscript", "tree": {"sha": "5de87267a11dc777d302d60219931cf36adf8110", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/5de87267a11dc777d302d60219931cf36adf8110"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/24ffe56ef37aadbd098cdcda1698c176a3219a84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/24ffe56ef37aadbd098cdcda1698c176a3219a84", "html_url": "https://github.com/lsst/dax_imgserv/commit/24ffe56ef37aadbd098cdcda1698c176a3219a84", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/24ffe56ef37aadbd098cdcda1698c176a3219a84/comments", "author": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1aaff9ab7116ae72d915e9bfb7410b2f697da3b9", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/1aaff9ab7116ae72d915e9bfb7410b2f697da3b9", "html_url": "https://github.com/lsst/dax_imgserv/commit/1aaff9ab7116ae72d915e9bfb7410b2f697da3b9"}]}, {"sha": "1aaff9ab7116ae72d915e9bfb7410b2f697da3b9", "commit": {"author": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2014-11-11T22:23:46Z"}, "committer": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2014-11-11T22:23:46Z"}, "message": "fixes", "tree": {"sha": "af6598b2392e567fd008f967ab5645041f789b75", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/af6598b2392e567fd008f967ab5645041f789b75"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/1aaff9ab7116ae72d915e9bfb7410b2f697da3b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/1aaff9ab7116ae72d915e9bfb7410b2f697da3b9", "html_url": "https://github.com/lsst/dax_imgserv/commit/1aaff9ab7116ae72d915e9bfb7410b2f697da3b9", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/1aaff9ab7116ae72d915e9bfb7410b2f697da3b9/comments", "author": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4f6e48bfc4646d4f2f6d3da8ac61d8033be4c0c", "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/b4f6e48bfc4646d4f2f6d3da8ac61d8033be4c0c", "html_url": "https://github.com/lsst/dax_imgserv/commit/b4f6e48bfc4646d4f2f6d3da8ac61d8033be4c0c"}]}, {"sha": "b4f6e48bfc4646d4f2f6d3da8ac61d8033be4c0c", "commit": {"author": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2014-11-11T22:09:44Z"}, "committer": {"name": "Jacek Becla", "email": "becla@slac.stanford.edu", "date": "2014-11-11T22:09:44Z"}, "message": "initial version of imgserv", "tree": {"sha": "bdf5051399cd2caef7ef70ac1ce632d8320fe693", "url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees/bdf5051399cd2caef7ef70ac1ce632d8320fe693"}, "url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits/b4f6e48bfc4646d4f2f6d3da8ac61d8033be4c0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/lsst/dax_imgserv/commits/b4f6e48bfc4646d4f2f6d3da8ac61d8033be4c0c", "html_url": "https://github.com/lsst/dax_imgserv/commit/b4f6e48bfc4646d4f2f6d3da8ac61d8033be4c0c", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/commits/b4f6e48bfc4646d4f2f6d3da8ac61d8033be4c0c/comments", "author": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "parents": []}], "pull_requests": [{"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/34", "id": 161243497, "html_url": "https://github.com/lsst/dax_imgserv/pull/34", "diff_url": "https://github.com/lsst/dax_imgserv/pull/34.diff", "patch_url": "https://github.com/lsst/dax_imgserv/pull/34.patch", "issue_url": "https://api.github.com/repos/lsst/dax_imgserv/issues/34", "number": 34, "state": "open", "locked": false, "title": "DM-10765: Replace existing WCS classes with SkyWcs", "user": {"login": "r-owen", "id": 874176, "avatar_url": "https://avatars0.githubusercontent.com/u/874176?v=4", "gravatar_id": "", "url": "https://api.github.com/users/r-owen", "html_url": "https://github.com/r-owen", "followers_url": "https://api.github.com/users/r-owen/followers", "following_url": "https://api.github.com/users/r-owen/following{/other_user}", "gists_url": "https://api.github.com/users/r-owen/gists{/gist_id}", "starred_url": "https://api.github.com/users/r-owen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/r-owen/subscriptions", "organizations_url": "https://api.github.com/users/r-owen/orgs", "repos_url": "https://api.github.com/users/r-owen/repos", "events_url": "https://api.github.com/users/r-owen/events{/privacy}", "received_events_url": "https://api.github.com/users/r-owen/received_events", "type": "User", "site_admin": false}, "body": "", "created_at": "2018-01-04T23:50:06Z", "updated_at": "2018-01-04T23:50:06Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "c602d969aa4c56b3ebaea352350111d8c128db3a", "assignee": null, "assignees": [], "requested_reviewers": [], "milestone": null, "commits_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/34/commits", "review_comments_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/34/comments", "review_comment_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/issues/34/comments", "statuses_url": "https://api.github.com/repos/lsst/dax_imgserv/statuses/aec8d82b7d50c40b1573b07ed8d2ef9fe84b7033", "head": {"label": "lsst:tickets/DM-10765", "ref": "tickets/DM-10765", "sha": "aec8d82b7d50c40b1573b07ed8d2ef9fe84b7033", "user": {"login": "lsst", "id": 1134504, "avatar_url": "https://avatars1.githubusercontent.com/u/1134504?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lsst", "html_url": "https://github.com/lsst", "followers_url": "https://api.github.com/users/lsst/followers", "following_url": "https://api.github.com/users/lsst/following{/other_user}", "gists_url": "https://api.github.com/users/lsst/gists{/gist_id}", "starred_url": "https://api.github.com/users/lsst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lsst/subscriptions", "organizations_url": "https://api.github.com/users/lsst/orgs", "repos_url": "https://api.github.com/users/lsst/repos", "events_url": "https://api.github.com/users/lsst/events{/privacy}", "received_events_url": "https://api.github.com/users/lsst/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 30268942, "name": "dax_imgserv", "full_name": "lsst/dax_imgserv", "owner": {"login": "lsst", "id": 1134504, "avatar_url": "https://avatars1.githubusercontent.com/u/1134504?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lsst", "html_url": "https://github.com/lsst", "followers_url": "https://api.github.com/users/lsst/followers", "following_url": "https://api.github.com/users/lsst/following{/other_user}", "gists_url": "https://api.github.com/users/lsst/gists{/gist_id}", "starred_url": "https://api.github.com/users/lsst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lsst/subscriptions", "organizations_url": "https://api.github.com/users/lsst/orgs", "repos_url": "https://api.github.com/users/lsst/repos", "events_url": "https://api.github.com/users/lsst/events{/privacy}", "received_events_url": "https://api.github.com/users/lsst/received_events", "type": "Organization", "site_admin": false}, "private": false, "html_url": "https://github.com/lsst/dax_imgserv", "description": "Web Interface for LSST Image Services", "fork": false, "url": "https://api.github.com/repos/lsst/dax_imgserv", "forks_url": "https://api.github.com/repos/lsst/dax_imgserv/forks", "keys_url": "https://api.github.com/repos/lsst/dax_imgserv/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/lsst/dax_imgserv/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/lsst/dax_imgserv/teams", "hooks_url": "https://api.github.com/repos/lsst/dax_imgserv/hooks", "issue_events_url": "https://api.github.com/repos/lsst/dax_imgserv/issues/events{/number}", "events_url": "https://api.github.com/repos/lsst/dax_imgserv/events", "assignees_url": "https://api.github.com/repos/lsst/dax_imgserv/assignees{/user}", "branches_url": "https://api.github.com/repos/lsst/dax_imgserv/branches{/branch}", "tags_url": "https://api.github.com/repos/lsst/dax_imgserv/tags", "blobs_url": "https://api.github.com/repos/lsst/dax_imgserv/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/lsst/dax_imgserv/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/lsst/dax_imgserv/git/refs{/sha}", "trees_url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/lsst/dax_imgserv/statuses/{sha}", "languages_url": "https://api.github.com/repos/lsst/dax_imgserv/languages", "stargazers_url": "https://api.github.com/repos/lsst/dax_imgserv/stargazers", "contributors_url": "https://api.github.com/repos/lsst/dax_imgserv/contributors", "subscribers_url": "https://api.github.com/repos/lsst/dax_imgserv/subscribers", "subscription_url": "https://api.github.com/repos/lsst/dax_imgserv/subscription", "commits_url": "https://api.github.com/repos/lsst/dax_imgserv/commits{/sha}", "git_commits_url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits{/sha}", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/comments{/number}", "issue_comment_url": "https://api.github.com/repos/lsst/dax_imgserv/issues/comments{/number}", "contents_url": "https://api.github.com/repos/lsst/dax_imgserv/contents/{+path}", "compare_url": "https://api.github.com/repos/lsst/dax_imgserv/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/lsst/dax_imgserv/merges", "archive_url": "https://api.github.com/repos/lsst/dax_imgserv/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/lsst/dax_imgserv/downloads", "issues_url": "https://api.github.com/repos/lsst/dax_imgserv/issues{/number}", "pulls_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls{/number}", "milestones_url": "https://api.github.com/repos/lsst/dax_imgserv/milestones{/number}", "notifications_url": "https://api.github.com/repos/lsst/dax_imgserv/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/lsst/dax_imgserv/labels{/name}", "releases_url": "https://api.github.com/repos/lsst/dax_imgserv/releases{/id}", "deployments_url": "https://api.github.com/repos/lsst/dax_imgserv/deployments", "created_at": "2015-02-03T22:50:07Z", "updated_at": "2016-10-30T20:44:55Z", "pushed_at": "2018-01-19T22:41:36Z", "git_url": "git://github.com/lsst/dax_imgserv.git", "ssh_url": "git@github.com:lsst/dax_imgserv.git", "clone_url": "https://github.com/lsst/dax_imgserv.git", "svn_url": "https://github.com/lsst/dax_imgserv", "homepage": "http://dm.lsst.org/", "size": 17253, "stargazers_count": 1, "watchers_count": 1, "language": "Python", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 2, "mirror_url": null, "archived": false, "open_issues_count": 1, "license": null, "forks": 2, "open_issues": 1, "watchers": 1, "default_branch": "master"}}, "base": {"label": "lsst:master", "ref": "master", "sha": "f2a825648ad5fe824d9c060f5d4ab7b4abb0718e", "user": {"login": "lsst", "id": 1134504, "avatar_url": "https://avatars1.githubusercontent.com/u/1134504?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lsst", "html_url": "https://github.com/lsst", "followers_url": "https://api.github.com/users/lsst/followers", "following_url": "https://api.github.com/users/lsst/following{/other_user}", "gists_url": "https://api.github.com/users/lsst/gists{/gist_id}", "starred_url": "https://api.github.com/users/lsst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lsst/subscriptions", "organizations_url": "https://api.github.com/users/lsst/orgs", "repos_url": "https://api.github.com/users/lsst/repos", "events_url": "https://api.github.com/users/lsst/events{/privacy}", "received_events_url": "https://api.github.com/users/lsst/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 30268942, "name": "dax_imgserv", "full_name": "lsst/dax_imgserv", "owner": {"login": "lsst", "id": 1134504, "avatar_url": "https://avatars1.githubusercontent.com/u/1134504?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lsst", "html_url": "https://github.com/lsst", "followers_url": "https://api.github.com/users/lsst/followers", "following_url": "https://api.github.com/users/lsst/following{/other_user}", "gists_url": "https://api.github.com/users/lsst/gists{/gist_id}", "starred_url": "https://api.github.com/users/lsst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lsst/subscriptions", "organizations_url": "https://api.github.com/users/lsst/orgs", "repos_url": "https://api.github.com/users/lsst/repos", "events_url": "https://api.github.com/users/lsst/events{/privacy}", "received_events_url": "https://api.github.com/users/lsst/received_events", "type": "Organization", "site_admin": false}, "private": false, "html_url": "https://github.com/lsst/dax_imgserv", "description": "Web Interface for LSST Image Services", "fork": false, "url": "https://api.github.com/repos/lsst/dax_imgserv", "forks_url": "https://api.github.com/repos/lsst/dax_imgserv/forks", "keys_url": "https://api.github.com/repos/lsst/dax_imgserv/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/lsst/dax_imgserv/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/lsst/dax_imgserv/teams", "hooks_url": "https://api.github.com/repos/lsst/dax_imgserv/hooks", "issue_events_url": "https://api.github.com/repos/lsst/dax_imgserv/issues/events{/number}", "events_url": "https://api.github.com/repos/lsst/dax_imgserv/events", "assignees_url": "https://api.github.com/repos/lsst/dax_imgserv/assignees{/user}", "branches_url": "https://api.github.com/repos/lsst/dax_imgserv/branches{/branch}", "tags_url": "https://api.github.com/repos/lsst/dax_imgserv/tags", "blobs_url": "https://api.github.com/repos/lsst/dax_imgserv/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/lsst/dax_imgserv/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/lsst/dax_imgserv/git/refs{/sha}", "trees_url": "https://api.github.com/repos/lsst/dax_imgserv/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/lsst/dax_imgserv/statuses/{sha}", "languages_url": "https://api.github.com/repos/lsst/dax_imgserv/languages", "stargazers_url": "https://api.github.com/repos/lsst/dax_imgserv/stargazers", "contributors_url": "https://api.github.com/repos/lsst/dax_imgserv/contributors", "subscribers_url": "https://api.github.com/repos/lsst/dax_imgserv/subscribers", "subscription_url": "https://api.github.com/repos/lsst/dax_imgserv/subscription", "commits_url": "https://api.github.com/repos/lsst/dax_imgserv/commits{/sha}", "git_commits_url": "https://api.github.com/repos/lsst/dax_imgserv/git/commits{/sha}", "comments_url": "https://api.github.com/repos/lsst/dax_imgserv/comments{/number}", "issue_comment_url": "https://api.github.com/repos/lsst/dax_imgserv/issues/comments{/number}", "contents_url": "https://api.github.com/repos/lsst/dax_imgserv/contents/{+path}", "compare_url": "https://api.github.com/repos/lsst/dax_imgserv/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/lsst/dax_imgserv/merges", "archive_url": "https://api.github.com/repos/lsst/dax_imgserv/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/lsst/dax_imgserv/downloads", "issues_url": "https://api.github.com/repos/lsst/dax_imgserv/issues{/number}", "pulls_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls{/number}", "milestones_url": "https://api.github.com/repos/lsst/dax_imgserv/milestones{/number}", "notifications_url": "https://api.github.com/repos/lsst/dax_imgserv/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/lsst/dax_imgserv/labels{/name}", "releases_url": "https://api.github.com/repos/lsst/dax_imgserv/releases{/id}", "deployments_url": "https://api.github.com/repos/lsst/dax_imgserv/deployments", "created_at": "2015-02-03T22:50:07Z", "updated_at": "2016-10-30T20:44:55Z", "pushed_at": "2018-01-19T22:41:36Z", "git_url": "git://github.com/lsst/dax_imgserv.git", "ssh_url": "git@github.com:lsst/dax_imgserv.git", "clone_url": "https://github.com/lsst/dax_imgserv.git", "svn_url": "https://github.com/lsst/dax_imgserv", "homepage": "http://dm.lsst.org/", "size": 17253, "stargazers_count": 1, "watchers_count": 1, "language": "Python", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 2, "mirror_url": null, "archived": false, "open_issues_count": 1, "license": null, "forks": 2, "open_issues": 1, "watchers": 1, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/34"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/34"}, "issue": {"href": "https://api.github.com/repos/lsst/dax_imgserv/issues/34"}, "comments": {"href": "https://api.github.com/repos/lsst/dax_imgserv/issues/34/comments"}, "review_comments": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/34/comments"}, "review_comment": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/34/commits"}, "statuses": {"href": "https://api.github.com/repos/lsst/dax_imgserv/statuses/aec8d82b7d50c40b1573b07ed8d2ef9fe84b7033"}}, "author_association": "NONE"}], "issue_comments": [{"url": "https://api.github.com/repos/lsst/dax_imgserv/issues/comments/256971963", "html_url": "https://github.com/lsst/dax_imgserv/pull/13#issuecomment-256971963", "issue_url": "https://api.github.com/repos/lsst/dax_imgserv/issues/13", "id": 256971963, "user": {"login": "timj", "id": 60622, "avatar_url": "https://avatars1.githubusercontent.com/u/60622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timj", "html_url": "https://github.com/timj", "followers_url": "https://api.github.com/users/timj/followers", "following_url": "https://api.github.com/users/timj/following{/other_user}", "gists_url": "https://api.github.com/users/timj/gists{/gist_id}", "starred_url": "https://api.github.com/users/timj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timj/subscriptions", "organizations_url": "https://api.github.com/users/timj/orgs", "repos_url": "https://api.github.com/users/timj/repos", "events_url": "https://api.github.com/users/timj/events{/privacy}", "received_events_url": "https://api.github.com/users/timj/received_events", "type": "User", "site_admin": false}, "created_at": "2016-10-28T16:54:31Z", "updated_at": "2016-10-28T16:54:31Z", "author_association": "OWNER", "body": "Can you please fix the two bad merge commits?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/issues/comments/256971963/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/issues/comments/321940310", "html_url": "https://github.com/lsst/dax_imgserv/pull/26#issuecomment-321940310", "issue_url": "https://api.github.com/repos/lsst/dax_imgserv/issues/26", "id": 321940310, "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-11T23:34:18Z", "updated_at": "2017-08-11T23:34:18Z", "author_association": "CONTRIBUTOR", "body": "Hi Brian - I've made the changes per your good input and suggestions.  Please review again - thanks! ", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/issues/comments/321940310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/issues/comments/324767653", "html_url": "https://github.com/lsst/dax_imgserv/pull/27#issuecomment-324767653", "issue_url": "https://api.github.com/repos/lsst/dax_imgserv/issues/27", "id": 324767653, "user": {"login": "timj", "id": 60622, "avatar_url": "https://avatars1.githubusercontent.com/u/60622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timj", "html_url": "https://github.com/timj", "followers_url": "https://api.github.com/users/timj/followers", "following_url": "https://api.github.com/users/timj/following{/other_user}", "gists_url": "https://api.github.com/users/timj/gists{/gist_id}", "starred_url": "https://api.github.com/users/timj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timj/subscriptions", "organizations_url": "https://api.github.com/users/timj/orgs", "repos_url": "https://api.github.com/users/timj/repos", "events_url": "https://api.github.com/users/timj/events{/privacy}", "received_events_url": "https://api.github.com/users/timj/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-24T21:52:28Z", "updated_at": "2017-08-24T21:52:28Z", "author_association": "OWNER", "body": "Thanks. Can't believe there's now a conflict but I'll fix that.", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/issues/comments/324767653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}], "commit_comments": [{"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9573622", "html_url": "https://github.com/lsst/dax_imgserv/commit/f44beab9185e44319240b3a6f91367535471674c#commitcomment-9573622", "id": 9573622, "user": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "position": 22, "line": 22, "path": "python/lsst/imgserv/locateImage.py", "commit_id": "f44beab9185e44319240b3a6f91367535471674c", "created_at": "2015-02-03T23:36:29Z", "updated_at": "2015-02-03T23:36:29Z", "author_association": "CONTRIBUTOR", "body": "You might want to consider adding author/you here\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9573622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9573657", "html_url": "https://github.com/lsst/dax_imgserv/commit/f44beab9185e44319240b3a6f91367535471674c#commitcomment-9573657", "id": 9573657, "user": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "position": 85, "line": 85, "path": "python/lsst/imgserv/locateImage.py", "commit_id": "f44beab9185e44319240b3a6f91367535471674c", "created_at": "2015-02-03T23:38:30Z", "updated_at": "2015-02-03T23:38:30Z", "author_association": "CONTRIBUTOR", "body": "Is it used? I can see it is used in the test program, but I am not sure if it is needed here. If you do need it, and you need it purely for tests, maybe we should at least document that it is used for tests only?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9573657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9573671", "html_url": "https://github.com/lsst/dax_imgserv/commit/f44beab9185e44319240b3a6f91367535471674c#commitcomment-9573671", "id": 9573671, "user": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "position": 82, "line": 82, "path": "python/lsst/imgserv/locateImage.py", "commit_id": "f44beab9185e44319240b3a6f91367535471674c", "created_at": "2015-02-03T23:39:15Z", "updated_at": "2015-02-03T23:39:15Z", "author_association": "CONTRIBUTOR", "body": "I'd find a more descriptive name here, maybe closeConnection?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9573671/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9573688", "html_url": "https://github.com/lsst/dax_imgserv/commit/f44beab9185e44319240b3a6f91367535471674c#commitcomment-9573688", "id": 9573688, "user": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "position": 98, "line": 98, "path": "python/lsst/imgserv/locateImage.py", "commit_id": "f44beab9185e44319240b3a6f91367535471674c", "created_at": "2015-02-03T23:40:34Z", "updated_at": "2015-02-03T23:40:34Z", "author_association": "CONTRIBUTOR", "body": "Add in description that it returns None if...?image not found?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9573688/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9573701", "html_url": "https://github.com/lsst/dax_imgserv/commit/f44beab9185e44319240b3a6f91367535471674c#commitcomment-9573701", "id": 9573701, "user": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "position": 101, "line": 101, "path": "python/lsst/imgserv/locateImage.py", "commit_id": "f44beab9185e44319240b3a6f91367535471674c", "created_at": "2015-02-03T23:41:39Z", "updated_at": "2015-02-03T23:41:39Z", "author_association": "CONTRIBUTOR", "body": "Hardcoded constants should be avoided, we are told. What is 10? Why 10? Perhaps let's document?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9573701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9573722", "html_url": "https://github.com/lsst/dax_imgserv/commit/f44beab9185e44319240b3a6f91367535471674c#commitcomment-9573722", "id": 9573722, "user": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "position": 181, "line": 181, "path": "python/lsst/imgserv/locateImage.py", "commit_id": "f44beab9185e44319240b3a6f91367535471674c", "created_at": "2015-02-03T23:42:45Z", "updated_at": "2015-02-03T23:42:45Z", "author_association": "CONTRIBUTOR", "body": "It'd be good to document all this that is happening here (in the description of the function probably). \n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9573722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9573738", "html_url": "https://github.com/lsst/dax_imgserv/commit/f44beab9185e44319240b3a6f91367535471674c#commitcomment-9573738", "id": 9573738, "user": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "position": 198, "line": 198, "path": "python/lsst/imgserv/locateImage.py", "commit_id": "f44beab9185e44319240b3a6f91367535471674c", "created_at": "2015-02-03T23:43:48Z", "updated_at": "2015-02-03T23:43:48Z", "author_association": "CONTRIBUTOR", "body": "Do we understand how much of the above calculations could be avoided by using more from afw?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9573738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9573753", "html_url": "https://github.com/lsst/dax_imgserv/commit/f44beab9185e44319240b3a6f91367535471674c#commitcomment-9573753", "id": 9573753, "user": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "position": 226, "line": 226, "path": "python/lsst/imgserv/locateImage.py", "commit_id": "f44beab9185e44319240b3a6f91367535471674c", "created_at": "2015-02-03T23:45:03Z", "updated_at": "2015-02-03T23:45:03Z", "author_association": "CONTRIBUTOR", "body": "if that is internal function (is it?), perhaps pre-pend with __?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9573753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9573764", "html_url": "https://github.com/lsst/dax_imgserv/commit/f44beab9185e44319240b3a6f91367535471674c#commitcomment-9573764", "id": 9573764, "user": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "position": 248, "line": 248, "path": "python/lsst/imgserv/locateImage.py", "commit_id": "f44beab9185e44319240b3a6f91367535471674c", "created_at": "2015-02-03T23:46:03Z", "updated_at": "2015-02-03T23:46:03Z", "author_association": "CONTRIBUTOR", "body": "consider moving to separate file with dedicated unit test\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9573764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9573793", "html_url": "https://github.com/lsst/dax_imgserv/commit/f44beab9185e44319240b3a6f91367535471674c#commitcomment-9573793", "id": 9573793, "user": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "position": 260, "line": 260, "path": "python/lsst/imgserv/locateImage.py", "commit_id": "f44beab9185e44319240b3a6f91367535471674c", "created_at": "2015-02-03T23:47:16Z", "updated_at": "2015-02-03T23:47:16Z", "author_association": "CONTRIBUTOR", "body": "I think I'd prefer envvar here, especially since it has \"lsst10\" in the name.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9573793/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9573803", "html_url": "https://github.com/lsst/dax_imgserv/commit/f44beab9185e44319240b3a6f91367535471674c#commitcomment-9573803", "id": 9573803, "user": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "position": 22, "line": 22, "path": "python/lsst/imgserv/locateImage.py", "commit_id": "f44beab9185e44319240b3a6f91367535471674c", "created_at": "2015-02-03T23:48:10Z", "updated_at": "2015-02-03T23:48:10Z", "author_association": "CONTRIBUTOR", "body": "A brief description of what is in this file would be useful.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9573803/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9588299", "html_url": "https://github.com/lsst/dax_imgserv/commit/f44beab9185e44319240b3a6f91367535471674c#commitcomment-9588299", "id": 9588299, "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "position": 198, "line": 198, "path": "python/lsst/imgserv/locateImage.py", "commit_id": "f44beab9185e44319240b3a6f91367535471674c", "created_at": "2015-02-04T17:37:48Z", "updated_at": "2015-02-04T17:37:48Z", "author_association": "CONTRIBUTOR", "body": "This is meant to get something up and running and is probably not a good final solution. A function that returns a reasonably accurate arcsecond per pixel scale for X and Y axes of the image would work. I didn't see one in afw. Also, image warping might work, but is probably overkill. This is something I want to talk about at the all hands, as many application will want accurate WCS information. \n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9588299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9588712", "html_url": "https://github.com/lsst/dax_imgserv/commit/f44beab9185e44319240b3a6f91367535471674c#commitcomment-9588712", "id": 9588712, "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "position": 248, "line": 248, "path": "python/lsst/imgserv/locateImage.py", "commit_id": "f44beab9185e44319240b3a6f91367535471674c", "created_at": "2015-02-04T17:59:38Z", "updated_at": "2015-02-04T17:59:38Z", "author_association": "CONTRIBUTOR", "body": "Moved them to examples. I am wary of adding unit tests depend on data that can't be put in Git. \n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9588712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9588915", "html_url": "https://github.com/lsst/dax_imgserv/commit/f44beab9185e44319240b3a6f91367535471674c#commitcomment-9588915", "id": 9588915, "user": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "position": 198, "line": 198, "path": "python/lsst/imgserv/locateImage.py", "commit_id": "f44beab9185e44319240b3a6f91367535471674c", "created_at": "2015-02-04T18:11:08Z", "updated_at": "2015-02-04T18:11:08Z", "author_association": "CONTRIBUTOR", "body": "Sounds great! I was just checking :)\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9588915/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9923718", "html_url": "https://github.com/lsst/dax_imgserv/commit/f501ff7426b3aa7a868a246e15994f342267ad57#commitcomment-9923718", "id": 9923718, "user": {"login": "andy-slac", "id": 4266950, "avatar_url": "https://avatars1.githubusercontent.com/u/4266950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-slac", "html_url": "https://github.com/andy-slac", "followers_url": "https://api.github.com/users/andy-slac/followers", "following_url": "https://api.github.com/users/andy-slac/following{/other_user}", "gists_url": "https://api.github.com/users/andy-slac/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-slac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-slac/subscriptions", "organizations_url": "https://api.github.com/users/andy-slac/orgs", "repos_url": "https://api.github.com/users/andy-slac/repos", "events_url": "https://api.github.com/users/andy-slac/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-slac/received_events", "type": "User", "site_admin": false}, "position": null, "line": null, "path": null, "commit_id": "f501ff7426b3aa7a868a246e15994f342267ad57", "created_at": "2015-02-25T21:21:08Z", "updated_at": "2015-02-25T21:21:08Z", "author_association": "CONTRIBUTOR", "body": "You could probably squash this commit with some other, it's not too useful by itself\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9923718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9924122", "html_url": "https://github.com/lsst/dax_imgserv/commit/fa618bb9a68be0119c880c18b2b3a6d8d4ae2549#commitcomment-9924122", "id": 9924122, "user": {"login": "andy-slac", "id": 4266950, "avatar_url": "https://avatars1.githubusercontent.com/u/4266950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-slac", "html_url": "https://github.com/andy-slac", "followers_url": "https://api.github.com/users/andy-slac/followers", "following_url": "https://api.github.com/users/andy-slac/following{/other_user}", "gists_url": "https://api.github.com/users/andy-slac/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-slac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-slac/subscriptions", "organizations_url": "https://api.github.com/users/andy-slac/orgs", "repos_url": "https://api.github.com/users/andy-slac/repos", "events_url": "https://api.github.com/users/andy-slac/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-slac/received_events", "type": "User", "site_admin": false}, "position": 21, "line": 51, "path": "python/lsst/imgserv/imageREST_v0.py", "commit_id": "fa618bb9a68be0119c880c18b2b3a6d8d4ae2549", "created_at": "2015-02-25T21:41:12Z", "updated_at": "2015-02-25T21:41:12Z", "author_association": "CONTRIBUTOR", "body": "I think it could be a simplification to raise exception in case of errors, there would be no nonsensical values to return, message can be encoded into exception.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9924122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9924180", "html_url": "https://github.com/lsst/dax_imgserv/commit/fa618bb9a68be0119c880c18b2b3a6d8d4ae2549#commitcomment-9924180", "id": 9924180, "user": {"login": "andy-slac", "id": 4266950, "avatar_url": "https://avatars1.githubusercontent.com/u/4266950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-slac", "html_url": "https://github.com/andy-slac", "followers_url": "https://api.github.com/users/andy-slac/followers", "following_url": "https://api.github.com/users/andy-slac/following{/other_user}", "gists_url": "https://api.github.com/users/andy-slac/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-slac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-slac/subscriptions", "organizations_url": "https://api.github.com/users/andy-slac/orgs", "repos_url": "https://api.github.com/users/andy-slac/repos", "events_url": "https://api.github.com/users/andy-slac/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-slac/received_events", "type": "User", "site_admin": false}, "position": 36, "line": 66, "path": "python/lsst/imgserv/imageREST_v0.py", "commit_id": "fa618bb9a68be0119c880c18b2b3a6d8d4ae2549", "created_at": "2015-02-25T21:44:18Z", "updated_at": "2015-02-25T21:44:18Z", "author_association": "CONTRIBUTOR", "body": "I would have written it as `filt not in validFilters`, it looks more natural (to me).\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9924180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9924226", "html_url": "https://github.com/lsst/dax_imgserv/commit/fa618bb9a68be0119c880c18b2b3a6d8d4ae2549#commitcomment-9924226", "id": 9924226, "user": {"login": "andy-slac", "id": 4266950, "avatar_url": "https://avatars1.githubusercontent.com/u/4266950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-slac", "html_url": "https://github.com/andy-slac", "followers_url": "https://api.github.com/users/andy-slac/followers", "following_url": "https://api.github.com/users/andy-slac/following{/other_user}", "gists_url": "https://api.github.com/users/andy-slac/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-slac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-slac/subscriptions", "organizations_url": "https://api.github.com/users/andy-slac/orgs", "repos_url": "https://api.github.com/users/andy-slac/repos", "events_url": "https://api.github.com/users/andy-slac/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-slac/received_events", "type": "User", "site_admin": false}, "position": 89, "line": 116, "path": "python/lsst/imgserv/imageREST_v0.py", "commit_id": "fa618bb9a68be0119c880c18b2b3a6d8d4ae2549", "created_at": "2015-02-25T21:46:38Z", "updated_at": "2015-02-25T21:46:38Z", "author_association": "CONTRIBUTOR", "body": "You could write `'irg'` instead of `('i', 'r', 'g')`, slightly shorter.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9924226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9924257", "html_url": "https://github.com/lsst/dax_imgserv/commit/fa618bb9a68be0119c880c18b2b3a6d8d4ae2549#commitcomment-9924257", "id": 9924257, "user": {"login": "andy-slac", "id": 4266950, "avatar_url": "https://avatars1.githubusercontent.com/u/4266950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-slac", "html_url": "https://github.com/andy-slac", "followers_url": "https://api.github.com/users/andy-slac/followers", "following_url": "https://api.github.com/users/andy-slac/following{/other_user}", "gists_url": "https://api.github.com/users/andy-slac/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-slac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-slac/subscriptions", "organizations_url": "https://api.github.com/users/andy-slac/orgs", "repos_url": "https://api.github.com/users/andy-slac/repos", "events_url": "https://api.github.com/users/andy-slac/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-slac/received_events", "type": "User", "site_admin": false}, "position": 86, "line": 113, "path": "python/lsst/imgserv/imageREST_v0.py", "commit_id": "fa618bb9a68be0119c880c18b2b3a6d8d4ae2549", "created_at": "2015-02-25T21:47:33Z", "updated_at": "2015-02-25T21:47:33Z", "author_association": "CONTRIBUTOR", "body": "Are these reasonable defaults, or are there any reasonable defaults at all?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9924257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9924338", "html_url": "https://github.com/lsst/dax_imgserv/commit/fa618bb9a68be0119c880c18b2b3a6d8d4ae2549#commitcomment-9924338", "id": 9924338, "user": {"login": "andy-slac", "id": 4266950, "avatar_url": "https://avatars1.githubusercontent.com/u/4266950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-slac", "html_url": "https://github.com/andy-slac", "followers_url": "https://api.github.com/users/andy-slac/followers", "following_url": "https://api.github.com/users/andy-slac/following{/other_user}", "gists_url": "https://api.github.com/users/andy-slac/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-slac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-slac/subscriptions", "organizations_url": "https://api.github.com/users/andy-slac/orgs", "repos_url": "https://api.github.com/users/andy-slac/repos", "events_url": "https://api.github.com/users/andy-slac/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-slac/received_events", "type": "User", "site_admin": false}, "position": 105, "line": 123, "path": "python/lsst/imgserv/imageREST_v0.py", "commit_id": "fa618bb9a68be0119c880c18b2b3a6d8d4ae2549", "created_at": "2015-02-25T21:51:13Z", "updated_at": "2015-02-25T21:51:13Z", "author_association": "CONTRIBUTOR", "body": "Does the credentials file name have to appear here? If it is this module-specific name then it's still better to make it module-level constant.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9924338/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9924435", "html_url": "https://github.com/lsst/dax_imgserv/commit/fa618bb9a68be0119c880c18b2b3a6d8d4ae2549#commitcomment-9924435", "id": 9924435, "user": {"login": "andy-slac", "id": 4266950, "avatar_url": "https://avatars1.githubusercontent.com/u/4266950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-slac", "html_url": "https://github.com/andy-slac", "followers_url": "https://api.github.com/users/andy-slac/followers", "following_url": "https://api.github.com/users/andy-slac/following{/other_user}", "gists_url": "https://api.github.com/users/andy-slac/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-slac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-slac/subscriptions", "organizations_url": "https://api.github.com/users/andy-slac/orgs", "repos_url": "https://api.github.com/users/andy-slac/repos", "events_url": "https://api.github.com/users/andy-slac/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-slac/received_events", "type": "User", "site_admin": false}, "position": 81, "line": 110, "path": "python/lsst/imgserv/locateImage.py", "commit_id": "fa618bb9a68be0119c880c18b2b3a6d8d4ae2549", "created_at": "2015-02-25T21:56:34Z", "updated_at": "2015-02-25T21:56:34Z", "author_association": "CONTRIBUTOR", "body": "I think imageREST_v0.py expects getImage() to return None if image is not found\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9924435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9924588", "html_url": "https://github.com/lsst/dax_imgserv/commit/fa618bb9a68be0119c880c18b2b3a6d8d4ae2549#commitcomment-9924588", "id": 9924588, "user": {"login": "andy-slac", "id": 4266950, "avatar_url": "https://avatars1.githubusercontent.com/u/4266950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-slac", "html_url": "https://github.com/andy-slac", "followers_url": "https://api.github.com/users/andy-slac/followers", "following_url": "https://api.github.com/users/andy-slac/following{/other_user}", "gists_url": "https://api.github.com/users/andy-slac/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-slac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-slac/subscriptions", "organizations_url": "https://api.github.com/users/andy-slac/orgs", "repos_url": "https://api.github.com/users/andy-slac/repos", "events_url": "https://api.github.com/users/andy-slac/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-slac/received_events", "type": "User", "site_admin": false}, "position": 203, "line": 197, "path": "python/lsst/imgserv/imageREST_v0.py", "commit_id": "fa618bb9a68be0119c880c18b2b3a6d8d4ae2549", "created_at": "2015-02-25T22:03:23Z", "updated_at": "2015-02-25T22:03:23Z", "author_association": "CONTRIBUTOR", "body": "May be useful to add content-type header?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9924588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9925007", "html_url": "https://github.com/lsst/dax_imgserv/commit/fa618bb9a68be0119c880c18b2b3a6d8d4ae2549#commitcomment-9925007", "id": 9925007, "user": {"login": "andy-slac", "id": 4266950, "avatar_url": "https://avatars1.githubusercontent.com/u/4266950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-slac", "html_url": "https://github.com/andy-slac", "followers_url": "https://api.github.com/users/andy-slac/followers", "following_url": "https://api.github.com/users/andy-slac/following{/other_user}", "gists_url": "https://api.github.com/users/andy-slac/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-slac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-slac/subscriptions", "organizations_url": "https://api.github.com/users/andy-slac/orgs", "repos_url": "https://api.github.com/users/andy-slac/repos", "events_url": "https://api.github.com/users/andy-slac/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-slac/received_events", "type": "User", "site_admin": false}, "position": 292, "line": 244, "path": "python/lsst/imgserv/locateImage.py", "commit_id": "fa618bb9a68be0119c880c18b2b3a6d8d4ae2549", "created_at": "2015-02-25T22:24:57Z", "updated_at": "2015-02-25T22:24:57Z", "author_association": "CONTRIBUTOR", "body": "SOmewhat shorter:\n`run, camcol, field, filterName = ln[2:6]`\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9925007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9925014", "html_url": "https://github.com/lsst/dax_imgserv/commit/fa618bb9a68be0119c880c18b2b3a6d8d4ae2549#commitcomment-9925014", "id": 9925014, "user": {"login": "andy-slac", "id": 4266950, "avatar_url": "https://avatars1.githubusercontent.com/u/4266950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-slac", "html_url": "https://github.com/andy-slac", "followers_url": "https://api.github.com/users/andy-slac/followers", "following_url": "https://api.github.com/users/andy-slac/following{/other_user}", "gists_url": "https://api.github.com/users/andy-slac/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-slac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-slac/subscriptions", "organizations_url": "https://api.github.com/users/andy-slac/orgs", "repos_url": "https://api.github.com/users/andy-slac/repos", "events_url": "https://api.github.com/users/andy-slac/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-slac/received_events", "type": "User", "site_admin": false}, "position": 293, "line": 245, "path": "python/lsst/imgserv/locateImage.py", "commit_id": "fa618bb9a68be0119c880c18b2b3a6d8d4ae2549", "created_at": "2015-02-25T22:25:18Z", "updated_at": "2015-02-25T22:25:18Z", "author_association": "CONTRIBUTOR", "body": "Needs spaces around assignment\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9925014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9925035", "html_url": "https://github.com/lsst/dax_imgserv/commit/fa618bb9a68be0119c880c18b2b3a6d8d4ae2549#commitcomment-9925035", "id": 9925035, "user": {"login": "andy-slac", "id": 4266950, "avatar_url": "https://avatars1.githubusercontent.com/u/4266950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-slac", "html_url": "https://github.com/andy-slac", "followers_url": "https://api.github.com/users/andy-slac/followers", "following_url": "https://api.github.com/users/andy-slac/following{/other_user}", "gists_url": "https://api.github.com/users/andy-slac/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-slac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-slac/subscriptions", "organizations_url": "https://api.github.com/users/andy-slac/orgs", "repos_url": "https://api.github.com/users/andy-slac/repos", "events_url": "https://api.github.com/users/andy-slac/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-slac/received_events", "type": "User", "site_admin": false}, "position": 321, "line": 273, "path": "python/lsst/imgserv/locateImage.py", "commit_id": "fa618bb9a68be0119c880c18b2b3a6d8d4ae2549", "created_at": "2015-02-25T22:26:14Z", "updated_at": "2015-02-25T22:26:14Z", "author_association": "CONTRIBUTOR", "body": "Space after comma\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9925035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9925081", "html_url": "https://github.com/lsst/dax_imgserv/commit/fa618bb9a68be0119c880c18b2b3a6d8d4ae2549#commitcomment-9925081", "id": 9925081, "user": {"login": "andy-slac", "id": 4266950, "avatar_url": "https://avatars1.githubusercontent.com/u/4266950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-slac", "html_url": "https://github.com/andy-slac", "followers_url": "https://api.github.com/users/andy-slac/followers", "following_url": "https://api.github.com/users/andy-slac/following{/other_user}", "gists_url": "https://api.github.com/users/andy-slac/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-slac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-slac/subscriptions", "organizations_url": "https://api.github.com/users/andy-slac/orgs", "repos_url": "https://api.github.com/users/andy-slac/repos", "events_url": "https://api.github.com/users/andy-slac/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-slac/received_events", "type": "User", "site_admin": false}, "position": 384, "line": 336, "path": "python/lsst/imgserv/locateImage.py", "commit_id": "fa618bb9a68be0119c880c18b2b3a6d8d4ae2549", "created_at": "2015-02-25T22:29:18Z", "updated_at": "2015-02-25T22:29:18Z", "author_association": "CONTRIBUTOR", "body": "would the rounding be more mathematically correct?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9925081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9925124", "html_url": "https://github.com/lsst/dax_imgserv/commit/fa618bb9a68be0119c880c18b2b3a6d8d4ae2549#commitcomment-9925124", "id": 9925124, "user": {"login": "andy-slac", "id": 4266950, "avatar_url": "https://avatars1.githubusercontent.com/u/4266950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-slac", "html_url": "https://github.com/andy-slac", "followers_url": "https://api.github.com/users/andy-slac/followers", "following_url": "https://api.github.com/users/andy-slac/following{/other_user}", "gists_url": "https://api.github.com/users/andy-slac/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-slac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-slac/subscriptions", "organizations_url": "https://api.github.com/users/andy-slac/orgs", "repos_url": "https://api.github.com/users/andy-slac/repos", "events_url": "https://api.github.com/users/andy-slac/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-slac/received_events", "type": "User", "site_admin": false}, "position": 420, "line": 376, "path": "python/lsst/imgserv/locateImage.py", "commit_id": "fa618bb9a68be0119c880c18b2b3a6d8d4ae2549", "created_at": "2015-02-25T22:31:44Z", "updated_at": "2015-02-25T22:31:44Z", "author_association": "CONTRIBUTOR", "body": "Some people prefer their code to be aligned (using one of 10 different alignment styles) :)\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9925124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930068", "html_url": "https://github.com/lsst/dax_imgserv/commit/fa618bb9a68be0119c880c18b2b3a6d8d4ae2549#commitcomment-9930068", "id": 9930068, "user": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "position": 1, "line": 27, "path": "python/lsst/imgserv/imageREST_v0.py", "commit_id": "fa618bb9a68be0119c880c18b2b3a6d8d4ae2549", "created_at": "2015-02-26T06:09:03Z", "updated_at": "2015-02-26T06:09:03Z", "author_association": "CONTRIBUTOR", "body": "More of more of the code here is yours, it'd be fair to add your name to the author list.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930068/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930087", "html_url": "https://github.com/lsst/dax_imgserv/commit/fa618bb9a68be0119c880c18b2b3a6d8d4ae2549#commitcomment-9930087", "id": 9930087, "user": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "position": 86, "line": 113, "path": "python/lsst/imgserv/imageREST_v0.py", "commit_id": "fa618bb9a68be0119c880c18b2b3a6d8d4ae2549", "created_at": "2015-02-26T06:11:23Z", "updated_at": "2015-02-26T06:11:23Z", "author_association": "CONTRIBUTOR", "body": "I think I'd not default to something as random as 1 and r here. Fail if it is not provided.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930087/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930101", "html_url": "https://github.com/lsst/dax_imgserv/commit/fa618bb9a68be0119c880c18b2b3a6d8d4ae2549#commitcomment-9930101", "id": 9930101, "user": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "position": 105, "line": 123, "path": "python/lsst/imgserv/imageREST_v0.py", "commit_id": "fa618bb9a68be0119c880c18b2b3a6d8d4ae2549", "created_at": "2015-02-26T06:13:30Z", "updated_at": "2015-02-26T06:13:30Z", "author_association": "CONTRIBUTOR", "body": "I'd like to see all the code that talks to mysql using the Db from db module. John, I think I'd open a new ticket for that work, there is no time to deal with it now, and dedicated ticket makes sense.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930108", "html_url": "https://github.com/lsst/dax_imgserv/commit/fa618bb9a68be0119c880c18b2b3a6d8d4ae2549#commitcomment-9930108", "id": 9930108, "user": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "position": 144, "line": 149, "path": "python/lsst/imgserv/imageREST_v0.py", "commit_id": "fa618bb9a68be0119c880c18b2b3a6d8d4ae2549", "created_at": "2015-02-26T06:14:41Z", "updated_at": "2015-02-26T06:14:41Z", "author_association": "CONTRIBUTOR", "body": "don't default here to some random values \n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930108/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930117", "html_url": "https://github.com/lsst/dax_imgserv/commit/fa618bb9a68be0119c880c18b2b3a6d8d4ae2549#commitcomment-9930117", "id": 9930117, "user": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "position": 166, "line": 167, "path": "python/lsst/imgserv/imageREST_v0.py", "commit_id": "fa618bb9a68be0119c880c18b2b3a6d8d4ae2549", "created_at": "2015-02-26T06:15:43Z", "updated_at": "2015-02-26T06:15:43Z", "author_association": "CONTRIBUTOR", "body": "does this line really do anything here?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930129", "html_url": "https://github.com/lsst/dax_imgserv/commit/fa618bb9a68be0119c880c18b2b3a6d8d4ae2549#commitcomment-9930129", "id": 9930129, "user": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "position": 309, "line": 261, "path": "python/lsst/imgserv/locateImage.py", "commit_id": "fa618bb9a68be0119c880c18b2b3a6d8d4ae2549", "created_at": "2015-02-26T06:17:43Z", "updated_at": "2015-02-26T06:17:43Z", "author_association": "CONTRIBUTOR", "body": "alignment\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930134", "html_url": "https://github.com/lsst/dax_imgserv/commit/fa618bb9a68be0119c880c18b2b3a6d8d4ae2549#commitcomment-9930134", "id": 9930134, "user": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "position": 300, "line": 252, "path": "python/lsst/imgserv/locateImage.py", "commit_id": "fa618bb9a68be0119c880c18b2b3a6d8d4ae2549", "created_at": "2015-02-26T06:18:13Z", "updated_at": "2015-02-26T06:18:13Z", "author_association": "CONTRIBUTOR", "body": "Typo. Remove extraneous newline\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930134/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930143", "html_url": "https://github.com/lsst/dax_imgserv/commit/fa618bb9a68be0119c880c18b2b3a6d8d4ae2549#commitcomment-9930143", "id": 9930143, "user": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "position": 326, "line": 278, "path": "python/lsst/imgserv/locateImage.py", "commit_id": "fa618bb9a68be0119c880c18b2b3a6d8d4ae2549", "created_at": "2015-02-26T06:19:18Z", "updated_at": "2015-02-26T06:19:18Z", "author_association": "CONTRIBUTOR", "body": "these defaults will need to go away in longer term. Add a todo note?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930149", "html_url": "https://github.com/lsst/dax_imgserv/commit/fa618bb9a68be0119c880c18b2b3a6d8d4ae2549#commitcomment-9930149", "id": 9930149, "user": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "position": 300, "line": 252, "path": "python/lsst/imgserv/locateImage.py", "commit_id": "fa618bb9a68be0119c880c18b2b3a6d8d4ae2549", "created_at": "2015-02-26T06:20:16Z", "updated_at": "2015-02-26T06:20:16Z", "author_association": "CONTRIBUTOR", "body": "oh, that is not a typo! Switch to camel case please, so qResults\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930149/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930171", "html_url": "https://github.com/lsst/dax_imgserv/commit/fa618bb9a68be0119c880c18b2b3a6d8d4ae2549#commitcomment-9930171", "id": 9930171, "user": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "position": 381, "line": 333, "path": "python/lsst/imgserv/locateImage.py", "commit_id": "fa618bb9a68be0119c880c18b2b3a6d8d4ae2549", "created_at": "2015-02-26T06:21:26Z", "updated_at": "2015-02-26T06:21:26Z", "author_association": "CONTRIBUTOR", "body": "consider shortening to: pixW = imgW if pixW > imgW\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930172", "html_url": "https://github.com/lsst/dax_imgserv/commit/fa618bb9a68be0119c880c18b2b3a6d8d4ae2549#commitcomment-9930172", "id": 9930172, "user": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "position": 396, "line": 348, "path": "python/lsst/imgserv/locateImage.py", "commit_id": "fa618bb9a68be0119c880c18b2b3a6d8d4ae2549", "created_at": "2015-02-26T06:21:38Z", "updated_at": "2015-02-26T06:21:38Z", "author_association": "CONTRIBUTOR", "body": "alignment\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930179", "html_url": "https://github.com/lsst/dax_imgserv/commit/fa618bb9a68be0119c880c18b2b3a6d8d4ae2549#commitcomment-9930179", "id": 9930179, "user": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "position": 420, "line": 376, "path": "python/lsst/imgserv/locateImage.py", "commit_id": "fa618bb9a68be0119c880c18b2b3a6d8d4ae2549", "created_at": "2015-02-26T06:22:23Z", "updated_at": "2015-02-26T06:22:23Z", "author_association": "CONTRIBUTOR", "body": "alignment\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930485", "html_url": "https://github.com/lsst/dax_imgserv/commit/fa618bb9a68be0119c880c18b2b3a6d8d4ae2549#commitcomment-9930485", "id": 9930485, "user": {"login": "andy-slac", "id": 4266950, "avatar_url": "https://avatars1.githubusercontent.com/u/4266950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-slac", "html_url": "https://github.com/andy-slac", "followers_url": "https://api.github.com/users/andy-slac/followers", "following_url": "https://api.github.com/users/andy-slac/following{/other_user}", "gists_url": "https://api.github.com/users/andy-slac/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-slac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-slac/subscriptions", "organizations_url": "https://api.github.com/users/andy-slac/orgs", "repos_url": "https://api.github.com/users/andy-slac/repos", "events_url": "https://api.github.com/users/andy-slac/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-slac/received_events", "type": "User", "site_admin": false}, "position": 381, "line": 333, "path": "python/lsst/imgserv/locateImage.py", "commit_id": "fa618bb9a68be0119c880c18b2b3a6d8d4ae2549", "created_at": "2015-02-26T06:59:21Z", "updated_at": "2015-02-26T06:59:21Z", "author_association": "CONTRIBUTOR", "body": "Or even shorter `pixW = min(imgW, pixW)` :)\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9930485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9937777", "html_url": "https://github.com/lsst/dax_imgserv/commit/fa618bb9a68be0119c880c18b2b3a6d8d4ae2549#commitcomment-9937777", "id": 9937777, "user": {"login": "RobertLuptonTheGood", "id": 1288469, "avatar_url": "https://avatars0.githubusercontent.com/u/1288469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RobertLuptonTheGood", "html_url": "https://github.com/RobertLuptonTheGood", "followers_url": "https://api.github.com/users/RobertLuptonTheGood/followers", "following_url": "https://api.github.com/users/RobertLuptonTheGood/following{/other_user}", "gists_url": "https://api.github.com/users/RobertLuptonTheGood/gists{/gist_id}", "starred_url": "https://api.github.com/users/RobertLuptonTheGood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RobertLuptonTheGood/subscriptions", "organizations_url": "https://api.github.com/users/RobertLuptonTheGood/orgs", "repos_url": "https://api.github.com/users/RobertLuptonTheGood/repos", "events_url": "https://api.github.com/users/RobertLuptonTheGood/events{/privacy}", "received_events_url": "https://api.github.com/users/RobertLuptonTheGood/received_events", "type": "User", "site_admin": false}, "position": 326, "line": 278, "path": "python/lsst/imgserv/locateImage.py", "commit_id": "fa618bb9a68be0119c880c18b2b3a6d8d4ae2549", "created_at": "2015-02-26T14:37:23Z", "updated_at": "2015-02-26T14:37:23Z", "author_association": "OWNER", "body": "Presumably a doxygen \n!!! \\todo note\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9937777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9943046", "html_url": "https://github.com/lsst/dax_imgserv/commit/fa618bb9a68be0119c880c18b2b3a6d8d4ae2549#commitcomment-9943046", "id": 9943046, "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "position": 21, "line": 51, "path": "python/lsst/imgserv/imageREST_v0.py", "commit_id": "fa618bb9a68be0119c880c18b2b3a6d8d4ae2549", "created_at": "2015-02-26T18:48:32Z", "updated_at": "2015-02-26T18:48:32Z", "author_association": "CONTRIBUTOR", "body": "I agree, but would like to push that down the road to DM-1980 error handling. Leaving a comment to that effect.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9943046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9944286", "html_url": "https://github.com/lsst/dax_imgserv/commit/fa618bb9a68be0119c880c18b2b3a6d8d4ae2549#commitcomment-9944286", "id": 9944286, "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "position": 384, "line": 336, "path": "python/lsst/imgserv/locateImage.py", "commit_id": "fa618bb9a68be0119c880c18b2b3a6d8d4ae2549", "created_at": "2015-02-26T19:54:49Z", "updated_at": "2015-02-26T19:54:49Z", "author_association": "CONTRIBUTOR", "body": "It would be more mathematically correct, but since we're dealing with one pixel on an image border, I think truncating is safer. If the width or height winds up greater than the image, the cutout will fail, otherwise shifting by a sub pixel should be harmless. \n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/9944286/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/10474854", "html_url": "https://github.com/lsst/dax_imgserv/commit/13ff948fa1a798de21eee1fb5847d1e21a65ffb9#commitcomment-10474854", "id": 10474854, "user": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "position": 29, "line": 29, "path": "examples/imageStitchExample.py", "commit_id": "13ff948fa1a798de21eee1fb5847d1e21a65ffb9", "created_at": "2015-03-30T19:12:56Z", "updated_at": "2015-03-30T19:12:56Z", "author_association": "CONTRIBUTOR", "body": "Is something missing here? If not, remove this line maybe?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/10474854/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/10474881", "html_url": "https://github.com/lsst/dax_imgserv/commit/13ff948fa1a798de21eee1fb5847d1e21a65ffb9#commitcomment-10474881", "id": 10474881, "user": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "position": 39, "line": 39, "path": "examples/imageStitchExample.py", "commit_id": "13ff948fa1a798de21eee1fb5847d1e21a65ffb9", "created_at": "2015-03-30T19:14:33Z", "updated_at": "2015-03-30T19:14:33Z", "author_association": "CONTRIBUTOR", "body": "We agreed to use standard python logging in python code, so I'd switch to logging (sorry we are going back and forth!) \n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/10474881/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/10474895", "html_url": "https://github.com/lsst/dax_imgserv/commit/13ff948fa1a798de21eee1fb5847d1e21a65ffb9#commitcomment-10474895", "id": 10474895, "user": {"login": "PaulPrice", "id": 1334980, "avatar_url": "https://avatars1.githubusercontent.com/u/1334980?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PaulPrice", "html_url": "https://github.com/PaulPrice", "followers_url": "https://api.github.com/users/PaulPrice/followers", "following_url": "https://api.github.com/users/PaulPrice/following{/other_user}", "gists_url": "https://api.github.com/users/PaulPrice/gists{/gist_id}", "starred_url": "https://api.github.com/users/PaulPrice/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PaulPrice/subscriptions", "organizations_url": "https://api.github.com/users/PaulPrice/orgs", "repos_url": "https://api.github.com/users/PaulPrice/repos", "events_url": "https://api.github.com/users/PaulPrice/events{/privacy}", "received_events_url": "https://api.github.com/users/PaulPrice/received_events", "type": "User", "site_admin": false}, "position": null, "line": null, "path": null, "commit_id": "13ff948fa1a798de21eee1fb5847d1e21a65ffb9", "created_at": "2015-03-30T19:15:24Z", "updated_at": "2015-03-30T19:15:24Z", "author_association": "NONE", "body": "How does this differ from MakeCoaddTempExpTask and AssembleCoaddTask (which have more features)?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/10474895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/10474953", "html_url": "https://github.com/lsst/dax_imgserv/commit/13ff948fa1a798de21eee1fb5847d1e21a65ffb9#commitcomment-10474953", "id": 10474953, "user": {"login": "ktlim", "id": 1054393, "avatar_url": "https://avatars3.githubusercontent.com/u/1054393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktlim", "html_url": "https://github.com/ktlim", "followers_url": "https://api.github.com/users/ktlim/followers", "following_url": "https://api.github.com/users/ktlim/following{/other_user}", "gists_url": "https://api.github.com/users/ktlim/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktlim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktlim/subscriptions", "organizations_url": "https://api.github.com/users/ktlim/orgs", "repos_url": "https://api.github.com/users/ktlim/repos", "events_url": "https://api.github.com/users/ktlim/events{/privacy}", "received_events_url": "https://api.github.com/users/ktlim/received_events", "type": "User", "site_admin": false}, "position": null, "line": null, "path": null, "commit_id": "13ff948fa1a798de21eee1fb5847d1e21a65ffb9", "created_at": "2015-03-30T19:18:20Z", "updated_at": "2015-03-30T19:18:20Z", "author_association": "CONTRIBUTOR", "body": "It's not actually supposed to be making a coadd, it's just using that mechanism.  I think it ought to be rewritten to use primitive afw image operations instead.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/10474953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/10474969", "html_url": "https://github.com/lsst/dax_imgserv/commit/13ff948fa1a798de21eee1fb5847d1e21a65ffb9#commitcomment-10474969", "id": 10474969, "user": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "position": 63, "line": 63, "path": "python/lsst/imgserv/imageStitch.py", "commit_id": "13ff948fa1a798de21eee1fb5847d1e21a65ffb9", "created_at": "2015-03-30T19:19:17Z", "updated_at": "2015-03-30T19:19:17Z", "author_association": "CONTRIBUTOR", "body": "this is one of the main functions, so I think I'd add more documentation here, e.g., explain all input parameters.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/10474969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/10474973", "html_url": "https://github.com/lsst/dax_imgserv/commit/13ff948fa1a798de21eee1fb5847d1e21a65ffb9#commitcomment-10474973", "id": 10474973, "user": {"login": "jdswinbank", "id": 460854, "avatar_url": "https://avatars3.githubusercontent.com/u/460854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdswinbank", "html_url": "https://github.com/jdswinbank", "followers_url": "https://api.github.com/users/jdswinbank/followers", "following_url": "https://api.github.com/users/jdswinbank/following{/other_user}", "gists_url": "https://api.github.com/users/jdswinbank/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdswinbank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdswinbank/subscriptions", "organizations_url": "https://api.github.com/users/jdswinbank/orgs", "repos_url": "https://api.github.com/users/jdswinbank/repos", "events_url": "https://api.github.com/users/jdswinbank/events{/privacy}", "received_events_url": "https://api.github.com/users/jdswinbank/received_events", "type": "User", "site_admin": false}, "position": null, "line": null, "path": null, "commit_id": "13ff948fa1a798de21eee1fb5847d1e21a65ffb9", "created_at": "2015-03-30T19:19:30Z", "updated_at": "2015-03-30T19:19:30Z", "author_association": "NONE", "body": "See also DM-2348.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/10474973/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/10475000", "html_url": "https://github.com/lsst/dax_imgserv/commit/13ff948fa1a798de21eee1fb5847d1e21a65ffb9#commitcomment-10475000", "id": 10475000, "user": {"login": "PaulPrice", "id": 1334980, "avatar_url": "https://avatars1.githubusercontent.com/u/1334980?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PaulPrice", "html_url": "https://github.com/PaulPrice", "followers_url": "https://api.github.com/users/PaulPrice/followers", "following_url": "https://api.github.com/users/PaulPrice/following{/other_user}", "gists_url": "https://api.github.com/users/PaulPrice/gists{/gist_id}", "starred_url": "https://api.github.com/users/PaulPrice/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PaulPrice/subscriptions", "organizations_url": "https://api.github.com/users/PaulPrice/orgs", "repos_url": "https://api.github.com/users/PaulPrice/repos", "events_url": "https://api.github.com/users/PaulPrice/events{/privacy}", "received_events_url": "https://api.github.com/users/PaulPrice/received_events", "type": "User", "site_admin": false}, "position": null, "line": null, "path": null, "commit_id": "13ff948fa1a798de21eee1fb5847d1e21a65ffb9", "created_at": "2015-03-30T19:21:29Z", "updated_at": "2015-03-30T19:21:29Z", "author_association": "NONE", "body": "If you're doing the same thing as something else we already have, why would you want to re-implement it?  And if there's a slight difference, shouldn't we be asking how we can modify what we have so we're not duplicating code?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/10475000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/10475002", "html_url": "https://github.com/lsst/dax_imgserv/commit/13ff948fa1a798de21eee1fb5847d1e21a65ffb9#commitcomment-10475002", "id": 10475002, "user": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "position": 85, "line": 85, "path": "python/lsst/imgserv/imageStitch.py", "commit_id": "13ff948fa1a798de21eee1fb5847d1e21a65ffb9", "created_at": "2015-03-30T19:21:38Z", "updated_at": "2015-03-30T19:21:38Z", "author_association": "CONTRIBUTOR", "body": "This line can be removed, right?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/10475002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/10475038", "html_url": "https://github.com/lsst/dax_imgserv/commit/13ff948fa1a798de21eee1fb5847d1e21a65ffb9#commitcomment-10475038", "id": 10475038, "user": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "position": 8, "line": 89, "path": "python/lsst/imgserv/locateImage.py", "commit_id": "13ff948fa1a798de21eee1fb5847d1e21a65ffb9", "created_at": "2015-03-30T19:24:30Z", "updated_at": "2015-03-30T19:24:30Z", "author_association": "CONTRIBUTOR", "body": "The function returns image and metadata the description needs to be fixed.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/10475038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/10475064", "html_url": "https://github.com/lsst/dax_imgserv/commit/13ff948fa1a798de21eee1fb5847d1e21a65ffb9#commitcomment-10475064", "id": 10475064, "user": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "position": null, "line": null, "path": null, "commit_id": "13ff948fa1a798de21eee1fb5847d1e21a65ffb9", "created_at": "2015-03-30T19:26:08Z", "updated_at": "2015-03-30T19:26:08Z", "author_association": "CONTRIBUTOR", "body": "That is why we started the dialog through DM-2348. We definitely want to reuse, and not duplicate.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/10475064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/10475235", "html_url": "https://github.com/lsst/dax_imgserv/commit/13ff948fa1a798de21eee1fb5847d1e21a65ffb9#commitcomment-10475235", "id": 10475235, "user": {"login": "ktlim", "id": 1054393, "avatar_url": "https://avatars3.githubusercontent.com/u/1054393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktlim", "html_url": "https://github.com/ktlim", "followers_url": "https://api.github.com/users/ktlim/followers", "following_url": "https://api.github.com/users/ktlim/following{/other_user}", "gists_url": "https://api.github.com/users/ktlim/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktlim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktlim/subscriptions", "organizations_url": "https://api.github.com/users/ktlim/orgs", "repos_url": "https://api.github.com/users/ktlim/repos", "events_url": "https://api.github.com/users/ktlim/events{/privacy}", "received_events_url": "https://api.github.com/users/ktlim/received_events", "type": "User", "site_admin": false}, "position": null, "line": null, "path": null, "commit_id": "13ff948fa1a798de21eee1fb5847d1e21a65ffb9", "created_at": "2015-03-30T19:35:48Z", "updated_at": "2015-03-30T19:35:48Z", "author_association": "CONTRIBUTOR", "body": "That's DM-2438, not 2348.\n@PaulPrice: it's not doing the same thing as something we already have, except possibly for some code in the cameraGeom area which is a bit more specialized.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/10475235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11416443", "html_url": "https://github.com/lsst/dax_imgserv/commit/77716f4432ff9629709f4a11492c6665f9fae57f#commitcomment-11416443", "id": 11416443, "user": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "position": 36, "line": 97, "path": "examples/skymapStitch.py", "commit_id": "77716f4432ff9629709f4a11492c6665f9fae57f", "created_at": "2015-05-28T21:29:08Z", "updated_at": "2015-05-28T21:29:08Z", "author_association": "CONTRIBUTOR", "body": "Please reformat documenting input parameters (@ paramName: description) here and below.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11416443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11416459", "html_url": "https://github.com/lsst/dax_imgserv/commit/77716f4432ff9629709f4a11492c6665f9fae57f#commitcomment-11416459", "id": 11416459, "user": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "position": 53, "line": 114, "path": "examples/skymapStitch.py", "commit_id": "77716f4432ff9629709f4a11492c6665f9fae57f", "created_at": "2015-05-28T21:30:02Z", "updated_at": "2015-05-28T21:30:02Z", "author_association": "CONTRIBUTOR", "body": "j is not used (mentioned only in code that is commented out)\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11416459/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11416469", "html_url": "https://github.com/lsst/dax_imgserv/commit/77716f4432ff9629709f4a11492c6665f9fae57f#commitcomment-11416469", "id": 11416469, "user": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "position": 62, "line": 123, "path": "examples/skymapStitch.py", "commit_id": "77716f4432ff9629709f4a11492c6665f9fae57f", "created_at": "2015-05-28T21:30:24Z", "updated_at": "2015-05-28T21:30:24Z", "author_association": "CONTRIBUTOR", "body": "are there good reasons to keep the lines that are commented out?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11416469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11416529", "html_url": "https://github.com/lsst/dax_imgserv/commit/77716f4432ff9629709f4a11492c6665f9fae57f#commitcomment-11416529", "id": 11416529, "user": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "position": 35, "line": 204, "path": "python/lsst/imgserv/imageREST_v0.py", "commit_id": "77716f4432ff9629709f4a11492c6665f9fae57f", "created_at": "2015-05-28T21:33:20Z", "updated_at": "2015-05-28T21:33:20Z", "author_association": "CONTRIBUTOR", "body": "maybe add a comment in DM-2537 so that we don't miss it, and mention the DM-2537 on this todo line (and below too)\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11416529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11416585", "html_url": "https://github.com/lsst/dax_imgserv/commit/ba7789a9b52a2e3f2adc3c2105a83d3de97ad6a1#commitcomment-11416585", "id": 11416585, "user": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "position": 1, "line": 1, "path": "python/lsst/imgserv/skymapStitch.py", "commit_id": "ba7789a9b52a2e3f2adc3c2105a83d3de97ad6a1", "created_at": "2015-05-28T21:36:32Z", "updated_at": "2015-05-28T21:36:32Z", "author_association": "CONTRIBUTOR", "body": "# !/usr/bin/env python\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11416585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11574656", "html_url": "https://github.com/lsst/dax_imgserv/commit/e409c28352fcb3f8cfa79e114c3798523f3e91f1#commitcomment-11574656", "id": 11574656, "user": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "position": 21, "line": 100, "path": "python/lsst/imgserv/imageStitch.py", "commit_id": "e409c28352fcb3f8cfa79e114c3798523f3e91f1", "created_at": "2015-06-08T19:40:47Z", "updated_at": "2015-06-08T19:40:47Z", "author_association": "CONTRIBUTOR", "body": "no space after \"@\" would make it aligned with our code better\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11574656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11574666", "html_url": "https://github.com/lsst/dax_imgserv/commit/e409c28352fcb3f8cfa79e114c3798523f3e91f1#commitcomment-11574666", "id": 11574666, "user": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "position": 32, "line": 109, "path": "python/lsst/imgserv/imageStitch.py", "commit_id": "e409c28352fcb3f8cfa79e114c3798523f3e91f1", "created_at": "2015-06-08T19:41:18Z", "updated_at": "2015-06-08T19:41:18Z", "author_association": "CONTRIBUTOR", "body": "what is the # &&& for? (here and below)\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11574666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11574721", "html_url": "https://github.com/lsst/dax_imgserv/commit/e409c28352fcb3f8cfa79e114c3798523f3e91f1#commitcomment-11574721", "id": 11574721, "user": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "position": 85, "line": 119, "path": "python/lsst/imgserv/skymapStitch.py", "commit_id": "e409c28352fcb3f8cfa79e114c3798523f3e91f1", "created_at": "2015-06-08T19:43:52Z", "updated_at": "2015-06-08T19:43:52Z", "author_association": "CONTRIBUTOR", "body": "i'd do that in \"debug\", not \"info\" (unless you want to show these things to users by default)\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11574721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11574776", "html_url": "https://github.com/lsst/dax_imgserv/commit/e409c28352fcb3f8cfa79e114c3798523f3e91f1#commitcomment-11574776", "id": 11574776, "user": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "position": 28, "line": 202, "path": "examples/skymapStitch.py", "commit_id": "e409c28352fcb3f8cfa79e114c3798523f3e91f1", "created_at": "2015-06-08T19:46:51Z", "updated_at": "2015-06-08T19:46:51Z", "author_association": "CONTRIBUTOR", "body": "should we use temporary files here?\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11574776/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11592332", "html_url": "https://github.com/lsst/dax_imgserv/commit/e409c28352fcb3f8cfa79e114c3798523f3e91f1#commitcomment-11592332", "id": 11592332, "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "position": 28, "line": 202, "path": "examples/skymapStitch.py", "commit_id": "e409c28352fcb3f8cfa79e114c3798523f3e91f1", "created_at": "2015-06-09T16:01:24Z", "updated_at": "2015-06-09T16:04:09Z", "author_association": "CONTRIBUTOR", "body": "Maybe. I use this code to figure out how use the available functions and believe it would be useful to others who need to go into this territory. It's not meant to be production. I frequently need to copy the images back to my local computer to look at them, which is easier when their names are meaningful. On the other hand would be better to get them out the current directory.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11592332/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11592549", "html_url": "https://github.com/lsst/dax_imgserv/commit/e409c28352fcb3f8cfa79e114c3798523f3e91f1#commitcomment-11592549", "id": 11592549, "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "position": 32, "line": 109, "path": "python/lsst/imgserv/imageStitch.py", "commit_id": "e409c28352fcb3f8cfa79e114c3798523f3e91f1", "created_at": "2015-06-09T16:11:02Z", "updated_at": "2015-06-09T16:11:02Z", "author_association": "CONTRIBUTOR", "body": "That just means that the line is temporary and needs to be deleted or altered before merging.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11592549/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11596235", "html_url": "https://github.com/lsst/dax_imgserv/commit/e409c28352fcb3f8cfa79e114c3798523f3e91f1#commitcomment-11596235", "id": 11596235, "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "position": 28, "line": 202, "path": "examples/skymapStitch.py", "commit_id": "e409c28352fcb3f8cfa79e114c3798523f3e91f1", "created_at": "2015-06-09T19:06:20Z", "updated_at": "2015-06-09T19:06:20Z", "author_association": "CONTRIBUTOR", "body": "If a program creates a file or directory with mkdtemp, it's supposed to clean up after itself, which get tricky here as the only reason the files are written to disk is so that they can be examined/compared later. For production code, I'd want to be able to configure where the images go. Either method seems like overkill for what this example is meant for. Unless you have strong opinions, I'd rather leave it as is for ease of use.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11596235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11596292", "html_url": "https://github.com/lsst/dax_imgserv/commit/e409c28352fcb3f8cfa79e114c3798523f3e91f1#commitcomment-11596292", "id": 11596292, "user": {"login": "PaulPrice", "id": 1334980, "avatar_url": "https://avatars1.githubusercontent.com/u/1334980?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PaulPrice", "html_url": "https://github.com/PaulPrice", "followers_url": "https://api.github.com/users/PaulPrice/followers", "following_url": "https://api.github.com/users/PaulPrice/following{/other_user}", "gists_url": "https://api.github.com/users/PaulPrice/gists{/gist_id}", "starred_url": "https://api.github.com/users/PaulPrice/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PaulPrice/subscriptions", "organizations_url": "https://api.github.com/users/PaulPrice/orgs", "repos_url": "https://api.github.com/users/PaulPrice/repos", "events_url": "https://api.github.com/users/PaulPrice/events{/privacy}", "received_events_url": "https://api.github.com/users/PaulPrice/received_events", "type": "User", "site_admin": false}, "position": 28, "line": 202, "path": "examples/skymapStitch.py", "commit_id": "e409c28352fcb3f8cfa79e114c3798523f3e91f1", "created_at": "2015-06-09T19:08:49Z", "updated_at": "2015-06-09T19:08:49Z", "author_association": "NONE", "body": "It sounds like you should be using a separate, perhaps personal repository.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11596292/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11596993", "html_url": "https://github.com/lsst/dax_imgserv/commit/e409c28352fcb3f8cfa79e114c3798523f3e91f1#commitcomment-11596993", "id": 11596993, "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "position": 28, "line": 202, "path": "examples/skymapStitch.py", "commit_id": "e409c28352fcb3f8cfa79e114c3798523f3e91f1", "created_at": "2015-06-09T19:43:06Z", "updated_at": "2015-06-09T19:43:06Z", "author_association": "CONTRIBUTOR", "body": "That could be a good way to go. This is meant more for reference than anything else and I wanted to put it where somebody could find it, but the odds of someone else needing it are pretty low.\n", "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/comments/11596993/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}], "review_comments": [{"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25019146", "pull_request_review_id": null, "id": 25019146, "diff_hunk": "@@ -0,0 +1,105 @@\n+#!/usr/bin/python\n+\n+# LSST Data Management System\n+# Copyright 2015 AURA/LSST.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+\"\"\"\n+This module implements the RESTful interface for Image Cutout Service.\n+Corresponding URI: /image\n+\n+@author  Jacek Becla, SLAC\n+\"\"\"\n+import os\n+import uuid\n+\n+from flask import Blueprint, Flask, make_response, request\n+\n+from lsst.imgserv.locateImage import dbOpen\n+\n+imageREST = Blueprint('imageREST', __name__, template_folder='imgserv')\n+\n+# this will eventually print list of supported versions\n+@imageREST.route('/')\n+def index():\n+    return \"\"\"\n+Hello, LSST Image Cutout Service here. Try something like:<br />\n+/image/v0/raw?ra=1&dec=1&filter=r<br />\n+/image/v0/raw/cutout?ra=1&dec=1&filter=r&width=12&height=12\n+\"\"\"\n+\n+\n+# this will handle something like:\n+# GET /image/v0/raw?ra=1&dec=1&filter=r\n+@imageREST.route('/raw', methods=['GET'])\n+def getRaw():\n+    ra = request.args.get('ra', '1')\n+    dec = request.args.get('dec', '1')\n+    filter = request.args.get('filter', 'r')\n+\n+    # fetch the image here\n+    # TODO - check inputs are valid.\n+    ra = float(ra)\n+    dec = float(dec)\n+    print \"raw ra={} dec={} filter={}\".format(ra, dec, filter)\n+    # fetch the image here\n+    w13Raw = dbOpen(\"~/.lsst/dbAuth-dbServ.txt\")\n+    imgFull = w13Raw.getImageFull(ra, dec)\n+    print \"Full w={} h={}\".format(imgFull.getWidth(), imgFull.getHeight())\n+    fileName = str(uuid.uuid4())\n+    imgFull.writeFits(fileName)", "path": "python/lsst/imgserv/imageREST_v0.py", "position": null, "original_position": 66, "commit_id": "32f956ce7e189f5ce406a98ae9e7455ec7834d90", "original_commit_id": "e4f2d5527ab78024ef266624851e9f56eca81987", "user": {"login": "andy-slac", "id": 4266950, "avatar_url": "https://avatars1.githubusercontent.com/u/4266950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-slac", "html_url": "https://github.com/andy-slac", "followers_url": "https://api.github.com/users/andy-slac/followers", "following_url": "https://api.github.com/users/andy-slac/following{/other_user}", "gists_url": "https://api.github.com/users/andy-slac/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-slac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-slac/subscriptions", "organizations_url": "https://api.github.com/users/andy-slac/orgs", "repos_url": "https://api.github.com/users/andy-slac/repos", "events_url": "https://api.github.com/users/andy-slac/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-slac/received_events", "type": "User", "site_admin": false}, "body": "Will this write to a file in current directory? Should it use some temporary directory instead, current directory may not be writable.\n", "created_at": "2015-02-19T19:53:25Z", "updated_at": "2015-02-20T05:07:24Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/2#discussion_r25019146", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/2", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25019146"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/2#discussion_r25019146"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/2"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25019146/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25019415", "pull_request_review_id": null, "id": 25019415, "diff_hunk": "@@ -0,0 +1,105 @@\n+#!/usr/bin/python\n+\n+# LSST Data Management System\n+# Copyright 2015 AURA/LSST.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+\"\"\"\n+This module implements the RESTful interface for Image Cutout Service.\n+Corresponding URI: /image\n+\n+@author  Jacek Becla, SLAC\n+\"\"\"\n+import os\n+import uuid\n+\n+from flask import Blueprint, Flask, make_response, request\n+\n+from lsst.imgserv.locateImage import dbOpen\n+\n+imageREST = Blueprint('imageREST', __name__, template_folder='imgserv')\n+\n+# this will eventually print list of supported versions\n+@imageREST.route('/')\n+def index():\n+    return \"\"\"\n+Hello, LSST Image Cutout Service here. Try something like:<br />\n+/image/v0/raw?ra=1&dec=1&filter=r<br />\n+/image/v0/raw/cutout?ra=1&dec=1&filter=r&width=12&height=12\n+\"\"\"\n+\n+\n+# this will handle something like:\n+# GET /image/v0/raw?ra=1&dec=1&filter=r\n+@imageREST.route('/raw', methods=['GET'])\n+def getRaw():\n+    ra = request.args.get('ra', '1')\n+    dec = request.args.get('dec', '1')\n+    filter = request.args.get('filter', 'r')\n+\n+    # fetch the image here\n+    # TODO - check inputs are valid.\n+    ra = float(ra)\n+    dec = float(dec)\n+    print \"raw ra={} dec={} filter={}\".format(ra, dec, filter)", "path": "python/lsst/imgserv/imageREST_v0.py", "position": null, "original_position": 60, "commit_id": "32f956ce7e189f5ce406a98ae9e7455ec7834d90", "original_commit_id": "e4f2d5527ab78024ef266624851e9f56eca81987", "user": {"login": "andy-slac", "id": 4266950, "avatar_url": "https://avatars1.githubusercontent.com/u/4266950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-slac", "html_url": "https://github.com/andy-slac", "followers_url": "https://api.github.com/users/andy-slac/followers", "following_url": "https://api.github.com/users/andy-slac/following{/other_user}", "gists_url": "https://api.github.com/users/andy-slac/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-slac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-slac/subscriptions", "organizations_url": "https://api.github.com/users/andy-slac/orgs", "repos_url": "https://api.github.com/users/andy-slac/repos", "events_url": "https://api.github.com/users/andy-slac/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-slac/received_events", "type": "User", "site_admin": false}, "body": "Should it use logging instead of print?\n", "created_at": "2015-02-19T19:56:10Z", "updated_at": "2015-02-20T05:07:24Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/2#discussion_r25019415", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/2", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25019415"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/2#discussion_r25019415"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/2"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25019415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25019441", "pull_request_review_id": null, "id": 25019441, "diff_hunk": "@@ -0,0 +1,105 @@\n+#!/usr/bin/python\n+\n+# LSST Data Management System\n+# Copyright 2015 AURA/LSST.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+\"\"\"\n+This module implements the RESTful interface for Image Cutout Service.\n+Corresponding URI: /image\n+\n+@author  Jacek Becla, SLAC\n+\"\"\"\n+import os\n+import uuid\n+\n+from flask import Blueprint, Flask, make_response, request", "path": "python/lsst/imgserv/imageREST_v0.py", "position": null, "original_position": 32, "commit_id": "32f956ce7e189f5ce406a98ae9e7455ec7834d90", "original_commit_id": "e4f2d5527ab78024ef266624851e9f56eca81987", "user": {"login": "andy-slac", "id": 4266950, "avatar_url": "https://avatars1.githubusercontent.com/u/4266950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-slac", "html_url": "https://github.com/andy-slac", "followers_url": "https://api.github.com/users/andy-slac/followers", "following_url": "https://api.github.com/users/andy-slac/following{/other_user}", "gists_url": "https://api.github.com/users/andy-slac/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-slac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-slac/subscriptions", "organizations_url": "https://api.github.com/users/andy-slac/orgs", "repos_url": "https://api.github.com/users/andy-slac/repos", "events_url": "https://api.github.com/users/andy-slac/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-slac/received_events", "type": "User", "site_admin": false}, "body": "Unused `Flask` import\n", "created_at": "2015-02-19T19:56:25Z", "updated_at": "2015-02-20T05:07:24Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/2#discussion_r25019441", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/2", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25019441"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/2#discussion_r25019441"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/2"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25019441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25019511", "pull_request_review_id": null, "id": 25019511, "diff_hunk": "@@ -0,0 +1,105 @@\n+#!/usr/bin/python\n+\n+# LSST Data Management System\n+# Copyright 2015 AURA/LSST.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+\"\"\"\n+This module implements the RESTful interface for Image Cutout Service.\n+Corresponding URI: /image\n+\n+@author  Jacek Becla, SLAC\n+\"\"\"\n+import os\n+import uuid\n+\n+from flask import Blueprint, Flask, make_response, request\n+\n+from lsst.imgserv.locateImage import dbOpen\n+\n+imageREST = Blueprint('imageREST', __name__, template_folder='imgserv')\n+\n+# this will eventually print list of supported versions\n+@imageREST.route('/')\n+def index():\n+    return \"\"\"\n+Hello, LSST Image Cutout Service here. Try something like:<br />\n+/image/v0/raw?ra=1&dec=1&filter=r<br />\n+/image/v0/raw/cutout?ra=1&dec=1&filter=r&width=12&height=12\n+\"\"\"\n+\n+\n+# this will handle something like:\n+# GET /image/v0/raw?ra=1&dec=1&filter=r\n+@imageREST.route('/raw', methods=['GET'])\n+def getRaw():\n+    ra = request.args.get('ra', '1')\n+    dec = request.args.get('dec', '1')\n+    filter = request.args.get('filter', 'r')\n+\n+    # fetch the image here\n+    # TODO - check inputs are valid.\n+    ra = float(ra)\n+    dec = float(dec)\n+    print \"raw ra={} dec={} filter={}\".format(ra, dec, filter)\n+    # fetch the image here\n+    w13Raw = dbOpen(\"~/.lsst/dbAuth-dbServ.txt\")\n+    imgFull = w13Raw.getImageFull(ra, dec)", "path": "python/lsst/imgserv/imageREST_v0.py", "position": null, "original_position": 63, "commit_id": "32f956ce7e189f5ce406a98ae9e7455ec7834d90", "original_commit_id": "e4f2d5527ab78024ef266624851e9f56eca81987", "user": {"login": "andy-slac", "id": 4266950, "avatar_url": "https://avatars1.githubusercontent.com/u/4266950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-slac", "html_url": "https://github.com/andy-slac", "followers_url": "https://api.github.com/users/andy-slac/followers", "following_url": "https://api.github.com/users/andy-slac/following{/other_user}", "gists_url": "https://api.github.com/users/andy-slac/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-slac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-slac/subscriptions", "organizations_url": "https://api.github.com/users/andy-slac/orgs", "repos_url": "https://api.github.com/users/andy-slac/repos", "events_url": "https://api.github.com/users/andy-slac/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-slac/received_events", "type": "User", "site_admin": false}, "body": "What happens if image is not found?\n", "created_at": "2015-02-19T19:57:14Z", "updated_at": "2015-02-20T05:07:25Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/2#discussion_r25019511", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/2", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25019511"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/2#discussion_r25019511"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/2"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25019511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25019614", "pull_request_review_id": null, "id": 25019614, "diff_hunk": "@@ -0,0 +1,105 @@\n+#!/usr/bin/python\n+\n+# LSST Data Management System\n+# Copyright 2015 AURA/LSST.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+\"\"\"\n+This module implements the RESTful interface for Image Cutout Service.\n+Corresponding URI: /image\n+\n+@author  Jacek Becla, SLAC\n+\"\"\"\n+import os\n+import uuid\n+\n+from flask import Blueprint, Flask, make_response, request\n+\n+from lsst.imgserv.locateImage import dbOpen\n+\n+imageREST = Blueprint('imageREST', __name__, template_folder='imgserv')\n+\n+# this will eventually print list of supported versions\n+@imageREST.route('/')\n+def index():\n+    return \"\"\"\n+Hello, LSST Image Cutout Service here. Try something like:<br />\n+/image/v0/raw?ra=1&dec=1&filter=r<br />\n+/image/v0/raw/cutout?ra=1&dec=1&filter=r&width=12&height=12\n+\"\"\"\n+\n+\n+# this will handle something like:\n+# GET /image/v0/raw?ra=1&dec=1&filter=r\n+@imageREST.route('/raw', methods=['GET'])\n+def getRaw():\n+    ra = request.args.get('ra', '1')\n+    dec = request.args.get('dec', '1')\n+    filter = request.args.get('filter', 'r')\n+\n+    # fetch the image here\n+    # TODO - check inputs are valid.\n+    ra = float(ra)\n+    dec = float(dec)\n+    print \"raw ra={} dec={} filter={}\".format(ra, dec, filter)\n+    # fetch the image here\n+    w13Raw = dbOpen(\"~/.lsst/dbAuth-dbServ.txt\")\n+    imgFull = w13Raw.getImageFull(ra, dec)\n+    print \"Full w={} h={}\".format(imgFull.getWidth(), imgFull.getHeight())\n+    fileName = str(uuid.uuid4())\n+    imgFull.writeFits(fileName)\n+    w13Raw.closeConnection()\n+    resp = responseFile(fileName)\n+    os.remove(fileName)\n+    return resp\n+\n+# this will handle something like:\n+# GET /image/v0/raw/cutout?ra=1&dec=1&filter=r&width=12&height=12\n+@imageREST.route('/raw/cutout', methods=['GET'])\n+def getIRawCutout():\n+    print request.args\n+    ra = float(request.args.get('ra', '1'))\n+    dec = float(request.args.get('dec', '1'))\n+    filter = request.args.get('filter', 'r')\n+    width = float(request.args.get('width', '10'))\n+    height = float(request.args.get('height', '10'))\n+    print \"raw cutout ra={} dec={} filter={} width={} height={}\".format(\n+        ra, dec, filter, width, height)\n+\n+    # fetch the image here\n+    w13Raw = dbOpen(\"~/.lsst/dbAuth-dbServ.txt\")\n+    img = w13Raw.getImage(ra, dec, width, height)\n+    print \"Sub w={} h={}\".format(img.getWidth(), img.getHeight())\n+    fileName = str(uuid.uuid4())\n+    img.writeFits(fileName)\n+    w13Raw.closeConnection()\n+    resp = responseFile(fileName)\n+    os.remove(fileName)\n+    return resp\n+\n+def responseFile(fileName):\n+    # It would be nice to just write to 'data' instead of making a file.\n+    # writeFits defined in afw/python/lsst/afw/math/background.py\n+    response = \"/image/raw  failed\"", "path": "python/lsst/imgserv/imageREST_v0.py", "position": null, "original_position": 99, "commit_id": "32f956ce7e189f5ce406a98ae9e7455ec7834d90", "original_commit_id": "e4f2d5527ab78024ef266624851e9f56eca81987", "user": {"login": "andy-slac", "id": 4266950, "avatar_url": "https://avatars1.githubusercontent.com/u/4266950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-slac", "html_url": "https://github.com/andy-slac", "followers_url": "https://api.github.com/users/andy-slac/followers", "following_url": "https://api.github.com/users/andy-slac/following{/other_user}", "gists_url": "https://api.github.com/users/andy-slac/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-slac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-slac/subscriptions", "organizations_url": "https://api.github.com/users/andy-slac/orgs", "repos_url": "https://api.github.com/users/andy-slac/repos", "events_url": "https://api.github.com/users/andy-slac/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-slac/received_events", "type": "User", "site_admin": false}, "body": "I don't think this line does anyhting\n", "created_at": "2015-02-19T19:58:20Z", "updated_at": "2015-02-20T05:07:25Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/2#discussion_r25019614", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/2", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25019614"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/2#discussion_r25019614"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/2"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25019614/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25019725", "pull_request_review_id": null, "id": 25019725, "diff_hunk": "@@ -0,0 +1,105 @@\n+#!/usr/bin/python\n+\n+# LSST Data Management System\n+# Copyright 2015 AURA/LSST.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+\"\"\"\n+This module implements the RESTful interface for Image Cutout Service.\n+Corresponding URI: /image\n+\n+@author  Jacek Becla, SLAC\n+\"\"\"\n+import os\n+import uuid\n+\n+from flask import Blueprint, Flask, make_response, request\n+\n+from lsst.imgserv.locateImage import dbOpen\n+\n+imageREST = Blueprint('imageREST', __name__, template_folder='imgserv')\n+\n+# this will eventually print list of supported versions\n+@imageREST.route('/')\n+def index():\n+    return \"\"\"\n+Hello, LSST Image Cutout Service here. Try something like:<br />\n+/image/v0/raw?ra=1&dec=1&filter=r<br />\n+/image/v0/raw/cutout?ra=1&dec=1&filter=r&width=12&height=12\n+\"\"\"\n+\n+\n+# this will handle something like:\n+# GET /image/v0/raw?ra=1&dec=1&filter=r\n+@imageREST.route('/raw', methods=['GET'])\n+def getRaw():\n+    ra = request.args.get('ra', '1')\n+    dec = request.args.get('dec', '1')\n+    filter = request.args.get('filter', 'r')\n+\n+    # fetch the image here\n+    # TODO - check inputs are valid.\n+    ra = float(ra)\n+    dec = float(dec)\n+    print \"raw ra={} dec={} filter={}\".format(ra, dec, filter)\n+    # fetch the image here\n+    w13Raw = dbOpen(\"~/.lsst/dbAuth-dbServ.txt\")\n+    imgFull = w13Raw.getImageFull(ra, dec)\n+    print \"Full w={} h={}\".format(imgFull.getWidth(), imgFull.getHeight())\n+    fileName = str(uuid.uuid4())\n+    imgFull.writeFits(fileName)\n+    w13Raw.closeConnection()\n+    resp = responseFile(fileName)\n+    os.remove(fileName)\n+    return resp\n+\n+# this will handle something like:\n+# GET /image/v0/raw/cutout?ra=1&dec=1&filter=r&width=12&height=12\n+@imageREST.route('/raw/cutout', methods=['GET'])\n+def getIRawCutout():\n+    print request.args\n+    ra = float(request.args.get('ra', '1'))\n+    dec = float(request.args.get('dec', '1'))\n+    filter = request.args.get('filter', 'r')\n+    width = float(request.args.get('width', '10'))\n+    height = float(request.args.get('height', '10'))\n+    print \"raw cutout ra={} dec={} filter={} width={} height={}\".format(\n+        ra, dec, filter, width, height)\n+\n+    # fetch the image here\n+    w13Raw = dbOpen(\"~/.lsst/dbAuth-dbServ.txt\")\n+    img = w13Raw.getImage(ra, dec, width, height)\n+    print \"Sub w={} h={}\".format(img.getWidth(), img.getHeight())\n+    fileName = str(uuid.uuid4())\n+    img.writeFits(fileName)\n+    w13Raw.closeConnection()\n+    resp = responseFile(fileName)\n+    os.remove(fileName)\n+    return resp\n+\n+def responseFile(fileName):\n+    # It would be nice to just write to 'data' instead of making a file.\n+    # writeFits defined in afw/python/lsst/afw/math/background.py\n+    response = \"/image/raw  failed\"\n+    with open(fileName, 'r') as f:\n+        data = f.read()\n+        f.close()\n+        response = make_response(data)\n+        response.headers[\"Content-Disposition\"] = \"attachment; filename=image.fits\"", "path": "python/lsst/imgserv/imageREST_v0.py", "position": null, "original_position": 104, "commit_id": "32f956ce7e189f5ce406a98ae9e7455ec7834d90", "original_commit_id": "e4f2d5527ab78024ef266624851e9f56eca81987", "user": {"login": "andy-slac", "id": 4266950, "avatar_url": "https://avatars1.githubusercontent.com/u/4266950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-slac", "html_url": "https://github.com/andy-slac", "followers_url": "https://api.github.com/users/andy-slac/followers", "following_url": "https://api.github.com/users/andy-slac/following{/other_user}", "gists_url": "https://api.github.com/users/andy-slac/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-slac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-slac/subscriptions", "organizations_url": "https://api.github.com/users/andy-slac/orgs", "repos_url": "https://api.github.com/users/andy-slac/repos", "events_url": "https://api.github.com/users/andy-slac/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-slac/received_events", "type": "User", "site_admin": false}, "body": "Is there a MIME type for FITS, if yes then we should set content type as well.\n", "created_at": "2015-02-19T19:59:34Z", "updated_at": "2015-02-20T05:07:25Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/2#discussion_r25019725", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/2", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25019725"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/2#discussion_r25019725"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/2"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25019725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25038382", "pull_request_review_id": null, "id": 25038382, "diff_hunk": "@@ -0,0 +1,105 @@\n+#!/usr/bin/python\n+\n+# LSST Data Management System\n+# Copyright 2015 AURA/LSST.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+\"\"\"\n+This module implements the RESTful interface for Image Cutout Service.\n+Corresponding URI: /image\n+\n+@author  Jacek Becla, SLAC\n+\"\"\"\n+import os\n+import uuid\n+\n+from flask import Blueprint, Flask, make_response, request\n+\n+from lsst.imgserv.locateImage import dbOpen\n+\n+imageREST = Blueprint('imageREST', __name__, template_folder='imgserv')\n+\n+# this will eventually print list of supported versions\n+@imageREST.route('/')\n+def index():\n+    return \"\"\"\n+Hello, LSST Image Cutout Service here. Try something like:<br />\n+/image/v0/raw?ra=1&dec=1&filter=r<br />\n+/image/v0/raw/cutout?ra=1&dec=1&filter=r&width=12&height=12\n+\"\"\"\n+\n+\n+# this will handle something like:\n+# GET /image/v0/raw?ra=1&dec=1&filter=r\n+@imageREST.route('/raw', methods=['GET'])\n+def getRaw():\n+    ra = request.args.get('ra', '1')\n+    dec = request.args.get('dec', '1')\n+    filter = request.args.get('filter', 'r')\n+\n+    # fetch the image here\n+    # TODO - check inputs are valid.\n+    ra = float(ra)\n+    dec = float(dec)\n+    print \"raw ra={} dec={} filter={}\".format(ra, dec, filter)\n+    # fetch the image here\n+    w13Raw = dbOpen(\"~/.lsst/dbAuth-dbServ.txt\")\n+    imgFull = w13Raw.getImageFull(ra, dec)\n+    print \"Full w={} h={}\".format(imgFull.getWidth(), imgFull.getHeight())\n+    fileName = str(uuid.uuid4())\n+    imgFull.writeFits(fileName)", "path": "python/lsst/imgserv/imageREST_v0.py", "position": null, "original_position": 66, "commit_id": "32f956ce7e189f5ce406a98ae9e7455ec7834d90", "original_commit_id": "e4f2d5527ab78024ef266624851e9f56eca81987", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "This code is here to get the demo to work and will be addressed in DM-1697. I intend to use mkdtemp to create a temporary directory. Eventually, we may need to cache the files returned. \n", "created_at": "2015-02-19T23:50:46Z", "updated_at": "2015-02-20T05:07:25Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/2#discussion_r25038382", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/2", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25038382"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/2#discussion_r25038382"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/2"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25038382/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25038776", "pull_request_review_id": null, "id": 25038776, "diff_hunk": "@@ -0,0 +1,105 @@\n+#!/usr/bin/python\n+\n+# LSST Data Management System\n+# Copyright 2015 AURA/LSST.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+\"\"\"\n+This module implements the RESTful interface for Image Cutout Service.\n+Corresponding URI: /image\n+\n+@author  Jacek Becla, SLAC\n+\"\"\"\n+import os\n+import uuid\n+\n+from flask import Blueprint, Flask, make_response, request\n+\n+from lsst.imgserv.locateImage import dbOpen\n+\n+imageREST = Blueprint('imageREST', __name__, template_folder='imgserv')\n+\n+# this will eventually print list of supported versions\n+@imageREST.route('/')\n+def index():\n+    return \"\"\"\n+Hello, LSST Image Cutout Service here. Try something like:<br />\n+/image/v0/raw?ra=1&dec=1&filter=r<br />\n+/image/v0/raw/cutout?ra=1&dec=1&filter=r&width=12&height=12\n+\"\"\"\n+\n+\n+# this will handle something like:\n+# GET /image/v0/raw?ra=1&dec=1&filter=r\n+@imageREST.route('/raw', methods=['GET'])\n+def getRaw():\n+    ra = request.args.get('ra', '1')\n+    dec = request.args.get('dec', '1')\n+    filter = request.args.get('filter', 'r')\n+\n+    # fetch the image here\n+    # TODO - check inputs are valid.\n+    ra = float(ra)\n+    dec = float(dec)\n+    print \"raw ra={} dec={} filter={}\".format(ra, dec, filter)\n+    # fetch the image here\n+    w13Raw = dbOpen(\"~/.lsst/dbAuth-dbServ.txt\")\n+    imgFull = w13Raw.getImageFull(ra, dec)\n+    print \"Full w={} h={}\".format(imgFull.getWidth(), imgFull.getHeight())\n+    fileName = str(uuid.uuid4())\n+    imgFull.writeFits(fileName)\n+    w13Raw.closeConnection()\n+    resp = responseFile(fileName)\n+    os.remove(fileName)\n+    return resp\n+\n+# this will handle something like:\n+# GET /image/v0/raw/cutout?ra=1&dec=1&filter=r&width=12&height=12\n+@imageREST.route('/raw/cutout', methods=['GET'])\n+def getIRawCutout():\n+    print request.args\n+    ra = float(request.args.get('ra', '1'))\n+    dec = float(request.args.get('dec', '1'))\n+    filter = request.args.get('filter', 'r')\n+    width = float(request.args.get('width', '10'))\n+    height = float(request.args.get('height', '10'))\n+    print \"raw cutout ra={} dec={} filter={} width={} height={}\".format(\n+        ra, dec, filter, width, height)\n+\n+    # fetch the image here\n+    w13Raw = dbOpen(\"~/.lsst/dbAuth-dbServ.txt\")\n+    img = w13Raw.getImage(ra, dec, width, height)\n+    print \"Sub w={} h={}\".format(img.getWidth(), img.getHeight())\n+    fileName = str(uuid.uuid4())\n+    img.writeFits(fileName)\n+    w13Raw.closeConnection()\n+    resp = responseFile(fileName)\n+    os.remove(fileName)\n+    return resp\n+\n+def responseFile(fileName):\n+    # It would be nice to just write to 'data' instead of making a file.\n+    # writeFits defined in afw/python/lsst/afw/math/background.py\n+    response = \"/image/raw  failed\"", "path": "python/lsst/imgserv/imageREST_v0.py", "position": null, "original_position": 99, "commit_id": "32f956ce7e189f5ce406a98ae9e7455ec7834d90", "original_commit_id": "e4f2d5527ab78024ef266624851e9f56eca81987", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "If it fails to open the file, it will return the string as the response.\n", "created_at": "2015-02-19T23:56:51Z", "updated_at": "2015-02-20T05:07:25Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/2#discussion_r25038776", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/2", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25038776"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/2#discussion_r25038776"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/2"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25038776/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25039023", "pull_request_review_id": null, "id": 25039023, "diff_hunk": "@@ -0,0 +1,105 @@\n+#!/usr/bin/python\n+\n+# LSST Data Management System\n+# Copyright 2015 AURA/LSST.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+\"\"\"\n+This module implements the RESTful interface for Image Cutout Service.\n+Corresponding URI: /image\n+\n+@author  Jacek Becla, SLAC\n+\"\"\"\n+import os\n+import uuid\n+\n+from flask import Blueprint, Flask, make_response, request\n+\n+from lsst.imgserv.locateImage import dbOpen\n+\n+imageREST = Blueprint('imageREST', __name__, template_folder='imgserv')\n+\n+# this will eventually print list of supported versions\n+@imageREST.route('/')\n+def index():\n+    return \"\"\"\n+Hello, LSST Image Cutout Service here. Try something like:<br />\n+/image/v0/raw?ra=1&dec=1&filter=r<br />\n+/image/v0/raw/cutout?ra=1&dec=1&filter=r&width=12&height=12\n+\"\"\"\n+\n+\n+# this will handle something like:\n+# GET /image/v0/raw?ra=1&dec=1&filter=r\n+@imageREST.route('/raw', methods=['GET'])\n+def getRaw():\n+    ra = request.args.get('ra', '1')\n+    dec = request.args.get('dec', '1')\n+    filter = request.args.get('filter', 'r')\n+\n+    # fetch the image here\n+    # TODO - check inputs are valid.\n+    ra = float(ra)\n+    dec = float(dec)\n+    print \"raw ra={} dec={} filter={}\".format(ra, dec, filter)\n+    # fetch the image here\n+    w13Raw = dbOpen(\"~/.lsst/dbAuth-dbServ.txt\")\n+    imgFull = w13Raw.getImageFull(ra, dec)", "path": "python/lsst/imgserv/imageREST_v0.py", "position": null, "original_position": 63, "commit_id": "32f956ce7e189f5ce406a98ae9e7455ec7834d90", "original_commit_id": "e4f2d5527ab78024ef266624851e9f56eca81987", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "Currently, it just returns \"/image/raw/ failled\". I think error handling is part of DM-1980 - Error handling for webserv.\n", "created_at": "2015-02-20T00:00:42Z", "updated_at": "2015-02-20T05:07:25Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/2#discussion_r25039023", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/2", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25039023"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/2#discussion_r25039023"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/2"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25039023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25041837", "pull_request_review_id": null, "id": 25041837, "diff_hunk": "@@ -0,0 +1,105 @@\n+#!/usr/bin/python\n+\n+# LSST Data Management System\n+# Copyright 2015 AURA/LSST.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+\"\"\"\n+This module implements the RESTful interface for Image Cutout Service.\n+Corresponding URI: /image\n+\n+@author  Jacek Becla, SLAC\n+\"\"\"\n+import os\n+import uuid\n+\n+from flask import Blueprint, Flask, make_response, request\n+\n+from lsst.imgserv.locateImage import dbOpen\n+\n+imageREST = Blueprint('imageREST', __name__, template_folder='imgserv')\n+\n+# this will eventually print list of supported versions\n+@imageREST.route('/')\n+def index():\n+    return \"\"\"\n+Hello, LSST Image Cutout Service here. Try something like:<br />\n+/image/v0/raw?ra=1&dec=1&filter=r<br />\n+/image/v0/raw/cutout?ra=1&dec=1&filter=r&width=12&height=12\n+\"\"\"\n+\n+\n+# this will handle something like:\n+# GET /image/v0/raw?ra=1&dec=1&filter=r\n+@imageREST.route('/raw', methods=['GET'])\n+def getRaw():\n+    ra = request.args.get('ra', '1')\n+    dec = request.args.get('dec', '1')\n+    filter = request.args.get('filter', 'r')\n+\n+    # fetch the image here\n+    # TODO - check inputs are valid.\n+    ra = float(ra)\n+    dec = float(dec)\n+    print \"raw ra={} dec={} filter={}\".format(ra, dec, filter)\n+    # fetch the image here\n+    w13Raw = dbOpen(\"~/.lsst/dbAuth-dbServ.txt\")\n+    imgFull = w13Raw.getImageFull(ra, dec)\n+    print \"Full w={} h={}\".format(imgFull.getWidth(), imgFull.getHeight())\n+    fileName = str(uuid.uuid4())\n+    imgFull.writeFits(fileName)\n+    w13Raw.closeConnection()\n+    resp = responseFile(fileName)\n+    os.remove(fileName)\n+    return resp\n+\n+# this will handle something like:\n+# GET /image/v0/raw/cutout?ra=1&dec=1&filter=r&width=12&height=12\n+@imageREST.route('/raw/cutout', methods=['GET'])\n+def getIRawCutout():\n+    print request.args\n+    ra = float(request.args.get('ra', '1'))\n+    dec = float(request.args.get('dec', '1'))\n+    filter = request.args.get('filter', 'r')\n+    width = float(request.args.get('width', '10'))\n+    height = float(request.args.get('height', '10'))\n+    print \"raw cutout ra={} dec={} filter={} width={} height={}\".format(\n+        ra, dec, filter, width, height)\n+\n+    # fetch the image here\n+    w13Raw = dbOpen(\"~/.lsst/dbAuth-dbServ.txt\")\n+    img = w13Raw.getImage(ra, dec, width, height)\n+    print \"Sub w={} h={}\".format(img.getWidth(), img.getHeight())\n+    fileName = str(uuid.uuid4())\n+    img.writeFits(fileName)\n+    w13Raw.closeConnection()\n+    resp = responseFile(fileName)\n+    os.remove(fileName)\n+    return resp\n+\n+def responseFile(fileName):\n+    # It would be nice to just write to 'data' instead of making a file.\n+    # writeFits defined in afw/python/lsst/afw/math/background.py\n+    response = \"/image/raw  failed\"", "path": "python/lsst/imgserv/imageREST_v0.py", "position": null, "original_position": 99, "commit_id": "32f956ce7e189f5ce406a98ae9e7455ec7834d90", "original_commit_id": "e4f2d5527ab78024ef266624851e9f56eca81987", "user": {"login": "andy-slac", "id": 4266950, "avatar_url": "https://avatars1.githubusercontent.com/u/4266950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-slac", "html_url": "https://github.com/andy-slac", "followers_url": "https://api.github.com/users/andy-slac/followers", "following_url": "https://api.github.com/users/andy-slac/following{/other_user}", "gists_url": "https://api.github.com/users/andy-slac/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-slac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-slac/subscriptions", "organizations_url": "https://api.github.com/users/andy-slac/orgs", "repos_url": "https://api.github.com/users/andy-slac/repos", "events_url": "https://api.github.com/users/andy-slac/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-slac/received_events", "type": "User", "site_admin": false}, "body": "If it fails then exception will be raised, it cannot return anything in that case?\n", "created_at": "2015-02-20T00:52:13Z", "updated_at": "2015-02-20T05:07:25Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/2#discussion_r25041837", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/2", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25041837"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/2#discussion_r25041837"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/2"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25041837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25042066", "pull_request_review_id": null, "id": 25042066, "diff_hunk": "@@ -0,0 +1,105 @@\n+#!/usr/bin/python\n+\n+# LSST Data Management System\n+# Copyright 2015 AURA/LSST.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+\"\"\"\n+This module implements the RESTful interface for Image Cutout Service.\n+Corresponding URI: /image\n+\n+@author  Jacek Becla, SLAC\n+\"\"\"\n+import os\n+import uuid\n+\n+from flask import Blueprint, Flask, make_response, request\n+\n+from lsst.imgserv.locateImage import dbOpen\n+\n+imageREST = Blueprint('imageREST', __name__, template_folder='imgserv')\n+\n+# this will eventually print list of supported versions\n+@imageREST.route('/')\n+def index():\n+    return \"\"\"\n+Hello, LSST Image Cutout Service here. Try something like:<br />\n+/image/v0/raw?ra=1&dec=1&filter=r<br />\n+/image/v0/raw/cutout?ra=1&dec=1&filter=r&width=12&height=12\n+\"\"\"\n+\n+\n+# this will handle something like:\n+# GET /image/v0/raw?ra=1&dec=1&filter=r\n+@imageREST.route('/raw', methods=['GET'])\n+def getRaw():\n+    ra = request.args.get('ra', '1')\n+    dec = request.args.get('dec', '1')\n+    filter = request.args.get('filter', 'r')\n+\n+    # fetch the image here\n+    # TODO - check inputs are valid.\n+    ra = float(ra)\n+    dec = float(dec)\n+    print \"raw ra={} dec={} filter={}\".format(ra, dec, filter)\n+    # fetch the image here\n+    w13Raw = dbOpen(\"~/.lsst/dbAuth-dbServ.txt\")\n+    imgFull = w13Raw.getImageFull(ra, dec)", "path": "python/lsst/imgserv/imageREST_v0.py", "position": null, "original_position": 63, "commit_id": "32f956ce7e189f5ce406a98ae9e7455ec7834d90", "original_commit_id": "e4f2d5527ab78024ef266624851e9f56eca81987", "user": {"login": "andy-slac", "id": 4266950, "avatar_url": "https://avatars1.githubusercontent.com/u/4266950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-slac", "html_url": "https://github.com/andy-slac", "followers_url": "https://api.github.com/users/andy-slac/followers", "following_url": "https://api.github.com/users/andy-slac/following{/other_user}", "gists_url": "https://api.github.com/users/andy-slac/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-slac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-slac/subscriptions", "organizations_url": "https://api.github.com/users/andy-slac/orgs", "repos_url": "https://api.github.com/users/andy-slac/repos", "events_url": "https://api.github.com/users/andy-slac/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-slac/received_events", "type": "User", "site_admin": false}, "body": "OK, I was thinking more about what happens when `imgFull` is `None`, the code below will raise an exception which probably return something like \"ERROR 500\" on the client side. Anyways, I'm happy we have a ticket already to take care of that :)\n", "created_at": "2015-02-20T00:57:00Z", "updated_at": "2015-02-20T05:07:25Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/2#discussion_r25042066", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/2", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25042066"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/2#discussion_r25042066"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/2"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/25042066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/27422205", "pull_request_review_id": null, "id": 27422205, "diff_hunk": "@@ -0,0 +1,86 @@\n+#!/usr/bin/python\n+\n+# LSST Data Management System\n+# Copyright 2015 AURA/LSST.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+\"\"\"\n+Prototype image stitching code.\n+\n+@author  John Gates, SLAC\n+\"\"\"\n+\n+import lsst.afw\n+import lsst.afw.geom as afwGeom\n+import lsst.afw.image as afwImage\n+import lsst.afw.math as afwMath\n+import lsst.coadd.utils as coaddUtils\n+import lsst.log as log\n+import lsst.pex.config as pexConfig\n+\n+class CoaddConfig(pexConfig.Config):\n+    saveDebugImages = pexConfig.Field(\n+        doc = \"Save intermediate images?\",\n+        dtype = bool,\n+        default = False,\n+    )\n+    bboxMin = pexConfig.ListField(\n+        doc = \"Lower left corner of bounding box used to subframe to all input images\",\n+        dtype = int,\n+        default = (0, 0),\n+        length = 2,\n+    )\n+    bboxSize = pexConfig.ListField(\n+        doc = \"Size of bounding box used to subframe all input images; 0 0 for full input images\",\n+        dtype = int,\n+        default = (0, 0),\n+        length = 2,\n+    )\n+    coaddZeroPoint = pexConfig.Field(\n+        dtype = float,\n+        doc = \"Photometric zero point of coadd (mag).\",\n+        default = 27.0,\n+    )\n+    coadd = pexConfig.ConfigField(dtype = coaddUtils.Coadd.ConfigClass, doc = \"\")\n+    #warp = pexConfig.ConfigField(dtype = afwMath.Warper.ConfigClass, doc = \"\")\n+\n+def stitchExposures(destWcs, destBBox, expoList, configCoadd, warper):\n+    ''' Return an exposure matching the destWcs and destBBox that is composed of\n+    pixels from the exposures in expoList. The order of Exposures in expoList\n+    matters as valid pixels in the final image will not be overwrtten with pixels\n+    from source images.\n+    All exposures need valid WCS.\n+    '''\n+    coadd = coaddUtils.Coadd.fromConfig(\n+        bbox = destBBox,\n+        wcs = destWcs,\n+        config = configCoadd)\n+    j = 0\n+    for expo in expoList:", "path": "python/lsst/imgserv/imageStitch.py", "position": null, "original_position": 75, "commit_id": "60809338595e2c4dfc1ebefcb385058e4947667a", "original_commit_id": "13ff948fa1a798de21eee1fb5847d1e21a65ffb9", "user": {"login": "PaulPrice", "id": 1334980, "avatar_url": "https://avatars1.githubusercontent.com/u/1334980?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PaulPrice", "html_url": "https://github.com/PaulPrice", "followers_url": "https://api.github.com/users/PaulPrice/followers", "following_url": "https://api.github.com/users/PaulPrice/following{/other_user}", "gists_url": "https://api.github.com/users/PaulPrice/gists{/gist_id}", "starred_url": "https://api.github.com/users/PaulPrice/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PaulPrice/subscriptions", "organizations_url": "https://api.github.com/users/PaulPrice/orgs", "repos_url": "https://api.github.com/users/PaulPrice/repos", "events_url": "https://api.github.com/users/PaulPrice/events{/privacy}", "received_events_url": "https://api.github.com/users/PaulPrice/received_events", "type": "User", "site_admin": false}, "body": "```\nfor j, expo in enumerate(expoList):\n```\n", "created_at": "2015-03-30T19:14:00Z", "updated_at": "2015-03-30T23:06:45Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/4#discussion_r27422205", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/4", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/27422205"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/4#discussion_r27422205"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/4"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/27422205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/27511993", "pull_request_review_id": null, "id": 27511993, "diff_hunk": "@@ -0,0 +1,92 @@\n+#!/usr/bin/python\n+\n+# LSST Data Management System\n+# Copyright 2015 AURA/LSST.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+\"\"\"\n+This is an example of stiching images together.\n+\n+@author  John Gates, SLAC\n+\"\"\"\n+\n+# See also obs_lsstSim policy/LsstSimMapper.paf to see all\n+# available data products and the dataID keys used to obtain them.\n+\n+import logging as log\n+\n+import lsst.afw\n+import lsst.afw.geom as afwGeom\n+import lsst.afw.image as afwImage\n+import lsst.afw.math as afwMath\n+import lsst.coadd.utils as coaddUtils\n+import lsst.pex.config as pexConfig\n+\n+from lsst.imgserv.locateImage import dbOpen, W13DeepCoaddDb, W13RawDb\n+from lsst.imgserv.imageStitch import CoaddConfig, stitchExposures\n+\n+\n+def _getSubImg(imgSrc, box):\n+    subImg = imgSrc[box[0]:box[2], box[1]:box[3]].clone()\n+    return subImg\n+\n+def stitchTestDeepCoadd():\n+    w13Db = dbOpen(\"~/.mysqlAuthLSST.lsst10\", W13DeepCoaddDb)\n+    fullImg, metaFull = w13Db.getImageFullWithMetadata(19.36995, -0.3146)\n+    if fullImg == None:\n+        print \"No image found\"\n+        exit()\n+    # cut the image into quarters\n+    imgW = fullImg.getWidth()\n+    imgH = fullImg.getHeight()\n+    # ulImg - Upper Left image\n+    ulImg = _getSubImg(fullImg, [0, 0, imgW/2, imgH/2])\n+    urImg = _getSubImg(fullImg, [(imgW/2)+1, 0, imgW, imgH/2])\n+    llImg = _getSubImg(fullImg, [0, (imgH/2)+1, imgW/2, imgH])\n+    lrImg = _getSubImg(fullImg, [(imgW/2)+1, (imgH/2)+1, imgW, imgH])", "path": "examples/imageStitchExample.py", "position": 62, "original_position": 62, "commit_id": "60809338595e2c4dfc1ebefcb385058e4947667a", "original_commit_id": "60809338595e2c4dfc1ebefcb385058e4947667a", "user": {"login": "andy-slac", "id": 4266950, "avatar_url": "https://avatars1.githubusercontent.com/u/4266950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-slac", "html_url": "https://github.com/andy-slac", "followers_url": "https://api.github.com/users/andy-slac/followers", "following_url": "https://api.github.com/users/andy-slac/following{/other_user}", "gists_url": "https://api.github.com/users/andy-slac/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-slac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-slac/subscriptions", "organizations_url": "https://api.github.com/users/andy-slac/orgs", "repos_url": "https://api.github.com/users/andy-slac/repos", "events_url": "https://api.github.com/users/andy-slac/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-slac/received_events", "type": "User", "site_admin": false}, "body": "Is +1 needed in above three lines? I suspect this leaves out median row/column from the split images (unless this is an intention?)\n", "created_at": "2015-03-31T19:07:31Z", "updated_at": "2015-03-31T19:07:31Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/4#discussion_r27511993", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/4", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/27511993"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/4#discussion_r27511993"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/4"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/27511993/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/27512225", "pull_request_review_id": null, "id": 27512225, "diff_hunk": "@@ -0,0 +1,88 @@\n+#!/usr/bin/python\n+\n+# LSST Data Management System\n+# Copyright 2015 AURA/LSST.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+\"\"\"\n+Prototype image stitching code.\n+\n+@author  John Gates, SLAC\n+\"\"\"\n+\n+import logging as log\n+\n+import lsst.afw\n+import lsst.afw.geom as afwGeom\n+import lsst.afw.image as afwImage\n+import lsst.afw.math as afwMath\n+import lsst.coadd.utils as coaddUtils\n+import lsst.pex.config as pexConfig\n+\n+class CoaddConfig(pexConfig.Config):\n+    saveDebugImages = pexConfig.Field(\n+        doc = \"Save intermediate images?\",\n+        dtype = bool,\n+        default = False,\n+    )\n+    bboxMin = pexConfig.ListField(\n+        doc = \"Lower left corner of bounding box used to subframe to all input images\",\n+        dtype = int,\n+        default = (0, 0),\n+        length = 2,\n+    )\n+    bboxSize = pexConfig.ListField(\n+        doc = \"Size of bounding box used to subframe all input images; 0 0 for full input images\",\n+        dtype = int,\n+        default = (0, 0),\n+        length = 2,\n+    )\n+    coaddZeroPoint = pexConfig.Field(\n+        dtype = float,\n+        doc = \"Photometric zero point of coadd (mag).\",\n+        default = 27.0,\n+    )\n+    coadd = pexConfig.ConfigField(dtype = coaddUtils.Coadd.ConfigClass, doc = \"\")\n+    #warp = pexConfig.ConfigField(dtype = afwMath.Warper.ConfigClass, doc = \"\")\n+\n+def stitchExposures(destWcs, destBBox, expoList, configCoadd, warper):\n+    ''' Return an exposure matching the destWcs and destBBox that is composed of\n+    pixels from the exposures in expoList.\n+    destWcs     - WCS object for the destination exposure.\n+    destBBox    - Bounding box for the destination exposure.\n+    expoList    - List of exposures to combine to form dextination exposure.\n+    configCoadd - configuration for Coadd\n+    warper      - Warper to use when warping images.\n+    All exposures need valid WCS.\n+    '''\n+    coadd = coaddUtils.Coadd.fromConfig(\n+        bbox = destBBox,\n+        wcs = destWcs,\n+        config = configCoadd)\n+    for j, expo in enumerate(expoList):\n+        warpedExposure = warper.warpExposure(\n+            destWcs = coadd.getWcs(),\n+            srcExposure = expo,\n+            maxBBox = coadd.getBBox())\n+        log.info(\"warp{}\".format(j))\n+        warpedExposure.writeFits(\"warp{}.fits\".format(j))\n+        j += 1", "path": "python/lsst/imgserv/imageStitch.py", "position": 85, "original_position": 85, "commit_id": "60809338595e2c4dfc1ebefcb385058e4947667a", "original_commit_id": "60809338595e2c4dfc1ebefcb385058e4947667a", "user": {"login": "andy-slac", "id": 4266950, "avatar_url": "https://avatars1.githubusercontent.com/u/4266950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-slac", "html_url": "https://github.com/andy-slac", "followers_url": "https://api.github.com/users/andy-slac/followers", "following_url": "https://api.github.com/users/andy-slac/following{/other_user}", "gists_url": "https://api.github.com/users/andy-slac/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-slac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-slac/subscriptions", "organizations_url": "https://api.github.com/users/andy-slac/orgs", "repos_url": "https://api.github.com/users/andy-slac/repos", "events_url": "https://api.github.com/users/andy-slac/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-slac/received_events", "type": "User", "site_admin": false}, "body": "This is not needed if you use enumerate()\n", "created_at": "2015-03-31T19:09:57Z", "updated_at": "2015-03-31T19:09:57Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/4#discussion_r27512225", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/4", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/27512225"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/4#discussion_r27512225"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/4"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/27512225/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/27512680", "pull_request_review_id": null, "id": 27512680, "diff_hunk": "@@ -82,11 +82,20 @@ def getImageFull(self, ra, dec):\n         Returns None if no image is found.\n         This function assumes the entire image is valid. (no overscan, etc.)\n         '''\n+        img, metadata = self.getImageFullWithMetadata(ra, dec)\n+        return img\n+\n+    def getImageFullWithMetadata(self, ra, dec):\n+        '''Return an image containing ra and dec with corresponding metadata.\n+        Returns None if no image is found.\n+        This function assumes the entire image is valid. (no overscan, etc.)\n+        '''\n         # The SQL UDF scisql_s2PtInBox requires a box, not a point.\n         # 5 arcseconds is a small arbitrary box that seems to work.", "path": "python/lsst/imgserv/locateImage.py", "position": 13, "original_position": 13, "commit_id": "60809338595e2c4dfc1ebefcb385058e4947667a", "original_commit_id": "60809338595e2c4dfc1ebefcb385058e4947667a", "user": {"login": "andy-slac", "id": 4266950, "avatar_url": "https://avatars1.githubusercontent.com/u/4266950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-slac", "html_url": "https://github.com/andy-slac", "followers_url": "https://api.github.com/users/andy-slac/followers", "following_url": "https://api.github.com/users/andy-slac/following{/other_user}", "gists_url": "https://api.github.com/users/andy-slac/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-slac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-slac/subscriptions", "organizations_url": "https://api.github.com/users/andy-slac/orgs", "repos_url": "https://api.github.com/users/andy-slac/repos", "events_url": "https://api.github.com/users/andy-slac/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-slac/received_events", "type": "User", "site_admin": false}, "body": "I'm not sure what is my attitude to magic numbers is. I know that we do not like magic, but I have no idea what is the correct way to avoid these numbers here.\n", "created_at": "2015-03-31T19:13:49Z", "updated_at": "2015-03-31T19:13:49Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/4#discussion_r27512680", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/4", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/27512680"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/4#discussion_r27512680"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/4"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/27512680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31951030", "pull_request_review_id": null, "id": 31951030, "diff_hunk": "@@ -187,11 +186,25 @@ def getSkyMapCoaddUtil(ctrCoord, width, height, filt, source, mapType, patchType\n     source = \"/lsst7/releaseW13EP\"\n     mapType = \"deepCoadd_skyMap\"\n     patchType = \"deepCoadd\"\n+\n+    #raA = afwGeom.Angle(0.0, afwGeom.degrees)\n+    #decA = afwGeom.Angle(0.01667, afwGeom.degrees)\n+    #ctrCoord = afwCoord.Coord(raA, decA, 2000.0)", "path": "examples/skymapStitch.py", "position": null, "original_position": 15, "commit_id": "f4d1722a8b51fd6a3a836e04bbe3bbffe63e6516", "original_commit_id": "e409c28352fcb3f8cfa79e114c3798523f3e91f1", "user": {"login": "timj", "id": 60622, "avatar_url": "https://avatars1.githubusercontent.com/u/60622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timj", "html_url": "https://github.com/timj", "followers_url": "https://api.github.com/users/timj/followers", "following_url": "https://api.github.com/users/timj/following{/other_user}", "gists_url": "https://api.github.com/users/timj/gists{/gist_id}", "starred_url": "https://api.github.com/users/timj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timj/subscriptions", "organizations_url": "https://api.github.com/users/timj/orgs", "repos_url": "https://api.github.com/users/timj/repos", "events_url": "https://api.github.com/users/timj/events{/privacy}", "received_events_url": "https://api.github.com/users/timj/received_events", "type": "User", "site_admin": false}, "body": "why are these 3 lines here? Are they meant to be describing an alternative constructor for the example? If so I'd prefer an extra line of commentary indicating this.\n", "created_at": "2015-06-08T19:39:14Z", "updated_at": "2015-06-09T21:33:25Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/6#discussion_r31951030", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/6", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31951030"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/6#discussion_r31951030"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/6"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31951030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31951272", "pull_request_review_id": null, "id": 31951272, "diff_hunk": "@@ -187,11 +186,25 @@ def getSkyMapCoaddUtil(ctrCoord, width, height, filt, source, mapType, patchType\n     source = \"/lsst7/releaseW13EP\"\n     mapType = \"deepCoadd_skyMap\"\n     patchType = \"deepCoadd\"\n+\n+    #raA = afwGeom.Angle(0.0, afwGeom.degrees)\n+    #decA = afwGeom.Angle(0.01667, afwGeom.degrees)\n+    #ctrCoord = afwCoord.Coord(raA, decA, 2000.0)\n     ctrCoord = afwCoord.Coord(\"1:01:00\", \"00:01:00\", 2000.0)\n-    expo = getSkyMap(ctrCoord, 4000, 300, 'r', source, mapType, patchType)\n+    f = 'r'\n+    w = 4000\n+    h = 300\n+    expo = getSkyMap(ctrCoord, w, h, f, 'pixel', source, mapType, patchType)\n     expo.writeFits(\"getSkyMap.fits\")\n-    expo = getSkyMapGoodPixelCopy(ctrCoord, 4000, 300, 'r', source, mapType, patchType)\n+    expo = getSkyMapGoodPixelCopy(ctrCoord, w, h, f, source, mapType, patchType)\n     expo.writeFits(\"getSkyMapGoodPixelCopy.fits\")\n-    expo = getSkyMapCoaddUtil(ctrCoord, 4000, 300, 'r', source, mapType, patchType)\n+    expo = getSkyMapCoaddUtil(ctrCoord, w, h, f, source, mapType, patchType)\n     expo.writeFits(\"getSkyMapCoaddUtil.fits\")\n \n+    decA = afwGeom.Angle(0.1, afwGeom.degrees)\n+    for rai in range(1, 3595):\n+        raf = float(rai) / 10.0", "path": "examples/skymapStitch.py", "position": null, "original_position": 32, "commit_id": "f4d1722a8b51fd6a3a836e04bbe3bbffe63e6516", "original_commit_id": "e409c28352fcb3f8cfa79e114c3798523f3e91f1", "user": {"login": "timj", "id": 60622, "avatar_url": "https://avatars1.githubusercontent.com/u/60622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timj", "html_url": "https://github.com/timj", "followers_url": "https://api.github.com/users/timj/followers", "following_url": "https://api.github.com/users/timj/following{/other_user}", "gists_url": "https://api.github.com/users/timj/gists{/gist_id}", "starred_url": "https://api.github.com/users/timj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timj/subscriptions", "organizations_url": "https://api.github.com/users/timj/orgs", "repos_url": "https://api.github.com/users/timj/repos", "events_url": "https://api.github.com/users/timj/events{/privacy}", "received_events_url": "https://api.github.com/users/timj/received_events", "type": "User", "site_admin": false}, "body": "I'd rather we imported `division` from `__future__` at the top so we didn't need the extra cruft to force a floating point division.\n", "created_at": "2015-06-08T19:41:42Z", "updated_at": "2015-06-09T21:33:25Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/6#discussion_r31951272", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/6", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31951272"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/6#discussion_r31951272"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/6"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31951272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31951511", "pull_request_review_id": null, "id": 31951511, "diff_hunk": "@@ -91,25 +93,36 @@ def stitchExposuresGoodPixelCopy(destWcs, destBBox, expoList, warper,\n     badPixelMask = afwImage.MaskU.getPlaneBitMask([\"EDGE\"])):\n     ''' Return an exposure matching the destWcs and destBBox that is composed of\n     pixels from the exposures in expoList. Uses coadd_utils.goodPixelCopy\n-    destWcs     - WCS object for the destination exposure.\n-    destBBox    - Bounding box for the destination exposure.\n-    expoList    - List of exposures to combine to form dextination exposure.\n-    warper      - Warper to use when warping images.\n+    @ destWcs: WCS object for the destination exposure.\n+    @ destBBox: Bounding box for the destination exposure.\n+    @ expoList: List of exposures to combine to form dextination exposure.\n+    @ warper: Warper to use when warping images.\n+    @ badPixelMask: mask for pixels that should not be copied.\n     All exposures need valid WCS.\n     '''\n     destExpo = afwImage.ExposureF(destBBox, destWcs)\n-    #badPixelMask = afwImage.MaskU.getPlaneBitMask([\"EDGE\", \"SAT\"])\n-    badPixelMask = afwImage.MaskU.getPlaneBitMask([\"EDGE\"])\n     for j, expo in enumerate(expoList):\n         warpedExposure = warper.warpExposure(\n             destWcs = destExpo.getWcs(),\n             srcExposure = expo,\n             maxBBox = destExpo.getBBox())\n+        s = strExpoCornersRaDec(warpedExposure) # &&&\n         wn = \"warpGPP{}.fits\".format(j)\n-        log.info(wn)\n-        #warpedExposure.writeFits(wn)\n-        j += 1\n-        srcMaskedImage = expo.getMaskedImage()\n+        log.info(wn+\" \"+s)\n+        warpedExposure.writeFits(wn)  # &&&", "path": "python/lsst/imgserv/imageStitch.py", "position": null, "original_position": 39, "commit_id": "f4d1722a8b51fd6a3a836e04bbe3bbffe63e6516", "original_commit_id": "e409c28352fcb3f8cfa79e114c3798523f3e91f1", "user": {"login": "timj", "id": 60622, "avatar_url": "https://avatars1.githubusercontent.com/u/60622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timj", "html_url": "https://github.com/timj", "followers_url": "https://api.github.com/users/timj/followers", "following_url": "https://api.github.com/users/timj/following{/other_user}", "gists_url": "https://api.github.com/users/timj/gists{/gist_id}", "starred_url": "https://api.github.com/users/timj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timj/subscriptions", "organizations_url": "https://api.github.com/users/timj/orgs", "repos_url": "https://api.github.com/users/timj/repos", "events_url": "https://api.github.com/users/timj/events{/privacy}", "received_events_url": "https://api.github.com/users/timj/received_events", "type": "User", "site_admin": false}, "body": "when does this file get cleaned up?\n", "created_at": "2015-06-08T19:44:20Z", "updated_at": "2015-06-09T21:33:25Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/6#discussion_r31951511", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/6", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31951511"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/6#discussion_r31951511"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/6"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31951511/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31951540", "pull_request_review_id": null, "id": 31951540, "diff_hunk": "@@ -91,25 +93,36 @@ def stitchExposuresGoodPixelCopy(destWcs, destBBox, expoList, warper,\n     badPixelMask = afwImage.MaskU.getPlaneBitMask([\"EDGE\"])):\n     ''' Return an exposure matching the destWcs and destBBox that is composed of\n     pixels from the exposures in expoList. Uses coadd_utils.goodPixelCopy\n-    destWcs     - WCS object for the destination exposure.\n-    destBBox    - Bounding box for the destination exposure.\n-    expoList    - List of exposures to combine to form dextination exposure.\n-    warper      - Warper to use when warping images.\n+    @ destWcs: WCS object for the destination exposure.\n+    @ destBBox: Bounding box for the destination exposure.\n+    @ expoList: List of exposures to combine to form dextination exposure.\n+    @ warper: Warper to use when warping images.\n+    @ badPixelMask: mask for pixels that should not be copied.\n     All exposures need valid WCS.\n     '''\n     destExpo = afwImage.ExposureF(destBBox, destWcs)\n-    #badPixelMask = afwImage.MaskU.getPlaneBitMask([\"EDGE\", \"SAT\"])\n-    badPixelMask = afwImage.MaskU.getPlaneBitMask([\"EDGE\"])\n     for j, expo in enumerate(expoList):\n         warpedExposure = warper.warpExposure(\n             destWcs = destExpo.getWcs(),\n             srcExposure = expo,\n             maxBBox = destExpo.getBBox())\n+        s = strExpoCornersRaDec(warpedExposure) # &&&\n         wn = \"warpGPP{}.fits\".format(j)", "path": "python/lsst/imgserv/imageStitch.py", "position": null, "original_position": 33, "commit_id": "f4d1722a8b51fd6a3a836e04bbe3bbffe63e6516", "original_commit_id": "e409c28352fcb3f8cfa79e114c3798523f3e91f1", "user": {"login": "timj", "id": 60622, "avatar_url": "https://avatars1.githubusercontent.com/u/60622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timj", "html_url": "https://github.com/timj", "followers_url": "https://api.github.com/users/timj/followers", "following_url": "https://api.github.com/users/timj/following{/other_user}", "gists_url": "https://api.github.com/users/timj/gists{/gist_id}", "starred_url": "https://api.github.com/users/timj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timj/subscriptions", "organizations_url": "https://api.github.com/users/timj/orgs", "repos_url": "https://api.github.com/users/timj/repos", "events_url": "https://api.github.com/users/timj/events{/privacy}", "received_events_url": "https://api.github.com/users/timj/received_events", "type": "User", "site_admin": false}, "body": "Is this meant to be a temporary file name? Can it clash with anything?\n", "created_at": "2015-06-08T19:44:43Z", "updated_at": "2015-06-09T21:33:25Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/6#discussion_r31951540", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/6", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31951540"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/6#discussion_r31951540"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/6"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31951540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31953378", "pull_request_review_id": null, "id": 31953378, "diff_hunk": "@@ -86,29 +85,82 @@ def getSkyMap(ctrCoord, width, height, filt, source, mapType, patchType):\n             patchImg = patchExposure.getMaskedImage()\n             srcViewImg <<= patchImg\n \n-    # Copy the pixels from the patches into the destination exposures.\n+    # Copy the pixels from the source exposures to the destination exposures.\n     destExposureList = []\n-    for srcExpo in srcExposureList:\n+    for j, srcExpo in enumerate(srcExposureList):\n         sImg = srcExpo.getMaskedImage()\n         srcWcs = srcExpo.getWcs()\n-        dExpo = afwImage.ExposureF(destBBox, srcWcs)\n+        if j == 0:\n+            dBBox = destBBox # destBBox only correct for first image\n+        else:\n+            # Determine the correct BBox (in pixels) for the current srcWcs\n+            llCorner = afwGeom.Point2I(srcWcs.skyToPixel(destCornerCoords[0]))\n+            urCorner = afwGeom.Point2I(srcWcs.skyToPixel(destCornerCoords[2]))\n+            # Handle negative values for dBBox llCorner.\n+            if llCorner.getX() < 0:\n+                llCorner.setX(0)\n+            if llCorner.getY() < 0:\n+                llCorner.setY(0)", "path": "python/lsst/imgserv/skymapStitch.py", "position": null, "original_position": 64, "commit_id": "f4d1722a8b51fd6a3a836e04bbe3bbffe63e6516", "original_commit_id": "e409c28352fcb3f8cfa79e114c3798523f3e91f1", "user": {"login": "timj", "id": 60622, "avatar_url": "https://avatars1.githubusercontent.com/u/60622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timj", "html_url": "https://github.com/timj", "followers_url": "https://api.github.com/users/timj/followers", "following_url": "https://api.github.com/users/timj/following{/other_user}", "gists_url": "https://api.github.com/users/timj/gists{/gist_id}", "starred_url": "https://api.github.com/users/timj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timj/subscriptions", "organizations_url": "https://api.github.com/users/timj/orgs", "repos_url": "https://api.github.com/users/timj/repos", "events_url": "https://api.github.com/users/timj/events{/privacy}", "received_events_url": "https://api.github.com/users/timj/received_events", "type": "User", "site_admin": false}, "body": "if `llCorner` can go negative is there a reason why `urCorner` can't go out of range as well?\n", "created_at": "2015-06-08T20:05:29Z", "updated_at": "2015-06-09T21:33:25Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/6#discussion_r31953378", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/6", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31953378"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/6#discussion_r31953378"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/6"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31953378/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31953560", "pull_request_review_id": null, "id": 31953560, "diff_hunk": "@@ -86,29 +85,82 @@ def getSkyMap(ctrCoord, width, height, filt, source, mapType, patchType):\n             patchImg = patchExposure.getMaskedImage()\n             srcViewImg <<= patchImg\n \n-    # Copy the pixels from the patches into the destination exposures.\n+    # Copy the pixels from the source exposures to the destination exposures.\n     destExposureList = []\n-    for srcExpo in srcExposureList:\n+    for j, srcExpo in enumerate(srcExposureList):\n         sImg = srcExpo.getMaskedImage()\n         srcWcs = srcExpo.getWcs()\n-        dExpo = afwImage.ExposureF(destBBox, srcWcs)\n+        if j == 0:\n+            dBBox = destBBox # destBBox only correct for first image\n+        else:\n+            # Determine the correct BBox (in pixels) for the current srcWcs\n+            llCorner = afwGeom.Point2I(srcWcs.skyToPixel(destCornerCoords[0]))\n+            urCorner = afwGeom.Point2I(srcWcs.skyToPixel(destCornerCoords[2]))\n+            # Handle negative values for dBBox llCorner.\n+            if llCorner.getX() < 0:\n+                llCorner.setX(0)\n+            if llCorner.getY() < 0:\n+                llCorner.setY(0)\n+            dBBox = afwGeom.Box2I(llCorner, urCorner)\n+        log.info(\"j={} dBBox={} sBBox={}\".format(j, dBBox, srcExpo.getBBox()))\n+        dExpo = afwImage.ExposureF(dBBox, srcWcs)\n         dImg = dExpo.getMaskedImage()\n-        beginX = destBBox.getBeginX() - sImg.getX0()\n-        endX = destBBox.getEndX() - sImg.getX0()\n-        beginY = destBBox.getBeginY() - sImg.getY0()\n-        endY = destBBox.getEndY() - sImg.getY0()\n-        dImg <<= sImg[beginX:endX, beginY:endY]\n+        beginX = dBBox.getBeginX() - sImg.getX0()\n+        endX = dBBox.getEndX() - sImg.getX0()\n+        beginY = dBBox.getBeginY() - sImg.getY0()\n+        endY = dBBox.getEndY() - sImg.getY0()\n+\n+        newWidth = srcExpo.getBBox().getEndX() - dBBox.getBeginX()\n+        newHeight = srcExpo.getBBox().getEndY() - dBBox.getBeginY()\n+        log.info(\"beginX={} endX={}\".format(beginX, endX))\n+        log.info(\"newWidth{} = sBBox.EndX{} - sBBox.BeginX{}\".format(newWidth, srcExpo.getBBox().getEndX(), dBBox.getBeginX()))\n+        log.info(\"beginY={} endY={}\".format(beginY, endY))\n+        log.info(\"newHeight{} = sBBox.EndY{} - sBBox.BeginY{}\".format(newHeight, srcExpo.getBBox().getEndY(), dBBox.getBeginY()))\n+        dImg[0:newWidth, 0:newHeight] <<= sImg[beginX:endX, beginY:endY]", "path": "python/lsst/imgserv/skymapStitch.py", "position": null, "original_position": 85, "commit_id": "f4d1722a8b51fd6a3a836e04bbe3bbffe63e6516", "original_commit_id": "e409c28352fcb3f8cfa79e114c3798523f3e91f1", "user": {"login": "timj", "id": 60622, "avatar_url": "https://avatars1.githubusercontent.com/u/60622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timj", "html_url": "https://github.com/timj", "followers_url": "https://api.github.com/users/timj/followers", "following_url": "https://api.github.com/users/timj/following{/other_user}", "gists_url": "https://api.github.com/users/timj/gists{/gist_id}", "starred_url": "https://api.github.com/users/timj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timj/subscriptions", "organizations_url": "https://api.github.com/users/timj/orgs", "repos_url": "https://api.github.com/users/timj/repos", "events_url": "https://api.github.com/users/timj/events{/privacy}", "received_events_url": "https://api.github.com/users/timj/received_events", "type": "User", "site_admin": false}, "body": "I'd appreciate a line or two of comment explaining why we are using the `<<` operator on the image.\n", "created_at": "2015-06-08T20:07:10Z", "updated_at": "2015-06-09T21:33:25Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/6#discussion_r31953560", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/6", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31953560"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/6#discussion_r31953560"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/6"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31953560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31953629", "pull_request_review_id": null, "id": 31953629, "diff_hunk": "@@ -86,29 +85,82 @@ def getSkyMap(ctrCoord, width, height, filt, source, mapType, patchType):\n             patchImg = patchExposure.getMaskedImage()\n             srcViewImg <<= patchImg\n \n-    # Copy the pixels from the patches into the destination exposures.\n+    # Copy the pixels from the source exposures to the destination exposures.\n     destExposureList = []\n-    for srcExpo in srcExposureList:\n+    for j, srcExpo in enumerate(srcExposureList):\n         sImg = srcExpo.getMaskedImage()\n         srcWcs = srcExpo.getWcs()\n-        dExpo = afwImage.ExposureF(destBBox, srcWcs)\n+        if j == 0:\n+            dBBox = destBBox # destBBox only correct for first image\n+        else:\n+            # Determine the correct BBox (in pixels) for the current srcWcs\n+            llCorner = afwGeom.Point2I(srcWcs.skyToPixel(destCornerCoords[0]))\n+            urCorner = afwGeom.Point2I(srcWcs.skyToPixel(destCornerCoords[2]))\n+            # Handle negative values for dBBox llCorner.\n+            if llCorner.getX() < 0:\n+                llCorner.setX(0)\n+            if llCorner.getY() < 0:\n+                llCorner.setY(0)\n+            dBBox = afwGeom.Box2I(llCorner, urCorner)\n+        log.info(\"j={} dBBox={} sBBox={}\".format(j, dBBox, srcExpo.getBBox()))\n+        dExpo = afwImage.ExposureF(dBBox, srcWcs)\n         dImg = dExpo.getMaskedImage()\n-        beginX = destBBox.getBeginX() - sImg.getX0()\n-        endX = destBBox.getEndX() - sImg.getX0()\n-        beginY = destBBox.getBeginY() - sImg.getY0()\n-        endY = destBBox.getEndY() - sImg.getY0()\n-        dImg <<= sImg[beginX:endX, beginY:endY]\n+        beginX = dBBox.getBeginX() - sImg.getX0()\n+        endX = dBBox.getEndX() - sImg.getX0()\n+        beginY = dBBox.getBeginY() - sImg.getY0()\n+        endY = dBBox.getEndY() - sImg.getY0()\n+\n+        newWidth = srcExpo.getBBox().getEndX() - dBBox.getBeginX()\n+        newHeight = srcExpo.getBBox().getEndY() - dBBox.getBeginY()\n+        log.info(\"beginX={} endX={}\".format(beginX, endX))\n+        log.info(\"newWidth{} = sBBox.EndX{} - sBBox.BeginX{}\".format(newWidth, srcExpo.getBBox().getEndX(), dBBox.getBeginX()))\n+        log.info(\"beginY={} endY={}\".format(beginY, endY))\n+        log.info(\"newHeight{} = sBBox.EndY{} - sBBox.BeginY{}\".format(newHeight, srcExpo.getBBox().getEndY(), dBBox.getBeginY()))\n+        dImg[0:newWidth, 0:newHeight] <<= sImg[beginX:endX, beginY:endY]\n         destExposureList.append(dExpo)\n \n     # If there's only one exposure in the list (and there usually is) just return it.\n     if len(destExposureList) == 1:\n         return  destExposureList[0]\n+\n     # Need to stitch together the multiple destination exposures.\n-    # TODO: locate region that exercises this code for testing DM-2467\n+    log.info(\"getSkyMap stitching together multiple destExposures\")\n     warperConfig = afwMath.WarperConfig()\n     warper = afwMath.Warper.fromConfig(warperConfig)\n-    badPixelMask = afwImage.MaskU.getPlaneBitMask([])\n-    stitchedExpo = stitchExposuresGoodPixelCopy(destWcs, destBBox, destExposureList, warper, badPixelMask)\n-    #stitchedExpo.writeFits(\"skyCutOutStitched.fits\")\n+    stitchedExpo = stitchExposuresGoodPixelCopy(destWcs, destBBox, destExposureList, warper)\n     return stitchedExpo\n \n+\n+def getBBoxForCoords(wcs, ctrCoord, width, height, units):\n+    '''Returns a Box2I object representing the bounding box in pixels\n+    of the target region.\n+    @ wcs: WCS object for the target region.\n+    @ ctrCoord: RA and Dec coordinate for the center of the target region.\n+    @ width: Width of the target region with units indicated by 'units' below.\n+    @ height: Height of the target region with units indicated by 'units' below.\n+    @ units: Units for height and width. Must be 'arcsecond' or 'pixel'\n+    '''\n+    bbox = afwGeom.Box2I()\n+    if units == 'arcsecond':\n+        #ctrCoord center, RA and Dec with width and height in arcseconds\n+        widthHalfA = afwGeom.Angle((width/2.0), afwGeom.arcseconds)\n+        heightHalfA = afwGeom.Angle((height/2.0), afwGeom.arcseconds)\n+        minRa = ctrCoord.getLongitude() - widthHalfA\n+        minDec = ctrCoord.getLatitude() - heightHalfA\n+        maxRa = ctrCoord.getLongitude() + widthHalfA\n+        maxDec = ctrCoord.getLatitude() + heightHalfA\n+        llCoord = afwCoord.Coord(minRa, minDec, ctrCoord.getEpoch())\n+        llCoordPix = wcs.skyToPixel(llCoord)\n+        urCoord = afwCoord.Coord(maxRa, maxDec, ctrCoord.getEpoch())\n+        urCoordPix = wcs.skyToPixel(urCoord)\n+        p2iMin = afwGeom.Point2I(llCoordPix)\n+        p2iMax = afwGeom.Point2I(urCoordPix)\n+        bbox = afwGeom.Box2I(p2iMin, p2iMax)\n+    else: # 'pixel'", "path": "python/lsst/imgserv/skymapStitch.py", "position": null, "original_position": 129, "commit_id": "f4d1722a8b51fd6a3a836e04bbe3bbffe63e6516", "original_commit_id": "e409c28352fcb3f8cfa79e114c3798523f3e91f1", "user": {"login": "timj", "id": 60622, "avatar_url": "https://avatars1.githubusercontent.com/u/60622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timj", "html_url": "https://github.com/timj", "followers_url": "https://api.github.com/users/timj/followers", "following_url": "https://api.github.com/users/timj/following{/other_user}", "gists_url": "https://api.github.com/users/timj/gists{/gist_id}", "starred_url": "https://api.github.com/users/timj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timj/subscriptions", "organizations_url": "https://api.github.com/users/timj/orgs", "repos_url": "https://api.github.com/users/timj/repos", "events_url": "https://api.github.com/users/timj/events{/privacy}", "received_events_url": "https://api.github.com/users/timj/received_events", "type": "User", "site_admin": false}, "body": "Please check explicitly for `pixel` rather than assuming that is the unit.\n", "created_at": "2015-06-08T20:07:48Z", "updated_at": "2015-06-09T21:33:25Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/6#discussion_r31953629", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/6", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31953629"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/6#discussion_r31953629"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/6"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31953629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31953794", "pull_request_review_id": null, "id": 31953794, "diff_hunk": "@@ -86,29 +85,82 @@ def getSkyMap(ctrCoord, width, height, filt, source, mapType, patchType):\n             patchImg = patchExposure.getMaskedImage()\n             srcViewImg <<= patchImg\n \n-    # Copy the pixels from the patches into the destination exposures.\n+    # Copy the pixels from the source exposures to the destination exposures.\n     destExposureList = []\n-    for srcExpo in srcExposureList:\n+    for j, srcExpo in enumerate(srcExposureList):\n         sImg = srcExpo.getMaskedImage()\n         srcWcs = srcExpo.getWcs()\n-        dExpo = afwImage.ExposureF(destBBox, srcWcs)\n+        if j == 0:\n+            dBBox = destBBox # destBBox only correct for first image\n+        else:\n+            # Determine the correct BBox (in pixels) for the current srcWcs\n+            llCorner = afwGeom.Point2I(srcWcs.skyToPixel(destCornerCoords[0]))\n+            urCorner = afwGeom.Point2I(srcWcs.skyToPixel(destCornerCoords[2]))\n+            # Handle negative values for dBBox llCorner.\n+            if llCorner.getX() < 0:\n+                llCorner.setX(0)\n+            if llCorner.getY() < 0:\n+                llCorner.setY(0)\n+            dBBox = afwGeom.Box2I(llCorner, urCorner)\n+        log.info(\"j={} dBBox={} sBBox={}\".format(j, dBBox, srcExpo.getBBox()))\n+        dExpo = afwImage.ExposureF(dBBox, srcWcs)\n         dImg = dExpo.getMaskedImage()\n-        beginX = destBBox.getBeginX() - sImg.getX0()\n-        endX = destBBox.getEndX() - sImg.getX0()\n-        beginY = destBBox.getBeginY() - sImg.getY0()\n-        endY = destBBox.getEndY() - sImg.getY0()\n-        dImg <<= sImg[beginX:endX, beginY:endY]\n+        beginX = dBBox.getBeginX() - sImg.getX0()\n+        endX = dBBox.getEndX() - sImg.getX0()\n+        beginY = dBBox.getBeginY() - sImg.getY0()\n+        endY = dBBox.getEndY() - sImg.getY0()\n+\n+        newWidth = srcExpo.getBBox().getEndX() - dBBox.getBeginX()\n+        newHeight = srcExpo.getBBox().getEndY() - dBBox.getBeginY()\n+        log.info(\"beginX={} endX={}\".format(beginX, endX))\n+        log.info(\"newWidth{} = sBBox.EndX{} - sBBox.BeginX{}\".format(newWidth, srcExpo.getBBox().getEndX(), dBBox.getBeginX()))\n+        log.info(\"beginY={} endY={}\".format(beginY, endY))\n+        log.info(\"newHeight{} = sBBox.EndY{} - sBBox.BeginY{}\".format(newHeight, srcExpo.getBBox().getEndY(), dBBox.getBeginY()))\n+        dImg[0:newWidth, 0:newHeight] <<= sImg[beginX:endX, beginY:endY]\n         destExposureList.append(dExpo)\n \n     # If there's only one exposure in the list (and there usually is) just return it.\n     if len(destExposureList) == 1:\n         return  destExposureList[0]\n+\n     # Need to stitch together the multiple destination exposures.\n-    # TODO: locate region that exercises this code for testing DM-2467\n+    log.info(\"getSkyMap stitching together multiple destExposures\")\n     warperConfig = afwMath.WarperConfig()\n     warper = afwMath.Warper.fromConfig(warperConfig)\n-    badPixelMask = afwImage.MaskU.getPlaneBitMask([])\n-    stitchedExpo = stitchExposuresGoodPixelCopy(destWcs, destBBox, destExposureList, warper, badPixelMask)\n-    #stitchedExpo.writeFits(\"skyCutOutStitched.fits\")\n+    stitchedExpo = stitchExposuresGoodPixelCopy(destWcs, destBBox, destExposureList, warper)\n     return stitchedExpo\n \n+\n+def getBBoxForCoords(wcs, ctrCoord, width, height, units):\n+    '''Returns a Box2I object representing the bounding box in pixels\n+    of the target region.\n+    @ wcs: WCS object for the target region.\n+    @ ctrCoord: RA and Dec coordinate for the center of the target region.\n+    @ width: Width of the target region with units indicated by 'units' below.\n+    @ height: Height of the target region with units indicated by 'units' below.\n+    @ units: Units for height and width. Must be 'arcsecond' or 'pixel'\n+    '''\n+    bbox = afwGeom.Box2I()\n+    if units == 'arcsecond':\n+        #ctrCoord center, RA and Dec with width and height in arcseconds\n+        widthHalfA = afwGeom.Angle((width/2.0), afwGeom.arcseconds)\n+        heightHalfA = afwGeom.Angle((height/2.0), afwGeom.arcseconds)", "path": "python/lsst/imgserv/skymapStitch.py", "position": 159, "original_position": 117, "commit_id": "f4d1722a8b51fd6a3a836e04bbe3bbffe63e6516", "original_commit_id": "e409c28352fcb3f8cfa79e114c3798523f3e91f1", "user": {"login": "timj", "id": 60622, "avatar_url": "https://avatars1.githubusercontent.com/u/60622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timj", "html_url": "https://github.com/timj", "followers_url": "https://api.github.com/users/timj/followers", "following_url": "https://api.github.com/users/timj/following{/other_user}", "gists_url": "https://api.github.com/users/timj/gists{/gist_id}", "starred_url": "https://api.github.com/users/timj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timj/subscriptions", "organizations_url": "https://api.github.com/users/timj/orgs", "repos_url": "https://api.github.com/users/timj/repos", "events_url": "https://api.github.com/users/timj/events{/privacy}", "received_events_url": "https://api.github.com/users/timj/received_events", "type": "User", "site_admin": false}, "body": "Are we clear what type of division is going to happen here?\n", "created_at": "2015-06-08T20:09:16Z", "updated_at": "2015-06-09T21:33:25Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/6#discussion_r31953794", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/6", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31953794"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/6#discussion_r31953794"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/6"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31953794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31954530", "pull_request_review_id": null, "id": 31954530, "diff_hunk": "@@ -86,29 +85,82 @@ def getSkyMap(ctrCoord, width, height, filt, source, mapType, patchType):\n             patchImg = patchExposure.getMaskedImage()\n             srcViewImg <<= patchImg\n \n-    # Copy the pixels from the patches into the destination exposures.\n+    # Copy the pixels from the source exposures to the destination exposures.\n     destExposureList = []\n-    for srcExpo in srcExposureList:\n+    for j, srcExpo in enumerate(srcExposureList):\n         sImg = srcExpo.getMaskedImage()\n         srcWcs = srcExpo.getWcs()\n-        dExpo = afwImage.ExposureF(destBBox, srcWcs)\n+        if j == 0:\n+            dBBox = destBBox # destBBox only correct for first image\n+        else:\n+            # Determine the correct BBox (in pixels) for the current srcWcs\n+            llCorner = afwGeom.Point2I(srcWcs.skyToPixel(destCornerCoords[0]))\n+            urCorner = afwGeom.Point2I(srcWcs.skyToPixel(destCornerCoords[2]))\n+            # Handle negative values for dBBox llCorner.\n+            if llCorner.getX() < 0:\n+                llCorner.setX(0)\n+            if llCorner.getY() < 0:\n+                llCorner.setY(0)\n+            dBBox = afwGeom.Box2I(llCorner, urCorner)\n+        log.info(\"j={} dBBox={} sBBox={}\".format(j, dBBox, srcExpo.getBBox()))\n+        dExpo = afwImage.ExposureF(dBBox, srcWcs)\n         dImg = dExpo.getMaskedImage()\n-        beginX = destBBox.getBeginX() - sImg.getX0()\n-        endX = destBBox.getEndX() - sImg.getX0()\n-        beginY = destBBox.getBeginY() - sImg.getY0()\n-        endY = destBBox.getEndY() - sImg.getY0()\n-        dImg <<= sImg[beginX:endX, beginY:endY]\n+        beginX = dBBox.getBeginX() - sImg.getX0()\n+        endX = dBBox.getEndX() - sImg.getX0()\n+        beginY = dBBox.getBeginY() - sImg.getY0()\n+        endY = dBBox.getEndY() - sImg.getY0()\n+\n+        newWidth = srcExpo.getBBox().getEndX() - dBBox.getBeginX()\n+        newHeight = srcExpo.getBBox().getEndY() - dBBox.getBeginY()\n+        log.info(\"beginX={} endX={}\".format(beginX, endX))\n+        log.info(\"newWidth{} = sBBox.EndX{} - sBBox.BeginX{}\".format(newWidth, srcExpo.getBBox().getEndX(), dBBox.getBeginX()))\n+        log.info(\"beginY={} endY={}\".format(beginY, endY))\n+        log.info(\"newHeight{} = sBBox.EndY{} - sBBox.BeginY{}\".format(newHeight, srcExpo.getBBox().getEndY(), dBBox.getBeginY()))\n+        dImg[0:newWidth, 0:newHeight] <<= sImg[beginX:endX, beginY:endY]\n         destExposureList.append(dExpo)\n \n     # If there's only one exposure in the list (and there usually is) just return it.\n     if len(destExposureList) == 1:\n         return  destExposureList[0]\n+\n     # Need to stitch together the multiple destination exposures.\n-    # TODO: locate region that exercises this code for testing DM-2467\n+    log.info(\"getSkyMap stitching together multiple destExposures\")\n     warperConfig = afwMath.WarperConfig()\n     warper = afwMath.Warper.fromConfig(warperConfig)\n-    badPixelMask = afwImage.MaskU.getPlaneBitMask([])\n-    stitchedExpo = stitchExposuresGoodPixelCopy(destWcs, destBBox, destExposureList, warper, badPixelMask)\n-    #stitchedExpo.writeFits(\"skyCutOutStitched.fits\")\n+    stitchedExpo = stitchExposuresGoodPixelCopy(destWcs, destBBox, destExposureList, warper)\n     return stitchedExpo\n \n+\n+def getBBoxForCoords(wcs, ctrCoord, width, height, units):\n+    '''Returns a Box2I object representing the bounding box in pixels\n+    of the target region.\n+    @ wcs: WCS object for the target region.\n+    @ ctrCoord: RA and Dec coordinate for the center of the target region.\n+    @ width: Width of the target region with units indicated by 'units' below.\n+    @ height: Height of the target region with units indicated by 'units' below.\n+    @ units: Units for height and width. Must be 'arcsecond' or 'pixel'\n+    '''\n+    bbox = afwGeom.Box2I()\n+    if units == 'arcsecond':\n+        #ctrCoord center, RA and Dec with width and height in arcseconds\n+        widthHalfA = afwGeom.Angle((width/2.0), afwGeom.arcseconds)\n+        heightHalfA = afwGeom.Angle((height/2.0), afwGeom.arcseconds)\n+        minRa = ctrCoord.getLongitude() - widthHalfA\n+        minDec = ctrCoord.getLatitude() - heightHalfA\n+        maxRa = ctrCoord.getLongitude() + widthHalfA\n+        maxDec = ctrCoord.getLatitude() + heightHalfA\n+        llCoord = afwCoord.Coord(minRa, minDec, ctrCoord.getEpoch())\n+        llCoordPix = wcs.skyToPixel(llCoord)\n+        urCoord = afwCoord.Coord(maxRa, maxDec, ctrCoord.getEpoch())\n+        urCoordPix = wcs.skyToPixel(urCoord)\n+        p2iMin = afwGeom.Point2I(llCoordPix)\n+        p2iMax = afwGeom.Point2I(urCoordPix)\n+        bbox = afwGeom.Box2I(p2iMin, p2iMax)\n+    else: # 'pixel'\n+        # ctrCoord center, RA and Dec with width and height in pixels\n+        ctrCoordPix = wcs.skyToPixel(ctrCoord)\n+        minRaPix = int(ctrCoordPix.getX() - width/2.0)", "path": "python/lsst/imgserv/skymapStitch.py", "position": null, "original_position": 132, "commit_id": "f4d1722a8b51fd6a3a836e04bbe3bbffe63e6516", "original_commit_id": "e409c28352fcb3f8cfa79e114c3798523f3e91f1", "user": {"login": "timj", "id": 60622, "avatar_url": "https://avatars1.githubusercontent.com/u/60622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timj", "html_url": "https://github.com/timj", "followers_url": "https://api.github.com/users/timj/followers", "following_url": "https://api.github.com/users/timj/following{/other_user}", "gists_url": "https://api.github.com/users/timj/gists{/gist_id}", "starred_url": "https://api.github.com/users/timj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timj/subscriptions", "organizations_url": "https://api.github.com/users/timj/orgs", "repos_url": "https://api.github.com/users/timj/repos", "events_url": "https://api.github.com/users/timj/events{/privacy}", "received_events_url": "https://api.github.com/users/timj/received_events", "type": "User", "site_admin": false}, "body": "This division is presumably intended to be an integer division?\n", "created_at": "2015-06-08T20:16:27Z", "updated_at": "2015-06-09T21:33:25Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/6#discussion_r31954530", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/6", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31954530"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/6#discussion_r31954530"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/6"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31954530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31956831", "pull_request_review_id": null, "id": 31956831, "diff_hunk": "@@ -86,29 +85,82 @@ def getSkyMap(ctrCoord, width, height, filt, source, mapType, patchType):\n             patchImg = patchExposure.getMaskedImage()\n             srcViewImg <<= patchImg\n \n-    # Copy the pixels from the patches into the destination exposures.\n+    # Copy the pixels from the source exposures to the destination exposures.\n     destExposureList = []\n-    for srcExpo in srcExposureList:\n+    for j, srcExpo in enumerate(srcExposureList):\n         sImg = srcExpo.getMaskedImage()\n         srcWcs = srcExpo.getWcs()\n-        dExpo = afwImage.ExposureF(destBBox, srcWcs)\n+        if j == 0:\n+            dBBox = destBBox # destBBox only correct for first image\n+        else:\n+            # Determine the correct BBox (in pixels) for the current srcWcs\n+            llCorner = afwGeom.Point2I(srcWcs.skyToPixel(destCornerCoords[0]))\n+            urCorner = afwGeom.Point2I(srcWcs.skyToPixel(destCornerCoords[2]))\n+            # Handle negative values for dBBox llCorner.\n+            if llCorner.getX() < 0:\n+                llCorner.setX(0)\n+            if llCorner.getY() < 0:\n+                llCorner.setY(0)\n+            dBBox = afwGeom.Box2I(llCorner, urCorner)\n+        log.info(\"j={} dBBox={} sBBox={}\".format(j, dBBox, srcExpo.getBBox()))\n+        dExpo = afwImage.ExposureF(dBBox, srcWcs)\n         dImg = dExpo.getMaskedImage()\n-        beginX = destBBox.getBeginX() - sImg.getX0()\n-        endX = destBBox.getEndX() - sImg.getX0()\n-        beginY = destBBox.getBeginY() - sImg.getY0()\n-        endY = destBBox.getEndY() - sImg.getY0()\n-        dImg <<= sImg[beginX:endX, beginY:endY]\n+        beginX = dBBox.getBeginX() - sImg.getX0()\n+        endX = dBBox.getEndX() - sImg.getX0()\n+        beginY = dBBox.getBeginY() - sImg.getY0()\n+        endY = dBBox.getEndY() - sImg.getY0()\n+\n+        newWidth = srcExpo.getBBox().getEndX() - dBBox.getBeginX()\n+        newHeight = srcExpo.getBBox().getEndY() - dBBox.getBeginY()\n+        log.info(\"beginX={} endX={}\".format(beginX, endX))\n+        log.info(\"newWidth{} = sBBox.EndX{} - sBBox.BeginX{}\".format(newWidth, srcExpo.getBBox().getEndX(), dBBox.getBeginX()))\n+        log.info(\"beginY={} endY={}\".format(beginY, endY))\n+        log.info(\"newHeight{} = sBBox.EndY{} - sBBox.BeginY{}\".format(newHeight, srcExpo.getBBox().getEndY(), dBBox.getBeginY()))\n+        dImg[0:newWidth, 0:newHeight] <<= sImg[beginX:endX, beginY:endY]", "path": "python/lsst/imgserv/skymapStitch.py", "position": null, "original_position": 85, "commit_id": "f4d1722a8b51fd6a3a836e04bbe3bbffe63e6516", "original_commit_id": "e409c28352fcb3f8cfa79e114c3798523f3e91f1", "user": {"login": "RobertLuptonTheGood", "id": 1288469, "avatar_url": "https://avatars0.githubusercontent.com/u/1288469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RobertLuptonTheGood", "html_url": "https://github.com/RobertLuptonTheGood", "followers_url": "https://api.github.com/users/RobertLuptonTheGood/followers", "following_url": "https://api.github.com/users/RobertLuptonTheGood/following{/other_user}", "gists_url": "https://api.github.com/users/RobertLuptonTheGood/gists{/gist_id}", "starred_url": "https://api.github.com/users/RobertLuptonTheGood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RobertLuptonTheGood/subscriptions", "organizations_url": "https://api.github.com/users/RobertLuptonTheGood/orgs", "repos_url": "https://api.github.com/users/RobertLuptonTheGood/repos", "events_url": "https://api.github.com/users/RobertLuptonTheGood/events{/privacy}", "received_events_url": "https://api.github.com/users/RobertLuptonTheGood/received_events", "type": "User", "site_admin": false}, "body": "It's because it's the \"assign pixels\" operator.  In this case, \"dImg[...] = sImg[...]\" would work.  You used to need it to write \"dImg <<= sImg\"  (as \"dImg = sImg\" would redefine dImg), but \"dImg[:] = sImg\" (now) works and is to be preferred.\n", "created_at": "2015-06-08T20:38:30Z", "updated_at": "2015-06-09T21:33:25Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/6#discussion_r31956831", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/6", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31956831"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/6#discussion_r31956831"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/6"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/31956831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/32032044", "pull_request_review_id": null, "id": 32032044, "diff_hunk": "@@ -187,11 +186,25 @@ def getSkyMapCoaddUtil(ctrCoord, width, height, filt, source, mapType, patchType\n     source = \"/lsst7/releaseW13EP\"\n     mapType = \"deepCoadd_skyMap\"\n     patchType = \"deepCoadd\"\n+\n+    #raA = afwGeom.Angle(0.0, afwGeom.degrees)\n+    #decA = afwGeom.Angle(0.01667, afwGeom.degrees)\n+    #ctrCoord = afwCoord.Coord(raA, decA, 2000.0)", "path": "examples/skymapStitch.py", "position": null, "original_position": 15, "commit_id": "f4d1722a8b51fd6a3a836e04bbe3bbffe63e6516", "original_commit_id": "e409c28352fcb3f8cfa79e114c3798523f3e91f1", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "That and the location requires merging patches from 2 tracts while the other is within a single tract. I'll add the comments.\n", "created_at": "2015-06-09T16:19:05Z", "updated_at": "2015-06-09T21:33:25Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/6#discussion_r32032044", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/6", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/32032044"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/6#discussion_r32032044"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/6"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/32032044/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/32033909", "pull_request_review_id": null, "id": 32033909, "diff_hunk": "@@ -91,25 +93,36 @@ def stitchExposuresGoodPixelCopy(destWcs, destBBox, expoList, warper,\n     badPixelMask = afwImage.MaskU.getPlaneBitMask([\"EDGE\"])):\n     ''' Return an exposure matching the destWcs and destBBox that is composed of\n     pixels from the exposures in expoList. Uses coadd_utils.goodPixelCopy\n-    destWcs     - WCS object for the destination exposure.\n-    destBBox    - Bounding box for the destination exposure.\n-    expoList    - List of exposures to combine to form dextination exposure.\n-    warper      - Warper to use when warping images.\n+    @ destWcs: WCS object for the destination exposure.\n+    @ destBBox: Bounding box for the destination exposure.\n+    @ expoList: List of exposures to combine to form dextination exposure.\n+    @ warper: Warper to use when warping images.\n+    @ badPixelMask: mask for pixels that should not be copied.\n     All exposures need valid WCS.\n     '''\n     destExpo = afwImage.ExposureF(destBBox, destWcs)\n-    #badPixelMask = afwImage.MaskU.getPlaneBitMask([\"EDGE\", \"SAT\"])\n-    badPixelMask = afwImage.MaskU.getPlaneBitMask([\"EDGE\"])\n     for j, expo in enumerate(expoList):\n         warpedExposure = warper.warpExposure(\n             destWcs = destExpo.getWcs(),\n             srcExposure = expo,\n             maxBBox = destExpo.getBBox())\n+        s = strExpoCornersRaDec(warpedExposure) # &&&\n         wn = \"warpGPP{}.fits\".format(j)\n-        log.info(wn)\n-        #warpedExposure.writeFits(wn)\n-        j += 1\n-        srcMaskedImage = expo.getMaskedImage()\n+        log.info(wn+\" \"+s)\n+        warpedExposure.writeFits(wn)  # &&&", "path": "python/lsst/imgserv/imageStitch.py", "position": null, "original_position": 39, "commit_id": "f4d1722a8b51fd6a3a836e04bbe3bbffe63e6516", "original_commit_id": "e409c28352fcb3f8cfa79e114c3798523f3e91f1", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "Those lines weren't supposed to live this long.\n", "created_at": "2015-06-09T16:36:42Z", "updated_at": "2015-06-09T21:33:25Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/6#discussion_r32033909", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/6", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/32033909"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/6#discussion_r32033909"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/6"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/32033909/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/32035317", "pull_request_review_id": null, "id": 32035317, "diff_hunk": "@@ -86,29 +85,82 @@ def getSkyMap(ctrCoord, width, height, filt, source, mapType, patchType):\n             patchImg = patchExposure.getMaskedImage()\n             srcViewImg <<= patchImg\n \n-    # Copy the pixels from the patches into the destination exposures.\n+    # Copy the pixels from the source exposures to the destination exposures.\n     destExposureList = []\n-    for srcExpo in srcExposureList:\n+    for j, srcExpo in enumerate(srcExposureList):\n         sImg = srcExpo.getMaskedImage()\n         srcWcs = srcExpo.getWcs()\n-        dExpo = afwImage.ExposureF(destBBox, srcWcs)\n+        if j == 0:\n+            dBBox = destBBox # destBBox only correct for first image\n+        else:\n+            # Determine the correct BBox (in pixels) for the current srcWcs\n+            llCorner = afwGeom.Point2I(srcWcs.skyToPixel(destCornerCoords[0]))\n+            urCorner = afwGeom.Point2I(srcWcs.skyToPixel(destCornerCoords[2]))\n+            # Handle negative values for dBBox llCorner.\n+            if llCorner.getX() < 0:\n+                llCorner.setX(0)\n+            if llCorner.getY() < 0:\n+                llCorner.setY(0)", "path": "python/lsst/imgserv/skymapStitch.py", "position": null, "original_position": 64, "commit_id": "f4d1722a8b51fd6a3a836e04bbe3bbffe63e6516", "original_commit_id": "e409c28352fcb3f8cfa79e114c3798523f3e91f1", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "urCorner really shouldn't ever be negative, but it's probably worth checking.\n", "created_at": "2015-06-09T16:49:31Z", "updated_at": "2015-06-09T21:33:25Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/6#discussion_r32035317", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/6", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/32035317"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/6#discussion_r32035317"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/6"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/32035317/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/32036871", "pull_request_review_id": null, "id": 32036871, "diff_hunk": "@@ -86,29 +85,82 @@ def getSkyMap(ctrCoord, width, height, filt, source, mapType, patchType):\n             patchImg = patchExposure.getMaskedImage()\n             srcViewImg <<= patchImg\n \n-    # Copy the pixels from the patches into the destination exposures.\n+    # Copy the pixels from the source exposures to the destination exposures.\n     destExposureList = []\n-    for srcExpo in srcExposureList:\n+    for j, srcExpo in enumerate(srcExposureList):\n         sImg = srcExpo.getMaskedImage()\n         srcWcs = srcExpo.getWcs()\n-        dExpo = afwImage.ExposureF(destBBox, srcWcs)\n+        if j == 0:\n+            dBBox = destBBox # destBBox only correct for first image\n+        else:\n+            # Determine the correct BBox (in pixels) for the current srcWcs\n+            llCorner = afwGeom.Point2I(srcWcs.skyToPixel(destCornerCoords[0]))\n+            urCorner = afwGeom.Point2I(srcWcs.skyToPixel(destCornerCoords[2]))\n+            # Handle negative values for dBBox llCorner.\n+            if llCorner.getX() < 0:\n+                llCorner.setX(0)\n+            if llCorner.getY() < 0:\n+                llCorner.setY(0)", "path": "python/lsst/imgserv/skymapStitch.py", "position": null, "original_position": 64, "commit_id": "f4d1722a8b51fd6a3a836e04bbe3bbffe63e6516", "original_commit_id": "e409c28352fcb3f8cfa79e114c3798523f3e91f1", "user": {"login": "timj", "id": 60622, "avatar_url": "https://avatars1.githubusercontent.com/u/60622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timj", "html_url": "https://github.com/timj", "followers_url": "https://api.github.com/users/timj/followers", "following_url": "https://api.github.com/users/timj/following{/other_user}", "gists_url": "https://api.github.com/users/timj/gists{/gist_id}", "starred_url": "https://api.github.com/users/timj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timj/subscriptions", "organizations_url": "https://api.github.com/users/timj/orgs", "repos_url": "https://api.github.com/users/timj/repos", "events_url": "https://api.github.com/users/timj/events{/privacy}", "received_events_url": "https://api.github.com/users/timj/received_events", "type": "User", "site_admin": false}, "body": "Well, is it okay if `urCorner` is larger than image? A negative pixel means off the image but so can a very large pixel value.\n", "created_at": "2015-06-09T17:03:21Z", "updated_at": "2015-06-09T21:33:25Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/6#discussion_r32036871", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/6", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/32036871"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/6#discussion_r32036871"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/6"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/32036871/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/32041171", "pull_request_review_id": null, "id": 32041171, "diff_hunk": "@@ -86,29 +85,82 @@ def getSkyMap(ctrCoord, width, height, filt, source, mapType, patchType):\n             patchImg = patchExposure.getMaskedImage()\n             srcViewImg <<= patchImg\n \n-    # Copy the pixels from the patches into the destination exposures.\n+    # Copy the pixels from the source exposures to the destination exposures.\n     destExposureList = []\n-    for srcExpo in srcExposureList:\n+    for j, srcExpo in enumerate(srcExposureList):\n         sImg = srcExpo.getMaskedImage()\n         srcWcs = srcExpo.getWcs()\n-        dExpo = afwImage.ExposureF(destBBox, srcWcs)\n+        if j == 0:\n+            dBBox = destBBox # destBBox only correct for first image\n+        else:\n+            # Determine the correct BBox (in pixels) for the current srcWcs\n+            llCorner = afwGeom.Point2I(srcWcs.skyToPixel(destCornerCoords[0]))\n+            urCorner = afwGeom.Point2I(srcWcs.skyToPixel(destCornerCoords[2]))\n+            # Handle negative values for dBBox llCorner.\n+            if llCorner.getX() < 0:\n+                llCorner.setX(0)\n+            if llCorner.getY() < 0:\n+                llCorner.setY(0)", "path": "python/lsst/imgserv/skymapStitch.py", "position": null, "original_position": 64, "commit_id": "f4d1722a8b51fd6a3a836e04bbe3bbffe63e6516", "original_commit_id": "e409c28352fcb3f8cfa79e114c3798523f3e91f1", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "urCorner being larger than the image should be handled below with the calculations for endX and endY.\n\nMaybe not. Tracts are very wide, but it could happen.\n", "created_at": "2015-06-09T17:39:55Z", "updated_at": "2015-06-09T21:33:25Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/6#discussion_r32041171", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/6", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/32041171"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/6#discussion_r32041171"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/6"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/32041171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/32051508", "pull_request_review_id": null, "id": 32051508, "diff_hunk": "@@ -187,11 +186,25 @@ def getSkyMapCoaddUtil(ctrCoord, width, height, filt, source, mapType, patchType\n     source = \"/lsst7/releaseW13EP\"\n     mapType = \"deepCoadd_skyMap\"\n     patchType = \"deepCoadd\"\n+\n+    #raA = afwGeom.Angle(0.0, afwGeom.degrees)\n+    #decA = afwGeom.Angle(0.01667, afwGeom.degrees)\n+    #ctrCoord = afwCoord.Coord(raA, decA, 2000.0)\n     ctrCoord = afwCoord.Coord(\"1:01:00\", \"00:01:00\", 2000.0)\n-    expo = getSkyMap(ctrCoord, 4000, 300, 'r', source, mapType, patchType)\n+    f = 'r'\n+    w = 4000\n+    h = 300\n+    expo = getSkyMap(ctrCoord, w, h, f, 'pixel', source, mapType, patchType)\n     expo.writeFits(\"getSkyMap.fits\")\n-    expo = getSkyMapGoodPixelCopy(ctrCoord, 4000, 300, 'r', source, mapType, patchType)\n+    expo = getSkyMapGoodPixelCopy(ctrCoord, w, h, f, source, mapType, patchType)\n     expo.writeFits(\"getSkyMapGoodPixelCopy.fits\")\n-    expo = getSkyMapCoaddUtil(ctrCoord, 4000, 300, 'r', source, mapType, patchType)\n+    expo = getSkyMapCoaddUtil(ctrCoord, w, h, f, source, mapType, patchType)\n     expo.writeFits(\"getSkyMapCoaddUtil.fits\")\n \n+    decA = afwGeom.Angle(0.1, afwGeom.degrees)\n+    for rai in range(1, 3595):\n+        raf = float(rai) / 10.0", "path": "examples/skymapStitch.py", "position": null, "original_position": 32, "commit_id": "f4d1722a8b51fd6a3a836e04bbe3bbffe63e6516", "original_commit_id": "e409c28352fcb3f8cfa79e114c3798523f3e91f1", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "I deleted this block of code as it served its purpose of locating a boundary between tracts.\n", "created_at": "2015-06-09T19:11:58Z", "updated_at": "2015-06-09T21:33:25Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/6#discussion_r32051508", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/6", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/32051508"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/6#discussion_r32051508"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/6"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/32051508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/32054831", "pull_request_review_id": null, "id": 32054831, "diff_hunk": "@@ -86,29 +85,82 @@ def getSkyMap(ctrCoord, width, height, filt, source, mapType, patchType):\n             patchImg = patchExposure.getMaskedImage()\n             srcViewImg <<= patchImg\n \n-    # Copy the pixels from the patches into the destination exposures.\n+    # Copy the pixels from the source exposures to the destination exposures.\n     destExposureList = []\n-    for srcExpo in srcExposureList:\n+    for j, srcExpo in enumerate(srcExposureList):\n         sImg = srcExpo.getMaskedImage()\n         srcWcs = srcExpo.getWcs()\n-        dExpo = afwImage.ExposureF(destBBox, srcWcs)\n+        if j == 0:\n+            dBBox = destBBox # destBBox only correct for first image\n+        else:\n+            # Determine the correct BBox (in pixels) for the current srcWcs\n+            llCorner = afwGeom.Point2I(srcWcs.skyToPixel(destCornerCoords[0]))\n+            urCorner = afwGeom.Point2I(srcWcs.skyToPixel(destCornerCoords[2]))\n+            # Handle negative values for dBBox llCorner.\n+            if llCorner.getX() < 0:\n+                llCorner.setX(0)\n+            if llCorner.getY() < 0:\n+                llCorner.setY(0)", "path": "python/lsst/imgserv/skymapStitch.py", "position": null, "original_position": 64, "commit_id": "f4d1722a8b51fd6a3a836e04bbe3bbffe63e6516", "original_commit_id": "e409c28352fcb3f8cfa79e114c3798523f3e91f1", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "Added code to adjust newWidth, newHeight, endX, and endY to keep from running past the end of image.\n", "created_at": "2015-06-09T19:43:16Z", "updated_at": "2015-06-09T21:33:25Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/6#discussion_r32054831", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/6", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/32054831"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/6#discussion_r32054831"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/6"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/32054831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/39896403", "pull_request_review_id": null, "id": 39896403, "diff_hunk": "@@ -196,10 +208,11 @@ def getISkyMapDeepCoaddCutoutPixel():\n     '''\n     return _getISkyMapDeepCoaddCutout(request, 'pixel')\n \n-def _getISkyMapDeepCoaddCutout(request, units):\n+def _getISkyMapDeepCoaddCutout(request, units, source=\"/lsst7/releaseW13EP\"):", "path": "python/lsst/dax/imgserv/imageREST_v0.py", "position": 48, "original_position": 48, "commit_id": "284bce2309b6e6d684105eac4acc199502aa2022", "original_commit_id": "284bce2309b6e6d684105eac4acc199502aa2022", "user": {"login": "timj", "id": 60622, "avatar_url": "https://avatars1.githubusercontent.com/u/60622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timj", "html_url": "https://github.com/timj", "followers_url": "https://api.github.com/users/timj/followers", "following_url": "https://api.github.com/users/timj/following{/other_user}", "gists_url": "https://api.github.com/users/timj/gists{/gist_id}", "starred_url": "https://api.github.com/users/timj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timj/subscriptions", "organizations_url": "https://api.github.com/users/timj/orgs", "repos_url": "https://api.github.com/users/timj/repos", "events_url": "https://api.github.com/users/timj/events{/privacy}", "received_events_url": "https://api.github.com/users/timj/received_events", "type": "User", "site_admin": false}, "body": "should this default be read from a config file?\n", "created_at": "2015-09-18T20:18:54Z", "updated_at": "2015-09-18T20:18:54Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/8#discussion_r39896403", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/8", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/39896403"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/8#discussion_r39896403"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/8"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/39896403/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/39897026", "pull_request_review_id": null, "id": 39897026, "diff_hunk": "@@ -196,10 +208,11 @@ def getISkyMapDeepCoaddCutoutPixel():\n     '''\n     return _getISkyMapDeepCoaddCutout(request, 'pixel')\n \n-def _getISkyMapDeepCoaddCutout(request, units):\n+def _getISkyMapDeepCoaddCutout(request, units, source=\"/lsst7/releaseW13EP\"):", "path": "python/lsst/dax/imgserv/imageREST_v0.py", "position": 48, "original_position": 48, "commit_id": "284bce2309b6e6d684105eac4acc199502aa2022", "original_commit_id": "284bce2309b6e6d684105eac4acc199502aa2022", "user": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "body": "it will be passed as part of URI (very soon), see DM-3571\n", "created_at": "2015-09-18T20:24:52Z", "updated_at": "2015-09-18T20:24:52Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/8#discussion_r39897026", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/8", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/39897026"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/8#discussion_r39897026"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/8"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/39897026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/39897070", "pull_request_review_id": null, "id": 39897070, "diff_hunk": "@@ -196,10 +208,11 @@ def getISkyMapDeepCoaddCutoutPixel():\n     '''\n     return _getISkyMapDeepCoaddCutout(request, 'pixel')\n \n-def _getISkyMapDeepCoaddCutout(request, units):\n+def _getISkyMapDeepCoaddCutout(request, units, source=\"/lsst7/releaseW13EP\"):", "path": "python/lsst/dax/imgserv/imageREST_v0.py", "position": 48, "original_position": 48, "commit_id": "284bce2309b6e6d684105eac4acc199502aa2022", "original_commit_id": "284bce2309b6e6d684105eac4acc199502aa2022", "user": {"login": "timj", "id": 60622, "avatar_url": "https://avatars1.githubusercontent.com/u/60622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timj", "html_url": "https://github.com/timj", "followers_url": "https://api.github.com/users/timj/followers", "following_url": "https://api.github.com/users/timj/following{/other_user}", "gists_url": "https://api.github.com/users/timj/gists{/gist_id}", "starred_url": "https://api.github.com/users/timj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timj/subscriptions", "organizations_url": "https://api.github.com/users/timj/orgs", "repos_url": "https://api.github.com/users/timj/repos", "events_url": "https://api.github.com/users/timj/events{/privacy}", "received_events_url": "https://api.github.com/users/timj/received_events", "type": "User", "site_admin": false}, "body": "and then the default will be removed?\n", "created_at": "2015-09-18T20:25:18Z", "updated_at": "2015-09-18T20:25:18Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/8#discussion_r39897070", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/8", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/39897070"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/8#discussion_r39897070"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/8"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/39897070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/39898728", "pull_request_review_id": null, "id": 39898728, "diff_hunk": "@@ -196,10 +208,11 @@ def getISkyMapDeepCoaddCutoutPixel():\n     '''\n     return _getISkyMapDeepCoaddCutout(request, 'pixel')\n \n-def _getISkyMapDeepCoaddCutout(request, units):\n+def _getISkyMapDeepCoaddCutout(request, units, source=\"/lsst7/releaseW13EP\"):", "path": "python/lsst/dax/imgserv/imageREST_v0.py", "position": 48, "original_position": 48, "commit_id": "284bce2309b6e6d684105eac4acc199502aa2022", "original_commit_id": "284bce2309b6e6d684105eac4acc199502aa2022", "user": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "body": "yes we are not attached to that default in any way :)\n", "created_at": "2015-09-18T20:41:31Z", "updated_at": "2015-09-18T20:41:31Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/8#discussion_r39898728", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/8", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/39898728"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/8#discussion_r39898728"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/8"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/39898728/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40105777", "pull_request_review_id": null, "id": 40105777, "diff_hunk": "@@ -84,11 +77,9 @@ def test_readInFits(self):\n             rootDir = os.path.expanduser(rootDir)\n         if not os.path.exists(rootDir):\n             print \"Data directory {} is required\".format(rootDir)", "path": "tests/metadataFitsTest.py", "position": null, "original_position": 53, "commit_id": "29679f42e40ce296c20ec5ed671e3639a19a2263", "original_commit_id": "ec3a4abec9cb5d6583305ea20fe8ef5ba3130af8", "user": {"login": "timj", "id": 60622, "avatar_url": "https://avatars1.githubusercontent.com/u/60622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timj", "html_url": "https://github.com/timj", "followers_url": "https://api.github.com/users/timj/followers", "following_url": "https://api.github.com/users/timj/following{/other_user}", "gists_url": "https://api.github.com/users/timj/gists{/gist_id}", "starred_url": "https://api.github.com/users/timj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timj/subscriptions", "organizations_url": "https://api.github.com/users/timj/orgs", "repos_url": "https://api.github.com/users/timj/repos", "events_url": "https://api.github.com/users/timj/events{/privacy}", "received_events_url": "https://api.github.com/users/timj/received_events", "type": "User", "site_admin": false}, "body": "Tangential, but can we upgrade to `print_function` please? There are a few places in this package still using old style print.\n", "created_at": "2015-09-22T16:05:04Z", "updated_at": "2015-09-23T15:43:58Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40105777", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40105777"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40105777"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40105777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40108542", "pull_request_review_id": null, "id": 40108542, "diff_hunk": "@@ -320,47 +308,40 @@ def insertMetadataFits(self, metadata):\n                         for v in value:\n                             # scanFile should be skipping line numbers when it sees a tuple,\n                             # so that there are no duplicates.\n-                            self._insertFitsValue(cursor, lastFitsFileId, key, v, num, comment)\n+                            self._insertFitsValue(lastFitsFileId, key, v, num, comment)\n                             num += 1\n                     else:\n-                        self._insertFitsValue(cursor, lastFitsFileId, key, value, lineNum, comment)\n+                        self._insertFitsValue(lastFitsFileId, key, value, lineNum, comment)\n                 for hdu in range(1,hdus+1):\n-                    metadataPosition = MetadataPosition(lastFitsFileId, hdu, cursor, entries)\n+                    metadataPosition = MetadataPosition(lastFitsFileId, hdu, self._conn, entries)\n                     metadataPosition._insert()\n-                cursor.execute(\"COMMIT\")\n-        except MySQLdb.Error as err:\n-            cursor.execute(\"ROLLBACK\")\n+                trans.commit()\n+        except SQLAlchemyError as e:\n+            trans.rollback()\n             self._log.warn( \"ROLLBACK due to ERROR MySQLdb %s --%s\", err, sql)", "path": "python/lsst/dax/imgserv/MetadataFitsDb.py", "position": null, "original_position": 200, "commit_id": "29679f42e40ce296c20ec5ed671e3639a19a2263", "original_commit_id": "ec3a4abec9cb5d6583305ea20fe8ef5ba3130af8", "user": {"login": "andy-slac", "id": 4266950, "avatar_url": "https://avatars1.githubusercontent.com/u/4266950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-slac", "html_url": "https://github.com/andy-slac", "followers_url": "https://api.github.com/users/andy-slac/followers", "following_url": "https://api.github.com/users/andy-slac/following{/other_user}", "gists_url": "https://api.github.com/users/andy-slac/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-slac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-slac/subscriptions", "organizations_url": "https://api.github.com/users/andy-slac/orgs", "repos_url": "https://api.github.com/users/andy-slac/repos", "events_url": "https://api.github.com/users/andy-slac/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-slac/received_events", "type": "User", "site_admin": false}, "body": "`err` should become `e`\n", "created_at": "2015-09-22T16:28:52Z", "updated_at": "2015-09-23T15:43:58Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40108542", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40108542"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40108542"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40108542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40109016", "pull_request_review_id": null, "id": 40109016, "diff_hunk": "@@ -320,47 +308,40 @@ def insertMetadataFits(self, metadata):\n                         for v in value:\n                             # scanFile should be skipping line numbers when it sees a tuple,\n                             # so that there are no duplicates.\n-                            self._insertFitsValue(cursor, lastFitsFileId, key, v, num, comment)\n+                            self._insertFitsValue(lastFitsFileId, key, v, num, comment)\n                             num += 1\n                     else:\n-                        self._insertFitsValue(cursor, lastFitsFileId, key, value, lineNum, comment)\n+                        self._insertFitsValue(lastFitsFileId, key, value, lineNum, comment)\n                 for hdu in range(1,hdus+1):\n-                    metadataPosition = MetadataPosition(lastFitsFileId, hdu, cursor, entries)\n+                    metadataPosition = MetadataPosition(lastFitsFileId, hdu, self._conn, entries)\n                     metadataPosition._insert()\n-                cursor.execute(\"COMMIT\")\n-        except MySQLdb.Error as err:\n-            cursor.execute(\"ROLLBACK\")\n+                trans.commit()", "path": "python/lsst/dax/imgserv/MetadataFitsDb.py", "position": null, "original_position": 197, "commit_id": "29679f42e40ce296c20ec5ed671e3639a19a2263", "original_commit_id": "ec3a4abec9cb5d6583305ea20fe8ef5ba3130af8", "user": {"login": "andy-slac", "id": 4266950, "avatar_url": "https://avatars1.githubusercontent.com/u/4266950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-slac", "html_url": "https://github.com/andy-slac", "followers_url": "https://api.github.com/users/andy-slac/followers", "following_url": "https://api.github.com/users/andy-slac/following{/other_user}", "gists_url": "https://api.github.com/users/andy-slac/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-slac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-slac/subscriptions", "organizations_url": "https://api.github.com/users/andy-slac/orgs", "repos_url": "https://api.github.com/users/andy-slac/repos", "events_url": "https://api.github.com/users/andy-slac/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-slac/received_events", "type": "User", "site_admin": false}, "body": "commit should happen outside `if` (if `len(r)` is >= 1 then you neither commit nor rollback, and I'm not sure what happens in this case).\nI strongly recommend to use context management with transactions, this guarantees that transaction is properly closed (or aborted if exception happens). Check third example from http://docs.sqlalchemy.org/en/rel_1_0/core/connections.html#using-transactions\n", "created_at": "2015-09-22T16:32:54Z", "updated_at": "2015-09-23T15:43:58Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40109016", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40109016"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40109016"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40109016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40109534", "pull_request_review_id": null, "id": 40109534, "diff_hunk": "@@ -405,15 +386,13 @@ def directoryCrawl(rootDir, metaDb):\n def test(rootDir=\"~/test_metadata\"):\n     '''This test only works on specific servers and uses a large dataset.\n     '''\n-    credFile = \"~/.lsst/dbAuth-dbServ.txt\"\n-    creds = readCredentialFile(credFile, log)\n-    dbName = \"{}_fitsTest\".format(creds['user'])\n+    credFile = \"~/.lsst/dbAuth-dbServ.ini\"\n \n     # Destroy existing tables and re-create them\n-    dbDestroyCreate(credFile, dbName, \"DELETE\")\n+    dbName = dbDestroyCreate(credFile, \"DELETE\")", "path": "python/lsst/dax/imgserv/MetadataFitsDb.py", "position": null, "original_position": 262, "commit_id": "29679f42e40ce296c20ec5ed671e3639a19a2263", "original_commit_id": "ec3a4abec9cb5d6583305ea20fe8ef5ba3130af8", "user": {"login": "andy-slac", "id": 4266950, "avatar_url": "https://avatars1.githubusercontent.com/u/4266950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-slac", "html_url": "https://github.com/andy-slac", "followers_url": "https://api.github.com/users/andy-slac/followers", "following_url": "https://api.github.com/users/andy-slac/following{/other_user}", "gists_url": "https://api.github.com/users/andy-slac/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-slac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-slac/subscriptions", "organizations_url": "https://api.github.com/users/andy-slac/orgs", "repos_url": "https://api.github.com/users/andy-slac/repos", "events_url": "https://api.github.com/users/andy-slac/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-slac/received_events", "type": "User", "site_admin": false}, "body": "pylint tells me that `dbDestroyCreate` always returns `None` so assigning it to `dbName` does not make sense, and `dbName` itself is not used anywhere, I think assignment is not needed.\n", "created_at": "2015-09-22T16:37:12Z", "updated_at": "2015-09-23T15:43:58Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40109534", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40109534"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40109534"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40109534/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40109666", "pull_request_review_id": null, "id": 40109666, "diff_hunk": "@@ -32,16 +32,15 @@\n import sys\n import time\n \n+from sqlalchemy.exc import SQLAlchemyError", "path": "python/lsst/dax/imgserv/MetadataFitsDb.py", "position": 9, "original_position": 4, "commit_id": "29679f42e40ce296c20ec5ed671e3639a19a2263", "original_commit_id": "ec3a4abec9cb5d6583305ea20fe8ef5ba3130af8", "user": {"login": "andy-slac", "id": 4266950, "avatar_url": "https://avatars1.githubusercontent.com/u/4266950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-slac", "html_url": "https://github.com/andy-slac", "followers_url": "https://api.github.com/users/andy-slac/followers", "following_url": "https://api.github.com/users/andy-slac/following{/other_user}", "gists_url": "https://api.github.com/users/andy-slac/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-slac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-slac/subscriptions", "organizations_url": "https://api.github.com/users/andy-slac/orgs", "repos_url": "https://api.github.com/users/andy-slac/repos", "events_url": "https://api.github.com/users/andy-slac/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-slac/received_events", "type": "User", "site_admin": false}, "body": "There is `import MySQLdb` above which I think should disappear\n", "created_at": "2015-09-22T16:38:30Z", "updated_at": "2015-09-23T15:43:58Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40109666", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40109666"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40109666"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40109666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40109981", "pull_request_review_id": null, "id": 40109981, "diff_hunk": "@@ -50,13 +49,15 @@ def isDateFormatValid(dt):\n     except ValueError:\n         return False\n \n-def executeInsertList(cursor, table, columnValues, logger=log):\n+def executeInsertList(conn, table, columnValues, logger=log):\n     '''Insert the columnValues into 'table'\n     columnValue is a list of column name and value pairs.\n     Values are sanitized.\n+\n+    Returns lastrowid or None\n     '''\n     if len(columnValues) < 1:\n-        return\n+        return None", "path": "python/lsst/dax/imgserv/MetadataFitsDb.py", "position": 40, "original_position": 35, "commit_id": "29679f42e40ce296c20ec5ed671e3639a19a2263", "original_commit_id": "ec3a4abec9cb5d6583305ea20fe8ef5ba3130af8", "user": {"login": "andy-slac", "id": 4266950, "avatar_url": "https://avatars1.githubusercontent.com/u/4266950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-slac", "html_url": "https://github.com/andy-slac", "followers_url": "https://api.github.com/users/andy-slac/followers", "following_url": "https://api.github.com/users/andy-slac/following{/other_user}", "gists_url": "https://api.github.com/users/andy-slac/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-slac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-slac/subscriptions", "organizations_url": "https://api.github.com/users/andy-slac/orgs", "repos_url": "https://api.github.com/users/andy-slac/repos", "events_url": "https://api.github.com/users/andy-slac/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-slac/received_events", "type": "User", "site_admin": false}, "body": "Technically this is the same thing, but I agree that explicit `None` is better if function is expected to return something.\n", "created_at": "2015-09-22T16:40:58Z", "updated_at": "2015-09-23T15:43:58Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40109981", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40109981"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40109981"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40109981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40110541", "pull_request_review_id": null, "id": 40110541, "diff_hunk": "@@ -83,10 +83,10 @@ def get_metadata(self, path):\n \n \n     def run(self):\n-        credFileName = \"~/.lsst/dbAuth-dbServ.txt\"\n-        creds = readCredentialFile(credFileName, log)\n-        dbName = \"{}_fitsTest\".format(creds['user'])\n-        metaDb = dbOpen(credFileName, dbName)", "path": "python/lsst/dax/imgserv/crawler.py", "position": 27, "original_position": 16, "commit_id": "29679f42e40ce296c20ec5ed671e3639a19a2263", "original_commit_id": "ec3a4abec9cb5d6583305ea20fe8ef5ba3130af8", "user": {"login": "andy-slac", "id": 4266950, "avatar_url": "https://avatars1.githubusercontent.com/u/4266950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-slac", "html_url": "https://github.com/andy-slac", "followers_url": "https://api.github.com/users/andy-slac/followers", "following_url": "https://api.github.com/users/andy-slac/following{/other_user}", "gists_url": "https://api.github.com/users/andy-slac/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-slac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-slac/subscriptions", "organizations_url": "https://api.github.com/users/andy-slac/orgs", "repos_url": "https://api.github.com/users/andy-slac/repos", "events_url": "https://api.github.com/users/andy-slac/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-slac/received_events", "type": "User", "site_admin": false}, "body": "also remove `readCredentialFile` and `dbOpen` from imports\n", "created_at": "2015-09-22T16:45:56Z", "updated_at": "2015-09-23T15:43:58Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40110541", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40110541"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40110541"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40110541/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40110587", "pull_request_review_id": null, "id": 40110587, "diff_hunk": "@@ -83,10 +83,10 @@ def get_metadata(self, path):\n \n \n     def run(self):\n-        credFileName = \"~/.lsst/dbAuth-dbServ.txt\"\n-        creds = readCredentialFile(credFileName, log)\n-        dbName = \"{}_fitsTest\".format(creds['user'])\n-        metaDb = dbOpen(credFileName, dbName)\n+        credFileName = \"~/.lsst/dbAuth-dbServ.ini\"\n+        engine = getEngineFromFile(credFileName)", "path": "python/lsst/dax/imgserv/crawler.py", "position": 29, "original_position": 18, "commit_id": "29679f42e40ce296c20ec5ed671e3639a19a2263", "original_commit_id": "ec3a4abec9cb5d6583305ea20fe8ef5ba3130af8", "user": {"login": "andy-slac", "id": 4266950, "avatar_url": "https://avatars1.githubusercontent.com/u/4266950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-slac", "html_url": "https://github.com/andy-slac", "followers_url": "https://api.github.com/users/andy-slac/followers", "following_url": "https://api.github.com/users/andy-slac/following{/other_user}", "gists_url": "https://api.github.com/users/andy-slac/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-slac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-slac/subscriptions", "organizations_url": "https://api.github.com/users/andy-slac/orgs", "repos_url": "https://api.github.com/users/andy-slac/repos", "events_url": "https://api.github.com/users/andy-slac/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-slac/received_events", "type": "User", "site_admin": false}, "body": "need import for `getEngineFromFile`\n", "created_at": "2015-09-22T16:46:10Z", "updated_at": "2015-09-23T15:43:58Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40110587", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40110587"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40110587"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40110587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40110800", "pull_request_review_id": null, "id": 40110800, "diff_hunk": "@@ -0,0 +1,59 @@\n+\n+\n+schemaToCreate = (\n+\"\"\"\n+CREATE TABLE FitsFiles\n+    -- <descr>Table of basic FITS file information. Name, location,\n+    -- number of HDUs\n+    -- </descr>\n+(\n+    fitsFileId BIGINT       NOT NULL AUTO_INCREMENT,\n+    fileName   VARCHAR(255) NOT NULL,\n+    hduCount   TINYINT      NOT NULL,\n+    PRIMARY KEY(fitsFileId)\n+) ENGINE=InnoDB\n+\"\"\",\n+\n+\"\"\"CREATE TABLE FitsKeyValues\n+    -- <descr>Table of FITS keyword and value pairs. </decr>", "path": "python/lsst/dax/imgserv/fitsMetadataSchema.py", "position": null, "original_position": 18, "commit_id": "29679f42e40ce296c20ec5ed671e3639a19a2263", "original_commit_id": "ec3a4abec9cb5d6583305ea20fe8ef5ba3130af8", "user": {"login": "andy-slac", "id": 4266950, "avatar_url": "https://avatars1.githubusercontent.com/u/4266950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-slac", "html_url": "https://github.com/andy-slac", "followers_url": "https://api.github.com/users/andy-slac/followers", "following_url": "https://api.github.com/users/andy-slac/following{/other_user}", "gists_url": "https://api.github.com/users/andy-slac/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-slac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-slac/subscriptions", "organizations_url": "https://api.github.com/users/andy-slac/orgs", "repos_url": "https://api.github.com/users/andy-slac/repos", "events_url": "https://api.github.com/users/andy-slac/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-slac/received_events", "type": "User", "site_admin": false}, "body": "`</descr>` instead of `</decr>`\n", "created_at": "2015-09-22T16:47:42Z", "updated_at": "2015-09-23T15:43:58Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40110800", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40110800"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40110800"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40110800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40111239", "pull_request_review_id": null, "id": 40111239, "diff_hunk": "@@ -83,10 +83,10 @@ def get_metadata(self, path):\n \n \n     def run(self):\n-        credFileName = \"~/.lsst/dbAuth-dbServ.txt\"\n-        creds = readCredentialFile(credFileName, log)\n-        dbName = \"{}_fitsTest\".format(creds['user'])\n-        metaDb = dbOpen(credFileName, dbName)\n+        credFileName = \"~/.lsst/dbAuth-dbServ.ini\"\n+        engine = getEngineFromFile(credFileName)\n+        dbName = \"{}_fitsTest\".format(engine.url.username)\n+        metaDb = MetadataFitsDb(credFile)", "path": "python/lsst/dax/imgserv/crawler.py", "position": null, "original_position": 20, "commit_id": "29679f42e40ce296c20ec5ed671e3639a19a2263", "original_commit_id": "ec3a4abec9cb5d6583305ea20fe8ef5ba3130af8", "user": {"login": "andy-slac", "id": 4266950, "avatar_url": "https://avatars1.githubusercontent.com/u/4266950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-slac", "html_url": "https://github.com/andy-slac", "followers_url": "https://api.github.com/users/andy-slac/followers", "following_url": "https://api.github.com/users/andy-slac/following{/other_user}", "gists_url": "https://api.github.com/users/andy-slac/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-slac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-slac/subscriptions", "organizations_url": "https://api.github.com/users/andy-slac/orgs", "repos_url": "https://api.github.com/users/andy-slac/repos", "events_url": "https://api.github.com/users/andy-slac/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-slac/received_events", "type": "User", "site_admin": false}, "body": "`credFileName` instead of `credFile`\n", "created_at": "2015-09-22T16:51:21Z", "updated_at": "2015-09-23T15:43:58Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40111239", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40111239"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40111239"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40111239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40111324", "pull_request_review_id": null, "id": 40111324, "diff_hunk": "@@ -0,0 +1,59 @@\n+\n+\n+schemaToCreate = (\n+\"\"\"\n+CREATE TABLE FitsFiles\n+    -- <descr>Table of basic FITS file information. Name, location,\n+    -- number of HDUs\n+    -- </descr>\n+(\n+    fitsFileId BIGINT       NOT NULL AUTO_INCREMENT,\n+    fileName   VARCHAR(255) NOT NULL,\n+    hduCount   TINYINT      NOT NULL,\n+    PRIMARY KEY(fitsFileId)\n+) ENGINE=InnoDB\n+\"\"\",\n+\n+\"\"\"CREATE TABLE FitsKeyValues\n+    -- <descr>Table of FITS keyword and value pairs. </decr>\n+(\n+    fitsFileId  BIGINT      NOT NULL,\n+    fitsKey     VARCHAR(8)  NOT NULL,\n+    hdu         TINYINT     NOT NULL,\n+    stringValue VARCHAR(1000),\n+    intValue    INTEGER,\n+    doubleValue DOUBLE,\n+    lineNum     INTEGER,\n+    comment     VARCHAR(90),\n+    INDEX IDX_fitsKeyVal_fitsFileId(fitsFileId),\n+    INDEX IDX_fitsKeyVal_fitsKey(fitsKey)\n+) ENGINE=InnoDB\n+\"\"\",\n+\n+\"\"\"CREATE TABLE FitsPositions\n+    -- <descr>Table of RA and Dec position and exposure time.</descr>\n+(\n+    fitsFileId BIGINT  NOT NULL,\n+    hdu        TINYINT NOT NULL,\n+    equinox    DOUBLE,\n+    pDec       DOUBLE,\n+    pRa        DOUBLE,\n+    rotAng     DOUBLE,\n+    pDate      TIMESTAMP,\n+    INDEX IDX_fitsPos_fitsFileId(fitsFileId),\n+    INDEX IDX_fitsPos_date(pDate),\n+    INDEX IDX_fitsPos_ra(pRa),\n+    INDEX IDX_fitsPos_dec(pDec)\n+) ENGINE=InnoDB;", "path": "python/lsst/dax/imgserv/fitsMetadataSchema.py", "position": null, "original_position": 47, "commit_id": "29679f42e40ce296c20ec5ed671e3639a19a2263", "original_commit_id": "ec3a4abec9cb5d6583305ea20fe8ef5ba3130af8", "user": {"login": "andy-slac", "id": 4266950, "avatar_url": "https://avatars1.githubusercontent.com/u/4266950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-slac", "html_url": "https://github.com/andy-slac", "followers_url": "https://api.github.com/users/andy-slac/followers", "following_url": "https://api.github.com/users/andy-slac/following{/other_user}", "gists_url": "https://api.github.com/users/andy-slac/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-slac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-slac/subscriptions", "organizations_url": "https://api.github.com/users/andy-slac/orgs", "repos_url": "https://api.github.com/users/andy-slac/repos", "events_url": "https://api.github.com/users/andy-slac/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-slac/received_events", "type": "User", "site_admin": false}, "body": "Semicolon not needed\n", "created_at": "2015-09-22T16:51:56Z", "updated_at": "2015-09-23T15:43:58Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40111324", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40111324"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40111324"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40111324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40111665", "pull_request_review_id": null, "id": 40111665, "diff_hunk": "@@ -55,27 +55,18 @@\n class W13Db:\n     '''Base class for examining DC_W13_Stripe82 data\n     '''\n-    def __init__(self, dbHost, dbPort, dbUser, dbPasswd,\n-                 database, table, columns, dataRoot, logger):\n+    def __init__(self, credFileName, database, table, columns, dataRoot, logger):\n         self._log = logger\n-        self._database = database\n         self._table = table\n         self._columns = columns\n-        self._connect = MySQLdb.connect(host=dbHost, port=dbPort,\n-                                        user=dbUser, passwd=dbPasswd,\n-                                        db=self._database)\n+        self._conn = getEngineFromFile(credFileName, database=database).connect()", "path": "python/lsst/dax/imgserv/locateImage.py", "position": 41, "original_position": 25, "commit_id": "29679f42e40ce296c20ec5ed671e3639a19a2263", "original_commit_id": "ec3a4abec9cb5d6583305ea20fe8ef5ba3130af8", "user": {"login": "andy-slac", "id": 4266950, "avatar_url": "https://avatars1.githubusercontent.com/u/4266950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-slac", "html_url": "https://github.com/andy-slac", "followers_url": "https://api.github.com/users/andy-slac/followers", "following_url": "https://api.github.com/users/andy-slac/following{/other_user}", "gists_url": "https://api.github.com/users/andy-slac/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-slac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-slac/subscriptions", "organizations_url": "https://api.github.com/users/andy-slac/orgs", "repos_url": "https://api.github.com/users/andy-slac/repos", "events_url": "https://api.github.com/users/andy-slac/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-slac/received_events", "type": "User", "site_admin": false}, "body": "Need an import for `getEngineFromFile`\n", "created_at": "2015-09-22T16:54:42Z", "updated_at": "2015-09-23T15:43:58Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40111665", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40111665"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40111665"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40111665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40111791", "pull_request_review_id": null, "id": 40111791, "diff_hunk": "@@ -44,9 +44,9 @@\n import lsst.afw.image as afwImage\n import lsst.daf.base as dafBase\n import lsst.log as log\n+from sqlalchemy.exc import SQLAlchemyError", "path": "python/lsst/dax/imgserv/locateImage.py", "position": null, "original_position": 4, "commit_id": "29679f42e40ce296c20ec5ed671e3639a19a2263", "original_commit_id": "ec3a4abec9cb5d6583305ea20fe8ef5ba3130af8", "user": {"login": "andy-slac", "id": 4266950, "avatar_url": "https://avatars1.githubusercontent.com/u/4266950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-slac", "html_url": "https://github.com/andy-slac", "followers_url": "https://api.github.com/users/andy-slac/followers", "following_url": "https://api.github.com/users/andy-slac/following{/other_user}", "gists_url": "https://api.github.com/users/andy-slac/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-slac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-slac/subscriptions", "organizations_url": "https://api.github.com/users/andy-slac/orgs", "repos_url": "https://api.github.com/users/andy-slac/repos", "events_url": "https://api.github.com/users/andy-slac/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-slac/received_events", "type": "User", "site_admin": false}, "body": "`import MySQLdb` above should be gone\n", "created_at": "2015-09-22T16:55:46Z", "updated_at": "2015-09-23T15:43:58Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40111791", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40111791"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40111791"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40111791/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40112139", "pull_request_review_id": null, "id": 40112139, "diff_hunk": "@@ -250,7 +239,8 @@ class W13DeepCoaddDb(W13Db):\n     '''\n     def __init__(self, dbHost, dbPort, dbUser, dbPasswd, logger=log):", "path": "python/lsst/dax/imgserv/locateImage.py", "position": null, "original_position": 87, "commit_id": "29679f42e40ce296c20ec5ed671e3639a19a2263", "original_commit_id": "ec3a4abec9cb5d6583305ea20fe8ef5ba3130af8", "user": {"login": "andy-slac", "id": 4266950, "avatar_url": "https://avatars1.githubusercontent.com/u/4266950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-slac", "html_url": "https://github.com/andy-slac", "followers_url": "https://api.github.com/users/andy-slac/followers", "following_url": "https://api.github.com/users/andy-slac/following{/other_user}", "gists_url": "https://api.github.com/users/andy-slac/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-slac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-slac/subscriptions", "organizations_url": "https://api.github.com/users/andy-slac/orgs", "repos_url": "https://api.github.com/users/andy-slac/repos", "events_url": "https://api.github.com/users/andy-slac/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-slac/received_events", "type": "User", "site_admin": false}, "body": "replace `__init__` arguments here too\n", "created_at": "2015-09-22T16:58:13Z", "updated_at": "2015-09-23T15:43:58Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40112139", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40112139"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40112139"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40112139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40112786", "pull_request_review_id": null, "id": 40112786, "diff_hunk": "@@ -84,11 +77,9 @@ def test_readInFits(self):\n             rootDir = os.path.expanduser(rootDir)\n         if not os.path.exists(rootDir):\n             print \"Data directory {} is required\".format(rootDir)", "path": "tests/metadataFitsTest.py", "position": null, "original_position": 53, "commit_id": "29679f42e40ce296c20ec5ed671e3639a19a2263", "original_commit_id": "ec3a4abec9cb5d6583305ea20fe8ef5ba3130af8", "user": {"login": "andy-slac", "id": 4266950, "avatar_url": "https://avatars1.githubusercontent.com/u/4266950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-slac", "html_url": "https://github.com/andy-slac", "followers_url": "https://api.github.com/users/andy-slac/followers", "following_url": "https://api.github.com/users/andy-slac/following{/other_user}", "gists_url": "https://api.github.com/users/andy-slac/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-slac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-slac/subscriptions", "organizations_url": "https://api.github.com/users/andy-slac/orgs", "repos_url": "https://api.github.com/users/andy-slac/repos", "events_url": "https://api.github.com/users/andy-slac/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-slac/received_events", "type": "User", "site_admin": false}, "body": "Idd say it should be replaced with `log.error` in this case\n", "created_at": "2015-09-22T17:03:26Z", "updated_at": "2015-09-23T15:43:58Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40112786", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40112786"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40112786"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40112786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40140895", "pull_request_review_id": null, "id": 40140895, "diff_hunk": "@@ -0,0 +1,59 @@\n+\n+", "path": "python/lsst/dax/imgserv/fitsMetadataSchema.py", "position": 23, "original_position": 2, "commit_id": "29679f42e40ce296c20ec5ed671e3639a19a2263", "original_commit_id": "ea9a49889d2c98eb38dbb0e3b93001850b8264e5", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "No copyright info needed?\n", "created_at": "2015-09-22T20:39:34Z", "updated_at": "2015-09-23T15:43:58Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40140895", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40140895"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40140895"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40140895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40145836", "pull_request_review_id": null, "id": 40145836, "diff_hunk": "@@ -0,0 +1,59 @@\n+\n+", "path": "python/lsst/dax/imgserv/fitsMetadataSchema.py", "position": 23, "original_position": 2, "commit_id": "29679f42e40ce296c20ec5ed671e3639a19a2263", "original_commit_id": "ea9a49889d2c98eb38dbb0e3b93001850b8264e5", "user": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "body": "I just renamed this file and stuck the schema into a list. It wasn't there before :). I'll add it.\n", "created_at": "2015-09-22T21:19:15Z", "updated_at": "2015-09-23T15:43:58Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40145836", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40145836"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40145836"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40145836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40152045", "pull_request_review_id": null, "id": 40152045, "diff_hunk": "@@ -21,15 +21,16 @@\n # see <http://www.lsstcorp.org/LegalNotices/>.\n \n \"\"\"\n-This is a program for running RESTful LSST Image Cutout Server (only). \n-Use it for tests. It is really meant to run as part of the central \n+This is a program for running RESTful LSST Image Cutout Server (only).\n+Use it for tests. It is really meant to run as part of the central\n Web Service, e.g., through webserv/bin/server.py\n \n @author  Jacek Becla, SLAC\n \"\"\"\n \n+import sys\n from flask import Flask\n-from lsst.imgserv import imageREST_v0\n+from lsst.dax.imgserv import imageREST_v0", "path": "bin/imageServer.py", "position": 16, "original_position": 16, "commit_id": "29679f42e40ce296c20ec5ed671e3639a19a2263", "original_commit_id": "4315033d784f2abdb784cef1a32293a798ffd2c4", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "Was this not already fixed and on the master?\n", "created_at": "2015-09-22T22:20:28Z", "updated_at": "2015-09-23T15:43:58Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40152045", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40152045"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40152045"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40152045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40156987", "pull_request_review_id": null, "id": 40156987, "diff_hunk": "@@ -294,73 +284,58 @@ def insertMetadataFits(self, metadata):\n         entries  = metadata._entries\n         lastFitsFileId = -1\n         # Check if the file is in the database, and if not add it\n-        cursor = self._connect.cursor()\n         try:\n-            sql = (\"SELECT 1 FROM FitsFiles WHERE \"\n-                   \"fileName = %s\")\n-            self._log.debug(sql, str(fileName))\n-            cursor.execute(sql, fileName)\n-            r = cursor.fetchall()\n-            # Nothing found, so it needs to be added.\n-            if len(r) < 1:\n-                #If this fails for any reason, we do not want the database altered.\n-                cursor.execute(\"START TRANSACTION\")\n-                cursor.execute(\"SET autocommit = 0\")\n-                # Insert the file into the file table.\n-                colVal = [(\"fileName\", fileName), (\"hduCount\", hdus)]\n-                executeInsertList(cursor, \"FitsFiles\", colVal, self._log)\n-                lastFitsFileId = cursor.lastrowid\n-                for key, entry in entries.iteritems():\n-                    value   = entry[0]\n-                    lineNum = entry[1]\n-                    comment = entry[2]\n-                    # Put in one entry for each element of the tuple\n-                    if isinstance(value, tuple):\n-                        num = lineNum\n-                        for v in value:\n-                            # scanFile should be skipping line numbers when it sees a tuple,\n-                            # so that there are no duplicates.\n-                            self._insertFitsValue(cursor, lastFitsFileId, key, v, num, comment)\n-                            num += 1\n-                    else:\n-                        self._insertFitsValue(cursor, lastFitsFileId, key, value, lineNum, comment)\n-                for hdu in range(1,hdus+1):\n-                    metadataPosition = MetadataPosition(lastFitsFileId, hdu, cursor, entries)\n-                    metadataPosition._insert()\n-                cursor.execute(\"COMMIT\")\n-        except MySQLdb.Error as err:\n-            cursor.execute(\"ROLLBACK\")\n-            self._log.warn( \"ROLLBACK due to ERROR MySQLdb %s --%s\", err, sql)\n-            quit() # TODO delete this line, for now it is good to stop and examine these\n-        cursor.close()\n+            with self._conn.begin() as trans:\n+                sql = (\"SELECT 1 FROM FitsFiles WHERE \"\n+                       \"fileName = %s\")", "path": "python/lsst/dax/imgserv/MetadataFitsDb.py", "position": 203, "original_position": 203, "commit_id": "29679f42e40ce296c20ec5ed671e3639a19a2263", "original_commit_id": "4315033d784f2abdb784cef1a32293a798ffd2c4", "user": {"login": "andy-slac", "id": 4266950, "avatar_url": "https://avatars1.githubusercontent.com/u/4266950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-slac", "html_url": "https://github.com/andy-slac", "followers_url": "https://api.github.com/users/andy-slac/followers", "following_url": "https://api.github.com/users/andy-slac/following{/other_user}", "gists_url": "https://api.github.com/users/andy-slac/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-slac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-slac/subscriptions", "organizations_url": "https://api.github.com/users/andy-slac/orgs", "repos_url": "https://api.github.com/users/andy-slac/repos", "events_url": "https://api.github.com/users/andy-slac/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-slac/received_events", "type": "User", "site_admin": false}, "body": "Remove parens around string, should fit OK into one line\n", "created_at": "2015-09-22T23:22:28Z", "updated_at": "2015-09-23T15:43:58Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40156987", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40156987"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40156987"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40156987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40157056", "pull_request_review_id": null, "id": 40157056, "diff_hunk": "@@ -294,73 +284,58 @@ def insertMetadataFits(self, metadata):\n         entries  = metadata._entries\n         lastFitsFileId = -1\n         # Check if the file is in the database, and if not add it\n-        cursor = self._connect.cursor()\n         try:\n-            sql = (\"SELECT 1 FROM FitsFiles WHERE \"\n-                   \"fileName = %s\")\n-            self._log.debug(sql, str(fileName))\n-            cursor.execute(sql, fileName)\n-            r = cursor.fetchall()\n-            # Nothing found, so it needs to be added.\n-            if len(r) < 1:\n-                #If this fails for any reason, we do not want the database altered.\n-                cursor.execute(\"START TRANSACTION\")\n-                cursor.execute(\"SET autocommit = 0\")\n-                # Insert the file into the file table.\n-                colVal = [(\"fileName\", fileName), (\"hduCount\", hdus)]\n-                executeInsertList(cursor, \"FitsFiles\", colVal, self._log)\n-                lastFitsFileId = cursor.lastrowid\n-                for key, entry in entries.iteritems():\n-                    value   = entry[0]\n-                    lineNum = entry[1]\n-                    comment = entry[2]\n-                    # Put in one entry for each element of the tuple\n-                    if isinstance(value, tuple):\n-                        num = lineNum\n-                        for v in value:\n-                            # scanFile should be skipping line numbers when it sees a tuple,\n-                            # so that there are no duplicates.\n-                            self._insertFitsValue(cursor, lastFitsFileId, key, v, num, comment)\n-                            num += 1\n-                    else:\n-                        self._insertFitsValue(cursor, lastFitsFileId, key, value, lineNum, comment)\n-                for hdu in range(1,hdus+1):\n-                    metadataPosition = MetadataPosition(lastFitsFileId, hdu, cursor, entries)\n-                    metadataPosition._insert()\n-                cursor.execute(\"COMMIT\")\n-        except MySQLdb.Error as err:\n-            cursor.execute(\"ROLLBACK\")\n-            self._log.warn( \"ROLLBACK due to ERROR MySQLdb %s --%s\", err, sql)\n-            quit() # TODO delete this line, for now it is good to stop and examine these\n-        cursor.close()\n+            with self._conn.begin() as trans:\n+                sql = (\"SELECT 1 FROM FitsFiles WHERE \"\n+                       \"fileName = %s\")\n+                self._log.debug(sql, str(fileName))", "path": "python/lsst/dax/imgserv/MetadataFitsDb.py", "position": 204, "original_position": 204, "commit_id": "29679f42e40ce296c20ec5ed671e3639a19a2263", "original_commit_id": "4315033d784f2abdb784cef1a32293a798ffd2c4", "user": {"login": "andy-slac", "id": 4266950, "avatar_url": "https://avatars1.githubusercontent.com/u/4266950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-slac", "html_url": "https://github.com/andy-slac", "followers_url": "https://api.github.com/users/andy-slac/followers", "following_url": "https://api.github.com/users/andy-slac/following{/other_user}", "gists_url": "https://api.github.com/users/andy-slac/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-slac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-slac/subscriptions", "organizations_url": "https://api.github.com/users/andy-slac/orgs", "repos_url": "https://api.github.com/users/andy-slac/repos", "events_url": "https://api.github.com/users/andy-slac/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-slac/received_events", "type": "User", "site_admin": false}, "body": "I'm not sure why `str()` is needed here\n", "created_at": "2015-09-22T23:23:19Z", "updated_at": "2015-09-23T15:43:58Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40157056", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40157056"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40157056"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40157056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40157239", "pull_request_review_id": null, "id": 40157239, "diff_hunk": "@@ -294,73 +284,58 @@ def insertMetadataFits(self, metadata):\n         entries  = metadata._entries\n         lastFitsFileId = -1\n         # Check if the file is in the database, and if not add it\n-        cursor = self._connect.cursor()\n         try:\n-            sql = (\"SELECT 1 FROM FitsFiles WHERE \"\n-                   \"fileName = %s\")\n-            self._log.debug(sql, str(fileName))\n-            cursor.execute(sql, fileName)\n-            r = cursor.fetchall()\n-            # Nothing found, so it needs to be added.\n-            if len(r) < 1:\n-                #If this fails for any reason, we do not want the database altered.\n-                cursor.execute(\"START TRANSACTION\")\n-                cursor.execute(\"SET autocommit = 0\")\n-                # Insert the file into the file table.\n-                colVal = [(\"fileName\", fileName), (\"hduCount\", hdus)]\n-                executeInsertList(cursor, \"FitsFiles\", colVal, self._log)\n-                lastFitsFileId = cursor.lastrowid\n-                for key, entry in entries.iteritems():\n-                    value   = entry[0]\n-                    lineNum = entry[1]\n-                    comment = entry[2]\n-                    # Put in one entry for each element of the tuple\n-                    if isinstance(value, tuple):\n-                        num = lineNum\n-                        for v in value:\n-                            # scanFile should be skipping line numbers when it sees a tuple,\n-                            # so that there are no duplicates.\n-                            self._insertFitsValue(cursor, lastFitsFileId, key, v, num, comment)\n-                            num += 1\n-                    else:\n-                        self._insertFitsValue(cursor, lastFitsFileId, key, value, lineNum, comment)\n-                for hdu in range(1,hdus+1):\n-                    metadataPosition = MetadataPosition(lastFitsFileId, hdu, cursor, entries)\n-                    metadataPosition._insert()\n-                cursor.execute(\"COMMIT\")\n-        except MySQLdb.Error as err:\n-            cursor.execute(\"ROLLBACK\")\n-            self._log.warn( \"ROLLBACK due to ERROR MySQLdb %s --%s\", err, sql)\n-            quit() # TODO delete this line, for now it is good to stop and examine these\n-        cursor.close()\n+            with self._conn.begin() as trans:\n+                sql = (\"SELECT 1 FROM FitsFiles WHERE \"\n+                       \"fileName = %s\")\n+                self._log.debug(sql, str(fileName))\n+                results = self._conn.execute(sql, fileName)\n+                r = results.fetchall()\n+                # Nothing found, so it needs to be added.\n+                if len(r) < 1:\n+                    #If this fails for any reason, we do not want the database altered.\n+                    # Insert the file into the file table.\n+                    colVal = [(\"fileName\", fileName), (\"hduCount\", hdus)]\n+                    lastFitsFileId = executeInsertList(self._conn, \"FitsFiles\", colVal, self._log)\n+                    for key, entry in entries.iteritems():\n+                        value   = entry[0]\n+                        lineNum = entry[1]\n+                        comment = entry[2]", "path": "python/lsst/dax/imgserv/MetadataFitsDb.py", "position": 216, "original_position": 216, "commit_id": "29679f42e40ce296c20ec5ed671e3639a19a2263", "original_commit_id": "4315033d784f2abdb784cef1a32293a798ffd2c4", "user": {"login": "andy-slac", "id": 4266950, "avatar_url": "https://avatars1.githubusercontent.com/u/4266950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-slac", "html_url": "https://github.com/andy-slac", "followers_url": "https://api.github.com/users/andy-slac/followers", "following_url": "https://api.github.com/users/andy-slac/following{/other_user}", "gists_url": "https://api.github.com/users/andy-slac/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-slac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-slac/subscriptions", "organizations_url": "https://api.github.com/users/andy-slac/orgs", "repos_url": "https://api.github.com/users/andy-slac/repos", "events_url": "https://api.github.com/users/andy-slac/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-slac/received_events", "type": "User", "site_admin": false}, "body": "I think more Pythonic is `value, lineNum, comment = entry` (or `entry[:3]` if entry can be longer)\n", "created_at": "2015-09-22T23:25:33Z", "updated_at": "2015-09-23T15:43:58Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40157239", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40157239"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40157239"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40157239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40157564", "pull_request_review_id": null, "id": 40157564, "diff_hunk": "@@ -0,0 +1,59 @@\n+\n+", "path": "python/lsst/dax/imgserv/fitsMetadataSchema.py", "position": 23, "original_position": 2, "commit_id": "29679f42e40ce296c20ec5ed671e3639a19a2263", "original_commit_id": "ea9a49889d2c98eb38dbb0e3b93001850b8264e5", "user": {"login": "andy-slac", "id": 4266950, "avatar_url": "https://avatars1.githubusercontent.com/u/4266950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-slac", "html_url": "https://github.com/andy-slac", "followers_url": "https://api.github.com/users/andy-slac/followers", "following_url": "https://api.github.com/users/andy-slac/following{/other_user}", "gists_url": "https://api.github.com/users/andy-slac/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-slac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-slac/subscriptions", "organizations_url": "https://api.github.com/users/andy-slac/orgs", "repos_url": "https://api.github.com/users/andy-slac/repos", "events_url": "https://api.github.com/users/andy-slac/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-slac/received_events", "type": "User", "site_admin": false}, "body": "I'm really tired of the copyrights (and I'm definitely not reviewing them). I remember someone mentioning (at Bremerton?) that there should be enough to have one `COPYRIGHT` file at the top level, or was I dreaming?\n", "created_at": "2015-09-22T23:30:02Z", "updated_at": "2015-09-23T15:43:58Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40157564", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40157564"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40157564"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40157564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40157851", "pull_request_review_id": null, "id": 40157851, "diff_hunk": "@@ -0,0 +1,59 @@\n+\n+", "path": "python/lsst/dax/imgserv/fitsMetadataSchema.py", "position": 23, "original_position": 2, "commit_id": "29679f42e40ce296c20ec5ed671e3639a19a2263", "original_commit_id": "ea9a49889d2c98eb38dbb0e3b93001850b8264e5", "user": {"login": "timj", "id": 60622, "avatar_url": "https://avatars1.githubusercontent.com/u/60622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timj", "html_url": "https://github.com/timj", "followers_url": "https://api.github.com/users/timj/followers", "following_url": "https://api.github.com/users/timj/following{/other_user}", "gists_url": "https://api.github.com/users/timj/gists{/gist_id}", "starred_url": "https://api.github.com/users/timj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timj/subscriptions", "organizations_url": "https://api.github.com/users/timj/orgs", "repos_url": "https://api.github.com/users/timj/repos", "events_url": "https://api.github.com/users/timj/events{/privacy}", "received_events_url": "https://api.github.com/users/timj/received_events", "type": "User", "site_admin": false}, "body": "You were not dreaming: https://jira.lsstcorp.org/browse/RFC-45\n", "created_at": "2015-09-22T23:33:24Z", "updated_at": "2015-09-23T15:43:58Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40157851", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40157851"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40157851"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40157851/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40158800", "pull_request_review_id": null, "id": 40158800, "diff_hunk": "@@ -0,0 +1,59 @@\n+\n+", "path": "python/lsst/dax/imgserv/fitsMetadataSchema.py", "position": 23, "original_position": 2, "commit_id": "29679f42e40ce296c20ec5ed671e3639a19a2263", "original_commit_id": "ea9a49889d2c98eb38dbb0e3b93001850b8264e5", "user": {"login": "andy-slac", "id": 4266950, "avatar_url": "https://avatars1.githubusercontent.com/u/4266950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andy-slac", "html_url": "https://github.com/andy-slac", "followers_url": "https://api.github.com/users/andy-slac/followers", "following_url": "https://api.github.com/users/andy-slac/following{/other_user}", "gists_url": "https://api.github.com/users/andy-slac/gists{/gist_id}", "starred_url": "https://api.github.com/users/andy-slac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andy-slac/subscriptions", "organizations_url": "https://api.github.com/users/andy-slac/orgs", "repos_url": "https://api.github.com/users/andy-slac/repos", "events_url": "https://api.github.com/users/andy-slac/events{/privacy}", "received_events_url": "https://api.github.com/users/andy-slac/received_events", "type": "User", "site_admin": false}, "body": "Thanks @timj, it looks like we need a ticket to purge all copyrights from every file. I can review that :smile: \n", "created_at": "2015-09-22T23:47:02Z", "updated_at": "2015-09-23T15:43:58Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40158800", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40158800"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40158800"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40158800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40172637", "pull_request_review_id": null, "id": 40172637, "diff_hunk": "@@ -21,15 +21,16 @@\n # see <http://www.lsstcorp.org/LegalNotices/>.\n \n \"\"\"\n-This is a program for running RESTful LSST Image Cutout Server (only). \n-Use it for tests. It is really meant to run as part of the central \n+This is a program for running RESTful LSST Image Cutout Server (only).\n+Use it for tests. It is really meant to run as part of the central\n Web Service, e.g., through webserv/bin/server.py\n \n @author  Jacek Becla, SLAC\n \"\"\"\n \n+import sys\n from flask import Flask\n-from lsst.imgserv import imageREST_v0\n+from lsst.dax.imgserv import imageREST_v0", "path": "bin/imageServer.py", "position": 16, "original_position": 16, "commit_id": "29679f42e40ce296c20ec5ed671e3639a19a2263", "original_commit_id": "4315033d784f2abdb784cef1a32293a798ffd2c4", "user": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "body": "Notice that it is in dax_imgserv/bin/imageServer.py, it is not the same as dax_webserv/bin/server.py. We have \"servers\" for each module to test things locally. I think that one never got fixed.\n", "created_at": "2015-09-23T05:50:07Z", "updated_at": "2015-09-23T15:43:58Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40172637", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40172637"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40172637"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40172637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40172999", "pull_request_review_id": null, "id": 40172999, "diff_hunk": "@@ -294,73 +284,58 @@ def insertMetadataFits(self, metadata):\n         entries  = metadata._entries\n         lastFitsFileId = -1\n         # Check if the file is in the database, and if not add it\n-        cursor = self._connect.cursor()\n         try:\n-            sql = (\"SELECT 1 FROM FitsFiles WHERE \"\n-                   \"fileName = %s\")\n-            self._log.debug(sql, str(fileName))\n-            cursor.execute(sql, fileName)\n-            r = cursor.fetchall()\n-            # Nothing found, so it needs to be added.\n-            if len(r) < 1:\n-                #If this fails for any reason, we do not want the database altered.\n-                cursor.execute(\"START TRANSACTION\")\n-                cursor.execute(\"SET autocommit = 0\")\n-                # Insert the file into the file table.\n-                colVal = [(\"fileName\", fileName), (\"hduCount\", hdus)]\n-                executeInsertList(cursor, \"FitsFiles\", colVal, self._log)\n-                lastFitsFileId = cursor.lastrowid\n-                for key, entry in entries.iteritems():\n-                    value   = entry[0]\n-                    lineNum = entry[1]\n-                    comment = entry[2]\n-                    # Put in one entry for each element of the tuple\n-                    if isinstance(value, tuple):\n-                        num = lineNum\n-                        for v in value:\n-                            # scanFile should be skipping line numbers when it sees a tuple,\n-                            # so that there are no duplicates.\n-                            self._insertFitsValue(cursor, lastFitsFileId, key, v, num, comment)\n-                            num += 1\n-                    else:\n-                        self._insertFitsValue(cursor, lastFitsFileId, key, value, lineNum, comment)\n-                for hdu in range(1,hdus+1):\n-                    metadataPosition = MetadataPosition(lastFitsFileId, hdu, cursor, entries)\n-                    metadataPosition._insert()\n-                cursor.execute(\"COMMIT\")\n-        except MySQLdb.Error as err:\n-            cursor.execute(\"ROLLBACK\")\n-            self._log.warn( \"ROLLBACK due to ERROR MySQLdb %s --%s\", err, sql)\n-            quit() # TODO delete this line, for now it is good to stop and examine these\n-        cursor.close()\n+            with self._conn.begin() as trans:\n+                sql = (\"SELECT 1 FROM FitsFiles WHERE \"\n+                       \"fileName = %s\")\n+                self._log.debug(sql, str(fileName))", "path": "python/lsst/dax/imgserv/MetadataFitsDb.py", "position": 204, "original_position": 204, "commit_id": "29679f42e40ce296c20ec5ed671e3639a19a2263", "original_commit_id": "4315033d784f2abdb784cef1a32293a798ffd2c4", "user": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "body": "I am not sure either, not my code :). I removed it\n", "created_at": "2015-09-23T06:01:40Z", "updated_at": "2015-09-23T15:43:58Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40172999", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40172999"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/9#discussion_r40172999"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/9"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40172999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40747362", "pull_request_review_id": null, "id": 40747362, "diff_hunk": "@@ -190,37 +200,58 @@ def _getICutout(request, W13db, units):\n     os.removedirs(tmpPath)\n     return resp\n \n+\n # this will handle something like:\n # GET /image/v0/skymap/deepCoadd/cutout?ra=19.36995&dec=-0.3146&filter=r&width=115&height=235\n @imageREST.route('/skymap/deepCoadd/cutout', methods=['GET'])\n def getISkyMapDeepCoaddCutout():\n     '''Get a stitched together deepCoadd image from /lsst/releaseW13EP deepCoadd_skyMap\n     where width and height are in arcseconds.\n+    :query float ra: ra\n+    :query float dec: dec\n+    :query string filter: Filter\n+    :query integer width: Width\n+    :query integer height: Height\n+    :query string source: Optional filesystem path to provide imgserv\n     '''\n     return _getISkyMapDeepCoaddCutout(request, 'arcsecond')\n \n+\n # this will handle something like:\n # GET /image/v0/skymap/deepCoadd/cutoutPixel?ra=19.36995&dec=-0.3146&filter=r&width=115&height=235\n @imageREST.route('/skymap/deepCoadd/cutoutPixel', methods=['GET'])\n def getISkyMapDeepCoaddCutoutPixel():\n     '''Get a stitched together deepCoadd image from /lsst/releaseW13EP deepCoadd_skyMap\n     where width and height are in pixels.\n+    :query float ra: ra\n+    :query float dec: dec\n+    :query string filter: Filter\n+    :query integer width: Width\n+    :query integer height: Height\n+    :query string source: Optional filesystem path to provide imgserv\n     '''\n     return _getISkyMapDeepCoaddCutout(request, 'pixel')\n \n-def _getISkyMapDeepCoaddCutout(request, units, source=\"/lsst7/releaseW13EP\"):\n+\n+def _getISkyMapDeepCoaddCutout(_request, units):\n     '''Get a stitched together deepCoadd image from /lsst/releaseW13EP deepCoadd_skyMap\n     '''\n-    # Following is temporary for pipeline tests TODO DM-3571\n-    #source = \"/raid/lauren/rerun/LSST/STRIPE82L/v2/\"\n+    source = _request.args.get(\"source\", None)\n+    if not source:\n+        current_app.config.get(\"dax.imgserv.default_source\", \"/lsst7/releaseW13EP\")", "path": "python/lsst/dax/imgserv/imageREST_v0.py", "position": null, "original_position": 208, "commit_id": "a5b47e580fa54410f7a576bf0a1d196831de947e", "original_commit_id": "c374fa50a425f7a80e7c3e4abb6f093263e9e6ac", "user": {"login": "jbecla", "id": 626419, "avatar_url": "https://avatars2.githubusercontent.com/u/626419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbecla", "html_url": "https://github.com/jbecla", "followers_url": "https://api.github.com/users/jbecla/followers", "following_url": "https://api.github.com/users/jbecla/following{/other_user}", "gists_url": "https://api.github.com/users/jbecla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbecla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbecla/subscriptions", "organizations_url": "https://api.github.com/users/jbecla/orgs", "repos_url": "https://api.github.com/users/jbecla/repos", "events_url": "https://api.github.com/users/jbecla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbecla/received_events", "type": "User", "site_admin": false}, "body": "it'd be good to have exactly one place for defining the default.\n", "created_at": "2015-09-30T00:23:18Z", "updated_at": "2015-09-30T19:14:15Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/10#discussion_r40747362", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/10", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40747362"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/10#discussion_r40747362"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/10"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/40747362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/89024904", "pull_request_review_id": 9577815, "id": 89024904, "diff_hunk": "@@ -48,7 +48,7 @@ def _getSubImg(imgSrc, box):\n \n def stitchTestDeepCoadd():\n     w13Db = dbOpen(\"~/.mysqlAuthLSST.lsst10\", W13DeepCoaddDb)\n-    fullImg, metaFull = w13Db.getImageFullWithMetadata(19.36995, -0.3146)\n+    fullImg, metaFull = w13Db.getImageFullWithMetadata(19.36995, -0.3146, \"\")", "path": "examples/imageStitchExample.py", "position": null, "original_position": 5, "commit_id": "fbf2bb2e23385bde307bf9c81391e52ced743a6f", "original_commit_id": "4582393a87f26514722b6d42f8cd23d49dff39c3", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "I would rather see `getImageFullWithMetaData(19.36995, -0.3146)` which would imply `def getImageFullWithMetaData(self, ra, dec, filterName=None)` in `locateImage.py`, but that might trigger a few more changes for consistency.", "created_at": "2016-11-22T01:07:28Z", "updated_at": "2016-12-01T18:19:31Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/13#discussion_r89024904", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/13", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/89024904"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/13#discussion_r89024904"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/13"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/89024904/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/89025049", "pull_request_review_id": 9577815, "id": 89025049, "diff_hunk": "@@ -136,6 +191,7 @@ def _getIFull(_request, W13db):\n     raIn = _request.args.get('ra')\n     decIn = _request.args.get('dec')\n     filt = _request.args.get('filter')\n+    filt = filt.encode('ascii')", "path": "python/lsst/dax/imgserv/imageREST_v0.py", "position": 97, "original_position": 97, "commit_id": "fbf2bb2e23385bde307bf9c81391e52ced743a6f", "original_commit_id": "4582393a87f26514722b6d42f8cd23d49dff39c3", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "Did you have issues that necessitates this?", "created_at": "2016-11-22T01:08:49Z", "updated_at": "2016-12-01T18:19:31Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/13#discussion_r89025049", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/13", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/89025049"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/13#discussion_r89025049"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/13"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/89025049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/89025125", "pull_request_review_id": 9577815, "id": 89025125, "diff_hunk": "@@ -183,6 +291,8 @@ def _getICutout(_request, W13db, units):\n         return _error(ValueError.__name__, msg, BAD_REQUEST)\n     log.info(\"raw cutout pixel ra={} dec={} filt={} width={} height={}\".format(\n             ra, dec, filt, width, height))\n+    print(\"raw cutout pixel ra={} dec={} filt={} width={} height={}\".format(", "path": "python/lsst/dax/imgserv/imageREST_v0.py", "position": null, "original_position": 180, "commit_id": "fbf2bb2e23385bde307bf9c81391e52ced743a6f", "original_commit_id": "4582393a87f26514722b6d42f8cd23d49dff39c3", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "Did this leak in?", "created_at": "2016-11-22T01:09:39Z", "updated_at": "2016-12-01T18:19:31Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/13#discussion_r89025125", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/13", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/89025125"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/13#discussion_r89025125"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/13"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/89025125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/89025281", "pull_request_review_id": 9577815, "id": 89025281, "diff_hunk": "@@ -222,14 +279,62 @@ def _getMetadata(self, butler, qResults):\n         '''\n         for ln in qResults:\n             run, camcol, field, filterName = ln[2:6]\n-            return butler.get(\"fpC_md\", run=run, camcol=camcol,\n+            return butler.get(self.getMdPolicy(), run=run, camcol=camcol,\n                               field=field, filter=filterName)\n \n+\n+class W13CalexpDb(W13RawDb):\n+    '''This class is used to connect to the DC_W13_Stripe82 Calibration Exposures.\n+    Calibration Exposures look to be very similar to retrieving Raw exposres. Once \n+    this is shown to work, W13CalebDb and W13RawDb should be refactored to have a\n+    commnon base class and add a field for policy \"fpC\" or \"calexp\".\n+    ----------\n+    Repository path: /datasets/sdss/preprocessed/dr7/sdss_stripe82_00/calexps/\n+    Butler keys: run, camcol, field, filter\n+    MySQL table: DC_W13_Stripe82.Science_Ccd_Exposure\n+    Table columns: run, camcol, field, filterName\n+    butler.get(\"calexp\", run=run, camcol=camcol, field=field, filter=filterName)\n+    '''\n+    def __init__(self, credFileName, logger=log):\n+        # @todo The names needed for the data butler need to come from a central location.\n+        W13Db.__init__(self,\n+                       credFileName,\n+                       database=\"DC_W13_Stripe82\",\n+                       table=\"Science_Ccd_Exposure\",\n+                       columns=[\"run\", \"camcol\", \"field\", \"filterName\"],\n+                       dataRoot=\"/datasets/sdss/preprocessed/dr7/sdss_stripe82_00/calexps/\",\n+                       butlerPolicy=\"calexp\",\n+                       butlerKeys=[\"run\", \"camcol\", \"field\", \"filter\"],\n+                       logger=logger)\n+\n+    def _getImageButler(self, qResults):\n+        '''Retrieve the image and butler for this image type using the query results in 'qResults'\n+        The retrieval process varies for different image types.\n+        '''\n+        # This will return on the first result.\n+        for ln in qResults:\n+            run, camcol, field, filterName = ln[2:6]\n+            butler = lsst.daf.persistence.Butler(self._dataRoot)\n+            img = butler.get(self._butlerPolicy, run=run, camcol=camcol,\n+                             field=field, filter=filterName)\n+            return img, butler\n+        return None, None\n+\n+    def _getMetadata(self, butler, qResults):\n+        '''Return the metadata for the query results in qResults and a butler.\n+        '''\n+        for ln in qResults:\n+            run, camcol, field, filterName = ln[2:6]\n+            return butler.get(self.getMdPolicy(), run=run, camcol=camcol,\n+                              field=field, filter=filterName)\n+\n+\n+\n class W13DeepCoaddDb(W13Db):\n     '''This class is used to connect to the DC_W13_Stripe82 Coadd database.\n     Coadd images\n     ------------\n-    Repository path: /lsst7/releaseW13EP\n+    Repository path: \"/datasets/sdss/preprocessed/dr7/sdss_stripe82_00/coadd/\"", "path": "python/lsst/dax/imgserv/locateImage.py", "position": null, "original_position": 263, "commit_id": "fbf2bb2e23385bde307bf9c81391e52ced743a6f", "original_commit_id": "4582393a87f26514722b6d42f8cd23d49dff39c3", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "Should we normalize path? e.g. `/datasets/sdss/preprocessed/dr7/sdss_stripe82_00/coadd`", "created_at": "2016-11-22T01:11:06Z", "updated_at": "2016-12-01T18:19:31Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/13#discussion_r89025281", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/13", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/89025281"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/13#discussion_r89025281"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/13"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/89025281/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/90320529", "pull_request_review_id": 10841664, "id": 90320529, "diff_hunk": "@@ -136,6 +191,7 @@ def _getIFull(_request, W13db):\n     raIn = _request.args.get('ra')\n     decIn = _request.args.get('dec')\n     filt = _request.args.get('filter')\n+    filt = filt.encode('ascii')", "path": "python/lsst/dax/imgserv/imageREST_v0.py", "position": 97, "original_position": 97, "commit_id": "fbf2bb2e23385bde307bf9c81391e52ced743a6f", "original_commit_id": "4582393a87f26514722b6d42f8cd23d49dff39c3", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "I think the butler did not like the unicode character.", "created_at": "2016-11-30T20:28:24Z", "updated_at": "2016-12-01T18:19:31Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/13#discussion_r90320529", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/13", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/90320529"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/13#discussion_r90320529"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/13"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/90320529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 89025049}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/90322011", "pull_request_review_id": 10843101, "id": 90322011, "diff_hunk": "@@ -183,6 +291,8 @@ def _getICutout(_request, W13db, units):\n         return _error(ValueError.__name__, msg, BAD_REQUEST)\n     log.info(\"raw cutout pixel ra={} dec={} filt={} width={} height={}\".format(\n             ra, dec, filt, width, height))\n+    print(\"raw cutout pixel ra={} dec={} filt={} width={} height={}\".format(", "path": "python/lsst/dax/imgserv/imageREST_v0.py", "position": null, "original_position": 180, "commit_id": "fbf2bb2e23385bde307bf9c81391e52ced743a6f", "original_commit_id": "4582393a87f26514722b6d42f8cd23d49dff39c3", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "Yes, I'll get rid of it.", "created_at": "2016-11-30T20:35:54Z", "updated_at": "2016-12-01T18:19:31Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/13#discussion_r90322011", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/13", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/90322011"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/13#discussion_r90322011"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/13"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/90322011/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 89025125}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/90322277", "pull_request_review_id": 10843343, "id": 90322277, "diff_hunk": "@@ -48,7 +48,7 @@ def _getSubImg(imgSrc, box):\n \n def stitchTestDeepCoadd():\n     w13Db = dbOpen(\"~/.mysqlAuthLSST.lsst10\", W13DeepCoaddDb)\n-    fullImg, metaFull = w13Db.getImageFullWithMetadata(19.36995, -0.3146)\n+    fullImg, metaFull = w13Db.getImageFullWithMetadata(19.36995, -0.3146, \"\")", "path": "examples/imageStitchExample.py", "position": null, "original_position": 5, "commit_id": "fbf2bb2e23385bde307bf9c81391e52ced743a6f", "original_commit_id": "4582393a87f26514722b6d42f8cd23d49dff39c3", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "I think we would be better off requiring the filterName. (meaning an empty string is probably not acceptable)", "created_at": "2016-11-30T20:37:15Z", "updated_at": "2016-12-01T18:19:31Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/13#discussion_r90322277", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/13", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/90322277"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/13#discussion_r90322277"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/13"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/90322277/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 89024904}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/90326150", "pull_request_review_id": 10847135, "id": 90326150, "diff_hunk": "@@ -93,27 +93,82 @@ def checkRaDec(raIn, decIn):\n def getRaw():\n     return _getIFull(request, W13RawDb)\n \n+# this will handle something like:\n+# GET /image/v0/raw/ids?run=5646&camcol=4&field=694&filter=g\n+@imageREST.route('/raw/ids', methods=['GET'])", "path": "python/lsst/dax/imgserv/imageREST_v0.py", "position": 15, "original_position": 15, "commit_id": "fbf2bb2e23385bde307bf9c81391e52ced743a6f", "original_commit_id": "4582393a87f26514722b6d42f8cd23d49dff39c3", "user": {"login": "ktlim", "id": 1054393, "avatar_url": "https://avatars3.githubusercontent.com/u/1054393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktlim", "html_url": "https://github.com/ktlim", "followers_url": "https://api.github.com/users/ktlim/followers", "following_url": "https://api.github.com/users/ktlim/following{/other_user}", "gists_url": "https://api.github.com/users/ktlim/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktlim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktlim/subscriptions", "organizations_url": "https://api.github.com/users/ktlim/orgs", "repos_url": "https://api.github.com/users/ktlim/repos", "events_url": "https://api.github.com/users/ktlim/events{/privacy}", "received_events_url": "https://api.github.com/users/ktlim/received_events", "type": "User", "site_admin": false}, "body": "In the long run, I think redesign of the API URLs and refactoring this into something using [variable rules](http://flask.pocoo.org/docs/0.11/quickstart/#variable-rules) will be desirable and can remove the need for the underscore methods.", "created_at": "2016-11-30T20:57:29Z", "updated_at": "2016-12-01T18:19:31Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/13#discussion_r90326150", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/13", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/90326150"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/13#discussion_r90326150"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/13"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/90326150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/90326527", "pull_request_review_id": 10847135, "id": 90326527, "diff_hunk": "@@ -53,51 +53,105 @@\n class W13Db:\n     '''Base class for examining DC_W13_Stripe82 data\n     '''\n-    def __init__(self, credFileName, database, table, columns, dataRoot, logger):\n+    def __init__(self, credFileName, database, table, columns, dataRoot, butlerPolicy, butlerKeys, logger):\n         self._log = logger\n         self._table = table\n         self._columns = columns\n         self._conn = getEngineFromFile(credFileName, database=database).connect()\n         self._dataRoot = dataRoot\n+        self._butlerPolicy = butlerPolicy\n+        self._butlerKeys = butlerKeys\n         sql = \"SET time_zone = '+0:00'\"\n         try:\n             self._log.info(sql)\n             self._conn.execute(sql)\n         except SQLAlchemyError as e:\n             self._log.error(\"Db engine error %s\" % e)\n \n-    def getImageFull(self, ra, dec):\n-        '''Return an image containing ra and dec.\n+    def getMdPolicy(self):\n+        '''Return the butler policy name to retrieve metadata\n+        '''\n+        return self._butlerPolicy + \"_md\"", "path": "python/lsst/dax/imgserv/locateImage.py", "position": null, "original_position": 25, "commit_id": "fbf2bb2e23385bde307bf9c81391e52ced743a6f", "original_commit_id": "4582393a87f26514722b6d42f8cd23d49dff39c3", "user": {"login": "ktlim", "id": 1054393, "avatar_url": "https://avatars3.githubusercontent.com/u/1054393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktlim", "html_url": "https://github.com/ktlim", "followers_url": "https://api.github.com/users/ktlim/followers", "following_url": "https://api.github.com/users/ktlim/following{/other_user}", "gists_url": "https://api.github.com/users/ktlim/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktlim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktlim/subscriptions", "organizations_url": "https://api.github.com/users/ktlim/orgs", "repos_url": "https://api.github.com/users/ktlim/repos", "events_url": "https://api.github.com/users/ktlim/events{/privacy}", "received_events_url": "https://api.github.com/users/ktlim/received_events", "type": "User", "site_admin": false}, "body": "`_butlerPolicy` is really something more like `_imageDatasetType`.", "created_at": "2016-11-30T20:59:07Z", "updated_at": "2016-12-01T18:19:31Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/13#discussion_r90326527", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/13", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/90326527"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/13#discussion_r90326527"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/13"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/90326527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/90326853", "pull_request_review_id": 10847135, "id": 90326853, "diff_hunk": "@@ -53,51 +53,105 @@\n class W13Db:\n     '''Base class for examining DC_W13_Stripe82 data\n     '''\n-    def __init__(self, credFileName, database, table, columns, dataRoot, logger):\n+    def __init__(self, credFileName, database, table, columns, dataRoot, butlerPolicy, butlerKeys, logger):\n         self._log = logger\n         self._table = table\n         self._columns = columns\n         self._conn = getEngineFromFile(credFileName, database=database).connect()\n         self._dataRoot = dataRoot\n+        self._butlerPolicy = butlerPolicy\n+        self._butlerKeys = butlerKeys\n         sql = \"SET time_zone = '+0:00'\"\n         try:\n             self._log.info(sql)\n             self._conn.execute(sql)\n         except SQLAlchemyError as e:\n             self._log.error(\"Db engine error %s\" % e)\n \n-    def getImageFull(self, ra, dec):\n-        '''Return an image containing ra and dec.\n+    def getMdPolicy(self):\n+        '''Return the butler policy name to retrieve metadata\n+        '''\n+        return self._butlerPolicy + \"_md\"\n+\n+    def getIdsFromRequest(self, request):\n+        '''Returns a dictionary of key value pairs from the request with\n+        valid being true if there were entries for everything in _butlerKeys.\n+        This will not work for floating point values.\n+        '''\n+        valid = True\n+        ids = {}\n+        for key in self._butlerKeys:\n+            value = request.args.get(key)\n+            if value == None:\n+                valid = False\n+            try:\n+                value = int(value)", "path": "python/lsst/dax/imgserv/locateImage.py", "position": 39, "original_position": 39, "commit_id": "fbf2bb2e23385bde307bf9c81391e52ced743a6f", "original_commit_id": "4582393a87f26514722b6d42f8cd23d49dff39c3", "user": {"login": "ktlim", "id": 1054393, "avatar_url": "https://avatars3.githubusercontent.com/u/1054393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktlim", "html_url": "https://github.com/ktlim", "followers_url": "https://api.github.com/users/ktlim/followers", "following_url": "https://api.github.com/users/ktlim/following{/other_user}", "gists_url": "https://api.github.com/users/ktlim/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktlim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktlim/subscriptions", "organizations_url": "https://api.github.com/users/ktlim/orgs", "repos_url": "https://api.github.com/users/ktlim/repos", "events_url": "https://api.github.com/users/ktlim/events{/privacy}", "received_events_url": "https://api.github.com/users/ktlim/received_events", "type": "User", "site_admin": false}, "body": "In theory, it's possible for a dataId to use strings containing digits, floats, or something else.  But I think this is a reasonable limitation for now.", "created_at": "2016-11-30T21:00:48Z", "updated_at": "2016-12-01T18:19:31Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/13#discussion_r90326853", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/13", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/90326853"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/13#discussion_r90326853"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/13"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/90326853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/90327385", "pull_request_review_id": 10847135, "id": 90327385, "diff_hunk": "@@ -201,18 +255,21 @@ def __init__(self, credFileName, logger=log):\n                        database=\"DC_W13_Stripe82\",\n                        table=\"Science_Ccd_Exposure\",\n                        columns=[\"run\", \"camcol\", \"field\", \"filterName\"],\n-                       dataRoot=\"/lsst7/stripe82/dr7/runs\",\n+                       dataRoot=\"/datasets/sdss/preprocessed/dr7/runs\",", "path": "python/lsst/dax/imgserv/locateImage.py", "position": 183, "original_position": 183, "commit_id": "fbf2bb2e23385bde307bf9c81391e52ced743a6f", "original_commit_id": "4582393a87f26514722b6d42f8cd23d49dff39c3", "user": {"login": "ktlim", "id": 1054393, "avatar_url": "https://avatars3.githubusercontent.com/u/1054393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktlim", "html_url": "https://github.com/ktlim", "followers_url": "https://api.github.com/users/ktlim/followers", "following_url": "https://api.github.com/users/ktlim/following{/other_user}", "gists_url": "https://api.github.com/users/ktlim/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktlim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktlim/subscriptions", "organizations_url": "https://api.github.com/users/ktlim/orgs", "repos_url": "https://api.github.com/users/ktlim/repos", "events_url": "https://api.github.com/users/ktlim/events{/privacy}", "received_events_url": "https://api.github.com/users/ktlim/received_events", "type": "User", "site_admin": false}, "body": "In a future refactor, I'd like to see this be a configurable parameter instead of hard-coded.", "created_at": "2016-11-30T21:03:38Z", "updated_at": "2016-12-01T18:19:31Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/13#discussion_r90327385", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/13", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/90327385"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/13#discussion_r90327385"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/13"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/90327385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/90338793", "pull_request_review_id": 10859435, "id": 90338793, "diff_hunk": "@@ -93,27 +93,82 @@ def checkRaDec(raIn, decIn):\n def getRaw():\n     return _getIFull(request, W13RawDb)\n \n+# this will handle something like:\n+# GET /image/v0/raw/ids?run=5646&camcol=4&field=694&filter=g\n+@imageREST.route('/raw/ids', methods=['GET'])", "path": "python/lsst/dax/imgserv/imageREST_v0.py", "position": 15, "original_position": 15, "commit_id": "fbf2bb2e23385bde307bf9c81391e52ced743a6f", "original_commit_id": "4582393a87f26514722b6d42f8cd23d49dff39c3", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "A break between the API and the implementation may not be a bad thing. Most of these queries are about 80% the same, following the calexp pattern or deepCoadd pattern, just accessing different repositories and policies.", "created_at": "2016-11-30T22:01:52Z", "updated_at": "2016-12-01T18:19:31Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/13#discussion_r90338793", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/13", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/90338793"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/13#discussion_r90338793"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/13"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/90338793/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 90326150}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/90488080", "pull_request_review_id": 11007004, "id": 90488080, "diff_hunk": "@@ -201,18 +255,21 @@ def __init__(self, credFileName, logger=log):\n                        database=\"DC_W13_Stripe82\",\n                        table=\"Science_Ccd_Exposure\",\n                        columns=[\"run\", \"camcol\", \"field\", \"filterName\"],\n-                       dataRoot=\"/lsst7/stripe82/dr7/runs\",\n+                       dataRoot=\"/datasets/sdss/preprocessed/dr7/runs\",", "path": "python/lsst/dax/imgserv/locateImage.py", "position": 183, "original_position": 183, "commit_id": "fbf2bb2e23385bde307bf9c81391e52ced743a6f", "original_commit_id": "4582393a87f26514722b6d42f8cd23d49dff39c3", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "I think all of these should probably be relocated to configuration files and the number of W13xxxDb classes can be reduced, but that's for a future refactor.", "created_at": "2016-12-01T16:49:39Z", "updated_at": "2016-12-01T18:19:31Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/13#discussion_r90488080", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/13", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/90488080"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/13#discussion_r90488080"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/13"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/90488080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 90327385}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/101874449", "pull_request_review_id": 22620906, "id": 101874449, "diff_hunk": "@@ -139,32 +138,34 @@ def getImageFullWithMetadata(self, ra, dec, filterName):\n         metadata = self._getMetadata(butler, res)\n         return img, metadata\n \n-\n-    def getImage(self, ra, dec, filterName, width, height, cutoutType=\"arcsecond\"):\n+    def getImage(self, ra, dec, filterName, width, height, cutoutType=\"arcsecond\", dataId=None):\n         '''Return an image centered on ra and dec (in degrees) with dimensions\n         height and width (in arcseconds).\n         Returns None if no image is found.\n         This function assumes the entire image is valid. (no overscan, etc.)\n         Sequence of events:\n-         - Use filterName, ra, dec, width, and height to find an image from the database.\n-         - Use the results of the query to get an image and metadata from the butler.\n-         - Map ra, dec, width, and height to a box.\n-         - If a pixel cutout, trim the dimesions to fit in the source image and return.\n-         -     and return the cutout.\n-         - Otherwise, the height and width are in arcseconds.\n-         - Determine approximate pixels per arcsecond in the image by\n+        - If not None, dataId is the image id for the butler, ignore next line.\n+        - Use filterName, ra, dec, width, and height to find an image from the database.\n+        - Use the results of the query to get an image and metadata from the butler.\n+        - Map ra, dec, width, and height to a box.\n+        - If a pixel cutout, trim the dimesions to fit in the source image and return.\n+        -     and return the cutout.\n+        - Otherwise, the height and width are in arcseconds.\n+        - Determine approximate pixels per arcsecond in the image by\n              calculating the length of line from the upper right corner of\n              the image to the lower left corner in pixels and arcseconds.\n              (This will fail at or very near the pole.)\n-         - Use that to define a box for the cutout.\n-         - Trim the box so it is entirely within the source image.\n-         - Make and return the cutout.\n+        - Use that to define a box for the cutout.\n+        - Trim the box so it is entirely within the source image.\n+        - Make and return the cutout.\n         '''\n         self._log.debug(\"getImage %f %f %f %f\", ra, dec, width, height)\n-        # Find the nearest image to ra and dec.\n-        qresult = self._findNearestImageContaining(ra, dec, filterName)\n+        qresult = dataId\n+        if qresult is None:\n+            # Find the nearest image to ra and dec.\n+            qresult = self._findNearestImageContaining(ra, dec, filterName)", "path": "python/lsst/dax/imgserv/locateImage.py", "position": null, "original_position": 99, "commit_id": "0d0e1d7079a9f2492ecc67d680ec33103e47ba82", "original_commit_id": "eebca0db0cb612b3f88495f054c26b970b82d024", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "I think it might be better to have a separate function that gets the image from the dataId and one that gets the data from the RA and Dec, which would then call the function that gets the image from the dataId.\r\n\r\nMy concern is that there'd be a silent failure with an empty dataId as the end user would still get an image, but not the one they were expecting, and it wouldn't be immediately obvious in many cases.", "created_at": "2017-02-18T00:29:55Z", "updated_at": "2017-02-21T19:32:52Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/15#discussion_r101874449", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/15", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/101874449"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/15#discussion_r101874449"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/15"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/101874449/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/101876639", "pull_request_review_id": 22620906, "id": 101876639, "diff_hunk": "@@ -450,9 +484,22 @@ def _cutoutBoxPixels(srcImage, xyCenter, width, height, log):\n     imgSub = srcImage[pixULX:pixEndX, pixULY:pixEndY].clone()\n     return imgSub\n \n+\n+def _getKeysFromList(flist, fields):\n+    '''flist assumed to be dictionary\n+    '''\n+    vals = []\n+    for f in fields:\n+\tfor l in flist:\n+\t    if f == l:\n+\t        vals.append(flist[l])\n+    return vals", "path": "python/lsst/dax/imgserv/locateImage.py", "position": null, "original_position": 295, "commit_id": "0d0e1d7079a9f2492ecc67d680ec33103e47ba82", "original_commit_id": "eebca0db0cb612b3f88495f054c26b970b82d024", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "The lower case 'l' looks a log like a '1', and should be avoided as a variable name.\r\n\r\nWould this work? \r\n\r\n```\r\nfor f in fields:\r\n    vals.append(flist.get(f))\r\n```\r\n", "created_at": "2017-02-18T00:54:28Z", "updated_at": "2017-02-21T19:32:52Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/15#discussion_r101876639", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/15", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/101876639"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/15#discussion_r101876639"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/15"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/101876639/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/101882083", "pull_request_review_id": 22628041, "id": 101882083, "diff_hunk": "@@ -450,9 +484,22 @@ def _cutoutBoxPixels(srcImage, xyCenter, width, height, log):\n     imgSub = srcImage[pixULX:pixEndX, pixULY:pixEndY].clone()\n     return imgSub\n \n+\n+def _getKeysFromList(flist, fields):\n+    '''flist assumed to be dictionary\n+    '''\n+    vals = []\n+    for f in fields:\n+\tfor l in flist:\n+\t    if f == l:\n+\t        vals.append(flist[l])\n+    return vals", "path": "python/lsst/dax/imgserv/locateImage.py", "position": null, "original_position": 295, "commit_id": "0d0e1d7079a9f2492ecc67d680ec33103e47ba82", "original_commit_id": "eebca0db0cb612b3f88495f054c26b970b82d024", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Changed per input.", "created_at": "2017-02-18T02:50:54Z", "updated_at": "2017-02-21T19:32:52Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/15#discussion_r101882083", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/15", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/101882083"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/15#discussion_r101882083"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/15"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/101882083/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 101876639}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/101882112", "pull_request_review_id": 22628070, "id": 101882112, "diff_hunk": "@@ -139,32 +138,34 @@ def getImageFullWithMetadata(self, ra, dec, filterName):\n         metadata = self._getMetadata(butler, res)\n         return img, metadata\n \n-\n-    def getImage(self, ra, dec, filterName, width, height, cutoutType=\"arcsecond\"):\n+    def getImage(self, ra, dec, filterName, width, height, cutoutType=\"arcsecond\", dataId=None):\n         '''Return an image centered on ra and dec (in degrees) with dimensions\n         height and width (in arcseconds).\n         Returns None if no image is found.\n         This function assumes the entire image is valid. (no overscan, etc.)\n         Sequence of events:\n-         - Use filterName, ra, dec, width, and height to find an image from the database.\n-         - Use the results of the query to get an image and metadata from the butler.\n-         - Map ra, dec, width, and height to a box.\n-         - If a pixel cutout, trim the dimesions to fit in the source image and return.\n-         -     and return the cutout.\n-         - Otherwise, the height and width are in arcseconds.\n-         - Determine approximate pixels per arcsecond in the image by\n+        - If not None, dataId is the image id for the butler, ignore next line.\n+        - Use filterName, ra, dec, width, and height to find an image from the database.\n+        - Use the results of the query to get an image and metadata from the butler.\n+        - Map ra, dec, width, and height to a box.\n+        - If a pixel cutout, trim the dimesions to fit in the source image and return.\n+        -     and return the cutout.\n+        - Otherwise, the height and width are in arcseconds.\n+        - Determine approximate pixels per arcsecond in the image by\n              calculating the length of line from the upper right corner of\n              the image to the lower left corner in pixels and arcseconds.\n              (This will fail at or very near the pole.)\n-         - Use that to define a box for the cutout.\n-         - Trim the box so it is entirely within the source image.\n-         - Make and return the cutout.\n+        - Use that to define a box for the cutout.\n+        - Trim the box so it is entirely within the source image.\n+        - Make and return the cutout.\n         '''\n         self._log.debug(\"getImage %f %f %f %f\", ra, dec, width, height)\n-        # Find the nearest image to ra and dec.\n-        qresult = self._findNearestImageContaining(ra, dec, filterName)\n+        qresult = dataId\n+        if qresult is None:\n+            # Find the nearest image to ra and dec.\n+            qresult = self._findNearestImageContaining(ra, dec, filterName)", "path": "python/lsst/dax/imgserv/locateImage.py", "position": null, "original_position": 99, "commit_id": "0d0e1d7079a9f2492ecc67d680ec33103e47ba82", "original_commit_id": "eebca0db0cb612b3f88495f054c26b970b82d024", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Good suggestion. Separate functions devised to distinguish the different use cases.", "created_at": "2017-02-18T02:51:44Z", "updated_at": "2017-02-21T19:32:52Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/15#discussion_r101882112", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/15", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/101882112"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/15#discussion_r101882112"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/15"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/101882112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 101874449}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/102345101", "pull_request_review_id": 23098907, "id": 102345101, "diff_hunk": "@@ -1,4 +1,4 @@\n-#!/usr/bin/env python\n+#!/usr/b:in/env python", "path": "python/lsst/dax/imgserv/imageREST_v0.py", "position": null, "original_position": 2, "commit_id": "4d93d546ebd236efa962c26d01623cf3594fb653", "original_commit_id": "df48d45ebd70c08ae82c9170830bfca0c5272922", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "':' snuck in there.", "created_at": "2017-02-21T23:18:55Z", "updated_at": "2017-02-22T00:25:16Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/16#discussion_r102345101", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/16", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/102345101"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/16#discussion_r102345101"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/16"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/102345101/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/102345835", "pull_request_review_id": 23099646, "id": 102345835, "diff_hunk": "@@ -290,11 +332,50 @@ def _getICutout(_request, W13db, units):\n         msg = \"INVALID_INPUT width={} height={}\".format(widthIn, heightIn)\n         return _error(ValueError.__name__, msg, BAD_REQUEST)\n     log.info(\"raw cutout pixel ra={} dec={} filt={} width={} height={}\".format(\n-            ra, dec, filt, width, height))\n+             ra, dec, filt, width, height))\n+\n+    # fetch the image here\n+    w13db = dbOpen(\"~/.lsst/dbAuth-dbServ.ini\", W13db)\n+    img = w13db.getImage(ra, dec, filt, width, height, units)\n+    if img is None:\n+        return _imageNotFound()\n+    log.debug(\"Sub w={} h={}\".format(img.getWidth(), img.getHeight()))\n+    tmpPath = tempfile.mkdtemp()\n+    fileName = os.path.join(tmpPath, \"cutout.fits\")\n+    log.info(\"temporary fileName=%s\", fileName)\n+    img.writeFits(fileName)\n+    resp = responseFile(fileName)\n+    os.remove(fileName)\n+    os.removedirs(tmpPath)\n+    return resp\n \n+\n+def _getICutoutFromScienceId(_request, W13db, scienceId):\n+    '''Get cutoff of calexp image from the id given.\n+    W13db presumed to be W13CalexpDb.", "path": "python/lsst/dax/imgserv/imageREST_v0.py", "position": null, "original_position": 123, "commit_id": "4d93d546ebd236efa962c26d01623cf3594fb653", "original_commit_id": "df48d45ebd70c08ae82c9170830bfca0c5272922", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "'cutout' instead of 'cutoff' ", "created_at": "2017-02-21T23:23:07Z", "updated_at": "2017-02-22T00:25:16Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/16#discussion_r102345835", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/16", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/102345835"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/16#discussion_r102345835"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/16"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/102345835/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/102347361", "pull_request_review_id": 23101174, "id": 102347361, "diff_hunk": "@@ -450,9 +470,38 @@ def _cutoutBoxPixels(srcImage, xyCenter, width, height, log):\n     imgSub = srcImage[pixULX:pixEndX, pixULY:pixEndY].clone()\n     return imgSub\n \n+\n+def _getKeysFromList(flist, fields):\n+    '''flist assumed to be dictionary\n+    '''\n+    vals = []\n+    for f in fields:\n+        for l in flist:\n+            if f == l:\n+                vals.append(flist.get(f))\n+    return vals", "path": "python/lsst/dax/imgserv/locateImage.py", "position": null, "original_position": 295, "commit_id": "4d93d546ebd236efa962c26d01623cf3594fb653", "original_commit_id": "df48d45ebd70c08ae82c9170830bfca0c5272922", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "'l' should not be used for a variable name. It looks too much like '1'.\r\n\r\nWould this work?\r\n```\r\nfor f in fields:\r\n    vals.append(flist.get(f))\r\n```", "created_at": "2017-02-21T23:31:58Z", "updated_at": "2017-02-22T00:25:16Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/16#discussion_r102347361", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/16", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/102347361"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/16#discussion_r102347361"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/16"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/102347361/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/102347889", "pull_request_review_id": 23101700, "id": 102347889, "diff_hunk": "@@ -1,4 +1,4 @@\n-#!/usr/bin/env python\n+#!/usr/b:in/env python", "path": "python/lsst/dax/imgserv/imageREST_v0.py", "position": null, "original_position": 2, "commit_id": "4d93d546ebd236efa962c26d01623cf3594fb653", "original_commit_id": "df48d45ebd70c08ae82c9170830bfca0c5272922", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "fixed", "created_at": "2017-02-21T23:35:33Z", "updated_at": "2017-02-22T00:25:16Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/16#discussion_r102347889", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/16", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/102347889"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/16#discussion_r102347889"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/16"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/102347889/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 102345101}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/102347914", "pull_request_review_id": 23101720, "id": 102347914, "diff_hunk": "@@ -290,11 +332,50 @@ def _getICutout(_request, W13db, units):\n         msg = \"INVALID_INPUT width={} height={}\".format(widthIn, heightIn)\n         return _error(ValueError.__name__, msg, BAD_REQUEST)\n     log.info(\"raw cutout pixel ra={} dec={} filt={} width={} height={}\".format(\n-            ra, dec, filt, width, height))\n+             ra, dec, filt, width, height))\n+\n+    # fetch the image here\n+    w13db = dbOpen(\"~/.lsst/dbAuth-dbServ.ini\", W13db)\n+    img = w13db.getImage(ra, dec, filt, width, height, units)\n+    if img is None:\n+        return _imageNotFound()\n+    log.debug(\"Sub w={} h={}\".format(img.getWidth(), img.getHeight()))\n+    tmpPath = tempfile.mkdtemp()\n+    fileName = os.path.join(tmpPath, \"cutout.fits\")\n+    log.info(\"temporary fileName=%s\", fileName)\n+    img.writeFits(fileName)\n+    resp = responseFile(fileName)\n+    os.remove(fileName)\n+    os.removedirs(tmpPath)\n+    return resp\n \n+\n+def _getICutoutFromScienceId(_request, W13db, scienceId):\n+    '''Get cutoff of calexp image from the id given.\n+    W13db presumed to be W13CalexpDb.", "path": "python/lsst/dax/imgserv/imageREST_v0.py", "position": null, "original_position": 123, "commit_id": "4d93d546ebd236efa962c26d01623cf3594fb653", "original_commit_id": "df48d45ebd70c08ae82c9170830bfca0c5272922", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "changed.", "created_at": "2017-02-21T23:35:45Z", "updated_at": "2017-02-22T00:25:16Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/16#discussion_r102347914", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/16", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/102347914"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/16#discussion_r102347914"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/16"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/102347914/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 102345835}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/102348303", "pull_request_review_id": 23102115, "id": 102348303, "diff_hunk": "@@ -450,9 +470,38 @@ def _cutoutBoxPixels(srcImage, xyCenter, width, height, log):\n     imgSub = srcImage[pixULX:pixEndX, pixULY:pixEndY].clone()\n     return imgSub\n \n+\n+def _getKeysFromList(flist, fields):\n+    '''flist assumed to be dictionary\n+    '''\n+    vals = []\n+    for f in fields:\n+        for l in flist:\n+            if f == l:\n+                vals.append(flist.get(f))\n+    return vals", "path": "python/lsst/dax/imgserv/locateImage.py", "position": null, "original_position": 295, "commit_id": "4d93d546ebd236efa962c26d01623cf3594fb653", "original_commit_id": "df48d45ebd70c08ae82c9170830bfca0c5272922", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Will test with this suggested change, to be kept if no issue.\r\n", "created_at": "2017-02-21T23:38:28Z", "updated_at": "2017-02-22T00:25:16Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/16#discussion_r102348303", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/16", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/102348303"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/16#discussion_r102348303"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/16"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/102348303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 102347361}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/102348747", "pull_request_review_id": 23102555, "id": 102348747, "diff_hunk": "@@ -450,9 +470,38 @@ def _cutoutBoxPixels(srcImage, xyCenter, width, height, log):\n     imgSub = srcImage[pixULX:pixEndX, pixULY:pixEndY].clone()\n     return imgSub\n \n+\n+def _getKeysFromList(flist, fields):\n+    '''flist assumed to be dictionary\n+    '''\n+    vals = []\n+    for f in fields:\n+        for l in flist:\n+            if f == l:\n+                vals.append(flist.get(f))\n+    return vals", "path": "python/lsst/dax/imgserv/locateImage.py", "position": null, "original_position": 295, "commit_id": "4d93d546ebd236efa962c26d01623cf3594fb653", "original_commit_id": "df48d45ebd70c08ae82c9170830bfca0c5272922", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "or \r\n```\r\nfor f in fields:\r\n    elem = flist.get(f)\r\n    if elem is not None:\r\n        vals.append(elem);\r\n```", "created_at": "2017-02-21T23:41:20Z", "updated_at": "2017-02-22T00:25:16Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/16#discussion_r102348747", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/16", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/102348747"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/16#discussion_r102348747"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/16"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/102348747/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 102347361}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106008270", "pull_request_review_id": 26912291, "id": 106008270, "diff_hunk": "@@ -351,9 +366,9 @@ def _getICutout(_request, W13db, units):\n \n \n def _getICutoutFromScienceId(_request, W13db, scienceId):\n-    '''Get cutout of calexp image from the id given.\n-    W13db presumed to be W13CalexpDb.\n-    Units: arcsecond, pixel (to be inferred from the request parameters)\n+    '''Get cutout image from the id given.\n+    W13db should be the appropriate class (W13CalexpDb, W13DeepCoadDb, W13RawDb, etc.)", "path": "python/lsst/dax/imgserv/imageREST_v0.py", "position": 55, "original_position": 55, "commit_id": "80cb4f205a55d5b88abf3f84257aeb3077939897", "original_commit_id": "f492de66ff262504dafcc2a4117a3f638c7f02f7", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "Line is too long.", "created_at": "2017-03-14T19:43:16Z", "updated_at": "2017-03-16T22:32:48Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/18#discussion_r106008270", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/18", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106008270"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/18#discussion_r106008270"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/18"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106008270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106013632", "pull_request_review_id": 26912291, "id": 106013632, "diff_hunk": "@@ -185,7 +185,7 @@ def getImageByDataId(self, ra, dec, width, height, qResults, cutoutType=\"arcseco\n         xyWcs = wcs.skyToPixel(raDec)\n         x0 = img.getX0()\n         y0 = img.getY0()\n-        xyCenter = afwGeom.Point2D(xyWcs.getX() - x0, xyWcs.getY() - y0)\n+        xyCenter = afwGeom.Point2I(int(xyWcs.getX()-x0), int(xyWcs.getY()-y0))", "path": "python/lsst/dax/imgserv/locateImage.py", "position": null, "original_position": 5, "commit_id": "80cb4f205a55d5b88abf3f84257aeb3077939897", "original_commit_id": "f492de66ff262504dafcc2a4117a3f638c7f02f7", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "Needs spaces around '-'.", "created_at": "2017-03-14T20:08:42Z", "updated_at": "2017-03-16T22:32:48Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/18#discussion_r106013632", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/18", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106013632"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/18#discussion_r106013632"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/18"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106013632/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106013810", "pull_request_review_id": 26912291, "id": 106013810, "diff_hunk": "@@ -269,13 +269,16 @@ def _getImageButler(self, qResults):\n         '''\n         # This will return on the first result.\n         log.debug(\"Raw_getImageButler qResults:{}\".format(qResults))\n-        for ln in qResults:\n-            run, camcol, field, filterName = ln[2:6]\n+        valid, run, camcol, field, filterName = _getKeysForButler(qResults)\n+        if valid is True:\n+            log.debug(\"Raw_getImageButler run={} camcol={} field={} filter={}\".format(run, ", "path": "python/lsst/dax/imgserv/locateImage.py", "position": 17, "original_position": 17, "commit_id": "80cb4f205a55d5b88abf3f84257aeb3077939897", "original_commit_id": "f492de66ff262504dafcc2a4117a3f638c7f02f7", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "Line too long.", "created_at": "2017-03-14T20:09:21Z", "updated_at": "2017-03-16T22:32:48Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/18#discussion_r106013810", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/18", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106013810"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/18#discussion_r106013810"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/18"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106013810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106013860", "pull_request_review_id": 26912291, "id": 106013860, "diff_hunk": "@@ -269,13 +269,16 @@ def _getImageButler(self, qResults):\n         '''\n         # This will return on the first result.\n         log.debug(\"Raw_getImageButler qResults:{}\".format(qResults))\n-        for ln in qResults:\n-            run, camcol, field, filterName = ln[2:6]\n+        valid, run, camcol, field, filterName = _getKeysForButler(qResults)\n+        if valid is True:\n+            log.debug(\"Raw_getImageButler run={} camcol={} field={} filter={}\".format(run, \n+                camcol, field, filterName))\n             butler = lsst.daf.persistence.Butler(self._dataRoot)\n-            img = butler.get(self._imageDatasetType, run=run, camcol=camcol,\n-                    field=field, filter=filterName)\n+            img = butler.get(self._imageDatasetType, run=run, camcol=camcol, field=field, filter=filterName)", "path": "python/lsst/dax/imgserv/locateImage.py", "position": 22, "original_position": 22, "commit_id": "80cb4f205a55d5b88abf3f84257aeb3077939897", "original_commit_id": "f492de66ff262504dafcc2a4117a3f638c7f02f7", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "Line too long.", "created_at": "2017-03-14T20:09:34Z", "updated_at": "2017-03-16T22:32:48Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/18#discussion_r106013860", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/18", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106013860"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/18#discussion_r106013860"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/18"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106013860/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106014041", "pull_request_review_id": 26912291, "id": 106014041, "diff_hunk": "@@ -286,6 +289,22 @@ def _getMetadata(self, butler, qResults):\n                               field=field, filter=filterName)\n \n \n+    def _getImageCutoutFromScienceId(self, scienceId, ra, dec, width, height, units):\n+        ''' Get the image specified by id centered on (ra, dec) with width and height dimensions.", "path": "python/lsst/dax/imgserv/locateImage.py", "position": 36, "original_position": 36, "commit_id": "80cb4f205a55d5b88abf3f84257aeb3077939897", "original_commit_id": "f492de66ff262504dafcc2a4117a3f638c7f02f7", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "Line too long.", "created_at": "2017-03-14T20:10:20Z", "updated_at": "2017-03-16T22:32:48Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/18#discussion_r106014041", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/18", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106014041"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/18#discussion_r106014041"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/18"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106014041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106014339", "pull_request_review_id": 26912291, "id": 106014339, "diff_hunk": "@@ -394,23 +381,22 @@ def getImageIdsFromScienceId(self, scienceId):\n                 valid = False\n             ids[key] = value\n         return ids, valid\n-\n+    ", "path": "python/lsst/dax/imgserv/locateImage.py", "position": null, "original_position": 105, "commit_id": "80cb4f205a55d5b88abf3f84257aeb3077939897", "original_commit_id": "f492de66ff262504dafcc2a4117a3f638c7f02f7", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "No trailing spaces.", "created_at": "2017-03-14T20:11:43Z", "updated_at": "2017-03-16T22:32:48Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/18#discussion_r106014339", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/18", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106014339"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/18#discussion_r106014339"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/18"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106014339/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106014446", "pull_request_review_id": 26912291, "id": 106014446, "diff_hunk": "@@ -422,6 +408,23 @@ def _getMetadata(self, butler, qResults):\n             metadata = butler.get(self.getImageDatasetMd(), tract=tract, patch=patch, filter=filterName)\n             return metadata\n \n+\n+    def _getImageCutoutFromScienceId(self, scienceId, ra, dec, width, height, units):\n+        ''' Get the image specified by id centered on (ra, dec) with width and height dimensions.", "path": "python/lsst/dax/imgserv/locateImage.py", "position": 143, "original_position": 136, "commit_id": "80cb4f205a55d5b88abf3f84257aeb3077939897", "original_commit_id": "f492de66ff262504dafcc2a4117a3f638c7f02f7", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "Line too long.", "created_at": "2017-03-14T20:12:12Z", "updated_at": "2017-03-16T22:32:48Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/18#discussion_r106014446", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/18", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106014446"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/18#discussion_r106014446"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/18"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106014446/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106014593", "pull_request_review_id": 26912291, "id": 106014593, "diff_hunk": "@@ -430,43 +433,19 @@ def _cutoutBoxPixels(srcImage, xyCenter, width, height, log):\n     height - The height in pixels.\n     height and width will be trimmed if they go past the edge of the source image.\n     '''\n-    pixW = width\n-    pixH = height\n-    pixULX = xyCenter.getX() - pixW/2.0\n-    pixULY = xyCenter.getY() - pixH/2.0\n-    offsetX = 0\n-    offsetY = 0\n-    if pixULX < 0:\n-        offsetX = pixULX\n-        pixULX = 0\n-    if pixULY < 0:\n-        offsetY = pixULY\n-        pixULY = 0\n+    # assuming both src_box and xyCenter to be in Box2I \n     log.debug(\"xyCenter={}\".format(xyCenter))\n-    log.debug(\"pixULX={} pixULY={} offsetX={} offsetY={}\".format(pixULX, pixULY,\n-                                                                 offsetX, offsetY))\n-    # Reduce the size of the box if it goes over the edge of the image (offsets are <= 0)\n-    pixW += offsetX\n-    pixH += offsetY\n-    imgW = srcImage.getWidth()\n-    imgH = srcImage.getHeight()\n-    pixW = min(imgW, pixW)\n-    pixH = min(imgH, pixH)\n-    pixULX = int(pixULX)\n-    pixULY = int(pixULY)\n-    pixW = int(pixW)\n-    pixH = int(pixH)\n-    log.debug(\"pixULX=%d pixULY=%d pixW=%d pixH=%d\", pixULX, pixULY, pixW, pixH)\n-    # bbox = afwGeom.Box2I(afwGeom.Point2I(pixULX, pixULY),\n-    #                    afwGeom.Extent2I(pixW, pixH))\n-    # img = butler.get(\"fpC_sub\", run=run, camcol=camcol,\n-    #                 field=field, filter=filterName, bbox=bbox)\n-    pixEndX = pixULX + pixW\n-    pixEndY = pixULY + pixH\n-    log.debug(\"pixULX=%d pixEndX=%d, pixULY=%d pixEndY=%d\",\n-              pixULX, pixEndX, pixULY, pixEndY)\n-    # Cut the sub image out of the image. See -\n-    # https://lsst-web.ncsa.illinois.edu/doxygen/x_masterDoxyDoc/afw_sec_py_image.html\n+    src_box = srcImage.getBBox()\n+    co_box = afwGeom.Box2I(xyCenter, afwGeom.Extent2I(int(width), int(height)))\n+    co_box.clip(src_box)\n+    pixULX = co_box.getBeginX()\n+    pixEndX = co_box.getEndX()\n+    pixULY = co_box.getBeginY()\n+    pixEndY = co_box.getEndY()\n+    log.debug(\"co_box pixULX={} pixEndX={} pixULY={} pixEndY={}\".format(pixULX, pixEndX,", "path": "python/lsst/dax/imgserv/locateImage.py", "position": null, "original_position": 203, "commit_id": "80cb4f205a55d5b88abf3f84257aeb3077939897", "original_commit_id": "f492de66ff262504dafcc2a4117a3f638c7f02f7", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "Line too long.", "created_at": "2017-03-14T20:12:51Z", "updated_at": "2017-03-16T22:32:48Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/18#discussion_r106014593", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/18", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106014593"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/18#discussion_r106014593"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/18"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106014593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106024249", "pull_request_review_id": 26912291, "id": 106024249, "diff_hunk": "@@ -226,6 +233,14 @@ def getIDeepCoaddCutout():\n def getIDeepCoaddCutoutPixel():\n     return _getICutout(request, W13DeepCoaddDb, 'pixel')\n \n+# this will handle something like:\n+# GET /image/v0/deepCoadd/cutout?ra=19.36995&dec=-0.3146widthAng=30.0&heightAng=45.0\n+# GET /image/v0/deepCoadd/cutout?ra=19.36995&dec=-0.3146xx&widthPix=100&heightPix=100", "path": "python/lsst/dax/imgserv/imageREST_v0.py", "position": null, "original_position": 38, "commit_id": "80cb4f205a55d5b88abf3f84257aeb3077939897", "original_commit_id": "f492de66ff262504dafcc2a4117a3f638c7f02f7", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "Technically, these are too long, but I don't like the idea of splitting the example URL across 2 lines.", "created_at": "2017-03-14T20:53:24Z", "updated_at": "2017-03-16T22:32:48Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/18#discussion_r106024249", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/18", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106024249"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/18#discussion_r106024249"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/18"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106024249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106246719", "pull_request_review_id": 27159846, "id": 106246719, "diff_hunk": "@@ -185,7 +185,7 @@ def getImageByDataId(self, ra, dec, width, height, qResults, cutoutType=\"arcseco\n         xyWcs = wcs.skyToPixel(raDec)\n         x0 = img.getX0()\n         y0 = img.getY0()\n-        xyCenter = afwGeom.Point2D(xyWcs.getX() - x0, xyWcs.getY() - y0)\n+        xyCenter = afwGeom.Point2I(int(xyWcs.getX()-x0), int(xyWcs.getY()-y0))", "path": "python/lsst/dax/imgserv/locateImage.py", "position": null, "original_position": 5, "commit_id": "80cb4f205a55d5b88abf3f84257aeb3077939897", "original_commit_id": "f492de66ff262504dafcc2a4117a3f638c7f02f7", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Fixed.", "created_at": "2017-03-15T18:26:30Z", "updated_at": "2017-03-16T22:32:48Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/18#discussion_r106246719", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/18", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106246719"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/18#discussion_r106246719"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/18"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106246719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 106013632}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106247257", "pull_request_review_id": 27160402, "id": 106247257, "diff_hunk": "@@ -394,23 +381,22 @@ def getImageIdsFromScienceId(self, scienceId):\n                 valid = False\n             ids[key] = value\n         return ids, valid\n-\n+    ", "path": "python/lsst/dax/imgserv/locateImage.py", "position": null, "original_position": 105, "commit_id": "80cb4f205a55d5b88abf3f84257aeb3077939897", "original_commit_id": "f492de66ff262504dafcc2a4117a3f638c7f02f7", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Fixed", "created_at": "2017-03-15T18:28:45Z", "updated_at": "2017-03-16T22:32:48Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/18#discussion_r106247257", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/18", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106247257"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/18#discussion_r106247257"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/18"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106247257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 106014339}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106247524", "pull_request_review_id": 27160664, "id": 106247524, "diff_hunk": "@@ -430,43 +433,19 @@ def _cutoutBoxPixels(srcImage, xyCenter, width, height, log):\n     height - The height in pixels.\n     height and width will be trimmed if they go past the edge of the source image.\n     '''\n-    pixW = width\n-    pixH = height\n-    pixULX = xyCenter.getX() - pixW/2.0\n-    pixULY = xyCenter.getY() - pixH/2.0\n-    offsetX = 0\n-    offsetY = 0\n-    if pixULX < 0:\n-        offsetX = pixULX\n-        pixULX = 0\n-    if pixULY < 0:\n-        offsetY = pixULY\n-        pixULY = 0\n+    # assuming both src_box and xyCenter to be in Box2I \n     log.debug(\"xyCenter={}\".format(xyCenter))\n-    log.debug(\"pixULX={} pixULY={} offsetX={} offsetY={}\".format(pixULX, pixULY,\n-                                                                 offsetX, offsetY))\n-    # Reduce the size of the box if it goes over the edge of the image (offsets are <= 0)\n-    pixW += offsetX\n-    pixH += offsetY\n-    imgW = srcImage.getWidth()\n-    imgH = srcImage.getHeight()\n-    pixW = min(imgW, pixW)\n-    pixH = min(imgH, pixH)\n-    pixULX = int(pixULX)\n-    pixULY = int(pixULY)\n-    pixW = int(pixW)\n-    pixH = int(pixH)\n-    log.debug(\"pixULX=%d pixULY=%d pixW=%d pixH=%d\", pixULX, pixULY, pixW, pixH)\n-    # bbox = afwGeom.Box2I(afwGeom.Point2I(pixULX, pixULY),\n-    #                    afwGeom.Extent2I(pixW, pixH))\n-    # img = butler.get(\"fpC_sub\", run=run, camcol=camcol,\n-    #                 field=field, filter=filterName, bbox=bbox)\n-    pixEndX = pixULX + pixW\n-    pixEndY = pixULY + pixH\n-    log.debug(\"pixULX=%d pixEndX=%d, pixULY=%d pixEndY=%d\",\n-              pixULX, pixEndX, pixULY, pixEndY)\n-    # Cut the sub image out of the image. See -\n-    # https://lsst-web.ncsa.illinois.edu/doxygen/x_masterDoxyDoc/afw_sec_py_image.html\n+    src_box = srcImage.getBBox()\n+    co_box = afwGeom.Box2I(xyCenter, afwGeom.Extent2I(int(width), int(height)))\n+    co_box.clip(src_box)\n+    pixULX = co_box.getBeginX()\n+    pixEndX = co_box.getEndX()\n+    pixULY = co_box.getBeginY()\n+    pixEndY = co_box.getEndY()\n+    log.debug(\"co_box pixULX={} pixEndX={} pixULY={} pixEndY={}\".format(pixULX, pixEndX,", "path": "python/lsst/dax/imgserv/locateImage.py", "position": null, "original_position": 203, "commit_id": "80cb4f205a55d5b88abf3f84257aeb3077939897", "original_commit_id": "f492de66ff262504dafcc2a4117a3f638c7f02f7", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Fixed", "created_at": "2017-03-15T18:29:42Z", "updated_at": "2017-03-16T22:32:48Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/18#discussion_r106247524", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/18", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106247524"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/18#discussion_r106247524"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/18"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/106247524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 106014593}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111621475", "pull_request_review_id": 32881468, "id": 111621475, "diff_hunk": "@@ -0,0 +1,18 @@\n+<!doctype html>", "path": "python/lsst/dax/imgserv/templates/layout.html", "position": null, "original_position": 1, "commit_id": "51f04bed3fa54d6b6a88e5396baab17adbba80d7", "original_commit_id": "abe0a5a1ef9004536dc66cca98a2d7104c2ee94f", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "These files look like they snuck in?", "created_at": "2017-04-14T19:09:44Z", "updated_at": "2017-04-21T21:04:45Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/19#discussion_r111621475", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/19", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111621475"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/19#discussion_r111621475"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/19"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111621475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111621497", "pull_request_review_id": 32881468, "id": 111621497, "diff_hunk": "@@ -0,0 +1,14 @@\n+{% extends \"layout.html\" %}", "path": "python/lsst/dax/imgserv/templates/login.html", "position": null, "original_position": 1, "commit_id": "51f04bed3fa54d6b6a88e5396baab17adbba80d7", "original_commit_id": "abe0a5a1ef9004536dc66cca98a2d7104c2ee94f", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "same here.", "created_at": "2017-04-14T19:09:53Z", "updated_at": "2017-04-21T21:04:45Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/19#discussion_r111621497", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/19", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111621497"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/19#discussion_r111621497"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/19"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111621497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111621516", "pull_request_review_id": 32881468, "id": 111621516, "diff_hunk": "@@ -0,0 +1,21 @@\n+{% extends \"layout.html\" %}", "path": "python/lsst/dax/imgserv/templates/show_entries.html", "position": null, "original_position": 1, "commit_id": "51f04bed3fa54d6b6a88e5396baab17adbba80d7", "original_commit_id": "abe0a5a1ef9004536dc66cca98a2d7104c2ee94f", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "same here - (snuck in)", "created_at": "2017-04-14T19:10:01Z", "updated_at": "2017-04-21T21:04:45Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/19#discussion_r111621516", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/19", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111621516"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/19#discussion_r111621516"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/19"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111621516/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111621846", "pull_request_review_id": 32881468, "id": 111621846, "diff_hunk": "@@ -0,0 +1,10 @@\n+{\n+        \"DEBUG\": true,\n+\t\"DB_CONFIG\": \"~/.lsst/dbAuth-dbServ.ini\",", "path": "python/lsst/dax/imgserv/config/config.json", "position": null, "original_position": 3, "commit_id": "51f04bed3fa54d6b6a88e5396baab17adbba80d7", "original_commit_id": "abe0a5a1ef9004536dc66cca98a2d7104c2ee94f", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "imgserv actually needs to be rewritten to use it's own config file in this case or this JSON file needs to not be in version control. The reasoning is that we now have a config file which... points to a config file. In the future, imgserv will have it's own config file, but for now it can either use it's own or webserv will configure itself. We should open jiras for figuring out how this should all actually work in the future, but that's somewhat entangled with nginx configuration and docker containers at the moment.", "created_at": "2017-04-14T19:12:51Z", "updated_at": "2017-04-21T21:04:45Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/19#discussion_r111621846", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/19", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111621846"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/19#discussion_r111621846"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/19"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111621846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111621960", "pull_request_review_id": 32881468, "id": 111621960, "diff_hunk": "@@ -400,12 +417,12 @@ def _getImageButler(self, qResults):\n     def _getMetadata(self, butler, qResults):\n         '''Return the metadata for the query results in qResults and a butler\n         '''\n-        for ln in qResults:\n-            tract = ln[2]\n-            patch = ln[3]\n-            filterName = ln[4]\n+        valid, tract, patch, filterName = _getKeysForButler2(qResults)\n+        if valid is True:", "path": "python/lsst/dax/imgserv/locateImage.py", "position": null, "original_position": 157, "commit_id": "51f04bed3fa54d6b6a88e5396baab17adbba80d7", "original_commit_id": "abe0a5a1ef9004536dc66cca98a2d7104c2ee94f", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "`if valid:` should suffice", "created_at": "2017-04-14T19:13:49Z", "updated_at": "2017-04-21T21:04:45Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/19#discussion_r111621960", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/19", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111621960"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/19#discussion_r111621960"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/19"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111621960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111622025", "pull_request_review_id": 32881468, "id": 111622025, "diff_hunk": "@@ -400,12 +417,12 @@ def _getImageButler(self, qResults):\n     def _getMetadata(self, butler, qResults):\n         '''Return the metadata for the query results in qResults and a butler\n         '''\n-        for ln in qResults:\n-            tract = ln[2]\n-            patch = ln[3]\n-            filterName = ln[4]\n+        valid, tract, patch, filterName = _getKeysForButler2(qResults)\n+        if valid is True:\n             metadata = butler.get(self.getImageDatasetMd(), tract=tract, patch=patch, filter=filterName)\n             return metadata\n+        else:", "path": "python/lsst/dax/imgserv/locateImage.py", "position": null, "original_position": 160, "commit_id": "51f04bed3fa54d6b6a88e5396baab17adbba80d7", "original_commit_id": "abe0a5a1ef9004536dc66cca98a2d7104c2ee94f", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "`else` is not necessary in this case - not sure what the coding standards are for this actually.", "created_at": "2017-04-14T19:14:29Z", "updated_at": "2017-04-21T21:04:45Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/19#discussion_r111622025", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/19", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111622025"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/19#discussion_r111622025"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/19"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111622025/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111829389", "pull_request_review_id": 33098838, "id": 111829389, "diff_hunk": "@@ -0,0 +1,18 @@\n+<!doctype html>", "path": "python/lsst/dax/imgserv/templates/layout.html", "position": null, "original_position": 1, "commit_id": "51f04bed3fa54d6b6a88e5396baab17adbba80d7", "original_commit_id": "abe0a5a1ef9004536dc66cca98a2d7104c2ee94f", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "flask example - removed.", "created_at": "2017-04-17T21:46:47Z", "updated_at": "2017-04-21T21:04:45Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/19#discussion_r111829389", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/19", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111829389"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/19#discussion_r111829389"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/19"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111829389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 111621475}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111829517", "pull_request_review_id": 33098965, "id": 111829517, "diff_hunk": "@@ -0,0 +1,14 @@\n+{% extends \"layout.html\" %}", "path": "python/lsst/dax/imgserv/templates/login.html", "position": null, "original_position": 1, "commit_id": "51f04bed3fa54d6b6a88e5396baab17adbba80d7", "original_commit_id": "abe0a5a1ef9004536dc66cca98a2d7104c2ee94f", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "flask example - removed.", "created_at": "2017-04-17T21:47:34Z", "updated_at": "2017-04-21T21:04:45Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/19#discussion_r111829517", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/19", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111829517"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/19#discussion_r111829517"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/19"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111829517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 111621497}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111829553", "pull_request_review_id": 33098997, "id": 111829553, "diff_hunk": "@@ -0,0 +1,21 @@\n+{% extends \"layout.html\" %}", "path": "python/lsst/dax/imgserv/templates/show_entries.html", "position": null, "original_position": 1, "commit_id": "51f04bed3fa54d6b6a88e5396baab17adbba80d7", "original_commit_id": "abe0a5a1ef9004536dc66cca98a2d7104c2ee94f", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "flask example - removed.", "created_at": "2017-04-17T21:47:44Z", "updated_at": "2017-04-21T21:04:45Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/19#discussion_r111829553", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/19", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111829553"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/19#discussion_r111829553"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/19"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111829553/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 111621516}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111830414", "pull_request_review_id": 33099920, "id": 111830414, "diff_hunk": "@@ -0,0 +1,10 @@\n+{\n+        \"DEBUG\": true,\n+\t\"DB_CONFIG\": \"~/.lsst/dbAuth-dbServ.ini\",", "path": "python/lsst/dax/imgserv/config/config.json", "position": null, "original_position": 3, "commit_id": "51f04bed3fa54d6b6a88e5396baab17adbba80d7", "original_commit_id": "abe0a5a1ef9004536dc66cca98a2d7104c2ee94f", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "These are among the core reasons why config handling has not been dealt with till now.  I think we can separate at least 2 major categories of config data - 1) public/general 2) private/sensitive.  My intention is all config data checked into GH should be in the 1st category.  Where to put them (nginx, docker image, webserv, imgserv) is another open issue that needs a further discussion.\r\n", "created_at": "2017-04-17T21:52:52Z", "updated_at": "2017-04-21T21:04:45Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/19#discussion_r111830414", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/19", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111830414"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/19#discussion_r111830414"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/19"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111830414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 111621846}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111830585", "pull_request_review_id": 33100106, "id": 111830585, "diff_hunk": "@@ -400,12 +417,12 @@ def _getImageButler(self, qResults):\n     def _getMetadata(self, butler, qResults):\n         '''Return the metadata for the query results in qResults and a butler\n         '''\n-        for ln in qResults:\n-            tract = ln[2]\n-            patch = ln[3]\n-            filterName = ln[4]\n+        valid, tract, patch, filterName = _getKeysForButler2(qResults)\n+        if valid is True:", "path": "python/lsst/dax/imgserv/locateImage.py", "position": null, "original_position": 157, "commit_id": "51f04bed3fa54d6b6a88e5396baab17adbba80d7", "original_commit_id": "abe0a5a1ef9004536dc66cca98a2d7104c2ee94f", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "fixed.", "created_at": "2017-04-17T21:53:43Z", "updated_at": "2017-04-21T21:04:45Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/19#discussion_r111830585", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/19", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111830585"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/19#discussion_r111830585"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/19"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111830585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 111621960}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111836336", "pull_request_review_id": 33106222, "id": 111836336, "diff_hunk": "@@ -400,12 +417,12 @@ def _getImageButler(self, qResults):\n     def _getMetadata(self, butler, qResults):\n         '''Return the metadata for the query results in qResults and a butler\n         '''\n-        for ln in qResults:\n-            tract = ln[2]\n-            patch = ln[3]\n-            filterName = ln[4]\n+        valid, tract, patch, filterName = _getKeysForButler2(qResults)\n+        if valid is True:\n             metadata = butler.get(self.getImageDatasetMd(), tract=tract, patch=patch, filter=filterName)\n             return metadata\n+        else:", "path": "python/lsst/dax/imgserv/locateImage.py", "position": null, "original_position": 160, "commit_id": "51f04bed3fa54d6b6a88e5396baab17adbba80d7", "original_commit_id": "abe0a5a1ef9004536dc66cca98a2d7104c2ee94f", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Removed all \"return None\" that are the last statements of their functions, in absence of any guidance from the DM Python Style Guide.", "created_at": "2017-04-17T22:32:37Z", "updated_at": "2017-04-21T21:04:45Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/19#discussion_r111836336", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/19", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111836336"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/19#discussion_r111836336"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/19"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/111836336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 111622025}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/114349247", "pull_request_review_id": 35807943, "id": 114349247, "diff_hunk": "@@ -189,12 +189,17 @@ def getImageByDataId(self, ra, dec, width, height, qResults, cutoutType=\"arcseco\n         xyWcs = wcs.skyToPixel(raDec)\n         x0 = img.getX0()\n         y0 = img.getY0()\n-        xyCenter = afwGeom.Point2I(int(xyWcs.getX() - x0), int(xyWcs.getY() - y0))\n+        xyCenter_x0 = xyWcs.getX() - x0\n+        xyCenter_y0 = xyWcs.getY() - y0\n+        # specify the center for the cutout\n+        pixULX = int(xyCenter_x0 - width/2.0)\n+        pixULY = int(xyCenter_y0 - height/2.0)\n+        xyCenter = afwGeom.Point2I(pixULX, pixULY)\n         if cutoutType == 'pixel':\n-            imgSub = _cutoutBoxPixels(img, xyCenter, width, height, self._log)\n+            imgSub = _cutoutBoxPixels(img, xyCenter, width, height, wcs, self._log)\n+            self._log.info(\"ra=%f dec=%f xyWcs=(%f,%f) x0y0=(%f,%f) xyCenter=(%f,%f)\", ra, \n+                    dec, xyWcs.getX(), xyWcs.getY(), x0, y0, xyCenter.getX(), xyCenter.getY())", "path": "python/lsst/dax/imgserv/locateImage.py", "position": null, "original_position": 15, "commit_id": "3e63a1ed9c8bdd98fac68bdfde8e15fae9f38480", "original_commit_id": "b42fa4ae13a7c736ccd3b01bd5caa4ab7502f26a", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "It looks like this log statement should probably come before the if statement.", "created_at": "2017-05-02T15:38:15Z", "updated_at": "2017-05-02T16:43:48Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/20#discussion_r114349247", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/20", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/114349247"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/20#discussion_r114349247"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/20"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/114349247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/114360310", "pull_request_review_id": 35819938, "id": 114360310, "diff_hunk": "@@ -189,12 +189,17 @@ def getImageByDataId(self, ra, dec, width, height, qResults, cutoutType=\"arcseco\n         xyWcs = wcs.skyToPixel(raDec)\n         x0 = img.getX0()\n         y0 = img.getY0()\n-        xyCenter = afwGeom.Point2I(int(xyWcs.getX() - x0), int(xyWcs.getY() - y0))\n+        xyCenter_x0 = xyWcs.getX() - x0\n+        xyCenter_y0 = xyWcs.getY() - y0\n+        # specify the center for the cutout\n+        pixULX = int(xyCenter_x0 - width/2.0)\n+        pixULY = int(xyCenter_y0 - height/2.0)\n+        xyCenter = afwGeom.Point2I(pixULX, pixULY)\n         if cutoutType == 'pixel':\n-            imgSub = _cutoutBoxPixels(img, xyCenter, width, height, self._log)\n+            imgSub = _cutoutBoxPixels(img, xyCenter, width, height, wcs, self._log)\n+            self._log.info(\"ra=%f dec=%f xyWcs=(%f,%f) x0y0=(%f,%f) xyCenter=(%f,%f)\", ra, \n+                    dec, xyWcs.getX(), xyWcs.getY(), x0, y0, xyCenter.getX(), xyCenter.getY())", "path": "python/lsst/dax/imgserv/locateImage.py", "position": null, "original_position": 15, "commit_id": "3e63a1ed9c8bdd98fac68bdfde8e15fae9f38480", "original_commit_id": "b42fa4ae13a7c736ccd3b01bd5caa4ab7502f26a", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Moved the log stmt ahead of the _cutoutBoxPixels() call for usefulness, but should stay inside the if stmt since the else case would circle back to if \"pixel\" block, so will be redundant to have it outside.", "created_at": "2017-05-02T16:20:47Z", "updated_at": "2017-05-02T16:43:48Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/20#discussion_r114360310", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/20", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/114360310"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/20#discussion_r114360310"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/20"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/114360310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 114349247}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123363800", "pull_request_review_id": 45560632, "id": 123363800, "diff_hunk": "@@ -0,0 +1,406 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+#\n+#\n+# This code is used to to select an image or a cutout of an image\n+# that has its center closest to the specified RA and Dec. The\n+# image is retrieved using the Data Butler.\n+\n+\"\"\"\n+This library module is used to locate and retrieve variolus image types and cutout \n+dimensions, via the appropriate Butler object passed in. \n+\n+@author: John Gates, SLAC\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny W. Lo, SLAC\n+\"\"\"\n+\n+import gzip\n+import math\n+import os\n+import sys\n+import time\n+\n+import lsst.afw\n+import lsst.afw.coord as afwCoord\n+import lsst.afw.display as afwDisplay\n+import lsst.afw.geom as afwGeom\n+import lsst.afw.image as afwImage\n+\n+import lsst.log as log\n+\n+\n+class ImageGetter:\n+    \"\"\"Provide operations to retrieve images including cutouts from the specified \n+    image repository through the passed-in butler.\n+\n+    \"\"\"\n+    \n+    def __init__(self, imageDS, logger):\n+        \"\"\" Instantiate ImageGetter object with butler, butler configuration,\n+        and connection for image metadata.\n+\n+        Parameters\n+        ----------\n+        imageDS : obj\n+                the data source configuration.\n+        logger : obj\n+                the logger to be used.\n+\n+        \"\"\"\n+        self._log = logger\n+        self._conn = imageDS.conn\n+        self._butler = imageDS.butler\n+        self._table = imageDS.table\n+        self._columns = imageDS.columns\n+        self._butler_keys = imageDS.butler_keys\n+        self._imagedataset_type = imageDS.butler_policy\n+\n+    def _get_imagefrombutler(self, qresults):\n+        # Retrieve the image through the Butler for this image type using the\n+        # query results as in 'qresults'.\n+        self._log.debug(\"_get_imagefrombutler qResults:{}\".format(qresults))\n+        id_type, keyvals = self._get_dataID_from_qr(qresults)\n+        if id_type == \"RCFF\": # rcff=run, camcol, field, filter\n+            run, camcol, field, filtername = keyvals\n+            log.debug(\"_get_imagefrombutler run={} camcol={} field={} \\\n+                    filter={}\".format(run, \n+                camcol, field, filtername))\n+            img = self._butler.get(self._imagedataset_type, run=run, camcol=camcol,\n+                    field=field, filter=filtername)\n+            return img \n+        elif id_type == \"TPF\": # tpf=tract, patch, filtername\n+            tract, patch, filtername = keyvals\n+            self._log.debug(\"deepCoadd _get_imagefrombutler tract={} patch={} \\\n+                    filtername={}\".format(tract, patch, filtername))\n+            img = self._butler.get(self._imagedataset_type, tract=tract,\n+                    patch=patch, filter=filtername)\n+            return img\n+\n+    def _get_imagedatasetMD(self):\n+        #Return the butler policy name to retrieve metadata\n+        return self._imagedataset_type + \"_md\"\n+\n+    def get_dataID_from_request(self, request):\n+        \"\"\"Returns the data ID, a dictionary of key value pairs, from the request with\n+        valid being true if there were entries for everything in butler keys.\n+        This will not work for floating point values.\n+\n+        \"\"\"\n+        valid = True\n+        ids = {}\n+        for key in self._butler_keys:\n+            value = request.args.get(key)\n+            if value is None:\n+                valid = False\n+            try:\n+                value = int(value)\n+            except:\n+                value = str(value)\n+            ids[key] = value\n+        return ids, valid\n+\n+    def get_imagebydataID(self, data_id):\n+        \"\"\"Retrieve and image from the butler by the image id values in the dictionary ids\n+        The needed values are specified in _butler_keys.\n+        \n+        \"\"\"\n+        img = self._butler.get(self._imagedataset_type, dataId=data_id)\n+        return img \n+\n+    def get_fullimage(self, ra, dec, filtername):\n+        \"\"\"Return an image containing ra and dec with filtername (optional)\n+        Returns None if no image is found.\n+        This function assumes the entire image is valid. (no overscan, etc.)\n+        \n+        \"\"\"\n+        img, metadata = self.get_fullimage_w_metadata(ra, dec, filtername)\n+        return img\n+\n+    def get_fullimage_w_metadata(self, ra, dec, filtername):\n+        \"\"\"Return an image containing ra, dec, and filtername (optional) with corresponding metadata.\n+        Returns None if no image is found.\n+        This function assumes the entire image is valid. (no overscan, etc.)\n+        \n+        \"\"\"\n+        res = self._find_nearestimage_containing(ra, dec, filtername)\n+        img = self._get_imagefrombutler(res)\n+        metadata = self._get_metadata(res)\n+        return img, metadata\n+\n+    def get_image(self, ra, dec, filtername, width, height, cutout_type=\"arcsecond\"):\n+        \"\"\"Return an image centered on ra and dec (in degrees) with dimensions\n+        height and width (in arcseconds).\n+        - Use filtername, ra, dec, width, and height to find an image from the database.\n+        \n+        \"\"\"\n+         # Find the nearest image to ra and dec.\n+        self._log.debug(\"getImage %f %f %f %f\", ra, dec, width, height)\n+        qresult = self._find_nearestimage_containing(ra, dec, filtername)\n+        return self._get_imagecutoutbydataID(ra, dec, width, height, qresult, cutout_type)\n+   \n+    def _get_imagecutoutbydataID(self, ra, dec, width, height, qresults, cutout_type=\"arcsecond\"):\n+        # Return an image by data ID through the butler.\n+        img = self._get_imagefrombutler(qresults)\n+        if img is None:\n+            # @todo html error handling see DM-1980\n+            return None\n+        # Get the metadata for the source image.\n+        metadata = self._get_metadata(qresults)\n+        img_co = self.get_cutoutimage(img, metadata, ra, dec, width, height,\n+                qresults, cutout_type)\n+        return img_co\n+\n+    def get_cutoutimage(self, src_img, metadata, ra, dec, width, height, qresults,\n+            cutout_type=\"arcsecond\"):\n+        \"\"\"Return an image centered on ra and dec (in degrees) with dimensions\n+        height and width (in arcseconds).\n+        Returns None if no image is found.\n+        This function assumes the entire image is valid. (no overscan, etc.)\n+        Sequence of events:\n+        - dataId is the image id for the butler\n+        - Use the results of the query to get an image and metadata from the butler.\n+        - Map ra, dec, width, and height to a box.\n+        - If a pixel cutout, trim the dimesions to fit in the source image and return.\n+        -     and return the cutout.\n+        - Otherwise, the height and width are in arcseconds.\n+        - Determine approximate pixels per arcsecond in the image by\n+             calculating the length of line from the upper right corner of\n+             the image to the lower left corner in pixels and arcseconds.\n+             (This will fail at or very near the pole.)\n+        - Use that to define a box for the cutout.\n+        - Trim the box so it is entirely within the source image.\n+        - Make and return the cutout.\n+        \n+        \"\"\"\n+        self._log.debug(\"getImage %f %f %f %f\", ra, dec, width, height)\n+        imgW = src_img.getWidth()\n+        imgH = src_img.getHeight()\n+        self._log.debug(\"imgW=%d imgH=%d\", imgW, imgH)\n+        wcs = lsst.afw.image.makeWcs(metadata, False)\n+        raDec = afwCoord.makeCoord(afwCoord.ICRS,\n+                                   ra * afwGeom.degrees,\n+                                   dec * afwGeom.degrees)\n+        xyWcs = wcs.skyToPixel(raDec)\n+        x0, y0 = src_img.getX0(), src_img.getY0()\n+        xyCenter_x = xyWcs.getX() - x0\n+        xyCenter_y = xyWcs.getY() - y0\n+        self._log.info(\"ra=%f dec=%f xyWcs=(%f,%f) x0y0=(%f,%f) xyCenter=(%f,%f)\", ra, \n+                dec, xyWcs.getX(), xyWcs.getY(), x0, y0, xyCenter_x, xyCenter_y)\n+        if cutout_type == 'pixel':\n+            img = self._cutoutbox_pixels(src_img, xyCenter_x, xyCenter_y, \n+                    width, height, wcs, self._log)\n+            return img\n+        # Determine approximate pixels per arcsec - find image corners in RA and Dec\n+        # and compare that distance with the number of pixels.\n+        raDecUL = wcs.pixelToSky(afwGeom.Point2D(0, 0))\n+        raDecLR = wcs.pixelToSky(afwGeom.Point2D(imgW - 1, imgH - 1))\n+        self._log.debug(\"raDecUL 0=%f 1=%f\", raDecUL[0].asDegrees(), raDecUL[1].asDegrees())\n+        self._log.debug(\"raDecLR 0=%f 1=%f\", raDecLR[0].asDegrees(), raDecLR[1].asDegrees())\n+        # length of a line from upper left (UL) to lower right (LR)\n+        decDist = raDecUL[1].asArcseconds() - raDecLR[1].asArcseconds()\n+        raLR = self._keep_within_180(raDecUL[0].asDegrees(), raDecLR[0].asDegrees())\n+        raLR *= 3600.0  # convert degrees to arcseconds\n+        # Correct distance in RA for the declination\n+        cosDec = math.cos(dec*afwGeom.degrees)\n+        raDist = cosDec * (raDecUL[0].asArcseconds() - raLR)\n+        raDecDist = math.sqrt(math.pow(decDist, 2.0) + math.pow(raDist, 2.0))\n+        self._log.debug(\"raDecDist=%f\", raDecDist)\n+        pixelDist = math.sqrt(math.pow(imgW, 2.0) + math.pow(imgH, 2.0))\n+        pixelPerArcsec = pixelDist/raDecDist\n+        self._log.debug(\"pixelPerArcsec=%f\", pixelPerArcsec)\n+        # Need Upper Left corner and dimensions for Box2I\n+        pixW = width*pixelPerArcsec\n+        pixH = height*pixelPerArcsec\n+        self._log.info(\"ra=%f dec=%f xyWcs=(%f,%f) x0y0=(%f,%f) xyCenter=(%f,%f)\", ra,\n+                dec, xyWcs.getX(), xyWcs.getY(), x0, y0, xyCenter_x, xyCenter_y)\n+        img = self._cutoutbox_pixels(src_img, xyCenter_x, xyCenter_y, pixW, pixH, wcs, self._log)\n+        return img\n+\n+    def _find_nearestimage_containing(self, ra, dec, filtername):", "path": "python/lsst/dax/imgserv/getimage/imagegetter.py", "position": null, "original_position": 238, "commit_id": "39555dea2e07bb46148f4fdcd33225a73ee26271", "original_commit_id": "c41fe87d1f754d123edce8a62956250d0b5e5590", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "This should be a callable that's passed to __init__ since it's dataset specific.", "created_at": "2017-06-21T20:57:39Z", "updated_at": "2017-06-22T22:23:12Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/23#discussion_r123363800", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/23", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123363800"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/23#discussion_r123363800"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/23"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123363800/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123363894", "pull_request_review_id": 45560632, "id": 123363894, "diff_hunk": "@@ -0,0 +1,406 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+#\n+#\n+# This code is used to to select an image or a cutout of an image\n+# that has its center closest to the specified RA and Dec. The\n+# image is retrieved using the Data Butler.\n+\n+\"\"\"\n+This library module is used to locate and retrieve variolus image types and cutout \n+dimensions, via the appropriate Butler object passed in. \n+\n+@author: John Gates, SLAC\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny W. Lo, SLAC\n+\"\"\"\n+\n+import gzip\n+import math\n+import os\n+import sys\n+import time\n+\n+import lsst.afw\n+import lsst.afw.coord as afwCoord\n+import lsst.afw.display as afwDisplay\n+import lsst.afw.geom as afwGeom\n+import lsst.afw.image as afwImage\n+\n+import lsst.log as log\n+\n+\n+class ImageGetter:\n+    \"\"\"Provide operations to retrieve images including cutouts from the specified \n+    image repository through the passed-in butler.\n+\n+    \"\"\"\n+    \n+    def __init__(self, imageDS, logger):\n+        \"\"\" Instantiate ImageGetter object with butler, butler configuration,\n+        and connection for image metadata.\n+\n+        Parameters\n+        ----------\n+        imageDS : obj\n+                the data source configuration.\n+        logger : obj\n+                the logger to be used.\n+\n+        \"\"\"\n+        self._log = logger\n+        self._conn = imageDS.conn\n+        self._butler = imageDS.butler\n+        self._table = imageDS.table\n+        self._columns = imageDS.columns\n+        self._butler_keys = imageDS.butler_keys\n+        self._imagedataset_type = imageDS.butler_policy\n+\n+    def _get_imagefrombutler(self, qresults):\n+        # Retrieve the image through the Butler for this image type using the\n+        # query results as in 'qresults'.\n+        self._log.debug(\"_get_imagefrombutler qResults:{}\".format(qresults))\n+        id_type, keyvals = self._get_dataID_from_qr(qresults)\n+        if id_type == \"RCFF\": # rcff=run, camcol, field, filter\n+            run, camcol, field, filtername = keyvals\n+            log.debug(\"_get_imagefrombutler run={} camcol={} field={} \\\n+                    filter={}\".format(run, \n+                camcol, field, filtername))\n+            img = self._butler.get(self._imagedataset_type, run=run, camcol=camcol,\n+                    field=field, filter=filtername)\n+            return img \n+        elif id_type == \"TPF\": # tpf=tract, patch, filtername\n+            tract, patch, filtername = keyvals\n+            self._log.debug(\"deepCoadd _get_imagefrombutler tract={} patch={} \\\n+                    filtername={}\".format(tract, patch, filtername))\n+            img = self._butler.get(self._imagedataset_type, tract=tract,\n+                    patch=patch, filter=filtername)\n+            return img\n+\n+    def _get_imagedatasetMD(self):\n+        #Return the butler policy name to retrieve metadata\n+        return self._imagedataset_type + \"_md\"\n+\n+    def get_dataID_from_request(self, request):\n+        \"\"\"Returns the data ID, a dictionary of key value pairs, from the request with\n+        valid being true if there were entries for everything in butler keys.\n+        This will not work for floating point values.\n+\n+        \"\"\"\n+        valid = True\n+        ids = {}\n+        for key in self._butler_keys:\n+            value = request.args.get(key)\n+            if value is None:\n+                valid = False\n+            try:\n+                value = int(value)\n+            except:\n+                value = str(value)\n+            ids[key] = value\n+        return ids, valid\n+\n+    def get_imagebydataID(self, data_id):\n+        \"\"\"Retrieve and image from the butler by the image id values in the dictionary ids\n+        The needed values are specified in _butler_keys.\n+        \n+        \"\"\"\n+        img = self._butler.get(self._imagedataset_type, dataId=data_id)\n+        return img \n+\n+    def get_fullimage(self, ra, dec, filtername):\n+        \"\"\"Return an image containing ra and dec with filtername (optional)\n+        Returns None if no image is found.\n+        This function assumes the entire image is valid. (no overscan, etc.)\n+        \n+        \"\"\"\n+        img, metadata = self.get_fullimage_w_metadata(ra, dec, filtername)\n+        return img\n+\n+    def get_fullimage_w_metadata(self, ra, dec, filtername):", "path": "python/lsst/dax/imgserv/getimage/imagegetter.py", "position": null, "original_position": 138, "commit_id": "39555dea2e07bb46148f4fdcd33225a73ee26271", "original_commit_id": "c41fe87d1f754d123edce8a62956250d0b5e5590", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "Remove this as it's unused. Move the lines up to get_fullimage", "created_at": "2017-06-21T20:58:03Z", "updated_at": "2017-06-22T22:23:12Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/23#discussion_r123363894", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/23", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123363894"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/23#discussion_r123363894"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/23"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123363894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123364125", "pull_request_review_id": 45560632, "id": 123364125, "diff_hunk": "@@ -0,0 +1,406 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+#\n+#\n+# This code is used to to select an image or a cutout of an image\n+# that has its center closest to the specified RA and Dec. The\n+# image is retrieved using the Data Butler.\n+\n+\"\"\"\n+This library module is used to locate and retrieve variolus image types and cutout \n+dimensions, via the appropriate Butler object passed in. \n+\n+@author: John Gates, SLAC\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny W. Lo, SLAC\n+\"\"\"\n+\n+import gzip\n+import math\n+import os\n+import sys\n+import time\n+\n+import lsst.afw\n+import lsst.afw.coord as afwCoord\n+import lsst.afw.display as afwDisplay\n+import lsst.afw.geom as afwGeom\n+import lsst.afw.image as afwImage\n+\n+import lsst.log as log\n+\n+\n+class ImageGetter:\n+    \"\"\"Provide operations to retrieve images including cutouts from the specified \n+    image repository through the passed-in butler.\n+\n+    \"\"\"\n+    \n+    def __init__(self, imageDS, logger):\n+        \"\"\" Instantiate ImageGetter object with butler, butler configuration,\n+        and connection for image metadata.\n+\n+        Parameters\n+        ----------\n+        imageDS : obj\n+                the data source configuration.\n+        logger : obj\n+                the logger to be used.\n+\n+        \"\"\"\n+        self._log = logger\n+        self._conn = imageDS.conn\n+        self._butler = imageDS.butler\n+        self._table = imageDS.table\n+        self._columns = imageDS.columns\n+        self._butler_keys = imageDS.butler_keys\n+        self._imagedataset_type = imageDS.butler_policy\n+\n+    def _get_imagefrombutler(self, qresults):\n+        # Retrieve the image through the Butler for this image type using the\n+        # query results as in 'qresults'.\n+        self._log.debug(\"_get_imagefrombutler qResults:{}\".format(qresults))\n+        id_type, keyvals = self._get_dataID_from_qr(qresults)\n+        if id_type == \"RCFF\": # rcff=run, camcol, field, filter\n+            run, camcol, field, filtername = keyvals\n+            log.debug(\"_get_imagefrombutler run={} camcol={} field={} \\\n+                    filter={}\".format(run, \n+                camcol, field, filtername))\n+            img = self._butler.get(self._imagedataset_type, run=run, camcol=camcol,\n+                    field=field, filter=filtername)\n+            return img \n+        elif id_type == \"TPF\": # tpf=tract, patch, filtername\n+            tract, patch, filtername = keyvals\n+            self._log.debug(\"deepCoadd _get_imagefrombutler tract={} patch={} \\\n+                    filtername={}\".format(tract, patch, filtername))\n+            img = self._butler.get(self._imagedataset_type, tract=tract,\n+                    patch=patch, filter=filtername)\n+            return img\n+\n+    def _get_imagedatasetMD(self):\n+        #Return the butler policy name to retrieve metadata\n+        return self._imagedataset_type + \"_md\"\n+\n+    def get_dataID_from_request(self, request):\n+        \"\"\"Returns the data ID, a dictionary of key value pairs, from the request with\n+        valid being true if there were entries for everything in butler keys.\n+        This will not work for floating point values.\n+\n+        \"\"\"\n+        valid = True\n+        ids = {}\n+        for key in self._butler_keys:\n+            value = request.args.get(key)\n+            if value is None:\n+                valid = False\n+            try:\n+                value = int(value)\n+            except:\n+                value = str(value)\n+            ids[key] = value\n+        return ids, valid\n+\n+    def get_imagebydataID(self, data_id):", "path": "python/lsst/dax/imgserv/getimage/imagegetter.py", "position": null, "original_position": 121, "commit_id": "39555dea2e07bb46148f4fdcd33225a73ee26271", "original_commit_id": "c41fe87d1f754d123edce8a62956250d0b5e5590", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "Suggestions for function name: from_data_id", "created_at": "2017-06-21T20:59:06Z", "updated_at": "2017-06-22T22:23:12Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/23#discussion_r123364125", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/23", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123364125"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/23#discussion_r123364125"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/23"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123364125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123364507", "pull_request_review_id": 45560632, "id": 123364507, "diff_hunk": "@@ -0,0 +1,406 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+#\n+#\n+# This code is used to to select an image or a cutout of an image\n+# that has its center closest to the specified RA and Dec. The\n+# image is retrieved using the Data Butler.\n+\n+\"\"\"\n+This library module is used to locate and retrieve variolus image types and cutout \n+dimensions, via the appropriate Butler object passed in. \n+\n+@author: John Gates, SLAC\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny W. Lo, SLAC\n+\"\"\"\n+\n+import gzip\n+import math\n+import os\n+import sys\n+import time\n+\n+import lsst.afw\n+import lsst.afw.coord as afwCoord\n+import lsst.afw.display as afwDisplay\n+import lsst.afw.geom as afwGeom\n+import lsst.afw.image as afwImage\n+\n+import lsst.log as log\n+\n+\n+class ImageGetter:\n+    \"\"\"Provide operations to retrieve images including cutouts from the specified \n+    image repository through the passed-in butler.\n+\n+    \"\"\"\n+    \n+    def __init__(self, imageDS, logger):\n+        \"\"\" Instantiate ImageGetter object with butler, butler configuration,\n+        and connection for image metadata.\n+\n+        Parameters\n+        ----------\n+        imageDS : obj\n+                the data source configuration.\n+        logger : obj\n+                the logger to be used.\n+\n+        \"\"\"\n+        self._log = logger\n+        self._conn = imageDS.conn\n+        self._butler = imageDS.butler\n+        self._table = imageDS.table\n+        self._columns = imageDS.columns\n+        self._butler_keys = imageDS.butler_keys\n+        self._imagedataset_type = imageDS.butler_policy\n+\n+    def _get_imagefrombutler(self, qresults):\n+        # Retrieve the image through the Butler for this image type using the\n+        # query results as in 'qresults'.\n+        self._log.debug(\"_get_imagefrombutler qResults:{}\".format(qresults))\n+        id_type, keyvals = self._get_dataID_from_qr(qresults)\n+        if id_type == \"RCFF\": # rcff=run, camcol, field, filter\n+            run, camcol, field, filtername = keyvals\n+            log.debug(\"_get_imagefrombutler run={} camcol={} field={} \\\n+                    filter={}\".format(run, \n+                camcol, field, filtername))\n+            img = self._butler.get(self._imagedataset_type, run=run, camcol=camcol,\n+                    field=field, filter=filtername)\n+            return img \n+        elif id_type == \"TPF\": # tpf=tract, patch, filtername\n+            tract, patch, filtername = keyvals\n+            self._log.debug(\"deepCoadd _get_imagefrombutler tract={} patch={} \\\n+                    filtername={}\".format(tract, patch, filtername))\n+            img = self._butler.get(self._imagedataset_type, tract=tract,\n+                    patch=patch, filter=filtername)\n+            return img\n+\n+    def _get_imagedatasetMD(self):\n+        #Return the butler policy name to retrieve metadata\n+        return self._imagedataset_type + \"_md\"\n+\n+    def get_dataID_from_request(self, request):\n+        \"\"\"Returns the data ID, a dictionary of key value pairs, from the request with\n+        valid being true if there were entries for everything in butler keys.\n+        This will not work for floating point values.\n+\n+        \"\"\"\n+        valid = True\n+        ids = {}\n+        for key in self._butler_keys:\n+            value = request.args.get(key)\n+            if value is None:\n+                valid = False\n+            try:\n+                value = int(value)\n+            except:\n+                value = str(value)\n+            ids[key] = value\n+        return ids, valid\n+\n+    def get_imagebydataID(self, data_id):\n+        \"\"\"Retrieve and image from the butler by the image id values in the dictionary ids\n+        The needed values are specified in _butler_keys.\n+        \n+        \"\"\"\n+        img = self._butler.get(self._imagedataset_type, dataId=data_id)\n+        return img \n+\n+    def get_fullimage(self, ra, dec, filtername):\n+        \"\"\"Return an image containing ra and dec with filtername (optional)\n+        Returns None if no image is found.\n+        This function assumes the entire image is valid. (no overscan, etc.)\n+        \n+        \"\"\"\n+        img, metadata = self.get_fullimage_w_metadata(ra, dec, filtername)\n+        return img\n+\n+    def get_fullimage_w_metadata(self, ra, dec, filtername):\n+        \"\"\"Return an image containing ra, dec, and filtername (optional) with corresponding metadata.\n+        Returns None if no image is found.\n+        This function assumes the entire image is valid. (no overscan, etc.)\n+        \n+        \"\"\"\n+        res = self._find_nearestimage_containing(ra, dec, filtername)\n+        img = self._get_imagefrombutler(res)\n+        metadata = self._get_metadata(res)\n+        return img, metadata\n+\n+    def get_image(self, ra, dec, filtername, width, height, cutout_type=\"arcsecond\"):", "path": "python/lsst/dax/imgserv/getimage/imagegetter.py", "position": null, "original_position": 149, "commit_id": "39555dea2e07bb46148f4fdcd33225a73ee26271", "original_commit_id": "c41fe87d1f754d123edce8a62956250d0b5e5590", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "Suggestion: cutout_from_data_id", "created_at": "2017-06-21T21:00:29Z", "updated_at": "2017-06-22T22:23:12Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/23#discussion_r123364507", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/23", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123364507"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/23#discussion_r123364507"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/23"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123364507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123364706", "pull_request_review_id": 45560632, "id": 123364706, "diff_hunk": "@@ -0,0 +1,406 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+#\n+#\n+# This code is used to to select an image or a cutout of an image\n+# that has its center closest to the specified RA and Dec. The\n+# image is retrieved using the Data Butler.\n+\n+\"\"\"\n+This library module is used to locate and retrieve variolus image types and cutout \n+dimensions, via the appropriate Butler object passed in. \n+\n+@author: John Gates, SLAC\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny W. Lo, SLAC\n+\"\"\"\n+\n+import gzip\n+import math\n+import os\n+import sys\n+import time\n+\n+import lsst.afw\n+import lsst.afw.coord as afwCoord\n+import lsst.afw.display as afwDisplay\n+import lsst.afw.geom as afwGeom\n+import lsst.afw.image as afwImage\n+\n+import lsst.log as log\n+\n+\n+class ImageGetter:\n+    \"\"\"Provide operations to retrieve images including cutouts from the specified \n+    image repository through the passed-in butler.\n+\n+    \"\"\"\n+    \n+    def __init__(self, imageDS, logger):\n+        \"\"\" Instantiate ImageGetter object with butler, butler configuration,\n+        and connection for image metadata.\n+\n+        Parameters\n+        ----------\n+        imageDS : obj\n+                the data source configuration.\n+        logger : obj\n+                the logger to be used.\n+\n+        \"\"\"\n+        self._log = logger\n+        self._conn = imageDS.conn\n+        self._butler = imageDS.butler\n+        self._table = imageDS.table\n+        self._columns = imageDS.columns\n+        self._butler_keys = imageDS.butler_keys\n+        self._imagedataset_type = imageDS.butler_policy\n+\n+    def _get_imagefrombutler(self, qresults):\n+        # Retrieve the image through the Butler for this image type using the\n+        # query results as in 'qresults'.\n+        self._log.debug(\"_get_imagefrombutler qResults:{}\".format(qresults))\n+        id_type, keyvals = self._get_dataID_from_qr(qresults)\n+        if id_type == \"RCFF\": # rcff=run, camcol, field, filter\n+            run, camcol, field, filtername = keyvals\n+            log.debug(\"_get_imagefrombutler run={} camcol={} field={} \\\n+                    filter={}\".format(run, \n+                camcol, field, filtername))\n+            img = self._butler.get(self._imagedataset_type, run=run, camcol=camcol,\n+                    field=field, filter=filtername)\n+            return img \n+        elif id_type == \"TPF\": # tpf=tract, patch, filtername\n+            tract, patch, filtername = keyvals\n+            self._log.debug(\"deepCoadd _get_imagefrombutler tract={} patch={} \\\n+                    filtername={}\".format(tract, patch, filtername))\n+            img = self._butler.get(self._imagedataset_type, tract=tract,\n+                    patch=patch, filter=filtername)\n+            return img\n+\n+    def _get_imagedatasetMD(self):\n+        #Return the butler policy name to retrieve metadata\n+        return self._imagedataset_type + \"_md\"\n+\n+    def get_dataID_from_request(self, request):\n+        \"\"\"Returns the data ID, a dictionary of key value pairs, from the request with\n+        valid being true if there were entries for everything in butler keys.\n+        This will not work for floating point values.\n+\n+        \"\"\"\n+        valid = True\n+        ids = {}\n+        for key in self._butler_keys:\n+            value = request.args.get(key)\n+            if value is None:\n+                valid = False\n+            try:\n+                value = int(value)\n+            except:\n+                value = str(value)\n+            ids[key] = value\n+        return ids, valid\n+\n+    def get_imagebydataID(self, data_id):\n+        \"\"\"Retrieve and image from the butler by the image id values in the dictionary ids\n+        The needed values are specified in _butler_keys.\n+        \n+        \"\"\"\n+        img = self._butler.get(self._imagedataset_type, dataId=data_id)\n+        return img \n+\n+    def get_fullimage(self, ra, dec, filtername):\n+        \"\"\"Return an image containing ra and dec with filtername (optional)\n+        Returns None if no image is found.\n+        This function assumes the entire image is valid. (no overscan, etc.)\n+        \n+        \"\"\"\n+        img, metadata = self.get_fullimage_w_metadata(ra, dec, filtername)\n+        return img\n+\n+    def get_fullimage_w_metadata(self, ra, dec, filtername):\n+        \"\"\"Return an image containing ra, dec, and filtername (optional) with corresponding metadata.\n+        Returns None if no image is found.\n+        This function assumes the entire image is valid. (no overscan, etc.)\n+        \n+        \"\"\"\n+        res = self._find_nearestimage_containing(ra, dec, filtername)\n+        img = self._get_imagefrombutler(res)\n+        metadata = self._get_metadata(res)\n+        return img, metadata\n+\n+    def get_image(self, ra, dec, filtername, width, height, cutout_type=\"arcsecond\"):\n+        \"\"\"Return an image centered on ra and dec (in degrees) with dimensions\n+        height and width (in arcseconds).\n+        - Use filtername, ra, dec, width, and height to find an image from the database.\n+        \n+        \"\"\"\n+         # Find the nearest image to ra and dec.\n+        self._log.debug(\"getImage %f %f %f %f\", ra, dec, width, height)\n+        qresult = self._find_nearestimage_containing(ra, dec, filtername)\n+        return self._get_imagecutoutbydataID(ra, dec, width, height, qresult, cutout_type)\n+   \n+    def _get_imagecutoutbydataID(self, ra, dec, width, height, qresults, cutout_type=\"arcsecond\"):\n+        # Return an image by data ID through the butler.\n+        img = self._get_imagefrombutler(qresults)\n+        if img is None:\n+            # @todo html error handling see DM-1980\n+            return None\n+        # Get the metadata for the source image.\n+        metadata = self._get_metadata(qresults)\n+        img_co = self.get_cutoutimage(img, metadata, ra, dec, width, height,\n+                qresults, cutout_type)\n+        return img_co\n+\n+    def get_cutoutimage(self, src_img, metadata, ra, dec, width, height, qresults,", "path": "python/lsst/dax/imgserv/getimage/imagegetter.py", "position": null, "original_position": 172, "commit_id": "39555dea2e07bb46148f4fdcd33225a73ee26271", "original_commit_id": "c41fe87d1f754d123edce8a62956250d0b5e5590", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "Suggestion: apply_cutout", "created_at": "2017-06-21T21:01:22Z", "updated_at": "2017-06-22T22:23:12Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/23#discussion_r123364706", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/23", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123364706"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/23#discussion_r123364706"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/23"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123364706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123364783", "pull_request_review_id": 45560632, "id": 123364783, "diff_hunk": "@@ -0,0 +1,406 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+#\n+#\n+# This code is used to to select an image or a cutout of an image\n+# that has its center closest to the specified RA and Dec. The\n+# image is retrieved using the Data Butler.\n+\n+\"\"\"\n+This library module is used to locate and retrieve variolus image types and cutout \n+dimensions, via the appropriate Butler object passed in. \n+\n+@author: John Gates, SLAC\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny W. Lo, SLAC\n+\"\"\"\n+\n+import gzip\n+import math\n+import os\n+import sys\n+import time\n+\n+import lsst.afw\n+import lsst.afw.coord as afwCoord\n+import lsst.afw.display as afwDisplay\n+import lsst.afw.geom as afwGeom\n+import lsst.afw.image as afwImage\n+\n+import lsst.log as log\n+\n+\n+class ImageGetter:\n+    \"\"\"Provide operations to retrieve images including cutouts from the specified \n+    image repository through the passed-in butler.\n+\n+    \"\"\"\n+    \n+    def __init__(self, imageDS, logger):\n+        \"\"\" Instantiate ImageGetter object with butler, butler configuration,\n+        and connection for image metadata.\n+\n+        Parameters\n+        ----------\n+        imageDS : obj\n+                the data source configuration.\n+        logger : obj\n+                the logger to be used.\n+\n+        \"\"\"\n+        self._log = logger\n+        self._conn = imageDS.conn\n+        self._butler = imageDS.butler\n+        self._table = imageDS.table\n+        self._columns = imageDS.columns\n+        self._butler_keys = imageDS.butler_keys\n+        self._imagedataset_type = imageDS.butler_policy\n+\n+    def _get_imagefrombutler(self, qresults):\n+        # Retrieve the image through the Butler for this image type using the\n+        # query results as in 'qresults'.\n+        self._log.debug(\"_get_imagefrombutler qResults:{}\".format(qresults))\n+        id_type, keyvals = self._get_dataID_from_qr(qresults)\n+        if id_type == \"RCFF\": # rcff=run, camcol, field, filter\n+            run, camcol, field, filtername = keyvals\n+            log.debug(\"_get_imagefrombutler run={} camcol={} field={} \\\n+                    filter={}\".format(run, \n+                camcol, field, filtername))\n+            img = self._butler.get(self._imagedataset_type, run=run, camcol=camcol,\n+                    field=field, filter=filtername)\n+            return img \n+        elif id_type == \"TPF\": # tpf=tract, patch, filtername\n+            tract, patch, filtername = keyvals\n+            self._log.debug(\"deepCoadd _get_imagefrombutler tract={} patch={} \\\n+                    filtername={}\".format(tract, patch, filtername))\n+            img = self._butler.get(self._imagedataset_type, tract=tract,\n+                    patch=patch, filter=filtername)\n+            return img\n+\n+    def _get_imagedatasetMD(self):\n+        #Return the butler policy name to retrieve metadata\n+        return self._imagedataset_type + \"_md\"\n+\n+    def get_dataID_from_request(self, request):\n+        \"\"\"Returns the data ID, a dictionary of key value pairs, from the request with\n+        valid being true if there were entries for everything in butler keys.\n+        This will not work for floating point values.\n+\n+        \"\"\"\n+        valid = True\n+        ids = {}\n+        for key in self._butler_keys:\n+            value = request.args.get(key)\n+            if value is None:\n+                valid = False\n+            try:\n+                value = int(value)\n+            except:\n+                value = str(value)\n+            ids[key] = value\n+        return ids, valid\n+\n+    def get_imagebydataID(self, data_id):\n+        \"\"\"Retrieve and image from the butler by the image id values in the dictionary ids\n+        The needed values are specified in _butler_keys.\n+        \n+        \"\"\"\n+        img = self._butler.get(self._imagedataset_type, dataId=data_id)\n+        return img \n+\n+    def get_fullimage(self, ra, dec, filtername):\n+        \"\"\"Return an image containing ra and dec with filtername (optional)\n+        Returns None if no image is found.\n+        This function assumes the entire image is valid. (no overscan, etc.)\n+        \n+        \"\"\"\n+        img, metadata = self.get_fullimage_w_metadata(ra, dec, filtername)\n+        return img\n+\n+    def get_fullimage_w_metadata(self, ra, dec, filtername):\n+        \"\"\"Return an image containing ra, dec, and filtername (optional) with corresponding metadata.\n+        Returns None if no image is found.\n+        This function assumes the entire image is valid. (no overscan, etc.)\n+        \n+        \"\"\"\n+        res = self._find_nearestimage_containing(ra, dec, filtername)\n+        img = self._get_imagefrombutler(res)\n+        metadata = self._get_metadata(res)\n+        return img, metadata\n+\n+    def get_image(self, ra, dec, filtername, width, height, cutout_type=\"arcsecond\"):\n+        \"\"\"Return an image centered on ra and dec (in degrees) with dimensions\n+        height and width (in arcseconds).\n+        - Use filtername, ra, dec, width, and height to find an image from the database.\n+        \n+        \"\"\"\n+         # Find the nearest image to ra and dec.\n+        self._log.debug(\"getImage %f %f %f %f\", ra, dec, width, height)\n+        qresult = self._find_nearestimage_containing(ra, dec, filtername)\n+        return self._get_imagecutoutbydataID(ra, dec, width, height, qresult, cutout_type)\n+   \n+    def _get_imagecutoutbydataID(self, ra, dec, width, height, qresults, cutout_type=\"arcsecond\"):\n+        # Return an image by data ID through the butler.\n+        img = self._get_imagefrombutler(qresults)\n+        if img is None:\n+            # @todo html error handling see DM-1980\n+            return None\n+        # Get the metadata for the source image.\n+        metadata = self._get_metadata(qresults)\n+        img_co = self.get_cutoutimage(img, metadata, ra, dec, width, height,\n+                qresults, cutout_type)\n+        return img_co\n+\n+    def get_cutoutimage(self, src_img, metadata, ra, dec, width, height, qresults,\n+            cutout_type=\"arcsecond\"):\n+        \"\"\"Return an image centered on ra and dec (in degrees) with dimensions\n+        height and width (in arcseconds).\n+        Returns None if no image is found.\n+        This function assumes the entire image is valid. (no overscan, etc.)\n+        Sequence of events:\n+        - dataId is the image id for the butler\n+        - Use the results of the query to get an image and metadata from the butler.\n+        - Map ra, dec, width, and height to a box.\n+        - If a pixel cutout, trim the dimesions to fit in the source image and return.\n+        -     and return the cutout.\n+        - Otherwise, the height and width are in arcseconds.\n+        - Determine approximate pixels per arcsecond in the image by\n+             calculating the length of line from the upper right corner of\n+             the image to the lower left corner in pixels and arcseconds.\n+             (This will fail at or very near the pole.)\n+        - Use that to define a box for the cutout.\n+        - Trim the box so it is entirely within the source image.\n+        - Make and return the cutout.\n+        \n+        \"\"\"\n+        self._log.debug(\"getImage %f %f %f %f\", ra, dec, width, height)\n+        imgW = src_img.getWidth()\n+        imgH = src_img.getHeight()\n+        self._log.debug(\"imgW=%d imgH=%d\", imgW, imgH)\n+        wcs = lsst.afw.image.makeWcs(metadata, False)\n+        raDec = afwCoord.makeCoord(afwCoord.ICRS,\n+                                   ra * afwGeom.degrees,\n+                                   dec * afwGeom.degrees)\n+        xyWcs = wcs.skyToPixel(raDec)\n+        x0, y0 = src_img.getX0(), src_img.getY0()\n+        xyCenter_x = xyWcs.getX() - x0\n+        xyCenter_y = xyWcs.getY() - y0\n+        self._log.info(\"ra=%f dec=%f xyWcs=(%f,%f) x0y0=(%f,%f) xyCenter=(%f,%f)\", ra, \n+                dec, xyWcs.getX(), xyWcs.getY(), x0, y0, xyCenter_x, xyCenter_y)\n+        if cutout_type == 'pixel':\n+            img = self._cutoutbox_pixels(src_img, xyCenter_x, xyCenter_y, \n+                    width, height, wcs, self._log)\n+            return img\n+        # Determine approximate pixels per arcsec - find image corners in RA and Dec\n+        # and compare that distance with the number of pixels.\n+        raDecUL = wcs.pixelToSky(afwGeom.Point2D(0, 0))\n+        raDecLR = wcs.pixelToSky(afwGeom.Point2D(imgW - 1, imgH - 1))\n+        self._log.debug(\"raDecUL 0=%f 1=%f\", raDecUL[0].asDegrees(), raDecUL[1].asDegrees())\n+        self._log.debug(\"raDecLR 0=%f 1=%f\", raDecLR[0].asDegrees(), raDecLR[1].asDegrees())\n+        # length of a line from upper left (UL) to lower right (LR)\n+        decDist = raDecUL[1].asArcseconds() - raDecLR[1].asArcseconds()\n+        raLR = self._keep_within_180(raDecUL[0].asDegrees(), raDecLR[0].asDegrees())\n+        raLR *= 3600.0  # convert degrees to arcseconds\n+        # Correct distance in RA for the declination\n+        cosDec = math.cos(dec*afwGeom.degrees)\n+        raDist = cosDec * (raDecUL[0].asArcseconds() - raLR)\n+        raDecDist = math.sqrt(math.pow(decDist, 2.0) + math.pow(raDist, 2.0))\n+        self._log.debug(\"raDecDist=%f\", raDecDist)\n+        pixelDist = math.sqrt(math.pow(imgW, 2.0) + math.pow(imgH, 2.0))\n+        pixelPerArcsec = pixelDist/raDecDist\n+        self._log.debug(\"pixelPerArcsec=%f\", pixelPerArcsec)\n+        # Need Upper Left corner and dimensions for Box2I\n+        pixW = width*pixelPerArcsec\n+        pixH = height*pixelPerArcsec\n+        self._log.info(\"ra=%f dec=%f xyWcs=(%f,%f) x0y0=(%f,%f) xyCenter=(%f,%f)\", ra,\n+                dec, xyWcs.getX(), xyWcs.getY(), x0, y0, xyCenter_x, xyCenter_y)\n+        img = self._cutoutbox_pixels(src_img, xyCenter_x, xyCenter_y, pixW, pixH, wcs, self._log)\n+        return img\n+\n+    def _find_nearestimage_containing(self, ra, dec, filtername):\n+        # Use the ra, dec, and filtername (optional) to find the image with its\n+        # center nearest ra and dec. It returns the result of the SQL query.\n+        cols = [\"ra\", \"decl\"]\n+        for s in self._columns:\n+            cols.append(s)\n+        dist = \"(power((ra - {}),2) + power((decl - {}),2)) as distance\".format(ra, dec)\n+        # More accurate distance calc on a sphere-if needed\n+        # SELECT *, 2 * ASIN(SQRT(POWER(SIN((raA)*pi()/180/2),2)+\n+        # COS(raA*pi()/180)*COS(abs(raB)*pi()/180)*\n+        # POWER(SIN((decB.lon)*pi()/180/2),2)) as distance\n+        # FROM <table> order by distance ;\n+        filterSql = \"\"\n+        if filtername:\n+            filterSql = \"filtername = '{}' AND\".format(filtername)\n+        cols.append(dist)\n+        col_str = \",\".join(cols)\n+        sql = (\"SELECT {} FROM {} WHERE {} \"\n+               \"scisql_s2PtInBox({}, {}, corner1Ra, corner1Decl, corner3Ra, corner3Decl) = 1 \"\n+               \"order by distance LIMIT 1\").format(col_str, self._table, filterSql, ra, dec)\n+        self._log.info(sql)\n+        self._log.info(\"findNearest sql={}\".format(sql))\n+        return self._conn.execute(sql).fetchall()\n+\n+    def _get_metadata(self, qresults):\n+        # Return the metadata for the query results in qResults and a butler.\n+        id_type, keyvals = self._get_dataID_from_qr(qresults)\n+        if id_type == \"RCFF\":\n+            run, camcol, field, filtername = keyvals \n+            return self._butler.get(self._get_imagedatasetMD(), run=run, camcol=camcol,\n+                    field=field, filter=filtername)\n+        elif id_type == \"TPF\":\n+            tract, patch, filtername = keyvals\n+            return self._butler.get(self._get_imagedatasetMD(), \n+                    tract=tract, patch=patch, filter=filtername)\n+               \n+    def get_imagecutout_from_scienceID(self, scienceID, ra, dec, width, height, units):", "path": "python/lsst/dax/imgserv/getimage/imagegetter.py", "position": null, "original_position": 274, "commit_id": "39555dea2e07bb46148f4fdcd33225a73ee26271", "original_commit_id": "c41fe87d1f754d123edce8a62956250d0b5e5590", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "cutout_from_science_id", "created_at": "2017-06-21T21:01:42Z", "updated_at": "2017-06-22T22:23:12Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/23#discussion_r123364783", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/23", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123364783"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/23#discussion_r123364783"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/23"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123364783/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123364858", "pull_request_review_id": 45560632, "id": 123364858, "diff_hunk": "@@ -0,0 +1,406 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+#\n+#\n+# This code is used to to select an image or a cutout of an image\n+# that has its center closest to the specified RA and Dec. The\n+# image is retrieved using the Data Butler.\n+\n+\"\"\"\n+This library module is used to locate and retrieve variolus image types and cutout \n+dimensions, via the appropriate Butler object passed in. \n+\n+@author: John Gates, SLAC\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny W. Lo, SLAC\n+\"\"\"\n+\n+import gzip\n+import math\n+import os\n+import sys\n+import time\n+\n+import lsst.afw\n+import lsst.afw.coord as afwCoord\n+import lsst.afw.display as afwDisplay\n+import lsst.afw.geom as afwGeom\n+import lsst.afw.image as afwImage\n+\n+import lsst.log as log\n+\n+\n+class ImageGetter:\n+    \"\"\"Provide operations to retrieve images including cutouts from the specified \n+    image repository through the passed-in butler.\n+\n+    \"\"\"\n+    \n+    def __init__(self, imageDS, logger):\n+        \"\"\" Instantiate ImageGetter object with butler, butler configuration,\n+        and connection for image metadata.\n+\n+        Parameters\n+        ----------\n+        imageDS : obj\n+                the data source configuration.\n+        logger : obj\n+                the logger to be used.\n+\n+        \"\"\"\n+        self._log = logger\n+        self._conn = imageDS.conn\n+        self._butler = imageDS.butler\n+        self._table = imageDS.table\n+        self._columns = imageDS.columns\n+        self._butler_keys = imageDS.butler_keys\n+        self._imagedataset_type = imageDS.butler_policy\n+\n+    def _get_imagefrombutler(self, qresults):\n+        # Retrieve the image through the Butler for this image type using the\n+        # query results as in 'qresults'.\n+        self._log.debug(\"_get_imagefrombutler qResults:{}\".format(qresults))\n+        id_type, keyvals = self._get_dataID_from_qr(qresults)\n+        if id_type == \"RCFF\": # rcff=run, camcol, field, filter\n+            run, camcol, field, filtername = keyvals\n+            log.debug(\"_get_imagefrombutler run={} camcol={} field={} \\\n+                    filter={}\".format(run, \n+                camcol, field, filtername))\n+            img = self._butler.get(self._imagedataset_type, run=run, camcol=camcol,\n+                    field=field, filter=filtername)\n+            return img \n+        elif id_type == \"TPF\": # tpf=tract, patch, filtername\n+            tract, patch, filtername = keyvals\n+            self._log.debug(\"deepCoadd _get_imagefrombutler tract={} patch={} \\\n+                    filtername={}\".format(tract, patch, filtername))\n+            img = self._butler.get(self._imagedataset_type, tract=tract,\n+                    patch=patch, filter=filtername)\n+            return img\n+\n+    def _get_imagedatasetMD(self):\n+        #Return the butler policy name to retrieve metadata\n+        return self._imagedataset_type + \"_md\"\n+\n+    def get_dataID_from_request(self, request):\n+        \"\"\"Returns the data ID, a dictionary of key value pairs, from the request with\n+        valid being true if there were entries for everything in butler keys.\n+        This will not work for floating point values.\n+\n+        \"\"\"\n+        valid = True\n+        ids = {}\n+        for key in self._butler_keys:\n+            value = request.args.get(key)\n+            if value is None:\n+                valid = False\n+            try:\n+                value = int(value)\n+            except:\n+                value = str(value)\n+            ids[key] = value\n+        return ids, valid\n+\n+    def get_imagebydataID(self, data_id):\n+        \"\"\"Retrieve and image from the butler by the image id values in the dictionary ids\n+        The needed values are specified in _butler_keys.\n+        \n+        \"\"\"\n+        img = self._butler.get(self._imagedataset_type, dataId=data_id)\n+        return img \n+\n+    def get_fullimage(self, ra, dec, filtername):\n+        \"\"\"Return an image containing ra and dec with filtername (optional)\n+        Returns None if no image is found.\n+        This function assumes the entire image is valid. (no overscan, etc.)\n+        \n+        \"\"\"\n+        img, metadata = self.get_fullimage_w_metadata(ra, dec, filtername)\n+        return img\n+\n+    def get_fullimage_w_metadata(self, ra, dec, filtername):\n+        \"\"\"Return an image containing ra, dec, and filtername (optional) with corresponding metadata.\n+        Returns None if no image is found.\n+        This function assumes the entire image is valid. (no overscan, etc.)\n+        \n+        \"\"\"\n+        res = self._find_nearestimage_containing(ra, dec, filtername)\n+        img = self._get_imagefrombutler(res)\n+        metadata = self._get_metadata(res)\n+        return img, metadata\n+\n+    def get_image(self, ra, dec, filtername, width, height, cutout_type=\"arcsecond\"):\n+        \"\"\"Return an image centered on ra and dec (in degrees) with dimensions\n+        height and width (in arcseconds).\n+        - Use filtername, ra, dec, width, and height to find an image from the database.\n+        \n+        \"\"\"\n+         # Find the nearest image to ra and dec.\n+        self._log.debug(\"getImage %f %f %f %f\", ra, dec, width, height)\n+        qresult = self._find_nearestimage_containing(ra, dec, filtername)\n+        return self._get_imagecutoutbydataID(ra, dec, width, height, qresult, cutout_type)\n+   \n+    def _get_imagecutoutbydataID(self, ra, dec, width, height, qresults, cutout_type=\"arcsecond\"):\n+        # Return an image by data ID through the butler.\n+        img = self._get_imagefrombutler(qresults)\n+        if img is None:\n+            # @todo html error handling see DM-1980\n+            return None\n+        # Get the metadata for the source image.\n+        metadata = self._get_metadata(qresults)\n+        img_co = self.get_cutoutimage(img, metadata, ra, dec, width, height,\n+                qresults, cutout_type)\n+        return img_co\n+\n+    def get_cutoutimage(self, src_img, metadata, ra, dec, width, height, qresults,\n+            cutout_type=\"arcsecond\"):\n+        \"\"\"Return an image centered on ra and dec (in degrees) with dimensions\n+        height and width (in arcseconds).\n+        Returns None if no image is found.\n+        This function assumes the entire image is valid. (no overscan, etc.)\n+        Sequence of events:\n+        - dataId is the image id for the butler\n+        - Use the results of the query to get an image and metadata from the butler.\n+        - Map ra, dec, width, and height to a box.\n+        - If a pixel cutout, trim the dimesions to fit in the source image and return.\n+        -     and return the cutout.\n+        - Otherwise, the height and width are in arcseconds.\n+        - Determine approximate pixels per arcsecond in the image by\n+             calculating the length of line from the upper right corner of\n+             the image to the lower left corner in pixels and arcseconds.\n+             (This will fail at or very near the pole.)\n+        - Use that to define a box for the cutout.\n+        - Trim the box so it is entirely within the source image.\n+        - Make and return the cutout.\n+        \n+        \"\"\"\n+        self._log.debug(\"getImage %f %f %f %f\", ra, dec, width, height)\n+        imgW = src_img.getWidth()\n+        imgH = src_img.getHeight()\n+        self._log.debug(\"imgW=%d imgH=%d\", imgW, imgH)\n+        wcs = lsst.afw.image.makeWcs(metadata, False)\n+        raDec = afwCoord.makeCoord(afwCoord.ICRS,\n+                                   ra * afwGeom.degrees,\n+                                   dec * afwGeom.degrees)\n+        xyWcs = wcs.skyToPixel(raDec)\n+        x0, y0 = src_img.getX0(), src_img.getY0()\n+        xyCenter_x = xyWcs.getX() - x0\n+        xyCenter_y = xyWcs.getY() - y0\n+        self._log.info(\"ra=%f dec=%f xyWcs=(%f,%f) x0y0=(%f,%f) xyCenter=(%f,%f)\", ra, \n+                dec, xyWcs.getX(), xyWcs.getY(), x0, y0, xyCenter_x, xyCenter_y)\n+        if cutout_type == 'pixel':\n+            img = self._cutoutbox_pixels(src_img, xyCenter_x, xyCenter_y, \n+                    width, height, wcs, self._log)\n+            return img\n+        # Determine approximate pixels per arcsec - find image corners in RA and Dec\n+        # and compare that distance with the number of pixels.\n+        raDecUL = wcs.pixelToSky(afwGeom.Point2D(0, 0))\n+        raDecLR = wcs.pixelToSky(afwGeom.Point2D(imgW - 1, imgH - 1))\n+        self._log.debug(\"raDecUL 0=%f 1=%f\", raDecUL[0].asDegrees(), raDecUL[1].asDegrees())\n+        self._log.debug(\"raDecLR 0=%f 1=%f\", raDecLR[0].asDegrees(), raDecLR[1].asDegrees())\n+        # length of a line from upper left (UL) to lower right (LR)\n+        decDist = raDecUL[1].asArcseconds() - raDecLR[1].asArcseconds()\n+        raLR = self._keep_within_180(raDecUL[0].asDegrees(), raDecLR[0].asDegrees())\n+        raLR *= 3600.0  # convert degrees to arcseconds\n+        # Correct distance in RA for the declination\n+        cosDec = math.cos(dec*afwGeom.degrees)\n+        raDist = cosDec * (raDecUL[0].asArcseconds() - raLR)\n+        raDecDist = math.sqrt(math.pow(decDist, 2.0) + math.pow(raDist, 2.0))\n+        self._log.debug(\"raDecDist=%f\", raDecDist)\n+        pixelDist = math.sqrt(math.pow(imgW, 2.0) + math.pow(imgH, 2.0))\n+        pixelPerArcsec = pixelDist/raDecDist\n+        self._log.debug(\"pixelPerArcsec=%f\", pixelPerArcsec)\n+        # Need Upper Left corner and dimensions for Box2I\n+        pixW = width*pixelPerArcsec\n+        pixH = height*pixelPerArcsec\n+        self._log.info(\"ra=%f dec=%f xyWcs=(%f,%f) x0y0=(%f,%f) xyCenter=(%f,%f)\", ra,\n+                dec, xyWcs.getX(), xyWcs.getY(), x0, y0, xyCenter_x, xyCenter_y)\n+        img = self._cutoutbox_pixels(src_img, xyCenter_x, xyCenter_y, pixW, pixH, wcs, self._log)\n+        return img\n+\n+    def _find_nearestimage_containing(self, ra, dec, filtername):\n+        # Use the ra, dec, and filtername (optional) to find the image with its\n+        # center nearest ra and dec. It returns the result of the SQL query.\n+        cols = [\"ra\", \"decl\"]\n+        for s in self._columns:\n+            cols.append(s)\n+        dist = \"(power((ra - {}),2) + power((decl - {}),2)) as distance\".format(ra, dec)\n+        # More accurate distance calc on a sphere-if needed\n+        # SELECT *, 2 * ASIN(SQRT(POWER(SIN((raA)*pi()/180/2),2)+\n+        # COS(raA*pi()/180)*COS(abs(raB)*pi()/180)*\n+        # POWER(SIN((decB.lon)*pi()/180/2),2)) as distance\n+        # FROM <table> order by distance ;\n+        filterSql = \"\"\n+        if filtername:\n+            filterSql = \"filtername = '{}' AND\".format(filtername)\n+        cols.append(dist)\n+        col_str = \",\".join(cols)\n+        sql = (\"SELECT {} FROM {} WHERE {} \"\n+               \"scisql_s2PtInBox({}, {}, corner1Ra, corner1Decl, corner3Ra, corner3Decl) = 1 \"\n+               \"order by distance LIMIT 1\").format(col_str, self._table, filterSql, ra, dec)\n+        self._log.info(sql)\n+        self._log.info(\"findNearest sql={}\".format(sql))\n+        return self._conn.execute(sql).fetchall()\n+\n+    def _get_metadata(self, qresults):\n+        # Return the metadata for the query results in qResults and a butler.\n+        id_type, keyvals = self._get_dataID_from_qr(qresults)\n+        if id_type == \"RCFF\":\n+            run, camcol, field, filtername = keyvals \n+            return self._butler.get(self._get_imagedatasetMD(), run=run, camcol=camcol,\n+                    field=field, filter=filtername)\n+        elif id_type == \"TPF\":\n+            tract, patch, filtername = keyvals\n+            return self._butler.get(self._get_imagedatasetMD(), \n+                    tract=tract, patch=patch, filter=filtername)\n+               \n+    def get_imagecutout_from_scienceID(self, scienceID, ra, dec, width, height, units):\n+        \"\"\" Get the image specified by id centered on (ra, dec) with width and height dimensions.\n+        Units (or cutout_type): \"arcsecond\", \"pixel\"\n+        \n+        \"\"\"\n+        # Get the corresponding image(data) id from the butler\n+        dataID, valid = self.get_dataID_from_scienceID(scienceID)\n+        self._log.debug(\"getimagecutout_from_scienceID dataID:{}\".format(dataID))\n+        if valid:\n+            # make id compatible with qResult type via custom wrapping\n+            c_qr = [\"CUSTOM_QR\", dataID]\n+            image = self._get_imagecutoutbydataID(ra, dec, width, height, c_qr, units)\n+            return image\n+\n+    def get_dataID_from_scienceID(self, scienceID):", "path": "python/lsst/dax/imgserv/getimage/imagegetter.py", "position": null, "original_position": 288, "commit_id": "39555dea2e07bb46148f4fdcd33225a73ee26271", "original_commit_id": "c41fe87d1f754d123edce8a62956250d0b5e5590", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "data_id_from_science_id", "created_at": "2017-06-21T21:02:00Z", "updated_at": "2017-06-22T22:23:12Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/23#discussion_r123364858", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/23", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123364858"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/23#discussion_r123364858"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/23"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123364858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123366876", "pull_request_review_id": 45560632, "id": 123366876, "diff_hunk": "@@ -0,0 +1,406 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+#\n+#\n+# This code is used to to select an image or a cutout of an image\n+# that has its center closest to the specified RA and Dec. The\n+# image is retrieved using the Data Butler.\n+\n+\"\"\"\n+This library module is used to locate and retrieve variolus image types and cutout \n+dimensions, via the appropriate Butler object passed in. \n+\n+@author: John Gates, SLAC\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny W. Lo, SLAC\n+\"\"\"\n+\n+import gzip\n+import math\n+import os\n+import sys\n+import time\n+\n+import lsst.afw\n+import lsst.afw.coord as afwCoord\n+import lsst.afw.display as afwDisplay\n+import lsst.afw.geom as afwGeom\n+import lsst.afw.image as afwImage\n+\n+import lsst.log as log\n+\n+\n+class ImageGetter:\n+    \"\"\"Provide operations to retrieve images including cutouts from the specified \n+    image repository through the passed-in butler.\n+\n+    \"\"\"\n+    \n+    def __init__(self, imageDS, logger):\n+        \"\"\" Instantiate ImageGetter object with butler, butler configuration,\n+        and connection for image metadata.\n+\n+        Parameters\n+        ----------\n+        imageDS : obj\n+                the data source configuration.\n+        logger : obj\n+                the logger to be used.\n+\n+        \"\"\"\n+        self._log = logger\n+        self._conn = imageDS.conn\n+        self._butler = imageDS.butler\n+        self._table = imageDS.table\n+        self._columns = imageDS.columns\n+        self._butler_keys = imageDS.butler_keys\n+        self._imagedataset_type = imageDS.butler_policy\n+\n+    def _get_imagefrombutler(self, qresults):\n+        # Retrieve the image through the Butler for this image type using the\n+        # query results as in 'qresults'.\n+        self._log.debug(\"_get_imagefrombutler qResults:{}\".format(qresults))\n+        id_type, keyvals = self._get_dataID_from_qr(qresults)\n+        if id_type == \"RCFF\": # rcff=run, camcol, field, filter\n+            run, camcol, field, filtername = keyvals\n+            log.debug(\"_get_imagefrombutler run={} camcol={} field={} \\\n+                    filter={}\".format(run, \n+                camcol, field, filtername))\n+            img = self._butler.get(self._imagedataset_type, run=run, camcol=camcol,\n+                    field=field, filter=filtername)\n+            return img \n+        elif id_type == \"TPF\": # tpf=tract, patch, filtername\n+            tract, patch, filtername = keyvals\n+            self._log.debug(\"deepCoadd _get_imagefrombutler tract={} patch={} \\\n+                    filtername={}\".format(tract, patch, filtername))\n+            img = self._butler.get(self._imagedataset_type, tract=tract,\n+                    patch=patch, filter=filtername)\n+            return img\n+\n+    def _get_imagedatasetMD(self):\n+        #Return the butler policy name to retrieve metadata\n+        return self._imagedataset_type + \"_md\"\n+\n+    def get_dataID_from_request(self, request):\n+        \"\"\"Returns the data ID, a dictionary of key value pairs, from the request with\n+        valid being true if there were entries for everything in butler keys.\n+        This will not work for floating point values.\n+\n+        \"\"\"\n+        valid = True\n+        ids = {}\n+        for key in self._butler_keys:\n+            value = request.args.get(key)\n+            if value is None:\n+                valid = False\n+            try:\n+                value = int(value)\n+            except:\n+                value = str(value)\n+            ids[key] = value\n+        return ids, valid\n+\n+    def get_imagebydataID(self, data_id):\n+        \"\"\"Retrieve and image from the butler by the image id values in the dictionary ids\n+        The needed values are specified in _butler_keys.\n+        \n+        \"\"\"\n+        img = self._butler.get(self._imagedataset_type, dataId=data_id)\n+        return img \n+\n+    def get_fullimage(self, ra, dec, filtername):\n+        \"\"\"Return an image containing ra and dec with filtername (optional)\n+        Returns None if no image is found.\n+        This function assumes the entire image is valid. (no overscan, etc.)\n+        \n+        \"\"\"\n+        img, metadata = self.get_fullimage_w_metadata(ra, dec, filtername)\n+        return img\n+\n+    def get_fullimage_w_metadata(self, ra, dec, filtername):\n+        \"\"\"Return an image containing ra, dec, and filtername (optional) with corresponding metadata.\n+        Returns None if no image is found.\n+        This function assumes the entire image is valid. (no overscan, etc.)\n+        \n+        \"\"\"\n+        res = self._find_nearestimage_containing(ra, dec, filtername)\n+        img = self._get_imagefrombutler(res)\n+        metadata = self._get_metadata(res)\n+        return img, metadata\n+\n+    def get_image(self, ra, dec, filtername, width, height, cutout_type=\"arcsecond\"):\n+        \"\"\"Return an image centered on ra and dec (in degrees) with dimensions\n+        height and width (in arcseconds).\n+        - Use filtername, ra, dec, width, and height to find an image from the database.\n+        \n+        \"\"\"\n+         # Find the nearest image to ra and dec.\n+        self._log.debug(\"getImage %f %f %f %f\", ra, dec, width, height)\n+        qresult = self._find_nearestimage_containing(ra, dec, filtername)\n+        return self._get_imagecutoutbydataID(ra, dec, width, height, qresult, cutout_type)\n+   \n+    def _get_imagecutoutbydataID(self, ra, dec, width, height, qresults, cutout_type=\"arcsecond\"):\n+        # Return an image by data ID through the butler.\n+        img = self._get_imagefrombutler(qresults)\n+        if img is None:\n+            # @todo html error handling see DM-1980\n+            return None\n+        # Get the metadata for the source image.\n+        metadata = self._get_metadata(qresults)\n+        img_co = self.get_cutoutimage(img, metadata, ra, dec, width, height,\n+                qresults, cutout_type)\n+        return img_co\n+\n+    def get_cutoutimage(self, src_img, metadata, ra, dec, width, height, qresults,\n+            cutout_type=\"arcsecond\"):\n+        \"\"\"Return an image centered on ra and dec (in degrees) with dimensions\n+        height and width (in arcseconds).\n+        Returns None if no image is found.\n+        This function assumes the entire image is valid. (no overscan, etc.)\n+        Sequence of events:\n+        - dataId is the image id for the butler\n+        - Use the results of the query to get an image and metadata from the butler.\n+        - Map ra, dec, width, and height to a box.\n+        - If a pixel cutout, trim the dimesions to fit in the source image and return.\n+        -     and return the cutout.\n+        - Otherwise, the height and width are in arcseconds.\n+        - Determine approximate pixels per arcsecond in the image by\n+             calculating the length of line from the upper right corner of\n+             the image to the lower left corner in pixels and arcseconds.\n+             (This will fail at or very near the pole.)\n+        - Use that to define a box for the cutout.\n+        - Trim the box so it is entirely within the source image.\n+        - Make and return the cutout.\n+        \n+        \"\"\"\n+        self._log.debug(\"getImage %f %f %f %f\", ra, dec, width, height)\n+        imgW = src_img.getWidth()\n+        imgH = src_img.getHeight()\n+        self._log.debug(\"imgW=%d imgH=%d\", imgW, imgH)\n+        wcs = lsst.afw.image.makeWcs(metadata, False)\n+        raDec = afwCoord.makeCoord(afwCoord.ICRS,\n+                                   ra * afwGeom.degrees,\n+                                   dec * afwGeom.degrees)\n+        xyWcs = wcs.skyToPixel(raDec)\n+        x0, y0 = src_img.getX0(), src_img.getY0()\n+        xyCenter_x = xyWcs.getX() - x0\n+        xyCenter_y = xyWcs.getY() - y0\n+        self._log.info(\"ra=%f dec=%f xyWcs=(%f,%f) x0y0=(%f,%f) xyCenter=(%f,%f)\", ra, \n+                dec, xyWcs.getX(), xyWcs.getY(), x0, y0, xyCenter_x, xyCenter_y)\n+        if cutout_type == 'pixel':\n+            img = self._cutoutbox_pixels(src_img, xyCenter_x, xyCenter_y, \n+                    width, height, wcs, self._log)\n+            return img\n+        # Determine approximate pixels per arcsec - find image corners in RA and Dec\n+        # and compare that distance with the number of pixels.\n+        raDecUL = wcs.pixelToSky(afwGeom.Point2D(0, 0))\n+        raDecLR = wcs.pixelToSky(afwGeom.Point2D(imgW - 1, imgH - 1))\n+        self._log.debug(\"raDecUL 0=%f 1=%f\", raDecUL[0].asDegrees(), raDecUL[1].asDegrees())\n+        self._log.debug(\"raDecLR 0=%f 1=%f\", raDecLR[0].asDegrees(), raDecLR[1].asDegrees())\n+        # length of a line from upper left (UL) to lower right (LR)\n+        decDist = raDecUL[1].asArcseconds() - raDecLR[1].asArcseconds()\n+        raLR = self._keep_within_180(raDecUL[0].asDegrees(), raDecLR[0].asDegrees())\n+        raLR *= 3600.0  # convert degrees to arcseconds\n+        # Correct distance in RA for the declination\n+        cosDec = math.cos(dec*afwGeom.degrees)\n+        raDist = cosDec * (raDecUL[0].asArcseconds() - raLR)\n+        raDecDist = math.sqrt(math.pow(decDist, 2.0) + math.pow(raDist, 2.0))\n+        self._log.debug(\"raDecDist=%f\", raDecDist)\n+        pixelDist = math.sqrt(math.pow(imgW, 2.0) + math.pow(imgH, 2.0))\n+        pixelPerArcsec = pixelDist/raDecDist\n+        self._log.debug(\"pixelPerArcsec=%f\", pixelPerArcsec)\n+        # Need Upper Left corner and dimensions for Box2I\n+        pixW = width*pixelPerArcsec\n+        pixH = height*pixelPerArcsec\n+        self._log.info(\"ra=%f dec=%f xyWcs=(%f,%f) x0y0=(%f,%f) xyCenter=(%f,%f)\", ra,\n+                dec, xyWcs.getX(), xyWcs.getY(), x0, y0, xyCenter_x, xyCenter_y)\n+        img = self._cutoutbox_pixels(src_img, xyCenter_x, xyCenter_y, pixW, pixH, wcs, self._log)\n+        return img\n+\n+    def _find_nearestimage_containing(self, ra, dec, filtername):", "path": "python/lsst/dax/imgserv/getimage/imagegetter.py", "position": null, "original_position": 238, "commit_id": "39555dea2e07bb46148f4fdcd33225a73ee26271", "original_commit_id": "c41fe87d1f754d123edce8a62956250d0b5e5590", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "This may also need to be performed by the butler.", "created_at": "2017-06-21T21:11:08Z", "updated_at": "2017-06-22T22:23:12Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/23#discussion_r123366876", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/23", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123366876"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/23#discussion_r123366876"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/23"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123366876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 123363800}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123633390", "pull_request_review_id": 45858250, "id": 123633390, "diff_hunk": "@@ -0,0 +1,406 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+#\n+#\n+# This code is used to to select an image or a cutout of an image\n+# that has its center closest to the specified RA and Dec. The\n+# image is retrieved using the Data Butler.\n+\n+\"\"\"\n+This library module is used to locate and retrieve variolus image types and cutout \n+dimensions, via the appropriate Butler object passed in. \n+\n+@author: John Gates, SLAC\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny W. Lo, SLAC\n+\"\"\"\n+\n+import gzip\n+import math\n+import os\n+import sys\n+import time\n+\n+import lsst.afw\n+import lsst.afw.coord as afwCoord\n+import lsst.afw.display as afwDisplay\n+import lsst.afw.geom as afwGeom\n+import lsst.afw.image as afwImage\n+\n+import lsst.log as log\n+\n+\n+class ImageGetter:\n+    \"\"\"Provide operations to retrieve images including cutouts from the specified \n+    image repository through the passed-in butler.\n+\n+    \"\"\"\n+    \n+    def __init__(self, imageDS, logger):\n+        \"\"\" Instantiate ImageGetter object with butler, butler configuration,\n+        and connection for image metadata.\n+\n+        Parameters\n+        ----------\n+        imageDS : obj\n+                the data source configuration.\n+        logger : obj\n+                the logger to be used.\n+\n+        \"\"\"\n+        self._log = logger\n+        self._conn = imageDS.conn\n+        self._butler = imageDS.butler\n+        self._table = imageDS.table\n+        self._columns = imageDS.columns\n+        self._butler_keys = imageDS.butler_keys\n+        self._imagedataset_type = imageDS.butler_policy\n+\n+    def _get_imagefrombutler(self, qresults):\n+        # Retrieve the image through the Butler for this image type using the\n+        # query results as in 'qresults'.\n+        self._log.debug(\"_get_imagefrombutler qResults:{}\".format(qresults))\n+        id_type, keyvals = self._get_dataID_from_qr(qresults)\n+        if id_type == \"RCFF\": # rcff=run, camcol, field, filter\n+            run, camcol, field, filtername = keyvals\n+            log.debug(\"_get_imagefrombutler run={} camcol={} field={} \\\n+                    filter={}\".format(run, \n+                camcol, field, filtername))\n+            img = self._butler.get(self._imagedataset_type, run=run, camcol=camcol,\n+                    field=field, filter=filtername)\n+            return img \n+        elif id_type == \"TPF\": # tpf=tract, patch, filtername\n+            tract, patch, filtername = keyvals\n+            self._log.debug(\"deepCoadd _get_imagefrombutler tract={} patch={} \\\n+                    filtername={}\".format(tract, patch, filtername))\n+            img = self._butler.get(self._imagedataset_type, tract=tract,\n+                    patch=patch, filter=filtername)\n+            return img\n+\n+    def _get_imagedatasetMD(self):\n+        #Return the butler policy name to retrieve metadata\n+        return self._imagedataset_type + \"_md\"\n+\n+    def get_dataID_from_request(self, request):\n+        \"\"\"Returns the data ID, a dictionary of key value pairs, from the request with\n+        valid being true if there were entries for everything in butler keys.\n+        This will not work for floating point values.\n+\n+        \"\"\"\n+        valid = True\n+        ids = {}\n+        for key in self._butler_keys:\n+            value = request.args.get(key)\n+            if value is None:\n+                valid = False\n+            try:\n+                value = int(value)\n+            except:\n+                value = str(value)\n+            ids[key] = value\n+        return ids, valid\n+\n+    def get_imagebydataID(self, data_id):\n+        \"\"\"Retrieve and image from the butler by the image id values in the dictionary ids\n+        The needed values are specified in _butler_keys.\n+        \n+        \"\"\"\n+        img = self._butler.get(self._imagedataset_type, dataId=data_id)\n+        return img \n+\n+    def get_fullimage(self, ra, dec, filtername):\n+        \"\"\"Return an image containing ra and dec with filtername (optional)\n+        Returns None if no image is found.\n+        This function assumes the entire image is valid. (no overscan, etc.)\n+        \n+        \"\"\"\n+        img, metadata = self.get_fullimage_w_metadata(ra, dec, filtername)\n+        return img\n+\n+    def get_fullimage_w_metadata(self, ra, dec, filtername):", "path": "python/lsst/dax/imgserv/getimage/imagegetter.py", "position": null, "original_position": 138, "commit_id": "39555dea2e07bb46148f4fdcd33225a73ee26271", "original_commit_id": "c41fe87d1f754d123edce8a62956250d0b5e5590", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Done.", "created_at": "2017-06-22T22:04:43Z", "updated_at": "2017-06-22T22:23:12Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/23#discussion_r123633390", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/23", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123633390"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/23#discussion_r123633390"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/23"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123633390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 123363894}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123633817", "pull_request_review_id": 45858719, "id": 123633817, "diff_hunk": "@@ -0,0 +1,406 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+#\n+#\n+# This code is used to to select an image or a cutout of an image\n+# that has its center closest to the specified RA and Dec. The\n+# image is retrieved using the Data Butler.\n+\n+\"\"\"\n+This library module is used to locate and retrieve variolus image types and cutout \n+dimensions, via the appropriate Butler object passed in. \n+\n+@author: John Gates, SLAC\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny W. Lo, SLAC\n+\"\"\"\n+\n+import gzip\n+import math\n+import os\n+import sys\n+import time\n+\n+import lsst.afw\n+import lsst.afw.coord as afwCoord\n+import lsst.afw.display as afwDisplay\n+import lsst.afw.geom as afwGeom\n+import lsst.afw.image as afwImage\n+\n+import lsst.log as log\n+\n+\n+class ImageGetter:\n+    \"\"\"Provide operations to retrieve images including cutouts from the specified \n+    image repository through the passed-in butler.\n+\n+    \"\"\"\n+    \n+    def __init__(self, imageDS, logger):\n+        \"\"\" Instantiate ImageGetter object with butler, butler configuration,\n+        and connection for image metadata.\n+\n+        Parameters\n+        ----------\n+        imageDS : obj\n+                the data source configuration.\n+        logger : obj\n+                the logger to be used.\n+\n+        \"\"\"\n+        self._log = logger\n+        self._conn = imageDS.conn\n+        self._butler = imageDS.butler\n+        self._table = imageDS.table\n+        self._columns = imageDS.columns\n+        self._butler_keys = imageDS.butler_keys\n+        self._imagedataset_type = imageDS.butler_policy\n+\n+    def _get_imagefrombutler(self, qresults):\n+        # Retrieve the image through the Butler for this image type using the\n+        # query results as in 'qresults'.\n+        self._log.debug(\"_get_imagefrombutler qResults:{}\".format(qresults))\n+        id_type, keyvals = self._get_dataID_from_qr(qresults)\n+        if id_type == \"RCFF\": # rcff=run, camcol, field, filter\n+            run, camcol, field, filtername = keyvals\n+            log.debug(\"_get_imagefrombutler run={} camcol={} field={} \\\n+                    filter={}\".format(run, \n+                camcol, field, filtername))\n+            img = self._butler.get(self._imagedataset_type, run=run, camcol=camcol,\n+                    field=field, filter=filtername)\n+            return img \n+        elif id_type == \"TPF\": # tpf=tract, patch, filtername\n+            tract, patch, filtername = keyvals\n+            self._log.debug(\"deepCoadd _get_imagefrombutler tract={} patch={} \\\n+                    filtername={}\".format(tract, patch, filtername))\n+            img = self._butler.get(self._imagedataset_type, tract=tract,\n+                    patch=patch, filter=filtername)\n+            return img\n+\n+    def _get_imagedatasetMD(self):\n+        #Return the butler policy name to retrieve metadata\n+        return self._imagedataset_type + \"_md\"\n+\n+    def get_dataID_from_request(self, request):\n+        \"\"\"Returns the data ID, a dictionary of key value pairs, from the request with\n+        valid being true if there were entries for everything in butler keys.\n+        This will not work for floating point values.\n+\n+        \"\"\"\n+        valid = True\n+        ids = {}\n+        for key in self._butler_keys:\n+            value = request.args.get(key)\n+            if value is None:\n+                valid = False\n+            try:\n+                value = int(value)\n+            except:\n+                value = str(value)\n+            ids[key] = value\n+        return ids, valid\n+\n+    def get_imagebydataID(self, data_id):\n+        \"\"\"Retrieve and image from the butler by the image id values in the dictionary ids\n+        The needed values are specified in _butler_keys.\n+        \n+        \"\"\"\n+        img = self._butler.get(self._imagedataset_type, dataId=data_id)\n+        return img \n+\n+    def get_fullimage(self, ra, dec, filtername):\n+        \"\"\"Return an image containing ra and dec with filtername (optional)\n+        Returns None if no image is found.\n+        This function assumes the entire image is valid. (no overscan, etc.)\n+        \n+        \"\"\"\n+        img, metadata = self.get_fullimage_w_metadata(ra, dec, filtername)\n+        return img\n+\n+    def get_fullimage_w_metadata(self, ra, dec, filtername):\n+        \"\"\"Return an image containing ra, dec, and filtername (optional) with corresponding metadata.\n+        Returns None if no image is found.\n+        This function assumes the entire image is valid. (no overscan, etc.)\n+        \n+        \"\"\"\n+        res = self._find_nearestimage_containing(ra, dec, filtername)\n+        img = self._get_imagefrombutler(res)\n+        metadata = self._get_metadata(res)\n+        return img, metadata\n+\n+    def get_image(self, ra, dec, filtername, width, height, cutout_type=\"arcsecond\"):", "path": "python/lsst/dax/imgserv/getimage/imagegetter.py", "position": null, "original_position": 149, "commit_id": "39555dea2e07bb46148f4fdcd33225a73ee26271", "original_commit_id": "c41fe87d1f754d123edce8a62956250d0b5e5590", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Using image_cutout considering data id is implicit, not explicit as through the parameters.", "created_at": "2017-06-22T22:07:23Z", "updated_at": "2017-06-22T22:23:12Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/23#discussion_r123633817", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/23", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123633817"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/23#discussion_r123633817"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/23"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123633817/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 123364507}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123634073", "pull_request_review_id": 45859004, "id": 123634073, "diff_hunk": "@@ -0,0 +1,406 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+#\n+#\n+# This code is used to to select an image or a cutout of an image\n+# that has its center closest to the specified RA and Dec. The\n+# image is retrieved using the Data Butler.\n+\n+\"\"\"\n+This library module is used to locate and retrieve variolus image types and cutout \n+dimensions, via the appropriate Butler object passed in. \n+\n+@author: John Gates, SLAC\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny W. Lo, SLAC\n+\"\"\"\n+\n+import gzip\n+import math\n+import os\n+import sys\n+import time\n+\n+import lsst.afw\n+import lsst.afw.coord as afwCoord\n+import lsst.afw.display as afwDisplay\n+import lsst.afw.geom as afwGeom\n+import lsst.afw.image as afwImage\n+\n+import lsst.log as log\n+\n+\n+class ImageGetter:\n+    \"\"\"Provide operations to retrieve images including cutouts from the specified \n+    image repository through the passed-in butler.\n+\n+    \"\"\"\n+    \n+    def __init__(self, imageDS, logger):\n+        \"\"\" Instantiate ImageGetter object with butler, butler configuration,\n+        and connection for image metadata.\n+\n+        Parameters\n+        ----------\n+        imageDS : obj\n+                the data source configuration.\n+        logger : obj\n+                the logger to be used.\n+\n+        \"\"\"\n+        self._log = logger\n+        self._conn = imageDS.conn\n+        self._butler = imageDS.butler\n+        self._table = imageDS.table\n+        self._columns = imageDS.columns\n+        self._butler_keys = imageDS.butler_keys\n+        self._imagedataset_type = imageDS.butler_policy\n+\n+    def _get_imagefrombutler(self, qresults):\n+        # Retrieve the image through the Butler for this image type using the\n+        # query results as in 'qresults'.\n+        self._log.debug(\"_get_imagefrombutler qResults:{}\".format(qresults))\n+        id_type, keyvals = self._get_dataID_from_qr(qresults)\n+        if id_type == \"RCFF\": # rcff=run, camcol, field, filter\n+            run, camcol, field, filtername = keyvals\n+            log.debug(\"_get_imagefrombutler run={} camcol={} field={} \\\n+                    filter={}\".format(run, \n+                camcol, field, filtername))\n+            img = self._butler.get(self._imagedataset_type, run=run, camcol=camcol,\n+                    field=field, filter=filtername)\n+            return img \n+        elif id_type == \"TPF\": # tpf=tract, patch, filtername\n+            tract, patch, filtername = keyvals\n+            self._log.debug(\"deepCoadd _get_imagefrombutler tract={} patch={} \\\n+                    filtername={}\".format(tract, patch, filtername))\n+            img = self._butler.get(self._imagedataset_type, tract=tract,\n+                    patch=patch, filter=filtername)\n+            return img\n+\n+    def _get_imagedatasetMD(self):\n+        #Return the butler policy name to retrieve metadata\n+        return self._imagedataset_type + \"_md\"\n+\n+    def get_dataID_from_request(self, request):\n+        \"\"\"Returns the data ID, a dictionary of key value pairs, from the request with\n+        valid being true if there were entries for everything in butler keys.\n+        This will not work for floating point values.\n+\n+        \"\"\"\n+        valid = True\n+        ids = {}\n+        for key in self._butler_keys:\n+            value = request.args.get(key)\n+            if value is None:\n+                valid = False\n+            try:\n+                value = int(value)\n+            except:\n+                value = str(value)\n+            ids[key] = value\n+        return ids, valid\n+\n+    def get_imagebydataID(self, data_id):\n+        \"\"\"Retrieve and image from the butler by the image id values in the dictionary ids\n+        The needed values are specified in _butler_keys.\n+        \n+        \"\"\"\n+        img = self._butler.get(self._imagedataset_type, dataId=data_id)\n+        return img \n+\n+    def get_fullimage(self, ra, dec, filtername):\n+        \"\"\"Return an image containing ra and dec with filtername (optional)\n+        Returns None if no image is found.\n+        This function assumes the entire image is valid. (no overscan, etc.)\n+        \n+        \"\"\"\n+        img, metadata = self.get_fullimage_w_metadata(ra, dec, filtername)\n+        return img\n+\n+    def get_fullimage_w_metadata(self, ra, dec, filtername):\n+        \"\"\"Return an image containing ra, dec, and filtername (optional) with corresponding metadata.\n+        Returns None if no image is found.\n+        This function assumes the entire image is valid. (no overscan, etc.)\n+        \n+        \"\"\"\n+        res = self._find_nearestimage_containing(ra, dec, filtername)\n+        img = self._get_imagefrombutler(res)\n+        metadata = self._get_metadata(res)\n+        return img, metadata\n+\n+    def get_image(self, ra, dec, filtername, width, height, cutout_type=\"arcsecond\"):\n+        \"\"\"Return an image centered on ra and dec (in degrees) with dimensions\n+        height and width (in arcseconds).\n+        - Use filtername, ra, dec, width, and height to find an image from the database.\n+        \n+        \"\"\"\n+         # Find the nearest image to ra and dec.\n+        self._log.debug(\"getImage %f %f %f %f\", ra, dec, width, height)\n+        qresult = self._find_nearestimage_containing(ra, dec, filtername)\n+        return self._get_imagecutoutbydataID(ra, dec, width, height, qresult, cutout_type)\n+   \n+    def _get_imagecutoutbydataID(self, ra, dec, width, height, qresults, cutout_type=\"arcsecond\"):\n+        # Return an image by data ID through the butler.\n+        img = self._get_imagefrombutler(qresults)\n+        if img is None:\n+            # @todo html error handling see DM-1980\n+            return None\n+        # Get the metadata for the source image.\n+        metadata = self._get_metadata(qresults)\n+        img_co = self.get_cutoutimage(img, metadata, ra, dec, width, height,\n+                qresults, cutout_type)\n+        return img_co\n+\n+    def get_cutoutimage(self, src_img, metadata, ra, dec, width, height, qresults,", "path": "python/lsst/dax/imgserv/getimage/imagegetter.py", "position": null, "original_position": 172, "commit_id": "39555dea2e07bb46148f4fdcd33225a73ee26271", "original_commit_id": "c41fe87d1f754d123edce8a62956250d0b5e5590", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Done.", "created_at": "2017-06-22T22:09:01Z", "updated_at": "2017-06-22T22:23:12Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/23#discussion_r123634073", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/23", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123634073"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/23#discussion_r123634073"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/23"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123634073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 123364706}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123634438", "pull_request_review_id": 45859395, "id": 123634438, "diff_hunk": "@@ -0,0 +1,406 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+#\n+#\n+# This code is used to to select an image or a cutout of an image\n+# that has its center closest to the specified RA and Dec. The\n+# image is retrieved using the Data Butler.\n+\n+\"\"\"\n+This library module is used to locate and retrieve variolus image types and cutout \n+dimensions, via the appropriate Butler object passed in. \n+\n+@author: John Gates, SLAC\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny W. Lo, SLAC\n+\"\"\"\n+\n+import gzip\n+import math\n+import os\n+import sys\n+import time\n+\n+import lsst.afw\n+import lsst.afw.coord as afwCoord\n+import lsst.afw.display as afwDisplay\n+import lsst.afw.geom as afwGeom\n+import lsst.afw.image as afwImage\n+\n+import lsst.log as log\n+\n+\n+class ImageGetter:\n+    \"\"\"Provide operations to retrieve images including cutouts from the specified \n+    image repository through the passed-in butler.\n+\n+    \"\"\"\n+    \n+    def __init__(self, imageDS, logger):\n+        \"\"\" Instantiate ImageGetter object with butler, butler configuration,\n+        and connection for image metadata.\n+\n+        Parameters\n+        ----------\n+        imageDS : obj\n+                the data source configuration.\n+        logger : obj\n+                the logger to be used.\n+\n+        \"\"\"\n+        self._log = logger\n+        self._conn = imageDS.conn\n+        self._butler = imageDS.butler\n+        self._table = imageDS.table\n+        self._columns = imageDS.columns\n+        self._butler_keys = imageDS.butler_keys\n+        self._imagedataset_type = imageDS.butler_policy\n+\n+    def _get_imagefrombutler(self, qresults):\n+        # Retrieve the image through the Butler for this image type using the\n+        # query results as in 'qresults'.\n+        self._log.debug(\"_get_imagefrombutler qResults:{}\".format(qresults))\n+        id_type, keyvals = self._get_dataID_from_qr(qresults)\n+        if id_type == \"RCFF\": # rcff=run, camcol, field, filter\n+            run, camcol, field, filtername = keyvals\n+            log.debug(\"_get_imagefrombutler run={} camcol={} field={} \\\n+                    filter={}\".format(run, \n+                camcol, field, filtername))\n+            img = self._butler.get(self._imagedataset_type, run=run, camcol=camcol,\n+                    field=field, filter=filtername)\n+            return img \n+        elif id_type == \"TPF\": # tpf=tract, patch, filtername\n+            tract, patch, filtername = keyvals\n+            self._log.debug(\"deepCoadd _get_imagefrombutler tract={} patch={} \\\n+                    filtername={}\".format(tract, patch, filtername))\n+            img = self._butler.get(self._imagedataset_type, tract=tract,\n+                    patch=patch, filter=filtername)\n+            return img\n+\n+    def _get_imagedatasetMD(self):\n+        #Return the butler policy name to retrieve metadata\n+        return self._imagedataset_type + \"_md\"\n+\n+    def get_dataID_from_request(self, request):\n+        \"\"\"Returns the data ID, a dictionary of key value pairs, from the request with\n+        valid being true if there were entries for everything in butler keys.\n+        This will not work for floating point values.\n+\n+        \"\"\"\n+        valid = True\n+        ids = {}\n+        for key in self._butler_keys:\n+            value = request.args.get(key)\n+            if value is None:\n+                valid = False\n+            try:\n+                value = int(value)\n+            except:\n+                value = str(value)\n+            ids[key] = value\n+        return ids, valid\n+\n+    def get_imagebydataID(self, data_id):\n+        \"\"\"Retrieve and image from the butler by the image id values in the dictionary ids\n+        The needed values are specified in _butler_keys.\n+        \n+        \"\"\"\n+        img = self._butler.get(self._imagedataset_type, dataId=data_id)\n+        return img \n+\n+    def get_fullimage(self, ra, dec, filtername):\n+        \"\"\"Return an image containing ra and dec with filtername (optional)\n+        Returns None if no image is found.\n+        This function assumes the entire image is valid. (no overscan, etc.)\n+        \n+        \"\"\"\n+        img, metadata = self.get_fullimage_w_metadata(ra, dec, filtername)\n+        return img\n+\n+    def get_fullimage_w_metadata(self, ra, dec, filtername):\n+        \"\"\"Return an image containing ra, dec, and filtername (optional) with corresponding metadata.\n+        Returns None if no image is found.\n+        This function assumes the entire image is valid. (no overscan, etc.)\n+        \n+        \"\"\"\n+        res = self._find_nearestimage_containing(ra, dec, filtername)\n+        img = self._get_imagefrombutler(res)\n+        metadata = self._get_metadata(res)\n+        return img, metadata\n+\n+    def get_image(self, ra, dec, filtername, width, height, cutout_type=\"arcsecond\"):\n+        \"\"\"Return an image centered on ra and dec (in degrees) with dimensions\n+        height and width (in arcseconds).\n+        - Use filtername, ra, dec, width, and height to find an image from the database.\n+        \n+        \"\"\"\n+         # Find the nearest image to ra and dec.\n+        self._log.debug(\"getImage %f %f %f %f\", ra, dec, width, height)\n+        qresult = self._find_nearestimage_containing(ra, dec, filtername)\n+        return self._get_imagecutoutbydataID(ra, dec, width, height, qresult, cutout_type)\n+   \n+    def _get_imagecutoutbydataID(self, ra, dec, width, height, qresults, cutout_type=\"arcsecond\"):\n+        # Return an image by data ID through the butler.\n+        img = self._get_imagefrombutler(qresults)\n+        if img is None:\n+            # @todo html error handling see DM-1980\n+            return None\n+        # Get the metadata for the source image.\n+        metadata = self._get_metadata(qresults)\n+        img_co = self.get_cutoutimage(img, metadata, ra, dec, width, height,\n+                qresults, cutout_type)\n+        return img_co\n+\n+    def get_cutoutimage(self, src_img, metadata, ra, dec, width, height, qresults,\n+            cutout_type=\"arcsecond\"):\n+        \"\"\"Return an image centered on ra and dec (in degrees) with dimensions\n+        height and width (in arcseconds).\n+        Returns None if no image is found.\n+        This function assumes the entire image is valid. (no overscan, etc.)\n+        Sequence of events:\n+        - dataId is the image id for the butler\n+        - Use the results of the query to get an image and metadata from the butler.\n+        - Map ra, dec, width, and height to a box.\n+        - If a pixel cutout, trim the dimesions to fit in the source image and return.\n+        -     and return the cutout.\n+        - Otherwise, the height and width are in arcseconds.\n+        - Determine approximate pixels per arcsecond in the image by\n+             calculating the length of line from the upper right corner of\n+             the image to the lower left corner in pixels and arcseconds.\n+             (This will fail at or very near the pole.)\n+        - Use that to define a box for the cutout.\n+        - Trim the box so it is entirely within the source image.\n+        - Make and return the cutout.\n+        \n+        \"\"\"\n+        self._log.debug(\"getImage %f %f %f %f\", ra, dec, width, height)\n+        imgW = src_img.getWidth()\n+        imgH = src_img.getHeight()\n+        self._log.debug(\"imgW=%d imgH=%d\", imgW, imgH)\n+        wcs = lsst.afw.image.makeWcs(metadata, False)\n+        raDec = afwCoord.makeCoord(afwCoord.ICRS,\n+                                   ra * afwGeom.degrees,\n+                                   dec * afwGeom.degrees)\n+        xyWcs = wcs.skyToPixel(raDec)\n+        x0, y0 = src_img.getX0(), src_img.getY0()\n+        xyCenter_x = xyWcs.getX() - x0\n+        xyCenter_y = xyWcs.getY() - y0\n+        self._log.info(\"ra=%f dec=%f xyWcs=(%f,%f) x0y0=(%f,%f) xyCenter=(%f,%f)\", ra, \n+                dec, xyWcs.getX(), xyWcs.getY(), x0, y0, xyCenter_x, xyCenter_y)\n+        if cutout_type == 'pixel':\n+            img = self._cutoutbox_pixels(src_img, xyCenter_x, xyCenter_y, \n+                    width, height, wcs, self._log)\n+            return img\n+        # Determine approximate pixels per arcsec - find image corners in RA and Dec\n+        # and compare that distance with the number of pixels.\n+        raDecUL = wcs.pixelToSky(afwGeom.Point2D(0, 0))\n+        raDecLR = wcs.pixelToSky(afwGeom.Point2D(imgW - 1, imgH - 1))\n+        self._log.debug(\"raDecUL 0=%f 1=%f\", raDecUL[0].asDegrees(), raDecUL[1].asDegrees())\n+        self._log.debug(\"raDecLR 0=%f 1=%f\", raDecLR[0].asDegrees(), raDecLR[1].asDegrees())\n+        # length of a line from upper left (UL) to lower right (LR)\n+        decDist = raDecUL[1].asArcseconds() - raDecLR[1].asArcseconds()\n+        raLR = self._keep_within_180(raDecUL[0].asDegrees(), raDecLR[0].asDegrees())\n+        raLR *= 3600.0  # convert degrees to arcseconds\n+        # Correct distance in RA for the declination\n+        cosDec = math.cos(dec*afwGeom.degrees)\n+        raDist = cosDec * (raDecUL[0].asArcseconds() - raLR)\n+        raDecDist = math.sqrt(math.pow(decDist, 2.0) + math.pow(raDist, 2.0))\n+        self._log.debug(\"raDecDist=%f\", raDecDist)\n+        pixelDist = math.sqrt(math.pow(imgW, 2.0) + math.pow(imgH, 2.0))\n+        pixelPerArcsec = pixelDist/raDecDist\n+        self._log.debug(\"pixelPerArcsec=%f\", pixelPerArcsec)\n+        # Need Upper Left corner and dimensions for Box2I\n+        pixW = width*pixelPerArcsec\n+        pixH = height*pixelPerArcsec\n+        self._log.info(\"ra=%f dec=%f xyWcs=(%f,%f) x0y0=(%f,%f) xyCenter=(%f,%f)\", ra,\n+                dec, xyWcs.getX(), xyWcs.getY(), x0, y0, xyCenter_x, xyCenter_y)\n+        img = self._cutoutbox_pixels(src_img, xyCenter_x, xyCenter_y, pixW, pixH, wcs, self._log)\n+        return img\n+\n+    def _find_nearestimage_containing(self, ra, dec, filtername):", "path": "python/lsst/dax/imgserv/getimage/imagegetter.py", "position": null, "original_position": 238, "commit_id": "39555dea2e07bb46148f4fdcd33225a73ee26271", "original_commit_id": "c41fe87d1f754d123edce8a62956250d0b5e5590", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "_find_nearestimage_containing() has been pulled out into new MetaservGet clas at same level as where Butler got instantiated.", "created_at": "2017-06-22T22:11:28Z", "updated_at": "2017-06-22T22:23:12Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/23#discussion_r123634438", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/23", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123634438"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/23#discussion_r123634438"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/23"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123634438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 123363800}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123634470", "pull_request_review_id": 45859436, "id": 123634470, "diff_hunk": "@@ -0,0 +1,406 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+#\n+#\n+# This code is used to to select an image or a cutout of an image\n+# that has its center closest to the specified RA and Dec. The\n+# image is retrieved using the Data Butler.\n+\n+\"\"\"\n+This library module is used to locate and retrieve variolus image types and cutout \n+dimensions, via the appropriate Butler object passed in. \n+\n+@author: John Gates, SLAC\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny W. Lo, SLAC\n+\"\"\"\n+\n+import gzip\n+import math\n+import os\n+import sys\n+import time\n+\n+import lsst.afw\n+import lsst.afw.coord as afwCoord\n+import lsst.afw.display as afwDisplay\n+import lsst.afw.geom as afwGeom\n+import lsst.afw.image as afwImage\n+\n+import lsst.log as log\n+\n+\n+class ImageGetter:\n+    \"\"\"Provide operations to retrieve images including cutouts from the specified \n+    image repository through the passed-in butler.\n+\n+    \"\"\"\n+    \n+    def __init__(self, imageDS, logger):\n+        \"\"\" Instantiate ImageGetter object with butler, butler configuration,\n+        and connection for image metadata.\n+\n+        Parameters\n+        ----------\n+        imageDS : obj\n+                the data source configuration.\n+        logger : obj\n+                the logger to be used.\n+\n+        \"\"\"\n+        self._log = logger\n+        self._conn = imageDS.conn\n+        self._butler = imageDS.butler\n+        self._table = imageDS.table\n+        self._columns = imageDS.columns\n+        self._butler_keys = imageDS.butler_keys\n+        self._imagedataset_type = imageDS.butler_policy\n+\n+    def _get_imagefrombutler(self, qresults):\n+        # Retrieve the image through the Butler for this image type using the\n+        # query results as in 'qresults'.\n+        self._log.debug(\"_get_imagefrombutler qResults:{}\".format(qresults))\n+        id_type, keyvals = self._get_dataID_from_qr(qresults)\n+        if id_type == \"RCFF\": # rcff=run, camcol, field, filter\n+            run, camcol, field, filtername = keyvals\n+            log.debug(\"_get_imagefrombutler run={} camcol={} field={} \\\n+                    filter={}\".format(run, \n+                camcol, field, filtername))\n+            img = self._butler.get(self._imagedataset_type, run=run, camcol=camcol,\n+                    field=field, filter=filtername)\n+            return img \n+        elif id_type == \"TPF\": # tpf=tract, patch, filtername\n+            tract, patch, filtername = keyvals\n+            self._log.debug(\"deepCoadd _get_imagefrombutler tract={} patch={} \\\n+                    filtername={}\".format(tract, patch, filtername))\n+            img = self._butler.get(self._imagedataset_type, tract=tract,\n+                    patch=patch, filter=filtername)\n+            return img\n+\n+    def _get_imagedatasetMD(self):\n+        #Return the butler policy name to retrieve metadata\n+        return self._imagedataset_type + \"_md\"\n+\n+    def get_dataID_from_request(self, request):\n+        \"\"\"Returns the data ID, a dictionary of key value pairs, from the request with\n+        valid being true if there were entries for everything in butler keys.\n+        This will not work for floating point values.\n+\n+        \"\"\"\n+        valid = True\n+        ids = {}\n+        for key in self._butler_keys:\n+            value = request.args.get(key)\n+            if value is None:\n+                valid = False\n+            try:\n+                value = int(value)\n+            except:\n+                value = str(value)\n+            ids[key] = value\n+        return ids, valid\n+\n+    def get_imagebydataID(self, data_id):\n+        \"\"\"Retrieve and image from the butler by the image id values in the dictionary ids\n+        The needed values are specified in _butler_keys.\n+        \n+        \"\"\"\n+        img = self._butler.get(self._imagedataset_type, dataId=data_id)\n+        return img \n+\n+    def get_fullimage(self, ra, dec, filtername):\n+        \"\"\"Return an image containing ra and dec with filtername (optional)\n+        Returns None if no image is found.\n+        This function assumes the entire image is valid. (no overscan, etc.)\n+        \n+        \"\"\"\n+        img, metadata = self.get_fullimage_w_metadata(ra, dec, filtername)\n+        return img\n+\n+    def get_fullimage_w_metadata(self, ra, dec, filtername):\n+        \"\"\"Return an image containing ra, dec, and filtername (optional) with corresponding metadata.\n+        Returns None if no image is found.\n+        This function assumes the entire image is valid. (no overscan, etc.)\n+        \n+        \"\"\"\n+        res = self._find_nearestimage_containing(ra, dec, filtername)\n+        img = self._get_imagefrombutler(res)\n+        metadata = self._get_metadata(res)\n+        return img, metadata\n+\n+    def get_image(self, ra, dec, filtername, width, height, cutout_type=\"arcsecond\"):\n+        \"\"\"Return an image centered on ra and dec (in degrees) with dimensions\n+        height and width (in arcseconds).\n+        - Use filtername, ra, dec, width, and height to find an image from the database.\n+        \n+        \"\"\"\n+         # Find the nearest image to ra and dec.\n+        self._log.debug(\"getImage %f %f %f %f\", ra, dec, width, height)\n+        qresult = self._find_nearestimage_containing(ra, dec, filtername)\n+        return self._get_imagecutoutbydataID(ra, dec, width, height, qresult, cutout_type)\n+   \n+    def _get_imagecutoutbydataID(self, ra, dec, width, height, qresults, cutout_type=\"arcsecond\"):\n+        # Return an image by data ID through the butler.\n+        img = self._get_imagefrombutler(qresults)\n+        if img is None:\n+            # @todo html error handling see DM-1980\n+            return None\n+        # Get the metadata for the source image.\n+        metadata = self._get_metadata(qresults)\n+        img_co = self.get_cutoutimage(img, metadata, ra, dec, width, height,\n+                qresults, cutout_type)\n+        return img_co\n+\n+    def get_cutoutimage(self, src_img, metadata, ra, dec, width, height, qresults,\n+            cutout_type=\"arcsecond\"):\n+        \"\"\"Return an image centered on ra and dec (in degrees) with dimensions\n+        height and width (in arcseconds).\n+        Returns None if no image is found.\n+        This function assumes the entire image is valid. (no overscan, etc.)\n+        Sequence of events:\n+        - dataId is the image id for the butler\n+        - Use the results of the query to get an image and metadata from the butler.\n+        - Map ra, dec, width, and height to a box.\n+        - If a pixel cutout, trim the dimesions to fit in the source image and return.\n+        -     and return the cutout.\n+        - Otherwise, the height and width are in arcseconds.\n+        - Determine approximate pixels per arcsecond in the image by\n+             calculating the length of line from the upper right corner of\n+             the image to the lower left corner in pixels and arcseconds.\n+             (This will fail at or very near the pole.)\n+        - Use that to define a box for the cutout.\n+        - Trim the box so it is entirely within the source image.\n+        - Make and return the cutout.\n+        \n+        \"\"\"\n+        self._log.debug(\"getImage %f %f %f %f\", ra, dec, width, height)\n+        imgW = src_img.getWidth()\n+        imgH = src_img.getHeight()\n+        self._log.debug(\"imgW=%d imgH=%d\", imgW, imgH)\n+        wcs = lsst.afw.image.makeWcs(metadata, False)\n+        raDec = afwCoord.makeCoord(afwCoord.ICRS,\n+                                   ra * afwGeom.degrees,\n+                                   dec * afwGeom.degrees)\n+        xyWcs = wcs.skyToPixel(raDec)\n+        x0, y0 = src_img.getX0(), src_img.getY0()\n+        xyCenter_x = xyWcs.getX() - x0\n+        xyCenter_y = xyWcs.getY() - y0\n+        self._log.info(\"ra=%f dec=%f xyWcs=(%f,%f) x0y0=(%f,%f) xyCenter=(%f,%f)\", ra, \n+                dec, xyWcs.getX(), xyWcs.getY(), x0, y0, xyCenter_x, xyCenter_y)\n+        if cutout_type == 'pixel':\n+            img = self._cutoutbox_pixels(src_img, xyCenter_x, xyCenter_y, \n+                    width, height, wcs, self._log)\n+            return img\n+        # Determine approximate pixels per arcsec - find image corners in RA and Dec\n+        # and compare that distance with the number of pixels.\n+        raDecUL = wcs.pixelToSky(afwGeom.Point2D(0, 0))\n+        raDecLR = wcs.pixelToSky(afwGeom.Point2D(imgW - 1, imgH - 1))\n+        self._log.debug(\"raDecUL 0=%f 1=%f\", raDecUL[0].asDegrees(), raDecUL[1].asDegrees())\n+        self._log.debug(\"raDecLR 0=%f 1=%f\", raDecLR[0].asDegrees(), raDecLR[1].asDegrees())\n+        # length of a line from upper left (UL) to lower right (LR)\n+        decDist = raDecUL[1].asArcseconds() - raDecLR[1].asArcseconds()\n+        raLR = self._keep_within_180(raDecUL[0].asDegrees(), raDecLR[0].asDegrees())\n+        raLR *= 3600.0  # convert degrees to arcseconds\n+        # Correct distance in RA for the declination\n+        cosDec = math.cos(dec*afwGeom.degrees)\n+        raDist = cosDec * (raDecUL[0].asArcseconds() - raLR)\n+        raDecDist = math.sqrt(math.pow(decDist, 2.0) + math.pow(raDist, 2.0))\n+        self._log.debug(\"raDecDist=%f\", raDecDist)\n+        pixelDist = math.sqrt(math.pow(imgW, 2.0) + math.pow(imgH, 2.0))\n+        pixelPerArcsec = pixelDist/raDecDist\n+        self._log.debug(\"pixelPerArcsec=%f\", pixelPerArcsec)\n+        # Need Upper Left corner and dimensions for Box2I\n+        pixW = width*pixelPerArcsec\n+        pixH = height*pixelPerArcsec\n+        self._log.info(\"ra=%f dec=%f xyWcs=(%f,%f) x0y0=(%f,%f) xyCenter=(%f,%f)\", ra,\n+                dec, xyWcs.getX(), xyWcs.getY(), x0, y0, xyCenter_x, xyCenter_y)\n+        img = self._cutoutbox_pixels(src_img, xyCenter_x, xyCenter_y, pixW, pixH, wcs, self._log)\n+        return img\n+\n+    def _find_nearestimage_containing(self, ra, dec, filtername):\n+        # Use the ra, dec, and filtername (optional) to find the image with its\n+        # center nearest ra and dec. It returns the result of the SQL query.\n+        cols = [\"ra\", \"decl\"]\n+        for s in self._columns:\n+            cols.append(s)\n+        dist = \"(power((ra - {}),2) + power((decl - {}),2)) as distance\".format(ra, dec)\n+        # More accurate distance calc on a sphere-if needed\n+        # SELECT *, 2 * ASIN(SQRT(POWER(SIN((raA)*pi()/180/2),2)+\n+        # COS(raA*pi()/180)*COS(abs(raB)*pi()/180)*\n+        # POWER(SIN((decB.lon)*pi()/180/2),2)) as distance\n+        # FROM <table> order by distance ;\n+        filterSql = \"\"\n+        if filtername:\n+            filterSql = \"filtername = '{}' AND\".format(filtername)\n+        cols.append(dist)\n+        col_str = \",\".join(cols)\n+        sql = (\"SELECT {} FROM {} WHERE {} \"\n+               \"scisql_s2PtInBox({}, {}, corner1Ra, corner1Decl, corner3Ra, corner3Decl) = 1 \"\n+               \"order by distance LIMIT 1\").format(col_str, self._table, filterSql, ra, dec)\n+        self._log.info(sql)\n+        self._log.info(\"findNearest sql={}\".format(sql))\n+        return self._conn.execute(sql).fetchall()\n+\n+    def _get_metadata(self, qresults):\n+        # Return the metadata for the query results in qResults and a butler.\n+        id_type, keyvals = self._get_dataID_from_qr(qresults)\n+        if id_type == \"RCFF\":\n+            run, camcol, field, filtername = keyvals \n+            return self._butler.get(self._get_imagedatasetMD(), run=run, camcol=camcol,\n+                    field=field, filter=filtername)\n+        elif id_type == \"TPF\":\n+            tract, patch, filtername = keyvals\n+            return self._butler.get(self._get_imagedatasetMD(), \n+                    tract=tract, patch=patch, filter=filtername)\n+               \n+    def get_imagecutout_from_scienceID(self, scienceID, ra, dec, width, height, units):", "path": "python/lsst/dax/imgserv/getimage/imagegetter.py", "position": null, "original_position": 274, "commit_id": "39555dea2e07bb46148f4fdcd33225a73ee26271", "original_commit_id": "c41fe87d1f754d123edce8a62956250d0b5e5590", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Done.", "created_at": "2017-06-22T22:11:40Z", "updated_at": "2017-06-22T22:23:12Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/23#discussion_r123634470", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/23", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123634470"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/23#discussion_r123634470"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/23"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123634470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 123364783}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123634487", "pull_request_review_id": 45859448, "id": 123634487, "diff_hunk": "@@ -0,0 +1,406 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+#\n+#\n+# This code is used to to select an image or a cutout of an image\n+# that has its center closest to the specified RA and Dec. The\n+# image is retrieved using the Data Butler.\n+\n+\"\"\"\n+This library module is used to locate and retrieve variolus image types and cutout \n+dimensions, via the appropriate Butler object passed in. \n+\n+@author: John Gates, SLAC\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny W. Lo, SLAC\n+\"\"\"\n+\n+import gzip\n+import math\n+import os\n+import sys\n+import time\n+\n+import lsst.afw\n+import lsst.afw.coord as afwCoord\n+import lsst.afw.display as afwDisplay\n+import lsst.afw.geom as afwGeom\n+import lsst.afw.image as afwImage\n+\n+import lsst.log as log\n+\n+\n+class ImageGetter:\n+    \"\"\"Provide operations to retrieve images including cutouts from the specified \n+    image repository through the passed-in butler.\n+\n+    \"\"\"\n+    \n+    def __init__(self, imageDS, logger):\n+        \"\"\" Instantiate ImageGetter object with butler, butler configuration,\n+        and connection for image metadata.\n+\n+        Parameters\n+        ----------\n+        imageDS : obj\n+                the data source configuration.\n+        logger : obj\n+                the logger to be used.\n+\n+        \"\"\"\n+        self._log = logger\n+        self._conn = imageDS.conn\n+        self._butler = imageDS.butler\n+        self._table = imageDS.table\n+        self._columns = imageDS.columns\n+        self._butler_keys = imageDS.butler_keys\n+        self._imagedataset_type = imageDS.butler_policy\n+\n+    def _get_imagefrombutler(self, qresults):\n+        # Retrieve the image through the Butler for this image type using the\n+        # query results as in 'qresults'.\n+        self._log.debug(\"_get_imagefrombutler qResults:{}\".format(qresults))\n+        id_type, keyvals = self._get_dataID_from_qr(qresults)\n+        if id_type == \"RCFF\": # rcff=run, camcol, field, filter\n+            run, camcol, field, filtername = keyvals\n+            log.debug(\"_get_imagefrombutler run={} camcol={} field={} \\\n+                    filter={}\".format(run, \n+                camcol, field, filtername))\n+            img = self._butler.get(self._imagedataset_type, run=run, camcol=camcol,\n+                    field=field, filter=filtername)\n+            return img \n+        elif id_type == \"TPF\": # tpf=tract, patch, filtername\n+            tract, patch, filtername = keyvals\n+            self._log.debug(\"deepCoadd _get_imagefrombutler tract={} patch={} \\\n+                    filtername={}\".format(tract, patch, filtername))\n+            img = self._butler.get(self._imagedataset_type, tract=tract,\n+                    patch=patch, filter=filtername)\n+            return img\n+\n+    def _get_imagedatasetMD(self):\n+        #Return the butler policy name to retrieve metadata\n+        return self._imagedataset_type + \"_md\"\n+\n+    def get_dataID_from_request(self, request):\n+        \"\"\"Returns the data ID, a dictionary of key value pairs, from the request with\n+        valid being true if there were entries for everything in butler keys.\n+        This will not work for floating point values.\n+\n+        \"\"\"\n+        valid = True\n+        ids = {}\n+        for key in self._butler_keys:\n+            value = request.args.get(key)\n+            if value is None:\n+                valid = False\n+            try:\n+                value = int(value)\n+            except:\n+                value = str(value)\n+            ids[key] = value\n+        return ids, valid\n+\n+    def get_imagebydataID(self, data_id):\n+        \"\"\"Retrieve and image from the butler by the image id values in the dictionary ids\n+        The needed values are specified in _butler_keys.\n+        \n+        \"\"\"\n+        img = self._butler.get(self._imagedataset_type, dataId=data_id)\n+        return img \n+\n+    def get_fullimage(self, ra, dec, filtername):\n+        \"\"\"Return an image containing ra and dec with filtername (optional)\n+        Returns None if no image is found.\n+        This function assumes the entire image is valid. (no overscan, etc.)\n+        \n+        \"\"\"\n+        img, metadata = self.get_fullimage_w_metadata(ra, dec, filtername)\n+        return img\n+\n+    def get_fullimage_w_metadata(self, ra, dec, filtername):\n+        \"\"\"Return an image containing ra, dec, and filtername (optional) with corresponding metadata.\n+        Returns None if no image is found.\n+        This function assumes the entire image is valid. (no overscan, etc.)\n+        \n+        \"\"\"\n+        res = self._find_nearestimage_containing(ra, dec, filtername)\n+        img = self._get_imagefrombutler(res)\n+        metadata = self._get_metadata(res)\n+        return img, metadata\n+\n+    def get_image(self, ra, dec, filtername, width, height, cutout_type=\"arcsecond\"):\n+        \"\"\"Return an image centered on ra and dec (in degrees) with dimensions\n+        height and width (in arcseconds).\n+        - Use filtername, ra, dec, width, and height to find an image from the database.\n+        \n+        \"\"\"\n+         # Find the nearest image to ra and dec.\n+        self._log.debug(\"getImage %f %f %f %f\", ra, dec, width, height)\n+        qresult = self._find_nearestimage_containing(ra, dec, filtername)\n+        return self._get_imagecutoutbydataID(ra, dec, width, height, qresult, cutout_type)\n+   \n+    def _get_imagecutoutbydataID(self, ra, dec, width, height, qresults, cutout_type=\"arcsecond\"):\n+        # Return an image by data ID through the butler.\n+        img = self._get_imagefrombutler(qresults)\n+        if img is None:\n+            # @todo html error handling see DM-1980\n+            return None\n+        # Get the metadata for the source image.\n+        metadata = self._get_metadata(qresults)\n+        img_co = self.get_cutoutimage(img, metadata, ra, dec, width, height,\n+                qresults, cutout_type)\n+        return img_co\n+\n+    def get_cutoutimage(self, src_img, metadata, ra, dec, width, height, qresults,\n+            cutout_type=\"arcsecond\"):\n+        \"\"\"Return an image centered on ra and dec (in degrees) with dimensions\n+        height and width (in arcseconds).\n+        Returns None if no image is found.\n+        This function assumes the entire image is valid. (no overscan, etc.)\n+        Sequence of events:\n+        - dataId is the image id for the butler\n+        - Use the results of the query to get an image and metadata from the butler.\n+        - Map ra, dec, width, and height to a box.\n+        - If a pixel cutout, trim the dimesions to fit in the source image and return.\n+        -     and return the cutout.\n+        - Otherwise, the height and width are in arcseconds.\n+        - Determine approximate pixels per arcsecond in the image by\n+             calculating the length of line from the upper right corner of\n+             the image to the lower left corner in pixels and arcseconds.\n+             (This will fail at or very near the pole.)\n+        - Use that to define a box for the cutout.\n+        - Trim the box so it is entirely within the source image.\n+        - Make and return the cutout.\n+        \n+        \"\"\"\n+        self._log.debug(\"getImage %f %f %f %f\", ra, dec, width, height)\n+        imgW = src_img.getWidth()\n+        imgH = src_img.getHeight()\n+        self._log.debug(\"imgW=%d imgH=%d\", imgW, imgH)\n+        wcs = lsst.afw.image.makeWcs(metadata, False)\n+        raDec = afwCoord.makeCoord(afwCoord.ICRS,\n+                                   ra * afwGeom.degrees,\n+                                   dec * afwGeom.degrees)\n+        xyWcs = wcs.skyToPixel(raDec)\n+        x0, y0 = src_img.getX0(), src_img.getY0()\n+        xyCenter_x = xyWcs.getX() - x0\n+        xyCenter_y = xyWcs.getY() - y0\n+        self._log.info(\"ra=%f dec=%f xyWcs=(%f,%f) x0y0=(%f,%f) xyCenter=(%f,%f)\", ra, \n+                dec, xyWcs.getX(), xyWcs.getY(), x0, y0, xyCenter_x, xyCenter_y)\n+        if cutout_type == 'pixel':\n+            img = self._cutoutbox_pixels(src_img, xyCenter_x, xyCenter_y, \n+                    width, height, wcs, self._log)\n+            return img\n+        # Determine approximate pixels per arcsec - find image corners in RA and Dec\n+        # and compare that distance with the number of pixels.\n+        raDecUL = wcs.pixelToSky(afwGeom.Point2D(0, 0))\n+        raDecLR = wcs.pixelToSky(afwGeom.Point2D(imgW - 1, imgH - 1))\n+        self._log.debug(\"raDecUL 0=%f 1=%f\", raDecUL[0].asDegrees(), raDecUL[1].asDegrees())\n+        self._log.debug(\"raDecLR 0=%f 1=%f\", raDecLR[0].asDegrees(), raDecLR[1].asDegrees())\n+        # length of a line from upper left (UL) to lower right (LR)\n+        decDist = raDecUL[1].asArcseconds() - raDecLR[1].asArcseconds()\n+        raLR = self._keep_within_180(raDecUL[0].asDegrees(), raDecLR[0].asDegrees())\n+        raLR *= 3600.0  # convert degrees to arcseconds\n+        # Correct distance in RA for the declination\n+        cosDec = math.cos(dec*afwGeom.degrees)\n+        raDist = cosDec * (raDecUL[0].asArcseconds() - raLR)\n+        raDecDist = math.sqrt(math.pow(decDist, 2.0) + math.pow(raDist, 2.0))\n+        self._log.debug(\"raDecDist=%f\", raDecDist)\n+        pixelDist = math.sqrt(math.pow(imgW, 2.0) + math.pow(imgH, 2.0))\n+        pixelPerArcsec = pixelDist/raDecDist\n+        self._log.debug(\"pixelPerArcsec=%f\", pixelPerArcsec)\n+        # Need Upper Left corner and dimensions for Box2I\n+        pixW = width*pixelPerArcsec\n+        pixH = height*pixelPerArcsec\n+        self._log.info(\"ra=%f dec=%f xyWcs=(%f,%f) x0y0=(%f,%f) xyCenter=(%f,%f)\", ra,\n+                dec, xyWcs.getX(), xyWcs.getY(), x0, y0, xyCenter_x, xyCenter_y)\n+        img = self._cutoutbox_pixels(src_img, xyCenter_x, xyCenter_y, pixW, pixH, wcs, self._log)\n+        return img\n+\n+    def _find_nearestimage_containing(self, ra, dec, filtername):\n+        # Use the ra, dec, and filtername (optional) to find the image with its\n+        # center nearest ra and dec. It returns the result of the SQL query.\n+        cols = [\"ra\", \"decl\"]\n+        for s in self._columns:\n+            cols.append(s)\n+        dist = \"(power((ra - {}),2) + power((decl - {}),2)) as distance\".format(ra, dec)\n+        # More accurate distance calc on a sphere-if needed\n+        # SELECT *, 2 * ASIN(SQRT(POWER(SIN((raA)*pi()/180/2),2)+\n+        # COS(raA*pi()/180)*COS(abs(raB)*pi()/180)*\n+        # POWER(SIN((decB.lon)*pi()/180/2),2)) as distance\n+        # FROM <table> order by distance ;\n+        filterSql = \"\"\n+        if filtername:\n+            filterSql = \"filtername = '{}' AND\".format(filtername)\n+        cols.append(dist)\n+        col_str = \",\".join(cols)\n+        sql = (\"SELECT {} FROM {} WHERE {} \"\n+               \"scisql_s2PtInBox({}, {}, corner1Ra, corner1Decl, corner3Ra, corner3Decl) = 1 \"\n+               \"order by distance LIMIT 1\").format(col_str, self._table, filterSql, ra, dec)\n+        self._log.info(sql)\n+        self._log.info(\"findNearest sql={}\".format(sql))\n+        return self._conn.execute(sql).fetchall()\n+\n+    def _get_metadata(self, qresults):\n+        # Return the metadata for the query results in qResults and a butler.\n+        id_type, keyvals = self._get_dataID_from_qr(qresults)\n+        if id_type == \"RCFF\":\n+            run, camcol, field, filtername = keyvals \n+            return self._butler.get(self._get_imagedatasetMD(), run=run, camcol=camcol,\n+                    field=field, filter=filtername)\n+        elif id_type == \"TPF\":\n+            tract, patch, filtername = keyvals\n+            return self._butler.get(self._get_imagedatasetMD(), \n+                    tract=tract, patch=patch, filter=filtername)\n+               \n+    def get_imagecutout_from_scienceID(self, scienceID, ra, dec, width, height, units):\n+        \"\"\" Get the image specified by id centered on (ra, dec) with width and height dimensions.\n+        Units (or cutout_type): \"arcsecond\", \"pixel\"\n+        \n+        \"\"\"\n+        # Get the corresponding image(data) id from the butler\n+        dataID, valid = self.get_dataID_from_scienceID(scienceID)\n+        self._log.debug(\"getimagecutout_from_scienceID dataID:{}\".format(dataID))\n+        if valid:\n+            # make id compatible with qResult type via custom wrapping\n+            c_qr = [\"CUSTOM_QR\", dataID]\n+            image = self._get_imagecutoutbydataID(ra, dec, width, height, c_qr, units)\n+            return image\n+\n+    def get_dataID_from_scienceID(self, scienceID):", "path": "python/lsst/dax/imgserv/getimage/imagegetter.py", "position": null, "original_position": 288, "commit_id": "39555dea2e07bb46148f4fdcd33225a73ee26271", "original_commit_id": "c41fe87d1f754d123edce8a62956250d0b5e5590", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Done", "created_at": "2017-06-22T22:11:47Z", "updated_at": "2017-06-22T22:23:12Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/23#discussion_r123634487", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/23", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123634487"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/23#discussion_r123634487"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/23"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/123634487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 123364858}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130666303", "pull_request_review_id": 53567399, "id": 130666303, "diff_hunk": "@@ -0,0 +1,162 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+'''\n+This module implements the command line interface (CLI) to ImageServ.\n+\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny Lo, SLAC\n+\n+'''\n+\n+import os\n+import json\n+\n+import click\n+\n+import lsst.log as log\n+import lsst.daf.persistence as dafPersist\n+\n+from .locateImage import (\n+        image_open, W13DeepCoaddDb, W13RawDb, W13CalexpDb\n+)\n+\n+from .image import Image\n+from .dispatch import Dispatcher\n+from .hashutil import Hasher\n+\n+ROOT = os.path.abspath(os.path.dirname(__file__))\n+\n+@click.command()\n+@click.option(\"--config\", help=\"Specify config file.\")\n+@click.option(\"--in_req\", help=\"Specify query input.\")\n+@click.option(\"--out_dir\", help=\"Specify the output directory.\") \n+def exec_command(config_dir, in_req, out_dir):\n+    \"\"\" Command Line Interface: Process query to return image file\n+        in output directory.\n+    \"\"\" \n+    cli = ImageServCLI(config_dir, in_req, out_dir)\n+    cli.process_request()\n+    \n+class ImageServCLI(object):\n+    \"\"\" Module to implement CLI for ImageServ.\n+    \n+    \"\"\"\n+    def __init__(self, config_dir, in_req, out_dir):\n+        # load the configuration file\n+        config = os.path.join(config_dir, \"settings.json\")\n+        with open(config) as f:\n+            self._config = json.load(f)\n+            # strip /tests from dataroot if cur_dir is /tests\n+            cwd = os.getcwd()\n+            if \"/tests\" in cwd:\n+                self._fix_dataroot_path()\n+            f.close()\n+         # configure the log file (log4cxx)", "path": "python/lsst/dax/imgserv/cli.py", "position": null, "original_position": 73, "commit_id": "2816ad423683e1ee7c6f7b71b442ceaead402aa5", "original_commit_id": "e2c123d8a9e69ea846e321ea62c7fef71ee03c7e", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "Indentation. It might be good to make \"/tests\" a bit more specific to dax_img to avoid collisions. An explanation of the expected directory structure could be useful.", "created_at": "2017-08-01T17:02:54Z", "updated_at": "2017-08-11T23:17:20Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r130666303", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130666303"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r130666303"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130666303/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130670858", "pull_request_review_id": 53567399, "id": 130670858, "diff_hunk": "@@ -0,0 +1,162 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+'''\n+This module implements the command line interface (CLI) to ImageServ.\n+\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny Lo, SLAC\n+\n+'''\n+\n+import os\n+import json\n+\n+import click\n+\n+import lsst.log as log\n+import lsst.daf.persistence as dafPersist\n+\n+from .locateImage import (\n+        image_open, W13DeepCoaddDb, W13RawDb, W13CalexpDb\n+)\n+\n+from .image import Image\n+from .dispatch import Dispatcher\n+from .hashutil import Hasher\n+\n+ROOT = os.path.abspath(os.path.dirname(__file__))\n+\n+@click.command()\n+@click.option(\"--config\", help=\"Specify config file.\")\n+@click.option(\"--in_req\", help=\"Specify query input.\")\n+@click.option(\"--out_dir\", help=\"Specify the output directory.\") \n+def exec_command(config_dir, in_req, out_dir):\n+    \"\"\" Command Line Interface: Process query to return image file\n+        in output directory.\n+    \"\"\" \n+    cli = ImageServCLI(config_dir, in_req, out_dir)\n+    cli.process_request()\n+    \n+class ImageServCLI(object):\n+    \"\"\" Module to implement CLI for ImageServ.\n+    \n+    \"\"\"\n+    def __init__(self, config_dir, in_req, out_dir):\n+        # load the configuration file\n+        config = os.path.join(config_dir, \"settings.json\")\n+        with open(config) as f:\n+            self._config = json.load(f)\n+            # strip /tests from dataroot if cur_dir is /tests\n+            cwd = os.getcwd()\n+            if \"/tests\" in cwd:\n+                self._fix_dataroot_path()\n+            f.close()\n+         # configure the log file (log4cxx)\n+        log.configure(os.path.join(config_dir, \"log.properties\"))\n+        self._in_req = in_req\n+        self._out_dir = out_dir\n+        self._dispatcher = Dispatcher(os.path.join(ROOT, \"config\"))\n+\n+    def _fix_dataroot_path(self):\n+        # this is needed to accommodate cur dir being different\n+        # when running inside container image\n+        img_ds = str(self._config[\"DAX_IMG_DS\"])\n+        img_dr = str(self._config[\"DAX_IMG_DR\"])\n+        self._config[\"DAX_IMG_DS\"] = img_ds.replace(\"./tests\", \"./\")\n+        self._config[\"DAX_IMG_DR\"] = img_dr.replace(\"./tests\", \"./\")\n+\n+    def process_request(self):\n+        errors, req = self._parse_req()\n+        w13db = self._get_ds(req)\n+        if w13db is not None:\n+            img_getter = image_open(w13db, self._config)\n+            # keep this specific instance of img_getter\n+            Image.imagegetter = img_getter\n+            result = self.dispatch(req)\n+            name = req[\"name\"]\n+            fp_image = self._save_result(result, name) \n+            if self._check_result(req, fp_image):\n+                print(name+\": PASS\")\n+            else:\n+                print(name+\": FAIL\")\n+        else:\n+            raise Exception(\"ImageServCLI\", \"w13db should NOT be None\")\n+\n+    def dispatch(self, req):\n+        # direct the request to the best fit image API on parameters\n+        api, params = self._dispatcher.find_api(req)\n+        # call the API with the params\n+        if api is not None:\n+            result = api(params)\n+            return result\n+        \n+    def _save_result(self, image, fn_prefix=\"image_out\"):\n+        # save image object into fits file in output directory\n+        fn = os.path.join(self._out_dir, fn_prefix+\".fits\")\n+        if image is None:\n+            with open(fn, \"w\") as f:\n+                f.write(\"Image Not Found\")\n+                f.close()\n+        else:\n+            image.writeFits(fn) \n+        return fn\n+\n+    def _check_result(self, req, image_fp):\n+        check_code = req[\"check\"][\"sha256\"]\n+        with open(image_fp, \"rb\") as f:\n+            image_data = f.read()\n+            f.close()\n+        h = Hasher.hash(image_data).hexdigest()\n+        return True if h == check_code else False\n+\n+    def _get_ds(self, req):\n+        # determine and get the image datasource\n+        image_type = req[\"get\"][\"api_key\"][0]\n+        if image_type == \"raw\":\n+            return W13RawDb\n+        elif image_type == \"calexp\":\n+            return W13CalexpDb\n+        elif image_type == \"deepcoadd\":\n+            return W13DeepCoaddDb\n+        else:\n+            return None\n+\n+    def _get_req_data(self):\n+        with open(self._in_req, \"r\") as req_file:\n+            data = req_file.read()\n+            req_file.close()\n+        return data\n+            \n+    def _parse_req(self):\n+        req_data = self._get_req_data()\n+        # read and parse the request (JSON)\n+        req = json.loads(req_data) \n+        # ToDo: validate schema here", "path": "python/lsst/dax/imgserv/cli.py", "position": null, "original_position": 153, "commit_id": "2816ad423683e1ee7c6f7b71b442ceaead402aa5", "original_commit_id": "e2c123d8a9e69ea846e321ea62c7fef71ee03c7e", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "This looks important enough that a ticket should be created and its id added to this todo.", "created_at": "2017-08-01T17:19:54Z", "updated_at": "2017-08-11T23:17:20Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r130670858", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130670858"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r130670858"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130670858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130673648", "pull_request_review_id": 53575420, "id": 130673648, "diff_hunk": "@@ -0,0 +1,162 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+'''\n+This module implements the command line interface (CLI) to ImageServ.\n+\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny Lo, SLAC\n+\n+'''\n+\n+import os\n+import json\n+\n+import click\n+\n+import lsst.log as log\n+import lsst.daf.persistence as dafPersist\n+\n+from .locateImage import (\n+        image_open, W13DeepCoaddDb, W13RawDb, W13CalexpDb\n+)\n+\n+from .image import Image\n+from .dispatch import Dispatcher\n+from .hashutil import Hasher\n+\n+ROOT = os.path.abspath(os.path.dirname(__file__))\n+\n+@click.command()\n+@click.option(\"--config\", help=\"Specify config file.\")\n+@click.option(\"--in_req\", help=\"Specify query input.\")\n+@click.option(\"--out_dir\", help=\"Specify the output directory.\") \n+def exec_command(config_dir, in_req, out_dir):\n+    \"\"\" Command Line Interface: Process query to return image file\n+        in output directory.\n+    \"\"\" \n+    cli = ImageServCLI(config_dir, in_req, out_dir)\n+    cli.process_request()\n+    \n+class ImageServCLI(object):\n+    \"\"\" Module to implement CLI for ImageServ.\n+    \n+    \"\"\"\n+    def __init__(self, config_dir, in_req, out_dir):\n+        # load the configuration file\n+        config = os.path.join(config_dir, \"settings.json\")\n+        with open(config) as f:\n+            self._config = json.load(f)\n+            # strip /tests from dataroot if cur_dir is /tests\n+            cwd = os.getcwd()\n+            if \"/tests\" in cwd:\n+                self._fix_dataroot_path()\n+            f.close()\n+         # configure the log file (log4cxx)\n+        log.configure(os.path.join(config_dir, \"log.properties\"))\n+        self._in_req = in_req\n+        self._out_dir = out_dir\n+        self._dispatcher = Dispatcher(os.path.join(ROOT, \"config\"))\n+\n+    def _fix_dataroot_path(self):\n+        # this is needed to accommodate cur dir being different\n+        # when running inside container image\n+        img_ds = str(self._config[\"DAX_IMG_DS\"])\n+        img_dr = str(self._config[\"DAX_IMG_DR\"])\n+        self._config[\"DAX_IMG_DS\"] = img_ds.replace(\"./tests\", \"./\")\n+        self._config[\"DAX_IMG_DR\"] = img_dr.replace(\"./tests\", \"./\")\n+\n+    def process_request(self):\n+        errors, req = self._parse_req()\n+        w13db = self._get_ds(req)\n+        if w13db is not None:\n+            img_getter = image_open(w13db, self._config)\n+            # keep this specific instance of img_getter\n+            Image.imagegetter = img_getter\n+            result = self.dispatch(req)\n+            name = req[\"name\"]\n+            fp_image = self._save_result(result, name) \n+            if self._check_result(req, fp_image):\n+                print(name+\": PASS\")\n+            else:\n+                print(name+\": FAIL\")\n+        else:\n+            raise Exception(\"ImageServCLI\", \"w13db should NOT be None\")", "path": "python/lsst/dax/imgserv/cli.py", "position": 95, "original_position": 102, "commit_id": "2816ad423683e1ee7c6f7b71b442ceaead402aa5", "original_commit_id": "e2c123d8a9e69ea846e321ea62c7fef71ee03c7e", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "It would be useful to have the image type returned in the exception. I'm assuming that this error message makes it back to the user. In any case, end users and developers are likely to appreciate good error messages when possible due to the complexity of the input.", "created_at": "2017-08-01T17:30:37Z", "updated_at": "2017-08-11T23:17:20Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r130673648", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130673648"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r130673648"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130673648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130678853", "pull_request_review_id": 53575420, "id": 130678853, "diff_hunk": "@@ -0,0 +1,118 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+\"\"\"\n+This module implements the Image request data model and operations.\n+\n+@author: Kenny Lo, SLAC\n+\n+\"\"\"\n+\n+class Image(object):\n+    \"\"\" Image module maps a request and its parameters per JSON schema to the \n+        corresponding imagegetter method. \n+    \"\"\"\n+  \n+    # class variable (static)\n+    imagegetter = None", "path": "python/lsst/dax/imgserv/image.py", "position": null, "original_position": 35, "commit_id": "2816ad423683e1ee7c6f7b71b442ceaead402aa5", "original_commit_id": "e2c123d8a9e69ea846e321ea62c7fef71ee03c7e", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "Static variables used like this make me nervous. I'd rather it be a normal member variable and pass an insatance of the Image class around, or have an Image instance be a member of ImageServCLI.", "created_at": "2017-08-01T17:50:01Z", "updated_at": "2017-08-11T23:17:20Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r130678853", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130678853"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r130678853"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130678853/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130703756", "pull_request_review_id": 53608930, "id": 130703756, "diff_hunk": "@@ -0,0 +1,106 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+\"\"\"\n+This module implements the API dispatch logic. \n+\n+@author: Kenny Lo, SLAC\n+\n+\"\"\"\n+\n+import os\n+import json\n+\n+from .image import Image\n+from .hashutil import Hasher\n+\n+class Dispatcher(object):\n+    \"\"\" Dispatcher maps request to corresponding Image method. \n+    \"\"\"\n+\n+    def __init__(self, config_dir):\n+        \"\"\" Load and keep ref to the key to API map \"\"\"\n+        config = os.path.join(config_dir, \"request_to_api.json\")\n+        with open(config) as jason_api:\n+            self.api_map = json.load(jason_api)  \n+            jason_api.close()\n+\n+    def find_api(self, request):\n+        \"\"\" Find the API based on signature.\n+            for example, ['raw', 'nearest']\n+        Parameters\n+        ----------\n+        request: \n+            the request object.\n+        \n+        Returns\n+        -------\n+            the matching API method of the Image class.\n+            parameters for the API method.\n+        \"\"\"\n+        keys = request[\"get\"][\"api_key\"]    \n+        sig = Hasher.hash(str(keys).encode())\n+        entry = self.api_map[sig.hexdigest()]\n+        if entry is not None:\n+            api_str = entry[\"api\"]\n+            # example for api_str: 'Image.cutout'\n+            mod_name, func_name = api_str.split(\".\")\n+            assert(mod_name == \"Image\")\n+            api = getattr(Image, func_name)", "path": "python/lsst/dax/imgserv/dispatch.py", "position": 67, "original_position": 67, "commit_id": "2816ad423683e1ee7c6f7b71b442ceaead402aa5", "original_commit_id": "e2c123d8a9e69ea846e321ea62c7fef71ee03c7e", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "If func_name isn't found, shouldn't the exception be handled?", "created_at": "2017-08-01T19:24:43Z", "updated_at": "2017-08-11T23:17:20Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r130703756", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130703756"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r130703756"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130703756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130707675", "pull_request_review_id": 53608930, "id": 130707675, "diff_hunk": "@@ -0,0 +1,162 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+'''\n+This module implements the command line interface (CLI) to ImageServ.\n+\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny Lo, SLAC\n+\n+'''\n+\n+import os\n+import json\n+\n+import click\n+\n+import lsst.log as log\n+import lsst.daf.persistence as dafPersist\n+\n+from .locateImage import (\n+        image_open, W13DeepCoaddDb, W13RawDb, W13CalexpDb\n+)\n+\n+from .image import Image\n+from .dispatch import Dispatcher\n+from .hashutil import Hasher\n+\n+ROOT = os.path.abspath(os.path.dirname(__file__))\n+\n+@click.command()\n+@click.option(\"--config\", help=\"Specify config file.\")\n+@click.option(\"--in_req\", help=\"Specify query input.\")\n+@click.option(\"--out_dir\", help=\"Specify the output directory.\") \n+def exec_command(config_dir, in_req, out_dir):\n+    \"\"\" Command Line Interface: Process query to return image file\n+        in output directory.\n+    \"\"\" \n+    cli = ImageServCLI(config_dir, in_req, out_dir)\n+    cli.process_request()\n+    \n+class ImageServCLI(object):\n+    \"\"\" Module to implement CLI for ImageServ.\n+    \n+    \"\"\"\n+    def __init__(self, config_dir, in_req, out_dir):\n+        # load the configuration file\n+        config = os.path.join(config_dir, \"settings.json\")\n+        with open(config) as f:\n+            self._config = json.load(f)\n+            # strip /tests from dataroot if cur_dir is /tests\n+            cwd = os.getcwd()\n+            if \"/tests\" in cwd:\n+                self._fix_dataroot_path()\n+            f.close()\n+         # configure the log file (log4cxx)\n+        log.configure(os.path.join(config_dir, \"log.properties\"))\n+        self._in_req = in_req\n+        self._out_dir = out_dir\n+        self._dispatcher = Dispatcher(os.path.join(ROOT, \"config\"))\n+\n+    def _fix_dataroot_path(self):\n+        # this is needed to accommodate cur dir being different\n+        # when running inside container image\n+        img_ds = str(self._config[\"DAX_IMG_DS\"])\n+        img_dr = str(self._config[\"DAX_IMG_DR\"])\n+        self._config[\"DAX_IMG_DS\"] = img_ds.replace(\"./tests\", \"./\")\n+        self._config[\"DAX_IMG_DR\"] = img_dr.replace(\"./tests\", \"./\")\n+\n+    def process_request(self):\n+        errors, req = self._parse_req()\n+        w13db = self._get_ds(req)\n+        if w13db is not None:\n+            img_getter = image_open(w13db, self._config)\n+            # keep this specific instance of img_getter\n+            Image.imagegetter = img_getter\n+            result = self.dispatch(req)\n+            name = req[\"name\"]\n+            fp_image = self._save_result(result, name) \n+            if self._check_result(req, fp_image):", "path": "python/lsst/dax/imgserv/cli.py", "position": null, "original_position": 97, "commit_id": "2816ad423683e1ee7c6f7b71b442ceaead402aa5", "original_commit_id": "e2c123d8a9e69ea846e321ea62c7fef71ee03c7e", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "It looks like this is only useful in testing where you know the \"sha256\" of the expected image. It might be worth skipping reading the file and generating the hash if not testing.", "created_at": "2017-08-01T19:41:53Z", "updated_at": "2017-08-11T23:17:20Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r130707675", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130707675"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r130707675"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130707675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130709836", "pull_request_review_id": 53608930, "id": 130709836, "diff_hunk": "@@ -0,0 +1,155 @@\n+{\n+  \"$schema\": \"http://json-schema.org/draft-04/schema#\", \n+  \"id\": \"https://lsst.org/schemas/imgserv_api_v1.json#\",\n+  \"type\": \"record\",\n+  \"properties\": {\n+    \"namespace\": \"lsst.dax.imgserv\",\n+    \"name\": \"imageserv_API\",\n+    \"description\": \"ImageServ API v1 Schema\",\n+    \"version\": \"1\"\n+  },\n+  \"required\": [ \"name\", \"namespace\", \"version\" ],\n+  \"definitions\": \n+  {\n+    \"rectangle\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"width\": { \"type\": \"double\" },\n+        \"height\": { \"type\": \"double\" },\n+        \"unit\": { \"enum\": [ \"pixel\", \"arcsec\" ] },\n+        \"ucd\": \"pos.outline;obs\" \n+      },\n+      \"required\": [ \"width\", \"height\", \"unit\", \"ucd\" ] \n+    },\n+    \"circle\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"unit\": { \"type\": { \"enum\": [ \"deg\" ] } },\n+        \"ucd\": \"pos.outline;obs\",\n+        \"radius\": { \"type\": \"double\" }\n+     },\n+      \"required\": [ \"unit\", \"ucd\", \"radius\" ]\n+    },\n+    \"range\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"long1\": { \"type\": \"double\" },\n+        \"lat1\": { \"type\": \"double\" },\n+        \"long2\": { \"type\": \"double\" },\n+        \"lat2\": { \"type\": \"double\" }\n+      },\n+     \"required\": [ \"long1\", \"lat1\", \"long2\", \"lat2\" ]\n+    },\n+    \"polygon\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"unit\": { \"type\": { \"enum\": [ \"deg\" ] } },\n+        \"ucd\": \"pos.outline;obs\",\n+        \"sides\": {\n+          \"type\": \"array\",\n+          \"minimum\": 3,\n+          \"multipleOf\": { \"type\": \"double\" }\n+        },\n+        \"required\": [ \"unit\", \"ucd\", \"sides\" ]\n+      }\n+   },\n+   \"filter\": { ", "path": "python/lsst/dax/imgserv/config/imgserv_api_v1.json", "position": null, "original_position": 56, "commit_id": "2816ad423683e1ee7c6f7b71b442ceaead402aa5", "original_commit_id": "e2c123d8a9e69ea846e321ea62c7fef71ee03c7e", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "Indentation", "created_at": "2017-08-01T19:51:37Z", "updated_at": "2017-08-11T23:17:20Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r130709836", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130709836"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r130709836"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130709836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130710826", "pull_request_review_id": 53608930, "id": 130710826, "diff_hunk": "@@ -0,0 +1,155 @@\n+{\n+  \"$schema\": \"http://json-schema.org/draft-04/schema#\", \n+  \"id\": \"https://lsst.org/schemas/imgserv_api_v1.json#\",\n+  \"type\": \"record\",\n+  \"properties\": {\n+    \"namespace\": \"lsst.dax.imgserv\",\n+    \"name\": \"imageserv_API\",\n+    \"description\": \"ImageServ API v1 Schema\",\n+    \"version\": \"1\"\n+  },\n+  \"required\": [ \"name\", \"namespace\", \"version\" ],\n+  \"definitions\": \n+  {\n+    \"rectangle\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"width\": { \"type\": \"double\" },\n+        \"height\": { \"type\": \"double\" },\n+        \"unit\": { \"enum\": [ \"pixel\", \"arcsec\" ] },\n+        \"ucd\": \"pos.outline;obs\" \n+      },\n+      \"required\": [ \"width\", \"height\", \"unit\", \"ucd\" ] \n+    },\n+    \"circle\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"unit\": { \"type\": { \"enum\": [ \"deg\" ] } },\n+        \"ucd\": \"pos.outline;obs\",\n+        \"radius\": { \"type\": \"double\" }\n+     },\n+      \"required\": [ \"unit\", \"ucd\", \"radius\" ]\n+    },\n+    \"range\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"long1\": { \"type\": \"double\" },\n+        \"lat1\": { \"type\": \"double\" },\n+        \"long2\": { \"type\": \"double\" },\n+        \"lat2\": { \"type\": \"double\" }\n+      },\n+     \"required\": [ \"long1\", \"lat1\", \"long2\", \"lat2\" ]\n+    },\n+    \"polygon\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"unit\": { \"type\": { \"enum\": [ \"deg\" ] } },\n+        \"ucd\": \"pos.outline;obs\",\n+        \"sides\": {\n+          \"type\": \"array\",\n+          \"minimum\": 3,\n+          \"multipleOf\": { \"type\": \"double\" }\n+        },\n+        \"required\": [ \"unit\", \"ucd\", \"sides\" ]\n+      }\n+   },\n+   \"filter\": { \n+     \"enum\": [ \"g\", \"i\", \"r\", \"u\", \"z\" ]\n+    },\n+    \"data_id\": {\n+      \"oneOf\": [\n+        { \"$ref\": \"#/definitions/data_id_tpf\" },\n+        { \"$ref\": \"#/definitions/data_id_rcff\" }\n+      ]\n+    },\n+    \"data_id\": {\n+      \"oneOf\": {\n+        { \"$ref\": \"#/definitions/data_id_tpf\" },\n+        { \"$ref\": \"#/definitions/data_id_rcff\" }\n+      }\n+    },\n+    \"data_id_rcff\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"run\": { \"type\": \"int\" },\n+        \"camcol\": { \"type\": \"int\" },\n+        \"field\": { \"type\": \"int\" },\n+        \"filter\": { \"$ref\": \"#/definitions/filter\" }\n+      },\n+      \"required\": [ \"run\", \"camcol\", \"field\", \"filter\" ]\n+    },\n+    \"data_id_tpf\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"tract\": { \"type\": \"int\" },\n+        \"patch_x\": { \"type\": \"int\" },\n+        \"patch_y\": { \"type\": \"int\" },\n+        \"filter\": { \"$ref\": \"#/definitions/filter\" } \n+      },\n+      \"required\": [ \"tract\", \"patch_x\", \"patch_y\", \"filter\" ]\n+    },\n+    \"radec\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"ra\": { \"type\": \"float\" },\n+        \"dec\": { \"type\": \"float\" }\n+      },\n+      \"required\": [ \"ra\", \"dec\", \"filter\" ]\n+    },\n+    \"nearest\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"radec\": { \"$ref\": \"#/definitions/radec\" },\n+        \"filter\": { \"$ref\": \"#/definitions/filter\" }\n+     },\n+     \"required\": [ \"radec\", \"filter\" ]\n+    },\n+    \"cutout\": {\n+      \"type\": \"object\",\n+      \"oneOf\": [\n+        { \"science_id\": { \"type\": \"int\" } },\n+        { \"data_id\": { \"$ref\": \"#/definitions/data_id\" } },\n+        { \"nearest\": { \"$ref\": \"#/definitions/nearest\" } }\n+      ],\n+      \"properties\": {\n+        \"radec\": { \"$ref\": \"#/definitions/radec\" },\n+        \"rectangle\": { \"$ref\": \"#/definitions/rectangle\" }\n+      },\n+      \"required\": [ \"rectangle\" ] \n+    },\n+    \"base\": {\n+      \"oneOf\": [\n+        { \"nearest\": { \"$ref\": \"#/definitions/nearest\" } },\n+        { \"cutout\": { \"$ref\": \"#/definitions/cutout\" } } \n+     ]\n+    },\n+    \"raw\": {\n+      \"oneOf\": [\n+        { \"$ref\": \"#/definitions/base\" },\n+        { \"data_id\": { \"$ref\": \"#/definitions/data_id_rcff\" } },\n+        { \"science_id\": { \"type\": \"int\" } }\n+     ]\n+   },", "path": "python/lsst/dax/imgserv/config/imgserv_api_v1.json", "position": null, "original_position": 132, "commit_id": "2816ad423683e1ee7c6f7b71b442ceaead402aa5", "original_commit_id": "e2c123d8a9e69ea846e321ea62c7fef71ee03c7e", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "Indentation", "created_at": "2017-08-01T19:55:52Z", "updated_at": "2017-08-11T23:17:20Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r130710826", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130710826"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r130710826"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130710826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130744106", "pull_request_review_id": 53608930, "id": 130744106, "diff_hunk": "@@ -107,31 +107,46 @@ def fullimage(self, ra, dec, filtername):\n         img = self._imagefrombutler(res)\n         return img\n \n-    def image_cutout(self, ra, dec, filtername, width, height, cutout_type=\"arcsecond\"):\n+    def image_from_science_id(self, science_id):\n+        ids, valid = self.data_id_from_science_id(science_id)\n+        if not valid:\n+            return None\n+        image = self.image_by_data_id(ids)\n+        return image\n+\n+    def image_cutout(self, ra, dec, filtername, width, height, unit=\"arcsec\"):\n         \"\"\"Return an image centered on ra and dec (in degrees) with dimensions\n-        height and width (in arcseconds).\n+        height and width (in arcsecs).\n+\n         - Use filtername, ra, dec, width, and height to find an image from the database.\n         \n         \"\"\"\n         # Find the nearest image to ra and dec.\n         self._log.debug(\"getImage %f %f %f %f\", ra, dec, width, height)\n         qresult = self._metaservget.nearest_image_containing(ra, dec, filtername)\n-        return self._imagecutout_by_data_id(ra, dec, width, height, qresult, cutout_type)\n+        return self._imagecutout_by_data_id(ra, dec, width, height, qresult, unit)\n    \n-    def imagecutout_from_science_id(self, science_id, ra, dec, width, height, units):\n+    def imagecutout_from_science_id(self, science_id, ra, dec, width, height, unit):\n         \"\"\" Get the image specified by id centered on (ra, dec) with width and height dimensions.\n-        Units (or cutout_type): \"arcsecond\", \"pixel\"\n-        \n+        Units (or unit): \"arcsec\", \"pixel\"", "path": "python/lsst/dax/imgserv/getimage/imagegetter.py", "position": null, "original_position": 31, "commit_id": "2816ad423683e1ee7c6f7b71b442ceaead402aa5", "original_commit_id": "e2c123d8a9e69ea846e321ea62c7fef71ee03c7e", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "Replace \"Units (or unit)\" with \"unit\"", "created_at": "2017-08-01T22:20:48Z", "updated_at": "2017-08-11T23:17:20Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r130744106", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130744106"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r130744106"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130744106/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130744640", "pull_request_review_id": 53608930, "id": 130744640, "diff_hunk": "@@ -279,7 +295,7 @@ def _imagefrombutler(self, qresults):\n         # Retrieve the image through the Butler for this image type using the\n         # query results as in 'qresults'.\n         self._log.debug(\"_imagefrombutler qResults:{}\".format(qresults))\n-        id_type, keyvals = self._data_id_from_qr(qresults)\n+        id_type, keyvals = self._data_id_from_qr(qresults)      ", "path": "python/lsst/dax/imgserv/getimage/imagegetter.py", "position": null, "original_position": 167, "commit_id": "2816ad423683e1ee7c6f7b71b442ceaead402aa5", "original_commit_id": "e2c123d8a9e69ea846e321ea62c7fef71ee03c7e", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "Delete trailing spaces.", "created_at": "2017-08-01T22:24:03Z", "updated_at": "2017-08-11T23:17:20Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r130744640", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130744640"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r130744640"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130744640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130745698", "pull_request_review_id": 53608930, "id": 130745698, "diff_hunk": "@@ -0,0 +1,118 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+\"\"\"\n+This module implements the Image request data model and operations.\n+\n+@author: Kenny Lo, SLAC\n+\n+\"\"\"\n+\n+class Image(object):\n+    \"\"\" Image module maps a request and its parameters per JSON schema to the \n+        corresponding imagegetter method. \n+    \"\"\"\n+  \n+    # class variable (static)\n+    imagegetter = None\n+\n+    def __init__(self):\n+       pass\n+\n+    @classmethod\n+    def full(cls, params):\n+        \"\"\" params(dict): ra, dec filt \"\"\"\n+        return cls.imagegetter.fullimage(cls._kp_val(\"ra\", params), \n+                cls._kp_val(\"dec\", params), \n+                cls._kp_val(\"filter\", params))\n+        \n+    @classmethod\n+    def by_data_id(cls, params):\n+        \"\"\" params(dict): data_id \"\"\"\n+        ids = cls._kp_dict(\"data_id\", params)\n+        # for data_id_tpf,fix the patch field\n+        if \"patch_x\" in ids:\n+            ids[\"patch\"] = \"%d,%d\" % (ids[\"patch_x\"], ids[\"patch_y\"])\n+            del ids[\"patch_x\"]\n+            del ids[\"patch_y\"]\n+        return cls.imagegetter.image_by_data_id(ids)\n+    \n+    @classmethod\n+    def cutout_by_data_id(cls, params):\n+        \"\"\" params(dict): data_id \"\"\"\n+        ids = cls._kp_dict(\"data_id\", params)\n+        # for data_id_tpf,fix the patch field\n+        if \"patch_x\" in ids:\n+            ids[\"patch\"] = \"%d,%d\" % (ids[\"patch_x\"], ids[\"patch_y\"])\n+            del ids[\"patch_x\"]\n+            del ids[\"patch_y\"]\n+        return cls.imagegetter.imagecutout_from_data_id(ids, \n+                cls._kp_val(\"ra\", params),\n+                cls._kp_val(\"dec\", params),\n+                cls._kp_val(\"width\", params),\n+                cls._kp_val(\"height\", params),\n+                cls._kp_val(\"unit\", params))\n+\n+    @classmethod\n+    def by_science_id(cls, params):\n+        \"\"\" params(dict): science_id, science_id_type) \"\"\"\n+        return cls.imagegetter.image_from_science_id(cls._kp_val(\"science_id\",\n+            params))\n+\n+    @classmethod\n+    def cutout(cls, params):\n+        \"\"\" params(dict): ra, dec, filt, width, height, unit \"\"\"\n+        return cls.imagegetter.image_cutout(cls._kp_val(\"ra\", params),\n+                cls._kp_val(\"dec\", params),\n+                cls._kp_val(\"filter\", params),\n+                cls._kp_val(\"width\", params),\n+                cls._kp_val(\"height\", params),\n+                cls._kp_val(\"unit\", params))\n+    \n+    @classmethod\n+    def cutout_by_science_id(cls, params):\n+        \"\"\" params (dict): science_id, ra, dec, width, height, unit \"\"\"\n+        return cls.imagegetter.imagecutout_from_science_id(\n+                cls._kp_val(\"science_id\", params),\n+                cls._kp_val(\"ra\", params),\n+                cls._kp_val(\"dec\", params),\n+                cls._kp_val(\"width\", params),\n+                cls._kp_val(\"height\", params),\n+                cls._kp_val(\"unit\", params))\n+\n+    @classmethod\n+    def _kp_val(self, key, params):\n+        for p in params.keys():\n+            if key in p:\n+                elems = p.split(\".\")\n+                if key in elems[-1]:\n+                    return params[p]\n+\n+    @classmethod\n+    def _kp_dict(self, key, params):\n+        # return dict of parameter values\n+        p_list = {}", "path": "python/lsst/dax/imgserv/image.py", "position": null, "original_position": 112, "commit_id": "2816ad423683e1ee7c6f7b71b442ceaead402aa5", "original_commit_id": "e2c123d8a9e69ea846e321ea62c7fef71ee03c7e", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "p_dict instead of p_list?", "created_at": "2017-08-01T22:30:23Z", "updated_at": "2017-08-11T23:17:20Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r130745698", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130745698"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r130745698"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130745698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130747193", "pull_request_review_id": 53608930, "id": 130747193, "diff_hunk": "@@ -121,9 +120,72 @@ def nearest_image_containing(self, ra, dec, filtername):\n         sql = (\"SELECT {} FROM {} WHERE {} \"\n                \"scisql_s2PtInBox({}, {}, corner1Ra, corner1Decl, corner3Ra, corner3Decl) = 1 \"\n                \"order by distance LIMIT 1\").format(col_str, self._table, filterSql, ra, dec)\n-        self._log.info(sql)\n-        self._log.info(\"findNearest sql={}\".format(sql))\n-        return self._conn.execute(sql).fetchall()\n+        self._log.debug(sql)\n+        self._log.debug(\"findNearest sql={}\".format(sql))\n+        r = self._conn.execute(sql).fetchall()\n+        return r\n+\n+\n+class ButlerGet:\n+    \"\"\"Class to instantiate and hold instance of Butler for ImageGetter.\n+    \n+    \"\"\"\n+\n+    def __init__(self, dataRoot, butler_policy, butler_keys, logger):\n+        \"\"\"Instantiate ButlerGet to be passed to ImageGetter.\"\"\"\n+        logger.debug(\"Instantiating ButlerGet with dataRoot: {}\".format(dataRoot))\n+        self.butler = dafPersist.Butler(inputs=dataRoot)\n+        self.butler_policy = butler_policy\n+        self.butler_keys = butler_keys\n+\n+\n+class W13Db:\n+    \"\"\"This is the base class for examining DC_W13_Stripe82 image data,\n+    Thie instantates a Butler for access to image repository, as well as\n+    connection for metadata via MetaServ.", "path": "python/lsst/dax/imgserv/locateImage.py", "position": 360, "original_position": 48, "commit_id": "2816ad423683e1ee7c6f7b71b442ceaead402aa5", "original_commit_id": "e2c123d8a9e69ea846e321ea62c7fef71ee03c7e", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "Replace the ',' after image data with a '.'\r\nIt instead of Thie.\r\nAdd an 'a' before connection.", "created_at": "2017-08-01T22:40:23Z", "updated_at": "2017-08-11T23:17:20Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r130747193", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130747193"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r130747193"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130747193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130747272", "pull_request_review_id": 53608930, "id": 130747272, "diff_hunk": "@@ -121,9 +120,72 @@ def nearest_image_containing(self, ra, dec, filtername):\n         sql = (\"SELECT {} FROM {} WHERE {} \"\n                \"scisql_s2PtInBox({}, {}, corner1Ra, corner1Decl, corner3Ra, corner3Decl) = 1 \"\n                \"order by distance LIMIT 1\").format(col_str, self._table, filterSql, ra, dec)\n-        self._log.info(sql)\n-        self._log.info(\"findNearest sql={}\".format(sql))\n-        return self._conn.execute(sql).fetchall()\n+        self._log.debug(sql)\n+        self._log.debug(\"findNearest sql={}\".format(sql))\n+        r = self._conn.execute(sql).fetchall()\n+        return r\n+\n+\n+class ButlerGet:\n+    \"\"\"Class to instantiate and hold instance of Butler for ImageGetter.\n+    \n+    \"\"\"\n+\n+    def __init__(self, dataRoot, butler_policy, butler_keys, logger):\n+        \"\"\"Instantiate ButlerGet to be passed to ImageGetter.\"\"\"\n+        logger.debug(\"Instantiating ButlerGet with dataRoot: {}\".format(dataRoot))\n+        self.butler = dafPersist.Butler(inputs=dataRoot)\n+        self.butler_policy = butler_policy\n+        self.butler_keys = butler_keys\n+\n+\n+class W13Db:\n+    \"\"\"This is the base class for examining DC_W13_Stripe82 image data,\n+    Thie instantates a Butler for access to image repository, as well as\n+    connection for metadata via MetaServ.\n+\n+    Attributes\n+    ----------\n+    imagegetter : obj\n+        To be used for accessing images.\n+    \"\"\"\n+\n+    def __init__(self, credFileName, database, table, columns, dataRoot, \n+            butlerPolicy, butlerKeys, logger):\n+        \"\"\"Instantiate W13Db object with credential for database, butler ", "path": "python/lsst/dax/imgserv/locateImage.py", "position": 370, "original_position": 58, "commit_id": "2816ad423683e1ee7c6f7b71b442ceaead402aa5", "original_commit_id": "e2c123d8a9e69ea846e321ea62c7fef71ee03c7e", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "credentials", "created_at": "2017-08-01T22:40:47Z", "updated_at": "2017-08-11T23:17:20Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r130747272", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130747272"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r130747272"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130747272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130747372", "pull_request_review_id": 53608930, "id": 130747372, "diff_hunk": "@@ -121,9 +120,72 @@ def nearest_image_containing(self, ra, dec, filtername):\n         sql = (\"SELECT {} FROM {} WHERE {} \"\n                \"scisql_s2PtInBox({}, {}, corner1Ra, corner1Decl, corner3Ra, corner3Decl) = 1 \"\n                \"order by distance LIMIT 1\").format(col_str, self._table, filterSql, ra, dec)\n-        self._log.info(sql)\n-        self._log.info(\"findNearest sql={}\".format(sql))\n-        return self._conn.execute(sql).fetchall()\n+        self._log.debug(sql)\n+        self._log.debug(\"findNearest sql={}\".format(sql))\n+        r = self._conn.execute(sql).fetchall()\n+        return r\n+\n+\n+class ButlerGet:\n+    \"\"\"Class to instantiate and hold instance of Butler for ImageGetter.\n+    \n+    \"\"\"\n+\n+    def __init__(self, dataRoot, butler_policy, butler_keys, logger):\n+        \"\"\"Instantiate ButlerGet to be passed to ImageGetter.\"\"\"\n+        logger.debug(\"Instantiating ButlerGet with dataRoot: {}\".format(dataRoot))\n+        self.butler = dafPersist.Butler(inputs=dataRoot)\n+        self.butler_policy = butler_policy\n+        self.butler_keys = butler_keys\n+\n+\n+class W13Db:\n+    \"\"\"This is the base class for examining DC_W13_Stripe82 image data,\n+    Thie instantates a Butler for access to image repository, as well as\n+    connection for metadata via MetaServ.\n+\n+    Attributes\n+    ----------\n+    imagegetter : obj\n+        To be used for accessing images.\n+    \"\"\"\n+\n+    def __init__(self, credFileName, database, table, columns, dataRoot, \n+            butlerPolicy, butlerKeys, logger):\n+        \"\"\"Instantiate W13Db object with credential for database, butler \n+        configuration, and logger.\n+    \n+        Parameters\n+        ----------\n+        credFileName : str\n+            The connection for accessing image metadata\n+        database : str\n+            the datbase connection string.", "path": "python/lsst/dax/imgserv/locateImage.py", "position": 378, "original_position": 66, "commit_id": "2816ad423683e1ee7c6f7b71b442ceaead402aa5", "original_commit_id": "e2c123d8a9e69ea846e321ea62c7fef71ee03c7e", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "The database", "created_at": "2017-08-01T22:41:26Z", "updated_at": "2017-08-11T23:17:20Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r130747372", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130747372"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r130747372"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130747372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130747444", "pull_request_review_id": 53608930, "id": 130747444, "diff_hunk": "@@ -121,9 +120,72 @@ def nearest_image_containing(self, ra, dec, filtername):\n         sql = (\"SELECT {} FROM {} WHERE {} \"\n                \"scisql_s2PtInBox({}, {}, corner1Ra, corner1Decl, corner3Ra, corner3Decl) = 1 \"\n                \"order by distance LIMIT 1\").format(col_str, self._table, filterSql, ra, dec)\n-        self._log.info(sql)\n-        self._log.info(\"findNearest sql={}\".format(sql))\n-        return self._conn.execute(sql).fetchall()\n+        self._log.debug(sql)\n+        self._log.debug(\"findNearest sql={}\".format(sql))\n+        r = self._conn.execute(sql).fetchall()\n+        return r\n+\n+\n+class ButlerGet:\n+    \"\"\"Class to instantiate and hold instance of Butler for ImageGetter.\n+    \n+    \"\"\"\n+\n+    def __init__(self, dataRoot, butler_policy, butler_keys, logger):\n+        \"\"\"Instantiate ButlerGet to be passed to ImageGetter.\"\"\"\n+        logger.debug(\"Instantiating ButlerGet with dataRoot: {}\".format(dataRoot))\n+        self.butler = dafPersist.Butler(inputs=dataRoot)\n+        self.butler_policy = butler_policy\n+        self.butler_keys = butler_keys\n+\n+\n+class W13Db:\n+    \"\"\"This is the base class for examining DC_W13_Stripe82 image data,\n+    Thie instantates a Butler for access to image repository, as well as\n+    connection for metadata via MetaServ.\n+\n+    Attributes\n+    ----------\n+    imagegetter : obj\n+        To be used for accessing images.\n+    \"\"\"\n+\n+    def __init__(self, credFileName, database, table, columns, dataRoot, \n+            butlerPolicy, butlerKeys, logger):\n+        \"\"\"Instantiate W13Db object with credential for database, butler \n+        configuration, and logger.\n+    \n+        Parameters\n+        ----------\n+        credFileName : str\n+            The connection for accessing image metadata\n+        database : str\n+            the datbase connection string.\n+        table : str\n+            The table name.\n+        columns : str\n+            The database columns.\n+        dataRoot : str\n+            root for the butler.\n+        bulterPolicy : str\n+            The butler policy.\n+        butlerKeys : str\n+                      The bulter keys for this image data source.", "path": "python/lsst/dax/imgserv/locateImage.py", "position": 388, "original_position": 76, "commit_id": "2816ad423683e1ee7c6f7b71b442ceaead402aa5", "original_commit_id": "e2c123d8a9e69ea846e321ea62c7fef71ee03c7e", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "Indentation", "created_at": "2017-08-01T22:41:53Z", "updated_at": "2017-08-11T23:17:20Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r130747444", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130747444"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r130747444"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/130747444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131011415", "pull_request_review_id": 53949014, "id": 131011415, "diff_hunk": "@@ -0,0 +1,162 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+'''\n+This module implements the command line interface (CLI) to ImageServ.\n+\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny Lo, SLAC\n+\n+'''\n+\n+import os\n+import json\n+\n+import click\n+\n+import lsst.log as log\n+import lsst.daf.persistence as dafPersist\n+\n+from .locateImage import (\n+        image_open, W13DeepCoaddDb, W13RawDb, W13CalexpDb\n+)\n+\n+from .image import Image\n+from .dispatch import Dispatcher\n+from .hashutil import Hasher\n+\n+ROOT = os.path.abspath(os.path.dirname(__file__))\n+\n+@click.command()\n+@click.option(\"--config\", help=\"Specify config file.\")\n+@click.option(\"--in_req\", help=\"Specify query input.\")\n+@click.option(\"--out_dir\", help=\"Specify the output directory.\") \n+def exec_command(config_dir, in_req, out_dir):\n+    \"\"\" Command Line Interface: Process query to return image file\n+        in output directory.\n+    \"\"\" \n+    cli = ImageServCLI(config_dir, in_req, out_dir)\n+    cli.process_request()\n+    \n+class ImageServCLI(object):\n+    \"\"\" Module to implement CLI for ImageServ.\n+    \n+    \"\"\"\n+    def __init__(self, config_dir, in_req, out_dir):\n+        # load the configuration file\n+        config = os.path.join(config_dir, \"settings.json\")\n+        with open(config) as f:\n+            self._config = json.load(f)\n+            # strip /tests from dataroot if cur_dir is /tests\n+            cwd = os.getcwd()\n+            if \"/tests\" in cwd:\n+                self._fix_dataroot_path()\n+            f.close()\n+         # configure the log file (log4cxx)", "path": "python/lsst/dax/imgserv/cli.py", "position": null, "original_position": 73, "commit_id": "2816ad423683e1ee7c6f7b71b442ceaead402aa5", "original_commit_id": "e2c123d8a9e69ea846e321ea62c7fef71ee03c7e", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Removed that code fragment, now that these tests would go to 'integration' directory under dax_imgserv.", "created_at": "2017-08-02T22:16:58Z", "updated_at": "2017-08-11T23:17:20Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r131011415", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131011415"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r131011415"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131011415/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 130666303}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131011731", "pull_request_review_id": 53949323, "id": 131011731, "diff_hunk": "@@ -0,0 +1,162 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+'''\n+This module implements the command line interface (CLI) to ImageServ.\n+\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny Lo, SLAC\n+\n+'''\n+\n+import os\n+import json\n+\n+import click\n+\n+import lsst.log as log\n+import lsst.daf.persistence as dafPersist\n+\n+from .locateImage import (\n+        image_open, W13DeepCoaddDb, W13RawDb, W13CalexpDb\n+)\n+\n+from .image import Image\n+from .dispatch import Dispatcher\n+from .hashutil import Hasher\n+\n+ROOT = os.path.abspath(os.path.dirname(__file__))\n+\n+@click.command()\n+@click.option(\"--config\", help=\"Specify config file.\")\n+@click.option(\"--in_req\", help=\"Specify query input.\")\n+@click.option(\"--out_dir\", help=\"Specify the output directory.\") \n+def exec_command(config_dir, in_req, out_dir):\n+    \"\"\" Command Line Interface: Process query to return image file\n+        in output directory.\n+    \"\"\" \n+    cli = ImageServCLI(config_dir, in_req, out_dir)\n+    cli.process_request()\n+    \n+class ImageServCLI(object):\n+    \"\"\" Module to implement CLI for ImageServ.\n+    \n+    \"\"\"\n+    def __init__(self, config_dir, in_req, out_dir):\n+        # load the configuration file\n+        config = os.path.join(config_dir, \"settings.json\")\n+        with open(config) as f:\n+            self._config = json.load(f)\n+            # strip /tests from dataroot if cur_dir is /tests\n+            cwd = os.getcwd()\n+            if \"/tests\" in cwd:\n+                self._fix_dataroot_path()\n+            f.close()\n+         # configure the log file (log4cxx)\n+        log.configure(os.path.join(config_dir, \"log.properties\"))\n+        self._in_req = in_req\n+        self._out_dir = out_dir\n+        self._dispatcher = Dispatcher(os.path.join(ROOT, \"config\"))\n+\n+    def _fix_dataroot_path(self):\n+        # this is needed to accommodate cur dir being different\n+        # when running inside container image\n+        img_ds = str(self._config[\"DAX_IMG_DS\"])\n+        img_dr = str(self._config[\"DAX_IMG_DR\"])\n+        self._config[\"DAX_IMG_DS\"] = img_ds.replace(\"./tests\", \"./\")\n+        self._config[\"DAX_IMG_DR\"] = img_dr.replace(\"./tests\", \"./\")\n+\n+    def process_request(self):\n+        errors, req = self._parse_req()\n+        w13db = self._get_ds(req)\n+        if w13db is not None:\n+            img_getter = image_open(w13db, self._config)\n+            # keep this specific instance of img_getter\n+            Image.imagegetter = img_getter\n+            result = self.dispatch(req)\n+            name = req[\"name\"]\n+            fp_image = self._save_result(result, name) \n+            if self._check_result(req, fp_image):\n+                print(name+\": PASS\")\n+            else:\n+                print(name+\": FAIL\")\n+        else:\n+            raise Exception(\"ImageServCLI\", \"w13db should NOT be None\")\n+\n+    def dispatch(self, req):\n+        # direct the request to the best fit image API on parameters\n+        api, params = self._dispatcher.find_api(req)\n+        # call the API with the params\n+        if api is not None:\n+            result = api(params)\n+            return result\n+        \n+    def _save_result(self, image, fn_prefix=\"image_out\"):\n+        # save image object into fits file in output directory\n+        fn = os.path.join(self._out_dir, fn_prefix+\".fits\")\n+        if image is None:\n+            with open(fn, \"w\") as f:\n+                f.write(\"Image Not Found\")\n+                f.close()\n+        else:\n+            image.writeFits(fn) \n+        return fn\n+\n+    def _check_result(self, req, image_fp):\n+        check_code = req[\"check\"][\"sha256\"]\n+        with open(image_fp, \"rb\") as f:\n+            image_data = f.read()\n+            f.close()\n+        h = Hasher.hash(image_data).hexdigest()\n+        return True if h == check_code else False\n+\n+    def _get_ds(self, req):\n+        # determine and get the image datasource\n+        image_type = req[\"get\"][\"api_key\"][0]\n+        if image_type == \"raw\":\n+            return W13RawDb\n+        elif image_type == \"calexp\":\n+            return W13CalexpDb\n+        elif image_type == \"deepcoadd\":\n+            return W13DeepCoaddDb\n+        else:\n+            return None\n+\n+    def _get_req_data(self):\n+        with open(self._in_req, \"r\") as req_file:\n+            data = req_file.read()\n+            req_file.close()\n+        return data\n+            \n+    def _parse_req(self):\n+        req_data = self._get_req_data()\n+        # read and parse the request (JSON)\n+        req = json.loads(req_data) \n+        # ToDo: validate schema here", "path": "python/lsst/dax/imgserv/cli.py", "position": null, "original_position": 153, "commit_id": "2816ad423683e1ee7c6f7b71b442ceaead402aa5", "original_commit_id": "e2c123d8a9e69ea846e321ea62c7fef71ee03c7e", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "The ticket number for this work is DM-9929.", "created_at": "2017-08-02T22:18:47Z", "updated_at": "2017-08-11T23:17:20Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r131011731", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131011731"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r131011731"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131011731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 130670858}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131012404", "pull_request_review_id": 53950085, "id": 131012404, "diff_hunk": "@@ -0,0 +1,118 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+\"\"\"\n+This module implements the Image request data model and operations.\n+\n+@author: Kenny Lo, SLAC\n+\n+\"\"\"\n+\n+class Image(object):\n+    \"\"\" Image module maps a request and its parameters per JSON schema to the \n+        corresponding imagegetter method. \n+    \"\"\"\n+  \n+    # class variable (static)\n+    imagegetter = None", "path": "python/lsst/dax/imgserv/image.py", "position": null, "original_position": 35, "commit_id": "2816ad423683e1ee7c6f7b71b442ceaead402aa5", "original_commit_id": "e2c123d8a9e69ea846e321ea62c7fef71ee03c7e", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "I've redone the work to make imagegetter instance as parameter to be passed in instead.", "created_at": "2017-08-02T22:22:49Z", "updated_at": "2017-08-11T23:17:20Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r131012404", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131012404"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r131012404"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131012404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 130678853}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131013799", "pull_request_review_id": 53951610, "id": 131013799, "diff_hunk": "@@ -0,0 +1,106 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+\"\"\"\n+This module implements the API dispatch logic. \n+\n+@author: Kenny Lo, SLAC\n+\n+\"\"\"\n+\n+import os\n+import json\n+\n+from .image import Image\n+from .hashutil import Hasher\n+\n+class Dispatcher(object):\n+    \"\"\" Dispatcher maps request to corresponding Image method. \n+    \"\"\"\n+\n+    def __init__(self, config_dir):\n+        \"\"\" Load and keep ref to the key to API map \"\"\"\n+        config = os.path.join(config_dir, \"request_to_api.json\")\n+        with open(config) as jason_api:\n+            self.api_map = json.load(jason_api)  \n+            jason_api.close()\n+\n+    def find_api(self, request):\n+        \"\"\" Find the API based on signature.\n+            for example, ['raw', 'nearest']\n+        Parameters\n+        ----------\n+        request: \n+            the request object.\n+        \n+        Returns\n+        -------\n+            the matching API method of the Image class.\n+            parameters for the API method.\n+        \"\"\"\n+        keys = request[\"get\"][\"api_key\"]    \n+        sig = Hasher.hash(str(keys).encode())\n+        entry = self.api_map[sig.hexdigest()]\n+        if entry is not None:\n+            api_str = entry[\"api\"]\n+            # example for api_str: 'Image.cutout'\n+            mod_name, func_name = api_str.split(\".\")\n+            assert(mod_name == \"Image\")\n+            api = getattr(Image, func_name)", "path": "python/lsst/dax/imgserv/dispatch.py", "position": 67, "original_position": 67, "commit_id": "2816ad423683e1ee7c6f7b71b442ceaead402aa5", "original_commit_id": "e2c123d8a9e69ea846e321ea62c7fef71ee03c7e", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Created check for that condition.", "created_at": "2017-08-02T22:31:18Z", "updated_at": "2017-08-11T23:17:20Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r131013799", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131013799"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r131013799"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131013799/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 130703756}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131014627", "pull_request_review_id": 53952404, "id": 131014627, "diff_hunk": "@@ -107,31 +107,46 @@ def fullimage(self, ra, dec, filtername):\n         img = self._imagefrombutler(res)\n         return img\n \n-    def image_cutout(self, ra, dec, filtername, width, height, cutout_type=\"arcsecond\"):\n+    def image_from_science_id(self, science_id):\n+        ids, valid = self.data_id_from_science_id(science_id)\n+        if not valid:\n+            return None\n+        image = self.image_by_data_id(ids)\n+        return image\n+\n+    def image_cutout(self, ra, dec, filtername, width, height, unit=\"arcsec\"):\n         \"\"\"Return an image centered on ra and dec (in degrees) with dimensions\n-        height and width (in arcseconds).\n+        height and width (in arcsecs).\n+\n         - Use filtername, ra, dec, width, and height to find an image from the database.\n         \n         \"\"\"\n         # Find the nearest image to ra and dec.\n         self._log.debug(\"getImage %f %f %f %f\", ra, dec, width, height)\n         qresult = self._metaservget.nearest_image_containing(ra, dec, filtername)\n-        return self._imagecutout_by_data_id(ra, dec, width, height, qresult, cutout_type)\n+        return self._imagecutout_by_data_id(ra, dec, width, height, qresult, unit)\n    \n-    def imagecutout_from_science_id(self, science_id, ra, dec, width, height, units):\n+    def imagecutout_from_science_id(self, science_id, ra, dec, width, height, unit):\n         \"\"\" Get the image specified by id centered on (ra, dec) with width and height dimensions.\n-        Units (or cutout_type): \"arcsecond\", \"pixel\"\n-        \n+        Units (or unit): \"arcsec\", \"pixel\"", "path": "python/lsst/dax/imgserv/getimage/imagegetter.py", "position": null, "original_position": 31, "commit_id": "2816ad423683e1ee7c6f7b71b442ceaead402aa5", "original_commit_id": "e2c123d8a9e69ea846e321ea62c7fef71ee03c7e", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Fixed", "created_at": "2017-08-02T22:35:54Z", "updated_at": "2017-08-11T23:17:20Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r131014627", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131014627"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r131014627"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131014627/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 130744106}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131014885", "pull_request_review_id": 53952690, "id": 131014885, "diff_hunk": "@@ -279,7 +295,7 @@ def _imagefrombutler(self, qresults):\n         # Retrieve the image through the Butler for this image type using the\n         # query results as in 'qresults'.\n         self._log.debug(\"_imagefrombutler qResults:{}\".format(qresults))\n-        id_type, keyvals = self._data_id_from_qr(qresults)\n+        id_type, keyvals = self._data_id_from_qr(qresults)      ", "path": "python/lsst/dax/imgserv/getimage/imagegetter.py", "position": null, "original_position": 167, "commit_id": "2816ad423683e1ee7c6f7b71b442ceaead402aa5", "original_commit_id": "e2c123d8a9e69ea846e321ea62c7fef71ee03c7e", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Done.", "created_at": "2017-08-02T22:37:32Z", "updated_at": "2017-08-11T23:17:20Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r131014885", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131014885"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r131014885"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131014885/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 130744640}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131014912", "pull_request_review_id": 53952715, "id": 131014912, "diff_hunk": "@@ -0,0 +1,118 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+\"\"\"\n+This module implements the Image request data model and operations.\n+\n+@author: Kenny Lo, SLAC\n+\n+\"\"\"\n+\n+class Image(object):\n+    \"\"\" Image module maps a request and its parameters per JSON schema to the \n+        corresponding imagegetter method. \n+    \"\"\"\n+  \n+    # class variable (static)\n+    imagegetter = None\n+\n+    def __init__(self):\n+       pass\n+\n+    @classmethod\n+    def full(cls, params):\n+        \"\"\" params(dict): ra, dec filt \"\"\"\n+        return cls.imagegetter.fullimage(cls._kp_val(\"ra\", params), \n+                cls._kp_val(\"dec\", params), \n+                cls._kp_val(\"filter\", params))\n+        \n+    @classmethod\n+    def by_data_id(cls, params):\n+        \"\"\" params(dict): data_id \"\"\"\n+        ids = cls._kp_dict(\"data_id\", params)\n+        # for data_id_tpf,fix the patch field\n+        if \"patch_x\" in ids:\n+            ids[\"patch\"] = \"%d,%d\" % (ids[\"patch_x\"], ids[\"patch_y\"])\n+            del ids[\"patch_x\"]\n+            del ids[\"patch_y\"]\n+        return cls.imagegetter.image_by_data_id(ids)\n+    \n+    @classmethod\n+    def cutout_by_data_id(cls, params):\n+        \"\"\" params(dict): data_id \"\"\"\n+        ids = cls._kp_dict(\"data_id\", params)\n+        # for data_id_tpf,fix the patch field\n+        if \"patch_x\" in ids:\n+            ids[\"patch\"] = \"%d,%d\" % (ids[\"patch_x\"], ids[\"patch_y\"])\n+            del ids[\"patch_x\"]\n+            del ids[\"patch_y\"]\n+        return cls.imagegetter.imagecutout_from_data_id(ids, \n+                cls._kp_val(\"ra\", params),\n+                cls._kp_val(\"dec\", params),\n+                cls._kp_val(\"width\", params),\n+                cls._kp_val(\"height\", params),\n+                cls._kp_val(\"unit\", params))\n+\n+    @classmethod\n+    def by_science_id(cls, params):\n+        \"\"\" params(dict): science_id, science_id_type) \"\"\"\n+        return cls.imagegetter.image_from_science_id(cls._kp_val(\"science_id\",\n+            params))\n+\n+    @classmethod\n+    def cutout(cls, params):\n+        \"\"\" params(dict): ra, dec, filt, width, height, unit \"\"\"\n+        return cls.imagegetter.image_cutout(cls._kp_val(\"ra\", params),\n+                cls._kp_val(\"dec\", params),\n+                cls._kp_val(\"filter\", params),\n+                cls._kp_val(\"width\", params),\n+                cls._kp_val(\"height\", params),\n+                cls._kp_val(\"unit\", params))\n+    \n+    @classmethod\n+    def cutout_by_science_id(cls, params):\n+        \"\"\" params (dict): science_id, ra, dec, width, height, unit \"\"\"\n+        return cls.imagegetter.imagecutout_from_science_id(\n+                cls._kp_val(\"science_id\", params),\n+                cls._kp_val(\"ra\", params),\n+                cls._kp_val(\"dec\", params),\n+                cls._kp_val(\"width\", params),\n+                cls._kp_val(\"height\", params),\n+                cls._kp_val(\"unit\", params))\n+\n+    @classmethod\n+    def _kp_val(self, key, params):\n+        for p in params.keys():\n+            if key in p:\n+                elems = p.split(\".\")\n+                if key in elems[-1]:\n+                    return params[p]\n+\n+    @classmethod\n+    def _kp_dict(self, key, params):\n+        # return dict of parameter values\n+        p_list = {}", "path": "python/lsst/dax/imgserv/image.py", "position": null, "original_position": 112, "commit_id": "2816ad423683e1ee7c6f7b71b442ceaead402aa5", "original_commit_id": "e2c123d8a9e69ea846e321ea62c7fef71ee03c7e", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Renamed.", "created_at": "2017-08-02T22:37:41Z", "updated_at": "2017-08-11T23:17:20Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r131014912", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131014912"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r131014912"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131014912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 130745698}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131015599", "pull_request_review_id": 53953482, "id": 131015599, "diff_hunk": "@@ -121,9 +120,72 @@ def nearest_image_containing(self, ra, dec, filtername):\n         sql = (\"SELECT {} FROM {} WHERE {} \"\n                \"scisql_s2PtInBox({}, {}, corner1Ra, corner1Decl, corner3Ra, corner3Decl) = 1 \"\n                \"order by distance LIMIT 1\").format(col_str, self._table, filterSql, ra, dec)\n-        self._log.info(sql)\n-        self._log.info(\"findNearest sql={}\".format(sql))\n-        return self._conn.execute(sql).fetchall()\n+        self._log.debug(sql)\n+        self._log.debug(\"findNearest sql={}\".format(sql))\n+        r = self._conn.execute(sql).fetchall()\n+        return r\n+\n+\n+class ButlerGet:\n+    \"\"\"Class to instantiate and hold instance of Butler for ImageGetter.\n+    \n+    \"\"\"\n+\n+    def __init__(self, dataRoot, butler_policy, butler_keys, logger):\n+        \"\"\"Instantiate ButlerGet to be passed to ImageGetter.\"\"\"\n+        logger.debug(\"Instantiating ButlerGet with dataRoot: {}\".format(dataRoot))\n+        self.butler = dafPersist.Butler(inputs=dataRoot)\n+        self.butler_policy = butler_policy\n+        self.butler_keys = butler_keys\n+\n+\n+class W13Db:\n+    \"\"\"This is the base class for examining DC_W13_Stripe82 image data,\n+    Thie instantates a Butler for access to image repository, as well as\n+    connection for metadata via MetaServ.\n+\n+    Attributes\n+    ----------\n+    imagegetter : obj\n+        To be used for accessing images.\n+    \"\"\"\n+\n+    def __init__(self, credFileName, database, table, columns, dataRoot, \n+            butlerPolicy, butlerKeys, logger):\n+        \"\"\"Instantiate W13Db object with credential for database, butler ", "path": "python/lsst/dax/imgserv/locateImage.py", "position": 370, "original_position": 58, "commit_id": "2816ad423683e1ee7c6f7b71b442ceaead402aa5", "original_commit_id": "e2c123d8a9e69ea846e321ea62c7fef71ee03c7e", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Fixed.", "created_at": "2017-08-02T22:42:07Z", "updated_at": "2017-08-11T23:17:20Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r131015599", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131015599"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r131015599"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131015599/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 130747272}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131015717", "pull_request_review_id": 53953628, "id": 131015717, "diff_hunk": "@@ -121,9 +120,72 @@ def nearest_image_containing(self, ra, dec, filtername):\n         sql = (\"SELECT {} FROM {} WHERE {} \"\n                \"scisql_s2PtInBox({}, {}, corner1Ra, corner1Decl, corner3Ra, corner3Decl) = 1 \"\n                \"order by distance LIMIT 1\").format(col_str, self._table, filterSql, ra, dec)\n-        self._log.info(sql)\n-        self._log.info(\"findNearest sql={}\".format(sql))\n-        return self._conn.execute(sql).fetchall()\n+        self._log.debug(sql)\n+        self._log.debug(\"findNearest sql={}\".format(sql))\n+        r = self._conn.execute(sql).fetchall()\n+        return r\n+\n+\n+class ButlerGet:\n+    \"\"\"Class to instantiate and hold instance of Butler for ImageGetter.\n+    \n+    \"\"\"\n+\n+    def __init__(self, dataRoot, butler_policy, butler_keys, logger):\n+        \"\"\"Instantiate ButlerGet to be passed to ImageGetter.\"\"\"\n+        logger.debug(\"Instantiating ButlerGet with dataRoot: {}\".format(dataRoot))\n+        self.butler = dafPersist.Butler(inputs=dataRoot)\n+        self.butler_policy = butler_policy\n+        self.butler_keys = butler_keys\n+\n+\n+class W13Db:\n+    \"\"\"This is the base class for examining DC_W13_Stripe82 image data,\n+    Thie instantates a Butler for access to image repository, as well as\n+    connection for metadata via MetaServ.\n+\n+    Attributes\n+    ----------\n+    imagegetter : obj\n+        To be used for accessing images.\n+    \"\"\"\n+\n+    def __init__(self, credFileName, database, table, columns, dataRoot, \n+            butlerPolicy, butlerKeys, logger):\n+        \"\"\"Instantiate W13Db object with credential for database, butler \n+        configuration, and logger.\n+    \n+        Parameters\n+        ----------\n+        credFileName : str\n+            The connection for accessing image metadata\n+        database : str\n+            the datbase connection string.", "path": "python/lsst/dax/imgserv/locateImage.py", "position": 378, "original_position": 66, "commit_id": "2816ad423683e1ee7c6f7b71b442ceaead402aa5", "original_commit_id": "e2c123d8a9e69ea846e321ea62c7fef71ee03c7e", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "fixed.", "created_at": "2017-08-02T22:42:56Z", "updated_at": "2017-08-11T23:17:20Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r131015717", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131015717"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r131015717"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131015717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 130747372}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131016035", "pull_request_review_id": 53953947, "id": 131016035, "diff_hunk": "@@ -121,9 +120,72 @@ def nearest_image_containing(self, ra, dec, filtername):\n         sql = (\"SELECT {} FROM {} WHERE {} \"\n                \"scisql_s2PtInBox({}, {}, corner1Ra, corner1Decl, corner3Ra, corner3Decl) = 1 \"\n                \"order by distance LIMIT 1\").format(col_str, self._table, filterSql, ra, dec)\n-        self._log.info(sql)\n-        self._log.info(\"findNearest sql={}\".format(sql))\n-        return self._conn.execute(sql).fetchall()\n+        self._log.debug(sql)\n+        self._log.debug(\"findNearest sql={}\".format(sql))\n+        r = self._conn.execute(sql).fetchall()\n+        return r\n+\n+\n+class ButlerGet:\n+    \"\"\"Class to instantiate and hold instance of Butler for ImageGetter.\n+    \n+    \"\"\"\n+\n+    def __init__(self, dataRoot, butler_policy, butler_keys, logger):\n+        \"\"\"Instantiate ButlerGet to be passed to ImageGetter.\"\"\"\n+        logger.debug(\"Instantiating ButlerGet with dataRoot: {}\".format(dataRoot))\n+        self.butler = dafPersist.Butler(inputs=dataRoot)\n+        self.butler_policy = butler_policy\n+        self.butler_keys = butler_keys\n+\n+\n+class W13Db:\n+    \"\"\"This is the base class for examining DC_W13_Stripe82 image data,\n+    Thie instantates a Butler for access to image repository, as well as\n+    connection for metadata via MetaServ.\n+\n+    Attributes\n+    ----------\n+    imagegetter : obj\n+        To be used for accessing images.\n+    \"\"\"\n+\n+    def __init__(self, credFileName, database, table, columns, dataRoot, \n+            butlerPolicy, butlerKeys, logger):\n+        \"\"\"Instantiate W13Db object with credential for database, butler \n+        configuration, and logger.\n+    \n+        Parameters\n+        ----------\n+        credFileName : str\n+            The connection for accessing image metadata\n+        database : str\n+            the datbase connection string.\n+        table : str\n+            The table name.\n+        columns : str\n+            The database columns.\n+        dataRoot : str\n+            root for the butler.\n+        bulterPolicy : str\n+            The butler policy.\n+        butlerKeys : str\n+                      The bulter keys for this image data source.", "path": "python/lsst/dax/imgserv/locateImage.py", "position": 388, "original_position": 76, "commit_id": "2816ad423683e1ee7c6f7b71b442ceaead402aa5", "original_commit_id": "e2c123d8a9e69ea846e321ea62c7fef71ee03c7e", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Fixed.", "created_at": "2017-08-02T22:44:54Z", "updated_at": "2017-08-11T23:17:20Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r131016035", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131016035"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r131016035"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131016035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 130747444}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131016108", "pull_request_review_id": 53954027, "id": 131016108, "diff_hunk": "@@ -121,9 +120,72 @@ def nearest_image_containing(self, ra, dec, filtername):\n         sql = (\"SELECT {} FROM {} WHERE {} \"\n                \"scisql_s2PtInBox({}, {}, corner1Ra, corner1Decl, corner3Ra, corner3Decl) = 1 \"\n                \"order by distance LIMIT 1\").format(col_str, self._table, filterSql, ra, dec)\n-        self._log.info(sql)\n-        self._log.info(\"findNearest sql={}\".format(sql))\n-        return self._conn.execute(sql).fetchall()\n+        self._log.debug(sql)\n+        self._log.debug(\"findNearest sql={}\".format(sql))\n+        r = self._conn.execute(sql).fetchall()\n+        return r\n+\n+\n+class ButlerGet:\n+    \"\"\"Class to instantiate and hold instance of Butler for ImageGetter.\n+    \n+    \"\"\"\n+\n+    def __init__(self, dataRoot, butler_policy, butler_keys, logger):\n+        \"\"\"Instantiate ButlerGet to be passed to ImageGetter.\"\"\"\n+        logger.debug(\"Instantiating ButlerGet with dataRoot: {}\".format(dataRoot))\n+        self.butler = dafPersist.Butler(inputs=dataRoot)\n+        self.butler_policy = butler_policy\n+        self.butler_keys = butler_keys\n+\n+\n+class W13Db:\n+    \"\"\"This is the base class for examining DC_W13_Stripe82 image data,\n+    Thie instantates a Butler for access to image repository, as well as\n+    connection for metadata via MetaServ.", "path": "python/lsst/dax/imgserv/locateImage.py", "position": 360, "original_position": 48, "commit_id": "2816ad423683e1ee7c6f7b71b442ceaead402aa5", "original_commit_id": "e2c123d8a9e69ea846e321ea62c7fef71ee03c7e", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Reworded.", "created_at": "2017-08-02T22:45:24Z", "updated_at": "2017-08-11T23:17:20Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r131016108", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131016108"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r131016108"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131016108/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 130747193}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131016638", "pull_request_review_id": 53954641, "id": 131016638, "diff_hunk": "@@ -0,0 +1,155 @@\n+{\n+  \"$schema\": \"http://json-schema.org/draft-04/schema#\", \n+  \"id\": \"https://lsst.org/schemas/imgserv_api_v1.json#\",\n+  \"type\": \"record\",\n+  \"properties\": {\n+    \"namespace\": \"lsst.dax.imgserv\",\n+    \"name\": \"imageserv_API\",\n+    \"description\": \"ImageServ API v1 Schema\",\n+    \"version\": \"1\"\n+  },\n+  \"required\": [ \"name\", \"namespace\", \"version\" ],\n+  \"definitions\": \n+  {\n+    \"rectangle\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"width\": { \"type\": \"double\" },\n+        \"height\": { \"type\": \"double\" },\n+        \"unit\": { \"enum\": [ \"pixel\", \"arcsec\" ] },\n+        \"ucd\": \"pos.outline;obs\" \n+      },\n+      \"required\": [ \"width\", \"height\", \"unit\", \"ucd\" ] \n+    },\n+    \"circle\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"unit\": { \"type\": { \"enum\": [ \"deg\" ] } },\n+        \"ucd\": \"pos.outline;obs\",\n+        \"radius\": { \"type\": \"double\" }\n+     },\n+      \"required\": [ \"unit\", \"ucd\", \"radius\" ]\n+    },\n+    \"range\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"long1\": { \"type\": \"double\" },\n+        \"lat1\": { \"type\": \"double\" },\n+        \"long2\": { \"type\": \"double\" },\n+        \"lat2\": { \"type\": \"double\" }\n+      },\n+     \"required\": [ \"long1\", \"lat1\", \"long2\", \"lat2\" ]\n+    },\n+    \"polygon\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"unit\": { \"type\": { \"enum\": [ \"deg\" ] } },\n+        \"ucd\": \"pos.outline;obs\",\n+        \"sides\": {\n+          \"type\": \"array\",\n+          \"minimum\": 3,\n+          \"multipleOf\": { \"type\": \"double\" }\n+        },\n+        \"required\": [ \"unit\", \"ucd\", \"sides\" ]\n+      }\n+   },\n+   \"filter\": { ", "path": "python/lsst/dax/imgserv/config/imgserv_api_v1.json", "position": null, "original_position": 56, "commit_id": "2816ad423683e1ee7c6f7b71b442ceaead402aa5", "original_commit_id": "e2c123d8a9e69ea846e321ea62c7fef71ee03c7e", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Going with 2-space indents for JSON/YAML files.", "created_at": "2017-08-02T22:49:01Z", "updated_at": "2017-08-11T23:17:20Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r131016638", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131016638"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r131016638"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131016638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 130709836}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131016664", "pull_request_review_id": 53954665, "id": 131016664, "diff_hunk": "@@ -0,0 +1,155 @@\n+{\n+  \"$schema\": \"http://json-schema.org/draft-04/schema#\", \n+  \"id\": \"https://lsst.org/schemas/imgserv_api_v1.json#\",\n+  \"type\": \"record\",\n+  \"properties\": {\n+    \"namespace\": \"lsst.dax.imgserv\",\n+    \"name\": \"imageserv_API\",\n+    \"description\": \"ImageServ API v1 Schema\",\n+    \"version\": \"1\"\n+  },\n+  \"required\": [ \"name\", \"namespace\", \"version\" ],\n+  \"definitions\": \n+  {\n+    \"rectangle\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"width\": { \"type\": \"double\" },\n+        \"height\": { \"type\": \"double\" },\n+        \"unit\": { \"enum\": [ \"pixel\", \"arcsec\" ] },\n+        \"ucd\": \"pos.outline;obs\" \n+      },\n+      \"required\": [ \"width\", \"height\", \"unit\", \"ucd\" ] \n+    },\n+    \"circle\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"unit\": { \"type\": { \"enum\": [ \"deg\" ] } },\n+        \"ucd\": \"pos.outline;obs\",\n+        \"radius\": { \"type\": \"double\" }\n+     },\n+      \"required\": [ \"unit\", \"ucd\", \"radius\" ]\n+    },\n+    \"range\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"long1\": { \"type\": \"double\" },\n+        \"lat1\": { \"type\": \"double\" },\n+        \"long2\": { \"type\": \"double\" },\n+        \"lat2\": { \"type\": \"double\" }\n+      },\n+     \"required\": [ \"long1\", \"lat1\", \"long2\", \"lat2\" ]\n+    },\n+    \"polygon\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"unit\": { \"type\": { \"enum\": [ \"deg\" ] } },\n+        \"ucd\": \"pos.outline;obs\",\n+        \"sides\": {\n+          \"type\": \"array\",\n+          \"minimum\": 3,\n+          \"multipleOf\": { \"type\": \"double\" }\n+        },\n+        \"required\": [ \"unit\", \"ucd\", \"sides\" ]\n+      }\n+   },\n+   \"filter\": { \n+     \"enum\": [ \"g\", \"i\", \"r\", \"u\", \"z\" ]\n+    },\n+    \"data_id\": {\n+      \"oneOf\": [\n+        { \"$ref\": \"#/definitions/data_id_tpf\" },\n+        { \"$ref\": \"#/definitions/data_id_rcff\" }\n+      ]\n+    },\n+    \"data_id\": {\n+      \"oneOf\": {\n+        { \"$ref\": \"#/definitions/data_id_tpf\" },\n+        { \"$ref\": \"#/definitions/data_id_rcff\" }\n+      }\n+    },\n+    \"data_id_rcff\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"run\": { \"type\": \"int\" },\n+        \"camcol\": { \"type\": \"int\" },\n+        \"field\": { \"type\": \"int\" },\n+        \"filter\": { \"$ref\": \"#/definitions/filter\" }\n+      },\n+      \"required\": [ \"run\", \"camcol\", \"field\", \"filter\" ]\n+    },\n+    \"data_id_tpf\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"tract\": { \"type\": \"int\" },\n+        \"patch_x\": { \"type\": \"int\" },\n+        \"patch_y\": { \"type\": \"int\" },\n+        \"filter\": { \"$ref\": \"#/definitions/filter\" } \n+      },\n+      \"required\": [ \"tract\", \"patch_x\", \"patch_y\", \"filter\" ]\n+    },\n+    \"radec\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"ra\": { \"type\": \"float\" },\n+        \"dec\": { \"type\": \"float\" }\n+      },\n+      \"required\": [ \"ra\", \"dec\", \"filter\" ]\n+    },\n+    \"nearest\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"radec\": { \"$ref\": \"#/definitions/radec\" },\n+        \"filter\": { \"$ref\": \"#/definitions/filter\" }\n+     },\n+     \"required\": [ \"radec\", \"filter\" ]\n+    },\n+    \"cutout\": {\n+      \"type\": \"object\",\n+      \"oneOf\": [\n+        { \"science_id\": { \"type\": \"int\" } },\n+        { \"data_id\": { \"$ref\": \"#/definitions/data_id\" } },\n+        { \"nearest\": { \"$ref\": \"#/definitions/nearest\" } }\n+      ],\n+      \"properties\": {\n+        \"radec\": { \"$ref\": \"#/definitions/radec\" },\n+        \"rectangle\": { \"$ref\": \"#/definitions/rectangle\" }\n+      },\n+      \"required\": [ \"rectangle\" ] \n+    },\n+    \"base\": {\n+      \"oneOf\": [\n+        { \"nearest\": { \"$ref\": \"#/definitions/nearest\" } },\n+        { \"cutout\": { \"$ref\": \"#/definitions/cutout\" } } \n+     ]\n+    },\n+    \"raw\": {\n+      \"oneOf\": [\n+        { \"$ref\": \"#/definitions/base\" },\n+        { \"data_id\": { \"$ref\": \"#/definitions/data_id_rcff\" } },\n+        { \"science_id\": { \"type\": \"int\" } }\n+     ]\n+   },", "path": "python/lsst/dax/imgserv/config/imgserv_api_v1.json", "position": null, "original_position": 132, "commit_id": "2816ad423683e1ee7c6f7b71b442ceaead402aa5", "original_commit_id": "e2c123d8a9e69ea846e321ea62c7fef71ee03c7e", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "see above comment.", "created_at": "2017-08-02T22:49:12Z", "updated_at": "2017-08-11T23:17:20Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r131016664", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131016664"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r131016664"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131016664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 130710826}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131028461", "pull_request_review_id": 53967209, "id": 131028461, "diff_hunk": "@@ -0,0 +1,155 @@\n+{\n+  \"$schema\": \"http://json-schema.org/draft-04/schema#\", \n+  \"id\": \"https://lsst.org/schemas/imgserv_api_v1.json#\",\n+  \"type\": \"record\",\n+  \"properties\": {\n+    \"namespace\": \"lsst.dax.imgserv\",\n+    \"name\": \"imageserv_API\",\n+    \"description\": \"ImageServ API v1 Schema\",\n+    \"version\": \"1\"\n+  },\n+  \"required\": [ \"name\", \"namespace\", \"version\" ],\n+  \"definitions\": \n+  {\n+    \"rectangle\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"width\": { \"type\": \"double\" },\n+        \"height\": { \"type\": \"double\" },\n+        \"unit\": { \"enum\": [ \"pixel\", \"arcsec\" ] },\n+        \"ucd\": \"pos.outline;obs\" \n+      },\n+      \"required\": [ \"width\", \"height\", \"unit\", \"ucd\" ] \n+    },\n+    \"circle\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"unit\": { \"type\": { \"enum\": [ \"deg\" ] } },\n+        \"ucd\": \"pos.outline;obs\",\n+        \"radius\": { \"type\": \"double\" }\n+     },\n+      \"required\": [ \"unit\", \"ucd\", \"radius\" ]\n+    },\n+    \"range\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"long1\": { \"type\": \"double\" },\n+        \"lat1\": { \"type\": \"double\" },\n+        \"long2\": { \"type\": \"double\" },\n+        \"lat2\": { \"type\": \"double\" }\n+      },\n+     \"required\": [ \"long1\", \"lat1\", \"long2\", \"lat2\" ]\n+    },\n+    \"polygon\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"unit\": { \"type\": { \"enum\": [ \"deg\" ] } },\n+        \"ucd\": \"pos.outline;obs\",\n+        \"sides\": {\n+          \"type\": \"array\",\n+          \"minimum\": 3,\n+          \"multipleOf\": { \"type\": \"double\" }\n+        },\n+        \"required\": [ \"unit\", \"ucd\", \"sides\" ]\n+      }\n+   },\n+   \"filter\": { ", "path": "python/lsst/dax/imgserv/config/imgserv_api_v1.json", "position": null, "original_position": 56, "commit_id": "2816ad423683e1ee7c6f7b71b442ceaead402aa5", "original_commit_id": "e2c123d8a9e69ea846e321ea62c7fef71ee03c7e", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "I only commented on indentation when it didn't match the surrounding indentation. \"polygon\" and \"range\" above is indented 4 spaces, \"filter\" is indented 3 spaces. (counting from the \"+\")", "created_at": "2017-08-03T00:16:16Z", "updated_at": "2017-08-11T23:17:20Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r131028461", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131028461"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r131028461"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131028461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 130709836}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131030423", "pull_request_review_id": 53969258, "id": 131030423, "diff_hunk": "@@ -0,0 +1,155 @@\n+{\n+  \"$schema\": \"http://json-schema.org/draft-04/schema#\", \n+  \"id\": \"https://lsst.org/schemas/imgserv_api_v1.json#\",\n+  \"type\": \"record\",\n+  \"properties\": {\n+    \"namespace\": \"lsst.dax.imgserv\",\n+    \"name\": \"imageserv_API\",\n+    \"description\": \"ImageServ API v1 Schema\",\n+    \"version\": \"1\"\n+  },\n+  \"required\": [ \"name\", \"namespace\", \"version\" ],\n+  \"definitions\": \n+  {\n+    \"rectangle\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"width\": { \"type\": \"double\" },\n+        \"height\": { \"type\": \"double\" },\n+        \"unit\": { \"enum\": [ \"pixel\", \"arcsec\" ] },\n+        \"ucd\": \"pos.outline;obs\" \n+      },\n+      \"required\": [ \"width\", \"height\", \"unit\", \"ucd\" ] \n+    },\n+    \"circle\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"unit\": { \"type\": { \"enum\": [ \"deg\" ] } },\n+        \"ucd\": \"pos.outline;obs\",\n+        \"radius\": { \"type\": \"double\" }\n+     },\n+      \"required\": [ \"unit\", \"ucd\", \"radius\" ]\n+    },\n+    \"range\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"long1\": { \"type\": \"double\" },\n+        \"lat1\": { \"type\": \"double\" },\n+        \"long2\": { \"type\": \"double\" },\n+        \"lat2\": { \"type\": \"double\" }\n+      },\n+     \"required\": [ \"long1\", \"lat1\", \"long2\", \"lat2\" ]\n+    },\n+    \"polygon\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"unit\": { \"type\": { \"enum\": [ \"deg\" ] } },\n+        \"ucd\": \"pos.outline;obs\",\n+        \"sides\": {\n+          \"type\": \"array\",\n+          \"minimum\": 3,\n+          \"multipleOf\": { \"type\": \"double\" }\n+        },\n+        \"required\": [ \"unit\", \"ucd\", \"sides\" ]\n+      }\n+   },\n+   \"filter\": { ", "path": "python/lsst/dax/imgserv/config/imgserv_api_v1.json", "position": null, "original_position": 56, "commit_id": "2816ad423683e1ee7c6f7b71b442ceaead402aa5", "original_commit_id": "e2c123d8a9e69ea846e321ea62c7fef71ee03c7e", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Fixed - thanks for the clarification.", "created_at": "2017-08-03T00:34:45Z", "updated_at": "2017-08-11T23:17:20Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r131030423", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131030423"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r131030423"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/131030423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 130709836}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132752089", "pull_request_review_id": 55870571, "id": 132752089, "diff_hunk": "@@ -27,6 +27,7 @@\n \n @author  Jacek Becla, SLAC\n \"\"\"\n+from __future__ import print_function", "path": "bin/imageServer.py", "position": null, "original_position": 4, "commit_id": "2816ad423683e1ee7c6f7b71b442ceaead402aa5", "original_commit_id": "65a9c1aadfffd92cc275f3fd4a54107267fd6a6c", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "Not needed, we are living in the `__future__` with python 3 :)", "created_at": "2017-08-11T18:16:37Z", "updated_at": "2017-08-11T23:17:20Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r132752089", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132752089"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r132752089"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132752089/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132754452", "pull_request_review_id": 55870571, "id": 132754452, "diff_hunk": "@@ -0,0 +1,154 @@\n+#!/usr/bin/env python\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+'''\n+This module implements the command line interface (CLI) to ImageServ.\n+\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny Lo, SLAC\n+\n+'''\n+\n+import os\n+import json\n+\n+import click\n+\n+import lsst.log as log\n+import lsst.daf.persistence as dafPersist\n+\n+from .locateImage import (\n+        image_open, W13DeepCoaddDb, W13RawDb, W13CalexpDb\n+)\n+\n+from .image import Image\n+from .dispatch import Dispatcher\n+from .hashutil import Hasher\n+\n+ROOT = os.path.abspath(os.path.dirname(__file__))\n+\n+@click.command()\n+@click.option(\"--config\", help=\"Specify config file.\")\n+@click.option(\"--in_req\", help=\"Specify query input.\")", "path": "python/lsst/dax/imgserv/cli.py", "position": null, "original_position": 51, "commit_id": "2816ad423683e1ee7c6f7b71b442ceaead402aa5", "original_commit_id": "65a9c1aadfffd92cc275f3fd4a54107267fd6a6c", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "I think it's technically an argument, not an option.\r\n\r\nAn `--config` or a theoretical `--verbose` mode would be a `click.option`.\r\n\r\n`@click.argument('query_input', type=click.Path(exists=True))`\r\n`@click.argument('output', type=click.Path()) # Maybe exists=True if you want Click to validate`\r\n\r\nIn the future, it may be an option, as the CLI should be able to accept input _other than JSON files_.", "created_at": "2017-08-11T18:27:54Z", "updated_at": "2017-08-11T23:17:20Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r132754452", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132754452"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r132754452"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132754452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132756029", "pull_request_review_id": 55870571, "id": 132756029, "diff_hunk": "@@ -0,0 +1,154 @@\n+#!/usr/bin/env python\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+'''\n+This module implements the command line interface (CLI) to ImageServ.\n+\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny Lo, SLAC\n+\n+'''\n+\n+import os\n+import json\n+\n+import click\n+\n+import lsst.log as log\n+import lsst.daf.persistence as dafPersist\n+\n+from .locateImage import (\n+        image_open, W13DeepCoaddDb, W13RawDb, W13CalexpDb\n+)\n+\n+from .image import Image\n+from .dispatch import Dispatcher\n+from .hashutil import Hasher\n+\n+ROOT = os.path.abspath(os.path.dirname(__file__))\n+\n+@click.command()\n+@click.option(\"--config\", help=\"Specify config file.\")\n+@click.option(\"--in_req\", help=\"Specify query input.\")\n+@click.option(\"--out_dir\", help=\"Specify the output directory.\") \n+def exec_command(config_dir, in_req, out_dir):\n+    \"\"\" Command Line Interface: Process query to return image file", "path": "python/lsst/dax/imgserv/cli.py", "position": null, "original_position": 54, "commit_id": "2816ad423683e1ee7c6f7b71b442ceaead402aa5", "original_commit_id": "65a9c1aadfffd92cc275f3fd4a54107267fd6a6c", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "Here, add clarification on what `query_input` is. It's a `click.Path` at this point if you take advice from line 51 review. It *could* be a `click.File` if you wanted it to be, but that would require more code changes I think.", "created_at": "2017-08-11T18:34:15Z", "updated_at": "2017-08-11T23:17:20Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r132756029", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132756029"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r132756029"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132756029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132757586", "pull_request_review_id": 55870571, "id": 132757586, "diff_hunk": "@@ -0,0 +1,154 @@\n+#!/usr/bin/env python", "path": "python/lsst/dax/imgserv/cli.py", "position": 1, "original_position": 1, "commit_id": "2816ad423683e1ee7c6f7b71b442ceaead402aa5", "original_commit_id": "65a9c1aadfffd92cc275f3fd4a54107267fd6a6c", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "I don't think we want this, but I might be wrong.", "created_at": "2017-08-11T18:40:07Z", "updated_at": "2017-08-11T23:17:20Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r132757586", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132757586"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r132757586"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132757586/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132759035", "pull_request_review_id": 55870571, "id": 132759035, "diff_hunk": "@@ -0,0 +1,154 @@\n+#!/usr/bin/env python\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+'''\n+This module implements the command line interface (CLI) to ImageServ.\n+\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny Lo, SLAC\n+\n+'''\n+\n+import os\n+import json\n+\n+import click\n+\n+import lsst.log as log\n+import lsst.daf.persistence as dafPersist\n+\n+from .locateImage import (\n+        image_open, W13DeepCoaddDb, W13RawDb, W13CalexpDb\n+)\n+\n+from .image import Image\n+from .dispatch import Dispatcher\n+from .hashutil import Hasher\n+\n+ROOT = os.path.abspath(os.path.dirname(__file__))", "path": "python/lsst/dax/imgserv/cli.py", "position": 47, "original_position": 47, "commit_id": "2816ad423683e1ee7c6f7b71b442ceaead402aa5", "original_commit_id": "65a9c1aadfffd92cc275f3fd4a54107267fd6a6c", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "If Dispatcher is always going to take `os.path.join(ROOT, \"config\")` then this code should be in `dispatch.py`and that snippet should be handled there. If not, in `exec_command` you should have something like discovering the appropriate config directory. As it appears now, it seems like if `--config` isn't specified, (again, argument vs option), then this CLI fails, even though there is a configuration that (might?) work. Secondly, it seems like \"config_dir\" is ignored by the Dispatcher. It'd be good to resolve this behavior.", "created_at": "2017-08-11T18:47:01Z", "updated_at": "2017-08-11T23:17:20Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r132759035", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132759035"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r132759035"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132759035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132761112", "pull_request_review_id": 55870571, "id": 132761112, "diff_hunk": "@@ -0,0 +1,92 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+'''\n+This module implements unit testing for retrieving raw images in ImageServ API.\n+\n+@author: Kenny Lo, SLAC\n+\n+'''\n+\n+import os\n+\n+import unittest\n+\n+from pdb import set_trace as bp", "path": "integration/test_imgserv_raw.py", "position": null, "original_position": 33, "commit_id": "2816ad423683e1ee7c6f7b71b442ceaead402aa5", "original_commit_id": "65a9c1aadfffd92cc275f3fd4a54107267fd6a6c", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "Unused", "created_at": "2017-08-11T18:56:43Z", "updated_at": "2017-08-11T23:17:20Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r132761112", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132761112"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r132761112"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132761112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132761170", "pull_request_review_id": 55870571, "id": 132761170, "diff_hunk": "@@ -0,0 +1,88 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+\"\"\"\n+This module implements unit testing for retrieving deepcoadd images in ImageServ API.\n+\n+@author: Kenny Lo, SLAC\n+\n+\"\"\"\n+\n+import os\n+import unittest\n+\n+from pdb import set_trace as bp", "path": "integration/test_imgserv_coadd.py", "position": null, "original_position": 32, "commit_id": "2816ad423683e1ee7c6f7b71b442ceaead402aa5", "original_commit_id": "65a9c1aadfffd92cc275f3fd4a54107267fd6a6c", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "Unused", "created_at": "2017-08-11T18:56:54Z", "updated_at": "2017-08-11T23:17:20Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r132761170", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132761170"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r132761170"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132761170/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132787980", "pull_request_review_id": 55912203, "id": 132787980, "diff_hunk": "@@ -27,6 +27,7 @@\n \n @author  Jacek Becla, SLAC\n \"\"\"\n+from __future__ import print_function", "path": "bin/imageServer.py", "position": null, "original_position": 4, "commit_id": "2816ad423683e1ee7c6f7b71b442ceaead402aa5", "original_commit_id": "65a9c1aadfffd92cc275f3fd4a54107267fd6a6c", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Removed.", "created_at": "2017-08-11T21:34:35Z", "updated_at": "2017-08-11T23:17:20Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r132787980", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132787980"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r132787980"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132787980/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 132752089}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132788927", "pull_request_review_id": 55913205, "id": 132788927, "diff_hunk": "@@ -0,0 +1,154 @@\n+#!/usr/bin/env python", "path": "python/lsst/dax/imgserv/cli.py", "position": 1, "original_position": 1, "commit_id": "2816ad423683e1ee7c6f7b71b442ceaead402aa5", "original_commit_id": "65a9c1aadfffd92cc275f3fd4a54107267fd6a6c", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Just for convenience, as I've seen it done elsewhere in LSST.  But then it's a py file, so something like cli* would have made more sense.  But let's leave it as is for now.", "created_at": "2017-08-11T21:41:13Z", "updated_at": "2017-08-11T23:17:20Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r132788927", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132788927"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r132788927"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132788927/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 132757586}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132790328", "pull_request_review_id": 55914700, "id": 132790328, "diff_hunk": "@@ -0,0 +1,154 @@\n+#!/usr/bin/env python\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+'''\n+This module implements the command line interface (CLI) to ImageServ.\n+\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny Lo, SLAC\n+\n+'''\n+\n+import os\n+import json\n+\n+import click\n+\n+import lsst.log as log\n+import lsst.daf.persistence as dafPersist\n+\n+from .locateImage import (\n+        image_open, W13DeepCoaddDb, W13RawDb, W13CalexpDb\n+)\n+\n+from .image import Image\n+from .dispatch import Dispatcher\n+from .hashutil import Hasher\n+\n+ROOT = os.path.abspath(os.path.dirname(__file__))\n+\n+@click.command()\n+@click.option(\"--config\", help=\"Specify config file.\")\n+@click.option(\"--in_req\", help=\"Specify query input.\")", "path": "python/lsst/dax/imgserv/cli.py", "position": null, "original_position": 51, "commit_id": "2816ad423683e1ee7c6f7b71b442ceaead402aa5", "original_commit_id": "65a9c1aadfffd92cc275f3fd4a54107267fd6a6c", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Changed to 'argument' from 'option', as suggested, which I can agree more appropriate for now. click.Path() checks to be adopted - good input here.", "created_at": "2017-08-11T21:50:56Z", "updated_at": "2017-08-11T23:17:20Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r132790328", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132790328"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r132790328"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132790328/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 132754452}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132790762", "pull_request_review_id": 55915177, "id": 132790762, "diff_hunk": "@@ -0,0 +1,154 @@\n+#!/usr/bin/env python\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+'''\n+This module implements the command line interface (CLI) to ImageServ.\n+\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny Lo, SLAC\n+\n+'''\n+\n+import os\n+import json\n+\n+import click\n+\n+import lsst.log as log\n+import lsst.daf.persistence as dafPersist\n+\n+from .locateImage import (\n+        image_open, W13DeepCoaddDb, W13RawDb, W13CalexpDb\n+)\n+\n+from .image import Image\n+from .dispatch import Dispatcher\n+from .hashutil import Hasher\n+\n+ROOT = os.path.abspath(os.path.dirname(__file__))", "path": "python/lsst/dax/imgserv/cli.py", "position": 47, "original_position": 47, "commit_id": "2816ad423683e1ee7c6f7b71b442ceaead402aa5", "original_commit_id": "65a9c1aadfffd92cc275f3fd4a54107267fd6a6c", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "The intention was to use the pass-in config value.  If not passed in, then use the hardcoded default (as a guess perhaps, more complex discovery logic possible in the future) - code corrected to support the original intention.  ", "created_at": "2017-08-11T21:54:09Z", "updated_at": "2017-08-11T23:17:20Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r132790762", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132790762"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r132790762"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132790762/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 132759035}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132790825", "pull_request_review_id": 55915250, "id": 132790825, "diff_hunk": "@@ -0,0 +1,92 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+'''\n+This module implements unit testing for retrieving raw images in ImageServ API.\n+\n+@author: Kenny Lo, SLAC\n+\n+'''\n+\n+import os\n+\n+import unittest\n+\n+from pdb import set_trace as bp", "path": "integration/test_imgserv_raw.py", "position": null, "original_position": 33, "commit_id": "2816ad423683e1ee7c6f7b71b442ceaead402aa5", "original_commit_id": "65a9c1aadfffd92cc275f3fd4a54107267fd6a6c", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Removed.", "created_at": "2017-08-11T21:54:29Z", "updated_at": "2017-08-11T23:17:20Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r132790825", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132790825"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r132790825"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132790825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 132761112}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132790837", "pull_request_review_id": 55915269, "id": 132790837, "diff_hunk": "@@ -0,0 +1,88 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+\"\"\"\n+This module implements unit testing for retrieving deepcoadd images in ImageServ API.\n+\n+@author: Kenny Lo, SLAC\n+\n+\"\"\"\n+\n+import os\n+import unittest\n+\n+from pdb import set_trace as bp", "path": "integration/test_imgserv_coadd.py", "position": null, "original_position": 32, "commit_id": "2816ad423683e1ee7c6f7b71b442ceaead402aa5", "original_commit_id": "65a9c1aadfffd92cc275f3fd4a54107267fd6a6c", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Removed.", "created_at": "2017-08-11T21:54:36Z", "updated_at": "2017-08-11T23:17:20Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r132790837", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132790837"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r132790837"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132790837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 132761170}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132793346", "pull_request_review_id": 55918038, "id": 132793346, "diff_hunk": "@@ -0,0 +1,154 @@\n+#!/usr/bin/env python\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+'''\n+This module implements the command line interface (CLI) to ImageServ.\n+\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny Lo, SLAC\n+\n+'''\n+\n+import os\n+import json\n+\n+import click\n+\n+import lsst.log as log\n+import lsst.daf.persistence as dafPersist\n+\n+from .locateImage import (\n+        image_open, W13DeepCoaddDb, W13RawDb, W13CalexpDb\n+)\n+\n+from .image import Image\n+from .dispatch import Dispatcher\n+from .hashutil import Hasher\n+\n+ROOT = os.path.abspath(os.path.dirname(__file__))\n+\n+@click.command()\n+@click.option(\"--config\", help=\"Specify config file.\")\n+@click.option(\"--in_req\", help=\"Specify query input.\")\n+@click.option(\"--out_dir\", help=\"Specify the output directory.\") \n+def exec_command(config_dir, in_req, out_dir):\n+    \"\"\" Command Line Interface: Process query to return image file", "path": "python/lsst/dax/imgserv/cli.py", "position": null, "original_position": 54, "commit_id": "2816ad423683e1ee7c6f7b71b442ceaead402aa5", "original_commit_id": "65a9c1aadfffd92cc275f3fd4a54107267fd6a6c", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "query_input is a file path for now.  In the future, it can be generalized to include File object, JSON text block, or URL.  Something to keep in mind for.", "created_at": "2017-08-11T22:14:22Z", "updated_at": "2017-08-11T23:17:20Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r132793346", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132793346"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/26#discussion_r132793346"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/26"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/132793346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 132756029}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142206404", "pull_request_review_id": 66534501, "id": 142206404, "diff_hunk": "@@ -0,0 +1,89 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+'''\n+This module implements unit testing for retrieving raw images in ImageServ API.\n+\n+@author: Kenny Lo, SLAC\n+\n+'''\n+\n+import os\n+import unittest\n+\n+# import lsst.utils.tests\n+from lsst.dax.imgserv.cli_v1 import ImageServCLI\n+\n+ROOT = os.path.abspath(os.path.dirname(__file__))\n+\n+def setup_module(module):\n+    # lsst.utils.tests.init()\n+    pass\n+\n+class ImgServTest(unittest.TestCase):\n+    \"\"\" Test Cases - raw full/cutout images \"\"\"\n+\n+   #  _config = os.path.path.join(ROOT, ", "path": "integration/test_imgserv_raw_v1.py", "position": null, "original_position": 44, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "I'm not sure this comment is useful.", "created_at": "2017-10-02T17:43:12Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142206404", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142206404"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142206404"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142206404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142207249", "pull_request_review_id": 66534501, "id": 142207249, "diff_hunk": "@@ -0,0 +1,89 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+'''\n+This module implements unit testing for retrieving raw images in ImageServ API.\n+\n+@author: Kenny Lo, SLAC\n+\n+'''\n+\n+import os\n+import unittest\n+\n+# import lsst.utils.tests\n+from lsst.dax.imgserv.cli_v1 import ImageServCLI\n+\n+ROOT = os.path.abspath(os.path.dirname(__file__))\n+\n+def setup_module(module):\n+    # lsst.utils.tests.init()\n+    pass\n+\n+class ImgServTest(unittest.TestCase):\n+    \"\"\" Test Cases - raw full/cutout images \"\"\"\n+\n+   #  _config = os.path.path.join(ROOT, \n+    _configdir = os.path.join(ROOT, \"config\")\n+    _inputdir = os.path.join(ROOT, \"input_v1\")\n+    _outputdir = os.path.join(ROOT, \"output_v1\")\n+\n+    def setUp(self):\n+        pass\n+\n+    def tearDown(self):\n+        pass\n+\n+    def testImgServ_i1(self):\n+        self._run_test(\"test_raw_i1_v1.json\")\n+\n+    def testImgServ_i2(self):\n+        self._run_test(\"test_raw_i2_v1.json\")\n+\n+    def testImgServ_i3(self):\n+        self._run_test(\"test_raw_i3_v1.json\")\n+\n+    def testImgServ_i4(self):\n+        self._run_test(\"test_raw_i4_v1.json\")\n+\n+    def testImgServ_i5(self):\n+        self._run_test(\"test_raw_i5_v1.json\")\n+\n+    def testImgServ_i18(self):\n+        self._run_test(\"test_raw_i18_v1.json\")\n+\n+    def testImgServ_i19(self):\n+        self._run_test(\"test_raw_i19_v1.json\")\n+\n+    # run to generate small image (fits) only\n+    # def testImgServ_trim(self):\n+    #     self._run_test(\"test_raw_trim.json\")", "path": "integration/test_imgserv_raw_v1.py", "position": null, "original_position": 78, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "There are a few of these commented out test_ImgServ_trim functions. It seems like there would be a better way to do this.", "created_at": "2017-10-02T17:46:22Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142207249", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142207249"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142207249"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142207249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142232669", "pull_request_review_id": 66534501, "id": 142232669, "diff_hunk": "@@ -0,0 +1,176 @@\n+#!/usr/bin/env python\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+'''\n+This module implements the command line interface (CLI) to ImageServ.\n+\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny Lo, SLAC\n+\n+'''\n+\n+import os\n+import json\n+\n+import click\n+\n+import lsst.log as log\n+import lsst.daf.persistence as dafPersist\n+\n+from .locateImage import (\n+        image_open_v1, W13DeepCoaddDb, W13RawDb, W13CalexpDb\n+)\n+\n+from .image import Image\n+from .dispatch_v1 import Dispatcher\n+from .hashutil import Hasher\n+from .jsonutil import flatten_json\n+\n+ROOT = os.path.abspath(os.path.dirname(__file__))\n+\n+@click.command()\n+@click.argument(\"--config\")\n+@click.argument(\"--in_req\", type=click.Path(exists=True))\n+@click.argument(\"--out_dir\", type=click.Path(exists=True))\n+def exec_command(config_dir, in_req, out_dir):\n+    \"\"\" Command Line Interface: Process query to return image file\n+        in output directory.\n+    \"\"\"\n+    cli = ImageServCLI(config_dir, in_req, out_dir)\n+    cli.process_request()\n+\n+class ImageServCLI(object):\n+    \"\"\" Module to implement CLI for ImageServ.\n+\n+    \"\"\"\n+    def __init__(self, config_dir, in_req, out_dir):\n+        # load the configuration file\n+        if config_dir is not None:\n+            config = os.path.join(config_dir, \"settings.json\")\n+        else:\n+            config_dir = os.path.join(ROOT, \"config\")\n+            config = os.path.join(config_dir, \"settings.json\")\n+        with open(config) as f:\n+            self._config = json.load(f)\n+            # strip /tests from dataroot if cur_dir is /tests\n+            cwd = os.getcwd()\n+            f.close()\n+         # configure the log file (log4cxx)\n+        log.configure(os.path.join(config_dir, \"log.properties\"))\n+        self._in_req = in_req\n+        self._out_dir = out_dir\n+        self._dispatcher = Dispatcher(config_dir)\n+\n+    def process_request(self):\n+        # req: JSON object \n+        errors, req = self._parse_req()\n+        w13db = self._get_ds(req)\n+        if w13db:\n+            img_getter = image_open_v1(w13db, self._config)\n+            result = self.dispatch(img_getter, req)\n+            name = req[\"name\"]\n+            fp_image = self._save_result(result, name)\n+            if self._check_result(req, fp_image):\n+                print(name+\": PASS\")\n+            else:\n+                print(name+\": FAIL\")\n+        else:\n+            raise Exception(\"ImageServCLI\", \"w13db should NOT be None\")\n+\n+    def dispatch(self, img_getter, req):\n+        # direct the request to the best fit image API on parameters\n+        req_params = self._get_params(req)\n+        api = self._dispatcher.find_api(req_params)\n+        # call the API with the params\n+        try:\n+            result = api(img_getter, req_params)\n+            return result\n+        except:\n+            # ToDo: message \n+            return None\n+\n+    def _save_result(self, image, fn_prefix=\"image_out\"):\n+        # save image object into fits file in output directory\n+        fn = os.path.join(self._out_dir, fn_prefix+\".fits\")\n+        if image is None:\n+            with open(fn, \"w\") as f:\n+                f.write(\"Image Not Found\")\n+                f.close()\n+        else:\n+            image.writeFits(fn)\n+        return fn\n+\n+    def _check_result(self, req, image_fp):\n+        check_code = req[\"check\"][\"sha256\"]\n+        with open(image_fp, \"rb\") as f:\n+            image_data = f.read()\n+            f.close()\n+        h = Hasher.hash(image_data).hexdigest()\n+        return True if h == check_code else False\n+\n+    def _get_params(self, req):\n+        \"\"\" Get the parameters corresponding to the API \"\"\"", "path": "python/lsst/dax/imgserv/cli_v1.py", "position": null, "original_position": 131, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "I think I'd like some slightly more verbose comments about what is happening here. It looks like this returns a dictionary of request parameters based on the expected parameters from the api_id in the api_map.json file.", "created_at": "2017-10-02T19:30:06Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142232669", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142232669"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142232669"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142232669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142233163", "pull_request_review_id": 66534501, "id": 142233163, "diff_hunk": "@@ -0,0 +1,176 @@\n+#!/usr/bin/env python\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+'''\n+This module implements the command line interface (CLI) to ImageServ.\n+\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny Lo, SLAC\n+\n+'''\n+\n+import os\n+import json\n+\n+import click\n+\n+import lsst.log as log\n+import lsst.daf.persistence as dafPersist\n+\n+from .locateImage import (\n+        image_open_v1, W13DeepCoaddDb, W13RawDb, W13CalexpDb\n+)\n+\n+from .image import Image\n+from .dispatch_v1 import Dispatcher\n+from .hashutil import Hasher\n+from .jsonutil import flatten_json\n+\n+ROOT = os.path.abspath(os.path.dirname(__file__))\n+\n+@click.command()\n+@click.argument(\"--config\")\n+@click.argument(\"--in_req\", type=click.Path(exists=True))\n+@click.argument(\"--out_dir\", type=click.Path(exists=True))\n+def exec_command(config_dir, in_req, out_dir):\n+    \"\"\" Command Line Interface: Process query to return image file\n+        in output directory.\n+    \"\"\"\n+    cli = ImageServCLI(config_dir, in_req, out_dir)\n+    cli.process_request()\n+\n+class ImageServCLI(object):\n+    \"\"\" Module to implement CLI for ImageServ.\n+\n+    \"\"\"\n+    def __init__(self, config_dir, in_req, out_dir):\n+        # load the configuration file\n+        if config_dir is not None:\n+            config = os.path.join(config_dir, \"settings.json\")\n+        else:\n+            config_dir = os.path.join(ROOT, \"config\")\n+            config = os.path.join(config_dir, \"settings.json\")\n+        with open(config) as f:\n+            self._config = json.load(f)\n+            # strip /tests from dataroot if cur_dir is /tests\n+            cwd = os.getcwd()\n+            f.close()\n+         # configure the log file (log4cxx)\n+        log.configure(os.path.join(config_dir, \"log.properties\"))\n+        self._in_req = in_req\n+        self._out_dir = out_dir\n+        self._dispatcher = Dispatcher(config_dir)\n+\n+    def process_request(self):\n+        # req: JSON object \n+        errors, req = self._parse_req()\n+        w13db = self._get_ds(req)\n+        if w13db:\n+            img_getter = image_open_v1(w13db, self._config)\n+            result = self.dispatch(img_getter, req)\n+            name = req[\"name\"]\n+            fp_image = self._save_result(result, name)\n+            if self._check_result(req, fp_image):\n+                print(name+\": PASS\")\n+            else:\n+                print(name+\": FAIL\")\n+        else:\n+            raise Exception(\"ImageServCLI\", \"w13db should NOT be None\")\n+\n+    def dispatch(self, img_getter, req):\n+        # direct the request to the best fit image API on parameters\n+        req_params = self._get_params(req)\n+        api = self._dispatcher.find_api(req_params)\n+        # call the API with the params\n+        try:\n+            result = api(img_getter, req_params)\n+            return result\n+        except:\n+            # ToDo: message \n+            return None\n+\n+    def _save_result(self, image, fn_prefix=\"image_out\"):\n+        # save image object into fits file in output directory\n+        fn = os.path.join(self._out_dir, fn_prefix+\".fits\")\n+        if image is None:\n+            with open(fn, \"w\") as f:\n+                f.write(\"Image Not Found\")\n+                f.close()\n+        else:\n+            image.writeFits(fn)\n+        return fn\n+\n+    def _check_result(self, req, image_fp):\n+        check_code = req[\"check\"][\"sha256\"]\n+        with open(image_fp, \"rb\") as f:\n+            image_data = f.read()\n+            f.close()\n+        h = Hasher.hash(image_data).hexdigest()\n+        return True if h == check_code else False\n+\n+    def _get_params(self, req):\n+        \"\"\" Get the parameters corresponding to the API \"\"\"\n+        keys = req[\"get\"][\"api_id\"]\n+        image = req[\"get\"][\"image\"]\n+        p_list = flatten_json(image)\n+        # params to be list of all items related to keys\n+        params = {}\n+        for k in keys:\n+            for p in p_list:\n+                if p.endswith(k):\n+                    params[k]=p_list[p] # copy it", "path": "python/lsst/dax/imgserv/cli_v1.py", "position": null, "original_position": 140, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "Could duplicates be a problem here? If there's a \"db\" key and a \"objectdb\" key, does that cause a conflict?", "created_at": "2017-10-02T19:32:23Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142233163", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142233163"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142233163"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142233163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142235569", "pull_request_review_id": 66534501, "id": 142235569, "diff_hunk": "@@ -0,0 +1,62 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+\"\"\"\n+This module implements various JSON-related utility functions and classes.\n+\n+@author: Kenny Lo, SLAC\n+\n+\"\"\"\n+import os\n+import json\n+import copy\n+\n+def flatten_json(j):\n+    \"\"\" Flatten JSON object into a dictionary. \"\"\"\n+    j_d = {}\n+    def flatten(r, name=\"\"):\n+        if isinstance(r, dict):\n+            for x in r:\n+                flatten(r[x], name+x+\".\")\n+        elif isinstance(r, list):\n+            j_d[name[:-1]].append(r)\n+        else:\n+            j_d[name[:-1]] = r\n+    flatten(j)\n+    return j_d\n+\n+def _get_def(schema, k):\n+    \"\"\"Expand the key per schema.\"\"\"", "path": "python/lsst/dax/imgserv/jsonutil.py", "position": null, "original_position": 47, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "I'm not sure what this means or what the function is for and it doesn't seem to be called.", "created_at": "2017-10-02T19:43:54Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142235569", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142235569"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142235569"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142235569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142238470", "pull_request_review_id": 66534501, "id": 142238470, "diff_hunk": "@@ -74,14 +74,14 @@ def find_api(self, request):\n     def get_params(self, req, keys):\n         \"\"\" Get the parameters corresponding to the API \"\"\"\n         image = req[\"get\"][\"image\"]\n-        p_list = self._flatten_json(image)\n+        p_list = flatten_json(image)\n         # params to be list of all items related to keys\n         params = {}\n         for k in keys:\n             for p in p_list:\n-                if k in p:\n-                    params[p]=p_list[p] # copy it\n-        return params\n+                if p.endswith(k):\n+                    params[k]=p_list[p] # copy it\n+        return p_list", "path": "python/lsst/dax/imgserv/dispatch.py", "position": null, "original_position": 71, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "This looks a lot like _get_params, but I don't get the extra work in creating 'params' here only to return 'p_list' ", "created_at": "2017-10-02T19:56:35Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142238470", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142238470"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142238470"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142238470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142248939", "pull_request_review_id": 66584219, "id": 142248939, "diff_hunk": "@@ -0,0 +1,87 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+'''\n+This module implements unit testing for retrieving calexp images in ImageServ API.\n+\n+@author: Kenny Lo, SLAC\n+\n+'''\n+\n+import os\n+import unittest\n+\n+# import lsst.utils.tests", "path": "integration/test_imgserv_calexp_v1.py", "position": null, "original_position": 32, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "timj", "id": 60622, "avatar_url": "https://avatars1.githubusercontent.com/u/60622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timj", "html_url": "https://github.com/timj", "followers_url": "https://api.github.com/users/timj/followers", "following_url": "https://api.github.com/users/timj/following{/other_user}", "gists_url": "https://api.github.com/users/timj/gists{/gist_id}", "starred_url": "https://api.github.com/users/timj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timj/subscriptions", "organizations_url": "https://api.github.com/users/timj/orgs", "repos_url": "https://api.github.com/users/timj/repos", "events_url": "https://api.github.com/users/timj/events{/privacy}", "received_events_url": "https://api.github.com/users/timj/received_events", "type": "User", "site_admin": false}, "body": "You can delete these unused imports and the empty `setup_module` definitions.", "created_at": "2017-10-02T20:40:57Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142248939", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142248939"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142248939"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142248939/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142248983", "pull_request_review_id": 66584264, "id": 142248983, "diff_hunk": "@@ -0,0 +1,89 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+'''\n+This module implements unit testing for retrieving raw images in ImageServ API.\n+\n+@author: Kenny Lo, SLAC\n+\n+'''\n+\n+import os\n+import unittest\n+\n+# import lsst.utils.tests\n+from lsst.dax.imgserv.cli_v1 import ImageServCLI\n+\n+ROOT = os.path.abspath(os.path.dirname(__file__))\n+\n+def setup_module(module):\n+    # lsst.utils.tests.init()\n+    pass\n+\n+class ImgServTest(unittest.TestCase):\n+    \"\"\" Test Cases - raw full/cutout images \"\"\"\n+\n+   #  _config = os.path.path.join(ROOT, \n+    _configdir = os.path.join(ROOT, \"config\")\n+    _inputdir = os.path.join(ROOT, \"input_v1\")\n+    _outputdir = os.path.join(ROOT, \"output_v1\")\n+\n+    def setUp(self):\n+        pass\n+\n+    def tearDown(self):\n+        pass\n+\n+    def testImgServ_i1(self):", "path": "integration/test_imgserv_raw_v1.py", "position": null, "original_position": 55, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "Please think about this instead:\r\n\r\n```python\r\nRAW_ENDPOINTS = [\r\n    \"i1\", \r\n    \"i2\", \r\n    \"i3\", ...\r\n]\r\nRAW_FILE_PATTERN = \"test_raw_{endpoint)_v1.json\"\r\n\r\n...\r\n\r\n    def test_raw(self):\r\n        for endpoint in RAW_ENDPOINTS:\r\n            test_input = RAW_FILE_PATTERN.format(endpoint=endpoint)\r\n            in_req = os.path.join(self._inputdir, test_input)\r\n            cli = ImageServCLI(self._configdir, in_req, self._outputdir)\r\n            cli.process_request()\r\n```\r\n\r\nThere's a few other ways of doing it, but this will reduce the boilerplate quite a bit. Similarly, you can reuse this pattern for coadd and calexp and have only one test file.", "created_at": "2017-10-02T20:41:07Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142248983", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142248983"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142248983"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142248983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142253560", "pull_request_review_id": 66584264, "id": 142253560, "diff_hunk": "@@ -49,17 +49,17 @@\n @click.command()\n @click.argument(\"--config\")\n @click.argument(\"--in_req\", type=click.Path(exists=True))\n-@click.argument(\"--out_dir\", type=click.Path(exists=True)) \n+@click.argument(\"--out_dir\", type=click.Path(exists=True))", "path": "python/lsst/dax/imgserv/cli.py", "position": null, "original_position": 5, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "Prefer `--in-req` and `--out-dir`. These will both map to `in_req` and `out_dir`.", "created_at": "2017-10-02T20:56:48Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142253560", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142253560"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142253560"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142253560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142264971", "pull_request_review_id": 66584264, "id": 142264971, "diff_hunk": "@@ -0,0 +1,176 @@\n+#!/usr/bin/env python\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+'''\n+This module implements the command line interface (CLI) to ImageServ.\n+\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny Lo, SLAC\n+\n+'''\n+\n+import os\n+import json\n+\n+import click\n+\n+import lsst.log as log\n+import lsst.daf.persistence as dafPersist\n+\n+from .locateImage import (\n+        image_open_v1, W13DeepCoaddDb, W13RawDb, W13CalexpDb\n+)\n+\n+from .image import Image\n+from .dispatch_v1 import Dispatcher\n+from .hashutil import Hasher\n+from .jsonutil import flatten_json\n+\n+ROOT = os.path.abspath(os.path.dirname(__file__))\n+\n+@click.command()\n+@click.argument(\"--config\")\n+@click.argument(\"--in_req\", type=click.Path(exists=True))", "path": "python/lsst/dax/imgserv/cli_v1.py", "position": null, "original_position": 52, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "Same comment here.", "created_at": "2017-10-02T21:49:37Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142264971", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142264971"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142264971"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142264971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142265365", "pull_request_review_id": 66584264, "id": 142265365, "diff_hunk": "@@ -0,0 +1,176 @@\n+#!/usr/bin/env python\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+'''\n+This module implements the command line interface (CLI) to ImageServ.\n+\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny Lo, SLAC\n+\n+'''\n+\n+import os\n+import json\n+\n+import click\n+\n+import lsst.log as log\n+import lsst.daf.persistence as dafPersist\n+\n+from .locateImage import (\n+        image_open_v1, W13DeepCoaddDb, W13RawDb, W13CalexpDb\n+)\n+\n+from .image import Image\n+from .dispatch_v1 import Dispatcher\n+from .hashutil import Hasher\n+from .jsonutil import flatten_json\n+\n+ROOT = os.path.abspath(os.path.dirname(__file__))\n+\n+@click.command()\n+@click.argument(\"--config\")\n+@click.argument(\"--in_req\", type=click.Path(exists=True))\n+@click.argument(\"--out_dir\", type=click.Path(exists=True))\n+def exec_command(config_dir, in_req, out_dir):\n+    \"\"\" Command Line Interface: Process query to return image file\n+        in output directory.\n+    \"\"\"\n+    cli = ImageServCLI(config_dir, in_req, out_dir)\n+    cli.process_request()\n+\n+class ImageServCLI(object):\n+    \"\"\" Module to implement CLI for ImageServ.\n+\n+    \"\"\"\n+    def __init__(self, config_dir, in_req, out_dir):\n+        # load the configuration file\n+        if config_dir is not None:", "path": "python/lsst/dax/imgserv/cli_v1.py", "position": null, "original_position": 67, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "In this case you can just do `if config_dir` if you want, since `False` is similarly not a valid config dir.", "created_at": "2017-10-02T21:51:32Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142265365", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142265365"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142265365"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142265365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142266271", "pull_request_review_id": 66584264, "id": 142266271, "diff_hunk": "@@ -0,0 +1,176 @@\n+#!/usr/bin/env python\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+'''\n+This module implements the command line interface (CLI) to ImageServ.\n+\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny Lo, SLAC\n+\n+'''\n+\n+import os\n+import json\n+\n+import click\n+\n+import lsst.log as log\n+import lsst.daf.persistence as dafPersist\n+\n+from .locateImage import (\n+        image_open_v1, W13DeepCoaddDb, W13RawDb, W13CalexpDb\n+)\n+\n+from .image import Image\n+from .dispatch_v1 import Dispatcher\n+from .hashutil import Hasher\n+from .jsonutil import flatten_json\n+\n+ROOT = os.path.abspath(os.path.dirname(__file__))\n+\n+@click.command()\n+@click.argument(\"--config\")\n+@click.argument(\"--in_req\", type=click.Path(exists=True))\n+@click.argument(\"--out_dir\", type=click.Path(exists=True))\n+def exec_command(config_dir, in_req, out_dir):\n+    \"\"\" Command Line Interface: Process query to return image file\n+        in output directory.\n+    \"\"\"\n+    cli = ImageServCLI(config_dir, in_req, out_dir)\n+    cli.process_request()\n+\n+class ImageServCLI(object):\n+    \"\"\" Module to implement CLI for ImageServ.\n+\n+    \"\"\"\n+    def __init__(self, config_dir, in_req, out_dir):\n+        # load the configuration file\n+        if config_dir is not None:\n+            config = os.path.join(config_dir, \"settings.json\")\n+        else:\n+            config_dir = os.path.join(ROOT, \"config\")\n+            config = os.path.join(config_dir, \"settings.json\")\n+        with open(config) as f:\n+            self._config = json.load(f)\n+            # strip /tests from dataroot if cur_dir is /tests\n+            cwd = os.getcwd()\n+            f.close()\n+         # configure the log file (log4cxx)\n+        log.configure(os.path.join(config_dir, \"log.properties\"))\n+        self._in_req = in_req\n+        self._out_dir = out_dir\n+        self._dispatcher = Dispatcher(config_dir)\n+\n+    def process_request(self):\n+        # req: JSON object \n+        errors, req = self._parse_req()\n+        w13db = self._get_ds(req)\n+        if w13db:\n+            img_getter = image_open_v1(w13db, self._config)\n+            result = self.dispatch(img_getter, req)\n+            name = req[\"name\"]\n+            fp_image = self._save_result(result, name)\n+            if self._check_result(req, fp_image):\n+                print(name+\": PASS\")\n+            else:\n+                print(name+\": FAIL\")\n+        else:\n+            raise Exception(\"ImageServCLI\", \"w13db should NOT be None\")", "path": "python/lsst/dax/imgserv/cli_v1.py", "position": null, "original_position": 97, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "We may need to go over expected behaviors in this and discuss exit codes, but that can wait I think.", "created_at": "2017-10-02T21:56:05Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142266271", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142266271"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142266271"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142266271/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142272569", "pull_request_review_id": 66584264, "id": 142272569, "diff_hunk": "@@ -0,0 +1,228 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+\"\"\"\n+This module implements the Image ata model and use image getter object", "path": "python/lsst/dax/imgserv/image_v1.py", "position": null, "original_position": 23, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "Typo at \"ata\"?", "created_at": "2017-10-02T22:29:59Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142272569", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142272569"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142272569"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142272569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142273220", "pull_request_review_id": 66584264, "id": 142273220, "diff_hunk": "@@ -0,0 +1,226 @@\n+#!/usr/bin/env python\n+\n+# LSST Data Management System\n+# Copyright 2017 AURA/LSST.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+#; GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+\"\"\"\n+This module implements the RESTful interface for Image Cutout Service.\n+Corresponding URI: /image\n+\n+@author: John Gates, SLAC\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny Lo, SLAC\n+\n+\"\"\"\n+import os\n+import tempfile\n+import traceback\n+import json\n+\n+from flask import Blueprint, make_response, request, current_app, jsonify\n+from flask import render_template\n+\n+import lsst.log as log\n+\n+from http.client import BAD_REQUEST, INTERNAL_SERVER_ERROR, NOT_FOUND\n+from .locateImage import (\n+        image_open_v1, W13DeepCoaddDb, W13RawDb, W13CalexpDb\n+)\n+\n+from .image_v1 import Image\n+from .dispatch_v1 import Dispatcher\n+from .hashutil import Hasher\n+\n+imageRESTv1 = Blueprint(\"imageRESTv1\", __name__, static_folder=\"static\",\n+                      template_folder=\"templates\")\n+\n+# To be called from webserv\n+def load_imgserv_config(config_path, db_auth_conf):\n+    \"\"\"Load configuration info into ImageServ.\"\"\"\n+    if config_path is None:\n+        # use default root_path for imageRESTv1\n+        config_path = imageRESTv1.root_path+\"/config/\"\n+    f_json = os.path.join(config_path, \"settings.json\")\n+    # load the general config file  \n+    current_app.config.from_json(f_json)\n+    # configure the log file (log4cxx)\n+    log.configure(os.path.join(config_path, \"log.properties\"))\n+    current_app.config[\"DAX_IMG_DBCONF\"] = db_auth_conf\n+    current_app.config[\"DAX_IMG_CONFIG\"] = config_path\n+\n+@imageRESTv1.route(\"/\")\n+def index():\n+    return make_response(render_template(\"index_v1.html\"))\n+\n+@imageRESTv1.route(\"/availability\", methods=[\"GET\"])\n+def getimage_avail():\n+    return _getimage_avail(request)\n+\n+@imageRESTv1.route(\"/capabilities\", methods=[\"GET\"])\n+def getimage_capabilities():\n+    return _getimage_capabilities(request)\n+\n+@imageRESTv1.route(\"/<db_id>\", methods=[\"GET\"])\n+def getimage_sync(db_id):\n+    return _getimage(request, db_id)\n+\n+@imageRESTv1.route(\"/<db_id>/async\", methods=[\"POST\"])\n+def getimage_async(db_id):\n+    return _getimage_async(request)", "path": "python/lsst/dax/imgserv/imageREST_v1.py", "position": null, "original_position": 86, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "I don't see _getimage_async implemented anywhere yet.\r\n\r\n`raise NotImplementedError(\"async endpoint not yet implemented\")`", "created_at": "2017-10-02T22:34:04Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142273220", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142273220"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142273220"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142273220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142273668", "pull_request_review_id": 66584264, "id": 142273668, "diff_hunk": "@@ -0,0 +1,226 @@\n+#!/usr/bin/env python\n+\n+# LSST Data Management System\n+# Copyright 2017 AURA/LSST.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+#; GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+\"\"\"\n+This module implements the RESTful interface for Image Cutout Service.\n+Corresponding URI: /image\n+\n+@author: John Gates, SLAC\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny Lo, SLAC\n+\n+\"\"\"\n+import os\n+import tempfile\n+import traceback\n+import json\n+\n+from flask import Blueprint, make_response, request, current_app, jsonify\n+from flask import render_template\n+\n+import lsst.log as log\n+\n+from http.client import BAD_REQUEST, INTERNAL_SERVER_ERROR, NOT_FOUND\n+from .locateImage import (\n+        image_open_v1, W13DeepCoaddDb, W13RawDb, W13CalexpDb\n+)\n+\n+from .image_v1 import Image\n+from .dispatch_v1 import Dispatcher\n+from .hashutil import Hasher\n+\n+imageRESTv1 = Blueprint(\"imageRESTv1\", __name__, static_folder=\"static\",\n+                      template_folder=\"templates\")\n+\n+# To be called from webserv\n+def load_imgserv_config(config_path, db_auth_conf):\n+    \"\"\"Load configuration info into ImageServ.\"\"\"\n+    if config_path is None:\n+        # use default root_path for imageRESTv1\n+        config_path = imageRESTv1.root_path+\"/config/\"\n+    f_json = os.path.join(config_path, \"settings.json\")\n+    # load the general config file  \n+    current_app.config.from_json(f_json)\n+    # configure the log file (log4cxx)\n+    log.configure(os.path.join(config_path, \"log.properties\"))\n+    current_app.config[\"DAX_IMG_DBCONF\"] = db_auth_conf\n+    current_app.config[\"DAX_IMG_CONFIG\"] = config_path\n+\n+@imageRESTv1.route(\"/\")\n+def index():\n+    return make_response(render_template(\"index_v1.html\"))\n+\n+@imageRESTv1.route(\"/availability\", methods=[\"GET\"])\n+def getimage_avail():\n+    return _getimage_avail(request)\n+\n+@imageRESTv1.route(\"/capabilities\", methods=[\"GET\"])\n+def getimage_capabilities():\n+    return _getimage_capabilities(request)\n+\n+@imageRESTv1.route(\"/<db_id>\", methods=[\"GET\"])\n+def getimage_sync(db_id):\n+    return _getimage(request, db_id)\n+\n+@imageRESTv1.route(\"/<db_id>/async\", methods=[\"POST\"])\n+def getimage_async(db_id):\n+    return _getimage_async(request)\n+\n+def _getimage_avail(_req):\n+    \"\"\"Return availability status.\"\"\"\n+    fmt  = _req.accept_mimetypes.best_match([\"application/json\",\n+        \"text/html\"])\n+    if fmt == \"text/html\":\n+        return \"DAX Image Web Service <p> v0: service is accepting queries. <p>\\\n+                v1: service is accepting queries.\"\n+    else:\n+        json.dumps({\n+            \"availability\": {\n+                \"api\": [ \"v0\", \"v1\" ],\n+                \"v0\": {\n+                    \"status\": \"dax_imgserv_v0 is accepting queries\",\n+                    'available': 'true'\n+                },\n+                \"v1\": {\n+                    \"status\": \"dax_imgserv_v1 is accepting queries\",\n+                    \"available\": \"true\"\n+                }\n+            }\n+        })\n+\n+\n+def _getimage_capabilities(_req):\n+    \"\"\"Return capabilities of this service.\"\"\"\n+    fmt  = _req.accept_mimetypes.best_match([\"application/json\",\n+        \"text/html\"])\n+    if fmt == \"text/html\":\n+        return \"Image Web Service <p> <a href='image/v0/DC_W13_Stripe82'> API v0 - DB: W13_sdss \\\n+                Interface: DAX <p> <a href='image/v1/DC_W13_Stripe82'>API v1 - \\\n+                DB: W13_sdss &nbsp; Interface: DAX </a>\"\n+    else:\n+        json.dumps({\n+            \"capabilities\": {\n+                \"api\": [ \"v0\", \"v1\" ],\n+                \"v0\": {\n+                    \"db\": \"W13_sdss\",", "path": "python/lsst/dax/imgserv/imageREST_v1.py", "position": null, "original_position": 124, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "Not sure about this, we may need to discuss. I don't think this is the intended use for capabilities, and it'd be better to not implement it", "created_at": "2017-10-02T22:36:44Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142273668", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142273668"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142273668"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142273668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142276224", "pull_request_review_id": 66584264, "id": 142276224, "diff_hunk": "@@ -0,0 +1,228 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+\"\"\"\n+This module implements the Image ata model and use image getter object\n+to retrieve the image per request specification.\n+\n+@author: Kenny Lo, SLAC\n+\n+\"\"\"\n+\n+class Image(object):\n+    \"\"\" Image module maps a request and its parameters per JSON schema to the\n+        corresponding imagegetter method.\n+    \"\"\"\n+    def __init__(cls):\n+       pass\n+\n+    @classmethod\n+    def full_nearest(cls, image_getter, params):\n+        \"\"\"Get image nearest center.\n+\n+        Parameters\n+        ----------\n+        image_getter : getimage.imagegetter.ImageGetter\n+        center.x, center.y, center.unit, filter\n+\n+        Returns\n+        -------\n+        lsst.afw.image\n+            the full image (FITS).\n+        \"\"\"\n+        x = float(params.get(\"center.x\"))\n+        y = float(params.get(\"center.y\"))\n+        unit = params.get(\"center.unit\")\n+        filt = params.get(\"nearest.filter\")\n+        image = image_getter.full_nearest(x, y, unit, filt)\n+        return image\n+\n+    @classmethod\n+    def full_from_data_id_rcff(cls, image_getter, params):", "path": "python/lsst/dax/imgserv/image_v1.py", "position": null, "original_position": 59, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "`_rcff` is an opaque description for this method, and similarly with the `tpf` names, and non-obvious why it's named that based on the docstring. \r\n\r\nI'd potentially suggest `s/_rcff/_by_run/` and `s/_tpf/_by_tract/`, and in the docstring explain that the `params` object must have the additional information in it to validate.\r\n\r\nIt may also be more clear to not use the opaque `params` object, and perform input validation a layer up, I'm not sure.", "created_at": "2017-10-02T22:52:22Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142276224", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142276224"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142276224"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142276224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142285809", "pull_request_review_id": 66625697, "id": 142285809, "diff_hunk": "@@ -0,0 +1,176 @@\n+#!/usr/bin/env python", "path": "python/lsst/dax/imgserv/cli_v1.py", "position": 1, "original_position": 1, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "Why does this file exist as a copy of `cli.py`?", "created_at": "2017-10-03T00:02:34Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142285809", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142285809"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142285809"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142285809/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142285892", "pull_request_review_id": 66625784, "id": 142285892, "diff_hunk": "@@ -0,0 +1,176 @@\n+#!/usr/bin/env python\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+'''\n+This module implements the command line interface (CLI) to ImageServ.\n+\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny Lo, SLAC\n+\n+'''", "path": "python/lsst/dax/imgserv/cli_v1.py", "position": null, "original_position": 29, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "use `\"\"\"` for docstrings (PEP8)", "created_at": "2017-10-03T00:03:11Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142285892", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142285892"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142285892"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142285892/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142285998", "pull_request_review_id": 66625889, "id": 142285998, "diff_hunk": "@@ -0,0 +1,176 @@\n+#!/usr/bin/env python\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+'''\n+This module implements the command line interface (CLI) to ImageServ.\n+\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny Lo, SLAC\n+\n+'''\n+\n+import os\n+import json\n+\n+import click\n+\n+import lsst.log as log\n+import lsst.daf.persistence as dafPersist\n+\n+from .locateImage import (\n+        image_open_v1, W13DeepCoaddDb, W13RawDb, W13CalexpDb\n+)\n+\n+from .image import Image\n+from .dispatch_v1 import Dispatcher\n+from .hashutil import Hasher\n+from .jsonutil import flatten_json\n+\n+ROOT = os.path.abspath(os.path.dirname(__file__))\n+\n+@click.command()\n+@click.argument(\"--config\")\n+@click.argument(\"--in_req\", type=click.Path(exists=True))\n+@click.argument(\"--out_dir\", type=click.Path(exists=True))\n+def exec_command(config_dir, in_req, out_dir):\n+    \"\"\" Command Line Interface: Process query to return image file\n+        in output directory.\n+    \"\"\"\n+    cli = ImageServCLI(config_dir, in_req, out_dir)\n+    cli.process_request()\n+\n+class ImageServCLI(object):\n+    \"\"\" Module to implement CLI for ImageServ.\n+\n+    \"\"\"\n+    def __init__(self, config_dir, in_req, out_dir):\n+        # load the configuration file\n+        if config_dir is not None:\n+            config = os.path.join(config_dir, \"settings.json\")\n+        else:\n+            config_dir = os.path.join(ROOT, \"config\")\n+            config = os.path.join(config_dir, \"settings.json\")\n+        with open(config) as f:\n+            self._config = json.load(f)\n+            # strip /tests from dataroot if cur_dir is /tests\n+            cwd = os.getcwd()\n+            f.close()\n+         # configure the log file (log4cxx)", "path": "python/lsst/dax/imgserv/cli_v1.py", "position": null, "original_position": 77, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "spacing", "created_at": "2017-10-03T00:03:53Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142285998", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142285998"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142285998"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142285998/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142286051", "pull_request_review_id": 66625889, "id": 142286051, "diff_hunk": "@@ -0,0 +1,176 @@\n+#!/usr/bin/env python\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+'''\n+This module implements the command line interface (CLI) to ImageServ.\n+\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny Lo, SLAC\n+\n+'''\n+\n+import os\n+import json\n+\n+import click\n+\n+import lsst.log as log\n+import lsst.daf.persistence as dafPersist\n+\n+from .locateImage import (\n+        image_open_v1, W13DeepCoaddDb, W13RawDb, W13CalexpDb\n+)\n+\n+from .image import Image\n+from .dispatch_v1 import Dispatcher\n+from .hashutil import Hasher\n+from .jsonutil import flatten_json\n+\n+ROOT = os.path.abspath(os.path.dirname(__file__))\n+\n+@click.command()\n+@click.argument(\"--config\")\n+@click.argument(\"--in_req\", type=click.Path(exists=True))\n+@click.argument(\"--out_dir\", type=click.Path(exists=True))\n+def exec_command(config_dir, in_req, out_dir):\n+    \"\"\" Command Line Interface: Process query to return image file\n+        in output directory.\n+    \"\"\"\n+    cli = ImageServCLI(config_dir, in_req, out_dir)\n+    cli.process_request()\n+\n+class ImageServCLI(object):", "path": "python/lsst/dax/imgserv/cli_v1.py", "position": null, "original_position": 61, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "2 newlines between methods/code (PEP8)", "created_at": "2017-10-03T00:04:13Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142286051", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142286051"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142286051"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142286051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142286185", "pull_request_review_id": 66625889, "id": 142286185, "diff_hunk": "@@ -0,0 +1,176 @@\n+#!/usr/bin/env python\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+'''\n+This module implements the command line interface (CLI) to ImageServ.\n+\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny Lo, SLAC\n+\n+'''\n+\n+import os\n+import json\n+\n+import click\n+\n+import lsst.log as log\n+import lsst.daf.persistence as dafPersist\n+\n+from .locateImage import (\n+        image_open_v1, W13DeepCoaddDb, W13RawDb, W13CalexpDb\n+)\n+\n+from .image import Image\n+from .dispatch_v1 import Dispatcher\n+from .hashutil import Hasher\n+from .jsonutil import flatten_json\n+\n+ROOT = os.path.abspath(os.path.dirname(__file__))\n+\n+@click.command()\n+@click.argument(\"--config\")\n+@click.argument(\"--in_req\", type=click.Path(exists=True))\n+@click.argument(\"--out_dir\", type=click.Path(exists=True))\n+def exec_command(config_dir, in_req, out_dir):\n+    \"\"\" Command Line Interface: Process query to return image file\n+        in output directory.\n+    \"\"\"\n+    cli = ImageServCLI(config_dir, in_req, out_dir)\n+    cli.process_request()\n+\n+class ImageServCLI(object):\n+    \"\"\" Module to implement CLI for ImageServ.\n+\n+    \"\"\"\n+    def __init__(self, config_dir, in_req, out_dir):\n+        # load the configuration file\n+        if config_dir is not None:\n+            config = os.path.join(config_dir, \"settings.json\")\n+        else:\n+            config_dir = os.path.join(ROOT, \"config\")\n+            config = os.path.join(config_dir, \"settings.json\")\n+        with open(config) as f:\n+            self._config = json.load(f)\n+            # strip /tests from dataroot if cur_dir is /tests\n+            cwd = os.getcwd()\n+            f.close()\n+         # configure the log file (log4cxx)\n+        log.configure(os.path.join(config_dir, \"log.properties\"))\n+        self._in_req = in_req\n+        self._out_dir = out_dir\n+        self._dispatcher = Dispatcher(config_dir)\n+\n+    def process_request(self):\n+        # req: JSON object \n+        errors, req = self._parse_req()\n+        w13db = self._get_ds(req)\n+        if w13db:\n+            img_getter = image_open_v1(w13db, self._config)\n+            result = self.dispatch(img_getter, req)\n+            name = req[\"name\"]\n+            fp_image = self._save_result(result, name)\n+            if self._check_result(req, fp_image):\n+                print(name+\": PASS\")\n+            else:\n+                print(name+\": FAIL\")\n+        else:\n+            raise Exception(\"ImageServCLI\", \"w13db should NOT be None\")\n+\n+    def dispatch(self, img_getter, req):\n+        # direct the request to the best fit image API on parameters\n+        req_params = self._get_params(req)\n+        api = self._dispatcher.find_api(req_params)\n+        # call the API with the params\n+        try:\n+            result = api(img_getter, req_params)\n+            return result\n+        except:", "path": "python/lsst/dax/imgserv/cli_v1.py", "position": null, "original_position": 107, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "Specify exception here (also PEP8), use `except Exception` if you must.", "created_at": "2017-10-03T00:05:11Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142286185", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142286185"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142286185"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142286185/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142286223", "pull_request_review_id": 66625889, "id": 142286223, "diff_hunk": "@@ -0,0 +1,176 @@\n+#!/usr/bin/env python\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+'''\n+This module implements the command line interface (CLI) to ImageServ.\n+\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny Lo, SLAC\n+\n+'''\n+\n+import os\n+import json\n+\n+import click\n+\n+import lsst.log as log\n+import lsst.daf.persistence as dafPersist\n+\n+from .locateImage import (\n+        image_open_v1, W13DeepCoaddDb, W13RawDb, W13CalexpDb\n+)\n+\n+from .image import Image\n+from .dispatch_v1 import Dispatcher\n+from .hashutil import Hasher\n+from .jsonutil import flatten_json\n+\n+ROOT = os.path.abspath(os.path.dirname(__file__))\n+\n+@click.command()\n+@click.argument(\"--config\")\n+@click.argument(\"--in_req\", type=click.Path(exists=True))\n+@click.argument(\"--out_dir\", type=click.Path(exists=True))\n+def exec_command(config_dir, in_req, out_dir):\n+    \"\"\" Command Line Interface: Process query to return image file\n+        in output directory.\n+    \"\"\"\n+    cli = ImageServCLI(config_dir, in_req, out_dir)\n+    cli.process_request()\n+\n+class ImageServCLI(object):\n+    \"\"\" Module to implement CLI for ImageServ.\n+\n+    \"\"\"\n+    def __init__(self, config_dir, in_req, out_dir):\n+        # load the configuration file\n+        if config_dir is not None:\n+            config = os.path.join(config_dir, \"settings.json\")\n+        else:\n+            config_dir = os.path.join(ROOT, \"config\")\n+            config = os.path.join(config_dir, \"settings.json\")\n+        with open(config) as f:\n+            self._config = json.load(f)\n+            # strip /tests from dataroot if cur_dir is /tests\n+            cwd = os.getcwd()\n+            f.close()\n+         # configure the log file (log4cxx)\n+        log.configure(os.path.join(config_dir, \"log.properties\"))\n+        self._in_req = in_req\n+        self._out_dir = out_dir\n+        self._dispatcher = Dispatcher(config_dir)\n+\n+    def process_request(self):\n+        # req: JSON object \n+        errors, req = self._parse_req()\n+        w13db = self._get_ds(req)\n+        if w13db:\n+            img_getter = image_open_v1(w13db, self._config)\n+            result = self.dispatch(img_getter, req)\n+            name = req[\"name\"]\n+            fp_image = self._save_result(result, name)\n+            if self._check_result(req, fp_image):\n+                print(name+\": PASS\")\n+            else:\n+                print(name+\": FAIL\")\n+        else:\n+            raise Exception(\"ImageServCLI\", \"w13db should NOT be None\")\n+\n+    def dispatch(self, img_getter, req):\n+        # direct the request to the best fit image API on parameters\n+        req_params = self._get_params(req)\n+        api = self._dispatcher.find_api(req_params)\n+        # call the API with the params\n+        try:\n+            result = api(img_getter, req_params)\n+            return result\n+        except:\n+            # ToDo: message \n+            return None\n+\n+    def _save_result(self, image, fn_prefix=\"image_out\"):\n+        # save image object into fits file in output directory\n+        fn = os.path.join(self._out_dir, fn_prefix+\".fits\")\n+        if image is None:\n+            with open(fn, \"w\") as f:\n+                f.write(\"Image Not Found\")\n+                f.close()\n+        else:\n+            image.writeFits(fn)\n+        return fn\n+\n+    def _check_result(self, req, image_fp):\n+        check_code = req[\"check\"][\"sha256\"]\n+        with open(image_fp, \"rb\") as f:\n+            image_data = f.read()\n+            f.close()\n+        h = Hasher.hash(image_data).hexdigest()\n+        return True if h == check_code else False\n+\n+    def _get_params(self, req):\n+        \"\"\" Get the parameters corresponding to the API \"\"\"\n+        keys = req[\"get\"][\"api_id\"]\n+        image = req[\"get\"][\"image\"]\n+        p_list = flatten_json(image)\n+        # params to be list of all items related to keys\n+        params = {}\n+        for k in keys:\n+            for p in p_list:\n+                if p.endswith(k):\n+                    params[k]=p_list[p] # copy it\n+        return params\n+\n+", "path": "python/lsst/dax/imgserv/cli_v1.py", "position": null, "original_position": 143, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "Too much space (PEP8)", "created_at": "2017-10-03T00:05:28Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142286223", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142286223"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142286223"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142286223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142286296", "pull_request_review_id": 66625889, "id": 142286296, "diff_hunk": "@@ -0,0 +1,176 @@\n+#!/usr/bin/env python\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+'''\n+This module implements the command line interface (CLI) to ImageServ.\n+\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny Lo, SLAC\n+\n+'''\n+\n+import os\n+import json\n+\n+import click\n+\n+import lsst.log as log\n+import lsst.daf.persistence as dafPersist\n+\n+from .locateImage import (\n+        image_open_v1, W13DeepCoaddDb, W13RawDb, W13CalexpDb\n+)\n+\n+from .image import Image\n+from .dispatch_v1 import Dispatcher\n+from .hashutil import Hasher\n+from .jsonutil import flatten_json\n+\n+ROOT = os.path.abspath(os.path.dirname(__file__))\n+\n+@click.command()\n+@click.argument(\"--config\")\n+@click.argument(\"--in_req\", type=click.Path(exists=True))\n+@click.argument(\"--out_dir\", type=click.Path(exists=True))\n+def exec_command(config_dir, in_req, out_dir):\n+    \"\"\" Command Line Interface: Process query to return image file\n+        in output directory.\n+    \"\"\"\n+    cli = ImageServCLI(config_dir, in_req, out_dir)\n+    cli.process_request()\n+\n+class ImageServCLI(object):\n+    \"\"\" Module to implement CLI for ImageServ.\n+\n+    \"\"\"\n+    def __init__(self, config_dir, in_req, out_dir):\n+        # load the configuration file\n+        if config_dir is not None:\n+            config = os.path.join(config_dir, \"settings.json\")\n+        else:\n+            config_dir = os.path.join(ROOT, \"config\")\n+            config = os.path.join(config_dir, \"settings.json\")\n+        with open(config) as f:\n+            self._config = json.load(f)\n+            # strip /tests from dataroot if cur_dir is /tests\n+            cwd = os.getcwd()\n+            f.close()\n+         # configure the log file (log4cxx)\n+        log.configure(os.path.join(config_dir, \"log.properties\"))\n+        self._in_req = in_req\n+        self._out_dir = out_dir\n+        self._dispatcher = Dispatcher(config_dir)\n+\n+    def process_request(self):\n+        # req: JSON object \n+        errors, req = self._parse_req()\n+        w13db = self._get_ds(req)\n+        if w13db:\n+            img_getter = image_open_v1(w13db, self._config)\n+            result = self.dispatch(img_getter, req)\n+            name = req[\"name\"]\n+            fp_image = self._save_result(result, name)\n+            if self._check_result(req, fp_image):\n+                print(name+\": PASS\")\n+            else:\n+                print(name+\": FAIL\")\n+        else:\n+            raise Exception(\"ImageServCLI\", \"w13db should NOT be None\")\n+\n+    def dispatch(self, img_getter, req):\n+        # direct the request to the best fit image API on parameters\n+        req_params = self._get_params(req)\n+        api = self._dispatcher.find_api(req_params)\n+        # call the API with the params\n+        try:\n+            result = api(img_getter, req_params)\n+            return result\n+        except:\n+            # ToDo: message \n+            return None\n+\n+    def _save_result(self, image, fn_prefix=\"image_out\"):\n+        # save image object into fits file in output directory\n+        fn = os.path.join(self._out_dir, fn_prefix+\".fits\")\n+        if image is None:\n+            with open(fn, \"w\") as f:\n+                f.write(\"Image Not Found\")\n+                f.close()\n+        else:\n+            image.writeFits(fn)\n+        return fn\n+\n+    def _check_result(self, req, image_fp):\n+        check_code = req[\"check\"][\"sha256\"]\n+        with open(image_fp, \"rb\") as f:\n+            image_data = f.read()\n+            f.close()\n+        h = Hasher.hash(image_data).hexdigest()\n+        return True if h == check_code else False\n+\n+    def _get_params(self, req):\n+        \"\"\" Get the parameters corresponding to the API \"\"\"\n+        keys = req[\"get\"][\"api_id\"]\n+        image = req[\"get\"][\"image\"]\n+        p_list = flatten_json(image)\n+        # params to be list of all items related to keys\n+        params = {}\n+        for k in keys:\n+            for p in p_list:\n+                if p.endswith(k):\n+                    params[k]=p_list[p] # copy it", "path": "python/lsst/dax/imgserv/cli_v1.py", "position": null, "original_position": 140, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "(PEP8 also, not enough spaces)", "created_at": "2017-10-03T00:06:11Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142286296", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142286296"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142286296"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142286296/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 142233163}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142286819", "pull_request_review_id": 66625889, "id": 142286819, "diff_hunk": "@@ -0,0 +1,226 @@\n+#!/usr/bin/env python\n+\n+# LSST Data Management System\n+# Copyright 2017 AURA/LSST.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+#; GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+\"\"\"\n+This module implements the RESTful interface for Image Cutout Service.\n+Corresponding URI: /image\n+\n+@author: John Gates, SLAC\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny Lo, SLAC\n+\n+\"\"\"\n+import os\n+import tempfile\n+import traceback\n+import json\n+\n+from flask import Blueprint, make_response, request, current_app, jsonify\n+from flask import render_template\n+\n+import lsst.log as log\n+\n+from http.client import BAD_REQUEST, INTERNAL_SERVER_ERROR, NOT_FOUND\n+from .locateImage import (\n+        image_open_v1, W13DeepCoaddDb, W13RawDb, W13CalexpDb\n+)\n+\n+from .image_v1 import Image\n+from .dispatch_v1 import Dispatcher\n+from .hashutil import Hasher\n+\n+imageRESTv1 = Blueprint(\"imageRESTv1\", __name__, static_folder=\"static\",\n+                      template_folder=\"templates\")\n+\n+# To be called from webserv\n+def load_imgserv_config(config_path, db_auth_conf):\n+    \"\"\"Load configuration info into ImageServ.\"\"\"\n+    if config_path is None:\n+        # use default root_path for imageRESTv1\n+        config_path = imageRESTv1.root_path+\"/config/\"\n+    f_json = os.path.join(config_path, \"settings.json\")\n+    # load the general config file  \n+    current_app.config.from_json(f_json)\n+    # configure the log file (log4cxx)\n+    log.configure(os.path.join(config_path, \"log.properties\"))\n+    current_app.config[\"DAX_IMG_DBCONF\"] = db_auth_conf\n+    current_app.config[\"DAX_IMG_CONFIG\"] = config_path\n+\n+@imageRESTv1.route(\"/\")\n+def index():\n+    return make_response(render_template(\"index_v1.html\"))\n+\n+@imageRESTv1.route(\"/availability\", methods=[\"GET\"])\n+def getimage_avail():\n+    return _getimage_avail(request)\n+\n+@imageRESTv1.route(\"/capabilities\", methods=[\"GET\"])\n+def getimage_capabilities():\n+    return _getimage_capabilities(request)\n+\n+@imageRESTv1.route(\"/<db_id>\", methods=[\"GET\"])\n+def getimage_sync(db_id):\n+    return _getimage(request, db_id)\n+\n+@imageRESTv1.route(\"/<db_id>/async\", methods=[\"POST\"])\n+def getimage_async(db_id):\n+    return _getimage_async(request)\n+\n+def _getimage_avail(_req):\n+    \"\"\"Return availability status.\"\"\"\n+    fmt  = _req.accept_mimetypes.best_match([\"application/json\",\n+        \"text/html\"])\n+    if fmt == \"text/html\":\n+        return \"DAX Image Web Service <p> v0: service is accepting queries. <p>\\\n+                v1: service is accepting queries.\"\n+    else:\n+        json.dumps({\n+            \"availability\": {\n+                \"api\": [ \"v0\", \"v1\" ],\n+                \"v0\": {\n+                    \"status\": \"dax_imgserv_v0 is accepting queries\",\n+                    'available': 'true'\n+                },\n+                \"v1\": {\n+                    \"status\": \"dax_imgserv_v1 is accepting queries\",\n+                    \"available\": \"true\"\n+                }\n+            }\n+        })\n+\n+\n+def _getimage_capabilities(_req):\n+    \"\"\"Return capabilities of this service.\"\"\"\n+    fmt  = _req.accept_mimetypes.best_match([\"application/json\",\n+        \"text/html\"])\n+    if fmt == \"text/html\":\n+        return \"Image Web Service <p> <a href='image/v0/DC_W13_Stripe82'> API v0 - DB: W13_sdss \\\n+                Interface: DAX <p> <a href='image/v1/DC_W13_Stripe82'>API v1 - \\\n+                DB: W13_sdss &nbsp; Interface: DAX </a>\"\n+    else:\n+        json.dumps({\n+            \"capabilities\": {\n+                \"api\": [ \"v0\", \"v1\" ],\n+                \"v0\": {\n+                    \"db\": \"W13_sdss\",\n+                    \"url\": \"image/v0/DC_W13_Strip82\",\n+                    \"interface\": [ \"DAX 0.0\" ]\n+                },\n+                \"v1\": {\n+                \"db\": \"W13_sdss\",\n+                \"url\": \"image/v1/DC_W13_Stripe82\",\n+                \"interface\": [ \"SODA 1.1\", \"DAX 1.0\" ]\n+                }\n+            }\n+        })\n+\n+\n+def _getimage(_req, db_id):\n+    \"\"\"Get the image per query request synchronously (default).\n+    Parameters:\n+        request the request object\n+        db  image database string\n+    \"\"\"\n+    ds = _req.args.get(\"ds\")\n+    if ds is None:\n+        return None\n+    w13db = _get_ds(ds.strip())\n+    if w13db:\n+        dispatcher = Dispatcher(current_app.config[\"DAX_IMG_CONFIG\"])\n+        params = _req.args.copy()\n+        params[\"db\"] = db_id\n+        params[\"ds\"] = ds\n+        api = dispatcher.find_api(params)\n+        try:\n+            img_getter = image_open_v1(w13db, current_app.config)\n+            image = api(img_getter, params)\n+            if image is None:\n+                return _image_not_found()\n+            else:\n+                return _file_response(image, \"image_out.fits\")\n+        except:\n+            # ToDo: handling error \n+            return None", "path": "python/lsst/dax/imgserv/imageREST_v1.py", "position": null, "original_position": 162, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "IMPORTANT: You should let the exception be raised or wrap it in a general exception. This must be changed. This will throw silent errors.", "created_at": "2017-10-03T00:10:37Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142286819", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142286819"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142286819"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142286819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142287434", "pull_request_review_id": 66625889, "id": 142287434, "diff_hunk": "@@ -0,0 +1,226 @@\n+#!/usr/bin/env python\n+\n+# LSST Data Management System\n+# Copyright 2017 AURA/LSST.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+#; GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+\"\"\"\n+This module implements the RESTful interface for Image Cutout Service.\n+Corresponding URI: /image\n+\n+@author: John Gates, SLAC\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny Lo, SLAC\n+\n+\"\"\"\n+import os\n+import tempfile\n+import traceback\n+import json\n+\n+from flask import Blueprint, make_response, request, current_app, jsonify\n+from flask import render_template\n+\n+import lsst.log as log\n+\n+from http.client import BAD_REQUEST, INTERNAL_SERVER_ERROR, NOT_FOUND\n+from .locateImage import (\n+        image_open_v1, W13DeepCoaddDb, W13RawDb, W13CalexpDb\n+)\n+\n+from .image_v1 import Image\n+from .dispatch_v1 import Dispatcher\n+from .hashutil import Hasher\n+\n+imageRESTv1 = Blueprint(\"imageRESTv1\", __name__, static_folder=\"static\",\n+                      template_folder=\"templates\")\n+\n+# To be called from webserv\n+def load_imgserv_config(config_path, db_auth_conf):\n+    \"\"\"Load configuration info into ImageServ.\"\"\"\n+    if config_path is None:\n+        # use default root_path for imageRESTv1\n+        config_path = imageRESTv1.root_path+\"/config/\"\n+    f_json = os.path.join(config_path, \"settings.json\")\n+    # load the general config file  \n+    current_app.config.from_json(f_json)\n+    # configure the log file (log4cxx)\n+    log.configure(os.path.join(config_path, \"log.properties\"))\n+    current_app.config[\"DAX_IMG_DBCONF\"] = db_auth_conf\n+    current_app.config[\"DAX_IMG_CONFIG\"] = config_path\n+\n+@imageRESTv1.route(\"/\")\n+def index():\n+    return make_response(render_template(\"index_v1.html\"))\n+\n+@imageRESTv1.route(\"/availability\", methods=[\"GET\"])\n+def getimage_avail():\n+    return _getimage_avail(request)\n+\n+@imageRESTv1.route(\"/capabilities\", methods=[\"GET\"])\n+def getimage_capabilities():\n+    return _getimage_capabilities(request)\n+\n+@imageRESTv1.route(\"/<db_id>\", methods=[\"GET\"])", "path": "python/lsst/dax/imgserv/imageREST_v1.py", "position": null, "original_position": 80, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "I'm on the fence about this. I think it's fine for now, but _I think_ we need to make this a generic `/sync` and the next method a generic `/async` and let our effective `db_id` actually be an ivo id as a query parameter (e.g. `ivo://lsst.org/images/W13_sdss`", "created_at": "2017-10-03T00:15:09Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142287434", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142287434"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142287434"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142287434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142287589", "pull_request_review_id": 66625889, "id": 142287589, "diff_hunk": "@@ -0,0 +1,226 @@\n+#!/usr/bin/env python", "path": "python/lsst/dax/imgserv/imageREST_v1.py", "position": null, "original_position": 1, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "Remove this (file is not executable). Generally, this file has a few PEP8 issues.", "created_at": "2017-10-03T00:16:32Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142287589", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142287589"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142287589"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142287589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142287825", "pull_request_review_id": 66625889, "id": 142287825, "diff_hunk": "@@ -0,0 +1,544 @@\n+#", "path": "python/lsst/dax/imgserv/getimage/imagegetter_v1.py", "position": 1, "original_position": 1, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "Check this file against PEP8.", "created_at": "2017-10-03T00:18:27Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142287825", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142287825"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142287825"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142287825/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142288055", "pull_request_review_id": 66625889, "id": 142288055, "diff_hunk": "@@ -0,0 +1,544 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+#\n+#\n+# This code is used to to select an image or a cutout of an image\n+# that has its center closest to the specified RA and Dec. The\n+# image is retrieved using the Data Butler.\n+\n+\"\"\"\n+This library module is used to locate and retrieve variolus image types and cutout\n+dimensions, via the appropriate Butler object passed in.\n+\n+@author: John Gates, SLAC\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny Lo, SLAC\n+\n+\"\"\"\n+\n+import math\n+\n+import lsst.afw\n+import lsst.afw.coord as afw_coord\n+import lsst.afw.geom as afw_geom\n+import lsst.afw.image as afw_image\n+\n+import lsst.log as log\n+\n+\n+class ImageGetter_v1:\n+    \"\"\"Provide operations to retrieve images including cutouts from the specified\n+    image repository through the passed-in butler and metaserv.\n+\n+    \"\"\"\n+\n+    def __init__(self, butlerget, metaservget, logger):\n+        \"\"\" Instantiate ImageGetter object with butler, butler configuration,\n+        and connection for image metadata.\n+\n+        Parameters\n+        ----------\n+        butlerget : locateImage.ButlerGet\n+            the butler instance and config info.\n+        metaservget : locateImage.MetaservGet\n+            provides access to image metadata.\n+        logger : log\n+            the logger to be used.\n+        \"\"\"\n+        self._log = logger\n+        self._butler = butlerget.butler\n+        self._butler_keys = butlerget.butler_keys\n+        self._imagedataset_type = butlerget.butler_policy\n+        self._metaservget = metaservget\n+\n+\n+    def full_nearest(self, x, y, unit, filt):\n+        \"\"\"Returns image containing center(x,y) of unit and filter.\n+\n+        Parameters\n+        ----------\n+        x : float\n+            x-coordinate, or Ra if Equatorial\n+        y : float\n+            y-coordinate, or Dec if Equatorial\n+        unit : string\n+            [ 'px', 'pix\", 'pixel', 'pixels', 'arcsec', 'arcmin', 'deg' ]\n+        filt : string (optional)\n+            [ 'g', 'i', 'r', 'u', 'z' ]\n+\n+        Returns\n+        -------\n+        lsst.afw.Image or None\n+\n+        \"\"\"\n+        # assume (x,y) is Equatorial coordinates here\n+        ra = x\n+        dec = y\n+        filtername = filt\n+        qresult = self._metaservget.nearest_image_containing(ra, dec, filtername)\n+        if qresult == []:\n+            return None # not found\n+        else:\n+            data_id_type, data_id = self._data_id_from_qr(qresult)\n+            image = self._image_from_butler(data_id_type, data_id)\n+            return image\n+\n+\n+    def full_from_data_id_rcff(self, run, camcol, field, filt):\n+        \"\"\"Returns image from specified data id (run, camcol, field, filter).\n+\n+        Parameters\n+        ----------\n+        run : int\n+        camcol : int\n+        field : int\n+        filt : string\n+            [ 'g', 'i', 'r', 'u', 'z' ]\n+\n+        Returns\n+        -------\n+        lsst.afw.Image or None\n+\n+        \"\"\"\n+        image = self._butler.get(self._imagedataset_type, run=run,camcol=camcol,\n+                field=field, filter=filt)\n+        return image\n+\n+\n+\n+    def full_from_data_id_tpf(self, tract, patch_x, patch_y, filt):\n+        \"\"\"Returns image from specified data id (tract, patch<x,y>, filter).\n+\n+        Parameters\n+        ----------\n+        tract : int\n+        patch_x : int\n+        patch_y : int\n+        filt : string\n+            [ 'g', 'i', 'r', 'u', 'z' ]\n+\n+        Returns\n+        -------\n+        lsst.afw.Image or None\n+\n+        \"\"\"\n+        patch = \",\".join((str(patch_x), str(patch_y)))\n+        image = self._butler.get(self._imagedataset_type, tract=tract,\n+                patch=patch, filter=filt)\n+        return image\n+\n+\n+    def full_from_science_id(self, science_id):\n+        \"\"\"Returns image from the science id.\n+\n+        Parameters\n+        ----------\n+        science_id : int\n+\n+        Returns\n+        -------\n+        lsst.afw.Image or None\n+\n+        \"\"\"\n+        data_id_type, data_id = self._data_id_from_science_id(science_id)\n+        if data_id_type:\n+            image = self._image_from_butler(data_id_type, data_id)\n+            return image\n+\n+\n+    def cutout_from_nearest(self, center_x, center_y, center_unit, size_x,\n+            size_y, size_unit, filt):\n+        \"\"\"Returns the cutout image at center (x,y) of unit and size.\n+\n+        Parameters\n+        ----------\n+        cetner_x : float\n+        cetner_y : float\n+        center_unit : string\n+            [ 'px', 'pix', 'pixel', 'pixels', 'arcsec', 'arcmin', 'deg' ]\n+        size_x : float\n+        size_y : float\n+        size_unit : string\n+        filt: string\n+\n+        Returns\n+        -------\n+        lsst.afw.Image or None\n+\n+        \"\"\"\n+        ra, dec = center_x, center_y\n+        filtername = filt\n+        width, height = size_x, size_y\n+        qresult = self._metaservget.nearest_image_containing(ra, dec, filtername)\n+        if qresult == []:\n+            return None # not found\n+        else:\n+            data_id_type, data_id = self._data_id_from_qr(qresult)\n+            image = self._imagecutout_by_data_id(ra, dec, width, height,\n+                    data_id_type, data_id, size_unit)\n+            return image\n+\n+\n+    def cutout_from_data_id_rcff(self, run, camcol, field, filt, center_x,\n+            cetner_y, center_unit, size_x, size_y, size_unit):\n+        \"\"\"Returns cutout image from data id (run, camcol, field, filtername)\n+        of specified center.\n+ \n+        Parameters\n+        ----------\n+        run : int\n+        camcol : int\n+        field : int\n+        filt : string\n+        center_x : float\n+        center_y : float\n+        cetner_unit : string\n+            [ 'px', 'pix', 'pixel', 'pixels', 'arcsec', 'arcmin', 'deg' ]\n+        size_x : float\n+        size_y : float\n+        size_unit : string\n+\n+        Returns\n+        -------\n+        lsst.afw.Image or None\n+\n+        \"\"\"\n+        ra, dec = center_x, center_y\n+        width, height = size_x, size_y\n+        data_id = { \"run\": run, \"camcol\": camcol, \"field\": field, \"filter\":\n+                filt }\n+        image = self._imagecutout_by_data_id(ra, dec, width, height, \"rcff\", data_id,\n+                size_unit)\n+        return image\n+\n+\n+    def cutout_from_data_id_tpf(self, tract, patch_x, patch_y, filt, center_x,\n+            center_y, center_unit, size_x, size_y, size_unit):\n+        \"\"\"Returns cutout image from data id (tract, patch<x,y>, filt)\n+        of specified center.\n+\n+        Parameters\n+        ----------\n+        tract : int\n+        patch_x : int\n+        pactch_y : int\n+        filt : string\n+        center_x : float\n+        cetner_y : float\n+        center_unit : string\n+            [ 'px', 'pix', 'pixel, 'pixels', 'arcsec', 'arcmin', 'deg' ]\n+        size_x : float\n+        size_y : float\n+        size_unit : string\n+\n+        Returns\n+        -------\n+        lsst.afw.Image or None\n+\n+        \"\"\"\n+        ra, dec = center_x, center_y\n+        width, height = size_x, size_y\n+        patch = \",\".join((str(patch_x), str(patch_y)))\n+        data_id = { \"tract\": tract, \"patch\": patch, \"filter\": filt }\n+        image = self._imagecutout_by_data_id(ra, dec, width, height, \"tpf\", data_id,\n+                size_unit)\n+        return image\n+\n+\n+    def cutout_from_science_id(self, science_id, center_x, center_y,\n+                center_unit, size_x, size_y, size_unit):\n+        \"\"\"\n+        Parameters\n+        ----------\n+        science_id : int\n+        center_x : float\n+        center_y : float\n+        center_unit : string\n+            [ 'px', 'pix', 'pixel', 'pixels', 'arcsec', 'arcmin', 'deg' ]\n+        size_x : float\n+        size_y : float\n+        size_unit : string\n+            [ 'px', 'pix', 'pixel', 'pixels', 'arcsec', 'arcmin', 'deg' ]\n+\n+        Returns\n+        -------\n+        lsst.afw.Image or None\n+\n+        \"\"\"\n+        ra, dec = center_x, center_y\n+        width, height = size_x, size_y\n+        # Get the corresponding image(data) id from the butler\n+        data_id_type, data_id = self._data_id_from_science_id(science_id)\n+        if data_id_type:\n+            # make id compatible with qResult type via custom wrapping\n+            image = self._imagecutout_by_data_id(ra, dec, width, height,\n+                    data_id_type, data_id, size_unit)\n+            return image\n+\n+\n+    def _data_id_from_science_id(self, science_id):\n+        \"\"\"Returns a dictionary of ids derived from scienceId.\n+        The ids match the ids in _butler_keys and valid is false\n+        if at least one of the ids is missing.\n+\n+        \"\"\"\n+        ids_type = None\n+        ids = {}\n+        science_id = int(science_id)\n+        if self._butler_keys == [\"run\", \"camcol\", \"field\", \"filter\"]:\n+            ids_type = \"rcff\"\n+            possible_fields = {\n+                \"field\": science_id % 10000,\n+                \"camcol\": (science_id//10000) % 10,\n+                \"filter\": \"ugriz\"[(science_id//100000) % 10],\n+                \"run\": science_id//1000000,\n+            }\n+            self._log.debug(\"data_id_from_science_id {}\".format(\n+                possible_fields))\n+            for key in self._butler_keys:\n+                value = possible_fields[key]\n+                if value is None:\n+                    ids_type = None\n+                ids[key] = value\n+            self._log.debug(\"dataID_type: dataID={} {}\".format(ids_type, ids))\n+        elif self._butler_keys == [\"tract\", \"patch\", \"filter\"]:\n+            ids_type = \"tpf\"\n+            patch_y = (science_id//8) % (2**13)\n+            patch_x = (science_id//(2**16)) % (2**13)\n+            possible_fields = {\n+                \"filter\": \"ugriz\"[science_id % 8],\n+                \"tract\": science_id//(2**29),\n+                \"patch\": \"%d,%d\" % (patch_x, patch_y)\n+            }\n+            self._log.debug(\"data_id_from_science_id {}\".format(\n+                possible_fields))\n+            for key in self._butler_keys:\n+                value = possible_fields[key]\n+                if value is None:\n+                    ids_type = None\n+                ids[key] = value\n+            self._log.debug(\"dataID_type: dataID={} {}\".format(ids_type, ids))\n+        return ids_type, ids\n+\n+\n+    def _imagecutout_by_data_id(self, ra, dec, width, height, data_id_type, data_id, unit=\"arcsec\"):\n+        # check to see if qresults is empty\n+        if data_id is None:\n+            return None\n+        # Return an image by data ID through the butler.\n+        image = self._image_from_butler(data_id_type, data_id)\n+        if image is None:\n+            # @todo html error handling see DM-1980\n+            return None\n+        # Get the metadata for the source image.\n+        metadata = self._metadata_from_data_id(data_id)\n+        cutout = self._apply_cutout(image, metadata, ra, dec, width, height, data_id, unit)\n+        return cutout\n+\n+\n+    def _apply_cutout(self, src_img, metadata, ra, dec, width, height, data_id,\n+                         unit=\"arcsec\"):\n+        \"\"\"Return an image centered on ra and dec (in degrees) with dimensions\n+        height and width (in arcseconds by default).\n+\n+        - Determine approximate pixels per arcsec in the image by\n+             calculating the length of line from the upper right corner of\n+             the image to the lower left corner in pixels and arcsecs.\n+             (This will fail at or very near the pole.)\n+        - Use that to define a box for the cutout.\n+        - Trim the box so it is entirely within the source image.\n+\n+        Parameters\n+        ----------\n+        ra, dec :  flaot\n+            ra, dec in degrees.\n+        height, width : float, float\n+            Height and width are in arcsecs.\n+\n+        Returns\n+        -------\n+        lsst.afw.Image\n+\n+        \"\"\"\n+        self._log.debug(\"apply_cutout %f %f %f %f\", ra, dec, width, height)\n+        # False: do not remove FITS keywords from metadata\n+        wcs = None\n+        if isinstance(src_img, afw_image.ExposureF):\n+            wcs = src_img.getWcs()\n+        if wcs is None:\n+            # try to use the metadata\n+            wcs = lsst.afw.image.makeWcs(metadata, False)\n+        if wcs is None:\n+            # can't continue\n+            return None\n+        radec = afw_coord.makeCoord(afw_coord.ICRS,\n+                                     ra * afw_geom.degrees,\n+                                     dec * afw_geom.degrees)\n+        xy_wcs = wcs.skyToPixel(radec)\n+        xy_center_x = xy_wcs.getX()\n+        xy_center_y = xy_wcs.getY()\n+        self._log.debug(\"ra=%f dec=%f xy_center=(%f,%f)\",\n+                ra, dec, xy_center_x, xy_center_y)\n+        if unit == 'pixel':\n+            image = self._cutout_from_src(src_img, xy_center_x, xy_center_y,\n+                                         width, height, wcs)\n+            return image\n+        img_w, img_h = src_img.getWidth(), src_img.getHeight()\n+        self._log.debug(\"src_img_w=%d src_img_h=%d\", img_w, img_h)\n+        # Determine approximate pixels per arcsec - find image corners in RA and Dec\n+        # and compare that distance with the number of pixels.\n+        radec_ul = wcs.pixelToSky(afw_geom.Point2D(0, 0))\n+        radec_lr = wcs.pixelToSky(afw_geom.Point2D(img_w - 1, img_h - 1))\n+        self._log.debug(\"radec_ul 0=%f 1=%f\",\n+                        radec_ul[0].asDegrees(), radec_ul[1].asDegrees())\n+        self._log.debug(\"radec_lr 0=%f 1=%f\",\n+                        radec_lr[0].asDegrees(), radec_lr[1].asDegrees())\n+        # length of a line from upper left (UL) to lower right (LR)\n+        dec_dist = radec_ul[1].asArcseconds() - radec_lr[1].asArcseconds()\n+        ra_lr = self._keep_within_180(radec_ul[0].asDegrees(),\n+                radec_lr[0].asDegrees())\n+        ra_lr *= 3600.0  # convert degrees to arcsecs\n+        # Correct distance in RA for the declination\n+        cos_dec = math.cos(dec * afw_geom.degrees)\n+        ra_dist = cos_dec * (radec_ul[0].asArcseconds() - ra_lr)\n+        radec_dist = math.sqrt(math.pow(dec_dist, 2.0) + math.pow(ra_dist, 2.0))\n+        self._log.debug(\"radec_dist=%f\", radec_dist)\n+        pixel_dist = math.sqrt(math.pow(img_w, 2.0) + math.pow(img_h, 2.0))\n+        pixel_per_arcsec = pixel_dist/radec_dist\n+        self._log.debug(\"pixel_per_arcsec=%f\", pixel_per_arcsec)\n+        # Need Upper Left corner and dimensions for Box2I\n+        pix_w = width*pixel_per_arcsec\n+        pix_h = height*pixel_per_arcsec\n+        self._log.debug(\"ra=%f dec=%f xy_wcs=(%f,%f) xyCenter=(%f,%f)\",\n+                ra, dec, xy_wcs.getX(), xy_wcs.getY(), xy_center_x, xy_center_y)\n+        cutout = self._cutout_from_src(src_img, xy_center_x, xy_center_y,\n+                pix_w, pix_h, wcs)\n+        return cutout\n+\n+    def _metadata_from_data_id(self, data_id):\n+        # Return the metadata for the query results in qResults and a butler.\n+        if self._butler_keys == [\"run\", \"camcol\", \"field\", \"filter\"]:\n+            return self._butler.get(self._imagedataset_md(),\n+                    run=data_id[\"run\"],\n+                    camcol=data_id[\"camcol\"],\n+                    field=data_id[\"field\"],\n+                    filter=data_id[\"filter\"])\n+        if self._butler_keys == [\"tract\", \"patch\", \"filter\"]:\n+            return self._butler.get(self._imagedataset_md(),\n+                    tract=data_id[\"tract\"],\n+                    patch=data_id[\"patch\"],\n+                    filter=data_id[\"filter\"])\n+\n+\n+    def _image_from_butler(self, data_id_type, data_id):\n+        # Retrieve the image through the Butler using data id.\n+        self._log.debug(\"_image_from_butler data_id:{}\".format(data_id))\n+        image = None\n+        if data_id_type == \"rcff\":  # rcff=run, camcol, field, filter\n+            run = data_id.get(\"run\")\n+            camcol = data_id.get(\"camcol\")\n+            field = data_id.get(\"field\")\n+            filtername = data_id.get(\"filter\")\n+            log.debug(\"_image_from_butler run={} camcol={} field={} \"\n+                      \"filter={}\".format(run, camcol, field, filtername))\n+            image = self._butler.get(self._imagedataset_type, run=run,\n+                                   camcol=camcol, field=field, filter=filtername)\n+        elif data_id_type == \"tpf\":  # tpf=tract, patch, filtername\n+            tract = data_id.get(\"tract\")\n+            filtername = data_id.get(\"filter\")\n+            patch = data_id.get(\"patch\")\n+            self._log.debug(\"_image_from_butler tract={} patch={} \"\n+                            \"filtername={}\".format(tract, patch, filtername))\n+            image = self._butler.get(self._imagedataset_type, tract=tract,\n+                                   patch=patch, filter=filtername)\n+        return image\n+\n+\n+    def _imagedataset_md(self):\n+        # Return the butler policy name to retrieve metadata\n+        return self._imagedataset_type + \"_md\"\n+\n+\n+    def _cutout_from_src(self, src_image, xy_center_x, xy_center_y, width, height, wcs):\n+        # Returns an image cutout from the source image.\n+        #   srcImage - Source image.\n+        #   xy_center - The center of region to cutout in pixels.\n+        #   width - The width in pixels.\n+        #   height - The height in pixels.\n+        #   height and width will be trimmed if they go past the edge of the source image.\n+        # First, center the cutout image\n+        pix_ulx = int(xy_center_x - width/2.0)\n+        pix_uly = int(xy_center_y - height/2.0)\n+        xy_center = afw_geom.Point2I(pix_ulx, pix_uly)\n+        log.debug(\"xy_center={}\".format(xy_center))\n+        src_box = src_image.getBBox()\n+        # assuming both src_box and xy_center to be in Box2I\n+        co_box = afw_geom.Box2I(xy_center, afw_geom.Extent2I(int(width), int(height)))\n+        if co_box.overlaps(src_box):\n+            co_box.clip(src_box)\n+        else:\n+            self._log.debug(\"cutout image wanted is OUTSIDE source image -> None\")\n+            return None\n+        if isinstance(src_image, afw_image.ExposureF):\n+            self._log.debug(\"co_box pix_ulx={} pix_end_x={} pix_uly={} pix_end_y={}\"\n+                  .format(pix_ulx, pix_ulx+width, pix_uly, pix_uly+height))\n+            # img will keep wcs from source image\n+            image = afw_image.ExposureF(src_image, co_box)\n+        else:\n+            # hack for non-ExposureF, e.g. raw (DecoratedImage)\n+            pix_ulx = co_box.getBeginX() - src_image.getX0()\n+            pix_end_x = co_box.getEndX() - src_image.getX0()\n+            pix_uly = co_box.getBeginY() - src_image.getY0()\n+            pix_end_y = co_box.getEndY() - src_image.getY0()\n+            self._log.debug(\"co_box pix_ulx={} pix_end_x={} pix_uly={} pix_end_y={}\".format(pix_ulx,\n+                pix_end_x, pix_uly, pix_end_y))\n+            image = src_image[pix_ulx:pix_end_x, pix_uly:pix_end_y].clone()\n+        return image\n+\n+\n+    def _data_id_from_qr(self, qresults):\n+        # identify and fetch the data ID from 1 of 2 defined sets\n+        ln = qresults[0]\n+        # first try run, camcol, field, filter keys\n+        if self._butler_keys == [\"run\", \"camcol\", \"field\", \"filter\"]:\n+            run, camcol, field, filtername = ln[2:6]\n+            data_id = { \"run\": run, \"camcol\": camcol, \"field\": field,\n+                    \"filter\": filtername}\n+            return \"rcff\", data_id\n+        # if no match, then try tract, patch, filter keys\n+        if self._butler_keys == [\"tract\", \"patch\", \"filter\"]:\n+            tract, patch, filtername = ln[2:5]\n+            data_id = { \"tract\": tract, \"patch\": patch, \"filter\":\n+                    filtername }\n+            return \"tpf\", data_id\n+\n+\n+    def _keep_within_180(self, target, val):", "path": "python/lsst/dax/imgserv/getimage/imagegetter_v1.py", "position": null, "original_position": 534, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "`normalize_positions`? This name isn't very descriptive. ", "created_at": "2017-10-03T00:20:22Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142288055", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142288055"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142288055"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142288055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142456167", "pull_request_review_id": 66819845, "id": 142456167, "diff_hunk": "@@ -0,0 +1,176 @@\n+#!/usr/bin/env python\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+'''\n+This module implements the command line interface (CLI) to ImageServ.\n+\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny Lo, SLAC\n+\n+'''\n+\n+import os\n+import json\n+\n+import click\n+\n+import lsst.log as log\n+import lsst.daf.persistence as dafPersist\n+\n+from .locateImage import (\n+        image_open_v1, W13DeepCoaddDb, W13RawDb, W13CalexpDb\n+)\n+\n+from .image import Image\n+from .dispatch_v1 import Dispatcher\n+from .hashutil import Hasher\n+from .jsonutil import flatten_json\n+\n+ROOT = os.path.abspath(os.path.dirname(__file__))\n+\n+@click.command()\n+@click.argument(\"--config\")\n+@click.argument(\"--in_req\", type=click.Path(exists=True))\n+@click.argument(\"--out_dir\", type=click.Path(exists=True))\n+def exec_command(config_dir, in_req, out_dir):\n+    \"\"\" Command Line Interface: Process query to return image file\n+        in output directory.\n+    \"\"\"\n+    cli = ImageServCLI(config_dir, in_req, out_dir)\n+    cli.process_request()\n+\n+class ImageServCLI(object):\n+    \"\"\" Module to implement CLI for ImageServ.\n+\n+    \"\"\"\n+    def __init__(self, config_dir, in_req, out_dir):\n+        # load the configuration file\n+        if config_dir is not None:\n+            config = os.path.join(config_dir, \"settings.json\")\n+        else:\n+            config_dir = os.path.join(ROOT, \"config\")\n+            config = os.path.join(config_dir, \"settings.json\")\n+        with open(config) as f:\n+            self._config = json.load(f)\n+            # strip /tests from dataroot if cur_dir is /tests\n+            cwd = os.getcwd()\n+            f.close()\n+         # configure the log file (log4cxx)\n+        log.configure(os.path.join(config_dir, \"log.properties\"))\n+        self._in_req = in_req\n+        self._out_dir = out_dir\n+        self._dispatcher = Dispatcher(config_dir)\n+\n+    def process_request(self):\n+        # req: JSON object \n+        errors, req = self._parse_req()\n+        w13db = self._get_ds(req)\n+        if w13db:\n+            img_getter = image_open_v1(w13db, self._config)\n+            result = self.dispatch(img_getter, req)\n+            name = req[\"name\"]\n+            fp_image = self._save_result(result, name)\n+            if self._check_result(req, fp_image):\n+                print(name+\": PASS\")\n+            else:\n+                print(name+\": FAIL\")\n+        else:\n+            raise Exception(\"ImageServCLI\", \"w13db should NOT be None\")\n+\n+    def dispatch(self, img_getter, req):\n+        # direct the request to the best fit image API on parameters\n+        req_params = self._get_params(req)\n+        api = self._dispatcher.find_api(req_params)\n+        # call the API with the params\n+        try:\n+            result = api(img_getter, req_params)\n+            return result\n+        except:\n+            # ToDo: message \n+            return None", "path": "python/lsst/dax/imgserv/cli_v1.py", "position": null, "original_position": 109, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "brianv0", "id": 549395, "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "body": "Raise the exception, don't return None", "created_at": "2017-10-03T16:40:51Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142456167", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142456167"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142456167"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142456167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142791433", "pull_request_review_id": 67205847, "id": 142791433, "diff_hunk": "@@ -49,17 +49,17 @@\n @click.command()\n @click.argument(\"--config\")\n @click.argument(\"--in_req\", type=click.Path(exists=True))\n-@click.argument(\"--out_dir\", type=click.Path(exists=True)) \n+@click.argument(\"--out_dir\", type=click.Path(exists=True))", "path": "python/lsst/dax/imgserv/cli.py", "position": null, "original_position": 5, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Changed.", "created_at": "2017-10-04T21:00:54Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142791433", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142791433"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142791433"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142791433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 142253560}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142791453", "pull_request_review_id": 67205869, "id": 142791453, "diff_hunk": "@@ -0,0 +1,176 @@\n+#!/usr/bin/env python\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+'''\n+This module implements the command line interface (CLI) to ImageServ.\n+\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny Lo, SLAC\n+\n+'''\n+\n+import os\n+import json\n+\n+import click\n+\n+import lsst.log as log\n+import lsst.daf.persistence as dafPersist\n+\n+from .locateImage import (\n+        image_open_v1, W13DeepCoaddDb, W13RawDb, W13CalexpDb\n+)\n+\n+from .image import Image\n+from .dispatch_v1 import Dispatcher\n+from .hashutil import Hasher\n+from .jsonutil import flatten_json\n+\n+ROOT = os.path.abspath(os.path.dirname(__file__))\n+\n+@click.command()\n+@click.argument(\"--config\")\n+@click.argument(\"--in_req\", type=click.Path(exists=True))", "path": "python/lsst/dax/imgserv/cli_v1.py", "position": null, "original_position": 52, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Changed.", "created_at": "2017-10-04T21:01:01Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142791453", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142791453"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142791453"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142791453/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 142264971}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142791528", "pull_request_review_id": 67205958, "id": 142791528, "diff_hunk": "@@ -0,0 +1,87 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+'''\n+This module implements unit testing for retrieving calexp images in ImageServ API.\n+\n+@author: Kenny Lo, SLAC\n+\n+'''\n+\n+import os\n+import unittest\n+\n+# import lsst.utils.tests", "path": "integration/test_imgserv_calexp_v1.py", "position": null, "original_position": 32, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Removed.", "created_at": "2017-10-04T21:01:19Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142791528", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142791528"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142791528"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142791528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 142248939}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142791836", "pull_request_review_id": 67206296, "id": 142791836, "diff_hunk": "@@ -74,14 +74,14 @@ def find_api(self, request):\n     def get_params(self, req, keys):\n         \"\"\" Get the parameters corresponding to the API \"\"\"\n         image = req[\"get\"][\"image\"]\n-        p_list = self._flatten_json(image)\n+        p_list = flatten_json(image)\n         # params to be list of all items related to keys\n         params = {}\n         for k in keys:\n             for p in p_list:\n-                if k in p:\n-                    params[p]=p_list[p] # copy it\n-        return params\n+                if p.endswith(k):\n+                    params[k]=p_list[p] # copy it\n+        return p_list", "path": "python/lsst/dax/imgserv/dispatch.py", "position": null, "original_position": 71, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Fixed to avoid confusion - older version of get_params() does not need to create params, so p_list as return is ok.", "created_at": "2017-10-04T21:02:35Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142791836", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142791836"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142791836"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142791836/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 142238470}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142792018", "pull_request_review_id": 67206544, "id": 142792018, "diff_hunk": "@@ -0,0 +1,62 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+\"\"\"\n+This module implements various JSON-related utility functions and classes.\n+\n+@author: Kenny Lo, SLAC\n+\n+\"\"\"\n+import os\n+import json\n+import copy\n+\n+def flatten_json(j):\n+    \"\"\" Flatten JSON object into a dictionary. \"\"\"\n+    j_d = {}\n+    def flatten(r, name=\"\"):\n+        if isinstance(r, dict):\n+            for x in r:\n+                flatten(r[x], name+x+\".\")\n+        elif isinstance(r, list):\n+            j_d[name[:-1]].append(r)\n+        else:\n+            j_d[name[:-1]] = r\n+    flatten(j)\n+    return j_d\n+\n+def _get_def(schema, k):\n+    \"\"\"Expand the key per schema.\"\"\"", "path": "python/lsst/dax/imgserv/jsonutil.py", "position": null, "original_position": 47, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Removed here.  (fyi, part of schema validation)", "created_at": "2017-10-04T21:03:31Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142792018", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142792018"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142792018"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142792018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 142235569}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142792802", "pull_request_review_id": 67207448, "id": 142792802, "diff_hunk": "@@ -0,0 +1,176 @@\n+#!/usr/bin/env python\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+'''\n+This module implements the command line interface (CLI) to ImageServ.\n+\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny Lo, SLAC\n+\n+'''\n+\n+import os\n+import json\n+\n+import click\n+\n+import lsst.log as log\n+import lsst.daf.persistence as dafPersist\n+\n+from .locateImage import (\n+        image_open_v1, W13DeepCoaddDb, W13RawDb, W13CalexpDb\n+)\n+\n+from .image import Image\n+from .dispatch_v1 import Dispatcher\n+from .hashutil import Hasher\n+from .jsonutil import flatten_json\n+\n+ROOT = os.path.abspath(os.path.dirname(__file__))\n+\n+@click.command()\n+@click.argument(\"--config\")\n+@click.argument(\"--in_req\", type=click.Path(exists=True))\n+@click.argument(\"--out_dir\", type=click.Path(exists=True))\n+def exec_command(config_dir, in_req, out_dir):\n+    \"\"\" Command Line Interface: Process query to return image file\n+        in output directory.\n+    \"\"\"\n+    cli = ImageServCLI(config_dir, in_req, out_dir)\n+    cli.process_request()\n+\n+class ImageServCLI(object):\n+    \"\"\" Module to implement CLI for ImageServ.\n+\n+    \"\"\"\n+    def __init__(self, config_dir, in_req, out_dir):\n+        # load the configuration file\n+        if config_dir is not None:\n+            config = os.path.join(config_dir, \"settings.json\")\n+        else:\n+            config_dir = os.path.join(ROOT, \"config\")\n+            config = os.path.join(config_dir, \"settings.json\")\n+        with open(config) as f:\n+            self._config = json.load(f)\n+            # strip /tests from dataroot if cur_dir is /tests\n+            cwd = os.getcwd()\n+            f.close()\n+         # configure the log file (log4cxx)\n+        log.configure(os.path.join(config_dir, \"log.properties\"))\n+        self._in_req = in_req\n+        self._out_dir = out_dir\n+        self._dispatcher = Dispatcher(config_dir)\n+\n+    def process_request(self):\n+        # req: JSON object \n+        errors, req = self._parse_req()\n+        w13db = self._get_ds(req)\n+        if w13db:\n+            img_getter = image_open_v1(w13db, self._config)\n+            result = self.dispatch(img_getter, req)\n+            name = req[\"name\"]\n+            fp_image = self._save_result(result, name)\n+            if self._check_result(req, fp_image):\n+                print(name+\": PASS\")\n+            else:\n+                print(name+\": FAIL\")\n+        else:\n+            raise Exception(\"ImageServCLI\", \"w13db should NOT be None\")\n+\n+    def dispatch(self, img_getter, req):\n+        # direct the request to the best fit image API on parameters\n+        req_params = self._get_params(req)\n+        api = self._dispatcher.find_api(req_params)\n+        # call the API with the params\n+        try:\n+            result = api(img_getter, req_params)\n+            return result\n+        except:\n+            # ToDo: message \n+            return None\n+\n+    def _save_result(self, image, fn_prefix=\"image_out\"):\n+        # save image object into fits file in output directory\n+        fn = os.path.join(self._out_dir, fn_prefix+\".fits\")\n+        if image is None:\n+            with open(fn, \"w\") as f:\n+                f.write(\"Image Not Found\")\n+                f.close()\n+        else:\n+            image.writeFits(fn)\n+        return fn\n+\n+    def _check_result(self, req, image_fp):\n+        check_code = req[\"check\"][\"sha256\"]\n+        with open(image_fp, \"rb\") as f:\n+            image_data = f.read()\n+            f.close()\n+        h = Hasher.hash(image_data).hexdigest()\n+        return True if h == check_code else False\n+\n+    def _get_params(self, req):\n+        \"\"\" Get the parameters corresponding to the API \"\"\"\n+        keys = req[\"get\"][\"api_id\"]\n+        image = req[\"get\"][\"image\"]\n+        p_list = flatten_json(image)\n+        # params to be list of all items related to keys\n+        params = {}\n+        for k in keys:\n+            for p in p_list:\n+                if p.endswith(k):\n+                    params[k]=p_list[p] # copy it", "path": "python/lsst/dax/imgserv/cli_v1.py", "position": null, "original_position": 140, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Fixed.  \".db\" vs \".objectdb\" with \".\" prefix to avoid ambiguity.", "created_at": "2017-10-04T21:06:48Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142792802", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142792802"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142792802"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142792802/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 142233163}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142792989", "pull_request_review_id": 67207674, "id": 142792989, "diff_hunk": "@@ -0,0 +1,176 @@\n+#!/usr/bin/env python\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+'''\n+This module implements the command line interface (CLI) to ImageServ.\n+\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny Lo, SLAC\n+\n+'''\n+\n+import os\n+import json\n+\n+import click\n+\n+import lsst.log as log\n+import lsst.daf.persistence as dafPersist\n+\n+from .locateImage import (\n+        image_open_v1, W13DeepCoaddDb, W13RawDb, W13CalexpDb\n+)\n+\n+from .image import Image\n+from .dispatch_v1 import Dispatcher\n+from .hashutil import Hasher\n+from .jsonutil import flatten_json\n+\n+ROOT = os.path.abspath(os.path.dirname(__file__))\n+\n+@click.command()\n+@click.argument(\"--config\")\n+@click.argument(\"--in_req\", type=click.Path(exists=True))\n+@click.argument(\"--out_dir\", type=click.Path(exists=True))\n+def exec_command(config_dir, in_req, out_dir):\n+    \"\"\" Command Line Interface: Process query to return image file\n+        in output directory.\n+    \"\"\"\n+    cli = ImageServCLI(config_dir, in_req, out_dir)\n+    cli.process_request()\n+\n+class ImageServCLI(object):\n+    \"\"\" Module to implement CLI for ImageServ.\n+\n+    \"\"\"\n+    def __init__(self, config_dir, in_req, out_dir):\n+        # load the configuration file\n+        if config_dir is not None:", "path": "python/lsst/dax/imgserv/cli_v1.py", "position": null, "original_position": 67, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Changed.", "created_at": "2017-10-04T21:07:36Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142792989", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142792989"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142792989"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142792989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 142265365}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142793157", "pull_request_review_id": 67207865, "id": 142793157, "diff_hunk": "@@ -0,0 +1,176 @@\n+#!/usr/bin/env python\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+'''\n+This module implements the command line interface (CLI) to ImageServ.\n+\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny Lo, SLAC\n+\n+'''\n+\n+import os\n+import json\n+\n+import click\n+\n+import lsst.log as log\n+import lsst.daf.persistence as dafPersist\n+\n+from .locateImage import (\n+        image_open_v1, W13DeepCoaddDb, W13RawDb, W13CalexpDb\n+)\n+\n+from .image import Image\n+from .dispatch_v1 import Dispatcher\n+from .hashutil import Hasher\n+from .jsonutil import flatten_json\n+\n+ROOT = os.path.abspath(os.path.dirname(__file__))\n+\n+@click.command()\n+@click.argument(\"--config\")\n+@click.argument(\"--in_req\", type=click.Path(exists=True))\n+@click.argument(\"--out_dir\", type=click.Path(exists=True))\n+def exec_command(config_dir, in_req, out_dir):\n+    \"\"\" Command Line Interface: Process query to return image file\n+        in output directory.\n+    \"\"\"\n+    cli = ImageServCLI(config_dir, in_req, out_dir)\n+    cli.process_request()\n+\n+class ImageServCLI(object):\n+    \"\"\" Module to implement CLI for ImageServ.\n+\n+    \"\"\"\n+    def __init__(self, config_dir, in_req, out_dir):\n+        # load the configuration file\n+        if config_dir is not None:\n+            config = os.path.join(config_dir, \"settings.json\")\n+        else:\n+            config_dir = os.path.join(ROOT, \"config\")\n+            config = os.path.join(config_dir, \"settings.json\")\n+        with open(config) as f:\n+            self._config = json.load(f)\n+            # strip /tests from dataroot if cur_dir is /tests\n+            cwd = os.getcwd()\n+            f.close()\n+         # configure the log file (log4cxx)\n+        log.configure(os.path.join(config_dir, \"log.properties\"))\n+        self._in_req = in_req\n+        self._out_dir = out_dir\n+        self._dispatcher = Dispatcher(config_dir)\n+\n+    def process_request(self):\n+        # req: JSON object \n+        errors, req = self._parse_req()\n+        w13db = self._get_ds(req)\n+        if w13db:\n+            img_getter = image_open_v1(w13db, self._config)\n+            result = self.dispatch(img_getter, req)\n+            name = req[\"name\"]\n+            fp_image = self._save_result(result, name)\n+            if self._check_result(req, fp_image):\n+                print(name+\": PASS\")\n+            else:\n+                print(name+\": FAIL\")\n+        else:\n+            raise Exception(\"ImageServCLI\", \"w13db should NOT be None\")", "path": "python/lsst/dax/imgserv/cli_v1.py", "position": null, "original_position": 97, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "TBD", "created_at": "2017-10-04T21:08:16Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142793157", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142793157"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142793157"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142793157/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 142266271}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142793209", "pull_request_review_id": 67207927, "id": 142793209, "diff_hunk": "@@ -0,0 +1,228 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+\"\"\"\n+This module implements the Image ata model and use image getter object", "path": "python/lsst/dax/imgserv/image_v1.py", "position": null, "original_position": 23, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Typo fixed.", "created_at": "2017-10-04T21:08:30Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142793209", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142793209"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142793209"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142793209/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 142272569}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142793325", "pull_request_review_id": 67208069, "id": 142793325, "diff_hunk": "@@ -0,0 +1,226 @@\n+#!/usr/bin/env python\n+\n+# LSST Data Management System\n+# Copyright 2017 AURA/LSST.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+#; GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+\"\"\"\n+This module implements the RESTful interface for Image Cutout Service.\n+Corresponding URI: /image\n+\n+@author: John Gates, SLAC\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny Lo, SLAC\n+\n+\"\"\"\n+import os\n+import tempfile\n+import traceback\n+import json\n+\n+from flask import Blueprint, make_response, request, current_app, jsonify\n+from flask import render_template\n+\n+import lsst.log as log\n+\n+from http.client import BAD_REQUEST, INTERNAL_SERVER_ERROR, NOT_FOUND\n+from .locateImage import (\n+        image_open_v1, W13DeepCoaddDb, W13RawDb, W13CalexpDb\n+)\n+\n+from .image_v1 import Image\n+from .dispatch_v1 import Dispatcher\n+from .hashutil import Hasher\n+\n+imageRESTv1 = Blueprint(\"imageRESTv1\", __name__, static_folder=\"static\",\n+                      template_folder=\"templates\")\n+\n+# To be called from webserv\n+def load_imgserv_config(config_path, db_auth_conf):\n+    \"\"\"Load configuration info into ImageServ.\"\"\"\n+    if config_path is None:\n+        # use default root_path for imageRESTv1\n+        config_path = imageRESTv1.root_path+\"/config/\"\n+    f_json = os.path.join(config_path, \"settings.json\")\n+    # load the general config file  \n+    current_app.config.from_json(f_json)\n+    # configure the log file (log4cxx)\n+    log.configure(os.path.join(config_path, \"log.properties\"))\n+    current_app.config[\"DAX_IMG_DBCONF\"] = db_auth_conf\n+    current_app.config[\"DAX_IMG_CONFIG\"] = config_path\n+\n+@imageRESTv1.route(\"/\")\n+def index():\n+    return make_response(render_template(\"index_v1.html\"))\n+\n+@imageRESTv1.route(\"/availability\", methods=[\"GET\"])\n+def getimage_avail():\n+    return _getimage_avail(request)\n+\n+@imageRESTv1.route(\"/capabilities\", methods=[\"GET\"])\n+def getimage_capabilities():\n+    return _getimage_capabilities(request)\n+\n+@imageRESTv1.route(\"/<db_id>\", methods=[\"GET\"])\n+def getimage_sync(db_id):\n+    return _getimage(request, db_id)\n+\n+@imageRESTv1.route(\"/<db_id>/async\", methods=[\"POST\"])\n+def getimage_async(db_id):\n+    return _getimage_async(request)", "path": "python/lsst/dax/imgserv/imageREST_v1.py", "position": null, "original_position": 86, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Fixed as advised here.", "created_at": "2017-10-04T21:09:04Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142793325", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142793325"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142793325"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142793325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 142273220}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142794861", "pull_request_review_id": 67209797, "id": 142794861, "diff_hunk": "@@ -0,0 +1,176 @@\n+#!/usr/bin/env python", "path": "python/lsst/dax/imgserv/cli_v1.py", "position": 1, "original_position": 1, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "cli_v1.py is based on v1 whereas cli.py is on v0 of the new JSON schema, hence minor but significant differences.  Eventually cli.py will be retired when we obselete v0 code altogether from imgserv.", "created_at": "2017-10-04T21:15:32Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142794861", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142794861"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142794861"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142794861/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 142285809}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142794973", "pull_request_review_id": 67209932, "id": 142794973, "diff_hunk": "@@ -0,0 +1,176 @@\n+#!/usr/bin/env python\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+'''\n+This module implements the command line interface (CLI) to ImageServ.\n+\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny Lo, SLAC\n+\n+'''", "path": "python/lsst/dax/imgserv/cli_v1.py", "position": null, "original_position": 29, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Fixed.", "created_at": "2017-10-04T21:15:58Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142794973", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142794973"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142794973"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142794973/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 142285892}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142795018", "pull_request_review_id": 67209988, "id": 142795018, "diff_hunk": "@@ -0,0 +1,176 @@\n+#!/usr/bin/env python\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+'''\n+This module implements the command line interface (CLI) to ImageServ.\n+\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny Lo, SLAC\n+\n+'''\n+\n+import os\n+import json\n+\n+import click\n+\n+import lsst.log as log\n+import lsst.daf.persistence as dafPersist\n+\n+from .locateImage import (\n+        image_open_v1, W13DeepCoaddDb, W13RawDb, W13CalexpDb\n+)\n+\n+from .image import Image\n+from .dispatch_v1 import Dispatcher\n+from .hashutil import Hasher\n+from .jsonutil import flatten_json\n+\n+ROOT = os.path.abspath(os.path.dirname(__file__))\n+\n+@click.command()\n+@click.argument(\"--config\")\n+@click.argument(\"--in_req\", type=click.Path(exists=True))\n+@click.argument(\"--out_dir\", type=click.Path(exists=True))\n+def exec_command(config_dir, in_req, out_dir):\n+    \"\"\" Command Line Interface: Process query to return image file\n+        in output directory.\n+    \"\"\"\n+    cli = ImageServCLI(config_dir, in_req, out_dir)\n+    cli.process_request()\n+\n+class ImageServCLI(object):", "path": "python/lsst/dax/imgserv/cli_v1.py", "position": null, "original_position": 61, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Fixed.", "created_at": "2017-10-04T21:16:08Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142795018", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142795018"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142795018"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142795018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 142286051}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142795042", "pull_request_review_id": 67210016, "id": 142795042, "diff_hunk": "@@ -0,0 +1,176 @@\n+#!/usr/bin/env python\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+'''\n+This module implements the command line interface (CLI) to ImageServ.\n+\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny Lo, SLAC\n+\n+'''\n+\n+import os\n+import json\n+\n+import click\n+\n+import lsst.log as log\n+import lsst.daf.persistence as dafPersist\n+\n+from .locateImage import (\n+        image_open_v1, W13DeepCoaddDb, W13RawDb, W13CalexpDb\n+)\n+\n+from .image import Image\n+from .dispatch_v1 import Dispatcher\n+from .hashutil import Hasher\n+from .jsonutil import flatten_json\n+\n+ROOT = os.path.abspath(os.path.dirname(__file__))\n+\n+@click.command()\n+@click.argument(\"--config\")\n+@click.argument(\"--in_req\", type=click.Path(exists=True))\n+@click.argument(\"--out_dir\", type=click.Path(exists=True))\n+def exec_command(config_dir, in_req, out_dir):\n+    \"\"\" Command Line Interface: Process query to return image file\n+        in output directory.\n+    \"\"\"\n+    cli = ImageServCLI(config_dir, in_req, out_dir)\n+    cli.process_request()\n+\n+class ImageServCLI(object):\n+    \"\"\" Module to implement CLI for ImageServ.\n+\n+    \"\"\"\n+    def __init__(self, config_dir, in_req, out_dir):\n+        # load the configuration file\n+        if config_dir is not None:\n+            config = os.path.join(config_dir, \"settings.json\")\n+        else:\n+            config_dir = os.path.join(ROOT, \"config\")\n+            config = os.path.join(config_dir, \"settings.json\")\n+        with open(config) as f:\n+            self._config = json.load(f)\n+            # strip /tests from dataroot if cur_dir is /tests\n+            cwd = os.getcwd()\n+            f.close()\n+         # configure the log file (log4cxx)", "path": "python/lsst/dax/imgserv/cli_v1.py", "position": null, "original_position": 77, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Fixed.", "created_at": "2017-10-04T21:16:14Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142795042", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142795042"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142795042"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142795042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 142285998}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142795223", "pull_request_review_id": 67210208, "id": 142795223, "diff_hunk": "@@ -0,0 +1,176 @@\n+#!/usr/bin/env python\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+'''\n+This module implements the command line interface (CLI) to ImageServ.\n+\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny Lo, SLAC\n+\n+'''\n+\n+import os\n+import json\n+\n+import click\n+\n+import lsst.log as log\n+import lsst.daf.persistence as dafPersist\n+\n+from .locateImage import (\n+        image_open_v1, W13DeepCoaddDb, W13RawDb, W13CalexpDb\n+)\n+\n+from .image import Image\n+from .dispatch_v1 import Dispatcher\n+from .hashutil import Hasher\n+from .jsonutil import flatten_json\n+\n+ROOT = os.path.abspath(os.path.dirname(__file__))\n+\n+@click.command()\n+@click.argument(\"--config\")\n+@click.argument(\"--in_req\", type=click.Path(exists=True))\n+@click.argument(\"--out_dir\", type=click.Path(exists=True))\n+def exec_command(config_dir, in_req, out_dir):\n+    \"\"\" Command Line Interface: Process query to return image file\n+        in output directory.\n+    \"\"\"\n+    cli = ImageServCLI(config_dir, in_req, out_dir)\n+    cli.process_request()\n+\n+class ImageServCLI(object):\n+    \"\"\" Module to implement CLI for ImageServ.\n+\n+    \"\"\"\n+    def __init__(self, config_dir, in_req, out_dir):\n+        # load the configuration file\n+        if config_dir is not None:\n+            config = os.path.join(config_dir, \"settings.json\")\n+        else:\n+            config_dir = os.path.join(ROOT, \"config\")\n+            config = os.path.join(config_dir, \"settings.json\")\n+        with open(config) as f:\n+            self._config = json.load(f)\n+            # strip /tests from dataroot if cur_dir is /tests\n+            cwd = os.getcwd()\n+            f.close()\n+         # configure the log file (log4cxx)\n+        log.configure(os.path.join(config_dir, \"log.properties\"))\n+        self._in_req = in_req\n+        self._out_dir = out_dir\n+        self._dispatcher = Dispatcher(config_dir)\n+\n+    def process_request(self):\n+        # req: JSON object \n+        errors, req = self._parse_req()\n+        w13db = self._get_ds(req)\n+        if w13db:\n+            img_getter = image_open_v1(w13db, self._config)\n+            result = self.dispatch(img_getter, req)\n+            name = req[\"name\"]\n+            fp_image = self._save_result(result, name)\n+            if self._check_result(req, fp_image):\n+                print(name+\": PASS\")\n+            else:\n+                print(name+\": FAIL\")\n+        else:\n+            raise Exception(\"ImageServCLI\", \"w13db should NOT be None\")\n+\n+    def dispatch(self, img_getter, req):\n+        # direct the request to the best fit image API on parameters\n+        req_params = self._get_params(req)\n+        api = self._dispatcher.find_api(req_params)\n+        # call the API with the params\n+        try:\n+            result = api(img_getter, req_params)\n+            return result\n+        except:", "path": "python/lsst/dax/imgserv/cli_v1.py", "position": null, "original_position": 107, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Exception to be captured and handled higher up.", "created_at": "2017-10-04T21:17:04Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142795223", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142795223"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142795223"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142795223/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 142286185}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142795418", "pull_request_review_id": 67210444, "id": 142795418, "diff_hunk": "@@ -0,0 +1,176 @@\n+#!/usr/bin/env python\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+'''\n+This module implements the command line interface (CLI) to ImageServ.\n+\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny Lo, SLAC\n+\n+'''\n+\n+import os\n+import json\n+\n+import click\n+\n+import lsst.log as log\n+import lsst.daf.persistence as dafPersist\n+\n+from .locateImage import (\n+        image_open_v1, W13DeepCoaddDb, W13RawDb, W13CalexpDb\n+)\n+\n+from .image import Image\n+from .dispatch_v1 import Dispatcher\n+from .hashutil import Hasher\n+from .jsonutil import flatten_json\n+\n+ROOT = os.path.abspath(os.path.dirname(__file__))\n+\n+@click.command()\n+@click.argument(\"--config\")\n+@click.argument(\"--in_req\", type=click.Path(exists=True))\n+@click.argument(\"--out_dir\", type=click.Path(exists=True))\n+def exec_command(config_dir, in_req, out_dir):\n+    \"\"\" Command Line Interface: Process query to return image file\n+        in output directory.\n+    \"\"\"\n+    cli = ImageServCLI(config_dir, in_req, out_dir)\n+    cli.process_request()\n+\n+class ImageServCLI(object):\n+    \"\"\" Module to implement CLI for ImageServ.\n+\n+    \"\"\"\n+    def __init__(self, config_dir, in_req, out_dir):\n+        # load the configuration file\n+        if config_dir is not None:\n+            config = os.path.join(config_dir, \"settings.json\")\n+        else:\n+            config_dir = os.path.join(ROOT, \"config\")\n+            config = os.path.join(config_dir, \"settings.json\")\n+        with open(config) as f:\n+            self._config = json.load(f)\n+            # strip /tests from dataroot if cur_dir is /tests\n+            cwd = os.getcwd()\n+            f.close()\n+         # configure the log file (log4cxx)\n+        log.configure(os.path.join(config_dir, \"log.properties\"))\n+        self._in_req = in_req\n+        self._out_dir = out_dir\n+        self._dispatcher = Dispatcher(config_dir)\n+\n+    def process_request(self):\n+        # req: JSON object \n+        errors, req = self._parse_req()\n+        w13db = self._get_ds(req)\n+        if w13db:\n+            img_getter = image_open_v1(w13db, self._config)\n+            result = self.dispatch(img_getter, req)\n+            name = req[\"name\"]\n+            fp_image = self._save_result(result, name)\n+            if self._check_result(req, fp_image):\n+                print(name+\": PASS\")\n+            else:\n+                print(name+\": FAIL\")\n+        else:\n+            raise Exception(\"ImageServCLI\", \"w13db should NOT be None\")\n+\n+    def dispatch(self, img_getter, req):\n+        # direct the request to the best fit image API on parameters\n+        req_params = self._get_params(req)\n+        api = self._dispatcher.find_api(req_params)\n+        # call the API with the params\n+        try:\n+            result = api(img_getter, req_params)\n+            return result\n+        except:\n+            # ToDo: message \n+            return None\n+\n+    def _save_result(self, image, fn_prefix=\"image_out\"):\n+        # save image object into fits file in output directory\n+        fn = os.path.join(self._out_dir, fn_prefix+\".fits\")\n+        if image is None:\n+            with open(fn, \"w\") as f:\n+                f.write(\"Image Not Found\")\n+                f.close()\n+        else:\n+            image.writeFits(fn)\n+        return fn\n+\n+    def _check_result(self, req, image_fp):\n+        check_code = req[\"check\"][\"sha256\"]\n+        with open(image_fp, \"rb\") as f:\n+            image_data = f.read()\n+            f.close()\n+        h = Hasher.hash(image_data).hexdigest()\n+        return True if h == check_code else False\n+\n+    def _get_params(self, req):\n+        \"\"\" Get the parameters corresponding to the API \"\"\"\n+        keys = req[\"get\"][\"api_id\"]\n+        image = req[\"get\"][\"image\"]\n+        p_list = flatten_json(image)\n+        # params to be list of all items related to keys\n+        params = {}\n+        for k in keys:\n+            for p in p_list:\n+                if p.endswith(k):\n+                    params[k]=p_list[p] # copy it\n+        return params\n+\n+", "path": "python/lsst/dax/imgserv/cli_v1.py", "position": null, "original_position": 143, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Fixed.", "created_at": "2017-10-04T21:18:09Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142795418", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142795418"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142795418"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142795418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 142286223}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142795839", "pull_request_review_id": 67210938, "id": 142795839, "diff_hunk": "@@ -0,0 +1,226 @@\n+#!/usr/bin/env python", "path": "python/lsst/dax/imgserv/imageREST_v1.py", "position": null, "original_position": 1, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Removed.  Ran PEP8 on the file.", "created_at": "2017-10-04T21:20:06Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142795839", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142795839"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142795839"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142795839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 142287589}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142796463", "pull_request_review_id": 67211703, "id": 142796463, "diff_hunk": "@@ -0,0 +1,226 @@\n+#!/usr/bin/env python\n+\n+# LSST Data Management System\n+# Copyright 2017 AURA/LSST.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+#; GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+\"\"\"\n+This module implements the RESTful interface for Image Cutout Service.\n+Corresponding URI: /image\n+\n+@author: John Gates, SLAC\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny Lo, SLAC\n+\n+\"\"\"\n+import os\n+import tempfile\n+import traceback\n+import json\n+\n+from flask import Blueprint, make_response, request, current_app, jsonify\n+from flask import render_template\n+\n+import lsst.log as log\n+\n+from http.client import BAD_REQUEST, INTERNAL_SERVER_ERROR, NOT_FOUND\n+from .locateImage import (\n+        image_open_v1, W13DeepCoaddDb, W13RawDb, W13CalexpDb\n+)\n+\n+from .image_v1 import Image\n+from .dispatch_v1 import Dispatcher\n+from .hashutil import Hasher\n+\n+imageRESTv1 = Blueprint(\"imageRESTv1\", __name__, static_folder=\"static\",\n+                      template_folder=\"templates\")\n+\n+# To be called from webserv\n+def load_imgserv_config(config_path, db_auth_conf):\n+    \"\"\"Load configuration info into ImageServ.\"\"\"\n+    if config_path is None:\n+        # use default root_path for imageRESTv1\n+        config_path = imageRESTv1.root_path+\"/config/\"\n+    f_json = os.path.join(config_path, \"settings.json\")\n+    # load the general config file  \n+    current_app.config.from_json(f_json)\n+    # configure the log file (log4cxx)\n+    log.configure(os.path.join(config_path, \"log.properties\"))\n+    current_app.config[\"DAX_IMG_DBCONF\"] = db_auth_conf\n+    current_app.config[\"DAX_IMG_CONFIG\"] = config_path\n+\n+@imageRESTv1.route(\"/\")\n+def index():\n+    return make_response(render_template(\"index_v1.html\"))\n+\n+@imageRESTv1.route(\"/availability\", methods=[\"GET\"])\n+def getimage_avail():\n+    return _getimage_avail(request)\n+\n+@imageRESTv1.route(\"/capabilities\", methods=[\"GET\"])\n+def getimage_capabilities():\n+    return _getimage_capabilities(request)\n+\n+@imageRESTv1.route(\"/<db_id>\", methods=[\"GET\"])\n+def getimage_sync(db_id):\n+    return _getimage(request, db_id)\n+\n+@imageRESTv1.route(\"/<db_id>/async\", methods=[\"POST\"])\n+def getimage_async(db_id):\n+    return _getimage_async(request)\n+\n+def _getimage_avail(_req):\n+    \"\"\"Return availability status.\"\"\"\n+    fmt  = _req.accept_mimetypes.best_match([\"application/json\",\n+        \"text/html\"])\n+    if fmt == \"text/html\":\n+        return \"DAX Image Web Service <p> v0: service is accepting queries. <p>\\\n+                v1: service is accepting queries.\"\n+    else:\n+        json.dumps({\n+            \"availability\": {\n+                \"api\": [ \"v0\", \"v1\" ],\n+                \"v0\": {\n+                    \"status\": \"dax_imgserv_v0 is accepting queries\",\n+                    'available': 'true'\n+                },\n+                \"v1\": {\n+                    \"status\": \"dax_imgserv_v1 is accepting queries\",\n+                    \"available\": \"true\"\n+                }\n+            }\n+        })\n+\n+\n+def _getimage_capabilities(_req):\n+    \"\"\"Return capabilities of this service.\"\"\"\n+    fmt  = _req.accept_mimetypes.best_match([\"application/json\",\n+        \"text/html\"])\n+    if fmt == \"text/html\":\n+        return \"Image Web Service <p> <a href='image/v0/DC_W13_Stripe82'> API v0 - DB: W13_sdss \\\n+                Interface: DAX <p> <a href='image/v1/DC_W13_Stripe82'>API v1 - \\\n+                DB: W13_sdss &nbsp; Interface: DAX </a>\"\n+    else:\n+        json.dumps({\n+            \"capabilities\": {\n+                \"api\": [ \"v0\", \"v1\" ],\n+                \"v0\": {\n+                    \"db\": \"W13_sdss\",\n+                    \"url\": \"image/v0/DC_W13_Strip82\",\n+                    \"interface\": [ \"DAX 0.0\" ]\n+                },\n+                \"v1\": {\n+                \"db\": \"W13_sdss\",\n+                \"url\": \"image/v1/DC_W13_Stripe82\",\n+                \"interface\": [ \"SODA 1.1\", \"DAX 1.0\" ]\n+                }\n+            }\n+        })\n+\n+\n+def _getimage(_req, db_id):\n+    \"\"\"Get the image per query request synchronously (default).\n+    Parameters:\n+        request the request object\n+        db  image database string\n+    \"\"\"\n+    ds = _req.args.get(\"ds\")\n+    if ds is None:\n+        return None\n+    w13db = _get_ds(ds.strip())\n+    if w13db:\n+        dispatcher = Dispatcher(current_app.config[\"DAX_IMG_CONFIG\"])\n+        params = _req.args.copy()\n+        params[\"db\"] = db_id\n+        params[\"ds\"] = ds\n+        api = dispatcher.find_api(params)\n+        try:\n+            img_getter = image_open_v1(w13db, current_app.config)\n+            image = api(img_getter, params)\n+            if image is None:\n+                return _image_not_found()\n+            else:\n+                return _file_response(image, \"image_out.fits\")\n+        except:\n+            # ToDo: handling error \n+            return None", "path": "python/lsst/dax/imgserv/imageREST_v1.py", "position": null, "original_position": 162, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Fixed by recognizing and throwing exceptions upwards for _error_handler() to capture.", "created_at": "2017-10-04T21:23:12Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142796463", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142796463"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142796463"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142796463/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 142286819}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142796509", "pull_request_review_id": 67211749, "id": 142796509, "diff_hunk": "@@ -0,0 +1,544 @@\n+#", "path": "python/lsst/dax/imgserv/getimage/imagegetter_v1.py", "position": 1, "original_position": 1, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Done.", "created_at": "2017-10-04T21:23:25Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142796509", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142796509"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142796509"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142796509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 142287825}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142796990", "pull_request_review_id": 67212257, "id": 142796990, "diff_hunk": "@@ -0,0 +1,176 @@\n+#!/usr/bin/env python\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+'''\n+This module implements the command line interface (CLI) to ImageServ.\n+\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny Lo, SLAC\n+\n+'''\n+\n+import os\n+import json\n+\n+import click\n+\n+import lsst.log as log\n+import lsst.daf.persistence as dafPersist\n+\n+from .locateImage import (\n+        image_open_v1, W13DeepCoaddDb, W13RawDb, W13CalexpDb\n+)\n+\n+from .image import Image\n+from .dispatch_v1 import Dispatcher\n+from .hashutil import Hasher\n+from .jsonutil import flatten_json\n+\n+ROOT = os.path.abspath(os.path.dirname(__file__))\n+\n+@click.command()\n+@click.argument(\"--config\")\n+@click.argument(\"--in_req\", type=click.Path(exists=True))\n+@click.argument(\"--out_dir\", type=click.Path(exists=True))\n+def exec_command(config_dir, in_req, out_dir):\n+    \"\"\" Command Line Interface: Process query to return image file\n+        in output directory.\n+    \"\"\"\n+    cli = ImageServCLI(config_dir, in_req, out_dir)\n+    cli.process_request()\n+\n+class ImageServCLI(object):\n+    \"\"\" Module to implement CLI for ImageServ.\n+\n+    \"\"\"\n+    def __init__(self, config_dir, in_req, out_dir):\n+        # load the configuration file\n+        if config_dir is not None:\n+            config = os.path.join(config_dir, \"settings.json\")\n+        else:\n+            config_dir = os.path.join(ROOT, \"config\")\n+            config = os.path.join(config_dir, \"settings.json\")\n+        with open(config) as f:\n+            self._config = json.load(f)\n+            # strip /tests from dataroot if cur_dir is /tests\n+            cwd = os.getcwd()\n+            f.close()\n+         # configure the log file (log4cxx)\n+        log.configure(os.path.join(config_dir, \"log.properties\"))\n+        self._in_req = in_req\n+        self._out_dir = out_dir\n+        self._dispatcher = Dispatcher(config_dir)\n+\n+    def process_request(self):\n+        # req: JSON object \n+        errors, req = self._parse_req()\n+        w13db = self._get_ds(req)\n+        if w13db:\n+            img_getter = image_open_v1(w13db, self._config)\n+            result = self.dispatch(img_getter, req)\n+            name = req[\"name\"]\n+            fp_image = self._save_result(result, name)\n+            if self._check_result(req, fp_image):\n+                print(name+\": PASS\")\n+            else:\n+                print(name+\": FAIL\")\n+        else:\n+            raise Exception(\"ImageServCLI\", \"w13db should NOT be None\")\n+\n+    def dispatch(self, img_getter, req):\n+        # direct the request to the best fit image API on parameters\n+        req_params = self._get_params(req)\n+        api = self._dispatcher.find_api(req_params)\n+        # call the API with the params\n+        try:\n+            result = api(img_getter, req_params)\n+            return result\n+        except:\n+            # ToDo: message \n+            return None", "path": "python/lsst/dax/imgserv/cli_v1.py", "position": null, "original_position": 109, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Fixed.", "created_at": "2017-10-04T21:25:20Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142796990", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142796990"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142796990"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142796990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 142456167}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142798926", "pull_request_review_id": 67214465, "id": 142798926, "diff_hunk": "@@ -0,0 +1,226 @@\n+#!/usr/bin/env python\n+\n+# LSST Data Management System\n+# Copyright 2017 AURA/LSST.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+#; GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+\"\"\"\n+This module implements the RESTful interface for Image Cutout Service.\n+Corresponding URI: /image\n+\n+@author: John Gates, SLAC\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny Lo, SLAC\n+\n+\"\"\"\n+import os\n+import tempfile\n+import traceback\n+import json\n+\n+from flask import Blueprint, make_response, request, current_app, jsonify\n+from flask import render_template\n+\n+import lsst.log as log\n+\n+from http.client import BAD_REQUEST, INTERNAL_SERVER_ERROR, NOT_FOUND\n+from .locateImage import (\n+        image_open_v1, W13DeepCoaddDb, W13RawDb, W13CalexpDb\n+)\n+\n+from .image_v1 import Image\n+from .dispatch_v1 import Dispatcher\n+from .hashutil import Hasher\n+\n+imageRESTv1 = Blueprint(\"imageRESTv1\", __name__, static_folder=\"static\",\n+                      template_folder=\"templates\")\n+\n+# To be called from webserv\n+def load_imgserv_config(config_path, db_auth_conf):\n+    \"\"\"Load configuration info into ImageServ.\"\"\"\n+    if config_path is None:\n+        # use default root_path for imageRESTv1\n+        config_path = imageRESTv1.root_path+\"/config/\"\n+    f_json = os.path.join(config_path, \"settings.json\")\n+    # load the general config file  \n+    current_app.config.from_json(f_json)\n+    # configure the log file (log4cxx)\n+    log.configure(os.path.join(config_path, \"log.properties\"))\n+    current_app.config[\"DAX_IMG_DBCONF\"] = db_auth_conf\n+    current_app.config[\"DAX_IMG_CONFIG\"] = config_path\n+\n+@imageRESTv1.route(\"/\")\n+def index():\n+    return make_response(render_template(\"index_v1.html\"))\n+\n+@imageRESTv1.route(\"/availability\", methods=[\"GET\"])\n+def getimage_avail():\n+    return _getimage_avail(request)\n+\n+@imageRESTv1.route(\"/capabilities\", methods=[\"GET\"])\n+def getimage_capabilities():\n+    return _getimage_capabilities(request)\n+\n+@imageRESTv1.route(\"/<db_id>\", methods=[\"GET\"])", "path": "python/lsst/dax/imgserv/imageREST_v1.py", "position": null, "original_position": 80, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Easy to accommodate in imgserv later, as this come into better clarity.", "created_at": "2017-10-04T21:34:12Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142798926", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142798926"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142798926"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142798926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 142287434}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142799366", "pull_request_review_id": 67214952, "id": 142799366, "diff_hunk": "@@ -0,0 +1,228 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+\"\"\"\n+This module implements the Image ata model and use image getter object\n+to retrieve the image per request specification.\n+\n+@author: Kenny Lo, SLAC\n+\n+\"\"\"\n+\n+class Image(object):\n+    \"\"\" Image module maps a request and its parameters per JSON schema to the\n+        corresponding imagegetter method.\n+    \"\"\"\n+    def __init__(cls):\n+       pass\n+\n+    @classmethod\n+    def full_nearest(cls, image_getter, params):\n+        \"\"\"Get image nearest center.\n+\n+        Parameters\n+        ----------\n+        image_getter : getimage.imagegetter.ImageGetter\n+        center.x, center.y, center.unit, filter\n+\n+        Returns\n+        -------\n+        lsst.afw.image\n+            the full image (FITS).\n+        \"\"\"\n+        x = float(params.get(\"center.x\"))\n+        y = float(params.get(\"center.y\"))\n+        unit = params.get(\"center.unit\")\n+        filt = params.get(\"nearest.filter\")\n+        image = image_getter.full_nearest(x, y, unit, filt)\n+        return image\n+\n+    @classmethod\n+    def full_from_data_id_rcff(cls, image_getter, params):", "path": "python/lsst/dax/imgserv/image_v1.py", "position": null, "original_position": 59, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "I'm going to remove 'rcff' and 'tp' tags altogether, by treating the 2 distinct cases as 'data_id' until it's needed to differentiate the two upon calling the butler.get().", "created_at": "2017-10-04T21:36:18Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142799366", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142799366"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142799366"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142799366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 142276224}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142799734", "pull_request_review_id": 67215342, "id": 142799734, "diff_hunk": "@@ -0,0 +1,544 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+#\n+#\n+# This code is used to to select an image or a cutout of an image\n+# that has its center closest to the specified RA and Dec. The\n+# image is retrieved using the Data Butler.\n+\n+\"\"\"\n+This library module is used to locate and retrieve variolus image types and cutout\n+dimensions, via the appropriate Butler object passed in.\n+\n+@author: John Gates, SLAC\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny Lo, SLAC\n+\n+\"\"\"\n+\n+import math\n+\n+import lsst.afw\n+import lsst.afw.coord as afw_coord\n+import lsst.afw.geom as afw_geom\n+import lsst.afw.image as afw_image\n+\n+import lsst.log as log\n+\n+\n+class ImageGetter_v1:\n+    \"\"\"Provide operations to retrieve images including cutouts from the specified\n+    image repository through the passed-in butler and metaserv.\n+\n+    \"\"\"\n+\n+    def __init__(self, butlerget, metaservget, logger):\n+        \"\"\" Instantiate ImageGetter object with butler, butler configuration,\n+        and connection for image metadata.\n+\n+        Parameters\n+        ----------\n+        butlerget : locateImage.ButlerGet\n+            the butler instance and config info.\n+        metaservget : locateImage.MetaservGet\n+            provides access to image metadata.\n+        logger : log\n+            the logger to be used.\n+        \"\"\"\n+        self._log = logger\n+        self._butler = butlerget.butler\n+        self._butler_keys = butlerget.butler_keys\n+        self._imagedataset_type = butlerget.butler_policy\n+        self._metaservget = metaservget\n+\n+\n+    def full_nearest(self, x, y, unit, filt):\n+        \"\"\"Returns image containing center(x,y) of unit and filter.\n+\n+        Parameters\n+        ----------\n+        x : float\n+            x-coordinate, or Ra if Equatorial\n+        y : float\n+            y-coordinate, or Dec if Equatorial\n+        unit : string\n+            [ 'px', 'pix\", 'pixel', 'pixels', 'arcsec', 'arcmin', 'deg' ]\n+        filt : string (optional)\n+            [ 'g', 'i', 'r', 'u', 'z' ]\n+\n+        Returns\n+        -------\n+        lsst.afw.Image or None\n+\n+        \"\"\"\n+        # assume (x,y) is Equatorial coordinates here\n+        ra = x\n+        dec = y\n+        filtername = filt\n+        qresult = self._metaservget.nearest_image_containing(ra, dec, filtername)\n+        if qresult == []:\n+            return None # not found\n+        else:\n+            data_id_type, data_id = self._data_id_from_qr(qresult)\n+            image = self._image_from_butler(data_id_type, data_id)\n+            return image\n+\n+\n+    def full_from_data_id_rcff(self, run, camcol, field, filt):\n+        \"\"\"Returns image from specified data id (run, camcol, field, filter).\n+\n+        Parameters\n+        ----------\n+        run : int\n+        camcol : int\n+        field : int\n+        filt : string\n+            [ 'g', 'i', 'r', 'u', 'z' ]\n+\n+        Returns\n+        -------\n+        lsst.afw.Image or None\n+\n+        \"\"\"\n+        image = self._butler.get(self._imagedataset_type, run=run,camcol=camcol,\n+                field=field, filter=filt)\n+        return image\n+\n+\n+\n+    def full_from_data_id_tpf(self, tract, patch_x, patch_y, filt):\n+        \"\"\"Returns image from specified data id (tract, patch<x,y>, filter).\n+\n+        Parameters\n+        ----------\n+        tract : int\n+        patch_x : int\n+        patch_y : int\n+        filt : string\n+            [ 'g', 'i', 'r', 'u', 'z' ]\n+\n+        Returns\n+        -------\n+        lsst.afw.Image or None\n+\n+        \"\"\"\n+        patch = \",\".join((str(patch_x), str(patch_y)))\n+        image = self._butler.get(self._imagedataset_type, tract=tract,\n+                patch=patch, filter=filt)\n+        return image\n+\n+\n+    def full_from_science_id(self, science_id):\n+        \"\"\"Returns image from the science id.\n+\n+        Parameters\n+        ----------\n+        science_id : int\n+\n+        Returns\n+        -------\n+        lsst.afw.Image or None\n+\n+        \"\"\"\n+        data_id_type, data_id = self._data_id_from_science_id(science_id)\n+        if data_id_type:\n+            image = self._image_from_butler(data_id_type, data_id)\n+            return image\n+\n+\n+    def cutout_from_nearest(self, center_x, center_y, center_unit, size_x,\n+            size_y, size_unit, filt):\n+        \"\"\"Returns the cutout image at center (x,y) of unit and size.\n+\n+        Parameters\n+        ----------\n+        cetner_x : float\n+        cetner_y : float\n+        center_unit : string\n+            [ 'px', 'pix', 'pixel', 'pixels', 'arcsec', 'arcmin', 'deg' ]\n+        size_x : float\n+        size_y : float\n+        size_unit : string\n+        filt: string\n+\n+        Returns\n+        -------\n+        lsst.afw.Image or None\n+\n+        \"\"\"\n+        ra, dec = center_x, center_y\n+        filtername = filt\n+        width, height = size_x, size_y\n+        qresult = self._metaservget.nearest_image_containing(ra, dec, filtername)\n+        if qresult == []:\n+            return None # not found\n+        else:\n+            data_id_type, data_id = self._data_id_from_qr(qresult)\n+            image = self._imagecutout_by_data_id(ra, dec, width, height,\n+                    data_id_type, data_id, size_unit)\n+            return image\n+\n+\n+    def cutout_from_data_id_rcff(self, run, camcol, field, filt, center_x,\n+            cetner_y, center_unit, size_x, size_y, size_unit):\n+        \"\"\"Returns cutout image from data id (run, camcol, field, filtername)\n+        of specified center.\n+ \n+        Parameters\n+        ----------\n+        run : int\n+        camcol : int\n+        field : int\n+        filt : string\n+        center_x : float\n+        center_y : float\n+        cetner_unit : string\n+            [ 'px', 'pix', 'pixel', 'pixels', 'arcsec', 'arcmin', 'deg' ]\n+        size_x : float\n+        size_y : float\n+        size_unit : string\n+\n+        Returns\n+        -------\n+        lsst.afw.Image or None\n+\n+        \"\"\"\n+        ra, dec = center_x, center_y\n+        width, height = size_x, size_y\n+        data_id = { \"run\": run, \"camcol\": camcol, \"field\": field, \"filter\":\n+                filt }\n+        image = self._imagecutout_by_data_id(ra, dec, width, height, \"rcff\", data_id,\n+                size_unit)\n+        return image\n+\n+\n+    def cutout_from_data_id_tpf(self, tract, patch_x, patch_y, filt, center_x,\n+            center_y, center_unit, size_x, size_y, size_unit):\n+        \"\"\"Returns cutout image from data id (tract, patch<x,y>, filt)\n+        of specified center.\n+\n+        Parameters\n+        ----------\n+        tract : int\n+        patch_x : int\n+        pactch_y : int\n+        filt : string\n+        center_x : float\n+        cetner_y : float\n+        center_unit : string\n+            [ 'px', 'pix', 'pixel, 'pixels', 'arcsec', 'arcmin', 'deg' ]\n+        size_x : float\n+        size_y : float\n+        size_unit : string\n+\n+        Returns\n+        -------\n+        lsst.afw.Image or None\n+\n+        \"\"\"\n+        ra, dec = center_x, center_y\n+        width, height = size_x, size_y\n+        patch = \",\".join((str(patch_x), str(patch_y)))\n+        data_id = { \"tract\": tract, \"patch\": patch, \"filter\": filt }\n+        image = self._imagecutout_by_data_id(ra, dec, width, height, \"tpf\", data_id,\n+                size_unit)\n+        return image\n+\n+\n+    def cutout_from_science_id(self, science_id, center_x, center_y,\n+                center_unit, size_x, size_y, size_unit):\n+        \"\"\"\n+        Parameters\n+        ----------\n+        science_id : int\n+        center_x : float\n+        center_y : float\n+        center_unit : string\n+            [ 'px', 'pix', 'pixel', 'pixels', 'arcsec', 'arcmin', 'deg' ]\n+        size_x : float\n+        size_y : float\n+        size_unit : string\n+            [ 'px', 'pix', 'pixel', 'pixels', 'arcsec', 'arcmin', 'deg' ]\n+\n+        Returns\n+        -------\n+        lsst.afw.Image or None\n+\n+        \"\"\"\n+        ra, dec = center_x, center_y\n+        width, height = size_x, size_y\n+        # Get the corresponding image(data) id from the butler\n+        data_id_type, data_id = self._data_id_from_science_id(science_id)\n+        if data_id_type:\n+            # make id compatible with qResult type via custom wrapping\n+            image = self._imagecutout_by_data_id(ra, dec, width, height,\n+                    data_id_type, data_id, size_unit)\n+            return image\n+\n+\n+    def _data_id_from_science_id(self, science_id):\n+        \"\"\"Returns a dictionary of ids derived from scienceId.\n+        The ids match the ids in _butler_keys and valid is false\n+        if at least one of the ids is missing.\n+\n+        \"\"\"\n+        ids_type = None\n+        ids = {}\n+        science_id = int(science_id)\n+        if self._butler_keys == [\"run\", \"camcol\", \"field\", \"filter\"]:\n+            ids_type = \"rcff\"\n+            possible_fields = {\n+                \"field\": science_id % 10000,\n+                \"camcol\": (science_id//10000) % 10,\n+                \"filter\": \"ugriz\"[(science_id//100000) % 10],\n+                \"run\": science_id//1000000,\n+            }\n+            self._log.debug(\"data_id_from_science_id {}\".format(\n+                possible_fields))\n+            for key in self._butler_keys:\n+                value = possible_fields[key]\n+                if value is None:\n+                    ids_type = None\n+                ids[key] = value\n+            self._log.debug(\"dataID_type: dataID={} {}\".format(ids_type, ids))\n+        elif self._butler_keys == [\"tract\", \"patch\", \"filter\"]:\n+            ids_type = \"tpf\"\n+            patch_y = (science_id//8) % (2**13)\n+            patch_x = (science_id//(2**16)) % (2**13)\n+            possible_fields = {\n+                \"filter\": \"ugriz\"[science_id % 8],\n+                \"tract\": science_id//(2**29),\n+                \"patch\": \"%d,%d\" % (patch_x, patch_y)\n+            }\n+            self._log.debug(\"data_id_from_science_id {}\".format(\n+                possible_fields))\n+            for key in self._butler_keys:\n+                value = possible_fields[key]\n+                if value is None:\n+                    ids_type = None\n+                ids[key] = value\n+            self._log.debug(\"dataID_type: dataID={} {}\".format(ids_type, ids))\n+        return ids_type, ids\n+\n+\n+    def _imagecutout_by_data_id(self, ra, dec, width, height, data_id_type, data_id, unit=\"arcsec\"):\n+        # check to see if qresults is empty\n+        if data_id is None:\n+            return None\n+        # Return an image by data ID through the butler.\n+        image = self._image_from_butler(data_id_type, data_id)\n+        if image is None:\n+            # @todo html error handling see DM-1980\n+            return None\n+        # Get the metadata for the source image.\n+        metadata = self._metadata_from_data_id(data_id)\n+        cutout = self._apply_cutout(image, metadata, ra, dec, width, height, data_id, unit)\n+        return cutout\n+\n+\n+    def _apply_cutout(self, src_img, metadata, ra, dec, width, height, data_id,\n+                         unit=\"arcsec\"):\n+        \"\"\"Return an image centered on ra and dec (in degrees) with dimensions\n+        height and width (in arcseconds by default).\n+\n+        - Determine approximate pixels per arcsec in the image by\n+             calculating the length of line from the upper right corner of\n+             the image to the lower left corner in pixels and arcsecs.\n+             (This will fail at or very near the pole.)\n+        - Use that to define a box for the cutout.\n+        - Trim the box so it is entirely within the source image.\n+\n+        Parameters\n+        ----------\n+        ra, dec :  flaot\n+            ra, dec in degrees.\n+        height, width : float, float\n+            Height and width are in arcsecs.\n+\n+        Returns\n+        -------\n+        lsst.afw.Image\n+\n+        \"\"\"\n+        self._log.debug(\"apply_cutout %f %f %f %f\", ra, dec, width, height)\n+        # False: do not remove FITS keywords from metadata\n+        wcs = None\n+        if isinstance(src_img, afw_image.ExposureF):\n+            wcs = src_img.getWcs()\n+        if wcs is None:\n+            # try to use the metadata\n+            wcs = lsst.afw.image.makeWcs(metadata, False)\n+        if wcs is None:\n+            # can't continue\n+            return None\n+        radec = afw_coord.makeCoord(afw_coord.ICRS,\n+                                     ra * afw_geom.degrees,\n+                                     dec * afw_geom.degrees)\n+        xy_wcs = wcs.skyToPixel(radec)\n+        xy_center_x = xy_wcs.getX()\n+        xy_center_y = xy_wcs.getY()\n+        self._log.debug(\"ra=%f dec=%f xy_center=(%f,%f)\",\n+                ra, dec, xy_center_x, xy_center_y)\n+        if unit == 'pixel':\n+            image = self._cutout_from_src(src_img, xy_center_x, xy_center_y,\n+                                         width, height, wcs)\n+            return image\n+        img_w, img_h = src_img.getWidth(), src_img.getHeight()\n+        self._log.debug(\"src_img_w=%d src_img_h=%d\", img_w, img_h)\n+        # Determine approximate pixels per arcsec - find image corners in RA and Dec\n+        # and compare that distance with the number of pixels.\n+        radec_ul = wcs.pixelToSky(afw_geom.Point2D(0, 0))\n+        radec_lr = wcs.pixelToSky(afw_geom.Point2D(img_w - 1, img_h - 1))\n+        self._log.debug(\"radec_ul 0=%f 1=%f\",\n+                        radec_ul[0].asDegrees(), radec_ul[1].asDegrees())\n+        self._log.debug(\"radec_lr 0=%f 1=%f\",\n+                        radec_lr[0].asDegrees(), radec_lr[1].asDegrees())\n+        # length of a line from upper left (UL) to lower right (LR)\n+        dec_dist = radec_ul[1].asArcseconds() - radec_lr[1].asArcseconds()\n+        ra_lr = self._keep_within_180(radec_ul[0].asDegrees(),\n+                radec_lr[0].asDegrees())\n+        ra_lr *= 3600.0  # convert degrees to arcsecs\n+        # Correct distance in RA for the declination\n+        cos_dec = math.cos(dec * afw_geom.degrees)\n+        ra_dist = cos_dec * (radec_ul[0].asArcseconds() - ra_lr)\n+        radec_dist = math.sqrt(math.pow(dec_dist, 2.0) + math.pow(ra_dist, 2.0))\n+        self._log.debug(\"radec_dist=%f\", radec_dist)\n+        pixel_dist = math.sqrt(math.pow(img_w, 2.0) + math.pow(img_h, 2.0))\n+        pixel_per_arcsec = pixel_dist/radec_dist\n+        self._log.debug(\"pixel_per_arcsec=%f\", pixel_per_arcsec)\n+        # Need Upper Left corner and dimensions for Box2I\n+        pix_w = width*pixel_per_arcsec\n+        pix_h = height*pixel_per_arcsec\n+        self._log.debug(\"ra=%f dec=%f xy_wcs=(%f,%f) xyCenter=(%f,%f)\",\n+                ra, dec, xy_wcs.getX(), xy_wcs.getY(), xy_center_x, xy_center_y)\n+        cutout = self._cutout_from_src(src_img, xy_center_x, xy_center_y,\n+                pix_w, pix_h, wcs)\n+        return cutout\n+\n+    def _metadata_from_data_id(self, data_id):\n+        # Return the metadata for the query results in qResults and a butler.\n+        if self._butler_keys == [\"run\", \"camcol\", \"field\", \"filter\"]:\n+            return self._butler.get(self._imagedataset_md(),\n+                    run=data_id[\"run\"],\n+                    camcol=data_id[\"camcol\"],\n+                    field=data_id[\"field\"],\n+                    filter=data_id[\"filter\"])\n+        if self._butler_keys == [\"tract\", \"patch\", \"filter\"]:\n+            return self._butler.get(self._imagedataset_md(),\n+                    tract=data_id[\"tract\"],\n+                    patch=data_id[\"patch\"],\n+                    filter=data_id[\"filter\"])\n+\n+\n+    def _image_from_butler(self, data_id_type, data_id):\n+        # Retrieve the image through the Butler using data id.\n+        self._log.debug(\"_image_from_butler data_id:{}\".format(data_id))\n+        image = None\n+        if data_id_type == \"rcff\":  # rcff=run, camcol, field, filter\n+            run = data_id.get(\"run\")\n+            camcol = data_id.get(\"camcol\")\n+            field = data_id.get(\"field\")\n+            filtername = data_id.get(\"filter\")\n+            log.debug(\"_image_from_butler run={} camcol={} field={} \"\n+                      \"filter={}\".format(run, camcol, field, filtername))\n+            image = self._butler.get(self._imagedataset_type, run=run,\n+                                   camcol=camcol, field=field, filter=filtername)\n+        elif data_id_type == \"tpf\":  # tpf=tract, patch, filtername\n+            tract = data_id.get(\"tract\")\n+            filtername = data_id.get(\"filter\")\n+            patch = data_id.get(\"patch\")\n+            self._log.debug(\"_image_from_butler tract={} patch={} \"\n+                            \"filtername={}\".format(tract, patch, filtername))\n+            image = self._butler.get(self._imagedataset_type, tract=tract,\n+                                   patch=patch, filter=filtername)\n+        return image\n+\n+\n+    def _imagedataset_md(self):\n+        # Return the butler policy name to retrieve metadata\n+        return self._imagedataset_type + \"_md\"\n+\n+\n+    def _cutout_from_src(self, src_image, xy_center_x, xy_center_y, width, height, wcs):\n+        # Returns an image cutout from the source image.\n+        #   srcImage - Source image.\n+        #   xy_center - The center of region to cutout in pixels.\n+        #   width - The width in pixels.\n+        #   height - The height in pixels.\n+        #   height and width will be trimmed if they go past the edge of the source image.\n+        # First, center the cutout image\n+        pix_ulx = int(xy_center_x - width/2.0)\n+        pix_uly = int(xy_center_y - height/2.0)\n+        xy_center = afw_geom.Point2I(pix_ulx, pix_uly)\n+        log.debug(\"xy_center={}\".format(xy_center))\n+        src_box = src_image.getBBox()\n+        # assuming both src_box and xy_center to be in Box2I\n+        co_box = afw_geom.Box2I(xy_center, afw_geom.Extent2I(int(width), int(height)))\n+        if co_box.overlaps(src_box):\n+            co_box.clip(src_box)\n+        else:\n+            self._log.debug(\"cutout image wanted is OUTSIDE source image -> None\")\n+            return None\n+        if isinstance(src_image, afw_image.ExposureF):\n+            self._log.debug(\"co_box pix_ulx={} pix_end_x={} pix_uly={} pix_end_y={}\"\n+                  .format(pix_ulx, pix_ulx+width, pix_uly, pix_uly+height))\n+            # img will keep wcs from source image\n+            image = afw_image.ExposureF(src_image, co_box)\n+        else:\n+            # hack for non-ExposureF, e.g. raw (DecoratedImage)\n+            pix_ulx = co_box.getBeginX() - src_image.getX0()\n+            pix_end_x = co_box.getEndX() - src_image.getX0()\n+            pix_uly = co_box.getBeginY() - src_image.getY0()\n+            pix_end_y = co_box.getEndY() - src_image.getY0()\n+            self._log.debug(\"co_box pix_ulx={} pix_end_x={} pix_uly={} pix_end_y={}\".format(pix_ulx,\n+                pix_end_x, pix_uly, pix_end_y))\n+            image = src_image[pix_ulx:pix_end_x, pix_uly:pix_end_y].clone()\n+        return image\n+\n+\n+    def _data_id_from_qr(self, qresults):\n+        # identify and fetch the data ID from 1 of 2 defined sets\n+        ln = qresults[0]\n+        # first try run, camcol, field, filter keys\n+        if self._butler_keys == [\"run\", \"camcol\", \"field\", \"filter\"]:\n+            run, camcol, field, filtername = ln[2:6]\n+            data_id = { \"run\": run, \"camcol\": camcol, \"field\": field,\n+                    \"filter\": filtername}\n+            return \"rcff\", data_id\n+        # if no match, then try tract, patch, filter keys\n+        if self._butler_keys == [\"tract\", \"patch\", \"filter\"]:\n+            tract, patch, filtername = ln[2:5]\n+            data_id = { \"tract\": tract, \"patch\": patch, \"filter\":\n+                    filtername }\n+            return \"tpf\", data_id\n+\n+\n+    def _keep_within_180(self, target, val):", "path": "python/lsst/dax/imgserv/getimage/imagegetter_v1.py", "position": null, "original_position": 534, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "See prior comment - will remove all \"tpf\" and \"rcff\"  tagging.  If needed, data_id.keys() will be used to tell which is which.", "created_at": "2017-10-04T21:37:55Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142799734", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142799734"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142799734"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142799734/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 142288055}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142800117", "pull_request_review_id": 67215754, "id": 142800117, "diff_hunk": "@@ -0,0 +1,89 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+'''\n+This module implements unit testing for retrieving raw images in ImageServ API.\n+\n+@author: Kenny Lo, SLAC\n+\n+'''\n+\n+import os\n+import unittest\n+\n+# import lsst.utils.tests\n+from lsst.dax.imgserv.cli_v1 import ImageServCLI\n+\n+ROOT = os.path.abspath(os.path.dirname(__file__))\n+\n+def setup_module(module):\n+    # lsst.utils.tests.init()\n+    pass\n+\n+class ImgServTest(unittest.TestCase):\n+    \"\"\" Test Cases - raw full/cutout images \"\"\"\n+\n+   #  _config = os.path.path.join(ROOT, \n+    _configdir = os.path.join(ROOT, \"config\")\n+    _inputdir = os.path.join(ROOT, \"input_v1\")\n+    _outputdir = os.path.join(ROOT, \"output_v1\")\n+\n+    def setUp(self):\n+        pass\n+\n+    def tearDown(self):\n+        pass\n+\n+    def testImgServ_i1(self):", "path": "integration/test_imgserv_raw_v1.py", "position": null, "original_position": 55, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Good idea and suggestion. I will streamline the test scripts accordingly.", "created_at": "2017-10-04T21:39:34Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142800117", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142800117"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142800117"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142800117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 142248983}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142801272", "pull_request_review_id": 67217031, "id": 142801272, "diff_hunk": "@@ -0,0 +1,226 @@\n+#!/usr/bin/env python\n+\n+# LSST Data Management System\n+# Copyright 2017 AURA/LSST.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+#; GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+\"\"\"\n+This module implements the RESTful interface for Image Cutout Service.\n+Corresponding URI: /image\n+\n+@author: John Gates, SLAC\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny Lo, SLAC\n+\n+\"\"\"\n+import os\n+import tempfile\n+import traceback\n+import json\n+\n+from flask import Blueprint, make_response, request, current_app, jsonify\n+from flask import render_template\n+\n+import lsst.log as log\n+\n+from http.client import BAD_REQUEST, INTERNAL_SERVER_ERROR, NOT_FOUND\n+from .locateImage import (\n+        image_open_v1, W13DeepCoaddDb, W13RawDb, W13CalexpDb\n+)\n+\n+from .image_v1 import Image\n+from .dispatch_v1 import Dispatcher\n+from .hashutil import Hasher\n+\n+imageRESTv1 = Blueprint(\"imageRESTv1\", __name__, static_folder=\"static\",\n+                      template_folder=\"templates\")\n+\n+# To be called from webserv\n+def load_imgserv_config(config_path, db_auth_conf):\n+    \"\"\"Load configuration info into ImageServ.\"\"\"\n+    if config_path is None:\n+        # use default root_path for imageRESTv1\n+        config_path = imageRESTv1.root_path+\"/config/\"\n+    f_json = os.path.join(config_path, \"settings.json\")\n+    # load the general config file  \n+    current_app.config.from_json(f_json)\n+    # configure the log file (log4cxx)\n+    log.configure(os.path.join(config_path, \"log.properties\"))\n+    current_app.config[\"DAX_IMG_DBCONF\"] = db_auth_conf\n+    current_app.config[\"DAX_IMG_CONFIG\"] = config_path\n+\n+@imageRESTv1.route(\"/\")\n+def index():\n+    return make_response(render_template(\"index_v1.html\"))\n+\n+@imageRESTv1.route(\"/availability\", methods=[\"GET\"])\n+def getimage_avail():\n+    return _getimage_avail(request)\n+\n+@imageRESTv1.route(\"/capabilities\", methods=[\"GET\"])\n+def getimage_capabilities():\n+    return _getimage_capabilities(request)\n+\n+@imageRESTv1.route(\"/<db_id>\", methods=[\"GET\"])\n+def getimage_sync(db_id):\n+    return _getimage(request, db_id)\n+\n+@imageRESTv1.route(\"/<db_id>/async\", methods=[\"POST\"])\n+def getimage_async(db_id):\n+    return _getimage_async(request)\n+\n+def _getimage_avail(_req):\n+    \"\"\"Return availability status.\"\"\"\n+    fmt  = _req.accept_mimetypes.best_match([\"application/json\",\n+        \"text/html\"])\n+    if fmt == \"text/html\":\n+        return \"DAX Image Web Service <p> v0: service is accepting queries. <p>\\\n+                v1: service is accepting queries.\"\n+    else:\n+        json.dumps({\n+            \"availability\": {\n+                \"api\": [ \"v0\", \"v1\" ],\n+                \"v0\": {\n+                    \"status\": \"dax_imgserv_v0 is accepting queries\",\n+                    'available': 'true'\n+                },\n+                \"v1\": {\n+                    \"status\": \"dax_imgserv_v1 is accepting queries\",\n+                    \"available\": \"true\"\n+                }\n+            }\n+        })\n+\n+\n+def _getimage_capabilities(_req):\n+    \"\"\"Return capabilities of this service.\"\"\"\n+    fmt  = _req.accept_mimetypes.best_match([\"application/json\",\n+        \"text/html\"])\n+    if fmt == \"text/html\":\n+        return \"Image Web Service <p> <a href='image/v0/DC_W13_Stripe82'> API v0 - DB: W13_sdss \\\n+                Interface: DAX <p> <a href='image/v1/DC_W13_Stripe82'>API v1 - \\\n+                DB: W13_sdss &nbsp; Interface: DAX </a>\"\n+    else:\n+        json.dumps({\n+            \"capabilities\": {\n+                \"api\": [ \"v0\", \"v1\" ],\n+                \"v0\": {\n+                    \"db\": \"W13_sdss\",", "path": "python/lsst/dax/imgserv/imageREST_v1.py", "position": null, "original_position": 124, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Per IVOA both /availability and /capabilities resources must be there.  I will change the response to resemble what is expected as shown in VOSI-capabilities section here: http://www.ivoa.net/documents/SODA/20151221/WD-SODA-1.0-20151221.pdf.", "created_at": "2017-10-04T21:44:53Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142801272", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142801272"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r142801272"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/142801272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 142273668}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/143251142", "pull_request_review_id": 67740848, "id": 143251142, "diff_hunk": "@@ -0,0 +1,89 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+'''\n+This module implements unit testing for retrieving raw images in ImageServ API.\n+\n+@author: Kenny Lo, SLAC\n+\n+'''\n+\n+import os\n+import unittest\n+\n+# import lsst.utils.tests\n+from lsst.dax.imgserv.cli_v1 import ImageServCLI\n+\n+ROOT = os.path.abspath(os.path.dirname(__file__))\n+\n+def setup_module(module):\n+    # lsst.utils.tests.init()\n+    pass\n+\n+class ImgServTest(unittest.TestCase):\n+    \"\"\" Test Cases - raw full/cutout images \"\"\"\n+\n+   #  _config = os.path.path.join(ROOT, ", "path": "integration/test_imgserv_raw_v1.py", "position": null, "original_position": 44, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Improved.", "created_at": "2017-10-06T17:30:18Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r143251142", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/143251142"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r143251142"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/143251142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 142206404}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/143251315", "pull_request_review_id": 67741049, "id": 143251315, "diff_hunk": "@@ -0,0 +1,89 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+\n+'''\n+This module implements unit testing for retrieving raw images in ImageServ API.\n+\n+@author: Kenny Lo, SLAC\n+\n+'''\n+\n+import os\n+import unittest\n+\n+# import lsst.utils.tests\n+from lsst.dax.imgserv.cli_v1 import ImageServCLI\n+\n+ROOT = os.path.abspath(os.path.dirname(__file__))\n+\n+def setup_module(module):\n+    # lsst.utils.tests.init()\n+    pass\n+\n+class ImgServTest(unittest.TestCase):\n+    \"\"\" Test Cases - raw full/cutout images \"\"\"\n+\n+   #  _config = os.path.path.join(ROOT, \n+    _configdir = os.path.join(ROOT, \"config\")\n+    _inputdir = os.path.join(ROOT, \"input_v1\")\n+    _outputdir = os.path.join(ROOT, \"output_v1\")\n+\n+    def setUp(self):\n+        pass\n+\n+    def tearDown(self):\n+        pass\n+\n+    def testImgServ_i1(self):\n+        self._run_test(\"test_raw_i1_v1.json\")\n+\n+    def testImgServ_i2(self):\n+        self._run_test(\"test_raw_i2_v1.json\")\n+\n+    def testImgServ_i3(self):\n+        self._run_test(\"test_raw_i3_v1.json\")\n+\n+    def testImgServ_i4(self):\n+        self._run_test(\"test_raw_i4_v1.json\")\n+\n+    def testImgServ_i5(self):\n+        self._run_test(\"test_raw_i5_v1.json\")\n+\n+    def testImgServ_i18(self):\n+        self._run_test(\"test_raw_i18_v1.json\")\n+\n+    def testImgServ_i19(self):\n+        self._run_test(\"test_raw_i19_v1.json\")\n+\n+    # run to generate small image (fits) only\n+    # def testImgServ_trim(self):\n+    #     self._run_test(\"test_raw_trim.json\")", "path": "integration/test_imgserv_raw_v1.py", "position": null, "original_position": 78, "commit_id": "963ab87c819e6dee053c9d5c037d885d42302cf3", "original_commit_id": "054c0b716b45645807078040747e148587093212", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Removed as trimming task is not part of regular testing.", "created_at": "2017-10-06T17:31:01Z", "updated_at": "2017-10-06T23:45:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r143251315", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/143251315"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/29#discussion_r143251315"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/29"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/143251315/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 142207249}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/144939489", "pull_request_review_id": 69666472, "id": 144939489, "diff_hunk": "@@ -186,38 +187,15 @@ def _get_ds(image_type):\n         return W13DeepCoaddDb\n \n \n-def _file_response(image, file_name):\n-    tmp_path = tempfile.mkdtemp()\n-    file_path = os.path.join(tmp_path, file_name)\n-    log.debug(\"temporary file_path=%s\", file_path)\n-    image.writeFits(file_path)\n-    resp = _make_file_response(file_path)\n-    os.remove(file_path)\n-    os.removedirs(tmp_path)\n-    return resp\n-\n-\n-def _make_file_response(file_name):\n-    # It would be nice to just write to 'data' instead of making a file.\n-    # writeFits defined in afw/python/lsst/afw/math/background.py\n-    # Using a cache of files might be desirable. We would need consistent and\n-    # unique identifiers for the files.\n-    try:\n-        with open(file_name, 'rb') as f:\n-            data = f.read()\n-            f.close()\n-            response = make_response(data)\n-            response.headers[\"Content-Disposition\"] = \"attachment;\\\n-                    filename=image.fits\"\n-            response.headers[\"Content-Type\"] = \"image/fits\"\n-        return response\n-    except IOError as e:\n-        return _error(IOError.__name__, e.message, INTERNAL_SERVER_ERROR)\n-\n-\n-def _error(exception, message, status_code):\n-    response = jsonify({\"exception\": exception, \"message\": message})\n-    response.status_code = status_code\n+def _data_response(image):\n+    # write image data to FITS file via data buffer", "path": "python/lsst/dax/imgserv/imageREST_v1.py", "position": null, "original_position": 54, "commit_id": "b7e61cd3c4fdaadbf6d99a7e6678eae7b303dc4d", "original_commit_id": "a51b9a8cfc5cbc2df5ad72c0fbf4d942fa7df97a", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "I think PEP8 wants one line doc strings like this \"\"\"Write image data to FITS file via data buffer.\"\"\"", "created_at": "2017-10-16T19:08:11Z", "updated_at": "2017-10-16T21:04:42Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/30#discussion_r144939489", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/30", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/144939489"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/30#discussion_r144939489"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/30"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/144939489/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/144941092", "pull_request_review_id": 69668348, "id": 144941092, "diff_hunk": "@@ -186,38 +187,15 @@ def _get_ds(image_type):\n         return W13DeepCoaddDb\n \n \n-def _file_response(image, file_name):\n-    tmp_path = tempfile.mkdtemp()\n-    file_path = os.path.join(tmp_path, file_name)\n-    log.debug(\"temporary file_path=%s\", file_path)\n-    image.writeFits(file_path)\n-    resp = _make_file_response(file_path)\n-    os.remove(file_path)\n-    os.removedirs(tmp_path)\n-    return resp\n-\n-\n-def _make_file_response(file_name):\n-    # It would be nice to just write to 'data' instead of making a file.\n-    # writeFits defined in afw/python/lsst/afw/math/background.py\n-    # Using a cache of files might be desirable. We would need consistent and\n-    # unique identifiers for the files.\n-    try:\n-        with open(file_name, 'rb') as f:\n-            data = f.read()\n-            f.close()\n-            response = make_response(data)\n-            response.headers[\"Content-Disposition\"] = \"attachment;\\\n-                    filename=image.fits\"\n-            response.headers[\"Content-Type\"] = \"image/fits\"\n-        return response\n-    except IOError as e:\n-        return _error(IOError.__name__, e.message, INTERNAL_SERVER_ERROR)\n-\n-\n-def _error(exception, message, status_code):\n-    response = jsonify({\"exception\": exception, \"message\": message})\n-    response.status_code = status_code\n+def _data_response(image):\n+    # write image data to FITS file via data buffer", "path": "python/lsst/dax/imgserv/imageREST_v1.py", "position": null, "original_position": 54, "commit_id": "b7e61cd3c4fdaadbf6d99a7e6678eae7b303dc4d", "original_commit_id": "a51b9a8cfc5cbc2df5ad72c0fbf4d942fa7df97a", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "I think we can skip a doc string here, as _data_response() is intended for internal use only.", "created_at": "2017-10-16T19:15:04Z", "updated_at": "2017-10-16T21:04:42Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/30#discussion_r144941092", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/30", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/144941092"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/30#discussion_r144941092"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/30"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/144941092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 144939489}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/144943583", "pull_request_review_id": 69671183, "id": 144943583, "diff_hunk": "@@ -186,38 +187,15 @@ def _get_ds(image_type):\n         return W13DeepCoaddDb\n \n \n-def _file_response(image, file_name):\n-    tmp_path = tempfile.mkdtemp()\n-    file_path = os.path.join(tmp_path, file_name)\n-    log.debug(\"temporary file_path=%s\", file_path)\n-    image.writeFits(file_path)\n-    resp = _make_file_response(file_path)\n-    os.remove(file_path)\n-    os.removedirs(tmp_path)\n-    return resp\n-\n-\n-def _make_file_response(file_name):\n-    # It would be nice to just write to 'data' instead of making a file.\n-    # writeFits defined in afw/python/lsst/afw/math/background.py\n-    # Using a cache of files might be desirable. We would need consistent and\n-    # unique identifiers for the files.\n-    try:\n-        with open(file_name, 'rb') as f:\n-            data = f.read()\n-            f.close()\n-            response = make_response(data)\n-            response.headers[\"Content-Disposition\"] = \"attachment;\\\n-                    filename=image.fits\"\n-            response.headers[\"Content-Type\"] = \"image/fits\"\n-        return response\n-    except IOError as e:\n-        return _error(IOError.__name__, e.message, INTERNAL_SERVER_ERROR)\n-\n-\n-def _error(exception, message, status_code):\n-    response = jsonify({\"exception\": exception, \"message\": message})\n-    response.status_code = status_code\n+def _data_response(image):\n+    # write image data to FITS file via data buffer", "path": "python/lsst/dax/imgserv/imageREST_v1.py", "position": null, "original_position": 54, "commit_id": "b7e61cd3c4fdaadbf6d99a7e6678eae7b303dc4d", "original_commit_id": "a51b9a8cfc5cbc2df5ad72c0fbf4d942fa7df97a", "user": {"login": "timj", "id": 60622, "avatar_url": "https://avatars1.githubusercontent.com/u/60622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timj", "html_url": "https://github.com/timj", "followers_url": "https://api.github.com/users/timj/followers", "following_url": "https://api.github.com/users/timj/following{/other_user}", "gists_url": "https://api.github.com/users/timj/gists{/gist_id}", "starred_url": "https://api.github.com/users/timj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timj/subscriptions", "organizations_url": "https://api.github.com/users/timj/orgs", "repos_url": "https://api.github.com/users/timj/repos", "events_url": "https://api.github.com/users/timj/events{/privacy}", "received_events_url": "https://api.github.com/users/timj/received_events", "type": "User", "site_admin": false}, "body": "Please turn the comment into a docstring. If the comment is superfluous then that's a separate debate but I don't see a downside in making this a docstring.", "created_at": "2017-10-16T19:25:40Z", "updated_at": "2017-10-16T21:04:42Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/30#discussion_r144943583", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/30", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/144943583"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/30#discussion_r144943583"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/30"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/144943583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 144939489}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/148940885", "pull_request_review_id": 74265335, "id": 148940885, "diff_hunk": "@@ -80,203 +81,6 @@ def image_open_v1(W13db, config, logger=log):\n     return ImageGetter_v1(imagedb.butlerget, imagedb.metaservget, logger)\n \n \n-class MetaservGet:\n-    \"\"\"Class to fetch image metadata based on astronomical parameters.\n-\n-    \"\"\"\n-\n-    def  __init__(self, conn, table, columns, logger):\n-        \"\"\"Instantiate MetaServGet for access to image medatadata.\n-\n-        Parameters\n-        ----------\n-        conn :\n-                the connection to database server.\n-        columns :\n-                the database columns.\n-        logger: obj\n-                used for logging messages.\n-        \"\"\"\n-        self._log = logger\n-        self._conn = conn\n-        self._table = table\n-        self._columns = columns\n-\n-    def nearest_image_containing(self, ra, dec, filtername):\n-        \"\"\"Find nearest image containing the [ra, dec].\n-\n-        Parameters\n-        ----------\n-\n-        ra : degree\n-        dec : degree\n-        filtername: str [optional]\n-\n-        Returns\n-        -------\n-        qResults: dict\n-            the result of the SQL query.\n-        \"\"\"\n-        cols = [\"ra\", \"decl\"]\n-        for s in self._columns:\n-            cols.append(s)\n-        dist = \"(power((ra - {}),2) + power((decl - {}),2)) as distance\".format(ra, dec)\n-        # More accurate distance calc on a sphere-if needed\n-        # SELECT *, 2 * ASIN(SQRT(POWER(SIN((raA)*pi()/180/2),2)+\n-        # COS(raA*pi()/180)*COS(abs(raB)*pi()/180)*\n-        # POWER(SIN((decB.lon)*pi()/180/2),2)) as distance\n-        # FROM <table> order by distance ;\n-        filterSql = \"\"\n-        if filtername:\n-            filterSql = \"filtername = '{}' AND\".format(filtername)\n-        cols.append(dist)\n-        col_str = \",\".join(cols)\n-        sql = (\"SELECT {} FROM {} WHERE {} \"\n-               \"scisql_s2PtInCPoly({}, {}, \"\n-               \"corner1Ra, corner1Decl, corner2Ra, corner2Decl, \"\n-               \"corner3Ra, corner3Decl, corner4Ra, corner4Decl) = 1 \"\n-               \"order by distance LIMIT 1\").format(col_str, self._table, filterSql, ra, dec)\n-        self._log.debug(sql)\n-        self._log.debug(\"findNearest sql={}\".format(sql))\n-        r = self._conn.execute(sql).fetchall()\n-        return r\n-\n-\n-class ButlerGet:\n-    \"\"\"Class to instantiate and hold instance of Butler for ImageGetter.\n-\n-    \"\"\"\n-\n-    def __init__(self, dataRoot, butler_policy, butler_keys, logger):\n-        \"\"\"Instantiate ButlerGet to be passed to ImageGetter.\"\"\"\n-        logger.debug(\"Instantiating ButlerGet with dataRoot: {}\".format(dataRoot))\n-        self.butler = dafPersist.Butler(inputs=dataRoot)\n-        self.butler_policy = butler_policy\n-        self.butler_keys = butler_keys\n-\n-\n-class W13Db:\n-    \"\"\"This is the base class for examining DC_W13_Stripe82 image data,\n-    which instantates a data butler for access to image repository,and\n-    establishes connection to MetaServ for metadata.\n-\n-    Attributes\n-    ----------\n-    imagegetter : obj\n-        To be used for accessing images.\n-    \"\"\"\n-\n-    def __init__(self, credFileName, database, table, columns, dataRoot,\n-            butlerPolicy, butlerKeys, logger):\n-        \"\"\"Instantiate W13Db object with credentials for database, butler\n-        configuration, and logger.\n-\n-        Parameters\n-        ----------\n-        credFileName : str\n-            The connection for accessing image metadata.\n-        database : str\n-            The database connection string.\n-        table : str\n-            The table name.\n-        columns : str\n-            The database columns.\n-        dataRoot : str\n-            Root for the butler.\n-        bulterPolicy : str\n-            The butler policy.\n-        butlerKeys : str\n-            The bulter keys for this image data source.\n-        logger : obj\n-            The logger to be used.\n-\n-        \"\"\"\n-        self._log = logger\n-        self.conn = getEngineFromFile(credFileName, database=database).connect()\n-        self.butlerget = ButlerGet(dataRoot, butlerPolicy, butlerKeys, logger)\n-        self.metaservget = MetaservGet(self.conn, table, columns, logger)\n-        try:\n-            sql = \"SET time_zone = '+0:00'\"\n-            self._log.info(sql)\n-            self.conn.execute(sql)\n-        except SQLAlchemyError as e:\n-            self._log.error(\"Db engine error %s\" % e)\n-\n-\n-class ButlerGet:", "path": "python/lsst/dax/imgserv/locateImage.py", "position": 143, "original_position": 143, "commit_id": "2e61a3bafd1b2d9d505adf76c4ed89a88773c833", "original_commit_id": "26805aac58a5a266e082748bda774f49096132e2", "user": {"login": "ktlim", "id": 1054393, "avatar_url": "https://avatars3.githubusercontent.com/u/1054393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktlim", "html_url": "https://github.com/ktlim", "followers_url": "https://api.github.com/users/ktlim/followers", "following_url": "https://api.github.com/users/ktlim/following{/other_user}", "gists_url": "https://api.github.com/users/ktlim/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktlim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktlim/subscriptions", "organizations_url": "https://api.github.com/users/ktlim/orgs", "repos_url": "https://api.github.com/users/ktlim/repos", "events_url": "https://api.github.com/users/ktlim/events{/privacy}", "received_events_url": "https://api.github.com/users/ktlim/received_events", "type": "User", "site_admin": false}, "body": "I know it's fixed, but what was going on here?  A cut-and-paste issue?", "created_at": "2017-11-04T20:46:08Z", "updated_at": "2017-11-09T21:42:12Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/31#discussion_r148940885", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/31", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/148940885"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/31#discussion_r148940885"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/31"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/148940885/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/148940894", "pull_request_review_id": 74265335, "id": 148940894, "diff_hunk": "@@ -0,0 +1,98 @@\n+#\n+# LSST Data Management System\n+# Copyright 2015 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+#\n+#\n+# This code is used to to select an image or a cutout of an image\n+# that has its center closest to the specified RA and Dec. The\n+# image is retrieved using the Data Butler.\n+\n+\"\"\"\n+This module is used to fetch metadata based on astronomical parameters.\n+\n+@author: John Gates, SLAC\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny Lo, SLAC\n+\n+\"\"\"\n+\n+class MetaservGet:", "path": "python/lsst/dax/imgserv/getmetaserv.py", "position": null, "original_position": 36, "commit_id": "2e61a3bafd1b2d9d505adf76c4ed89a88773c833", "original_commit_id": "26805aac58a5a266e082748bda774f49096132e2", "user": {"login": "ktlim", "id": 1054393, "avatar_url": "https://avatars3.githubusercontent.com/u/1054393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktlim", "html_url": "https://github.com/ktlim", "followers_url": "https://api.github.com/users/ktlim/followers", "following_url": "https://api.github.com/users/ktlim/following{/other_user}", "gists_url": "https://api.github.com/users/ktlim/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktlim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktlim/subscriptions", "organizations_url": "https://api.github.com/users/ktlim/orgs", "repos_url": "https://api.github.com/users/ktlim/repos", "events_url": "https://api.github.com/users/ktlim/events{/privacy}", "received_events_url": "https://api.github.com/users/ktlim/received_events", "type": "User", "site_admin": false}, "body": "Moving this to a separate file seems worthy of a separate commit.  Also see file naming comment above.", "created_at": "2017-11-04T20:46:42Z", "updated_at": "2017-11-09T21:42:12Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/31#discussion_r148940894", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/31", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/148940894"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/31#discussion_r148940894"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/31"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/148940894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/148940932", "pull_request_review_id": 74265335, "id": 148940932, "diff_hunk": "@@ -0,0 +1,70 @@\n+#\n+# LSST Data Management System\n+# Copyright 2015 LSST/AURA.\n+#\n+# This product includes software developed by the\n+# LSST Project (http://www.lsst.org/).\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the LSST License Statement and\n+# the GNU General Public License along with this program.  If not,\n+# see <http://www.lsstcorp.org/LegalNotices/>.\n+#\n+#\n+# This code is used to to select an image or a cutout of an image\n+# that has its center closest to the specified RA and Dec. The\n+# image is retrieved using the Data Butler.\n+\n+\"\"\"\n+This module is used to instantiate or fetch from cache the\n+appropriate butler instance.\n+\n+@author: John Gates, SLAC\n+@author: Brian Van Klaveren, SLAC\n+@author: Kenny Lo, SLAC\n+\n+\"\"\"\n+from flask import current_app, has_app_context\n+import lsst.daf.persistence as dafPersist\n+\n+class ButlerGet:", "path": "python/lsst/dax/imgserv/getbutler.py", "position": null, "original_position": 39, "commit_id": "2e61a3bafd1b2d9d505adf76c4ed89a88773c833", "original_commit_id": "26805aac58a5a266e082748bda774f49096132e2", "user": {"login": "ktlim", "id": 1054393, "avatar_url": "https://avatars3.githubusercontent.com/u/1054393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktlim", "html_url": "https://github.com/ktlim", "followers_url": "https://api.github.com/users/ktlim/followers", "following_url": "https://api.github.com/users/ktlim/following{/other_user}", "gists_url": "https://api.github.com/users/ktlim/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktlim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktlim/subscriptions", "organizations_url": "https://api.github.com/users/ktlim/orgs", "repos_url": "https://api.github.com/users/ktlim/repos", "events_url": "https://api.github.com/users/ktlim/events{/privacy}", "received_events_url": "https://api.github.com/users/ktlim/received_events", "type": "User", "site_admin": false}, "body": "The style guide says to name the `.py` file after the class that it contains.  https://developer.lsst.io/coding/python_style_guide.html#a-python-source-file-name-should-be-camelcase-with-leading-lowercase-and-ending-in-py", "created_at": "2017-11-04T20:48:24Z", "updated_at": "2017-11-09T21:42:12Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/31#discussion_r148940932", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/31", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/148940932"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/31#discussion_r148940932"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/31"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/148940932/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/149813318", "pull_request_review_id": 75269095, "id": 149813318, "diff_hunk": "@@ -0,0 +1,70 @@\n+#\n+# LSST Data Management System\n+# Copyright 2015 LSST/AURA.", "path": "python/lsst/dax/imgserv/butlerGet.py", "position": null, "original_position": 3, "commit_id": "2e61a3bafd1b2d9d505adf76c4ed89a88773c833", "original_commit_id": "af53ccf2e179848c1d248fb8a6a802cc009a2d72", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "2015-2017", "created_at": "2017-11-08T22:14:50Z", "updated_at": "2017-11-09T21:42:12Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/31#discussion_r149813318", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/31", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/149813318"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/31#discussion_r149813318"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/31"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/149813318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/149824499", "pull_request_review_id": 75282113, "id": 149824499, "diff_hunk": "@@ -0,0 +1,98 @@\n+#\n+# LSST Data Management System\n+# Copyright 2015 LSST/AURA.", "path": "python/lsst/dax/imgserv/metaservGet.py", "position": null, "original_position": 3, "commit_id": "2e61a3bafd1b2d9d505adf76c4ed89a88773c833", "original_commit_id": "af53ccf2e179848c1d248fb8a6a802cc009a2d72", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "2015-2017", "created_at": "2017-11-08T23:08:18Z", "updated_at": "2017-11-09T21:42:12Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/31#discussion_r149824499", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/31", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/149824499"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/31#discussion_r149824499"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/31"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/149824499/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/154178330", "pull_request_review_id": 80303309, "id": 154178330, "diff_hunk": "@@ -1,5 +1,5 @@\n # LSST Data Management System\n-# Copyright 2015 AURA/LSST.\n+# Copyright 2017 AURA/LSST.", "path": "python/lsst/dax/imgserv/imageREST_v0.py", "position": 3, "original_position": 3, "commit_id": "e9a269b4de8beb937ad4963c88ec1a147d8c775b", "original_commit_id": "63726ad3d062caf6fc136b4e0cbfbfa5b5dab768", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "Copyright 2015-2017 AURA/LSST.", "created_at": "2017-11-30T19:33:46Z", "updated_at": "2017-12-01T17:06:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/33#discussion_r154178330", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/33", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/154178330"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/33#discussion_r154178330"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/33"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/154178330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/154180732", "pull_request_review_id": 80303309, "id": 154180732, "diff_hunk": "@@ -0,0 +1,237 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 AURA/LSST.", "path": "python/lsst/dax/imgserv/getimage/skymapImage.py", "position": null, "original_position": 3, "commit_id": "e9a269b4de8beb937ad4963c88ec1a147d8c775b", "original_commit_id": "63726ad3d062caf6fc136b4e0cbfbfa5b5dab768", "user": {"login": "jgates108", "id": 6558057, "avatar_url": "https://avatars1.githubusercontent.com/u/6558057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgates108", "html_url": "https://github.com/jgates108", "followers_url": "https://api.github.com/users/jgates108/followers", "following_url": "https://api.github.com/users/jgates108/following{/other_user}", "gists_url": "https://api.github.com/users/jgates108/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgates108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgates108/subscriptions", "organizations_url": "https://api.github.com/users/jgates108/orgs", "repos_url": "https://api.github.com/users/jgates108/repos", "events_url": "https://api.github.com/users/jgates108/events{/privacy}", "received_events_url": "https://api.github.com/users/jgates108/received_events", "type": "User", "site_admin": false}, "body": "I think 2015-2017 is more accurate as significant parts of the code are copied from skymapStich.py. Also, it would be desirable to delete skymapStitch.py, if reasonably possible. Having that much nearly duplicate code sitting around is likely to cause confusion.", "created_at": "2017-11-30T19:43:17Z", "updated_at": "2017-12-01T17:06:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/33#discussion_r154180732", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/33", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/154180732"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/33#discussion_r154180732"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/33"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/154180732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/154197521", "pull_request_review_id": 80325542, "id": 154197521, "diff_hunk": "@@ -1,5 +1,5 @@\n # LSST Data Management System\n-# Copyright 2015 AURA/LSST.\n+# Copyright 2017 AURA/LSST.", "path": "python/lsst/dax/imgserv/imageREST_v0.py", "position": 3, "original_position": 3, "commit_id": "e9a269b4de8beb937ad4963c88ec1a147d8c775b", "original_commit_id": "63726ad3d062caf6fc136b4e0cbfbfa5b5dab768", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Fixed.", "created_at": "2017-11-30T20:51:38Z", "updated_at": "2017-12-01T17:06:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/33#discussion_r154197521", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/33", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/154197521"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/33#discussion_r154197521"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/33"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/154197521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 154178330}, {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/154198022", "pull_request_review_id": 80326130, "id": 154198022, "diff_hunk": "@@ -0,0 +1,237 @@\n+#\n+# LSST Data Management System\n+# Copyright 2017 AURA/LSST.", "path": "python/lsst/dax/imgserv/getimage/skymapImage.py", "position": null, "original_position": 3, "commit_id": "e9a269b4de8beb937ad4963c88ec1a147d8c775b", "original_commit_id": "63726ad3d062caf6fc136b4e0cbfbfa5b5dab768", "user": {"login": "kennywlo", "id": 23663546, "avatar_url": "https://avatars1.githubusercontent.com/u/23663546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennywlo", "html_url": "https://github.com/kennywlo", "followers_url": "https://api.github.com/users/kennywlo/followers", "following_url": "https://api.github.com/users/kennywlo/following{/other_user}", "gists_url": "https://api.github.com/users/kennywlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennywlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennywlo/subscriptions", "organizations_url": "https://api.github.com/users/kennywlo/orgs", "repos_url": "https://api.github.com/users/kennywlo/repos", "events_url": "https://api.github.com/users/kennywlo/events{/privacy}", "received_events_url": "https://api.github.com/users/kennywlo/received_events", "type": "User", "site_admin": false}, "body": "Ok, moving imageREST_v0 to use new SkymapImage, where all the logic has been preserved, and remove the old files.", "created_at": "2017-11-30T20:53:42Z", "updated_at": "2017-12-01T17:06:46Z", "html_url": "https://github.com/lsst/dax_imgserv/pull/33#discussion_r154198022", "pull_request_url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/33", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/154198022"}, "html": {"href": "https://github.com/lsst/dax_imgserv/pull/33#discussion_r154198022"}, "pull_request": {"href": "https://api.github.com/repos/lsst/dax_imgserv/pulls/33"}}, "reactions": {"url": "https://api.github.com/repos/lsst/dax_imgserv/pulls/comments/154198022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}, "in_reply_to_id": 154180732}]}}}