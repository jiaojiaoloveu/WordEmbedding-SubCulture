{"_default": {"1": {"issues": [{"url": "https://api.github.com/repos/libdynd/libdynd/issues/1329", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/1329/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/1329/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/1329/events", "html_url": "https://github.com/libdynd/libdynd/pull/1329", "id": 284320143, "number": 1329, "title": "Update to latest googletest.", "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-12-23T18:31:52Z", "updated_at": "2017-12-23T20:51:19Z", "closed_at": null, "author_association": "OWNER", "pull_request": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/1329", "html_url": "https://github.com/libdynd/libdynd/pull/1329", "diff_url": "https://github.com/libdynd/libdynd/pull/1329.diff", "patch_url": "https://github.com/libdynd/libdynd/pull/1329.patch"}, "body": "Another pass at https://github.com/libdynd/libdynd/pull/1319.", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1326", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/1326/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/1326/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/1326/events", "html_url": "https://github.com/libdynd/libdynd/issues/1326", "id": 244801236, "number": 1326, "title": "Disable strict-aliasing temporarily with GCC for `container_init` in `init_kernel.hpp`", "user": {"login": "Alexhuszagh", "id": 9440903, "avatar_url": "https://avatars3.githubusercontent.com/u/9440903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexhuszagh", "html_url": "https://github.com/Alexhuszagh", "followers_url": "https://api.github.com/users/Alexhuszagh/followers", "following_url": "https://api.github.com/users/Alexhuszagh/following{/other_user}", "gists_url": "https://api.github.com/users/Alexhuszagh/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexhuszagh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexhuszagh/subscriptions", "organizations_url": "https://api.github.com/users/Alexhuszagh/orgs", "repos_url": "https://api.github.com/users/Alexhuszagh/repos", "events_url": "https://api.github.com/users/Alexhuszagh/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexhuszagh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-07-21T22:52:24Z", "updated_at": "2017-08-01T04:39:36Z", "closed_at": null, "author_association": "NONE", "body": "GCC is fairly well known to be very aggressive with strict aliasing, for good reason. However, on Fedora MinGW (version 7.1.0 20170502), both 32-bit and 64-bit, the `reinterpret_cast<kernel *>` calls trigger `warning: dereferencing type-punned pointer will break strict-aliasing rules`. I believe this is a compiler bug, and not actually a bug with DyND, but the following does \"patch\" the issue. \r\n\r\nI'm not sure how desirable this \"patch\" is, however, implementing it allows Fedora MinGW to fully compile DyND (along with the previous patches mentioned).\r\n\r\n```diff\r\ndiff --git a/include/dynd/kernels/init_kernel.hpp b/include/dynd/kernels/init_kernel.hpp\r\nindex 33fd5af47..83988331c 100644\r\n--- a/include/dynd/kernels/init_kernel.hpp\r\n+++ b/include/dynd/kernels/init_kernel.hpp\r\n@@ -263,6 +263,8 @@ namespace nd {\r\n     void init(const ndt::type &tp, const char *metadata) {\r\n       typedef detail::init_kernel<ResType, ContainerType> kernel;\r\n \r\n+#pragma GCC diagnostic push\r\n+#pragma GCC diagnostic ignored \"-Wstrict-aliasing\"\r\n       new (&child) kernel(tp, metadata);\r\n       destruct_wrapper = [](container_init *self) { reinterpret_cast<kernel *>(&self->child)->~kernel(); };\r\n       single_wrapper = [](container_init *self, char *data, const ContainerType &values) {\r\n@@ -271,6 +273,7 @@ namespace nd {\r\n       contiguous_wrapper = [](container_init *self, char *data, const ContainerType *values, size_t size) {\r\n         reinterpret_cast<kernel *>(&self->child)->contiguous(data, values, size);\r\n       };\r\n+#pragma GCC diagnostic pop\r\n     }\r\n \r\n     container_init(const ndt::type &tp, const char *metadata) {\r\n```", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1325", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/1325/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/1325/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/1325/events", "html_url": "https://github.com/libdynd/libdynd/issues/1325", "id": 244789334, "number": 1325, "title": "Use lowercase names for Windows API includes", "user": {"login": "Alexhuszagh", "id": 9440903, "avatar_url": "https://avatars3.githubusercontent.com/u/9440903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexhuszagh", "html_url": "https://github.com/Alexhuszagh", "followers_url": "https://api.github.com/users/Alexhuszagh/followers", "following_url": "https://api.github.com/users/Alexhuszagh/following{/other_user}", "gists_url": "https://api.github.com/users/Alexhuszagh/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexhuszagh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexhuszagh/subscriptions", "organizations_url": "https://api.github.com/users/Alexhuszagh/orgs", "repos_url": "https://api.github.com/users/Alexhuszagh/repos", "events_url": "https://api.github.com/users/Alexhuszagh/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexhuszagh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-07-21T21:36:31Z", "updated_at": "2017-07-21T23:25:59Z", "closed_at": null, "author_association": "NONE", "body": "Although Windows uses a case-insensitive filesystem, most other operating systems do not. Therefore, when cross-compiling, such as when using MXE or Fedora MinGW, the cross-compiler may not recognize valid includes from Windows headers. A convention was made, and all includes should use lowercase, since this does not conflict with a case-insensitive filesystem, and mirrors the naming conventions of headers in standard C++.\r\n\r\nTo support cross-compilers, only the following changes are required:\r\n\r\n```diff\r\ndiff --git a/include/dynd/memblock/memmap_memory_block.hpp b/include/dynd/memblock/memmap_memory_block.hpp\r\nindex 5a1f9b325..a6ebd6ded 100644\r\n--- a/include/dynd/memblock/memmap_memory_block.hpp\r\n+++ b/include/dynd/memblock/memmap_memory_block.hpp\r\n@@ -12,7 +12,7 @@\r\n #ifndef NOMINMAX\r\n #define NOMINMAX\r\n #endif\r\n-#include <Windows.h>\r\n+#include <windows.h>\r\n #else\r\n #include <fcntl.h>\r\n #include <sys/mman.h>\r\n```\r\n\r\n```diff\r\ndiff --git a/src/sysinfo.cc b/src/sysinfo.cc\r\nindex e10e19d..1c24239 100644\r\n--- a/src/sysinfo.cc\r\n+++ b/src/sysinfo.cc\r\n@@ -16,9 +16,9 @@\r\n #include \"internal_macros.h\"\r\n \r\n #ifdef BENCHMARK_OS_WINDOWS\r\n-#include <Shlwapi.h>\r\n-#include <Windows.h>\r\n-#include <VersionHelpers.h>\r\n+#include <shlwapi.h>\r\n+#include <windows.h>\r\n+#include <versionhelpers.h>\r\n #else\r\n #include <fcntl.h>\r\n #include <sys/resource.h>\r\n```\r\n\r\n```diff\r\ndiff --git a/src/colorprint.cc b/src/colorprint.cc\r\nindex 81f917b..e580738 100644\r\n--- a/src/colorprint.cc\r\n+++ b/src/colorprint.cc\r\n@@ -21,7 +21,7 @@\r\n #include \"internal_macros.h\"\r\n \r\n #ifdef BENCHMARK_OS_WINDOWS\r\n-#include <Windows.h>\r\n+#include <windows.h>\r\n #endif\r\n \r\n DECLARE_bool(color_print);\r\n```\r\n\r\n```diff\r\ndiff --git a/src/sleep.cc b/src/sleep.cc\r\nindex 918abc4..8f102d5 100644\r\n--- a/src/sleep.cc\r\n+++ b/src/sleep.cc\r\n@@ -20,7 +20,7 @@\r\n #include \"internal_macros.h\"\r\n \r\n #ifdef BENCHMARK_OS_WINDOWS\r\n-#include <Windows.h>\r\n+#include <windows.h>\r\n #endif\r\n \r\n namespace benchmark {\r\n```", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1324", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/1324/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/1324/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/1324/events", "html_url": "https://github.com/libdynd/libdynd/issues/1324", "id": 244782604, "number": 1324, "title": "Argument 1 null where non-null expected in _nan", "user": {"login": "Alexhuszagh", "id": 9440903, "avatar_url": "https://avatars3.githubusercontent.com/u/9440903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexhuszagh", "html_url": "https://github.com/Alexhuszagh", "followers_url": "https://api.github.com/users/Alexhuszagh/followers", "following_url": "https://api.github.com/users/Alexhuszagh/following{/other_user}", "gists_url": "https://api.github.com/users/Alexhuszagh/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexhuszagh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexhuszagh/subscriptions", "organizations_url": "https://api.github.com/users/Alexhuszagh/orgs", "repos_url": "https://api.github.com/users/Alexhuszagh/repos", "events_url": "https://api.github.com/users/Alexhuszagh/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexhuszagh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-07-21T21:01:46Z", "updated_at": "2017-07-21T22:41:15Z", "closed_at": null, "author_association": "NONE", "body": "Compiling on GCC-7.1.1 produces the following error traceback:\r\n\r\n```bash\r\ncd /home/ahuszagh/git/PyCPP/third_party/libdynd/build/tests && /usr/bin/c++   -I/home/ahuszagh/git/PyCPP/third_party/libdynd/include -I/home/ahuszagh/git/PyCPP/third_party/libdynd/thirdparty/utf8/source -I/home/ahuszagh/git/PyCPP/third_party/libdynd/build/include -I/home/ahuszagh/git/PyCPP/third_party/libdynd/tests/../thirdparty -I/home/ahuszagh/git/PyCPP/third_party/libdynd/tests/.  -O3 -fomit-frame-pointer -fstrict-aliasing -Wall -Wextra -Wno-missing-field-initializers -fPIC -Werror -Wno-ignored-attributes -std=c++14 -fmax-errors=20 -Wno-type-limits -Wno-maybe-uninitialized  -DGTEST_USE_OWN_TR1_TUPLE=1   -pthread -o CMakeFiles/test_libdynd.dir/types/test_struct_type.cpp.o -c /home/ahuszagh/git/PyCPP/third_party/libdynd/tests/types/test_struct_type.cpp\r\nIn file included from /home/ahuszagh/git/PyCPP/third_party/libdynd/include/dynd/gtest.hpp:17:0,\r\n                 from /home/ahuszagh/git/PyCPP/third_party/libdynd/tests/types/test_complex_type.cpp:12:\r\n/home/ahuszagh/git/PyCPP/third_party/libdynd/include/dynd/math.hpp: In function \u2018dynd::complex<T> dynd::exp(dynd::complex<T>) [with T = double]\u2019:\r\n/home/ahuszagh/git/PyCPP/third_party/libdynd/include/dynd/math.hpp:200:22: error: argument 1 null where non-null expected [-Werror=nonnull]\r\n   return std::nan(arg);\r\n                      ^\r\nIn file included from /usr/include/features.h:410:0,\r\n                 from /usr/include/c++/7/x86_64-redhat-linux/bits/os_defines.h:39,\r\n                 from /usr/include/c++/7/x86_64-redhat-linux/bits/c++config.h:2494,\r\n                 from /usr/include/c++/7/complex:41,\r\n                 from /home/ahuszagh/git/PyCPP/third_party/libdynd/tests/types/test_complex_type.cpp:6:\r\n/usr/include/bits/mathcalls.h:230:1: note: in a call to function \u2018double nan(const char*)\u2019 declared here\r\n __MATHCALLX (nan,, (const char *__tagb), (__const__));\r\n ^\r\nIn file included from /home/ahuszagh/git/PyCPP/third_party/libdynd/include/dynd/gtest.hpp:17:0,\r\n                 from /home/ahuszagh/git/PyCPP/third_party/libdynd/tests/types/test_complex_type.cpp:12:\r\n/home/ahuszagh/git/PyCPP/third_party/libdynd/include/dynd/math.hpp:200:22: error: argument 1 null where non-null expected [-Werror=nonnull]\r\n   return std::nan(arg);\r\n```\r\n\r\nThe fix, once again, is quite trivial. In `math.hpp`, the following lines should be converted:\r\n\r\n```diff\r\ntemplate <>\r\ninline float _nan(const char *arg) {\r\n#ifdef __CUDACC__\r\n  return ::nanf(arg);\r\n#else\r\n-   return std::nanf(arg);\r\n+  return arg ? std::nanf(arg) : std::numeric_limits<float>::quiet_NaN();\r\n#endif\r\n}\r\n```\r\n\r\n```diff\r\ntemplate <>\r\ninline double _nan(const char *arg) {\r\n#ifdef __CUDACC__\r\n  return ::nan(arg);\r\n#else\r\n-  return std::nan(arg);\r\n+  return arg ? std::nan(arg) : std::numeric_limits<double>::quiet_NaN();\r\n#endif\r\n}\r\n```\r\n\r\nThis simply enforces the argument passed to `std::nan` and `std::nanf` is nonnull, and uses `quiet_NAN` otherwise. This requires the `<limits>` header.", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1323", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/1323/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/1323/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/1323/events", "html_url": "https://github.com/libdynd/libdynd/issues/1323", "id": 244778224, "number": 1323, "title": "Implicit Fallthrough in Substitute TypeVars", "user": {"login": "Alexhuszagh", "id": 9440903, "avatar_url": "https://avatars3.githubusercontent.com/u/9440903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexhuszagh", "html_url": "https://github.com/Alexhuszagh", "followers_url": "https://api.github.com/users/Alexhuszagh/followers", "following_url": "https://api.github.com/users/Alexhuszagh/following{/other_user}", "gists_url": "https://api.github.com/users/Alexhuszagh/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexhuszagh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexhuszagh/subscriptions", "organizations_url": "https://api.github.com/users/Alexhuszagh/orgs", "repos_url": "https://api.github.com/users/Alexhuszagh/repos", "events_url": "https://api.github.com/users/Alexhuszagh/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexhuszagh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-07-21T20:41:18Z", "updated_at": "2017-07-21T23:09:36Z", "closed_at": null, "author_association": "NONE", "body": "In `substitute_typevars.cpp`, using GCC-7.1.1, there is an implicit fallthrough in the `ndt::detail::internal_substitute` for the case of a `typevar_constructed_id`. \r\n\r\nThe original code looks something like this:\r\n\r\n```cpp\r\n  case typevar_constructed_id: {\r\n    map<std::string, ndt::type>::const_iterator it =\r\n        typevars.find(pattern.extended<typevar_constructed_type>()->get_name());\r\n    if (it->second.get_id() == void_id) {\r\n      return substitute(pattern.extended<typevar_constructed_type>()->get_arg(), typevars, concrete);\r\n    }\r\n#ifdef DYND_CUDA\r\n    if (it->second.get_id() == cuda_device_id) {\r\n      return ndt::make_cuda_device(\r\n          substitute(pattern.extended<typevar_constructed_type>()->get_arg(), typevars, concrete));\r\n    }\r\n#endif\r\n// implicit fallthrough here...\r\n  }\r\n```\r\n\r\nAlthough the implicit fall-through is logically unreachable, the compiler does not know this. Changing the above code to the following prevents any implicit fallthroughts:\r\n\r\n```cpp\r\n  case typevar_constructed_id: {\r\n    map<std::string, ndt::type>::const_iterator it =\r\n        typevars.find(pattern.extended<typevar_constructed_type>()->get_name());\r\n    if (it->second.get_id() == void_id) {\r\n      return substitute(pattern.extended<typevar_constructed_type>()->get_arg(), typevars, concrete);\r\n    }\r\n#ifdef DYND_CUDA\r\n    if (it->second.get_id() == cuda_device_id) {\r\n      return ndt::make_cuda_device(\r\n          substitute(pattern.extended<typevar_constructed_type>()->get_arg(), typevars, concrete));\r\n    }\r\n#endif\r\n    stringstream ss;\r\n    ss << \"No constructed id for dynd type var \" << pattern << \" was available\";\r\n    throw invalid_argument(ss.str());\r\n  }\r\n```", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1322", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/1322/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/1322/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/1322/events", "html_url": "https://github.com/libdynd/libdynd/issues/1322", "id": 244764216, "number": 1322, "title": "CMAKE_LEGACY_CYGWIN_WIN32 Is Unset", "user": {"login": "Alexhuszagh", "id": 9440903, "avatar_url": "https://avatars3.githubusercontent.com/u/9440903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexhuszagh", "html_url": "https://github.com/Alexhuszagh", "followers_url": "https://api.github.com/users/Alexhuszagh/followers", "following_url": "https://api.github.com/users/Alexhuszagh/following{/other_user}", "gists_url": "https://api.github.com/users/Alexhuszagh/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexhuszagh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexhuszagh/subscriptions", "organizations_url": "https://api.github.com/users/Alexhuszagh/orgs", "repos_url": "https://api.github.com/users/Alexhuszagh/repos", "events_url": "https://api.github.com/users/Alexhuszagh/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexhuszagh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-07-21T19:38:41Z", "updated_at": "2017-07-21T22:08:08Z", "closed_at": null, "author_association": "NONE", "body": "DyND uses the WIN32 flag to remove the `-fPIC -Wno-ignored-attributes` flags during compilation, however, it fails to set the `CMAKE_LEGACY_CYGWIN_WIN32` flag at the top of CMakeLists.txt. This flag sets WIN32 to be true on MSYS2/Cygwin compilers, which do not support either flag (and would typically ignore them, however, `-Werror` is enabled).\r\n\r\nThe solution is to add the following line to the toplevel `CMakeLists.txt` at the top of the file:\r\n\r\n```cmake\r\nset(CMAKE_LEGACY_CYGWIN_WIN32 1)\r\n```\r\n\r\nOnce again, I can submit a PR with the last 3 changes, if desired.\r\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1322/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1321", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/1321/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/1321/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/1321/events", "html_url": "https://github.com/libdynd/libdynd/issues/1321", "id": 244762614, "number": 1321, "title": "MinGW/Android Don't Export hypot/cbrt to namespace std", "user": {"login": "Alexhuszagh", "id": 9440903, "avatar_url": "https://avatars3.githubusercontent.com/u/9440903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexhuszagh", "html_url": "https://github.com/Alexhuszagh", "followers_url": "https://api.github.com/users/Alexhuszagh/followers", "following_url": "https://api.github.com/users/Alexhuszagh/following{/other_user}", "gists_url": "https://api.github.com/users/Alexhuszagh/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexhuszagh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexhuszagh/subscriptions", "organizations_url": "https://api.github.com/users/Alexhuszagh/orgs", "repos_url": "https://api.github.com/users/Alexhuszagh/repos", "events_url": "https://api.github.com/users/Alexhuszagh/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexhuszagh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-07-21T19:31:15Z", "updated_at": "2017-07-21T22:44:17Z", "closed_at": null, "author_association": "NONE", "body": "Building libdynd on many MinGW or Android-like compilers fails since these compilers are buggy and frequently do not export `hypot` or `cbrt` to the namespace `std`. Although I am generally of the opinion that compilers should fix their non-compliance, and this should not be an issue of the library using them, in this case the fix is trivial.\r\n\r\nOriginally, `config.h` lines 987-988 look like this:\r\n\r\n```cpp\r\nusing std::cbrt;\r\nusing std::hypot;\r\n```\r\n\r\nChanging them to the following solves the issue, without interfering with MSVC, GCC, or Clang builds:\r\n\r\n```cpp\r\nusing ::cbrt;\r\nusing ::hypot;\r\n```", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1320", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/1320/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/1320/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/1320/events", "html_url": "https://github.com/libdynd/libdynd/issues/1320", "id": 244756156, "number": 1320, "title": "Signed/Unsigned Mismatch Leads to Build Failure", "user": {"login": "Alexhuszagh", "id": 9440903, "avatar_url": "https://avatars3.githubusercontent.com/u/9440903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexhuszagh", "html_url": "https://github.com/Alexhuszagh", "followers_url": "https://api.github.com/users/Alexhuszagh/followers", "following_url": "https://api.github.com/users/Alexhuszagh/following{/other_user}", "gists_url": "https://api.github.com/users/Alexhuszagh/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexhuszagh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexhuszagh/subscriptions", "organizations_url": "https://api.github.com/users/Alexhuszagh/orgs", "repos_url": "https://api.github.com/users/Alexhuszagh/repos", "events_url": "https://api.github.com/users/Alexhuszagh/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexhuszagh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-07-21T19:01:57Z", "updated_at": "2017-07-21T22:56:41Z", "closed_at": null, "author_association": "NONE", "body": "On MSVC, the `-WX` flag passed leads to all build warnings being treated as errors. in `type_registry.cpp`, there's a fairly simple check for an out-of-range value:\r\n\r\n```cpp\r\nif (id < 0 || id >= infos.size()) {\r\n  throw out_of_range(\"Type ID \" + to_string(id) + \" is out of range, cannot register its known type ID constructor\");\r\n}\r\n```\r\n\r\n`infos`, however, is a vector, meaning the size must be an unsigned type, and `id` is of the type `type_id_t` (an enum), which is a signed type (the check for <0 should also demonstrate that). This produces a signed/unsigned mismatch on MSVC, which then causes an error and stops the build, with the following error trace:\r\n\r\n```\r\nC:\\projects\\libdynd\\src\\dynd\\type_registry.cpp(153): error C2220: warning treated as error - no 'object' file generated [C:\\projects\\libdynd\\libdyndt.vcxproj] [C:\\projects\\crosscxx\\dynd_external.vcxproj]\r\nC:\\projects\\libdynd\\src\\dynd\\type_registry.cpp(153): warning C4018: '>=': signed/unsigned mismatch [C:\\projects\\libdynd\\libdyndt.vcxproj] [C:\\projects\\crosscxx\\dynd_external.vcxproj]\r\n    uint128.cpp\r\n    Generating Code...\r\n  Done Building Project \"C:\\projects\\libdynd\\libdyndt.vcxproj\" (default targets) -- FAILED.\r\n  Done Building Project \"C:\\projects\\libdynd\\libdynd.vcxproj\" (default targets) -- FAILED.\r\n  Done Building Project \"C:\\projects\\libdynd\\ALL_BUILD.vcxproj\" (default targets) -- FAILED.\r\n  \r\n  Build FAILED.\r\n```\r\n\r\nThe fix is quite simple:\r\n\r\n```cpp\r\nvector<id_info> &infos = detail::infos();\r\nif (id < 0 || id >= static_cast<type_id_t>(infos.size())) {\r\n  throw out_of_range(\"Type ID \" + to_string(id) + \" is out of range, cannot register its known type ID constructor\");\r\n}\r\n```\r\n\r\nIf you would like, I can submit a PR for these changes (I will also be submitting numerous other small bug fixes that I discovered via continual integration).", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1320/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1274", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/1274/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/1274/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/1274/events", "html_url": "https://github.com/libdynd/libdynd/issues/1274", "id": 159865989, "number": 1274, "title": "Documentation, state?", "user": {"login": "wolfv", "id": 885054, "avatar_url": "https://avatars0.githubusercontent.com/u/885054?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wolfv", "html_url": "https://github.com/wolfv", "followers_url": "https://api.github.com/users/wolfv/followers", "following_url": "https://api.github.com/users/wolfv/following{/other_user}", "gists_url": "https://api.github.com/users/wolfv/gists{/gist_id}", "starred_url": "https://api.github.com/users/wolfv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wolfv/subscriptions", "organizations_url": "https://api.github.com/users/wolfv/orgs", "repos_url": "https://api.github.com/users/wolfv/repos", "events_url": "https://api.github.com/users/wolfv/events{/privacy}", "received_events_url": "https://api.github.com/users/wolfv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-06-13T03:07:28Z", "updated_at": "2016-06-15T06:48:12Z", "closed_at": null, "author_association": "NONE", "body": "Hi,\n\nsorry for opening this issue, but I am currently evaluating libdynd for use in a project of mine and it looks just like what I am searching for. \nThe project is to use a computation graph (like tensorflow, or when you are from continuum, like dask ;) and then generate high performance C++ from that. I am planning to publish the project to open source very soon (in a week or two).\n\nCurrently I am using armadillo as the Math/Matrix backend. However, armadillo has the limitation of not being 100% numpy compatible (e.g. more than 3D matrices are afaik not supported). And other stuff like broadcasting and views are there, but less natural as with numpy. \n\nSo obviously libdynd looks like an very interesting candidate! I would love to use it. \nHowever, I am missing some quick introduction sites, benchmarks, and some developer/API documentation as it's hard for me to evaluate the completeness of this library.\nHow ready is it to be seriously used? How many functions will I be missing?\n\nCheers!\n\nWolf\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1266", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/1266/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/1266/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/1266/events", "html_url": "https://github.com/libdynd/libdynd/issues/1266", "id": 158444612, "number": 1266, "title": "non-obvious type_type.hpp include", "user": {"login": "skrah", "id": 16530421, "avatar_url": "https://avatars1.githubusercontent.com/u/16530421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skrah", "html_url": "https://github.com/skrah", "followers_url": "https://api.github.com/users/skrah/followers", "following_url": "https://api.github.com/users/skrah/following{/other_user}", "gists_url": "https://api.github.com/users/skrah/gists{/gist_id}", "starred_url": "https://api.github.com/users/skrah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skrah/subscriptions", "organizations_url": "https://api.github.com/users/skrah/orgs", "repos_url": "https://api.github.com/users/skrah/repos", "events_url": "https://api.github.com/users/skrah/events{/privacy}", "received_events_url": "https://api.github.com/users/skrah/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-06-03T20:06:46Z", "updated_at": "2016-06-03T20:06:46Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body": "The following test program needs a `type_type.hpp` include:\n\n```\n#include <dynd/type.hpp>\n#include <dynd/types/pointer_type.hpp>\n#include <dynd/types/type_type.hpp> // fails without this\nusing namespace dynd;\n\nint\nmain()\n{\n  ndt::type d = ndt::make_type<ndt::pointer_type>(ndt::make_type<char>());\n  d.p<ndt::type>(\"target_type\");\n}\n```\n\nNot sure if it's easily possible, but it would be great to rearrange things so that this include isn't needed.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1266/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1265", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/1265/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/1265/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/1265/events", "html_url": "https://github.com/libdynd/libdynd/pull/1265", "id": 158157493, "number": 1265, "title": "[WIP] Add flag for building libdyndt only.", "user": {"login": "skrah", "id": 16530421, "avatar_url": "https://avatars1.githubusercontent.com/u/16530421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skrah", "html_url": "https://github.com/skrah", "followers_url": "https://api.github.com/users/skrah/followers", "following_url": "https://api.github.com/users/skrah/following{/other_user}", "gists_url": "https://api.github.com/users/skrah/gists{/gist_id}", "starred_url": "https://api.github.com/users/skrah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skrah/subscriptions", "organizations_url": "https://api.github.com/users/skrah/orgs", "repos_url": "https://api.github.com/users/skrah/repos", "events_url": "https://api.github.com/users/skrah/events{/privacy}", "received_events_url": "https://api.github.com/users/skrah/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-06-02T14:38:26Z", "updated_at": "2016-06-03T20:24:21Z", "closed_at": null, "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/1265", "html_url": "https://github.com/libdynd/libdynd/pull/1265", "diff_url": "https://github.com/libdynd/libdynd/pull/1265.diff", "patch_url": "https://github.com/libdynd/libdynd/pull/1265.patch"}, "body": "The problem: It would be good to cut down build times for the dynd-python build when libdynd is in the tree. It is already possible to execute `make libdyndt` manually, but I have trouble finding an elegant way to make that happen inside the dynd-python cmake machinery.\n\nAnother way would be to add a `DYND_BUILD_LIBDYND` flag, which is what this patch is doing. Since the tests and benchmarks still depend on libdynd, this is still a bit convoluted.\n\nI'm not sure if I like this patch, I'm mainly hoping for better solutions.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1246", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/1246/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/1246/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/1246/events", "html_url": "https://github.com/libdynd/libdynd/issues/1246", "id": 156644663, "number": 1246, "title": "Types for graphics", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-05-25T01:31:28Z", "updated_at": "2016-05-25T08:16:17Z", "closed_at": null, "author_association": "OWNER", "body": "An issue to compile information about graphics-related types.\n- http://graphics.pixar.com/usd/docs/api/_usd__page__datatypes.html#Usd_Basic_Datatypes\n- http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/data-types-and-variables/\n- https://renderman.pixar.com/resources/current/RenderMan/types.html\n\nThere's a naming problem for the parameterizations of vector size and data size. USD mixes them a bit, e.g. has `int64` as a 64-bit signed integer, and `int3` as a 3-vector of 32-bit integers. It also uses `double3`, `float3`, and `half3` as the various precisions of floating point 3-vectors. Using the types `3 * float64`, `3 * float32`, and `3 * float16` doesn't quite feel right, because they should generally be treated as scalar units, e.g. a 1-dimensional array of 3-vectors and a grey scale 2 dimensional image of height 3 shouldn't have the same type.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1246/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1196", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/1196/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/1196/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/1196/events", "html_url": "https://github.com/libdynd/libdynd/issues/1196", "id": 154326281, "number": 1196, "title": "Callables should use the restrict keyword on input data pointers", "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-05-11T19:44:46Z", "updated_at": "2016-05-11T19:44:46Z", "closed_at": null, "author_association": "OWNER", "body": "The DyND iteration model does not currently account for cases where input and output arrays may overlap. This means that, in terms of our interface, writing output to an array that overlaps with an array that is only expected to be used as input may result in garbage results.\nSince that assumption is part of the package's current design, it would be good to allow the compiler and optimizer to make that same assumption by using the restrict keyword on input data given to callables.\n\nMore details:\nNumpy now checks for memory overlap to prevent things like `a += a.T` from giving garbage results (see https://github.com/numpy/numpy/pull/6166). Since DyND allows for user-defined dimension types, this problem is harder to solve in general here. It's not clear how this would work with variable length dimensions, etc. Given that DyND also currently targets lower level languages like C++ where solving overlap problems like this on a callable call would be considered an unreasonable dynamic cost, it may be better to say that corner cases like this are undefined behavior and give garbage output. Regardless of whether or not we end up supporting overlap detection in the long run, the memory overlap problem would be something that would have to be solved when we determine how we are going to iterate over input arrays and shouldn't be something we require the compiler to consider.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1196/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1195", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/1195/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/1195/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/1195/events", "html_url": "https://github.com/libdynd/libdynd/issues/1195", "id": 154323358, "number": 1195, "title": "Interfaces for creating callables from C++ type generic code", "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-05-11T19:29:57Z", "updated_at": "2016-05-11T19:29:57Z", "closed_at": null, "author_association": "OWNER", "body": "We already have mechanisms internally that allow the creation of a type dispatched callable from a given C++ template and a list of types for which the template should be instantiated. It'd be really nice to create a better user-facing interface for this sort of thing. Function templates and generic lambdas would be the ideal targets for this sort of thing.\n\nSome relevant observations:\n- with generic lambdas, it's tricky (but not necessarily impossible) to infer which function parameters are declared `auto`. An interface where we do a \"call this with these argument types\" may be easier to construct initially.\n- the types for the auto parameters most likely map, in order, to the template parameters used in the lambda's `ClosureType::operator()` template. I'm not sure if that's actually required by the standard though.\n- Some times it may be easier for users to supply a `type_list` of `type_list` types that each represent the types with which to call the given template, other times it may be easier to construct such a thing through an outer product.\n\nWith that in mind, here are some ideas:\n- We could build a \"call this with these types\" interface and a \"instantiate this template with these types\" interface. This would nicely cover pretty much every use-case other than lambdas that have mixed auto and non-auto function parameters. Those would have to have dummy types that match their non-auto parameters.\n- Some type list manipulations should be exposed as a public interface. Things like `dynd::outer` and `dynd::join` would be good.\n- While we could support templating all of these on type ids, it would probably be better if we focused the user interface on using actual types rather than type ids. As such, this would probably be better done once we transition to using types as template parameters when doing this sort of thing internally.\n- Attaching a template specifying a condition showing when to include a given set of types proved to be useful internally, we should probably make that functionality a part of a public interface as well.\n\n`new_make_all` and `make_all_if` are the interfaces we use for this internally right now. I'm pretty sure we could build something better for users on top of that though.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1194", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/1194/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/1194/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/1194/events", "html_url": "https://github.com/libdynd/libdynd/pull/1194", "id": 154288575, "number": 1194, "title": "Simplify compile-time if", "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-05-11T16:39:10Z", "updated_at": "2016-05-11T16:39:10Z", "closed_at": null, "author_association": "OWNER", "pull_request": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/1194", "html_url": "https://github.com/libdynd/libdynd/pull/1194", "diff_url": "https://github.com/libdynd/libdynd/pull/1194.diff", "patch_url": "https://github.com/libdynd/libdynd/pull/1194.patch"}, "body": "Simplify make_all_if by using std::tuple and generic lambdas rather than a\nproxy template to perform the compile-time if statement.\n\nCurrently doesn't work with gcc or clang. The errors thrown are completely different in each case. I'm not sure if it's bugs in the compilers or an issue with my implementation. This approach works across all compilers in simpler cases. I'm putting this here for the next time we end up revisiting our metaprogramming code. If nothing else, it shows a useful technique.\n\nConceptually, this works because generic lambdas are represented as instances of anonymous classes with templated call operators. This means that the code inside each lambda should only be instantiated when the given lambda is called with concrete types. A compile-time if statement can be performed by writing the different generic lambdas needed, putting them in a std::tuple, and then using std::get to get the appropriate lambda to call. I haven't verified that this works with lambdas that capture things from the surrounding scope, but that's not a huge deal since none of the lambdas involved actually need to be called outside their surrounding scope, so any needed contextual information can be passed in the function parameters to the lambdas.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1153", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/1153/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/1153/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/1153/events", "html_url": "https://github.com/libdynd/libdynd/pull/1153", "id": 148979406, "number": 1153, "title": "Added a type ID for escape option", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-04-17T18:29:12Z", "updated_at": "2016-04-17T19:30:34Z", "closed_at": null, "author_association": "OWNER", "pull_request": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/1153", "html_url": "https://github.com/libdynd/libdynd/pull/1153", "diff_url": "https://github.com/libdynd/libdynd/pull/1153.diff", "patch_url": "https://github.com/libdynd/libdynd/pull/1153.patch"}, "body": "", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1153/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1135", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/1135/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/1135/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/1135/events", "html_url": "https://github.com/libdynd/libdynd/issues/1135", "id": 147397786, "number": 1135, "title": "Alignment guarantees ", "user": {"login": "skrah", "id": 16530421, "avatar_url": "https://avatars1.githubusercontent.com/u/16530421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skrah", "html_url": "https://github.com/skrah", "followers_url": "https://api.github.com/users/skrah/followers", "following_url": "https://api.github.com/users/skrah/following{/other_user}", "gists_url": "https://api.github.com/users/skrah/gists{/gist_id}", "starred_url": "https://api.github.com/users/skrah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skrah/subscriptions", "organizations_url": "https://api.github.com/users/skrah/orgs", "repos_url": "https://api.github.com/users/skrah/repos", "events_url": "https://api.github.com/users/skrah/events{/privacy}", "received_events_url": "https://api.github.com/users/skrah/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-04-11T11:24:41Z", "updated_at": "2016-04-19T22:36:46Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body": "This came up while working on the PEP-3118 -> callable interface. PEP-3118 also allows quite complex structures, for example these two data type strings are equivalent:\n\n  PEP-3118:   `\"(2,3)ffZdT{B:x:(2,3)d:y:Q:z:}\"`\n  Datashape: `\"2 * 3 * (float32, float32, complex128, {x: uint8, y: 2 * 3 * float64, z: int64})\"`\n\nSo we need some guarantees that the alignment of the array described by the PEP-3118 string can be understood properly by DyND callables.\n\nDyND seems to try to align natively, but not always. Example:\n\n```\nstruct align1 {\n    uint8_t x;\n    __uint128_t y;\n    __uint128_t z;\n};\n```\n\ngcc and clang align `[0, 16, 32]`, DyND aligns `[0, 8, 24]`.\n\nAre the DyND alignment rules (especially for arbitrarily nested structs/tuples) documented?\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1124", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/1124/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/1124/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/1124/events", "html_url": "https://github.com/libdynd/libdynd/issues/1124", "id": 146402233, "number": 1124, "title": "Documentation for DyND ndt and datashape", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-04-06T18:53:21Z", "updated_at": "2016-04-06T19:49:03Z", "closed_at": null, "author_association": "OWNER", "body": "This is an issue to have a discussion about @skrah's documentation: http://www.bytereef.org/1112730/datashape/build/html/index.html. Pinging @insertinterestingnamehere @mwiebe.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1122", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/1122/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/1122/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/1122/events", "html_url": "https://github.com/libdynd/libdynd/issues/1122", "id": 146326116, "number": 1122, "title": "Power dimensions should allow whitespace ", "user": {"login": "skrah", "id": 16530421, "avatar_url": "https://avatars1.githubusercontent.com/u/16530421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skrah", "html_url": "https://github.com/skrah", "followers_url": "https://api.github.com/users/skrah/followers", "following_url": "https://api.github.com/users/skrah/following{/other_user}", "gists_url": "https://api.github.com/users/skrah/gists{/gist_id}", "starred_url": "https://api.github.com/users/skrah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skrah/subscriptions", "organizations_url": "https://api.github.com/users/skrah/orgs", "repos_url": "https://api.github.com/users/skrah/repos", "events_url": "https://api.github.com/users/skrah/events{/privacy}", "received_events_url": "https://api.github.com/users/skrah/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-04-06T14:11:07Z", "updated_at": "2016-04-06T15:44:38Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body": "This is very low priority, but I think power dimensions should allow whitespace:\n\n```\n>>> ndt.type(\"128**10 * float32\")\nndt.type('128 * 128 * 128 * 128 * 128 * 128 * 128 * 128 * 128 * 128 * float32')\n```\n\n```\n>>> ndt.type(\"128 ** 10 * float32\")\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"dynd/ndt/type.pyx\", line 141, in dynd.ndt.type.type.__init__ (/home/stefan/dynd-python/build/temp.linux-x86_64-3.6/dynd/ndt/type.cxx:1550)\n  File \"dynd/ndt/type.pyx\", line 377, in dynd.ndt.type.as_cpp_type (/home/stefan/dynd-python/build/temp.linux-x86_64-3.6/dynd/ndt/type.cxx:4420)\nRuntimeError: Error parsing datashape at line 1, column 7\nMessage: expected a number or a typevar symbol\n128 ** 10 * float32\n```\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1116", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/1116/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/1116/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/1116/events", "html_url": "https://github.com/libdynd/libdynd/issues/1116", "id": 145677987, "number": 1116, "title": "Named ellipsis match fails", "user": {"login": "skrah", "id": 16530421, "avatar_url": "https://avatars1.githubusercontent.com/u/16530421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skrah", "html_url": "https://github.com/skrah", "followers_url": "https://api.github.com/users/skrah/followers", "following_url": "https://api.github.com/users/skrah/following{/other_user}", "gists_url": "https://api.github.com/users/skrah/gists{/gist_id}", "starred_url": "https://api.github.com/users/skrah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skrah/subscriptions", "organizations_url": "https://api.github.com/users/skrah/orgs", "repos_url": "https://api.github.com/users/skrah/repos", "events_url": "https://api.github.com/users/skrah/events{/privacy}", "received_events_url": "https://api.github.com/users/skrah/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-04-04T13:02:44Z", "updated_at": "2016-04-04T15:52:22Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body": "As I understand it, both of these should work:\n\n```\n>>> ndt.type(\"... * float64\").match(ndt.type(\"10 * N * float64\"))\nTrue\n```\n\n```\n>>> ndt.type(\"Dim... * float64\").match(ndt.type(\"10 * N * float64\"))\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"dynd/ndt/type.pyx\", line 289, in dynd.ndt.type.type.match (/home/stefan/dynd-python/build/temp.linux-x86_64-3.6/dynd/ndt/type.cxx:2982)\nTypeError: dim_fragment_type failed to get shape from type 10 * N * float64\n>>> \n```\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1114", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/1114/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/1114/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/1114/events", "html_url": "https://github.com/libdynd/libdynd/issues/1114", "id": 145521957, "number": 1114, "title": "Unexpected symbolic dimension match", "user": {"login": "skrah", "id": 16530421, "avatar_url": "https://avatars1.githubusercontent.com/u/16530421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skrah", "html_url": "https://github.com/skrah", "followers_url": "https://api.github.com/users/skrah/followers", "following_url": "https://api.github.com/users/skrah/following{/other_user}", "gists_url": "https://api.github.com/users/skrah/gists{/gist_id}", "starred_url": "https://api.github.com/users/skrah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skrah/subscriptions", "organizations_url": "https://api.github.com/users/skrah/orgs", "repos_url": "https://api.github.com/users/skrah/repos", "events_url": "https://api.github.com/users/skrah/events{/privacy}", "received_events_url": "https://api.github.com/users/skrah/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-04-03T17:36:09Z", "updated_at": "2016-04-04T15:29:14Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body": "If symbolic types are quantifier-free, I'd expect this to return false:\n\n```\n>>> ndt.type(\"N * float64\").match(ndt.type(\"M * float64\"))\nTrue\n```\n\nOr is the above is a shorthand for `forall M:  M elt nat => M * float64 elt {N * float64 | N elt nat}`?\n\nIn words: For all natural numbers `M`, the type `M * float64` is an element of the set {all types `N * float64` such that `N` is a natural number}.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1114/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1104", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/1104/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/1104/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/1104/events", "html_url": "https://github.com/libdynd/libdynd/issues/1104", "id": 145130037, "number": 1104, "title": "Valgrind startup times", "user": {"login": "skrah", "id": 16530421, "avatar_url": "https://avatars1.githubusercontent.com/u/16530421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skrah", "html_url": "https://github.com/skrah", "followers_url": "https://api.github.com/users/skrah/followers", "following_url": "https://api.github.com/users/skrah/following{/other_user}", "gists_url": "https://api.github.com/users/skrah/gists{/gist_id}", "starred_url": "https://api.github.com/users/skrah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skrah/subscriptions", "organizations_url": "https://api.github.com/users/skrah/orgs", "repos_url": "https://api.github.com/users/skrah/repos", "events_url": "https://api.github.com/users/skrah/events{/privacy}", "received_events_url": "https://api.github.com/users/skrah/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-04-01T09:16:17Z", "updated_at": "2016-04-01T13:39:21Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body": "Something in the declfunc changes has caused Valgrind runs to be very slow here.\nThe main problem is that Valgrind now has a _huge_ startup time in the order of\n2 min -- once the tests begin to run, everything seems normal.\n\nIt isn't a gtest issue: The startup time is the same when debugging dynd-python.\n\nI don't have the exact revision yet (bisecting is quite slow), but I've narrowed\nit down a bit:\n## Linux/clang-3.6\n## Build\n\nexport CC=clang &&\nexport CXX=clang++ &&\nexport CXXFLAGS=\"-stdlib=libc++\"\n\nmkdir build &&\ncd build &&\ncmake -DCMAKE_BUILD_TYPE=debug ..\n## Good Timings\n\ngit checkout 26b44a5a992161c2a3bd7d88b6e7b01ce803db75\nmake\ntime valgrind ./tests/test_libdynd\n\nreal    1m35.131s\nuser    1m32.928s\nsys     0m0.732s\n## Not so good timings\n\ngit checkout baab998862ea94f349899e8c7bc4d0271882cff9\nmake\ntime valgrind ./tests/test_libdynd\n\nreal    3m8.863s\nuser    3m6.669s\nsys     0m0.868s\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1037", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/1037/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/1037/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/1037/events", "html_url": "https://github.com/libdynd/libdynd/pull/1037", "id": 141966305, "number": 1037, "title": "Added sparsehash as a header-only library", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-03-18T20:12:52Z", "updated_at": "2016-03-18T21:24:04Z", "closed_at": null, "author_association": "OWNER", "pull_request": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/1037", "html_url": "https://github.com/libdynd/libdynd/pull/1037", "diff_url": "https://github.com/libdynd/libdynd/pull/1037.diff", "patch_url": "https://github.com/libdynd/libdynd/pull/1037.patch"}, "body": "", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1036", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/1036/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/1036/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/1036/events", "html_url": "https://github.com/libdynd/libdynd/pull/1036", "id": 141919424, "number": 1036, "title": "[WIP] Adding Google sparsehash as a thirdparty library", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-03-18T16:42:06Z", "updated_at": "2016-03-18T19:34:02Z", "closed_at": null, "author_association": "OWNER", "pull_request": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/1036", "html_url": "https://github.com/libdynd/libdynd/pull/1036", "diff_url": "https://github.com/libdynd/libdynd/pull/1036.diff", "patch_url": "https://github.com/libdynd/libdynd/pull/1036.patch"}, "body": "", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1036/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1035", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/1035/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/1035/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/1035/events", "html_url": "https://github.com/libdynd/libdynd/issues/1035", "id": 141484185, "number": 1035, "title": "Building benchmark ?", "user": {"login": "nyue", "id": 486172, "avatar_url": "https://avatars2.githubusercontent.com/u/486172?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nyue", "html_url": "https://github.com/nyue", "followers_url": "https://api.github.com/users/nyue/followers", "following_url": "https://api.github.com/users/nyue/following{/other_user}", "gists_url": "https://api.github.com/users/nyue/gists{/gist_id}", "starred_url": "https://api.github.com/users/nyue/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nyue/subscriptions", "organizations_url": "https://api.github.com/users/nyue/orgs", "repos_url": "https://api.github.com/users/nyue/repos", "events_url": "https://api.github.com/users/nyue/events{/privacy}", "received_events_url": "https://api.github.com/users/nyue/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2016-03-17T05:23:42Z", "updated_at": "2016-03-21T20:27:04Z", "closed_at": null, "author_association": "NONE", "body": "I would like to build the benchmarks.\n\nWhere can I obtain more information about the pre-requisite and build instruction for libdynd to build with benchmarking ?\n\nCheers\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1022", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/1022/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/1022/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/1022/events", "html_url": "https://github.com/libdynd/libdynd/pull/1022", "id": 139694330, "number": 1022, "title": "Fix invalid access.", "user": {"login": "skrah", "id": 16530421, "avatar_url": "https://avatars1.githubusercontent.com/u/16530421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skrah", "html_url": "https://github.com/skrah", "followers_url": "https://api.github.com/users/skrah/followers", "following_url": "https://api.github.com/users/skrah/following{/other_user}", "gists_url": "https://api.github.com/users/skrah/gists{/gist_id}", "starred_url": "https://api.github.com/users/skrah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skrah/subscriptions", "organizations_url": "https://api.github.com/users/skrah/orgs", "repos_url": "https://api.github.com/users/skrah/repos", "events_url": "https://api.github.com/users/skrah/events{/privacy}", "received_events_url": "https://api.github.com/users/skrah/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-03-09T20:38:23Z", "updated_at": "2016-06-02T10:39:35Z", "closed_at": null, "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/1022", "html_url": "https://github.com/libdynd/libdynd/pull/1022", "diff_url": "https://github.com/libdynd/libdynd/pull/1022.diff", "patch_url": "https://github.com/libdynd/libdynd/pull/1022.patch"}, "body": "This fixes a valgrind error in the dynd tests.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/1022/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/985", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/985/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/985/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/985/events", "html_url": "https://github.com/libdynd/libdynd/issues/985", "id": 136230440, "number": 985, "title": "Questions about Dynd type system", "user": {"login": "datnamer", "id": 8646471, "avatar_url": "https://avatars1.githubusercontent.com/u/8646471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/datnamer", "html_url": "https://github.com/datnamer", "followers_url": "https://api.github.com/users/datnamer/followers", "following_url": "https://api.github.com/users/datnamer/following{/other_user}", "gists_url": "https://api.github.com/users/datnamer/gists{/gist_id}", "starred_url": "https://api.github.com/users/datnamer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/datnamer/subscriptions", "organizations_url": "https://api.github.com/users/datnamer/orgs", "repos_url": "https://api.github.com/users/datnamer/repos", "events_url": "https://api.github.com/users/datnamer/events{/privacy}", "received_events_url": "https://api.github.com/users/datnamer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2016-02-25T00:03:50Z", "updated_at": "2016-05-25T19:28:52Z", "closed_at": null, "author_association": "NONE", "body": "Hi Everyone, I've been following this discussion in #979 and I have some questions about Dynd's type system.\n\nHope its ok to open an issue for this, wasn't sure where else to post. \n\nI don't know much C++, but I was a bit confused by the muliple ways of describing data that Dynd seems to have.\n\nThere seems to be datashape/metadata, symbolic types, Concrete Types (analogous to class seems like), properties (ie T.real ), and @insertinterestingnamehere discussed including traits (I think this is great to facilitate lightweight abstractions for code reuse). \n- How do these all fit together and what is the separation of duties (abstraction, writing generic code, dispatch  etc)? \n- Also, Will we be able to define a Type so that its fields are typed as whatever data it is parameterized with?  \n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/969", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/969/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/969/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/969/events", "html_url": "https://github.com/libdynd/libdynd/issues/969", "id": 134993185, "number": 969, "title": "Reductions can fail on scalar values", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-02-19T22:39:50Z", "updated_at": "2016-02-19T22:39:50Z", "closed_at": null, "author_association": "OWNER", "body": "Reductions currently don't work with arrays of zero dimensions. They do, however, work for everything else.\n\nNot sure exactly where the error is.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/969/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/968", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/968/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/968/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/968/events", "html_url": "https://github.com/libdynd/libdynd/issues/968", "id": 134992826, "number": 968, "title": "Reductions have difficultly with non-builtin identity values", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-02-19T22:37:56Z", "updated_at": "2016-02-20T01:21:33Z", "closed_at": null, "author_association": "OWNER", "body": "Reductions in DyND currently work with an `identity` keyword argument. If an `identity` value is passed in, this value is assigned to the result. If no`identity` value is passed in, then the reduction assigns the first element of the input array to be the identity.\n\nWhile this works well in the case of simple operations like arithmetic, this fails when we have more complicated reductions like serialization. In that case, the signature is `(Dims... * Scalar) -> bytes`, and we can't assign values to bytes like that.\n\nSo we need a better way to handle identities and/or the initialization step of a reduction.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/953", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/953/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/953/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/953/events", "html_url": "https://github.com/libdynd/libdynd/issues/953", "id": 134370060, "number": 953, "title": "nd::equal and nd::not_equal do not work for struct types with array members", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-02-17T19:06:39Z", "updated_at": "2016-02-17T19:06:39Z", "closed_at": null, "author_association": "OWNER", "body": "This is because they are using `nd::equal` as the child (which is elementwise), rather then something like `nd::all_equal` (which would just return a bool). I'll work on fixing this.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/950", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/950/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/950/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/950/events", "html_url": "https://github.com/libdynd/libdynd/issues/950", "id": 134131811, "number": 950, "title": "Ideas for missing values implementation", "user": {"login": "datnamer", "id": 8646471, "avatar_url": "https://avatars1.githubusercontent.com/u/8646471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/datnamer", "html_url": "https://github.com/datnamer", "followers_url": "https://api.github.com/users/datnamer/followers", "following_url": "https://api.github.com/users/datnamer/following{/other_user}", "gists_url": "https://api.github.com/users/datnamer/gists{/gist_id}", "starred_url": "https://api.github.com/users/datnamer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/datnamer/subscriptions", "organizations_url": "https://api.github.com/users/datnamer/orgs", "repos_url": "https://api.github.com/users/datnamer/repos", "events_url": "https://api.github.com/users/datnamer/events{/privacy}", "received_events_url": "https://api.github.com/users/datnamer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-02-16T23:58:19Z", "updated_at": "2016-02-16T23:59:46Z", "closed_at": null, "author_association": "NONE", "body": "Based on experience with their dynamic data structures, the Julia folks have thought a lot about an efficient and type stable missing value representation. I think that especially with the potential GSOC project, a glance at this work would be really helpful. \n\nThe last link also has some interesting thoughts on the   building of a broader scalable stats ecosystem. \n1. http://www.johnmyleswhite.com/notebook/2014/11/29/whats-wrong-with-statistics-in-julia/\n2. http://wizardmac.tumblr.com/post/104019606584/whats-wrong-with-statistics-in-julia-a-reply\n3. http://julialang.org/blog/2015/10/nullablearrays?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+JuliaLang+%28The+Julia+Blog%29\n4. http://juliacomputing.com/blog/2016/01/14/stats-roadmap.html\n\nMore recent thoughts have emerged suggesting a higher level API build on nullable due to its sometimes unwieldy semantics....or better compiler support for Union types so that data structures with NAs can support faster code. \n\n@mwiebe \n\nalso pinging @kwmsmith because this intersects with blaze's domain.  \n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/819", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/819/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/819/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/819/events", "html_url": "https://github.com/libdynd/libdynd/issues/819", "id": 122621826, "number": 819, "title": "Integration with Elemental, for Distributed-memory dense and sparse-direct linear algebra and optimization", "user": {"login": "datnamer", "id": 8646471, "avatar_url": "https://avatars1.githubusercontent.com/u/8646471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/datnamer", "html_url": "https://github.com/datnamer", "followers_url": "https://api.github.com/users/datnamer/followers", "following_url": "https://api.github.com/users/datnamer/following{/other_user}", "gists_url": "https://api.github.com/users/datnamer/gists{/gist_id}", "starred_url": "https://api.github.com/users/datnamer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/datnamer/subscriptions", "organizations_url": "https://api.github.com/users/datnamer/orgs", "repos_url": "https://api.github.com/users/datnamer/repos", "events_url": "https://api.github.com/users/datnamer/events{/privacy}", "received_events_url": "https://api.github.com/users/datnamer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-12-16T22:51:28Z", "updated_at": "2015-12-16T22:51:28Z", "closed_at": null, "author_association": "NONE", "body": "https://github.com/elemental/Elemental\n\nAlready has python bindings. \n\nHeres how Julia did it:\n\nhttps://github.com/JuliaParallel/DistributedArrays.jl\nhttps://github.com/JuliaParallel/Elemental.jl\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/776", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/776/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/776/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/776/events", "html_url": "https://github.com/libdynd/libdynd/issues/776", "id": 121538388, "number": 776, "title": "Use chrono and an external date library instead of having dynd's own date and time calculations", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-12-10T17:30:22Z", "updated_at": "2015-12-10T19:45:55Z", "closed_at": null, "author_association": "OWNER", "body": "The library https://github.com/HowardHinnant/date looks great for this, check out the CppCon talk https://www.youtube.com/watch?v=tzyGjOm8AKo if you have some time for it.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/776/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/689", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/689/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/689/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/689/events", "html_url": "https://github.com/libdynd/libdynd/issues/689", "id": 117510918, "number": 689, "title": "Different Language Binding", "user": {"login": "sirinath", "id": 637415, "avatar_url": "https://avatars2.githubusercontent.com/u/637415?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sirinath", "html_url": "https://github.com/sirinath", "followers_url": "https://api.github.com/users/sirinath/followers", "following_url": "https://api.github.com/users/sirinath/following{/other_user}", "gists_url": "https://api.github.com/users/sirinath/gists{/gist_id}", "starred_url": "https://api.github.com/users/sirinath/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sirinath/subscriptions", "organizations_url": "https://api.github.com/users/sirinath/orgs", "repos_url": "https://api.github.com/users/sirinath/repos", "events_url": "https://api.github.com/users/sirinath/events{/privacy}", "received_events_url": "https://api.github.com/users/sirinath/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-11-18T04:23:54Z", "updated_at": "2016-03-09T16:33:56Z", "closed_at": null, "author_association": "NONE", "body": "Can you consider different language bindings along with python version?\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/615", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/615/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/615/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/615/events", "html_url": "https://github.com/libdynd/libdynd/issues/615", "id": 113199227, "number": 615, "title": "Unums?", "user": {"login": "datnamer", "id": 8646471, "avatar_url": "https://avatars1.githubusercontent.com/u/8646471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/datnamer", "html_url": "https://github.com/datnamer", "followers_url": "https://api.github.com/users/datnamer/followers", "following_url": "https://api.github.com/users/datnamer/following{/other_user}", "gists_url": "https://api.github.com/users/datnamer/gists{/gist_id}", "starred_url": "https://api.github.com/users/datnamer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/datnamer/subscriptions", "organizations_url": "https://api.github.com/users/datnamer/orgs", "repos_url": "https://api.github.com/users/datnamer/repos", "events_url": "https://api.github.com/users/datnamer/events{/privacy}", "received_events_url": "https://api.github.com/users/datnamer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-10-25T01:41:31Z", "updated_at": "2015-10-25T01:41:31Z", "closed_at": null, "author_association": "NONE", "body": "@insertinterestingnamehere Some kinda of unum system may be relevant to this proposal : https://github.com/insertinterestingnamehere/libdynd/commit/effcf2cc3a64739e6773d6f88bf45ac74533c312 \n\nReally interesting benchmarks here: hhttps://github.com/tbreloff/Unums.jl/issues/6  \n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/613", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/613/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/613/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/613/events", "html_url": "https://github.com/libdynd/libdynd/issues/613", "id": 113099576, "number": 613, "title": "Wrong MinGW Install Location", "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-10-23T21:00:34Z", "updated_at": "2015-10-23T21:00:34Z", "closed_at": null, "author_association": "OWNER", "body": "(submitting as an issue partially to make sure I don't forget this) When building with the MSYS Makefiles generator on 64 bit Windows, libdynd is installed into the wrong location (\"C:/Program Files (x86)/libdynd\" as opposed to \"C:/Program Files/libdynd\"). At some point we need to make sure that when building a 64 bit. A simplified version of https://github.com/petroules/solar-cmake/blob/master/TargetArch.cmake that uses simpler preprocessor logic should be sufficient to detect the architecture.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/600", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/600/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/600/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/600/events", "html_url": "https://github.com/libdynd/libdynd/issues/600", "id": 111857948, "number": 600, "title": "libFLAME backend?", "user": {"login": "datnamer", "id": 8646471, "avatar_url": "https://avatars1.githubusercontent.com/u/8646471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/datnamer", "html_url": "https://github.com/datnamer", "followers_url": "https://api.github.com/users/datnamer/followers", "following_url": "https://api.github.com/users/datnamer/following{/other_user}", "gists_url": "https://api.github.com/users/datnamer/gists{/gist_id}", "starred_url": "https://api.github.com/users/datnamer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/datnamer/subscriptions", "organizations_url": "https://api.github.com/users/datnamer/orgs", "repos_url": "https://api.github.com/users/datnamer/repos", "events_url": "https://api.github.com/users/datnamer/events{/privacy}", "received_events_url": "https://api.github.com/users/datnamer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2015-10-16T15:46:31Z", "updated_at": "2015-12-17T13:52:54Z", "closed_at": null, "author_association": "NONE", "body": "http://www.cs.utexas.edu/~flame/web/libFLAME.html \n\nThis looks interesting. \n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/575", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/575/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/575/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/575/events", "html_url": "https://github.com/libdynd/libdynd/issues/575", "id": 109165680, "number": 575, "title": "Constructors from std::array and std::experimental::dynarray", "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-09-30T19:50:19Z", "updated_at": "2015-09-30T20:24:28Z", "closed_at": null, "author_association": "OWNER", "body": "The standard library has a few more array-like types. We should probably support constructing dynd::arrays from them.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/575/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/566", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/566/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/566/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/566/events", "html_url": "https://github.com/libdynd/libdynd/issues/566", "id": 108251370, "number": 566, "title": "Remove unnecessary flags.", "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2015-09-25T02:38:32Z", "updated_at": "2015-09-25T15:38:33Z", "closed_at": null, "author_association": "OWNER", "body": "Looking at the different array flags we have available, several things are unclear to me.\n\nWhy do we have a readable flag? Wouldn't a non-readable be useless? (see also [write-only memory](http://repeater-builder.com/molotora/gontor/25120-bw.pdf)).\n\nWhat is the difference between immutability and non-writability? The two seem identical to me in practice.\n\nIn light of the ambiguity, I propose that we remove the readable and immutable flag values..\n\nOn that note, what are the compelling reasons to keep the writable flag? The only times I can see them being really helpful for users are deprecations (as numpy did with numpy.diagonal), debugging, and ownership (which, IMHO, should be dealt with via copies).\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/564", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/564/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/564/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/564/events", "html_url": "https://github.com/libdynd/libdynd/issues/564", "id": 108186476, "number": 564, "title": "DyND To-do List", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-09-24T18:23:39Z", "updated_at": "2015-12-14T23:10:33Z", "closed_at": null, "author_association": "OWNER", "body": "We still have some way to go before DyND is really feature-complete, but we are closing that gap reasonably quickly now. Here is a place to list the things we need to do over the next little while.\n- Add missing kind types like \"Dim\"\n- Implement strings as per @mwiebe's proposal at https://github.com/libdynd/libdynd/blob/master/docs/string-design.md\n- Write an iterator for DyND array elements. We already have an iterator that @mwiebe wrote, and DyND's model for computation is that one shouldn't really use iterators, but we still need one internally. Especially for 1D arrays. \n- Complete option operations (@cpcloud did much of this already)\n- Add kernels that can return views\n- Add basic missing operations (linear algebra, statistics, etc) -- I don't want us to spend too much time on this unless we are sure we need the operation\n- Fix CUDA support*\n- Add LLVM-based composability*\n- Numba integration for dimension types (maybe this should wait until after LLVM-composability?)\n- Use Intel MKL for FFT instead of FFTW\n- A lightweight NumPy-compatibility module (@jreback, among many others, would love this)\n- Benchmark, benchmark, benchmark -- we already have Google Benchmark included, so we just need to write some!\n- Add user-defined types from Python (first need to merge @izaid's and @mwiebe's PRs)\n- Split out the datashape parser\n- Fix Windows issues (@insertinterestingnamehere is on it)\n- Dask interoperability (@mrocklin will probably do it)\n\nA \\* means this is a back-burner issue and probably shouldn't be tackled now\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/563", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/563/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/563/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/563/events", "html_url": "https://github.com/libdynd/libdynd/issues/563", "id": 108058646, "number": 563, "title": "More Constructors", "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-09-24T04:58:11Z", "updated_at": "2015-09-24T04:58:11Z", "closed_at": null, "author_association": "OWNER", "body": "It would be nice to have some attributes of an array specifiable as keyword arguments to the array constructor. The read/write attribute is the first one that comes to mind. We could also allow users to specify a datashape and then broadcast the input into an array with the specified datashape.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/563/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/561", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/561/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/561/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/561/events", "html_url": "https://github.com/libdynd/libdynd/pull/561", "id": 107445085, "number": 561, "title": "Turn zeros and ones into kernels", "user": {"login": "cpcloud", "id": 417981, "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpcloud", "html_url": "https://github.com/cpcloud", "followers_url": "https://api.github.com/users/cpcloud/followers", "following_url": "https://api.github.com/users/cpcloud/following{/other_user}", "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions", "organizations_url": "https://api.github.com/users/cpcloud/orgs", "repos_url": "https://api.github.com/users/cpcloud/repos", "events_url": "https://api.github.com/users/cpcloud/events{/privacy}", "received_events_url": "https://api.github.com/users/cpcloud/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2015-09-21T05:03:18Z", "updated_at": "2015-10-26T00:06:08Z", "closed_at": null, "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/561", "html_url": "https://github.com/libdynd/libdynd/pull/561", "diff_url": "https://github.com/libdynd/libdynd/pull/561.diff", "patch_url": "https://github.com/libdynd/libdynd/pull/561.patch"}, "body": null, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/559", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/559/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/559/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/559/events", "html_url": "https://github.com/libdynd/libdynd/issues/559", "id": 107413358, "number": 559, "title": "odd semantics of is_avail", "user": {"login": "jreback", "id": 953992, "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jreback", "html_url": "https://github.com/jreback", "followers_url": "https://api.github.com/users/jreback/followers", "following_url": "https://api.github.com/users/jreback/following{/other_user}", "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}", "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jreback/subscriptions", "organizations_url": "https://api.github.com/users/jreback/orgs", "repos_url": "https://api.github.com/users/jreback/repos", "events_url": "https://api.github.com/users/jreback/events{/privacy}", "received_events_url": "https://api.github.com/users/jreback/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-09-20T19:45:37Z", "updated_at": "2015-09-20T19:47:04Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body": "#554 adds `is_avail` and in theory issue: https://github.com/libdynd/dynd-python/issues/349, but\n\n```\nIn [10]: arr1 = nd.array([1,2,3],dtype='?int32')\n\nIn [11]: arr2 = nd.array([1,2,3],dtype='int32')\n\nIn [12]: nd.take(arr1,nd.is_avail(arr1))\nOut[12]: \nnd.array([1, 2, 3],\n         type=\"var * ?int32\")\n\nIn [13]: nd.take(arr2,nd.is_avail(arr2))\n---------------------------------------------------------------------------\nRuntimeError                              Traceback (most recent call last)\n<ipython-input-13-0750c1f3bc13> in <module>()\n----> 1 nd.take(arr2,nd.is_avail(arr2))\n\ndynd/nd/callable.pyx in dynd.nd.callable.callable.__call__ (/Users/travis/build/libdynd/dynd-python/build/temp.macosx-10.5-x86_64-2.7/callable.cxx:786)()\n\nRuntimeError: no child found\n\n```\n\nthis should simply return a boolean array of all `True` on a non-supported dtype rather than raising. This forces the user to introspect the dtype a-priori to every indexing operation. This is a very odd semantic.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/545", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/545/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/545/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/545/events", "html_url": "https://github.com/libdynd/libdynd/issues/545", "id": 106445086, "number": 545, "title": "COMPAT: nd.empty", "user": {"login": "jreback", "id": 953992, "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jreback", "html_url": "https://github.com/jreback", "followers_url": "https://api.github.com/users/jreback/followers", "following_url": "https://api.github.com/users/jreback/following{/other_user}", "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}", "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jreback/subscriptions", "organizations_url": "https://api.github.com/users/jreback/orgs", "repos_url": "https://api.github.com/users/jreback/repos", "events_url": "https://api.github.com/users/jreback/events{/privacy}", "received_events_url": "https://api.github.com/users/jreback/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2015-09-14T23:03:53Z", "updated_at": "2015-09-15T00:37:18Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body": "`dynd: eacabc4 [54b7eac]` (dynd & libdynd), same versions I have been using\n\n```\nIn [5]: np.empty((2,5),dtype='int64')\nOut[5]: \narray([[         0,          0, 4424794129, 4424451248, 4424892568],\n       [4424451528,          0,          0, 4419479936,          0]])\n```\n\n```\nIn [6]: nd.empty((2,5),dtype='int64')\nTypeError: nd.empty() got an unexpected keyword argument 'dtype'\n\nIn [7]: nd.empty((2,5))\nTypeError: could not convert the object (2, 5) into a dynd type\n```\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/483", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/483/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/483/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/483/events", "html_url": "https://github.com/libdynd/libdynd/issues/483", "id": 99708390, "number": 483, "title": "Additional Testing Environments", "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-08-07T19:00:28Z", "updated_at": "2015-08-07T19:00:28Z", "closed_at": null, "author_association": "OWNER", "body": "Gcc 4.7 is a few years old now, so we may want to consider moving some of the current CI tests to a newer version. It may also be wise to start testing dynd-python on Python 3.5. Is that something we'd like to do?\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/483/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/469", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/469/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/469/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/469/events", "html_url": "https://github.com/libdynd/libdynd/issues/469", "id": 97532251, "number": 469, "title": "msvc 2015 test failure", "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-07-27T19:04:52Z", "updated_at": "2015-07-27T19:24:04Z", "closed_at": null, "author_association": "OWNER", "body": "There is currently one test failure when using msvc 2015.\n\n```\nC:\\Users\\Owner\\libdynd\\tests\\test_integer_sequence.cpp(58): error: Value of: (is\n_same<typename outer<integer_sequence<TypeParam, 0, 1>, integer_sequence<TypePar\nam, 2>>::type, type_sequence<integer_sequence<TypeParam, 0, 2>, integer_sequence\n<TypeParam, 1, 2>>>::value)\n  Actual: false\nExpected: true\nC:\\Users\\Owner\\libdynd\\tests\\test_integer_sequence.cpp(66): error: Value of: (is\n_same<typename outer<integer_sequence<TypeParam, 0, 1>, integer_sequence<TypePar\nam, 2, 3>>::type, type_sequence<integer_sequence<TypeParam, 0, 2>, integer_seque\nnce<TypeParam, 0, 3>, integer_sequence<TypeParam, 1, 2>, integer_sequence<TypePa\nram, 1, 3>>>::value)\n  Actual: false\nExpected: true\nC:\\Users\\Owner\\libdynd\\tests\\test_integer_sequence.cpp(75): error: Value of: (is\n_same< typename outer<integer_sequence<TypeParam, 0, 1>, integer_sequence<TypePa\nram, 2, 3, 4>>::type, type_sequence< integer_sequence<TypeParam, 0, 2>, integer_\nsequence<TypeParam, 0, 3>, integer_sequence<TypeParam, 0, 4>, integer_sequence<T\nypeParam, 1, 2>, integer_sequence<TypeParam, 1, 3>, integer_sequence<TypeParam,\n1, 4>>>::value)\n  Actual: false\nExpected: true\nC:\\Users\\Owner\\libdynd\\tests\\test_integer_sequence.cpp(84): error: Value of: (is\n_same< typename outer<integer_sequence<TypeParam, 0, 1, 2>, integer_sequence<Typ\neParam, 3, 4>>::type, type_sequence< integer_sequence<TypeParam, 0, 3>, integer_\nsequence<TypeParam, 0, 4>, integer_sequence<TypeParam, 1, 3>, integer_sequence<T\nypeParam, 1, 4>, integer_sequence<TypeParam, 2, 3>, integer_sequence<TypeParam,\n2, 4>>>::value)\n  Actual: false\nExpected: true\nC:\\Users\\Owner\\libdynd\\tests\\test_integer_sequence.cpp(102): error: Value of: (i\ns_same< typename outer<integer_sequence<TypeParam, 0, 1, 2, 3, 4>, integer_seque\nnce<TypeParam, 5, 6, 7, 8, 9>>::type, type_sequence< integer_sequence<TypeParam,\n 0, 5>, integer_sequence<TypeParam, 0, 6>, integer_sequence<TypeParam, 0, 7>, in\nteger_sequence<TypeParam, 0, 8>, integer_sequence<TypeParam, 0, 9>, integer_sequ\nence<TypeParam, 1, 5>, integer_sequence<TypeParam, 1, 6>, integer_sequence<TypeP\naram, 1, 7>, integer_sequence<TypeParam, 1, 8>, integer_sequence<TypeParam, 1, 9\n>, integer_sequence<TypeParam, 2, 5>, integer_sequence<TypeParam, 2, 6>, integer\n_sequence<TypeParam, 2, 7>, integer_sequence<TypeParam, 2, 8>, integer_sequence<\nTypeParam, 2, 9>, integer_sequence<TypeParam, 3, 5>, integer_sequence<TypeParam,\n 3, 6>, integer_sequence<TypeParam, 3, 7>, integer_sequence<TypeParam, 3, 8>, in\nteger_sequence<TypeParam, 3, 9>, integer_sequence<TypeParam, 4, 5>, integer_sequ\nence<TypeParam, 4, 6>, integer_sequence<TypeParam, 4, 7>, integer_sequence<TypeP\naram, 4, 8>, integer_sequence<TypeParam, 4, 9>>>::value)\n  Actual: false\nExpected: true\nC:\\Users\\Owner\\libdynd\\tests\\test_integer_sequence.cpp(120): error: Value of: (i\ns_same<typename outer<integer_sequence<TypeParam, 0, 1>, integer_sequence<TypePa\nram, 2>, integer_sequence<TypeParam, 3, 4>>::type, type_sequence<integer_sequenc\ne<TypeParam, 0, 2, 3>, integer_sequence<TypeParam, 0, 2, 4>, integer_sequence<Ty\npeParam, 1, 2, 3>, integer_sequence<TypeParam, 1, 2, 4>>>::value)\n  Actual: false\nExpected: true\nC:\\Users\\Owner\\libdynd\\tests\\test_integer_sequence.cpp(129): error: Value of: (i\ns_same<typename outer<integer_sequence<TypeParam, 0, 1>, integer_sequence<TypePa\nram, 2, 3>, integer_sequence<TypeParam, 4>>::type, type_sequence<integer_sequenc\ne<TypeParam, 0, 2, 4>, integer_sequence<TypeParam, 0, 3, 4>, integer_sequence<Ty\npeParam, 1, 2, 4>, integer_sequence<TypeParam, 1, 3, 4>>>::value)\n  Actual: false\nExpected: true\nC:\\Users\\Owner\\libdynd\\tests\\test_integer_sequence.cpp(142): error: Value of: (i\ns_same<typename outer<integer_sequence<TypeParam, 0, 1>, integer_sequence<TypePa\nram, 2, 3>, integer_sequence<TypeParam, 4, 5>>::type, type_sequence<integer_sequ\nence<TypeParam, 0, 2, 4>, integer_sequence<TypeParam, 0, 2, 5>, integer_sequence\n<TypeParam, 0, 3, 4>, integer_sequence<TypeParam, 0, 3, 5>, integer_sequence<Typ\neParam, 1, 2, 4>, integer_sequence<TypeParam, 1, 2, 5>, integer_sequence<TypePar\nam, 1, 3, 4>, integer_sequence<TypeParam, 1, 3, 5>>>::value)\n  Actual: false\nExpected: true\nC:\\Users\\Owner\\libdynd\\tests\\test_integer_sequence.cpp(159): error: Value of: (i\ns_same<typename outer<integer_sequence<TypeParam, 0, 1, 2>, integer_sequence<Typ\neParam, 3, 4>, integer_sequence<TypeParam, 5, 6>>::type, type_sequence<integer_s\nequence<TypeParam, 0, 3, 5>, integer_sequence<TypeParam, 0, 3, 6>, integer_seque\nnce<TypeParam, 0, 4, 5>, integer_sequence<TypeParam, 0, 4, 6>, integer_sequence<\nTypeParam, 1, 3, 5>, integer_sequence<TypeParam, 1, 3, 6>, integer_sequence<Type\nParam, 1, 4, 5>, integer_sequence<TypeParam, 1, 4, 6>, integer_sequence<TypePara\nm, 2, 3, 5>, integer_sequence<TypeParam, 2, 3, 6>, integer_sequence<TypeParam, 2\n, 4, 5>, integer_sequence<TypeParam, 2, 4, 6>>>::value)\n  Actual: false\nExpected: true\nC:\\Users\\Owner\\libdynd\\tests\\test_integer_sequence.cpp(176): error: Value of: (i\ns_same<typename outer<integer_sequence<TypeParam, 0, 1>, integer_sequence<TypePa\nram, 2, 3, 4>, integer_sequence<TypeParam, 5, 6>>::type, type_sequence<integer_s\nequence<TypeParam, 0, 2, 5>, integer_sequence<TypeParam, 0, 2, 6>, integer_seque\nnce<TypeParam, 0, 3, 5>, integer_sequence<TypeParam, 0, 3, 6>, integer_sequence<\nTypeParam, 0, 4, 5>, integer_sequence<TypeParam, 0, 4, 6>, integer_sequence<Type\nParam, 1, 2, 5>, integer_sequence<TypeParam, 1, 2, 6>, integer_sequence<TypePara\nm, 1, 3, 5>, integer_sequence<TypeParam, 1, 3, 6>, integer_sequence<TypeParam, 1\n, 4, 5>, integer_sequence<TypeParam, 1, 4, 6>>>::value)\n  Actual: false\nExpected: true\nC:\\Users\\Owner\\libdynd\\tests\\test_integer_sequence.cpp(193): error: Value of: (i\ns_same<typename outer<integer_sequence<TypeParam, 0, 1>, integer_sequence<TypePa\nram, 2, 3>, integer_sequence<TypeParam, 4, 5, 6>>::type, type_sequence<integer_s\nequence<TypeParam, 0, 2, 4>, integer_sequence<TypeParam, 0, 2, 5>, integer_seque\nnce<TypeParam, 0, 2, 6>, integer_sequence<TypeParam, 0, 3, 4>, integer_sequence<\nTypeParam, 0, 3, 5>, integer_sequence<TypeParam, 0, 3, 6>, integer_sequence<Type\nParam, 1, 2, 4>, integer_sequence<TypeParam, 1, 2, 5>, integer_sequence<TypePara\nm, 1, 2, 6>, integer_sequence<TypeParam, 1, 3, 4>, integer_sequence<TypeParam, 1\n, 3, 5>, integer_sequence<TypeParam, 1, 3, 6>>>::value)\n  Actual: false\nExpected: true\nC:\\Users\\Owner\\libdynd\\tests\\test_integer_sequence.cpp(215): error: Value of: (i\ns_same<typename outer<integer_sequence<TypeParam, 0, 1>, integer_sequence<TypePa\nram, 2, 3>, integer_sequence<TypeParam, 4, 5>, integer_sequence<TypeParam, 6, 7>\n>::type, type_sequence<integer_sequence<TypeParam, 0, 2, 4, 6>, integer_sequence\n<TypeParam, 0, 2, 4, 7>, integer_sequence<TypeParam, 0, 2, 5, 6>, integer_sequen\nce<TypeParam, 0, 2, 5, 7>, integer_sequence<TypeParam, 0, 3, 4, 6>, integer_sequ\nence<TypeParam, 0, 3, 4, 7>, integer_sequence<TypeParam, 0, 3, 5, 6>, integer_se\nquence<TypeParam, 0, 3, 5, 7>, integer_sequence<TypeParam, 1, 2, 4, 6>, integer_\nsequence<TypeParam, 1, 2, 4, 7>, integer_sequence<TypeParam, 1, 2, 5, 6>, intege\nr_sequence<TypeParam, 1, 2, 5, 7>, integer_sequence<TypeParam, 1, 3, 4, 6>, inte\nger_sequence<TypeParam, 1, 3, 4, 7>, integer_sequence<TypeParam, 1, 3, 5, 6>, in\nteger_sequence<TypeParam, 1, 3, 5, 7>>>::value)\n  Actual: false\nExpected: true\nC:\\Users\\Owner\\libdynd\\tests\\test_integer_sequence.cpp(253): error: Value of: (i\ns_same< typename outer< integer_sequence<TypeParam, 0, 1>, integer_sequence<Type\nParam, 2, 3>, integer_sequence<TypeParam, 4, 5>, integer_sequence<TypeParam, 6,\n7>, integer_sequence<TypeParam, 8, 9>>::type, type_sequence<integer_sequence<Typ\neParam, 0, 2, 4, 6, 8>, integer_sequence<TypeParam, 0, 2, 4, 6, 9>, integer_sequ\nence<TypeParam, 0, 2, 4, 7, 8>, integer_sequence<TypeParam, 0, 2, 4, 7, 9>, inte\nger_sequence<TypeParam, 0, 2, 5, 6, 8>, integer_sequence<TypeParam, 0, 2, 5, 6,\n9>, integer_sequence<TypeParam, 0, 2, 5, 7, 8>, integer_sequence<TypeParam, 0, 2\n, 5, 7, 9>, integer_sequence<TypeParam, 0, 3, 4, 6, 8>, integer_sequence<TypePar\nam, 0, 3, 4, 6, 9>, integer_sequence<TypeParam, 0, 3, 4, 7, 8>, integer_sequence\n<TypeParam, 0, 3, 4, 7, 9>, integer_sequence<TypeParam, 0, 3, 5, 6, 8>, integer_\nsequence<TypeParam, 0, 3, 5, 6, 9>, integer_sequence<TypeParam, 0, 3, 5, 7, 8>,\ninteger_sequence<TypeParam, 0, 3, 5, 7, 9>, integer_sequence<TypeParam, 1, 2, 4,\n 6, 8>, integer_sequence<TypeParam, 1, 2, 4, 6, 9>, integer_sequence<TypeParam,\n1, 2, 4, 7, 8>, integer_sequence<TypeParam, 1, 2, 4, 7, 9>, integer_sequence<Typ\neParam, 1, 2, 5, 6, 8>, integer_sequence<TypeParam, 1, 2, 5, 6, 9>, integer_sequ\nence<TypeParam, 1, 2, 5, 7, 8>, integer_sequence<TypeParam, 1, 2, 5, 7, 9>, inte\nger_sequence<TypeParam, 1, 3, 4, 6, 8>, integer_sequence<TypeParam, 1, 3, 4, 6,\n9>, integer_sequence<TypeParam, 1, 3, 4, 7, 8>, integer_sequence<TypeParam, 1, 3\n, 4, 7, 9>, integer_sequence<TypeParam, 1, 3, 5, 6, 8>, integer_sequence<TypePar\nam, 1, 3, 5, 6, 9>, integer_sequence<TypeParam, 1, 3, 5, 7, 8>, integer_sequence\n<TypeParam, 1, 3, 5, 7, 9>>>::value)\n  Actual: false\nExpected: true\n[  FAILED  ] SizeType/IntegerSequence/0.Outer, where TypeParam = unsigned __int6\n4 (16 ms)\n```\n\nIt looks like the template `outer` that takes the cartesian product between the two integer sequences isn't working properly. I haven't debugged it farther than that yet.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/422", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/422/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/422/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/422/events", "html_url": "https://github.com/libdynd/libdynd/issues/422", "id": 92146851, "number": 422, "title": "Test MSVC fenv_access, enable for fixed versions", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-06-30T17:10:24Z", "updated_at": "2015-06-30T17:10:24Z", "closed_at": null, "author_association": "OWNER", "body": "The issue https://connect.microsoft.com/VisualStudio/feedback/details/1043829/32-bit-x86-compiler-performs-invalid-reordering-violating-pragma-fenv-access-on-request is marked resolved as fixed. Should test this and update the code when MSVC 2015 RTM is released late July.\n\nhttps://github.com/libdynd/libdynd/pull/180\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/422/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/401", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/401/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/401/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/401/events", "html_url": "https://github.com/libdynd/libdynd/issues/401", "id": 85246076, "number": 401, "title": "Add MINGW configuration in appveyor", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-06-04T19:41:31Z", "updated_at": "2015-06-04T19:41:31Z", "closed_at": null, "author_association": "OWNER", "body": "With the added mingw support, we should add a test configuration to keep it working.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/401/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/281", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/281/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/281/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/281/events", "html_url": "https://github.com/libdynd/libdynd/issues/281", "id": 56156050, "number": 281, "title": "type-var constructed types", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-02-01T07:53:38Z", "updated_at": "2015-02-10T15:05:15Z", "closed_at": null, "author_association": "OWNER", "body": "Add a type to represent a typevar with constructor arguments.\n\nSee https://github.com/ContinuumIO/datashape/blob/master/docs/source/grammar.rst, in particular the part:\n\n```\n# Type Constructor (from the data type constructor symbol table)\ntype_constr : NAME_LOWER LBRACKET type_arg_list RBRACKET\n\n# Type Constructor: list of arguments\ntype_arg_list : type_arg COMMA type_arg_list\n              | type_kwarg_list\n              | type_arg\n\n# Type Constructor: list of arguments\ntype_kwarg_list : type_kwarg COMMA type_kwarg_list\n                | type_kwarg\n\n# Type Constructor : single argument\ntype_arg : datashape\n         | INTEGER\n         | STRING\n         | list_type_arg\n\n# Type Constructor : single keyword argument\ntype_kwarg : NAME_LOWER EQUAL type_arg\n\n# Type Constructor : single list argument\nlist_type_arg : LBRACKET RBRACKET\n              | LBRACKET datashape_list RBRACKET\n              | LBRACKET integer_list RBRACKET\n              | LBRACKET string_list RBRACKET\n\ndatashape_list : datashape COMMA datashape_list\n               | datashape\n\ninteger_list : INTEGER COMMA integer_list\n             | INTEGER\n\nstring_list : STRING COMMA string_list\n            | STRING\n```\n\nThis feature is incompatible with the desire for more free-form type constructor arguments, as discussed in ContinuumIO/datashape#112.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/281/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/270", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/270/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/270/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/270/events", "html_url": "https://github.com/libdynd/libdynd/issues/270", "id": 55287013, "number": 270, "title": "Google Summer of Code projects", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2015-01-23T14:30:12Z", "updated_at": "2015-03-24T19:21:34Z", "closed_at": null, "author_association": "OWNER", "body": "Ideas go here...\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/258", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/258/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/258/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/258/events", "html_url": "https://github.com/libdynd/libdynd/issues/258", "id": 54408887, "number": 258, "title": "segfault in test_libdynd", "user": {"login": "jreback", "id": 953992, "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jreback", "html_url": "https://github.com/jreback", "followers_url": "https://api.github.com/users/jreback/followers", "following_url": "https://api.github.com/users/jreback/following{/other_user}", "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}", "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jreback/subscriptions", "organizations_url": "https://api.github.com/users/jreback/orgs", "repos_url": "https://api.github.com/users/jreback/repos", "events_url": "https://api.github.com/users/jreback/events{/privacy}", "received_events_url": "https://api.github.com/users/jreback/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2015-01-15T03:34:25Z", "updated_at": "2015-01-16T16:03:22Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body": "just built from master on macosx\nbtw. maybe the test_libdydn should include version, platform info at the top?\n\nv0.6.6-464-g501d054\n\n```\n[----------] 5 tests from TypeCasting\n[ RUN      ] TypeCasting.IsLosslessAssignment\n[       OK ] TypeCasting.IsLosslessAssignment (0 ms)\n[ RUN      ] TypeCasting.StringToInt32\n[       OK ] TypeCasting.StringToInt32 (0 ms)\n[ RUN      ] TypeCasting.StringToInt64\n[       OK ] TypeCasting.StringToInt64 (0 ms)\n[ RUN      ] TypeCasting.StringToInt128\n[       OK ] TypeCasting.StringToInt128 (0 ms)\n[ RUN      ] TypeCasting.StringToUInt64\n[       OK ] TypeCasting.StringToUInt64 (0 ms)\n[----------] 5 tests from TypeCasting (0 ms total)\n\n[----------] 5 tests from SubstituteTypeVars\n[ RUN      ] SubstituteTypeVars.SimpleNoSubstitutions\nSegmentation fault: 11\n```\n\nlmk what other info I can provide\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/258/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/248", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/248/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/248/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/248/events", "html_url": "https://github.com/libdynd/libdynd/issues/248", "id": 53874842, "number": 248, "title": "ndt::type copy constuctor from string not working consistently", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-01-09T14:48:38Z", "updated_at": "2015-01-09T14:48:38Z", "closed_at": null, "author_association": "OWNER", "body": "I'm a bit confused by some of the behavior with constructing types from strings. For instance, ndt::type(\"T\") seems to work, but not ndt::pattern_match(\"T\", \"int32\") -- or any other function that takes a const ndt::type &. Why is this?\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/247", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/247/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/247/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/247/events", "html_url": "https://github.com/libdynd/libdynd/issues/247", "id": 53791508, "number": 247, "title": "Windows issues with test_apply.cpp", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2015-01-08T19:40:24Z", "updated_at": "2015-02-13T08:57:02Z", "closed_at": null, "author_association": "OWNER", "body": "@mwiebe Can you please take a look at the master version of test_apply.cpp? If you do, you'll notice that there are two places where ifdefs prevent Windows from compiling the code. For instance, https://github.com/libdynd/libdynd/blob/master/tests/func/test_apply.cpp#L522\n\nWhat's happened here is I've brought back a number of the apply tests that were disabled because of CUDA. There seems to be some sort of compiler error with Windows, which doesn't look too bad to fix. Could you please?\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/206", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/206/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/206/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/206/events", "html_url": "https://github.com/libdynd/libdynd/issues/206", "id": 51703354, "number": 206, "title": "Comparision of integers of different sign", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2014-12-11T15:57:59Z", "updated_at": "2014-12-11T15:57:59Z", "closed_at": null, "author_association": "OWNER", "body": "Right now, we can't compare intptr_t and size_t without the compiler failing. Is this necessary? Can we just turn that single error off?\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/163", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/163/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/163/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/163/events", "html_url": "https://github.com/libdynd/libdynd/issues/163", "id": 47641350, "number": 163, "title": "Support dimension fragments as first class symbolic types", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2014-11-03T20:39:04Z", "updated_at": "2014-11-03T20:39:04Z", "closed_at": null, "author_association": "OWNER", "body": "As part of dynd's type pattern matching there is a dimension fragment created for intermediate processing of ellipsis dimension types. It appears to be necessary to make dimension fragments first class in the dynd type system, for example to include inside grouped named dimension fragments as in #162.\n\nA way to implement this would be for any dimension type whose element type is uninitialized to be the terminator of a dimension fragment. There are a few things to keep in mind for implementation:\n- It merges the namespace of dimension and dtype.\n- There is a slight complication between the dimension and dtype typevar, where the dtype typevar should be able to match the last dimension in a dimension fragment or another dtype.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/162", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/162/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/162/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/162/events", "html_url": "https://github.com/libdynd/libdynd/issues/162", "id": 47640856, "number": 162, "title": "Support typevars with type constraints as dimension fragments/symbolic types", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 7057199, "url": "https://api.github.com/repos/libdynd/libdynd/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true}, {"id": 98423763, "url": "https://api.github.com/repos/libdynd/libdynd/labels/feature", "name": "feature", "color": "5319e7", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2014-11-03T20:34:07Z", "updated_at": "2014-11-03T20:34:07Z", "closed_at": null, "author_association": "OWNER", "body": "In combination with the dimensional power, it would be nice to be able to group dimension fragments, allowing one to assign a name to a sequence of several dimensions. For example, `(Dims: fixed**N) * float32` expresses a 32-bit float array with N fixed dimensions, and the name `Dims` can be used later to substitute the particular dimensions matched.\n\nThe proposed syntax is `(Name: type)`, and is distinguished from a tuple type by the symbolic name and colon immediately after the opening parenthesis.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/158", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/158/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/158/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/158/events", "html_url": "https://github.com/libdynd/libdynd/issues/158", "id": 47441906, "number": 158, "title": "string type memory representation", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 7057199, "url": "https://api.github.com/repos/libdynd/libdynd/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true}, {"id": 98423763, "url": "https://api.github.com/repos/libdynd/libdynd/labels/feature", "name": "feature", "color": "5319e7", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-10-31T20:38:24Z", "updated_at": "2014-10-31T20:47:07Z", "closed_at": null, "author_association": "OWNER", "body": "DyND's string representation could use some refinement. Currently, there are two ways strings are represented: A numpy-style fixed size buffer, and a pooled allocation with each string being a pair of pointers into that pool. The default string type is the latter, using the utf-8 encoding. This has some slightly unintuitive consequences, the biggest being that the string acts as a \"write once\" type. This is fine for simple data conversions and some kinds of computations, but not for interactive manipulation or algorithms which will repeatedly append/modify an array of strings.\n\nSome properties we would like DyND's string representation to have include:\n1. Heap allocation by default, but allow for pooled allocation and referring to strings inside other buffers.\n2. Support the small string optimization, so strings that fit in 15 or fewer bytes don't require a separate memory allocation.\n3. Have other string representations, like fixed-size buffers or various encodings, be expression types whose value type is the standard string type, and whose storage type is bytes[N] or bytes.\n\nIt may be desirable to have an additional \"rope\" type to represent enormous editable strings, but this is not an immediate priority.\n\nThe implementation changes to represent strings satisfying the desired properties are:\n1. Change the memory block allocation to have a heap vs pooled capability.\n2. Introduce the small string optimization. Make the storage be two 64-bit values on all platforms, with the last byte signalling whether it refers to an external buffer or data in the first 15 bytes. Some accounting for big/little endian must occur here.\n3. Change the fixedstring, etc types to be \"adapt\" types, to fit them into a uniform adaptation mechanism. Probably good to still have string[...] aliases for the type representation for simple spellings of these types.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/158/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/157", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/157/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/157/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/157/events", "html_url": "https://github.com/libdynd/libdynd/issues/157", "id": 47279283, "number": 157, "title": "missing ?T arithmetic", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-10-30T14:53:02Z", "updated_at": "2014-10-30T15:33:41Z", "closed_at": null, "author_association": "OWNER", "body": "```\nIn [84]: x = nd.array([1, 2, None])\n\nIn [85]: x + 1\n---------------------------------------------------------------------------\nRuntimeError                              Traceback (most recent call last)\n<ipython-input-85-4cf92658b648> in <module>()\n----> 1 x + 1\n\nC:\\Users\\mwiebe\\Anaconda\\lib\\site-packages\\dynd\\_pydynd.pyd in dynd._pydynd.w_array.__add__ (dynd._pydynd.cxx:10214)()\n\nRuntimeError: Addition is not supported for dynd types ?int32 and int32\n```\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/157/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/149", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/149/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/149/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/149/events", "html_url": "https://github.com/libdynd/libdynd/issues/149", "id": 45790711, "number": 149, "title": "ckernel and arrfunc file names and locations", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-10-14T19:35:01Z", "updated_at": "2014-12-30T18:35:19Z", "closed_at": null, "author_association": "OWNER", "body": "We've gotten a bit sloppy on where we are keeping ckernels and, also, how we name things. For instance, we have ckernels in the kernels directory and some ckernels in arrfunc src code. \n\n1) An arrfunc is placed in the func subdirectory. If it's name is \"something\", the appropriate file can be something_arrfunc.{hpp, cpp}.\n\n2) Every ckernel is placed in the kernels subdirectory. If it's name is \"something\", the appropriate files can be something_kernels.{hpp, cpp}. The 's' in \"kernels\" can be removed if it defines a single kernel.\n\nQuestion: Maybe it makes more sense to remove both the \"_arrfunc\" and the \"_kernels\" from the above files, as those are specified by the directory anyway.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/149/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/148", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/148/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/148/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/148/events", "html_url": "https://github.com/libdynd/libdynd/issues/148", "id": 45790081, "number": 148, "title": "inline", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-10-14T19:29:11Z", "updated_at": "2014-10-21T06:31:15Z", "closed_at": null, "author_association": "OWNER", "body": "Which methods should we declare as inline?\n\nMy understanding of the C++ standard is that class methods defined within a class are, by default, inline. Source: http://stackoverflow.com/questions/9734175/why-are-class-member-functions-inlined?rq=1\n\nThe above link specifically quotes the C++11 standard, \"A member function may be de\ufb01ned (8.4) in its class de\ufb01nition, in which case it is an inline member function (7.1.2) ...\"\n\nIf that's the case, we should stop putting inline on class methods unless they are defined outside the class.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/144", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/144/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/144/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/144/events", "html_url": "https://github.com/libdynd/libdynd/issues/144", "id": 45694586, "number": 144, "title": "Base comparison on a trivalent \"spaceship\" operator instead of many predicates", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2014-10-13T22:51:06Z", "updated_at": "2014-10-13T22:51:06Z", "closed_at": null, "author_association": "OWNER", "body": "As described in the talk here:\n\nhttps://github.com/CppCon/CppCon2014/tree/master/Presentations/C%2B%2B11%20in%20the%20Wild%20-%20Techniques%20from%20a%20Real%20Codebase\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/124", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/124/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/124/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/124/events", "html_url": "https://github.com/libdynd/libdynd/issues/124", "id": 43946485, "number": 124, "title": "Easy way to adapt types at nd::array creation", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2014-09-25T17:45:03Z", "updated_at": "2014-09-25T17:45:03Z", "closed_at": null, "author_association": "OWNER", "body": "Given data that has a form like \n\n```\ndata = [{u'timestamp': u'1410360724063', u'url': u'http://google.com/', u'score': u'0.0'}, {u'timestamp': u'1410360724063', u'url': u'http://eccie.net/', u'score': u'0.0'}]\n```\n\nit would be nice to be able to say something like\n\n```\nIn [54]: nd.array(x, dtype=\"{timestamp: adapt[(int64) -> datetime, 'seconds since 1970'], url: string, score: float64}\")\n```\n\nand have it process the timestamp input as integers, apply the transformation, and result in a datetime type.\n\nProbably nd.asarray should have the same behaviour, but nd.view should not.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/117", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/117/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/117/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/117/events", "html_url": "https://github.com/libdynd/libdynd/issues/117", "id": 42475478, "number": 117, "title": "Add a hash function implementation to ndt::type", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-09-10T23:53:29Z", "updated_at": "2015-01-23T14:45:38Z", "closed_at": null, "author_association": "OWNER", "body": "As part of this, could add a cached hash value to the struct defining members shared by all ndt::type objects (https://github.com/ContinuumIO/libdynd/blob/master/include/dynd/types/base_type.hpp#L91).\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/117/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/116", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/116/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/116/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/116/events", "html_url": "https://github.com/libdynd/libdynd/issues/116", "id": 42438265, "number": 116, "title": "Extend datashape for arbitrary function signatures/variadic parameters", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2014-09-10T17:32:00Z", "updated_at": "2014-12-10T17:14:58Z", "closed_at": null, "author_association": "OWNER", "body": "If multidispatch is used with components that have different numbers of parameters, there is no way to represent the function signature that results. To fix this, we can extend the datashape function signature syntax slightly. The `...` ellipsis is currently used only for variadic dimensions, but if used by itself, it can also unambiguously represent variadic parameters.\n\n```\n(int, real, ...) -> real\n(...) -> R\n(...) -> Dims... * R\n```\n\nTo also indicate a fully arbitrary unnamed output type, we could again reuse `...`:\n\n```\n# Most general function signature\n(...) -> ...\n```\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/116/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/113", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/113/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/113/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/113/events", "html_url": "https://github.com/libdynd/libdynd/issues/113", "id": 42159531, "number": 113, "title": "Check that ndt::make_type<T>() is consistent", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2014-09-08T02:14:57Z", "updated_at": "2014-09-08T02:14:57Z", "closed_at": null, "author_association": "OWNER", "body": "With recent changes to ndt::make_type<T>(), there are some inconsistent assumptions in code using it. In particular, some code assumes that the result of this exactly matches the memory layout of data typed with the given type, but this doesn't hold for type (https://github.com/ContinuumIO/libdynd/blob/master/include/dynd/type.hpp#L740).\n\nWe need to resolve this, perhaps by allowing ndt::make_type<T> to be a bit more general, allowing ndt::make_type<bool>()/ndt::make_typestd::string(), and creating an alternative ndt::make_rawmem_type<T>() or something similar for precise memory layout.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/112", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/112/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/112/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/112/events", "html_url": "https://github.com/libdynd/libdynd/issues/112", "id": 42139541, "number": 112, "title": "Be more consistent with braces", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 101272045, "url": "https://api.github.com/repos/libdynd/libdynd/labels/1%20-%20Backlog", "name": "1 - Backlog", "color": "CCCCCC", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-09-07T10:41:53Z", "updated_at": "2014-09-12T07:38:53Z", "closed_at": null, "author_association": "OWNER", "body": "We're a bit inconsistent with braces in libdynd. Sometimes we put the brace on a newline and sometimes we don't. I think we should pick one and stick with it.\n\n<!---\n@huboard:{\"order\":63.75,\"milestone_order\":112,\"custom_state\":\"\"}\n-->\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/97", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/97/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/97/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/97/events", "html_url": "https://github.com/libdynd/libdynd/issues/97", "id": 40715364, "number": 97, "title": "Multiple dispatch for arrfuncs", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 101272047, "url": "https://api.github.com/repos/libdynd/libdynd/labels/3%20-%20In%20Progress", "name": "3 - In Progress", "color": "CCCCCC", "default": false}], "state": "open", "locked": false, "assignee": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2014-08-20T16:11:53Z", "updated_at": "2014-09-08T02:30:59Z", "closed_at": null, "author_association": "OWNER", "body": "The nd::arrfunc object does its type resolution via some function calls, and so far either custom code or strict matching has been used to match types. Would like to provide a way to do multiple dispatch across a bunch of owned arrfuncs.\n\n<!---\n@huboard:{\"order\":243.25,\"milestone_order\":97,\"custom_state\":\"\"}\n-->\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/97/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/96", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/96/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/96/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/96/events", "html_url": "https://github.com/libdynd/libdynd/issues/96", "id": 40714614, "number": 96, "title": "Create arrfunc publishing mechanism, add basic math functions", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 101272047, "url": "https://api.github.com/repos/libdynd/libdynd/labels/3%20-%20In%20Progress", "name": "3 - In Progress", "color": "CCCCCC", "default": false}], "state": "open", "locked": false, "assignee": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2014-08-20T16:06:03Z", "updated_at": "2014-08-20T16:13:00Z", "closed_at": null, "author_association": "OWNER", "body": "Need a way to publish libraries of arrfuncs, and build in a library of basic math functions to roughly match numpy's. Thinking to do some kind of namespace mechanism.\n\n<!---\n@huboard:{\"order\":486.5,\"milestone_order\":96,\"custom_state\":\"\"}\n-->\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/96/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/73", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/73/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/73/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/73/events", "html_url": "https://github.com/libdynd/libdynd/issues/73", "id": 37108632, "number": 73, "title": "Change nd::view to always return a new nd::array container object", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 101272045, "url": "https://api.github.com/repos/libdynd/libdynd/labels/1%20-%20Backlog", "name": "1 - Backlog", "color": "CCCCCC", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2014-07-03T18:19:31Z", "updated_at": "2014-09-08T02:30:38Z", "closed_at": null, "author_association": "OWNER", "body": "See comments in https://github.com/ContinuumIO/libdynd/pull/65/files#diff-7b71ac7941948b3d6f279bdaa61db8a0R1278\n\nBeing able to make an nd::view followed by manipulating the arrmeta seems like it will be a common idiom, and having nd::view be guaranteed to return a new unique nd::array container is the way to have this work.\n\n<!---\n@huboard:{\"order\":59.5,\"milestone_order\":73,\"custom_state\":\"\"}\n-->\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/73/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/71", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/71/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/71/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/71/events", "html_url": "https://github.com/libdynd/libdynd/issues/71", "id": 37036691, "number": 71, "title": "Review behavior of scalar to var dim assignment", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 101272045, "url": "https://api.github.com/repos/libdynd/libdynd/labels/1%20-%20Backlog", "name": "1 - Backlog", "color": "CCCCCC", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2014-07-03T00:14:23Z", "updated_at": "2014-09-08T02:30:34Z", "closed_at": null, "author_association": "OWNER", "body": "Currently given a scalar, it produces a size-1 dimension in the output if nothing has been allocated, and broadcasts to what's there if it has. We could alternatively raise an error in the first case instead of allocating a size-1 dimensions.\n\ncc @mrocklin \n\n<!---\n@huboard:{\"order\":51.0,\"milestone_order\":71,\"custom_state\":\"\"}\n-->\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/71/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/68", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/68/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/68/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/68/events", "html_url": "https://github.com/libdynd/libdynd/issues/68", "id": 36854448, "number": 68, "title": "Flip tuple=False default in nd.as_py, nd.format_json", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 101272045, "url": "https://api.github.com/repos/libdynd/libdynd/labels/1%20-%20Backlog", "name": "1 - Backlog", "color": "CCCCCC", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2014-07-01T01:20:13Z", "updated_at": "2014-08-29T17:25:52Z", "closed_at": null, "author_association": "OWNER", "body": "The default was made to convert to/from Python dictionaries and JSON objects, but going to/from sequences seems better based on experience in Blaze. Thus, change the default.\n\n<!---\n@huboard:{\"order\":68.0,\"milestone_order\":68,\"custom_state\":\"\"}\n-->\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/68/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/67", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/67/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/67/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/67/events", "html_url": "https://github.com/libdynd/libdynd/issues/67", "id": 36854403, "number": 67, "title": "Support int<->string with thousands separators, alternative decimal point", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2014-07-01T01:19:12Z", "updated_at": "2014-07-01T01:19:12Z", "closed_at": null, "author_association": "OWNER", "body": "Encountering numbers like \"1.000.000\" for a million. Proposed way to do this is with the adapt[] type/operation, something like \"adapt[(string) -> int, 'decimal=, thousands=.']\" modulo figuring out a good syntax within the adaptation description string.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/67/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/57", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/57/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/57/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/57/events", "html_url": "https://github.com/libdynd/libdynd/issues/57", "id": 35332360, "number": 57, "title": "relax input strictness on timezone-less datetimes", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2014-06-09T22:41:18Z", "updated_at": "2014-06-09T22:41:18Z", "closed_at": null, "author_association": "OWNER", "body": "To get things to work prior to getting decent timezone support using the Olson database + code, relax the input parsing to throw away time zones when inputting to timezone-less datetimes.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/57/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/40", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/40/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/40/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/40/events", "html_url": "https://github.com/libdynd/libdynd/issues/40", "id": 33205464, "number": 40, "title": "Support timezone implementation on datetime", "user": {"login": "aterrel", "id": 30583, "avatar_url": "https://avatars1.githubusercontent.com/u/30583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aterrel", "html_url": "https://github.com/aterrel", "followers_url": "https://api.github.com/users/aterrel/followers", "following_url": "https://api.github.com/users/aterrel/following{/other_user}", "gists_url": "https://api.github.com/users/aterrel/gists{/gist_id}", "starred_url": "https://api.github.com/users/aterrel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aterrel/subscriptions", "organizations_url": "https://api.github.com/users/aterrel/orgs", "repos_url": "https://api.github.com/users/aterrel/repos", "events_url": "https://api.github.com/users/aterrel/events{/privacy}", "received_events_url": "https://api.github.com/users/aterrel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 98423763, "url": "https://api.github.com/repos/libdynd/libdynd/labels/feature", "name": "feature", "color": "5319e7", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2014-05-09T20:23:27Z", "updated_at": "2014-05-09T20:24:18Z", "closed_at": null, "author_association": "NONE", "body": "", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/40/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/33", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/33/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/33/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/33/events", "html_url": "https://github.com/libdynd/libdynd/issues/33", "id": 32468874, "number": 33, "title": "Need intelligent summarization of really large arrays", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2014-04-29T17:55:46Z", "updated_at": "2014-04-29T17:55:46Z", "closed_at": null, "author_association": "OWNER", "body": "Ran into a problem by parsing a 1.5GB json file into a single dynd array, then printing it out in ipython with the repr. \n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/33/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/18", "repository_url": "https://api.github.com/repos/libdynd/libdynd", "labels_url": "https://api.github.com/repos/libdynd/libdynd/issues/18/labels{/name}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/18/comments", "events_url": "https://api.github.com/repos/libdynd/libdynd/issues/18/events", "html_url": "https://github.com/libdynd/libdynd/issues/18", "id": 30164604, "number": 18, "title": "reduction ckernel lifting of var_dim dimensions", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 7057199, "url": "https://api.github.com/repos/libdynd/libdynd/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2014-03-25T21:14:16Z", "updated_at": "2014-03-25T21:14:16Z", "closed_at": null, "author_association": "OWNER", "body": "This appears to require using something like a mask to work correctly. Simple example:\n\n```\nmin([[], [3]])\n```\n\nshould return 3, but that can't be seen until later. A more complicated example:\n\n```\nmin([[[], [], []],\n     [[], [1], []],\n     [[2], [], []]], axis=(0, 2))\n```\n\nshould raise, but we can't see that until it reaches the end.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/18/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}], "commits": [{"sha": "a588062734f7f5eb840eaa556a2b95866fee9655", "commit": {"author": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-12-23T22:04:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-12-23T22:04:16Z"}, "message": "Merge pull request #1330 from insertinterestingnamehere/tst\n\nUpdate Google Benchmark", "tree": {"sha": "b91d4ed776ae21be3be4796cf81503f99256b2f6", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/b91d4ed776ae21be3be4796cf81503f99256b2f6"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/a588062734f7f5eb840eaa556a2b95866fee9655", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaPtLgCRBK7hj4Ov3rIwAAdHIIAI0nysKL9Tnh+RVhzbwp4BnL\nQ2fvch+qWednxqMY208nkdOfRuJA1Tv2VRPn21siOQmVSKG/JcMR/sjbVkrm851/\n9YgvWc0nR7tV1HNo3yzPCrq9slbRhs+c0Dd8n2KMcu5WNgTTXQJwldWiRWB9YblM\nnjNfmE8sOjjEYjpPYFtMcnmQdfEudobDME4uwO77AQPrfMIiGw7Y46ZzB/uErXB6\nIzqIQbzSAwA3cc/2dw3Ct4P0tWnWywjmXFIo5LpUe2ulM6yO8d0gzbUOo8mLWErh\nVk3iX2WEKF+asjK21h1rEQtCb191Xy0Un/jqrYMeUq9LS2safWCpIMFElo/DAhw=\n=0vdo\n-----END PGP SIGNATURE-----\n", "payload": "tree b91d4ed776ae21be3be4796cf81503f99256b2f6\nparent 5df10025b5fcb0d87064c677cb4c8b5adc2e39a5\nparent 3f3f75cfb9e09fcf372f677a5070deabfc925e58\nauthor Ian Henriksen <insertinterestingnamehere@gmail.com> 1514066656 -0600\ncommitter GitHub <noreply@github.com> 1514066656 -0600\n\nMerge pull request #1330 from insertinterestingnamehere/tst\n\nUpdate Google Benchmark"}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/a588062734f7f5eb840eaa556a2b95866fee9655", "html_url": "https://github.com/libdynd/libdynd/commit/a588062734f7f5eb840eaa556a2b95866fee9655", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/a588062734f7f5eb840eaa556a2b95866fee9655/comments", "author": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5df10025b5fcb0d87064c677cb4c8b5adc2e39a5", "url": "https://api.github.com/repos/libdynd/libdynd/commits/5df10025b5fcb0d87064c677cb4c8b5adc2e39a5", "html_url": "https://github.com/libdynd/libdynd/commit/5df10025b5fcb0d87064c677cb4c8b5adc2e39a5"}, {"sha": "3f3f75cfb9e09fcf372f677a5070deabfc925e58", "url": "https://api.github.com/repos/libdynd/libdynd/commits/3f3f75cfb9e09fcf372f677a5070deabfc925e58", "html_url": "https://github.com/libdynd/libdynd/commit/3f3f75cfb9e09fcf372f677a5070deabfc925e58"}]}, {"sha": "3f3f75cfb9e09fcf372f677a5070deabfc925e58", "commit": {"author": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-12-23T19:55:43Z"}, "committer": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-12-23T20:42:43Z"}, "message": "Clean up unused variables in reduction callable.", "tree": {"sha": "b91d4ed776ae21be3be4796cf81503f99256b2f6", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/b91d4ed776ae21be3be4796cf81503f99256b2f6"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/3f3f75cfb9e09fcf372f677a5070deabfc925e58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/3f3f75cfb9e09fcf372f677a5070deabfc925e58", "html_url": "https://github.com/libdynd/libdynd/commit/3f3f75cfb9e09fcf372f677a5070deabfc925e58", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/3f3f75cfb9e09fcf372f677a5070deabfc925e58/comments", "author": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "committer": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bbdd5382ebae5fdbacdc04929bf2d5839b6e7f7", "url": "https://api.github.com/repos/libdynd/libdynd/commits/6bbdd5382ebae5fdbacdc04929bf2d5839b6e7f7", "html_url": "https://github.com/libdynd/libdynd/commit/6bbdd5382ebae5fdbacdc04929bf2d5839b6e7f7"}]}, {"sha": "6bbdd5382ebae5fdbacdc04929bf2d5839b6e7f7", "commit": {"author": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-12-23T19:14:52Z"}, "committer": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-12-23T20:42:43Z"}, "message": "Prevent google benchmark from trying to find googletest.\nSince we bundle googletest as single files it's unclear\nwhether or not google benchmark will be able to find and\nuse bundled version.", "tree": {"sha": "db806e28e9cbe2452f1f9651ae1e35ddafde1491", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/db806e28e9cbe2452f1f9651ae1e35ddafde1491"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/6bbdd5382ebae5fdbacdc04929bf2d5839b6e7f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/6bbdd5382ebae5fdbacdc04929bf2d5839b6e7f7", "html_url": "https://github.com/libdynd/libdynd/commit/6bbdd5382ebae5fdbacdc04929bf2d5839b6e7f7", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/6bbdd5382ebae5fdbacdc04929bf2d5839b6e7f7/comments", "author": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "committer": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1700341cae944a8437619f96b0f65d323ab96de7", "url": "https://api.github.com/repos/libdynd/libdynd/commits/1700341cae944a8437619f96b0f65d323ab96de7", "html_url": "https://github.com/libdynd/libdynd/commit/1700341cae944a8437619f96b0f65d323ab96de7"}]}, {"sha": "1700341cae944a8437619f96b0f65d323ab96de7", "commit": {"author": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-12-23T19:14:38Z"}, "committer": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-12-23T20:42:43Z"}, "message": "Updated to latest version of google benchmark.", "tree": {"sha": "9e5d513ed7fee25724c533ff625d0af4d85a5c32", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/9e5d513ed7fee25724c533ff625d0af4d85a5c32"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/1700341cae944a8437619f96b0f65d323ab96de7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/1700341cae944a8437619f96b0f65d323ab96de7", "html_url": "https://github.com/libdynd/libdynd/commit/1700341cae944a8437619f96b0f65d323ab96de7", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/1700341cae944a8437619f96b0f65d323ab96de7/comments", "author": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "committer": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5df10025b5fcb0d87064c677cb4c8b5adc2e39a5", "url": "https://api.github.com/repos/libdynd/libdynd/commits/5df10025b5fcb0d87064c677cb4c8b5adc2e39a5", "html_url": "https://github.com/libdynd/libdynd/commit/5df10025b5fcb0d87064c677cb4c8b5adc2e39a5"}]}, {"sha": "5df10025b5fcb0d87064c677cb4c8b5adc2e39a5", "commit": {"author": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-09-02T05:01:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-09-02T05:01:03Z"}, "message": "Merge pull request #1317 from insertinterestingnamehere/ci_fixes\n\nCI test fixes", "tree": {"sha": "bd52a2c537a67f7ac5f7f4924c44eb2e6ca34d8e", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/bd52a2c537a67f7ac5f7f4924c44eb2e6ca34d8e"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/5df10025b5fcb0d87064c677cb4c8b5adc2e39a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/5df10025b5fcb0d87064c677cb4c8b5adc2e39a5", "html_url": "https://github.com/libdynd/libdynd/commit/5df10025b5fcb0d87064c677cb4c8b5adc2e39a5", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/5df10025b5fcb0d87064c677cb4c8b5adc2e39a5/comments", "author": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3bae1de3ae17163b4d05199030ecbad22fd2b95", "url": "https://api.github.com/repos/libdynd/libdynd/commits/b3bae1de3ae17163b4d05199030ecbad22fd2b95", "html_url": "https://github.com/libdynd/libdynd/commit/b3bae1de3ae17163b4d05199030ecbad22fd2b95"}, {"sha": "c8bdbb447e988458407c9fb68076efb17fb41c63", "url": "https://api.github.com/repos/libdynd/libdynd/commits/c8bdbb447e988458407c9fb68076efb17fb41c63", "html_url": "https://github.com/libdynd/libdynd/commit/c8bdbb447e988458407c9fb68076efb17fb41c63"}]}, {"sha": "c8bdbb447e988458407c9fb68076efb17fb41c63", "commit": {"author": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-09-01T21:40:32Z"}, "committer": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-09-02T04:28:32Z"}, "message": "Allow failures in Python build in the build matrix.\nThis makes it so that the builds can indicate when the Python\nbindings need to be updated without failing outright.", "tree": {"sha": "bd52a2c537a67f7ac5f7f4924c44eb2e6ca34d8e", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/bd52a2c537a67f7ac5f7f4924c44eb2e6ca34d8e"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/c8bdbb447e988458407c9fb68076efb17fb41c63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/c8bdbb447e988458407c9fb68076efb17fb41c63", "html_url": "https://github.com/libdynd/libdynd/commit/c8bdbb447e988458407c9fb68076efb17fb41c63", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/c8bdbb447e988458407c9fb68076efb17fb41c63/comments", "author": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "committer": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ef3e42fb15cc74c54a9aef9e82c9aadd26fa9df", "url": "https://api.github.com/repos/libdynd/libdynd/commits/2ef3e42fb15cc74c54a9aef9e82c9aadd26fa9df", "html_url": "https://github.com/libdynd/libdynd/commit/2ef3e42fb15cc74c54a9aef9e82c9aadd26fa9df"}]}, {"sha": "2ef3e42fb15cc74c54a9aef9e82c9aadd26fa9df", "commit": {"author": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-09-01T16:37:29Z"}, "committer": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-09-02T04:28:32Z"}, "message": "Preliminary fix for segfault in tuple construction.\nThe previous implementation of the init_kernel for std::tuple\nrelied on undefined behavior. In particular it relied on the\narguments passed to a function (the constructor for the std::tuple\nof child kernels) be executed in the order they are provided.\nThat was what was going on before with the idiom involving\npostfix_add. The old code worked fine with MSVC and clang, but,\nfor whatever reason, gcc decided to reorder the evaluation of\nfunction arguments and caused a segfault in doing so.\nThe metaprogramming added here is an initial pass to fix the issue.\nIt should still be simplified if possible, moved somewhere\nmore sensible, and documented better. For now though, this\nat least avoids the crash.", "tree": {"sha": "adf8b25b178fb74e6e2eec481d38247a8544b7c1", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/adf8b25b178fb74e6e2eec481d38247a8544b7c1"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/2ef3e42fb15cc74c54a9aef9e82c9aadd26fa9df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/2ef3e42fb15cc74c54a9aef9e82c9aadd26fa9df", "html_url": "https://github.com/libdynd/libdynd/commit/2ef3e42fb15cc74c54a9aef9e82c9aadd26fa9df", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/2ef3e42fb15cc74c54a9aef9e82c9aadd26fa9df/comments", "author": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "committer": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32ef4b5a1a1b7a6be171a2a42723b05e0a3e8338", "url": "https://api.github.com/repos/libdynd/libdynd/commits/32ef4b5a1a1b7a6be171a2a42723b05e0a3e8338", "html_url": "https://github.com/libdynd/libdynd/commit/32ef4b5a1a1b7a6be171a2a42723b05e0a3e8338"}]}, {"sha": "32ef4b5a1a1b7a6be171a2a42723b05e0a3e8338", "commit": {"author": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-08-26T19:51:53Z"}, "committer": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-09-02T04:28:31Z"}, "message": "Forward user-provided compiler flags during the coverage build.", "tree": {"sha": "49fcbc28b63b439c20928e592e403effe98e71f1", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/49fcbc28b63b439c20928e592e403effe98e71f1"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/32ef4b5a1a1b7a6be171a2a42723b05e0a3e8338", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/32ef4b5a1a1b7a6be171a2a42723b05e0a3e8338", "html_url": "https://github.com/libdynd/libdynd/commit/32ef4b5a1a1b7a6be171a2a42723b05e0a3e8338", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/32ef4b5a1a1b7a6be171a2a42723b05e0a3e8338/comments", "author": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "committer": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5eba895865fa2deed741c1e3534a951727011395", "url": "https://api.github.com/repos/libdynd/libdynd/commits/5eba895865fa2deed741c1e3534a951727011395", "html_url": "https://github.com/libdynd/libdynd/commit/5eba895865fa2deed741c1e3534a951727011395"}]}, {"sha": "5eba895865fa2deed741c1e3534a951727011395", "commit": {"author": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-07-07T20:26:55Z"}, "committer": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-09-02T04:27:18Z"}, "message": "Explicitly tell gcc to use the gold linker for the address sanitization\nbuild. This works around the bug described at\nhttps://stackoverflow.com/q/37603238/1935144", "tree": {"sha": "7dce420f925314e6086e58028d2b8a692281dcab", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/7dce420f925314e6086e58028d2b8a692281dcab"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/5eba895865fa2deed741c1e3534a951727011395", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/5eba895865fa2deed741c1e3534a951727011395", "html_url": "https://github.com/libdynd/libdynd/commit/5eba895865fa2deed741c1e3534a951727011395", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/5eba895865fa2deed741c1e3534a951727011395/comments", "author": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "committer": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "415ccdc33ad3843bd352ada6eba6efccf5d8228e", "url": "https://api.github.com/repos/libdynd/libdynd/commits/415ccdc33ad3843bd352ada6eba6efccf5d8228e", "html_url": "https://github.com/libdynd/libdynd/commit/415ccdc33ad3843bd352ada6eba6efccf5d8228e"}]}, {"sha": "415ccdc33ad3843bd352ada6eba6efccf5d8228e", "commit": {"author": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-07-07T18:46:36Z"}, "committer": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-09-02T04:27:18Z"}, "message": "Try running on containerized ubuntu trusty images on travis CI.\nExplicitly specifying sudo: false should be sufficient to do that.", "tree": {"sha": "3a097c402654914b7326b8f8f1c7427aad99d1b6", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/3a097c402654914b7326b8f8f1c7427aad99d1b6"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/415ccdc33ad3843bd352ada6eba6efccf5d8228e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/415ccdc33ad3843bd352ada6eba6efccf5d8228e", "html_url": "https://github.com/libdynd/libdynd/commit/415ccdc33ad3843bd352ada6eba6efccf5d8228e", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/415ccdc33ad3843bd352ada6eba6efccf5d8228e/comments", "author": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "committer": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ea5eab423884ed10a6629db094ab90c0437da03", "url": "https://api.github.com/repos/libdynd/libdynd/commits/9ea5eab423884ed10a6629db094ab90c0437da03", "html_url": "https://github.com/libdynd/libdynd/commit/9ea5eab423884ed10a6629db094ab90c0437da03"}]}, {"sha": "9ea5eab423884ed10a6629db094ab90c0437da03", "commit": {"author": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-06-27T19:46:50Z"}, "committer": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-09-02T04:27:18Z"}, "message": "Remove workaround for old bug in conda-build\nhttps://github.com/conda/conda-build/issues/949 was closed long ago.\nWe no longer need to maintain these workarounds.", "tree": {"sha": "d397addb79f2c9cee7172b523d9a7d3caca3639e", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/d397addb79f2c9cee7172b523d9a7d3caca3639e"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/9ea5eab423884ed10a6629db094ab90c0437da03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/9ea5eab423884ed10a6629db094ab90c0437da03", "html_url": "https://github.com/libdynd/libdynd/commit/9ea5eab423884ed10a6629db094ab90c0437da03", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/9ea5eab423884ed10a6629db094ab90c0437da03/comments", "author": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "committer": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cd62abe526e86bea31e1f3ca30c5b970677afe2", "url": "https://api.github.com/repos/libdynd/libdynd/commits/3cd62abe526e86bea31e1f3ca30c5b970677afe2", "html_url": "https://github.com/libdynd/libdynd/commit/3cd62abe526e86bea31e1f3ca30c5b970677afe2"}]}, {"sha": "3cd62abe526e86bea31e1f3ca30c5b970677afe2", "commit": {"author": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-06-27T19:43:06Z"}, "committer": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-09-02T04:27:18Z"}, "message": "Clean out some cruft in the travis CI build.\nIn particular, we aren't using most of the secure env variables.", "tree": {"sha": "f564a185afcaf69553e2ef812bdb92cbbf1e0228", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/f564a185afcaf69553e2ef812bdb92cbbf1e0228"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/3cd62abe526e86bea31e1f3ca30c5b970677afe2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/3cd62abe526e86bea31e1f3ca30c5b970677afe2", "html_url": "https://github.com/libdynd/libdynd/commit/3cd62abe526e86bea31e1f3ca30c5b970677afe2", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/3cd62abe526e86bea31e1f3ca30c5b970677afe2/comments", "author": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "committer": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40149168fd45b237c99e6d8f2bee07c9c537e01f", "url": "https://api.github.com/repos/libdynd/libdynd/commits/40149168fd45b237c99e6d8f2bee07c9c537e01f", "html_url": "https://github.com/libdynd/libdynd/commit/40149168fd45b237c99e6d8f2bee07c9c537e01f"}]}, {"sha": "40149168fd45b237c99e6d8f2bee07c9c537e01f", "commit": {"author": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-06-27T18:48:32Z"}, "committer": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-09-02T04:27:18Z"}, "message": "Eliminate sudo: required in Travis CI build since all the needed packages\nare available in the whitelisted apt sources allowed for the container\nbuilds.", "tree": {"sha": "431309a2324839ff3881df54d41599e7cc8e1b90", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/431309a2324839ff3881df54d41599e7cc8e1b90"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/40149168fd45b237c99e6d8f2bee07c9c537e01f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/40149168fd45b237c99e6d8f2bee07c9c537e01f", "html_url": "https://github.com/libdynd/libdynd/commit/40149168fd45b237c99e6d8f2bee07c9c537e01f", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/40149168fd45b237c99e6d8f2bee07c9c537e01f/comments", "author": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "committer": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e0ef31ebf3919b8c0b6588fd43990cefb836070", "url": "https://api.github.com/repos/libdynd/libdynd/commits/6e0ef31ebf3919b8c0b6588fd43990cefb836070", "html_url": "https://github.com/libdynd/libdynd/commit/6e0ef31ebf3919b8c0b6588fd43990cefb836070"}]}, {"sha": "6e0ef31ebf3919b8c0b6588fd43990cefb836070", "commit": {"author": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-06-27T17:24:32Z"}, "committer": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-09-02T04:27:18Z"}, "message": "Fix miniconda download URL for OSX.", "tree": {"sha": "64005df167daf095387adc42e2253827975759a7", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/64005df167daf095387adc42e2253827975759a7"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/6e0ef31ebf3919b8c0b6588fd43990cefb836070", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/6e0ef31ebf3919b8c0b6588fd43990cefb836070", "html_url": "https://github.com/libdynd/libdynd/commit/6e0ef31ebf3919b8c0b6588fd43990cefb836070", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/6e0ef31ebf3919b8c0b6588fd43990cefb836070/comments", "author": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "committer": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3bae1de3ae17163b4d05199030ecbad22fd2b95", "url": "https://api.github.com/repos/libdynd/libdynd/commits/b3bae1de3ae17163b4d05199030ecbad22fd2b95", "html_url": "https://github.com/libdynd/libdynd/commit/b3bae1de3ae17163b4d05199030ecbad22fd2b95"}]}, {"sha": "b3bae1de3ae17163b4d05199030ecbad22fd2b95", "commit": {"author": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-07-24T17:34:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-07-24T17:34:22Z"}, "message": "Merge pull request #1328 from insertinterestingnamehere/static\n\nStatic Builds", "tree": {"sha": "d9411dbd31000e2c8ec76e23f3b3b32bd3b99ac1", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/d9411dbd31000e2c8ec76e23f3b3b32bd3b99ac1"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/b3bae1de3ae17163b4d05199030ecbad22fd2b95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/b3bae1de3ae17163b4d05199030ecbad22fd2b95", "html_url": "https://github.com/libdynd/libdynd/commit/b3bae1de3ae17163b4d05199030ecbad22fd2b95", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/b3bae1de3ae17163b4d05199030ecbad22fd2b95/comments", "author": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6a45555630ad3daff228e1deec8ee7ea99ce980", "url": "https://api.github.com/repos/libdynd/libdynd/commits/f6a45555630ad3daff228e1deec8ee7ea99ce980", "html_url": "https://github.com/libdynd/libdynd/commit/f6a45555630ad3daff228e1deec8ee7ea99ce980"}, {"sha": "53ac2772e9bcddb5882342b8fb47949dd445d4bb", "url": "https://api.github.com/repos/libdynd/libdynd/commits/53ac2772e9bcddb5882342b8fb47949dd445d4bb", "html_url": "https://github.com/libdynd/libdynd/commit/53ac2772e9bcddb5882342b8fb47949dd445d4bb"}]}, {"sha": "53ac2772e9bcddb5882342b8fb47949dd445d4bb", "commit": {"author": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-07-23T04:20:43Z"}, "committer": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-07-23T04:20:43Z"}, "message": "Fix symbol visibility macro use and linker order for static builds.", "tree": {"sha": "d9411dbd31000e2c8ec76e23f3b3b32bd3b99ac1", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/d9411dbd31000e2c8ec76e23f3b3b32bd3b99ac1"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/53ac2772e9bcddb5882342b8fb47949dd445d4bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/53ac2772e9bcddb5882342b8fb47949dd445d4bb", "html_url": "https://github.com/libdynd/libdynd/commit/53ac2772e9bcddb5882342b8fb47949dd445d4bb", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/53ac2772e9bcddb5882342b8fb47949dd445d4bb/comments", "author": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "committer": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6a45555630ad3daff228e1deec8ee7ea99ce980", "url": "https://api.github.com/repos/libdynd/libdynd/commits/f6a45555630ad3daff228e1deec8ee7ea99ce980", "html_url": "https://github.com/libdynd/libdynd/commit/f6a45555630ad3daff228e1deec8ee7ea99ce980"}]}, {"sha": "f6a45555630ad3daff228e1deec8ee7ea99ce980", "commit": {"author": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-07-03T18:16:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-07-03T18:16:28Z"}, "message": "Merge pull request #1318 from insertinterestingnamehere/clang_build\n\nFixes for Clang on Windows", "tree": {"sha": "7d5a01ce8675715918ef57e5865385b0ddcf5283", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/7d5a01ce8675715918ef57e5865385b0ddcf5283"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/f6a45555630ad3daff228e1deec8ee7ea99ce980", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/f6a45555630ad3daff228e1deec8ee7ea99ce980", "html_url": "https://github.com/libdynd/libdynd/commit/f6a45555630ad3daff228e1deec8ee7ea99ce980", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/f6a45555630ad3daff228e1deec8ee7ea99ce980/comments", "author": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9164492c97daf30b05d460ec2813b33a7b01bbd", "url": "https://api.github.com/repos/libdynd/libdynd/commits/d9164492c97daf30b05d460ec2813b33a7b01bbd", "html_url": "https://github.com/libdynd/libdynd/commit/d9164492c97daf30b05d460ec2813b33a7b01bbd"}, {"sha": "684f344bfac28aec2749b1442ee27c0a1b4e07a3", "url": "https://api.github.com/repos/libdynd/libdynd/commits/684f344bfac28aec2749b1442ee27c0a1b4e07a3", "html_url": "https://github.com/libdynd/libdynd/commit/684f344bfac28aec2749b1442ee27c0a1b4e07a3"}]}, {"sha": "684f344bfac28aec2749b1442ee27c0a1b4e07a3", "commit": {"author": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-07-02T03:17:03Z"}, "committer": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-07-02T03:17:03Z"}, "message": "Make sure that template keyword is used in a way that satisfies clang\nin type_sequence, regardless of whether clang is emulating msvc.", "tree": {"sha": "7d5a01ce8675715918ef57e5865385b0ddcf5283", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/7d5a01ce8675715918ef57e5865385b0ddcf5283"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/684f344bfac28aec2749b1442ee27c0a1b4e07a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/684f344bfac28aec2749b1442ee27c0a1b4e07a3", "html_url": "https://github.com/libdynd/libdynd/commit/684f344bfac28aec2749b1442ee27c0a1b4e07a3", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/684f344bfac28aec2749b1442ee27c0a1b4e07a3/comments", "author": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "committer": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a65a6a0d3bce753263e36ac899447ab641f2482", "url": "https://api.github.com/repos/libdynd/libdynd/commits/3a65a6a0d3bce753263e36ac899447ab641f2482", "html_url": "https://github.com/libdynd/libdynd/commit/3a65a6a0d3bce753263e36ac899447ab641f2482"}]}, {"sha": "3a65a6a0d3bce753263e36ac899447ab641f2482", "commit": {"author": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-07-02T03:14:26Z"}, "committer": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-07-02T03:14:26Z"}, "message": "Make sure that gtest does not use its own tuple implementation when\ncompiling with clang on windows. This does expose some warnings from\ngtest, but the gtest refuses (with a hard error) to compile if it thinks\nit is using its own tuple implementation under MSVC, even if it is really\njust being compiled by a version of clang that emulates MSVC.", "tree": {"sha": "0859d62e4336631b7948a52c0b330ded200c2968", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/0859d62e4336631b7948a52c0b330ded200c2968"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/3a65a6a0d3bce753263e36ac899447ab641f2482", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/3a65a6a0d3bce753263e36ac899447ab641f2482", "html_url": "https://github.com/libdynd/libdynd/commit/3a65a6a0d3bce753263e36ac899447ab641f2482", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/3a65a6a0d3bce753263e36ac899447ab641f2482/comments", "author": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "committer": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d2e71ea9cc0dc6581da92910182ab254d40571c", "url": "https://api.github.com/repos/libdynd/libdynd/commits/8d2e71ea9cc0dc6581da92910182ab254d40571c", "html_url": "https://github.com/libdynd/libdynd/commit/8d2e71ea9cc0dc6581da92910182ab254d40571c"}]}, {"sha": "8d2e71ea9cc0dc6581da92910182ab254d40571c", "commit": {"author": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-07-01T22:51:48Z"}, "committer": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-07-01T22:51:48Z"}, "message": "Rename _bind to helper_bind to avoid using a name starting with a\nsingle underscore.", "tree": {"sha": "d020d020e329a38fb6190de8547251efbdc28e60", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/d020d020e329a38fb6190de8547251efbdc28e60"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/8d2e71ea9cc0dc6581da92910182ab254d40571c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/8d2e71ea9cc0dc6581da92910182ab254d40571c", "html_url": "https://github.com/libdynd/libdynd/commit/8d2e71ea9cc0dc6581da92910182ab254d40571c", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/8d2e71ea9cc0dc6581da92910182ab254d40571c/comments", "author": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "committer": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcb94fb80c4b2a6e334a4d4a8c2795ee9006b023", "url": "https://api.github.com/repos/libdynd/libdynd/commits/dcb94fb80c4b2a6e334a4d4a8c2795ee9006b023", "html_url": "https://github.com/libdynd/libdynd/commit/dcb94fb80c4b2a6e334a4d4a8c2795ee9006b023"}]}, {"sha": "dcb94fb80c4b2a6e334a4d4a8c2795ee9006b023", "commit": {"author": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-07-01T22:48:57Z"}, "committer": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-07-01T22:48:57Z"}, "message": "Remove DYND_API declaration from _bind helper in assignment.cpp.\nThings declared in anonymous namespaces cannot be exported via the\nshared library interface. It's intended to be a private helper\nfunction anyway.", "tree": {"sha": "b143dfacb824b17b54863627846a8ee9dc90a3c5", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/b143dfacb824b17b54863627846a8ee9dc90a3c5"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/dcb94fb80c4b2a6e334a4d4a8c2795ee9006b023", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/dcb94fb80c4b2a6e334a4d4a8c2795ee9006b023", "html_url": "https://github.com/libdynd/libdynd/commit/dcb94fb80c4b2a6e334a4d4a8c2795ee9006b023", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/dcb94fb80c4b2a6e334a4d4a8c2795ee9006b023/comments", "author": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "committer": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9091d45edde53552e35f5168411747148d2715f", "url": "https://api.github.com/repos/libdynd/libdynd/commits/b9091d45edde53552e35f5168411747148d2715f", "html_url": "https://github.com/libdynd/libdynd/commit/b9091d45edde53552e35f5168411747148d2715f"}]}, {"sha": "b9091d45edde53552e35f5168411747148d2715f", "commit": {"author": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-07-01T21:12:01Z"}, "committer": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-07-01T21:12:01Z"}, "message": "Avoid incorrect use of incomplete type in CRTP idioms involving\nbase_kernel and its various subclasses. In this particular case,\nnew versions of clang complained about calling sizeof on a type that\nis built using a CRTP pattern since base_kernel<thing> is instantiated\nbefore all the members of thing are defined.", "tree": {"sha": "ee1f910e7388daadd6b7b6497e219b9389480c45", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/ee1f910e7388daadd6b7b6497e219b9389480c45"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/b9091d45edde53552e35f5168411747148d2715f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/b9091d45edde53552e35f5168411747148d2715f", "html_url": "https://github.com/libdynd/libdynd/commit/b9091d45edde53552e35f5168411747148d2715f", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/b9091d45edde53552e35f5168411747148d2715f/comments", "author": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "committer": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9164492c97daf30b05d460ec2813b33a7b01bbd", "url": "https://api.github.com/repos/libdynd/libdynd/commits/d9164492c97daf30b05d460ec2813b33a7b01bbd", "html_url": "https://github.com/libdynd/libdynd/commit/d9164492c97daf30b05d460ec2813b33a7b01bbd"}]}, {"sha": "d9164492c97daf30b05d460ec2813b33a7b01bbd", "commit": {"author": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-06-27T14:38:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-06-27T14:38:40Z"}, "message": "Merge pull request #1316 from insertinterestingnamehere/gcc7\n\nMinGW fixes", "tree": {"sha": "e2a4bb8e643f126f2614b29f132166ff8f56a496", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/e2a4bb8e643f126f2614b29f132166ff8f56a496"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/d9164492c97daf30b05d460ec2813b33a7b01bbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/d9164492c97daf30b05d460ec2813b33a7b01bbd", "html_url": "https://github.com/libdynd/libdynd/commit/d9164492c97daf30b05d460ec2813b33a7b01bbd", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/d9164492c97daf30b05d460ec2813b33a7b01bbd/comments", "author": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bec433171991ea92cd86e5331c5f6c9370ccbea", "url": "https://api.github.com/repos/libdynd/libdynd/commits/7bec433171991ea92cd86e5331c5f6c9370ccbea", "html_url": "https://github.com/libdynd/libdynd/commit/7bec433171991ea92cd86e5331c5f6c9370ccbea"}, {"sha": "d99e54b22b920b7440d6d56b8eb7928b6bb70e66", "url": "https://api.github.com/repos/libdynd/libdynd/commits/d99e54b22b920b7440d6d56b8eb7928b6bb70e66", "html_url": "https://github.com/libdynd/libdynd/commit/d99e54b22b920b7440d6d56b8eb7928b6bb70e66"}]}, {"sha": "d99e54b22b920b7440d6d56b8eb7928b6bb70e66", "commit": {"author": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-06-20T17:20:23Z"}, "committer": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-06-20T17:30:09Z"}, "message": "Fix static initialization order fiasco resulting from the dependency of\nnd::min and nd::max on nd::limits::min and nd::limits::max.\nIt would be better to have nd::min and nd::max reference their\ndependencies directly rather than having to re-construct them, but this\nfix is primarily just to get the load-time behavior correct before\naddressing that.", "tree": {"sha": "e2a4bb8e643f126f2614b29f132166ff8f56a496", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/e2a4bb8e643f126f2614b29f132166ff8f56a496"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/d99e54b22b920b7440d6d56b8eb7928b6bb70e66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/d99e54b22b920b7440d6d56b8eb7928b6bb70e66", "html_url": "https://github.com/libdynd/libdynd/commit/d99e54b22b920b7440d6d56b8eb7928b6bb70e66", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/d99e54b22b920b7440d6d56b8eb7928b6bb70e66/comments", "author": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "committer": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb672cfc9b6d4b9ca55f6683a48682ec85dcc4c8", "url": "https://api.github.com/repos/libdynd/libdynd/commits/bb672cfc9b6d4b9ca55f6683a48682ec85dcc4c8", "html_url": "https://github.com/libdynd/libdynd/commit/bb672cfc9b6d4b9ca55f6683a48682ec85dcc4c8"}]}, {"sha": "bb672cfc9b6d4b9ca55f6683a48682ec85dcc4c8", "commit": {"author": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-06-14T20:50:25Z"}, "committer": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-06-20T17:30:07Z"}, "message": "Fix symobol visibility for is_valid_typevar_name.\nMinGW is more strict about having proper visibility specifications\non everything and for some reason MSVC didn't complain about this one\neven though MinGW did.", "tree": {"sha": "1ede04d0e337893a7101d57f10ba65aa1408549b", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/1ede04d0e337893a7101d57f10ba65aa1408549b"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/bb672cfc9b6d4b9ca55f6683a48682ec85dcc4c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/bb672cfc9b6d4b9ca55f6683a48682ec85dcc4c8", "html_url": "https://github.com/libdynd/libdynd/commit/bb672cfc9b6d4b9ca55f6683a48682ec85dcc4c8", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/bb672cfc9b6d4b9ca55f6683a48682ec85dcc4c8/comments", "author": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "committer": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e3d67e3f694a3080ed67e67c1d6db18552e4617", "url": "https://api.github.com/repos/libdynd/libdynd/commits/5e3d67e3f694a3080ed67e67c1d6db18552e4617", "html_url": "https://github.com/libdynd/libdynd/commit/5e3d67e3f694a3080ed67e67c1d6db18552e4617"}]}, {"sha": "5e3d67e3f694a3080ed67e67c1d6db18552e4617", "commit": {"author": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-06-14T20:25:18Z"}, "committer": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-06-20T17:29:53Z"}, "message": "Split comparisons.cpp into files for each specific comparison callable.\nThis works around the old \"object file has too many sections\" bug on\nMinGW.\nIn making this fix it also became clear that some of the kernel headers\nwere missing some includes. This fixes that as well.", "tree": {"sha": "395b1fd38ef8538f91427d6dcf49f97decf242f3", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/395b1fd38ef8538f91427d6dcf49f97decf242f3"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/5e3d67e3f694a3080ed67e67c1d6db18552e4617", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/5e3d67e3f694a3080ed67e67c1d6db18552e4617", "html_url": "https://github.com/libdynd/libdynd/commit/5e3d67e3f694a3080ed67e67c1d6db18552e4617", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/5e3d67e3f694a3080ed67e67c1d6db18552e4617/comments", "author": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "committer": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e55ef0b4b91bb5ab40bf26b7ffe880b2c75c4383", "url": "https://api.github.com/repos/libdynd/libdynd/commits/e55ef0b4b91bb5ab40bf26b7ffe880b2c75c4383", "html_url": "https://github.com/libdynd/libdynd/commit/e55ef0b4b91bb5ab40bf26b7ffe880b2c75c4383"}]}, {"sha": "e55ef0b4b91bb5ab40bf26b7ffe880b2c75c4383", "commit": {"author": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-06-07T16:54:08Z"}, "committer": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2017-06-12T18:43:54Z"}, "message": "Move DYND_SHARED_LIBRARY_SUFFIX into templated header instead of\npassing it in as a define. This avoids an error, presumably in the\nCMake generator (MSYS Makefiles or MinGW Makefiles) when using MinGW,\nthe define is passed with quotes escaped instead of using plain quotes.\nThat causes odd compilation errors when using that generator.", "tree": {"sha": "48a28449eea0916b4d8780550dc369decd2fe5d8", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/48a28449eea0916b4d8780550dc369decd2fe5d8"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/e55ef0b4b91bb5ab40bf26b7ffe880b2c75c4383", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/e55ef0b4b91bb5ab40bf26b7ffe880b2c75c4383", "html_url": "https://github.com/libdynd/libdynd/commit/e55ef0b4b91bb5ab40bf26b7ffe880b2c75c4383", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/e55ef0b4b91bb5ab40bf26b7ffe880b2c75c4383/comments", "author": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "committer": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bec433171991ea92cd86e5331c5f6c9370ccbea", "url": "https://api.github.com/repos/libdynd/libdynd/commits/7bec433171991ea92cd86e5331c5f6c9370ccbea", "html_url": "https://github.com/libdynd/libdynd/commit/7bec433171991ea92cd86e5331c5f6c9370ccbea"}]}, {"sha": "7bec433171991ea92cd86e5331c5f6c9370ccbea", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-08-29T02:34:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-29T02:34:28Z"}, "message": "Merge pull request #1313 from mwiebe/callable_parse\n\nMove callable_type fully into libdynd from libdyndt", "tree": {"sha": "9036b360a03d46fe1b619d0895d4c31d16fa28c7", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/9036b360a03d46fe1b619d0895d4c31d16fa28c7"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/7bec433171991ea92cd86e5331c5f6c9370ccbea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/7bec433171991ea92cd86e5331c5f6c9370ccbea", "html_url": "https://github.com/libdynd/libdynd/commit/7bec433171991ea92cd86e5331c5f6c9370ccbea", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/7bec433171991ea92cd86e5331c5f6c9370ccbea/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ad2d94a6d962647e4f7ab736cff121631028bd6", "url": "https://api.github.com/repos/libdynd/libdynd/commits/6ad2d94a6d962647e4f7ab736cff121631028bd6", "html_url": "https://github.com/libdynd/libdynd/commit/6ad2d94a6d962647e4f7ab736cff121631028bd6"}, {"sha": "f9f1fde1e55c78d9e69d84482aa244f9385e621e", "url": "https://api.github.com/repos/libdynd/libdynd/commits/f9f1fde1e55c78d9e69d84482aa244f9385e621e", "html_url": "https://github.com/libdynd/libdynd/commit/f9f1fde1e55c78d9e69d84482aa244f9385e621e"}]}, {"sha": "f9f1fde1e55c78d9e69d84482aa244f9385e621e", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-08-29T02:06:16Z"}, "committer": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-08-29T02:06:16Z"}, "message": "Fix for warning about unused global", "tree": {"sha": "9036b360a03d46fe1b619d0895d4c31d16fa28c7", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/9036b360a03d46fe1b619d0895d4c31d16fa28c7"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/f9f1fde1e55c78d9e69d84482aa244f9385e621e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/f9f1fde1e55c78d9e69d84482aa244f9385e621e", "html_url": "https://github.com/libdynd/libdynd/commit/f9f1fde1e55c78d9e69d84482aa244f9385e621e", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/f9f1fde1e55c78d9e69d84482aa244f9385e621e/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b2844c074568a3a908122026916a118a29095de", "url": "https://api.github.com/repos/libdynd/libdynd/commits/1b2844c074568a3a908122026916a118a29095de", "html_url": "https://github.com/libdynd/libdynd/commit/1b2844c074568a3a908122026916a118a29095de"}]}, {"sha": "1b2844c074568a3a908122026916a118a29095de", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-08-29T01:51:29Z"}, "committer": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-08-29T01:51:29Z"}, "message": "Reenable callable_type typevar substitution via generic type reconstruction", "tree": {"sha": "a6cf9019f170328025d9f9c7f768f8be3177a0e0", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/a6cf9019f170328025d9f9c7f768f8be3177a0e0"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/1b2844c074568a3a908122026916a118a29095de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/1b2844c074568a3a908122026916a118a29095de", "html_url": "https://github.com/libdynd/libdynd/commit/1b2844c074568a3a908122026916a118a29095de", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/1b2844c074568a3a908122026916a118a29095de/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4ce5f317fd92003e7b3c47e203ed39b70383891", "url": "https://api.github.com/repos/libdynd/libdynd/commits/f4ce5f317fd92003e7b3c47e203ed39b70383891", "html_url": "https://github.com/libdynd/libdynd/commit/f4ce5f317fd92003e7b3c47e203ed39b70383891"}]}, {"sha": "f4ce5f317fd92003e7b3c47e203ed39b70383891", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-08-28T20:58:31Z"}, "committer": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-08-28T21:02:37Z"}, "message": "Change all the parsed callable types to explicit ndt::make_type", "tree": {"sha": "173eb0036d9d0b0103b47d737680d127fea6e7fd", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/173eb0036d9d0b0103b47d737680d127fea6e7fd"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/f4ce5f317fd92003e7b3c47e203ed39b70383891", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/f4ce5f317fd92003e7b3c47e203ed39b70383891", "html_url": "https://github.com/libdynd/libdynd/commit/f4ce5f317fd92003e7b3c47e203ed39b70383891", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/f4ce5f317fd92003e7b3c47e203ed39b70383891/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53bd41b4cda4bf23b7a80674916c696b86ef8372", "url": "https://api.github.com/repos/libdynd/libdynd/commits/53bd41b4cda4bf23b7a80674916c696b86ef8372", "html_url": "https://github.com/libdynd/libdynd/commit/53bd41b4cda4bf23b7a80674916c696b86ef8372"}]}, {"sha": "53bd41b4cda4bf23b7a80674916c696b86ef8372", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-08-18T04:48:40Z"}, "committer": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-08-18T05:03:34Z"}, "message": "Move callable_type into libdynd", "tree": {"sha": "d11b85d3b2b4eba0753ea45490514896b95a7014", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/d11b85d3b2b4eba0753ea45490514896b95a7014"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/53bd41b4cda4bf23b7a80674916c696b86ef8372", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/53bd41b4cda4bf23b7a80674916c696b86ef8372", "html_url": "https://github.com/libdynd/libdynd/commit/53bd41b4cda4bf23b7a80674916c696b86ef8372", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/53bd41b4cda4bf23b7a80674916c696b86ef8372/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1eab3797347ba01fed1d4bdb9c48e455e26ec1f3", "url": "https://api.github.com/repos/libdynd/libdynd/commits/1eab3797347ba01fed1d4bdb9c48e455e26ec1f3", "html_url": "https://github.com/libdynd/libdynd/commit/1eab3797347ba01fed1d4bdb9c48e455e26ec1f3"}]}, {"sha": "1eab3797347ba01fed1d4bdb9c48e455e26ec1f3", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-08-14T19:33:11Z"}, "committer": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-08-14T19:33:11Z"}, "message": "Add function to register a type constructor for a known type id", "tree": {"sha": "119fed3248436d7517e02c8064457a13f0b04cf5", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/119fed3248436d7517e02c8064457a13f0b04cf5"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/1eab3797347ba01fed1d4bdb9c48e455e26ec1f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/1eab3797347ba01fed1d4bdb9c48e455e26ec1f3", "html_url": "https://github.com/libdynd/libdynd/commit/1eab3797347ba01fed1d4bdb9c48e455e26ec1f3", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/1eab3797347ba01fed1d4bdb9c48e455e26ec1f3/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ad2d94a6d962647e4f7ab736cff121631028bd6", "url": "https://api.github.com/repos/libdynd/libdynd/commits/6ad2d94a6d962647e4f7ab736cff121631028bd6", "html_url": "https://github.com/libdynd/libdynd/commit/6ad2d94a6d962647e4f7ab736cff121631028bd6"}]}, {"sha": "6ad2d94a6d962647e4f7ab736cff121631028bd6", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-08-11T22:35:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-11T22:35:12Z"}, "message": "Merge pull request #1312 from mwiebe/type_type\n\nRestructure type_type so it can be included from type.hpp", "tree": {"sha": "c9c4d796b12fd09a6b4e71f2b9d9283feae7ff68", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/c9c4d796b12fd09a6b4e71f2b9d9283feae7ff68"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/6ad2d94a6d962647e4f7ab736cff121631028bd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/6ad2d94a6d962647e4f7ab736cff121631028bd6", "html_url": "https://github.com/libdynd/libdynd/commit/6ad2d94a6d962647e4f7ab736cff121631028bd6", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/6ad2d94a6d962647e4f7ab736cff121631028bd6/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80df70faa4c62c190fef89d320dc1b51fd54f50f", "url": "https://api.github.com/repos/libdynd/libdynd/commits/80df70faa4c62c190fef89d320dc1b51fd54f50f", "html_url": "https://github.com/libdynd/libdynd/commit/80df70faa4c62c190fef89d320dc1b51fd54f50f"}, {"sha": "a8cceb924285c66ab1fc69d4e0454c1d53848950", "url": "https://api.github.com/repos/libdynd/libdynd/commits/a8cceb924285c66ab1fc69d4e0454c1d53848950", "html_url": "https://github.com/libdynd/libdynd/commit/a8cceb924285c66ab1fc69d4e0454c1d53848950"}]}, {"sha": "a8cceb924285c66ab1fc69d4e0454c1d53848950", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-08-11T22:02:50Z"}, "committer": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-08-11T22:02:50Z"}, "message": "Restructure type_type so it can be included from type.hpp", "tree": {"sha": "c9c4d796b12fd09a6b4e71f2b9d9283feae7ff68", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/c9c4d796b12fd09a6b4e71f2b9d9283feae7ff68"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/a8cceb924285c66ab1fc69d4e0454c1d53848950", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/a8cceb924285c66ab1fc69d4e0454c1d53848950", "html_url": "https://github.com/libdynd/libdynd/commit/a8cceb924285c66ab1fc69d4e0454c1d53848950", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/a8cceb924285c66ab1fc69d4e0454c1d53848950/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80df70faa4c62c190fef89d320dc1b51fd54f50f", "url": "https://api.github.com/repos/libdynd/libdynd/commits/80df70faa4c62c190fef89d320dc1b51fd54f50f", "html_url": "https://github.com/libdynd/libdynd/commit/80df70faa4c62c190fef89d320dc1b51fd54f50f"}]}, {"sha": "80df70faa4c62c190fef89d320dc1b51fd54f50f", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-08-11T20:24:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-11T20:24:09Z"}, "message": "Merge pull request #1311 from mwiebe/callable_parse\n\nMove more type parsing to use the type_registry mechanism", "tree": {"sha": "d1ec44b31c901d8c503ee5dd0bd237d1fd85412e", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/d1ec44b31c901d8c503ee5dd0bd237d1fd85412e"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/80df70faa4c62c190fef89d320dc1b51fd54f50f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/80df70faa4c62c190fef89d320dc1b51fd54f50f", "html_url": "https://github.com/libdynd/libdynd/commit/80df70faa4c62c190fef89d320dc1b51fd54f50f", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/80df70faa4c62c190fef89d320dc1b51fd54f50f/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2f8b5a970cbabc977c28752c94423901c5d93d0", "url": "https://api.github.com/repos/libdynd/libdynd/commits/b2f8b5a970cbabc977c28752c94423901c5d93d0", "html_url": "https://github.com/libdynd/libdynd/commit/b2f8b5a970cbabc977c28752c94423901c5d93d0"}, {"sha": "2a52ce5d397b66a1561f578437c306b3db286727", "url": "https://api.github.com/repos/libdynd/libdynd/commits/2a52ce5d397b66a1561f578437c306b3db286727", "html_url": "https://github.com/libdynd/libdynd/commit/2a52ce5d397b66a1561f578437c306b3db286727"}]}, {"sha": "2a52ce5d397b66a1561f578437c306b3db286727", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-08-11T18:33:08Z"}, "committer": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-08-11T18:51:34Z"}, "message": "Move more type parsing to use the type_registry mechanism", "tree": {"sha": "d1ec44b31c901d8c503ee5dd0bd237d1fd85412e", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/d1ec44b31c901d8c503ee5dd0bd237d1fd85412e"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/2a52ce5d397b66a1561f578437c306b3db286727", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/2a52ce5d397b66a1561f578437c306b3db286727", "html_url": "https://github.com/libdynd/libdynd/commit/2a52ce5d397b66a1561f578437c306b3db286727", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/2a52ce5d397b66a1561f578437c306b3db286727/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2f8b5a970cbabc977c28752c94423901c5d93d0", "url": "https://api.github.com/repos/libdynd/libdynd/commits/b2f8b5a970cbabc977c28752c94423901c5d93d0", "html_url": "https://github.com/libdynd/libdynd/commit/b2f8b5a970cbabc977c28752c94423901c5d93d0"}]}, {"sha": "b2f8b5a970cbabc977c28752c94423901c5d93d0", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-08-10T04:12:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-10T04:12:24Z"}, "message": "Merge pull request #1310 from mwiebe/fix_dim_kind_type\n\nFix dim_kind_type", "tree": {"sha": "b6717f48377cfbd4361ad8bde42ff953b12aadc6", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/b6717f48377cfbd4361ad8bde42ff953b12aadc6"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/b2f8b5a970cbabc977c28752c94423901c5d93d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/b2f8b5a970cbabc977c28752c94423901c5d93d0", "html_url": "https://github.com/libdynd/libdynd/commit/b2f8b5a970cbabc977c28752c94423901c5d93d0", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/b2f8b5a970cbabc977c28752c94423901c5d93d0/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e812d62db539912d0f9916081d261bc18fa7f239", "url": "https://api.github.com/repos/libdynd/libdynd/commits/e812d62db539912d0f9916081d261bc18fa7f239", "html_url": "https://github.com/libdynd/libdynd/commit/e812d62db539912d0f9916081d261bc18fa7f239"}, {"sha": "a59fecff95df0149041e44f9e723e7e6ccf2f1f0", "url": "https://api.github.com/repos/libdynd/libdynd/commits/a59fecff95df0149041e44f9e723e7e6ccf2f1f0", "html_url": "https://github.com/libdynd/libdynd/commit/a59fecff95df0149041e44f9e723e7e6ccf2f1f0"}]}, {"sha": "a59fecff95df0149041e44f9e723e7e6ccf2f1f0", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-08-09T06:05:06Z"}, "committer": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-08-10T03:41:21Z"}, "message": "dim_kind_type fixes and tests", "tree": {"sha": "b6717f48377cfbd4361ad8bde42ff953b12aadc6", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/b6717f48377cfbd4361ad8bde42ff953b12aadc6"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/a59fecff95df0149041e44f9e723e7e6ccf2f1f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/a59fecff95df0149041e44f9e723e7e6ccf2f1f0", "html_url": "https://github.com/libdynd/libdynd/commit/a59fecff95df0149041e44f9e723e7e6ccf2f1f0", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/a59fecff95df0149041e44f9e723e7e6ccf2f1f0/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f822527ba5c52f7f8db5808062cc12c729f4cc21", "url": "https://api.github.com/repos/libdynd/libdynd/commits/f822527ba5c52f7f8db5808062cc12c729f4cc21", "html_url": "https://github.com/libdynd/libdynd/commit/f822527ba5c52f7f8db5808062cc12c729f4cc21"}]}, {"sha": "f822527ba5c52f7f8db5808062cc12c729f4cc21", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-08-08T05:05:58Z"}, "committer": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-08-08T22:34:25Z"}, "message": "Fix up the dim_kind_type to actually be a dimension type", "tree": {"sha": "121c8ad7cea710044e60d7d0cb00eaf2798dcc34", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/121c8ad7cea710044e60d7d0cb00eaf2798dcc34"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/f822527ba5c52f7f8db5808062cc12c729f4cc21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/f822527ba5c52f7f8db5808062cc12c729f4cc21", "html_url": "https://github.com/libdynd/libdynd/commit/f822527ba5c52f7f8db5808062cc12c729f4cc21", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/f822527ba5c52f7f8db5808062cc12c729f4cc21/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e812d62db539912d0f9916081d261bc18fa7f239", "url": "https://api.github.com/repos/libdynd/libdynd/commits/e812d62db539912d0f9916081d261bc18fa7f239", "html_url": "https://github.com/libdynd/libdynd/commit/e812d62db539912d0f9916081d261bc18fa7f239"}]}, {"sha": "e812d62db539912d0f9916081d261bc18fa7f239", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-08-08T22:33:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-08T22:33:49Z"}, "message": "Merge pull request #1309 from mwiebe/callable_parse\n\nWork towards pluggable datashape parsing", "tree": {"sha": "79cbc24387d508cabdc6f0d87c1bfdca74c5c3d8", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/79cbc24387d508cabdc6f0d87c1bfdca74c5c3d8"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/e812d62db539912d0f9916081d261bc18fa7f239", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/e812d62db539912d0f9916081d261bc18fa7f239", "html_url": "https://github.com/libdynd/libdynd/commit/e812d62db539912d0f9916081d261bc18fa7f239", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/e812d62db539912d0f9916081d261bc18fa7f239/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65f822d00ac24069f3a51b7e88e8b85c0442e100", "url": "https://api.github.com/repos/libdynd/libdynd/commits/65f822d00ac24069f3a51b7e88e8b85c0442e100", "html_url": "https://github.com/libdynd/libdynd/commit/65f822d00ac24069f3a51b7e88e8b85c0442e100"}, {"sha": "c714c07df7f13c1c86013075af5ce00d279a8e2b", "url": "https://api.github.com/repos/libdynd/libdynd/commits/c714c07df7f13c1c86013075af5ce00d279a8e2b", "html_url": "https://github.com/libdynd/libdynd/commit/c714c07df7f13c1c86013075af5ce00d279a8e2b"}]}, {"sha": "c714c07df7f13c1c86013075af5ce00d279a8e2b", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-08-08T20:30:46Z"}, "committer": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-08-08T20:30:46Z"}, "message": "Work around seemingly incorrect warning when building with asan", "tree": {"sha": "79cbc24387d508cabdc6f0d87c1bfdca74c5c3d8", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/79cbc24387d508cabdc6f0d87c1bfdca74c5c3d8"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/c714c07df7f13c1c86013075af5ce00d279a8e2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/c714c07df7f13c1c86013075af5ce00d279a8e2b", "html_url": "https://github.com/libdynd/libdynd/commit/c714c07df7f13c1c86013075af5ce00d279a8e2b", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/c714c07df7f13c1c86013075af5ce00d279a8e2b/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4c29b93681dbd73e7235afebb940ed70329ad54", "url": "https://api.github.com/repos/libdynd/libdynd/commits/e4c29b93681dbd73e7235afebb940ed70329ad54", "html_url": "https://github.com/libdynd/libdynd/commit/e4c29b93681dbd73e7235afebb940ed70329ad54"}]}, {"sha": "e4c29b93681dbd73e7235afebb940ed70329ad54", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-08-08T03:57:37Z"}, "committer": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-08-08T15:51:29Z"}, "message": "Get all the tests passing with the current state of the parsers/type constructors", "tree": {"sha": "4f3ee0f430fb434e3e412dd688295b876da72239", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/4f3ee0f430fb434e3e412dd688295b876da72239"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/e4c29b93681dbd73e7235afebb940ed70329ad54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/e4c29b93681dbd73e7235afebb940ed70329ad54", "html_url": "https://github.com/libdynd/libdynd/commit/e4c29b93681dbd73e7235afebb940ed70329ad54", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/e4c29b93681dbd73e7235afebb940ed70329ad54/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b94643ea9ba97f98c6635a5aa43aa8c226f6a43e", "url": "https://api.github.com/repos/libdynd/libdynd/commits/b94643ea9ba97f98c6635a5aa43aa8c226f6a43e", "html_url": "https://github.com/libdynd/libdynd/commit/b94643ea9ba97f98c6635a5aa43aa8c226f6a43e"}]}, {"sha": "b94643ea9ba97f98c6635a5aa43aa8c226f6a43e", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-08-07T21:55:12Z"}, "committer": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-08-07T21:55:54Z"}, "message": "Add element type to type constructor, rename some parsing functions\n\nRather than defining two separate type constructor functions,\none for as a dimension type and another for as a scalar type,\none function is used which takes the element type or an uninitialized\ntype.", "tree": {"sha": "ab9c195ca8491b63f338eb52fd97a7a96a3bc720", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/ab9c195ca8491b63f338eb52fd97a7a96a3bc720"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/b94643ea9ba97f98c6635a5aa43aa8c226f6a43e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/b94643ea9ba97f98c6635a5aa43aa8c226f6a43e", "html_url": "https://github.com/libdynd/libdynd/commit/b94643ea9ba97f98c6635a5aa43aa8c226f6a43e", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/b94643ea9ba97f98c6635a5aa43aa8c226f6a43e/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e9b56315f80b81b65ec7e7829200378357b0787", "url": "https://api.github.com/repos/libdynd/libdynd/commits/2e9b56315f80b81b65ec7e7829200378357b0787", "html_url": "https://github.com/libdynd/libdynd/commit/2e9b56315f80b81b65ec7e7829200378357b0787"}]}, {"sha": "2e9b56315f80b81b65ec7e7829200378357b0787", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-08-04T05:53:39Z"}, "committer": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-08-04T06:01:53Z"}, "message": "Move a bunch of the type parsing into the respective classes implementing the type", "tree": {"sha": "de6fd9e7f6918c228be321cad22c64c72ffb936b", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/de6fd9e7f6918c228be321cad22c64c72ffb936b"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/2e9b56315f80b81b65ec7e7829200378357b0787", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/2e9b56315f80b81b65ec7e7829200378357b0787", "html_url": "https://github.com/libdynd/libdynd/commit/2e9b56315f80b81b65ec7e7829200378357b0787", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/2e9b56315f80b81b65ec7e7829200378357b0787/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "100bdd26188ff0625e9819ee3f3754b3382902a0", "url": "https://api.github.com/repos/libdynd/libdynd/commits/100bdd26188ff0625e9819ee3f3754b3382902a0", "html_url": "https://github.com/libdynd/libdynd/commit/100bdd26188ff0625e9819ee3f3754b3382902a0"}]}, {"sha": "100bdd26188ff0625e9819ee3f3754b3382902a0", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-08-03T05:16:19Z"}, "committer": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-08-03T15:04:30Z"}, "message": "Start with empty slots for the pluggable parsing", "tree": {"sha": "25c2678369d6f9df543750466f7f2e4941382f4b", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/25c2678369d6f9df543750466f7f2e4941382f4b"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/100bdd26188ff0625e9819ee3f3754b3382902a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/100bdd26188ff0625e9819ee3f3754b3382902a0", "html_url": "https://github.com/libdynd/libdynd/commit/100bdd26188ff0625e9819ee3f3754b3382902a0", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/100bdd26188ff0625e9819ee3f3754b3382902a0/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2365558f5fcc0f892091a4f58770a2c8066edad9", "url": "https://api.github.com/repos/libdynd/libdynd/commits/2365558f5fcc0f892091a4f58770a2c8066edad9", "html_url": "https://github.com/libdynd/libdynd/commit/2365558f5fcc0f892091a4f58770a2c8066edad9"}]}, {"sha": "2365558f5fcc0f892091a4f58770a2c8066edad9", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-08-01T05:04:31Z"}, "committer": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-08-01T19:44:34Z"}, "message": "Start the basic facility for pluggable type parsing", "tree": {"sha": "5f9cf7d7d5b1482b88b516ab85596cda739a79e7", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/5f9cf7d7d5b1482b88b516ab85596cda739a79e7"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/2365558f5fcc0f892091a4f58770a2c8066edad9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/2365558f5fcc0f892091a4f58770a2c8066edad9", "html_url": "https://github.com/libdynd/libdynd/commit/2365558f5fcc0f892091a4f58770a2c8066edad9", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/2365558f5fcc0f892091a4f58770a2c8066edad9/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "050431277ca9e084006c9ec1f95b00de5c6be74e", "url": "https://api.github.com/repos/libdynd/libdynd/commits/050431277ca9e084006c9ec1f95b00de5c6be74e", "html_url": "https://github.com/libdynd/libdynd/commit/050431277ca9e084006c9ec1f95b00de5c6be74e"}]}, {"sha": "050431277ca9e084006c9ec1f95b00de5c6be74e", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-08-01T02:50:06Z"}, "committer": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-08-01T02:50:06Z"}, "message": "Apply clang-format to various parsing code", "tree": {"sha": "67afdcb40b4dbc94bf8d61b46ecab8324b28bfa6", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/67afdcb40b4dbc94bf8d61b46ecab8324b28bfa6"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/050431277ca9e084006c9ec1f95b00de5c6be74e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/050431277ca9e084006c9ec1f95b00de5c6be74e", "html_url": "https://github.com/libdynd/libdynd/commit/050431277ca9e084006c9ec1f95b00de5c6be74e", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/050431277ca9e084006c9ec1f95b00de5c6be74e/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4a4a7ee518837d1fc5c428389a4cafbec309928", "url": "https://api.github.com/repos/libdynd/libdynd/commits/a4a4a7ee518837d1fc5c428389a4cafbec309928", "html_url": "https://github.com/libdynd/libdynd/commit/a4a4a7ee518837d1fc5c428389a4cafbec309928"}]}, {"sha": "a4a4a7ee518837d1fc5c428389a4cafbec309928", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-08-01T01:55:19Z"}, "committer": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-08-01T02:47:32Z"}, "message": "Reenable datashape parsing of generic type constructor arguments", "tree": {"sha": "1ee4576b5ce4e85ae8367796bc488e7fde6f1015", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/1ee4576b5ce4e85ae8367796bc488e7fde6f1015"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/a4a4a7ee518837d1fc5c428389a4cafbec309928", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/a4a4a7ee518837d1fc5c428389a4cafbec309928", "html_url": "https://github.com/libdynd/libdynd/commit/a4a4a7ee518837d1fc5c428389a4cafbec309928", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/a4a4a7ee518837d1fc5c428389a4cafbec309928/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab22d7a1a22db312cfbc6efa330659300dd89299", "url": "https://api.github.com/repos/libdynd/libdynd/commits/ab22d7a1a22db312cfbc6efa330659300dd89299", "html_url": "https://github.com/libdynd/libdynd/commit/ab22d7a1a22db312cfbc6efa330659300dd89299"}]}, {"sha": "ab22d7a1a22db312cfbc6efa330659300dd89299", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-07-19T17:06:40Z"}, "committer": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-07-31T18:30:36Z"}, "message": "Resurrect generic type constructor argument parsing", "tree": {"sha": "cd23aefe4d253537c78c9f16057da9ddfcc0da76", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/cd23aefe4d253537c78c9f16057da9ddfcc0da76"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/ab22d7a1a22db312cfbc6efa330659300dd89299", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/ab22d7a1a22db312cfbc6efa330659300dd89299", "html_url": "https://github.com/libdynd/libdynd/commit/ab22d7a1a22db312cfbc6efa330659300dd89299", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/ab22d7a1a22db312cfbc6efa330659300dd89299/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ab3ef652cd920599b5f2dbb266cf784da7ac858", "url": "https://api.github.com/repos/libdynd/libdynd/commits/1ab3ef652cd920599b5f2dbb266cf784da7ac858", "html_url": "https://github.com/libdynd/libdynd/commit/1ab3ef652cd920599b5f2dbb266cf784da7ac858"}]}, {"sha": "1ab3ef652cd920599b5f2dbb266cf784da7ac858", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-07-19T06:27:47Z"}, "committer": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-07-31T18:30:36Z"}, "message": "Move C++ value initialization from nd::array to nd::buffer", "tree": {"sha": "1eaf2ddbf68e3abdd966048d67a8439bb1c7dc1c", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/1eaf2ddbf68e3abdd966048d67a8439bb1c7dc1c"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/1ab3ef652cd920599b5f2dbb266cf784da7ac858", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/1ab3ef652cd920599b5f2dbb266cf784da7ac858", "html_url": "https://github.com/libdynd/libdynd/commit/1ab3ef652cd920599b5f2dbb266cf784da7ac858", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/1ab3ef652cd920599b5f2dbb266cf784da7ac858/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e5c274fd79340d736acff8799e6663046ba6494", "url": "https://api.github.com/repos/libdynd/libdynd/commits/1e5c274fd79340d736acff8799e6663046ba6494", "html_url": "https://github.com/libdynd/libdynd/commit/1e5c274fd79340d736acff8799e6663046ba6494"}]}, {"sha": "1e5c274fd79340d736acff8799e6663046ba6494", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-07-18T06:49:18Z"}, "committer": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-07-31T18:30:36Z"}, "message": "Move init.hpp from dynd to dyndt, rename to buffer_init.hpp", "tree": {"sha": "328e753c45d2f75ad80a400787b2b90f64d1ab74", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/328e753c45d2f75ad80a400787b2b90f64d1ab74"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/1e5c274fd79340d736acff8799e6663046ba6494", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/1e5c274fd79340d736acff8799e6663046ba6494", "html_url": "https://github.com/libdynd/libdynd/commit/1e5c274fd79340d736acff8799e6663046ba6494", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/1e5c274fd79340d736acff8799e6663046ba6494/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edd0229c00acb1e88a891d2eb9dbd1410e55852a", "url": "https://api.github.com/repos/libdynd/libdynd/commits/edd0229c00acb1e88a891d2eb9dbd1410e55852a", "html_url": "https://github.com/libdynd/libdynd/commit/edd0229c00acb1e88a891d2eb9dbd1410e55852a"}]}, {"sha": "edd0229c00acb1e88a891d2eb9dbd1410e55852a", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-07-17T23:12:35Z"}, "committer": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-07-31T18:30:36Z"}, "message": "Fix up/add some .hpp files in CMakeLists.txt", "tree": {"sha": "a91b7cd917d81be25b153b1783c65568c2be7ac1", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/a91b7cd917d81be25b153b1783c65568c2be7ac1"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/edd0229c00acb1e88a891d2eb9dbd1410e55852a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/edd0229c00acb1e88a891d2eb9dbd1410e55852a", "html_url": "https://github.com/libdynd/libdynd/commit/edd0229c00acb1e88a891d2eb9dbd1410e55852a", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/edd0229c00acb1e88a891d2eb9dbd1410e55852a/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65f822d00ac24069f3a51b7e88e8b85c0442e100", "url": "https://api.github.com/repos/libdynd/libdynd/commits/65f822d00ac24069f3a51b7e88e8b85c0442e100", "html_url": "https://github.com/libdynd/libdynd/commit/65f822d00ac24069f3a51b7e88e8b85c0442e100"}]}, {"sha": "65f822d00ac24069f3a51b7e88e8b85c0442e100", "commit": {"author": {"name": "Irwin Zaid", "email": "izaid@users.noreply.github.com", "date": "2016-07-29T13:47:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-29T13:47:17Z"}, "message": "Merge pull request #1308 from izaid/various\n\nAdded a variety of small fixes", "tree": {"sha": "6e307a58eb061afa731e51ad4e4ba68b12240aa3", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/6e307a58eb061afa731e51ad4e4ba68b12240aa3"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/65f822d00ac24069f3a51b7e88e8b85c0442e100", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/65f822d00ac24069f3a51b7e88e8b85c0442e100", "html_url": "https://github.com/libdynd/libdynd/commit/65f822d00ac24069f3a51b7e88e8b85c0442e100", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/65f822d00ac24069f3a51b7e88e8b85c0442e100/comments", "author": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31e94f5acba9333f45f419febbb4a4547285cdf6", "url": "https://api.github.com/repos/libdynd/libdynd/commits/31e94f5acba9333f45f419febbb4a4547285cdf6", "html_url": "https://github.com/libdynd/libdynd/commit/31e94f5acba9333f45f419febbb4a4547285cdf6"}, {"sha": "62a3a4617a873aac8b8132114437088dcfe7021c", "url": "https://api.github.com/repos/libdynd/libdynd/commits/62a3a4617a873aac8b8132114437088dcfe7021c", "html_url": "https://github.com/libdynd/libdynd/commit/62a3a4617a873aac8b8132114437088dcfe7021c"}]}, {"sha": "62a3a4617a873aac8b8132114437088dcfe7021c", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-29T12:35:38Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-29T12:35:38Z"}, "message": "Added a variety of small fixes", "tree": {"sha": "6e307a58eb061afa731e51ad4e4ba68b12240aa3", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/6e307a58eb061afa731e51ad4e4ba68b12240aa3"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/62a3a4617a873aac8b8132114437088dcfe7021c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/62a3a4617a873aac8b8132114437088dcfe7021c", "html_url": "https://github.com/libdynd/libdynd/commit/62a3a4617a873aac8b8132114437088dcfe7021c", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/62a3a4617a873aac8b8132114437088dcfe7021c/comments", "author": null, "committer": null, "parents": [{"sha": "31e94f5acba9333f45f419febbb4a4547285cdf6", "url": "https://api.github.com/repos/libdynd/libdynd/commits/31e94f5acba9333f45f419febbb4a4547285cdf6", "html_url": "https://github.com/libdynd/libdynd/commit/31e94f5acba9333f45f419febbb4a4547285cdf6"}]}, {"sha": "31e94f5acba9333f45f419febbb4a4547285cdf6", "commit": {"author": {"name": "Irwin Zaid", "email": "izaid@users.noreply.github.com", "date": "2016-07-29T09:02:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-29T09:02:33Z"}, "message": "Merge pull request #1307 from izaid/gtest\n\nMoved dynd_assertions.hpp to dynd/gtest.hpp", "tree": {"sha": "f7809d8a1f635baae51494143fc214979b420f75", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/f7809d8a1f635baae51494143fc214979b420f75"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/31e94f5acba9333f45f419febbb4a4547285cdf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/31e94f5acba9333f45f419febbb4a4547285cdf6", "html_url": "https://github.com/libdynd/libdynd/commit/31e94f5acba9333f45f419febbb4a4547285cdf6", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/31e94f5acba9333f45f419febbb4a4547285cdf6/comments", "author": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27c223c85aa6da132a77cf6d34a2b142315d20ab", "url": "https://api.github.com/repos/libdynd/libdynd/commits/27c223c85aa6da132a77cf6d34a2b142315d20ab", "html_url": "https://github.com/libdynd/libdynd/commit/27c223c85aa6da132a77cf6d34a2b142315d20ab"}, {"sha": "07e01c2e924f9ae411a5095831b79ba1d9426e7d", "url": "https://api.github.com/repos/libdynd/libdynd/commits/07e01c2e924f9ae411a5095831b79ba1d9426e7d", "html_url": "https://github.com/libdynd/libdynd/commit/07e01c2e924f9ae411a5095831b79ba1d9426e7d"}]}, {"sha": "07e01c2e924f9ae411a5095831b79ba1d9426e7d", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-29T08:32:55Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-29T08:32:55Z"}, "message": "Fixed CMakeLists.txt", "tree": {"sha": "f7809d8a1f635baae51494143fc214979b420f75", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/f7809d8a1f635baae51494143fc214979b420f75"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/07e01c2e924f9ae411a5095831b79ba1d9426e7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/07e01c2e924f9ae411a5095831b79ba1d9426e7d", "html_url": "https://github.com/libdynd/libdynd/commit/07e01c2e924f9ae411a5095831b79ba1d9426e7d", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/07e01c2e924f9ae411a5095831b79ba1d9426e7d/comments", "author": null, "committer": null, "parents": [{"sha": "b5fafe43c17bcf0bd94ca5be35a029a7b23e0565", "url": "https://api.github.com/repos/libdynd/libdynd/commits/b5fafe43c17bcf0bd94ca5be35a029a7b23e0565", "html_url": "https://github.com/libdynd/libdynd/commit/b5fafe43c17bcf0bd94ca5be35a029a7b23e0565"}]}, {"sha": "b5fafe43c17bcf0bd94ca5be35a029a7b23e0565", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-29T08:28:56Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-29T08:28:56Z"}, "message": "Moved dynd_assertions.hpp to dynd/gtest.hpp", "tree": {"sha": "36b587e98e86afcc818c72af1f2abe39a833810d", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/36b587e98e86afcc818c72af1f2abe39a833810d"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/b5fafe43c17bcf0bd94ca5be35a029a7b23e0565", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/b5fafe43c17bcf0bd94ca5be35a029a7b23e0565", "html_url": "https://github.com/libdynd/libdynd/commit/b5fafe43c17bcf0bd94ca5be35a029a7b23e0565", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/b5fafe43c17bcf0bd94ca5be35a029a7b23e0565/comments", "author": null, "committer": null, "parents": [{"sha": "27c223c85aa6da132a77cf6d34a2b142315d20ab", "url": "https://api.github.com/repos/libdynd/libdynd/commits/27c223c85aa6da132a77cf6d34a2b142315d20ab", "html_url": "https://github.com/libdynd/libdynd/commit/27c223c85aa6da132a77cf6d34a2b142315d20ab"}]}, {"sha": "27c223c85aa6da132a77cf6d34a2b142315d20ab", "commit": {"author": {"name": "Irwin Zaid", "email": "izaid@users.noreply.github.com", "date": "2016-07-28T14:09:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-28T14:09:19Z"}, "message": "Merge pull request #1306 from izaid/various\n\nAdding definitions of constexpr variables to fix optimization bug", "tree": {"sha": "ef8ad782b3bd3bdc8813ea93c770bdda5f2c8dfd", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/ef8ad782b3bd3bdc8813ea93c770bdda5f2c8dfd"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/27c223c85aa6da132a77cf6d34a2b142315d20ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/27c223c85aa6da132a77cf6d34a2b142315d20ab", "html_url": "https://github.com/libdynd/libdynd/commit/27c223c85aa6da132a77cf6d34a2b142315d20ab", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/27c223c85aa6da132a77cf6d34a2b142315d20ab/comments", "author": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d785a6cfc43f43fd655d87ae0dd482d989253e2", "url": "https://api.github.com/repos/libdynd/libdynd/commits/3d785a6cfc43f43fd655d87ae0dd482d989253e2", "html_url": "https://github.com/libdynd/libdynd/commit/3d785a6cfc43f43fd655d87ae0dd482d989253e2"}, {"sha": "ca2a5a20771287d93e1725a9f1b28a34dc75a89a", "url": "https://api.github.com/repos/libdynd/libdynd/commits/ca2a5a20771287d93e1725a9f1b28a34dc75a89a", "html_url": "https://github.com/libdynd/libdynd/commit/ca2a5a20771287d93e1725a9f1b28a34dc75a89a"}]}, {"sha": "ca2a5a20771287d93e1725a9f1b28a34dc75a89a", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-28T13:40:16Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-28T13:40:16Z"}, "message": "Removed inc_gtest", "tree": {"sha": "ef8ad782b3bd3bdc8813ea93c770bdda5f2c8dfd", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/ef8ad782b3bd3bdc8813ea93c770bdda5f2c8dfd"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/ca2a5a20771287d93e1725a9f1b28a34dc75a89a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/ca2a5a20771287d93e1725a9f1b28a34dc75a89a", "html_url": "https://github.com/libdynd/libdynd/commit/ca2a5a20771287d93e1725a9f1b28a34dc75a89a", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/ca2a5a20771287d93e1725a9f1b28a34dc75a89a/comments", "author": null, "committer": null, "parents": [{"sha": "cbcbab0183a0ebc8cf7402ce5584debb272876d7", "url": "https://api.github.com/repos/libdynd/libdynd/commits/cbcbab0183a0ebc8cf7402ce5584debb272876d7", "html_url": "https://github.com/libdynd/libdynd/commit/cbcbab0183a0ebc8cf7402ce5584debb272876d7"}]}, {"sha": "cbcbab0183a0ebc8cf7402ce5584debb272876d7", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-28T13:04:31Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-28T13:04:31Z"}, "message": "Added linker definition", "tree": {"sha": "10c5cac7d7f84361839dafc152cbf8724d4bf58c", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/10c5cac7d7f84361839dafc152cbf8724d4bf58c"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/cbcbab0183a0ebc8cf7402ce5584debb272876d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/cbcbab0183a0ebc8cf7402ce5584debb272876d7", "html_url": "https://github.com/libdynd/libdynd/commit/cbcbab0183a0ebc8cf7402ce5584debb272876d7", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/cbcbab0183a0ebc8cf7402ce5584debb272876d7/comments", "author": null, "committer": null, "parents": [{"sha": "3db1125595ca7c14a181559e096b0dafc00afa2a", "url": "https://api.github.com/repos/libdynd/libdynd/commits/3db1125595ca7c14a181559e096b0dafc00afa2a", "html_url": "https://github.com/libdynd/libdynd/commit/3db1125595ca7c14a181559e096b0dafc00afa2a"}]}, {"sha": "3db1125595ca7c14a181559e096b0dafc00afa2a", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-28T12:05:28Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-28T12:05:28Z"}, "message": "Trying with constexpr metadata_size", "tree": {"sha": "4aca0e4046bdd5e865d2896e7fba10bef676a1e6", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/4aca0e4046bdd5e865d2896e7fba10bef676a1e6"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/3db1125595ca7c14a181559e096b0dafc00afa2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/3db1125595ca7c14a181559e096b0dafc00afa2a", "html_url": "https://github.com/libdynd/libdynd/commit/3db1125595ca7c14a181559e096b0dafc00afa2a", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/3db1125595ca7c14a181559e096b0dafc00afa2a/comments", "author": null, "committer": null, "parents": [{"sha": "58224de9a6f60408391ccc1cf4dd07b0f4236828", "url": "https://api.github.com/repos/libdynd/libdynd/commits/58224de9a6f60408391ccc1cf4dd07b0f4236828", "html_url": "https://github.com/libdynd/libdynd/commit/58224de9a6f60408391ccc1cf4dd07b0f4236828"}]}, {"sha": "58224de9a6f60408391ccc1cf4dd07b0f4236828", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-28T11:35:13Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-28T11:35:13Z"}, "message": "Adding definitions of constexpr variables to fix optimization bug", "tree": {"sha": "a8a753f0dd91ebdb8f8fe3249cd62b41a6ddc0e9", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/a8a753f0dd91ebdb8f8fe3249cd62b41a6ddc0e9"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/58224de9a6f60408391ccc1cf4dd07b0f4236828", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/58224de9a6f60408391ccc1cf4dd07b0f4236828", "html_url": "https://github.com/libdynd/libdynd/commit/58224de9a6f60408391ccc1cf4dd07b0f4236828", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/58224de9a6f60408391ccc1cf4dd07b0f4236828/comments", "author": null, "committer": null, "parents": [{"sha": "3d785a6cfc43f43fd655d87ae0dd482d989253e2", "url": "https://api.github.com/repos/libdynd/libdynd/commits/3d785a6cfc43f43fd655d87ae0dd482d989253e2", "html_url": "https://github.com/libdynd/libdynd/commit/3d785a6cfc43f43fd655d87ae0dd482d989253e2"}]}, {"sha": "3d785a6cfc43f43fd655d87ae0dd482d989253e2", "commit": {"author": {"name": "Irwin Zaid", "email": "izaid@users.noreply.github.com", "date": "2016-07-28T10:16:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-28T10:16:37Z"}, "message": "Merge pull request #1305 from izaid/init\n\nAdded some tests to STLArray", "tree": {"sha": "429a1157d455a74d99b6b89f15cf8bf8c6e6b3fd", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/429a1157d455a74d99b6b89f15cf8bf8c6e6b3fd"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/3d785a6cfc43f43fd655d87ae0dd482d989253e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/3d785a6cfc43f43fd655d87ae0dd482d989253e2", "html_url": "https://github.com/libdynd/libdynd/commit/3d785a6cfc43f43fd655d87ae0dd482d989253e2", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/3d785a6cfc43f43fd655d87ae0dd482d989253e2/comments", "author": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c853724278522c0f357d638a1cf2c9ad0fd7af05", "url": "https://api.github.com/repos/libdynd/libdynd/commits/c853724278522c0f357d638a1cf2c9ad0fd7af05", "html_url": "https://github.com/libdynd/libdynd/commit/c853724278522c0f357d638a1cf2c9ad0fd7af05"}, {"sha": "9fe66f2e97ebb157a36c88c6675a48e974856ac5", "url": "https://api.github.com/repos/libdynd/libdynd/commits/9fe66f2e97ebb157a36c88c6675a48e974856ac5", "html_url": "https://github.com/libdynd/libdynd/commit/9fe66f2e97ebb157a36c88c6675a48e974856ac5"}]}, {"sha": "9fe66f2e97ebb157a36c88c6675a48e974856ac5", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-28T09:49:23Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-28T09:49:23Z"}, "message": "Added some tests to STLArray", "tree": {"sha": "429a1157d455a74d99b6b89f15cf8bf8c6e6b3fd", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/429a1157d455a74d99b6b89f15cf8bf8c6e6b3fd"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/9fe66f2e97ebb157a36c88c6675a48e974856ac5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/9fe66f2e97ebb157a36c88c6675a48e974856ac5", "html_url": "https://github.com/libdynd/libdynd/commit/9fe66f2e97ebb157a36c88c6675a48e974856ac5", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/9fe66f2e97ebb157a36c88c6675a48e974856ac5/comments", "author": null, "committer": null, "parents": [{"sha": "c853724278522c0f357d638a1cf2c9ad0fd7af05", "url": "https://api.github.com/repos/libdynd/libdynd/commits/c853724278522c0f357d638a1cf2c9ad0fd7af05", "html_url": "https://github.com/libdynd/libdynd/commit/c853724278522c0f357d638a1cf2c9ad0fd7af05"}]}, {"sha": "c853724278522c0f357d638a1cf2c9ad0fd7af05", "commit": {"author": {"name": "Irwin Zaid", "email": "izaid@users.noreply.github.com", "date": "2016-07-27T17:05:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-27T17:05:46Z"}, "message": "Merge pull request #1304 from izaid/init\n\nRefactoring around init_kernel", "tree": {"sha": "461843d41febbc4e72add7409f46a3853f35f912", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/461843d41febbc4e72add7409f46a3853f35f912"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/c853724278522c0f357d638a1cf2c9ad0fd7af05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/c853724278522c0f357d638a1cf2c9ad0fd7af05", "html_url": "https://github.com/libdynd/libdynd/commit/c853724278522c0f357d638a1cf2c9ad0fd7af05", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/c853724278522c0f357d638a1cf2c9ad0fd7af05/comments", "author": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04a741f07841ca2f2d06e26742f0aeee9149c111", "url": "https://api.github.com/repos/libdynd/libdynd/commits/04a741f07841ca2f2d06e26742f0aeee9149c111", "html_url": "https://github.com/libdynd/libdynd/commit/04a741f07841ca2f2d06e26742f0aeee9149c111"}, {"sha": "0b931ca85432e176ab195bb60f71057ab2d82d0c", "url": "https://api.github.com/repos/libdynd/libdynd/commits/0b931ca85432e176ab195bb60f71057ab2d82d0c", "html_url": "https://github.com/libdynd/libdynd/commit/0b931ca85432e176ab195bb60f71057ab2d82d0c"}]}, {"sha": "0b931ca85432e176ab195bb60f71057ab2d82d0c", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-27T16:34:32Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-27T16:34:32Z"}, "message": "Removed is_var variable", "tree": {"sha": "461843d41febbc4e72add7409f46a3853f35f912", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/461843d41febbc4e72add7409f46a3853f35f912"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/0b931ca85432e176ab195bb60f71057ab2d82d0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/0b931ca85432e176ab195bb60f71057ab2d82d0c", "html_url": "https://github.com/libdynd/libdynd/commit/0b931ca85432e176ab195bb60f71057ab2d82d0c", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/0b931ca85432e176ab195bb60f71057ab2d82d0c/comments", "author": null, "committer": null, "parents": [{"sha": "22cdf668064d6bbc96164828d8ae06ca5e6dfc3e", "url": "https://api.github.com/repos/libdynd/libdynd/commits/22cdf668064d6bbc96164828d8ae06ca5e6dfc3e", "html_url": "https://github.com/libdynd/libdynd/commit/22cdf668064d6bbc96164828d8ae06ca5e6dfc3e"}]}, {"sha": "22cdf668064d6bbc96164828d8ae06ca5e6dfc3e", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-27T16:19:25Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-27T16:19:25Z"}, "message": "Walked back a breaking change", "tree": {"sha": "7216534893b1ba00b9ae1c8ccdb8cb4315b6e1cf", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/7216534893b1ba00b9ae1c8ccdb8cb4315b6e1cf"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/22cdf668064d6bbc96164828d8ae06ca5e6dfc3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/22cdf668064d6bbc96164828d8ae06ca5e6dfc3e", "html_url": "https://github.com/libdynd/libdynd/commit/22cdf668064d6bbc96164828d8ae06ca5e6dfc3e", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/22cdf668064d6bbc96164828d8ae06ca5e6dfc3e/comments", "author": null, "committer": null, "parents": [{"sha": "cf7074072a5385f1418949de64ebc516165c60a4", "url": "https://api.github.com/repos/libdynd/libdynd/commits/cf7074072a5385f1418949de64ebc516165c60a4", "html_url": "https://github.com/libdynd/libdynd/commit/cf7074072a5385f1418949de64ebc516165c60a4"}]}, {"sha": "cf7074072a5385f1418949de64ebc516165c60a4", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-27T16:02:14Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-27T16:02:14Z"}, "message": "Updated temporary align_union hack", "tree": {"sha": "4c6cbd4f74931fe7eea9f73ef61a1ccad6af1031", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/4c6cbd4f74931fe7eea9f73ef61a1ccad6af1031"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/cf7074072a5385f1418949de64ebc516165c60a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/cf7074072a5385f1418949de64ebc516165c60a4", "html_url": "https://github.com/libdynd/libdynd/commit/cf7074072a5385f1418949de64ebc516165c60a4", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/cf7074072a5385f1418949de64ebc516165c60a4/comments", "author": null, "committer": null, "parents": [{"sha": "83ba8f2c67d398b34cd2c5459b82680edf91146a", "url": "https://api.github.com/repos/libdynd/libdynd/commits/83ba8f2c67d398b34cd2c5459b82680edf91146a", "html_url": "https://github.com/libdynd/libdynd/commit/83ba8f2c67d398b34cd2c5459b82680edf91146a"}]}, {"sha": "83ba8f2c67d398b34cd2c5459b82680edf91146a", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-27T15:35:44Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-27T15:35:44Z"}, "message": "Added max_sizeof template", "tree": {"sha": "d408300c8dc88fa2583bebc8b2f9d95cfbc3eb8b", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/d408300c8dc88fa2583bebc8b2f9d95cfbc3eb8b"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/83ba8f2c67d398b34cd2c5459b82680edf91146a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/83ba8f2c67d398b34cd2c5459b82680edf91146a", "html_url": "https://github.com/libdynd/libdynd/commit/83ba8f2c67d398b34cd2c5459b82680edf91146a", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/83ba8f2c67d398b34cd2c5459b82680edf91146a/comments", "author": null, "committer": null, "parents": [{"sha": "4eca88068c57d728c6d896cd293cd2967e995698", "url": "https://api.github.com/repos/libdynd/libdynd/commits/4eca88068c57d728c6d896cd293cd2967e995698", "html_url": "https://github.com/libdynd/libdynd/commit/4eca88068c57d728c6d896cd293cd2967e995698"}]}, {"sha": "4eca88068c57d728c6d896cd293cd2967e995698", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-27T15:13:40Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-27T15:13:40Z"}, "message": "Moved to ternary operator", "tree": {"sha": "72ce29bc1f88847038fc7ff92986cd2ce289d62f", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/72ce29bc1f88847038fc7ff92986cd2ce289d62f"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/4eca88068c57d728c6d896cd293cd2967e995698", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/4eca88068c57d728c6d896cd293cd2967e995698", "html_url": "https://github.com/libdynd/libdynd/commit/4eca88068c57d728c6d896cd293cd2967e995698", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/4eca88068c57d728c6d896cd293cd2967e995698/comments", "author": null, "committer": null, "parents": [{"sha": "dc96fbea9ab2bc36a163685100674e1624da7121", "url": "https://api.github.com/repos/libdynd/libdynd/commits/dc96fbea9ab2bc36a163685100674e1624da7121", "html_url": "https://github.com/libdynd/libdynd/commit/dc96fbea9ab2bc36a163685100674e1624da7121"}]}, {"sha": "dc96fbea9ab2bc36a163685100674e1624da7121", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-27T14:57:15Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-27T14:57:15Z"}, "message": "Trying with simpler aligned_union", "tree": {"sha": "7da7743524192cfad3ec0b815724a0835c26ae8d", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/7da7743524192cfad3ec0b815724a0835c26ae8d"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/dc96fbea9ab2bc36a163685100674e1624da7121", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/dc96fbea9ab2bc36a163685100674e1624da7121", "html_url": "https://github.com/libdynd/libdynd/commit/dc96fbea9ab2bc36a163685100674e1624da7121", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/dc96fbea9ab2bc36a163685100674e1624da7121/comments", "author": null, "committer": null, "parents": [{"sha": "3dbcdf6d6aae4c7f029a3b380c6ca52c59f469e7", "url": "https://api.github.com/repos/libdynd/libdynd/commits/3dbcdf6d6aae4c7f029a3b380c6ca52c59f469e7", "html_url": "https://github.com/libdynd/libdynd/commit/3dbcdf6d6aae4c7f029a3b380c6ca52c59f469e7"}]}, {"sha": "3dbcdf6d6aae4c7f029a3b380c6ca52c59f469e7", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-27T14:37:13Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-27T14:37:13Z"}, "message": "Added an include algorithm", "tree": {"sha": "8923cb19cff828afdc54c13a8f905bd41824e0d7", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/8923cb19cff828afdc54c13a8f905bd41824e0d7"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/3dbcdf6d6aae4c7f029a3b380c6ca52c59f469e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/3dbcdf6d6aae4c7f029a3b380c6ca52c59f469e7", "html_url": "https://github.com/libdynd/libdynd/commit/3dbcdf6d6aae4c7f029a3b380c6ca52c59f469e7", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/3dbcdf6d6aae4c7f029a3b380c6ca52c59f469e7/comments", "author": null, "committer": null, "parents": [{"sha": "305ec52f5902e828e0f1b0fe1341e674e069396c", "url": "https://api.github.com/repos/libdynd/libdynd/commits/305ec52f5902e828e0f1b0fe1341e674e069396c", "html_url": "https://github.com/libdynd/libdynd/commit/305ec52f5902e828e0f1b0fe1341e674e069396c"}]}, {"sha": "305ec52f5902e828e0f1b0fe1341e674e069396c", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-27T14:28:26Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-27T14:28:26Z"}, "message": "Another attempt at an std fix", "tree": {"sha": "d5d2b0196c2960e439fc7fcb61792bec6ff042f4", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/d5d2b0196c2960e439fc7fcb61792bec6ff042f4"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/305ec52f5902e828e0f1b0fe1341e674e069396c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/305ec52f5902e828e0f1b0fe1341e674e069396c", "html_url": "https://github.com/libdynd/libdynd/commit/305ec52f5902e828e0f1b0fe1341e674e069396c", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/305ec52f5902e828e0f1b0fe1341e674e069396c/comments", "author": null, "committer": null, "parents": [{"sha": "0a44107a23a64ed0603115b5244d9a2d1478461e", "url": "https://api.github.com/repos/libdynd/libdynd/commits/0a44107a23a64ed0603115b5244d9a2d1478461e", "html_url": "https://github.com/libdynd/libdynd/commit/0a44107a23a64ed0603115b5244d9a2d1478461e"}]}, {"sha": "0a44107a23a64ed0603115b5244d9a2d1478461e", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-27T13:51:27Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-27T13:51:27Z"}, "message": "Checking GCC minor version", "tree": {"sha": "99e6a2b2b73919be24cffd480b2e696ce3189d05", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/99e6a2b2b73919be24cffd480b2e696ce3189d05"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/0a44107a23a64ed0603115b5244d9a2d1478461e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/0a44107a23a64ed0603115b5244d9a2d1478461e", "html_url": "https://github.com/libdynd/libdynd/commit/0a44107a23a64ed0603115b5244d9a2d1478461e", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/0a44107a23a64ed0603115b5244d9a2d1478461e/comments", "author": null, "committer": null, "parents": [{"sha": "7a2eb91ae0fbde7d9c149267f54a65310617d19d", "url": "https://api.github.com/repos/libdynd/libdynd/commits/7a2eb91ae0fbde7d9c149267f54a65310617d19d", "html_url": "https://github.com/libdynd/libdynd/commit/7a2eb91ae0fbde7d9c149267f54a65310617d19d"}]}, {"sha": "7a2eb91ae0fbde7d9c149267f54a65310617d19d", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-27T13:45:55Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-27T13:45:55Z"}, "message": "Checking GCC version", "tree": {"sha": "8676fd8867da708fcf9c8d6455b6243d99b16716", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/8676fd8867da708fcf9c8d6455b6243d99b16716"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/7a2eb91ae0fbde7d9c149267f54a65310617d19d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/7a2eb91ae0fbde7d9c149267f54a65310617d19d", "html_url": "https://github.com/libdynd/libdynd/commit/7a2eb91ae0fbde7d9c149267f54a65310617d19d", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/7a2eb91ae0fbde7d9c149267f54a65310617d19d/comments", "author": null, "committer": null, "parents": [{"sha": "bf2775b430f7e05cc0520843c189dfb9617e7120", "url": "https://api.github.com/repos/libdynd/libdynd/commits/bf2775b430f7e05cc0520843c189dfb9617e7120", "html_url": "https://github.com/libdynd/libdynd/commit/bf2775b430f7e05cc0520843c189dfb9617e7120"}]}, {"sha": "bf2775b430f7e05cc0520843c189dfb9617e7120", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-27T13:36:29Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-27T13:36:29Z"}, "message": "Added GCC 4.9 workaround", "tree": {"sha": "05d2614daea4bdf9a489bc4908ca2664a62d1299", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/05d2614daea4bdf9a489bc4908ca2664a62d1299"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/bf2775b430f7e05cc0520843c189dfb9617e7120", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/bf2775b430f7e05cc0520843c189dfb9617e7120", "html_url": "https://github.com/libdynd/libdynd/commit/bf2775b430f7e05cc0520843c189dfb9617e7120", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/bf2775b430f7e05cc0520843c189dfb9617e7120/comments", "author": null, "committer": null, "parents": [{"sha": "026c05c58ee34708d2620015b74e690301690963", "url": "https://api.github.com/repos/libdynd/libdynd/commits/026c05c58ee34708d2620015b74e690301690963", "html_url": "https://github.com/libdynd/libdynd/commit/026c05c58ee34708d2620015b74e690301690963"}]}, {"sha": "026c05c58ee34708d2620015b74e690301690963", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-27T13:21:02Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-27T13:21:02Z"}, "message": "Checking GCC test", "tree": {"sha": "e12e0b9bfc45a11dc4dc83aff918b17c6016a706", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/e12e0b9bfc45a11dc4dc83aff918b17c6016a706"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/026c05c58ee34708d2620015b74e690301690963", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/026c05c58ee34708d2620015b74e690301690963", "html_url": "https://github.com/libdynd/libdynd/commit/026c05c58ee34708d2620015b74e690301690963", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/026c05c58ee34708d2620015b74e690301690963/comments", "author": null, "committer": null, "parents": [{"sha": "d84c563a835dd9d0276f31d350db4cdede1dc4ea", "url": "https://api.github.com/repos/libdynd/libdynd/commits/d84c563a835dd9d0276f31d350db4cdede1dc4ea", "html_url": "https://github.com/libdynd/libdynd/commit/d84c563a835dd9d0276f31d350db4cdede1dc4ea"}]}, {"sha": "d84c563a835dd9d0276f31d350db4cdede1dc4ea", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-27T12:32:47Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-27T12:32:47Z"}, "message": "Switched back to aligned_union_t", "tree": {"sha": "b7deac32ac2311d73803ea201bc8c97478fe6ca9", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/b7deac32ac2311d73803ea201bc8c97478fe6ca9"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/d84c563a835dd9d0276f31d350db4cdede1dc4ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/d84c563a835dd9d0276f31d350db4cdede1dc4ea", "html_url": "https://github.com/libdynd/libdynd/commit/d84c563a835dd9d0276f31d350db4cdede1dc4ea", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/d84c563a835dd9d0276f31d350db4cdede1dc4ea/comments", "author": null, "committer": null, "parents": [{"sha": "b5e81f66ed6d482ff7fa4fb08838334a33400ce6", "url": "https://api.github.com/repos/libdynd/libdynd/commits/b5e81f66ed6d482ff7fa4fb08838334a33400ce6", "html_url": "https://github.com/libdynd/libdynd/commit/b5e81f66ed6d482ff7fa4fb08838334a33400ce6"}]}, {"sha": "b5e81f66ed6d482ff7fa4fb08838334a33400ce6", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-27T12:15:10Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-27T12:15:10Z"}, "message": "Trying with char buffer", "tree": {"sha": "2bb1191295daf7365fa319442e76f72c0944238b", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/2bb1191295daf7365fa319442e76f72c0944238b"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/b5e81f66ed6d482ff7fa4fb08838334a33400ce6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/b5e81f66ed6d482ff7fa4fb08838334a33400ce6", "html_url": "https://github.com/libdynd/libdynd/commit/b5e81f66ed6d482ff7fa4fb08838334a33400ce6", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/b5e81f66ed6d482ff7fa4fb08838334a33400ce6/comments", "author": null, "committer": null, "parents": [{"sha": "73d9a7ea929943a3906db6824788293cb625183c", "url": "https://api.github.com/repos/libdynd/libdynd/commits/73d9a7ea929943a3906db6824788293cb625183c", "html_url": "https://github.com/libdynd/libdynd/commit/73d9a7ea929943a3906db6824788293cb625183c"}]}, {"sha": "73d9a7ea929943a3906db6824788293cb625183c", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-27T12:05:56Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-27T12:05:56Z"}, "message": "Added our own aligned_union", "tree": {"sha": "9b0d035ef93a43340f21432bbfc7f8a30377d0db", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/9b0d035ef93a43340f21432bbfc7f8a30377d0db"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/73d9a7ea929943a3906db6824788293cb625183c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/73d9a7ea929943a3906db6824788293cb625183c", "html_url": "https://github.com/libdynd/libdynd/commit/73d9a7ea929943a3906db6824788293cb625183c", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/73d9a7ea929943a3906db6824788293cb625183c/comments", "author": null, "committer": null, "parents": [{"sha": "3568f329e036ba6ae1cb43455fa3826c04b72e73", "url": "https://api.github.com/repos/libdynd/libdynd/commits/3568f329e036ba6ae1cb43455fa3826c04b72e73", "html_url": "https://github.com/libdynd/libdynd/commit/3568f329e036ba6ae1cb43455fa3826c04b72e73"}]}, {"sha": "3568f329e036ba6ae1cb43455fa3826c04b72e73", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-27T11:50:56Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-27T11:50:56Z"}, "message": "Added an include type_traits", "tree": {"sha": "5326cda9883ff245a68346518b304f802983eb3b", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/5326cda9883ff245a68346518b304f802983eb3b"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/3568f329e036ba6ae1cb43455fa3826c04b72e73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/3568f329e036ba6ae1cb43455fa3826c04b72e73", "html_url": "https://github.com/libdynd/libdynd/commit/3568f329e036ba6ae1cb43455fa3826c04b72e73", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/3568f329e036ba6ae1cb43455fa3826c04b72e73/comments", "author": null, "committer": null, "parents": [{"sha": "79987e11d4eae67dd5fc7484bd49ad444f499b65", "url": "https://api.github.com/repos/libdynd/libdynd/commits/79987e11d4eae67dd5fc7484bd49ad444f499b65", "html_url": "https://github.com/libdynd/libdynd/commit/79987e11d4eae67dd5fc7484bd49ad444f499b65"}]}, {"sha": "79987e11d4eae67dd5fc7484bd49ad444f499b65", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-27T11:45:47Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-27T11:45:47Z"}, "message": "Trying just aligned_union", "tree": {"sha": "124abd437e876b8a1ee7c115c32b1de30171b3f0", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/124abd437e876b8a1ee7c115c32b1de30171b3f0"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/79987e11d4eae67dd5fc7484bd49ad444f499b65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/79987e11d4eae67dd5fc7484bd49ad444f499b65", "html_url": "https://github.com/libdynd/libdynd/commit/79987e11d4eae67dd5fc7484bd49ad444f499b65", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/79987e11d4eae67dd5fc7484bd49ad444f499b65/comments", "author": null, "committer": null, "parents": [{"sha": "87f4f2c8d9d019b2b1ab8bac95971e340e6001a4", "url": "https://api.github.com/repos/libdynd/libdynd/commits/87f4f2c8d9d019b2b1ab8bac95971e340e6001a4", "html_url": "https://github.com/libdynd/libdynd/commit/87f4f2c8d9d019b2b1ab8bac95971e340e6001a4"}]}, {"sha": "87f4f2c8d9d019b2b1ab8bac95971e340e6001a4", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-27T11:32:21Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-27T11:32:21Z"}, "message": "Added a destructor", "tree": {"sha": "2b0dcc86c846fe7c9dff57e97bde2feff8389b25", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/2b0dcc86c846fe7c9dff57e97bde2feff8389b25"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/87f4f2c8d9d019b2b1ab8bac95971e340e6001a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/87f4f2c8d9d019b2b1ab8bac95971e340e6001a4", "html_url": "https://github.com/libdynd/libdynd/commit/87f4f2c8d9d019b2b1ab8bac95971e340e6001a4", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/87f4f2c8d9d019b2b1ab8bac95971e340e6001a4/comments", "author": null, "committer": null, "parents": [{"sha": "bf315b29560e3952d039ace4351eff85315e8a3e", "url": "https://api.github.com/repos/libdynd/libdynd/commits/bf315b29560e3952d039ace4351eff85315e8a3e", "html_url": "https://github.com/libdynd/libdynd/commit/bf315b29560e3952d039ace4351eff85315e8a3e"}]}, {"sha": "bf315b29560e3952d039ace4351eff85315e8a3e", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-27T11:07:08Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-27T11:07:08Z"}, "message": "Split out var_dim_init_kernel", "tree": {"sha": "41d2c3f851650a454867864e342662ae6da13ffa", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/41d2c3f851650a454867864e342662ae6da13ffa"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/bf315b29560e3952d039ace4351eff85315e8a3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/bf315b29560e3952d039ace4351eff85315e8a3e", "html_url": "https://github.com/libdynd/libdynd/commit/bf315b29560e3952d039ace4351eff85315e8a3e", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/bf315b29560e3952d039ace4351eff85315e8a3e/comments", "author": null, "committer": null, "parents": [{"sha": "d49894aad8ee4df72afadf85139bfee85b81158a", "url": "https://api.github.com/repos/libdynd/libdynd/commits/d49894aad8ee4df72afadf85139bfee85b81158a", "html_url": "https://github.com/libdynd/libdynd/commit/d49894aad8ee4df72afadf85139bfee85b81158a"}]}, {"sha": "d49894aad8ee4df72afadf85139bfee85b81158a", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-27T09:56:29Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-27T09:56:29Z"}, "message": "Replaced part of the init_kernel for std::initializer_list", "tree": {"sha": "1b67fe9da222e11a20448a731ccd761cadded0a9", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/1b67fe9da222e11a20448a731ccd761cadded0a9"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/d49894aad8ee4df72afadf85139bfee85b81158a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/d49894aad8ee4df72afadf85139bfee85b81158a", "html_url": "https://github.com/libdynd/libdynd/commit/d49894aad8ee4df72afadf85139bfee85b81158a", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/d49894aad8ee4df72afadf85139bfee85b81158a/comments", "author": null, "committer": null, "parents": [{"sha": "0ff2679885b7bb825889a53fa37380a2231e643f", "url": "https://api.github.com/repos/libdynd/libdynd/commits/0ff2679885b7bb825889a53fa37380a2231e643f", "html_url": "https://github.com/libdynd/libdynd/commit/0ff2679885b7bb825889a53fa37380a2231e643f"}]}, {"sha": "0ff2679885b7bb825889a53fa37380a2231e643f", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-27T08:48:45Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-27T08:48:45Z"}, "message": "Removed container_init for std::vector", "tree": {"sha": "da6242d0346087ec04ef28993da803f2afa9b01a", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/da6242d0346087ec04ef28993da803f2afa9b01a"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/0ff2679885b7bb825889a53fa37380a2231e643f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/0ff2679885b7bb825889a53fa37380a2231e643f", "html_url": "https://github.com/libdynd/libdynd/commit/0ff2679885b7bb825889a53fa37380a2231e643f", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/0ff2679885b7bb825889a53fa37380a2231e643f/comments", "author": null, "committer": null, "parents": [{"sha": "04a741f07841ca2f2d06e26742f0aeee9149c111", "url": "https://api.github.com/repos/libdynd/libdynd/commits/04a741f07841ca2f2d06e26742f0aeee9149c111", "html_url": "https://github.com/libdynd/libdynd/commit/04a741f07841ca2f2d06e26742f0aeee9149c111"}]}, {"sha": "04a741f07841ca2f2d06e26742f0aeee9149c111", "commit": {"author": {"name": "Irwin Zaid", "email": "izaid@users.noreply.github.com", "date": "2016-07-27T01:01:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-27T01:01:43Z"}, "message": "Merge pull request #1303 from izaid/various2\n\nRefactoring around init_kernel", "tree": {"sha": "80959ec129231a92d73c5735883a55e72da1a89b", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/80959ec129231a92d73c5735883a55e72da1a89b"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/04a741f07841ca2f2d06e26742f0aeee9149c111", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/04a741f07841ca2f2d06e26742f0aeee9149c111", "html_url": "https://github.com/libdynd/libdynd/commit/04a741f07841ca2f2d06e26742f0aeee9149c111", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/04a741f07841ca2f2d06e26742f0aeee9149c111/comments", "author": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f88235de52738be298bb78b36a009997af2f857", "url": "https://api.github.com/repos/libdynd/libdynd/commits/2f88235de52738be298bb78b36a009997af2f857", "html_url": "https://github.com/libdynd/libdynd/commit/2f88235de52738be298bb78b36a009997af2f857"}, {"sha": "7c17468bcb39b39a5993a41977195560180d7a4e", "url": "https://api.github.com/repos/libdynd/libdynd/commits/7c17468bcb39b39a5993a41977195560180d7a4e", "html_url": "https://github.com/libdynd/libdynd/commit/7c17468bcb39b39a5993a41977195560180d7a4e"}]}, {"sha": "7c17468bcb39b39a5993a41977195560180d7a4e", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-27T00:35:03Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-27T00:35:03Z"}, "message": "Fix for MSVC", "tree": {"sha": "80959ec129231a92d73c5735883a55e72da1a89b", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/80959ec129231a92d73c5735883a55e72da1a89b"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/7c17468bcb39b39a5993a41977195560180d7a4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/7c17468bcb39b39a5993a41977195560180d7a4e", "html_url": "https://github.com/libdynd/libdynd/commit/7c17468bcb39b39a5993a41977195560180d7a4e", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/7c17468bcb39b39a5993a41977195560180d7a4e/comments", "author": null, "committer": null, "parents": [{"sha": "e9dff800242fe9f36f9efdd7073e6dc1fd9d109b", "url": "https://api.github.com/repos/libdynd/libdynd/commits/e9dff800242fe9f36f9efdd7073e6dc1fd9d109b", "html_url": "https://github.com/libdynd/libdynd/commit/e9dff800242fe9f36f9efdd7073e6dc1fd9d109b"}]}, {"sha": "e9dff800242fe9f36f9efdd7073e6dc1fd9d109b", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-27T00:15:50Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-27T00:15:50Z"}, "message": "Cleaned up init_kernel for fixed_dim", "tree": {"sha": "7a5495853db26ce99b7591298d7f4aaac3cfc301", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/7a5495853db26ce99b7591298d7f4aaac3cfc301"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/e9dff800242fe9f36f9efdd7073e6dc1fd9d109b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/e9dff800242fe9f36f9efdd7073e6dc1fd9d109b", "html_url": "https://github.com/libdynd/libdynd/commit/e9dff800242fe9f36f9efdd7073e6dc1fd9d109b", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/e9dff800242fe9f36f9efdd7073e6dc1fd9d109b/comments", "author": null, "committer": null, "parents": [{"sha": "47e7267f4fa6ae9228c92543909ca7201248059c", "url": "https://api.github.com/repos/libdynd/libdynd/commits/47e7267f4fa6ae9228c92543909ca7201248059c", "html_url": "https://github.com/libdynd/libdynd/commit/47e7267f4fa6ae9228c92543909ca7201248059c"}]}, {"sha": "47e7267f4fa6ae9228c92543909ca7201248059c", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-26T23:03:53Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-26T23:03:53Z"}, "message": "Merged T[N] init_kernel into the others", "tree": {"sha": "08f71253796c278c0fa2451cc450b55e81f62c10", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/08f71253796c278c0fa2451cc450b55e81f62c10"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/47e7267f4fa6ae9228c92543909ca7201248059c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/47e7267f4fa6ae9228c92543909ca7201248059c", "html_url": "https://github.com/libdynd/libdynd/commit/47e7267f4fa6ae9228c92543909ca7201248059c", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/47e7267f4fa6ae9228c92543909ca7201248059c/comments", "author": null, "committer": null, "parents": [{"sha": "32bb11f450d30f1242c5245f2b755a74391b9ea4", "url": "https://api.github.com/repos/libdynd/libdynd/commits/32bb11f450d30f1242c5245f2b755a74391b9ea4", "html_url": "https://github.com/libdynd/libdynd/commit/32bb11f450d30f1242c5245f2b755a74391b9ea4"}]}, {"sha": "32bb11f450d30f1242c5245f2b755a74391b9ea4", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-26T21:58:20Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-26T21:58:20Z"}, "message": "Added test for 2D array", "tree": {"sha": "6ce265c44f97f7274a6f18bd306983635b2554ce", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/6ce265c44f97f7274a6f18bd306983635b2554ce"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/32bb11f450d30f1242c5245f2b755a74391b9ea4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/32bb11f450d30f1242c5245f2b755a74391b9ea4", "html_url": "https://github.com/libdynd/libdynd/commit/32bb11f450d30f1242c5245f2b755a74391b9ea4", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/32bb11f450d30f1242c5245f2b755a74391b9ea4/comments", "author": null, "committer": null, "parents": [{"sha": "6568baa4d27e74b7fb48caf4e11f69ba57207ac4", "url": "https://api.github.com/repos/libdynd/libdynd/commits/6568baa4d27e74b7fb48caf4e11f69ba57207ac4", "html_url": "https://github.com/libdynd/libdynd/commit/6568baa4d27e74b7fb48caf4e11f69ba57207ac4"}]}, {"sha": "6568baa4d27e74b7fb48caf4e11f69ba57207ac4", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-26T20:21:41Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-26T20:21:41Z"}, "message": "Switched to is_contiguous container trait", "tree": {"sha": "2cfdc9876b11767e470d8341ba35e38df8f4255f", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/2cfdc9876b11767e470d8341ba35e38df8f4255f"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/6568baa4d27e74b7fb48caf4e11f69ba57207ac4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/6568baa4d27e74b7fb48caf4e11f69ba57207ac4", "html_url": "https://github.com/libdynd/libdynd/commit/6568baa4d27e74b7fb48caf4e11f69ba57207ac4", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/6568baa4d27e74b7fb48caf4e11f69ba57207ac4/comments", "author": null, "committer": null, "parents": [{"sha": "3265ff93ca33a9749541a184991367adbd42b109", "url": "https://api.github.com/repos/libdynd/libdynd/commits/3265ff93ca33a9749541a184991367adbd42b109", "html_url": "https://github.com/libdynd/libdynd/commit/3265ff93ca33a9749541a184991367adbd42b109"}]}, {"sha": "3265ff93ca33a9749541a184991367adbd42b109", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-26T19:46:33Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-26T19:46:33Z"}, "message": "Moved traits<T[N]> into fixed_dim_type.hpp", "tree": {"sha": "69545bafcdd5d411aa89bc50c0faff3fc9e82e25", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/69545bafcdd5d411aa89bc50c0faff3fc9e82e25"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/3265ff93ca33a9749541a184991367adbd42b109", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/3265ff93ca33a9749541a184991367adbd42b109", "html_url": "https://github.com/libdynd/libdynd/commit/3265ff93ca33a9749541a184991367adbd42b109", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/3265ff93ca33a9749541a184991367adbd42b109/comments", "author": null, "committer": null, "parents": [{"sha": "ee1cf0de9180dc610dd12fb06795d5818eaff79e", "url": "https://api.github.com/repos/libdynd/libdynd/commits/ee1cf0de9180dc610dd12fb06795d5818eaff79e", "html_url": "https://github.com/libdynd/libdynd/commit/ee1cf0de9180dc610dd12fb06795d5818eaff79e"}]}, {"sha": "ee1cf0de9180dc610dd12fb06795d5818eaff79e", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-26T17:39:24Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-26T17:39:24Z"}, "message": "Swapped in more value_type_t", "tree": {"sha": "80744be707085f446b2bb4e2d16e417c8c2550b0", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/80744be707085f446b2bb4e2d16e417c8c2550b0"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/ee1cf0de9180dc610dd12fb06795d5818eaff79e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/ee1cf0de9180dc610dd12fb06795d5818eaff79e", "html_url": "https://github.com/libdynd/libdynd/commit/ee1cf0de9180dc610dd12fb06795d5818eaff79e", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/ee1cf0de9180dc610dd12fb06795d5818eaff79e/comments", "author": null, "committer": null, "parents": [{"sha": "4a6532a92549973bb5277d57fa81e7eac1e3b673", "url": "https://api.github.com/repos/libdynd/libdynd/commits/4a6532a92549973bb5277d57fa81e7eac1e3b673", "html_url": "https://github.com/libdynd/libdynd/commit/4a6532a92549973bb5277d57fa81e7eac1e3b673"}]}, {"sha": "4a6532a92549973bb5277d57fa81e7eac1e3b673", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-26T17:16:53Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-26T17:16:53Z"}, "message": "Added value_type_t", "tree": {"sha": "db9b7c652bbc9dc49827118aadeafd648b27d052", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/db9b7c652bbc9dc49827118aadeafd648b27d052"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/4a6532a92549973bb5277d57fa81e7eac1e3b673", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/4a6532a92549973bb5277d57fa81e7eac1e3b673", "html_url": "https://github.com/libdynd/libdynd/commit/4a6532a92549973bb5277d57fa81e7eac1e3b673", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/4a6532a92549973bb5277d57fa81e7eac1e3b673/comments", "author": null, "committer": null, "parents": [{"sha": "d999f341e40343aec1161e52ed568ec4c2ae3402", "url": "https://api.github.com/repos/libdynd/libdynd/commits/d999f341e40343aec1161e52ed568ec4c2ae3402", "html_url": "https://github.com/libdynd/libdynd/commit/d999f341e40343aec1161e52ed568ec4c2ae3402"}]}, {"sha": "d999f341e40343aec1161e52ed568ec4c2ae3402", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-26T17:04:58Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-26T17:04:58Z"}, "message": "Removed closures from fixed_dim_init_kernel", "tree": {"sha": "0e78a385dea795fa74c070805c40ed0e96b4d350", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/0e78a385dea795fa74c070805c40ed0e96b4d350"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/d999f341e40343aec1161e52ed568ec4c2ae3402", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/d999f341e40343aec1161e52ed568ec4c2ae3402", "html_url": "https://github.com/libdynd/libdynd/commit/d999f341e40343aec1161e52ed568ec4c2ae3402", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/d999f341e40343aec1161e52ed568ec4c2ae3402/comments", "author": null, "committer": null, "parents": [{"sha": "fbd11878ebaabf403fc39ff4eb2338f7b634927e", "url": "https://api.github.com/repos/libdynd/libdynd/commits/fbd11878ebaabf403fc39ff4eb2338f7b634927e", "html_url": "https://github.com/libdynd/libdynd/commit/fbd11878ebaabf403fc39ff4eb2338f7b634927e"}]}, {"sha": "fbd11878ebaabf403fc39ff4eb2338f7b634927e", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-26T16:40:51Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-26T16:40:51Z"}, "message": "Removed old init_from_c_array struct", "tree": {"sha": "2866870c4329b88ee9d5fd26dbeda6650c76dfc4", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/2866870c4329b88ee9d5fd26dbeda6650c76dfc4"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/fbd11878ebaabf403fc39ff4eb2338f7b634927e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/fbd11878ebaabf403fc39ff4eb2338f7b634927e", "html_url": "https://github.com/libdynd/libdynd/commit/fbd11878ebaabf403fc39ff4eb2338f7b634927e", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/fbd11878ebaabf403fc39ff4eb2338f7b634927e/comments", "author": null, "committer": null, "parents": [{"sha": "794873b468ade08af2917a62c68fd4c2824386bd", "url": "https://api.github.com/repos/libdynd/libdynd/commits/794873b468ade08af2917a62c68fd4c2824386bd", "html_url": "https://github.com/libdynd/libdynd/commit/794873b468ade08af2917a62c68fd4c2824386bd"}]}, {"sha": "794873b468ade08af2917a62c68fd4c2824386bd", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-26T16:22:04Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-26T16:22:04Z"}, "message": "Added enable_if_t to fixed_dim_init_kernel", "tree": {"sha": "a6efb8ac6c690e4f9a0d5f4a6ccb21f677aedf13", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/a6efb8ac6c690e4f9a0d5f4a6ccb21f677aedf13"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/794873b468ade08af2917a62c68fd4c2824386bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/794873b468ade08af2917a62c68fd4c2824386bd", "html_url": "https://github.com/libdynd/libdynd/commit/794873b468ade08af2917a62c68fd4c2824386bd", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/794873b468ade08af2917a62c68fd4c2824386bd/comments", "author": null, "committer": null, "parents": [{"sha": "4ee4413d744c0a01a13652711b144dff5b5292b1", "url": "https://api.github.com/repos/libdynd/libdynd/commits/4ee4413d744c0a01a13652711b144dff5b5292b1", "html_url": "https://github.com/libdynd/libdynd/commit/4ee4413d744c0a01a13652711b144dff5b5292b1"}]}, {"sha": "4ee4413d744c0a01a13652711b144dff5b5292b1", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-26T16:09:26Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-26T16:09:26Z"}, "message": "Added enable_if_t to init_kernel_c_array", "tree": {"sha": "db2f4d47f3e921e094164ad7cd6b0d9a7618a220", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/db2f4d47f3e921e094164ad7cd6b0d9a7618a220"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/4ee4413d744c0a01a13652711b144dff5b5292b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/4ee4413d744c0a01a13652711b144dff5b5292b1", "html_url": "https://github.com/libdynd/libdynd/commit/4ee4413d744c0a01a13652711b144dff5b5292b1", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/4ee4413d744c0a01a13652711b144dff5b5292b1/comments", "author": null, "committer": null, "parents": [{"sha": "399e838b86458a2c1c8e5c3062253bc05ac74177", "url": "https://api.github.com/repos/libdynd/libdynd/commits/399e838b86458a2c1c8e5c3062253bc05ac74177", "html_url": "https://github.com/libdynd/libdynd/commit/399e838b86458a2c1c8e5c3062253bc05ac74177"}]}, {"sha": "399e838b86458a2c1c8e5c3062253bc05ac74177", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-26T15:52:41Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-26T15:52:41Z"}, "message": "Added fixed_dim_init_kernel", "tree": {"sha": "1172279d2bac665a9ffb3b19859312fb39cd2d18", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/1172279d2bac665a9ffb3b19859312fb39cd2d18"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/399e838b86458a2c1c8e5c3062253bc05ac74177", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/399e838b86458a2c1c8e5c3062253bc05ac74177", "html_url": "https://github.com/libdynd/libdynd/commit/399e838b86458a2c1c8e5c3062253bc05ac74177", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/399e838b86458a2c1c8e5c3062253bc05ac74177/comments", "author": null, "committer": null, "parents": [{"sha": "2f88235de52738be298bb78b36a009997af2f857", "url": "https://api.github.com/repos/libdynd/libdynd/commits/2f88235de52738be298bb78b36a009997af2f857", "html_url": "https://github.com/libdynd/libdynd/commit/2f88235de52738be298bb78b36a009997af2f857"}]}, {"sha": "2f88235de52738be298bb78b36a009997af2f857", "commit": {"author": {"name": "Irwin Zaid", "email": "izaid@users.noreply.github.com", "date": "2016-07-26T07:45:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-26T07:45:00Z"}, "message": "Merge pull request #1301 from izaid/init\n\nHunting down MSVC bug in tuple init", "tree": {"sha": "86c9eca80a55b1ee0696824ec948856d24d6d64a", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/86c9eca80a55b1ee0696824ec948856d24d6d64a"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/2f88235de52738be298bb78b36a009997af2f857", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/2f88235de52738be298bb78b36a009997af2f857", "html_url": "https://github.com/libdynd/libdynd/commit/2f88235de52738be298bb78b36a009997af2f857", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/2f88235de52738be298bb78b36a009997af2f857/comments", "author": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aaca433e30e3a38c2fd342a611a96e696d660f81", "url": "https://api.github.com/repos/libdynd/libdynd/commits/aaca433e30e3a38c2fd342a611a96e696d660f81", "html_url": "https://github.com/libdynd/libdynd/commit/aaca433e30e3a38c2fd342a611a96e696d660f81"}, {"sha": "f16ad0ea9dcc877b561bb3bebe058d31aa264b7a", "url": "https://api.github.com/repos/libdynd/libdynd/commits/f16ad0ea9dcc877b561bb3bebe058d31aa264b7a", "html_url": "https://github.com/libdynd/libdynd/commit/f16ad0ea9dcc877b561bb3bebe058d31aa264b7a"}]}, {"sha": "f16ad0ea9dcc877b561bb3bebe058d31aa264b7a", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-25T16:35:10Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-25T16:35:10Z"}, "message": "Some minor updates to tuple tests", "tree": {"sha": "86c9eca80a55b1ee0696824ec948856d24d6d64a", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/86c9eca80a55b1ee0696824ec948856d24d6d64a"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/f16ad0ea9dcc877b561bb3bebe058d31aa264b7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/f16ad0ea9dcc877b561bb3bebe058d31aa264b7a", "html_url": "https://github.com/libdynd/libdynd/commit/f16ad0ea9dcc877b561bb3bebe058d31aa264b7a", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/f16ad0ea9dcc877b561bb3bebe058d31aa264b7a/comments", "author": null, "committer": null, "parents": [{"sha": "c49e340b4fd527f0cd3f4aa9883c78dcb1365198", "url": "https://api.github.com/repos/libdynd/libdynd/commits/c49e340b4fd527f0cd3f4aa9883c78dcb1365198", "html_url": "https://github.com/libdynd/libdynd/commit/c49e340b4fd527f0cd3f4aa9883c78dcb1365198"}]}, {"sha": "c49e340b4fd527f0cd3f4aa9883c78dcb1365198", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-25T16:18:20Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-25T16:18:20Z"}, "message": "Changed CArray constructor test", "tree": {"sha": "e595745799616a08158cdf4df0235c027396912c", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/e595745799616a08158cdf4df0235c027396912c"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/c49e340b4fd527f0cd3f4aa9883c78dcb1365198", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/c49e340b4fd527f0cd3f4aa9883c78dcb1365198", "html_url": "https://github.com/libdynd/libdynd/commit/c49e340b4fd527f0cd3f4aa9883c78dcb1365198", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/c49e340b4fd527f0cd3f4aa9883c78dcb1365198/comments", "author": null, "committer": null, "parents": [{"sha": "30a2ab0d0c53c4261ef051ac0f15eb8e6fae444b", "url": "https://api.github.com/repos/libdynd/libdynd/commits/30a2ab0d0c53c4261ef051ac0f15eb8e6fae444b", "html_url": "https://github.com/libdynd/libdynd/commit/30a2ab0d0c53c4261ef051ac0f15eb8e6fae444b"}]}, {"sha": "30a2ab0d0c53c4261ef051ac0f15eb8e6fae444b", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-25T15:42:17Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-25T15:42:17Z"}, "message": "Added another tuple test", "tree": {"sha": "fddc190522884e16eb804c9db7e92f8559d1ac28", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/fddc190522884e16eb804c9db7e92f8559d1ac28"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/30a2ab0d0c53c4261ef051ac0f15eb8e6fae444b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/30a2ab0d0c53c4261ef051ac0f15eb8e6fae444b", "html_url": "https://github.com/libdynd/libdynd/commit/30a2ab0d0c53c4261ef051ac0f15eb8e6fae444b", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/30a2ab0d0c53c4261ef051ac0f15eb8e6fae444b/comments", "author": null, "committer": null, "parents": [{"sha": "9d594c194d3c27b81bf43f60b2d56c0d0eab2d8e", "url": "https://api.github.com/repos/libdynd/libdynd/commits/9d594c194d3c27b81bf43f60b2d56c0d0eab2d8e", "html_url": "https://github.com/libdynd/libdynd/commit/9d594c194d3c27b81bf43f60b2d56c0d0eab2d8e"}]}, {"sha": "9d594c194d3c27b81bf43f60b2d56c0d0eab2d8e", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-25T15:29:39Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-25T15:29:39Z"}, "message": "Modified the tuple test", "tree": {"sha": "44e601c7674f172ac76581c05cad2f55da8389d9", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/44e601c7674f172ac76581c05cad2f55da8389d9"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/9d594c194d3c27b81bf43f60b2d56c0d0eab2d8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/9d594c194d3c27b81bf43f60b2d56c0d0eab2d8e", "html_url": "https://github.com/libdynd/libdynd/commit/9d594c194d3c27b81bf43f60b2d56c0d0eab2d8e", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/9d594c194d3c27b81bf43f60b2d56c0d0eab2d8e/comments", "author": null, "committer": null, "parents": [{"sha": "0fe390bb97c8b7699364ae5e9c7c9c73c30e23d1", "url": "https://api.github.com/repos/libdynd/libdynd/commits/0fe390bb97c8b7699364ae5e9c7c9c73c30e23d1", "html_url": "https://github.com/libdynd/libdynd/commit/0fe390bb97c8b7699364ae5e9c7c9c73c30e23d1"}]}, {"sha": "0fe390bb97c8b7699364ae5e9c7c9c73c30e23d1", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-25T14:34:07Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-25T14:34:07Z"}, "message": "A bit of refactoring", "tree": {"sha": "02084e33430a2348165b784db5e86b7ba0ec7799", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/02084e33430a2348165b784db5e86b7ba0ec7799"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/0fe390bb97c8b7699364ae5e9c7c9c73c30e23d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/0fe390bb97c8b7699364ae5e9c7c9c73c30e23d1", "html_url": "https://github.com/libdynd/libdynd/commit/0fe390bb97c8b7699364ae5e9c7c9c73c30e23d1", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/0fe390bb97c8b7699364ae5e9c7c9c73c30e23d1/comments", "author": null, "committer": null, "parents": [{"sha": "2f7e0aaddfed127b85649cf98bd899e934581d50", "url": "https://api.github.com/repos/libdynd/libdynd/commits/2f7e0aaddfed127b85649cf98bd899e934581d50", "html_url": "https://github.com/libdynd/libdynd/commit/2f7e0aaddfed127b85649cf98bd899e934581d50"}]}, {"sha": "2f7e0aaddfed127b85649cf98bd899e934581d50", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-25T14:09:48Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-25T14:09:48Z"}, "message": "Added a constructor for std::array", "tree": {"sha": "e0702e9818a775befe7888754617daabebab5bbd", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/e0702e9818a775befe7888754617daabebab5bbd"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/2f7e0aaddfed127b85649cf98bd899e934581d50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/2f7e0aaddfed127b85649cf98bd899e934581d50", "html_url": "https://github.com/libdynd/libdynd/commit/2f7e0aaddfed127b85649cf98bd899e934581d50", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/2f7e0aaddfed127b85649cf98bd899e934581d50/comments", "author": null, "committer": null, "parents": [{"sha": "9b016bd16f074d301790e4936331530d19dae7f0", "url": "https://api.github.com/repos/libdynd/libdynd/commits/9b016bd16f074d301790e4936331530d19dae7f0", "html_url": "https://github.com/libdynd/libdynd/commit/9b016bd16f074d301790e4936331530d19dae7f0"}]}, {"sha": "9b016bd16f074d301790e4936331530d19dae7f0", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-21T19:31:57Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-21T19:31:57Z"}, "message": "Testing tuple initialization", "tree": {"sha": "da57cc4e0b8483aa1a82d27019ffa9bf15a561c6", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/da57cc4e0b8483aa1a82d27019ffa9bf15a561c6"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/9b016bd16f074d301790e4936331530d19dae7f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/9b016bd16f074d301790e4936331530d19dae7f0", "html_url": "https://github.com/libdynd/libdynd/commit/9b016bd16f074d301790e4936331530d19dae7f0", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/9b016bd16f074d301790e4936331530d19dae7f0/comments", "author": null, "committer": null, "parents": [{"sha": "578e8f7967555fd936fc5e4abb1d0d4c5933a856", "url": "https://api.github.com/repos/libdynd/libdynd/commits/578e8f7967555fd936fc5e4abb1d0d4c5933a856", "html_url": "https://github.com/libdynd/libdynd/commit/578e8f7967555fd936fc5e4abb1d0d4c5933a856"}]}, {"sha": "578e8f7967555fd936fc5e4abb1d0d4c5933a856", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-21T16:48:35Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-21T16:48:35Z"}, "message": "Added in metadata increment", "tree": {"sha": "2cc5df155eff364df50817dc2522fa30cd41c796", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/2cc5df155eff364df50817dc2522fa30cd41c796"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/578e8f7967555fd936fc5e4abb1d0d4c5933a856", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/578e8f7967555fd936fc5e4abb1d0d4c5933a856", "html_url": "https://github.com/libdynd/libdynd/commit/578e8f7967555fd936fc5e4abb1d0d4c5933a856", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/578e8f7967555fd936fc5e4abb1d0d4c5933a856/comments", "author": null, "committer": null, "parents": [{"sha": "2ddcf654b6ef177c019a5449f119b33040ea3247", "url": "https://api.github.com/repos/libdynd/libdynd/commits/2ddcf654b6ef177c019a5449f119b33040ea3247", "html_url": "https://github.com/libdynd/libdynd/commit/2ddcf654b6ef177c019a5449f119b33040ea3247"}]}, {"sha": "2ddcf654b6ef177c019a5449f119b33040ea3247", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-21T16:33:12Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-21T16:33:12Z"}, "message": "Next change", "tree": {"sha": "83d0b86d72b65031c5d2dd0febfafd251aa93df2", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/83d0b86d72b65031c5d2dd0febfafd251aa93df2"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/2ddcf654b6ef177c019a5449f119b33040ea3247", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/2ddcf654b6ef177c019a5449f119b33040ea3247", "html_url": "https://github.com/libdynd/libdynd/commit/2ddcf654b6ef177c019a5449f119b33040ea3247", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/2ddcf654b6ef177c019a5449f119b33040ea3247/comments", "author": null, "committer": null, "parents": [{"sha": "32a5146d193a6db8a42b8f461927c9be9df46e07", "url": "https://api.github.com/repos/libdynd/libdynd/commits/32a5146d193a6db8a42b8f461927c9be9df46e07", "html_url": "https://github.com/libdynd/libdynd/commit/32a5146d193a6db8a42b8f461927c9be9df46e07"}]}, {"sha": "32a5146d193a6db8a42b8f461927c9be9df46e07", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-21T15:21:16Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-21T15:21:16Z"}, "message": "Removed tp from init_kernel constructor signature", "tree": {"sha": "0e3bd6c4505ff4fe8b7342b0b3f119316a28ec7f", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/0e3bd6c4505ff4fe8b7342b0b3f119316a28ec7f"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/32a5146d193a6db8a42b8f461927c9be9df46e07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/32a5146d193a6db8a42b8f461927c9be9df46e07", "html_url": "https://github.com/libdynd/libdynd/commit/32a5146d193a6db8a42b8f461927c9be9df46e07", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/32a5146d193a6db8a42b8f461927c9be9df46e07/comments", "author": null, "committer": null, "parents": [{"sha": "03fc9f40e43ca0d00b15415d45f73863c05b931c", "url": "https://api.github.com/repos/libdynd/libdynd/commits/03fc9f40e43ca0d00b15415d45f73863c05b931c", "html_url": "https://github.com/libdynd/libdynd/commit/03fc9f40e43ca0d00b15415d45f73863c05b931c"}]}, {"sha": "03fc9f40e43ca0d00b15415d45f73863c05b931c", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-21T15:09:40Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-21T15:09:40Z"}, "message": "Using the first field type instead of tp", "tree": {"sha": "eaf2e546e5ab2380d566e7eec53bd6480554ab37", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/eaf2e546e5ab2380d566e7eec53bd6480554ab37"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/03fc9f40e43ca0d00b15415d45f73863c05b931c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/03fc9f40e43ca0d00b15415d45f73863c05b931c", "html_url": "https://github.com/libdynd/libdynd/commit/03fc9f40e43ca0d00b15415d45f73863c05b931c", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/03fc9f40e43ca0d00b15415d45f73863c05b931c/comments", "author": null, "committer": null, "parents": [{"sha": "7e3a734de525079e71b42991f535960a58ea9ac4", "url": "https://api.github.com/repos/libdynd/libdynd/commits/7e3a734de525079e71b42991f535960a58ea9ac4", "html_url": "https://github.com/libdynd/libdynd/commit/7e3a734de525079e71b42991f535960a58ea9ac4"}]}, {"sha": "7e3a734de525079e71b42991f535960a58ea9ac4", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-21T15:00:59Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-21T15:00:59Z"}, "message": "Testing with getting the field types", "tree": {"sha": "ebd8bf78a58439cabd1957db8bb4141d06faa54d", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/ebd8bf78a58439cabd1957db8bb4141d06faa54d"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/7e3a734de525079e71b42991f535960a58ea9ac4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/7e3a734de525079e71b42991f535960a58ea9ac4", "html_url": "https://github.com/libdynd/libdynd/commit/7e3a734de525079e71b42991f535960a58ea9ac4", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/7e3a734de525079e71b42991f535960a58ea9ac4/comments", "author": null, "committer": null, "parents": [{"sha": "41598eb4bbcd8f48703840d97174aaea04b0147a", "url": "https://api.github.com/repos/libdynd/libdynd/commits/41598eb4bbcd8f48703840d97174aaea04b0147a", "html_url": "https://github.com/libdynd/libdynd/commit/41598eb4bbcd8f48703840d97174aaea04b0147a"}]}, {"sha": "41598eb4bbcd8f48703840d97174aaea04b0147a", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-21T12:24:07Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-21T12:24:07Z"}, "message": "Testing constructor dispatch", "tree": {"sha": "03cc6de6328b1bfce7dc19a3af0158f79e262418", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/03cc6de6328b1bfce7dc19a3af0158f79e262418"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/41598eb4bbcd8f48703840d97174aaea04b0147a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/41598eb4bbcd8f48703840d97174aaea04b0147a", "html_url": "https://github.com/libdynd/libdynd/commit/41598eb4bbcd8f48703840d97174aaea04b0147a", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/41598eb4bbcd8f48703840d97174aaea04b0147a/comments", "author": null, "committer": null, "parents": [{"sha": "5bea245ff93710ec1f8ad30db0d60d3a7e613655", "url": "https://api.github.com/repos/libdynd/libdynd/commits/5bea245ff93710ec1f8ad30db0d60d3a7e613655", "html_url": "https://github.com/libdynd/libdynd/commit/5bea245ff93710ec1f8ad30db0d60d3a7e613655"}]}, {"sha": "5bea245ff93710ec1f8ad30db0d60d3a7e613655", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-21T12:11:34Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-21T12:11:34Z"}, "message": "Disentangled includes", "tree": {"sha": "41cd103bec73c3351010b2cdb1e112c025ef63f6", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/41cd103bec73c3351010b2cdb1e112c025ef63f6"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/5bea245ff93710ec1f8ad30db0d60d3a7e613655", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/5bea245ff93710ec1f8ad30db0d60d3a7e613655", "html_url": "https://github.com/libdynd/libdynd/commit/5bea245ff93710ec1f8ad30db0d60d3a7e613655", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/5bea245ff93710ec1f8ad30db0d60d3a7e613655/comments", "author": null, "committer": null, "parents": [{"sha": "58234bf9d26d7e26f6f55acffa7f021b8d55454b", "url": "https://api.github.com/repos/libdynd/libdynd/commits/58234bf9d26d7e26f6f55acffa7f021b8d55454b", "html_url": "https://github.com/libdynd/libdynd/commit/58234bf9d26d7e26f6f55acffa7f021b8d55454b"}]}, {"sha": "58234bf9d26d7e26f6f55acffa7f021b8d55454b", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-20T16:59:38Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-20T16:59:38Z"}, "message": "Testing tuple initialization with initializer list", "tree": {"sha": "10159351f8db806df8ff5870363b6cfcd73ba8f1", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/10159351f8db806df8ff5870363b6cfcd73ba8f1"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/58234bf9d26d7e26f6f55acffa7f021b8d55454b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/58234bf9d26d7e26f6f55acffa7f021b8d55454b", "html_url": "https://github.com/libdynd/libdynd/commit/58234bf9d26d7e26f6f55acffa7f021b8d55454b", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/58234bf9d26d7e26f6f55acffa7f021b8d55454b/comments", "author": null, "committer": null, "parents": [{"sha": "b24ef050337beb41bc9479a01de7eb92896f9cef", "url": "https://api.github.com/repos/libdynd/libdynd/commits/b24ef050337beb41bc9479a01de7eb92896f9cef", "html_url": "https://github.com/libdynd/libdynd/commit/b24ef050337beb41bc9479a01de7eb92896f9cef"}]}, {"sha": "b24ef050337beb41bc9479a01de7eb92896f9cef", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-20T16:52:54Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-20T16:52:54Z"}, "message": "Removed const from single in init_kernel", "tree": {"sha": "73314dead87115301073be4e073adf95a08ddf56", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/73314dead87115301073be4e073adf95a08ddf56"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/b24ef050337beb41bc9479a01de7eb92896f9cef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/b24ef050337beb41bc9479a01de7eb92896f9cef", "html_url": "https://github.com/libdynd/libdynd/commit/b24ef050337beb41bc9479a01de7eb92896f9cef", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/b24ef050337beb41bc9479a01de7eb92896f9cef/comments", "author": null, "committer": null, "parents": [{"sha": "8d5046f1fffd53a0436b6ade1829cb042d1a8a76", "url": "https://api.github.com/repos/libdynd/libdynd/commits/8d5046f1fffd53a0436b6ade1829cb042d1a8a76", "html_url": "https://github.com/libdynd/libdynd/commit/8d5046f1fffd53a0436b6ade1829cb042d1a8a76"}]}, {"sha": "8d5046f1fffd53a0436b6ade1829cb042d1a8a76", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-20T15:09:55Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-20T15:09:55Z"}, "message": "Testing os x", "tree": {"sha": "3ac8abf19baf2a45135ed84ab2a5097957fc3dec", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/3ac8abf19baf2a45135ed84ab2a5097957fc3dec"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/8d5046f1fffd53a0436b6ade1829cb042d1a8a76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/8d5046f1fffd53a0436b6ade1829cb042d1a8a76", "html_url": "https://github.com/libdynd/libdynd/commit/8d5046f1fffd53a0436b6ade1829cb042d1a8a76", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/8d5046f1fffd53a0436b6ade1829cb042d1a8a76/comments", "author": null, "committer": null, "parents": [{"sha": "5f25cf311401174ff84ad613eefe9dd453840ff0", "url": "https://api.github.com/repos/libdynd/libdynd/commits/5f25cf311401174ff84ad613eefe9dd453840ff0", "html_url": "https://github.com/libdynd/libdynd/commit/5f25cf311401174ff84ad613eefe9dd453840ff0"}]}, {"sha": "5f25cf311401174ff84ad613eefe9dd453840ff0", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-20T14:52:21Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-20T14:52:21Z"}, "message": "Testing fix for MSVC", "tree": {"sha": "2745f3193582dcfe8374a5fa0bcdb1eaa49a2671", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/2745f3193582dcfe8374a5fa0bcdb1eaa49a2671"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/5f25cf311401174ff84ad613eefe9dd453840ff0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/5f25cf311401174ff84ad613eefe9dd453840ff0", "html_url": "https://github.com/libdynd/libdynd/commit/5f25cf311401174ff84ad613eefe9dd453840ff0", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/5f25cf311401174ff84ad613eefe9dd453840ff0/comments", "author": null, "committer": null, "parents": [{"sha": "3ea41952351ad30ea2f9b504dc463cc33d2d609d", "url": "https://api.github.com/repos/libdynd/libdynd/commits/3ea41952351ad30ea2f9b504dc463cc33d2d609d", "html_url": "https://github.com/libdynd/libdynd/commit/3ea41952351ad30ea2f9b504dc463cc33d2d609d"}]}, {"sha": "3ea41952351ad30ea2f9b504dc463cc33d2d609d", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-20T14:22:46Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-20T14:22:46Z"}, "message": "Testing templated operator() on MSVC", "tree": {"sha": "44c1f9abbd0da41a1e3c453c6b9153a26efdde96", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/44c1f9abbd0da41a1e3c453c6b9153a26efdde96"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/3ea41952351ad30ea2f9b504dc463cc33d2d609d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/3ea41952351ad30ea2f9b504dc463cc33d2d609d", "html_url": "https://github.com/libdynd/libdynd/commit/3ea41952351ad30ea2f9b504dc463cc33d2d609d", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/3ea41952351ad30ea2f9b504dc463cc33d2d609d/comments", "author": null, "committer": null, "parents": [{"sha": "e63d2e4f9e68ad4fff6da4db46b3edcd2c777c6c", "url": "https://api.github.com/repos/libdynd/libdynd/commits/e63d2e4f9e68ad4fff6da4db46b3edcd2c777c6c", "html_url": "https://github.com/libdynd/libdynd/commit/e63d2e4f9e68ad4fff6da4db46b3edcd2c777c6c"}]}, {"sha": "e63d2e4f9e68ad4fff6da4db46b3edcd2c777c6c", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-20T13:59:09Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-20T13:59:09Z"}, "message": "Created an nd::array constructor for std::tuple", "tree": {"sha": "26a467ad8ca684e93c245d026d3eb0ddce6f7b53", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/26a467ad8ca684e93c245d026d3eb0ddce6f7b53"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/e63d2e4f9e68ad4fff6da4db46b3edcd2c777c6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/e63d2e4f9e68ad4fff6da4db46b3edcd2c777c6c", "html_url": "https://github.com/libdynd/libdynd/commit/e63d2e4f9e68ad4fff6da4db46b3edcd2c777c6c", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/e63d2e4f9e68ad4fff6da4db46b3edcd2c777c6c/comments", "author": null, "committer": null, "parents": [{"sha": "aaca433e30e3a38c2fd342a611a96e696d660f81", "url": "https://api.github.com/repos/libdynd/libdynd/commits/aaca433e30e3a38c2fd342a611a96e696d660f81", "html_url": "https://github.com/libdynd/libdynd/commit/aaca433e30e3a38c2fd342a611a96e696d660f81"}]}, {"sha": "aaca433e30e3a38c2fd342a611a96e696d660f81", "commit": {"author": {"name": "Irwin Zaid", "email": "izaid@users.noreply.github.com", "date": "2016-07-19T15:07:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-19T15:07:33Z"}, "message": "Merge pull request #1298 from izaid/init\n\nCleaned up buffer constructors", "tree": {"sha": "db0ee41256437c493b9b5573c75cbce3f28f3526", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/db0ee41256437c493b9b5573c75cbce3f28f3526"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/aaca433e30e3a38c2fd342a611a96e696d660f81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/aaca433e30e3a38c2fd342a611a96e696d660f81", "html_url": "https://github.com/libdynd/libdynd/commit/aaca433e30e3a38c2fd342a611a96e696d660f81", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/aaca433e30e3a38c2fd342a611a96e696d660f81/comments", "author": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c52ce38da605bacf43e91cb71d29852aa6959d20", "url": "https://api.github.com/repos/libdynd/libdynd/commits/c52ce38da605bacf43e91cb71d29852aa6959d20", "html_url": "https://github.com/libdynd/libdynd/commit/c52ce38da605bacf43e91cb71d29852aa6959d20"}, {"sha": "bc22de4333ebd88bda2c85f45c655dc16b7ffb0f", "url": "https://api.github.com/repos/libdynd/libdynd/commits/bc22de4333ebd88bda2c85f45c655dc16b7ffb0f", "html_url": "https://github.com/libdynd/libdynd/commit/bc22de4333ebd88bda2c85f45c655dc16b7ffb0f"}]}, {"sha": "bc22de4333ebd88bda2c85f45c655dc16b7ffb0f", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-19T13:32:24Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-19T13:32:24Z"}, "message": "Fix for ambiguous symbol", "tree": {"sha": "db0ee41256437c493b9b5573c75cbce3f28f3526", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/db0ee41256437c493b9b5573c75cbce3f28f3526"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/bc22de4333ebd88bda2c85f45c655dc16b7ffb0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/bc22de4333ebd88bda2c85f45c655dc16b7ffb0f", "html_url": "https://github.com/libdynd/libdynd/commit/bc22de4333ebd88bda2c85f45c655dc16b7ffb0f", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/bc22de4333ebd88bda2c85f45c655dc16b7ffb0f/comments", "author": null, "committer": null, "parents": [{"sha": "c575c8ef1a0b12f4ddef7c4815c13757fc14d889", "url": "https://api.github.com/repos/libdynd/libdynd/commits/c575c8ef1a0b12f4ddef7c4815c13757fc14d889", "html_url": "https://github.com/libdynd/libdynd/commit/c575c8ef1a0b12f4ddef7c4815c13757fc14d889"}]}, {"sha": "c575c8ef1a0b12f4ddef7c4815c13757fc14d889", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-19T13:19:43Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-19T13:19:43Z"}, "message": "Added a constructor with assignment embedded", "tree": {"sha": "e2132ad26976ca82851b17d10d75ffc25a05a6d1", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/e2132ad26976ca82851b17d10d75ffc25a05a6d1"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/c575c8ef1a0b12f4ddef7c4815c13757fc14d889", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/c575c8ef1a0b12f4ddef7c4815c13757fc14d889", "html_url": "https://github.com/libdynd/libdynd/commit/c575c8ef1a0b12f4ddef7c4815c13757fc14d889", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/c575c8ef1a0b12f4ddef7c4815c13757fc14d889/comments", "author": null, "committer": null, "parents": [{"sha": "4b12b506a5c03dd2e72b0b62386bb32003d15492", "url": "https://api.github.com/repos/libdynd/libdynd/commits/4b12b506a5c03dd2e72b0b62386bb32003d15492", "html_url": "https://github.com/libdynd/libdynd/commit/4b12b506a5c03dd2e72b0b62386bb32003d15492"}]}, {"sha": "4b12b506a5c03dd2e72b0b62386bb32003d15492", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-19T11:33:43Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-19T11:33:43Z"}, "message": "Cleaned up buffer constructors", "tree": {"sha": "7c63f2e32691499814165e4f2e03492b740b887d", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/7c63f2e32691499814165e4f2e03492b740b887d"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/4b12b506a5c03dd2e72b0b62386bb32003d15492", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/4b12b506a5c03dd2e72b0b62386bb32003d15492", "html_url": "https://github.com/libdynd/libdynd/commit/4b12b506a5c03dd2e72b0b62386bb32003d15492", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/4b12b506a5c03dd2e72b0b62386bb32003d15492/comments", "author": null, "committer": null, "parents": [{"sha": "c52ce38da605bacf43e91cb71d29852aa6959d20", "url": "https://api.github.com/repos/libdynd/libdynd/commits/c52ce38da605bacf43e91cb71d29852aa6959d20", "html_url": "https://github.com/libdynd/libdynd/commit/c52ce38da605bacf43e91cb71d29852aa6959d20"}]}, {"sha": "c52ce38da605bacf43e91cb71d29852aa6959d20", "commit": {"author": {"name": "Irwin Zaid", "email": "izaid@users.noreply.github.com", "date": "2016-07-19T11:08:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-19T11:08:42Z"}, "message": "Merge pull request #1297 from izaid/init\n\nMoved remaining init code into nd::buffer", "tree": {"sha": "981c0a1a02351ba6a6c0b54946b618cda6a2c9d6", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/981c0a1a02351ba6a6c0b54946b618cda6a2c9d6"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/c52ce38da605bacf43e91cb71d29852aa6959d20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/c52ce38da605bacf43e91cb71d29852aa6959d20", "html_url": "https://github.com/libdynd/libdynd/commit/c52ce38da605bacf43e91cb71d29852aa6959d20", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/c52ce38da605bacf43e91cb71d29852aa6959d20/comments", "author": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdbce9ce4131a749e241703dd5073f1c5fa163c6", "url": "https://api.github.com/repos/libdynd/libdynd/commits/fdbce9ce4131a749e241703dd5073f1c5fa163c6", "html_url": "https://github.com/libdynd/libdynd/commit/fdbce9ce4131a749e241703dd5073f1c5fa163c6"}, {"sha": "9b8da2d43d58ae07df54cac4895dc701e04d5d3c", "url": "https://api.github.com/repos/libdynd/libdynd/commits/9b8da2d43d58ae07df54cac4895dc701e04d5d3c", "html_url": "https://github.com/libdynd/libdynd/commit/9b8da2d43d58ae07df54cac4895dc701e04d5d3c"}]}, {"sha": "9b8da2d43d58ae07df54cac4895dc701e04d5d3c", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-19T10:48:01Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-19T10:48:01Z"}, "message": "Moved remaining init code into nd::buffer", "tree": {"sha": "981c0a1a02351ba6a6c0b54946b618cda6a2c9d6", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/981c0a1a02351ba6a6c0b54946b618cda6a2c9d6"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/9b8da2d43d58ae07df54cac4895dc701e04d5d3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/9b8da2d43d58ae07df54cac4895dc701e04d5d3c", "html_url": "https://github.com/libdynd/libdynd/commit/9b8da2d43d58ae07df54cac4895dc701e04d5d3c", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/9b8da2d43d58ae07df54cac4895dc701e04d5d3c/comments", "author": null, "committer": null, "parents": [{"sha": "fdbce9ce4131a749e241703dd5073f1c5fa163c6", "url": "https://api.github.com/repos/libdynd/libdynd/commits/fdbce9ce4131a749e241703dd5073f1c5fa163c6", "html_url": "https://github.com/libdynd/libdynd/commit/fdbce9ce4131a749e241703dd5073f1c5fa163c6"}]}, {"sha": "fdbce9ce4131a749e241703dd5073f1c5fa163c6", "commit": {"author": {"name": "Irwin Zaid", "email": "izaid@users.noreply.github.com", "date": "2016-07-19T10:04:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-19T10:04:25Z"}, "message": "Merge pull request #1296 from izaid/init\n\nMoved init code into buffer", "tree": {"sha": "bf2d902a73afc9bbbb843350b246abbf9f4a76f4", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/bf2d902a73afc9bbbb843350b246abbf9f4a76f4"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/fdbce9ce4131a749e241703dd5073f1c5fa163c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/fdbce9ce4131a749e241703dd5073f1c5fa163c6", "html_url": "https://github.com/libdynd/libdynd/commit/fdbce9ce4131a749e241703dd5073f1c5fa163c6", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/fdbce9ce4131a749e241703dd5073f1c5fa163c6/comments", "author": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa3bbd6540e3254cedd843ef7a4be58a388cdd0a", "url": "https://api.github.com/repos/libdynd/libdynd/commits/aa3bbd6540e3254cedd843ef7a4be58a388cdd0a", "html_url": "https://github.com/libdynd/libdynd/commit/aa3bbd6540e3254cedd843ef7a4be58a388cdd0a"}, {"sha": "36004c70ee55c12d68f6305a09e40c7ea953c4ae", "url": "https://api.github.com/repos/libdynd/libdynd/commits/36004c70ee55c12d68f6305a09e40c7ea953c4ae", "html_url": "https://github.com/libdynd/libdynd/commit/36004c70ee55c12d68f6305a09e40c7ea953c4ae"}]}, {"sha": "36004c70ee55c12d68f6305a09e40c7ea953c4ae", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-19T09:38:23Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-19T09:38:23Z"}, "message": "Moved init code into buffer", "tree": {"sha": "bf2d902a73afc9bbbb843350b246abbf9f4a76f4", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/bf2d902a73afc9bbbb843350b246abbf9f4a76f4"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/36004c70ee55c12d68f6305a09e40c7ea953c4ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/36004c70ee55c12d68f6305a09e40c7ea953c4ae", "html_url": "https://github.com/libdynd/libdynd/commit/36004c70ee55c12d68f6305a09e40c7ea953c4ae", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/36004c70ee55c12d68f6305a09e40c7ea953c4ae/comments", "author": null, "committer": null, "parents": [{"sha": "aa3bbd6540e3254cedd843ef7a4be58a388cdd0a", "url": "https://api.github.com/repos/libdynd/libdynd/commits/aa3bbd6540e3254cedd843ef7a4be58a388cdd0a", "html_url": "https://github.com/libdynd/libdynd/commit/aa3bbd6540e3254cedd843ef7a4be58a388cdd0a"}]}, {"sha": "aa3bbd6540e3254cedd843ef7a4be58a388cdd0a", "commit": {"author": {"name": "Irwin Zaid", "email": "izaid@users.noreply.github.com", "date": "2016-07-18T08:25:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-18T08:25:20Z"}, "message": "Update .travis.yml", "tree": {"sha": "dc7e2ae83bafc1578e068419085e76dd56e1c5ad", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/dc7e2ae83bafc1578e068419085e76dd56e1c5ad"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/aa3bbd6540e3254cedd843ef7a4be58a388cdd0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/aa3bbd6540e3254cedd843ef7a4be58a388cdd0a", "html_url": "https://github.com/libdynd/libdynd/commit/aa3bbd6540e3254cedd843ef7a4be58a388cdd0a", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/aa3bbd6540e3254cedd843ef7a4be58a388cdd0a/comments", "author": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efe9e33d7e1faeee14a5fa6c5423d3d5d4b144a4", "url": "https://api.github.com/repos/libdynd/libdynd/commits/efe9e33d7e1faeee14a5fa6c5423d3d5d4b144a4", "html_url": "https://github.com/libdynd/libdynd/commit/efe9e33d7e1faeee14a5fa6c5423d3d5d4b144a4"}]}, {"sha": "efe9e33d7e1faeee14a5fa6c5423d3d5d4b144a4", "commit": {"author": {"name": "Irwin Zaid", "email": "izaid@users.noreply.github.com", "date": "2016-07-18T08:21:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-18T08:21:02Z"}, "message": "Update .travis.yml", "tree": {"sha": "779f8bf06fffab1c7c9451a61e02355882443f8f", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/779f8bf06fffab1c7c9451a61e02355882443f8f"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/efe9e33d7e1faeee14a5fa6c5423d3d5d4b144a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/efe9e33d7e1faeee14a5fa6c5423d3d5d4b144a4", "html_url": "https://github.com/libdynd/libdynd/commit/efe9e33d7e1faeee14a5fa6c5423d3d5d4b144a4", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/efe9e33d7e1faeee14a5fa6c5423d3d5d4b144a4/comments", "author": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "149c3df19db3d1ee644d9a9d60baac85c0865a0f", "url": "https://api.github.com/repos/libdynd/libdynd/commits/149c3df19db3d1ee644d9a9d60baac85c0865a0f", "html_url": "https://github.com/libdynd/libdynd/commit/149c3df19db3d1ee644d9a9d60baac85c0865a0f"}]}, {"sha": "149c3df19db3d1ee644d9a9d60baac85c0865a0f", "commit": {"author": {"name": "Irwin Zaid", "email": "izaid@users.noreply.github.com", "date": "2016-07-18T07:51:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-18T07:51:35Z"}, "message": "Update test_option_type.cpp", "tree": {"sha": "dc7e2ae83bafc1578e068419085e76dd56e1c5ad", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/dc7e2ae83bafc1578e068419085e76dd56e1c5ad"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/149c3df19db3d1ee644d9a9d60baac85c0865a0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/149c3df19db3d1ee644d9a9d60baac85c0865a0f", "html_url": "https://github.com/libdynd/libdynd/commit/149c3df19db3d1ee644d9a9d60baac85c0865a0f", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/149c3df19db3d1ee644d9a9d60baac85c0865a0f/comments", "author": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed316929553a58e645a67b3f165b6551eb632db8", "url": "https://api.github.com/repos/libdynd/libdynd/commits/ed316929553a58e645a67b3f165b6551eb632db8", "html_url": "https://github.com/libdynd/libdynd/commit/ed316929553a58e645a67b3f165b6551eb632db8"}]}, {"sha": "ed316929553a58e645a67b3f165b6551eb632db8", "commit": {"author": {"name": "Irwin Zaid", "email": "izaid@users.noreply.github.com", "date": "2016-07-18T07:32:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-18T07:32:44Z"}, "message": "Update .travis.yml", "tree": {"sha": "521340f42bd7c09d518a5c8f0d8a60750a5bcd43", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/521340f42bd7c09d518a5c8f0d8a60750a5bcd43"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/ed316929553a58e645a67b3f165b6551eb632db8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/ed316929553a58e645a67b3f165b6551eb632db8", "html_url": "https://github.com/libdynd/libdynd/commit/ed316929553a58e645a67b3f165b6551eb632db8", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/ed316929553a58e645a67b3f165b6551eb632db8/comments", "author": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9980862557aa59f74ec5d3e64faccf1961fe6a2b", "url": "https://api.github.com/repos/libdynd/libdynd/commits/9980862557aa59f74ec5d3e64faccf1961fe6a2b", "html_url": "https://github.com/libdynd/libdynd/commit/9980862557aa59f74ec5d3e64faccf1961fe6a2b"}]}, {"sha": "9980862557aa59f74ec5d3e64faccf1961fe6a2b", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-07-17T22:04:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-17T22:04:23Z"}, "message": "Merge pull request #1272 from mwiebe/multidispatch\n\nDesign doc for multidispatch algorithm", "tree": {"sha": "8cd79749ead334f7ccc3dda550add49da8234911", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/8cd79749ead334f7ccc3dda550add49da8234911"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/9980862557aa59f74ec5d3e64faccf1961fe6a2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/9980862557aa59f74ec5d3e64faccf1961fe6a2b", "html_url": "https://github.com/libdynd/libdynd/commit/9980862557aa59f74ec5d3e64faccf1961fe6a2b", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/9980862557aa59f74ec5d3e64faccf1961fe6a2b/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8e449c41fe5d4fc1074c84f5110b1ee26ae1939", "url": "https://api.github.com/repos/libdynd/libdynd/commits/a8e449c41fe5d4fc1074c84f5110b1ee26ae1939", "html_url": "https://github.com/libdynd/libdynd/commit/a8e449c41fe5d4fc1074c84f5110b1ee26ae1939"}, {"sha": "6a0472a491ffe8da9d16a2dc68f65db7d6fff3c1", "url": "https://api.github.com/repos/libdynd/libdynd/commits/6a0472a491ffe8da9d16a2dc68f65db7d6fff3c1", "html_url": "https://github.com/libdynd/libdynd/commit/6a0472a491ffe8da9d16a2dc68f65db7d6fff3c1"}]}, {"sha": "6a0472a491ffe8da9d16a2dc68f65db7d6fff3c1", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-07-15T04:56:09Z"}, "committer": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-07-17T21:45:04Z"}, "message": "Save changes", "tree": {"sha": "8cd79749ead334f7ccc3dda550add49da8234911", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/8cd79749ead334f7ccc3dda550add49da8234911"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/6a0472a491ffe8da9d16a2dc68f65db7d6fff3c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/6a0472a491ffe8da9d16a2dc68f65db7d6fff3c1", "html_url": "https://github.com/libdynd/libdynd/commit/6a0472a491ffe8da9d16a2dc68f65db7d6fff3c1", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/6a0472a491ffe8da9d16a2dc68f65db7d6fff3c1/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69cc9837c34c304560bb13dff5cdaf5cd2cc0683", "url": "https://api.github.com/repos/libdynd/libdynd/commits/69cc9837c34c304560bb13dff5cdaf5cd2cc0683", "html_url": "https://github.com/libdynd/libdynd/commit/69cc9837c34c304560bb13dff5cdaf5cd2cc0683"}]}, {"sha": "69cc9837c34c304560bb13dff5cdaf5cd2cc0683", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-07-06T06:13:10Z"}, "committer": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-07-17T21:45:04Z"}, "message": "Fix up the matches set in the md doc, extend the code in the notebook a bit more", "tree": {"sha": "2b7282fb49270ef288679f51703fb84d16c845ab", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/2b7282fb49270ef288679f51703fb84d16c845ab"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/69cc9837c34c304560bb13dff5cdaf5cd2cc0683", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/69cc9837c34c304560bb13dff5cdaf5cd2cc0683", "html_url": "https://github.com/libdynd/libdynd/commit/69cc9837c34c304560bb13dff5cdaf5cd2cc0683", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/69cc9837c34c304560bb13dff5cdaf5cd2cc0683/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a7830fa7ba2aacfdfe8d9a95ebed5ca611e7f69", "url": "https://api.github.com/repos/libdynd/libdynd/commits/3a7830fa7ba2aacfdfe8d9a95ebed5ca611e7f69", "html_url": "https://github.com/libdynd/libdynd/commit/3a7830fa7ba2aacfdfe8d9a95ebed5ca611e7f69"}]}, {"sha": "3a7830fa7ba2aacfdfe8d9a95ebed5ca611e7f69", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-07-04T06:53:31Z"}, "committer": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-07-17T21:45:04Z"}, "message": "Further progress on multidispatch notebook, working on sigs with typevars", "tree": {"sha": "0a35733036bd5920e09dc3dd0819661e4062b5d9", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/0a35733036bd5920e09dc3dd0819661e4062b5d9"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/3a7830fa7ba2aacfdfe8d9a95ebed5ca611e7f69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/3a7830fa7ba2aacfdfe8d9a95ebed5ca611e7f69", "html_url": "https://github.com/libdynd/libdynd/commit/3a7830fa7ba2aacfdfe8d9a95ebed5ca611e7f69", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/3a7830fa7ba2aacfdfe8d9a95ebed5ca611e7f69/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df2b3430e124e9a56b406a897db9405b4eeb75c7", "url": "https://api.github.com/repos/libdynd/libdynd/commits/df2b3430e124e9a56b406a897db9405b4eeb75c7", "html_url": "https://github.com/libdynd/libdynd/commit/df2b3430e124e9a56b406a897db9405b4eeb75c7"}]}, {"sha": "df2b3430e124e9a56b406a897db9405b4eeb75c7", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-07-04T06:49:10Z"}, "committer": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-07-17T21:45:04Z"}, "message": "Add tuple_type constructor from vector<type>", "tree": {"sha": "db19c40a6c97163df7494f3ba12640d8277de3f6", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/db19c40a6c97163df7494f3ba12640d8277de3f6"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/df2b3430e124e9a56b406a897db9405b4eeb75c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/df2b3430e124e9a56b406a897db9405b4eeb75c7", "html_url": "https://github.com/libdynd/libdynd/commit/df2b3430e124e9a56b406a897db9405b4eeb75c7", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/df2b3430e124e9a56b406a897db9405b4eeb75c7/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5de386d3b0a64b5f02936991c9678fe07d5fd59b", "url": "https://api.github.com/repos/libdynd/libdynd/commits/5de386d3b0a64b5f02936991c9678fe07d5fd59b", "html_url": "https://github.com/libdynd/libdynd/commit/5de386d3b0a64b5f02936991c9678fe07d5fd59b"}]}, {"sha": "5de386d3b0a64b5f02936991c9678fe07d5fd59b", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-07-04T06:48:53Z"}, "committer": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-07-17T21:45:04Z"}, "message": "Move substitute_typevars into libdyndt", "tree": {"sha": "d8623d51d6c1d9afc7db27f3821a3090d6a00186", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/d8623d51d6c1d9afc7db27f3821a3090d6a00186"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/5de386d3b0a64b5f02936991c9678fe07d5fd59b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/5de386d3b0a64b5f02936991c9678fe07d5fd59b", "html_url": "https://github.com/libdynd/libdynd/commit/5de386d3b0a64b5f02936991c9678fe07d5fd59b", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/5de386d3b0a64b5f02936991c9678fe07d5fd59b/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce8c9ef04a8c5145105f658e904a6c00a54d1965", "url": "https://api.github.com/repos/libdynd/libdynd/commits/ce8c9ef04a8c5145105f658e904a6c00a54d1965", "html_url": "https://github.com/libdynd/libdynd/commit/ce8c9ef04a8c5145105f658e904a6c00a54d1965"}]}, {"sha": "ce8c9ef04a8c5145105f658e904a6c00a54d1965", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-07-02T20:31:00Z"}, "committer": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-07-17T21:45:04Z"}, "message": "Update matches graph plot to eliminate redundant edges", "tree": {"sha": "6c843dcca0c7eee0cea4680cca12d09b1e1f76a0", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/6c843dcca0c7eee0cea4680cca12d09b1e1f76a0"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/ce8c9ef04a8c5145105f658e904a6c00a54d1965", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/ce8c9ef04a8c5145105f658e904a6c00a54d1965", "html_url": "https://github.com/libdynd/libdynd/commit/ce8c9ef04a8c5145105f658e904a6c00a54d1965", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/ce8c9ef04a8c5145105f658e904a6c00a54d1965/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83b49a5405a1059c406ed711c30fb6945871b795", "url": "https://api.github.com/repos/libdynd/libdynd/commits/83b49a5405a1059c406ed711c30fb6945871b795", "html_url": "https://github.com/libdynd/libdynd/commit/83b49a5405a1059c406ed711c30fb6945871b795"}]}, {"sha": "83b49a5405a1059c406ed711c30fb6945871b795", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-07-02T20:28:15Z"}, "committer": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-07-17T21:45:04Z"}, "message": "Add simple tests of typevar matching", "tree": {"sha": "afa193dcd0d31762da994cb0ca26a503d9184b82", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/afa193dcd0d31762da994cb0ca26a503d9184b82"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/83b49a5405a1059c406ed711c30fb6945871b795", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/83b49a5405a1059c406ed711c30fb6945871b795", "html_url": "https://github.com/libdynd/libdynd/commit/83b49a5405a1059c406ed711c30fb6945871b795", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/83b49a5405a1059c406ed711c30fb6945871b795/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e02b75dd516ce904329c2a8dd594610995b928d", "url": "https://api.github.com/repos/libdynd/libdynd/commits/0e02b75dd516ce904329c2a8dd594610995b928d", "html_url": "https://github.com/libdynd/libdynd/commit/0e02b75dd516ce904329c2a8dd594610995b928d"}]}, {"sha": "0e02b75dd516ce904329c2a8dd594610995b928d", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-07-02T20:27:57Z"}, "committer": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-07-17T21:45:04Z"}, "message": "Fix bug in typevar type matching (it's still mostly wrong, detail work needed)", "tree": {"sha": "6e92567446cd420da82ae73c917e33c64ca6b61b", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/6e92567446cd420da82ae73c917e33c64ca6b61b"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/0e02b75dd516ce904329c2a8dd594610995b928d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/0e02b75dd516ce904329c2a8dd594610995b928d", "html_url": "https://github.com/libdynd/libdynd/commit/0e02b75dd516ce904329c2a8dd594610995b928d", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/0e02b75dd516ce904329c2a8dd594610995b928d/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35df93e01cdeaab02db799ebbe395fff19b2adc5", "url": "https://api.github.com/repos/libdynd/libdynd/commits/35df93e01cdeaab02db799ebbe395fff19b2adc5", "html_url": "https://github.com/libdynd/libdynd/commit/35df93e01cdeaab02db799ebbe395fff19b2adc5"}]}, {"sha": "35df93e01cdeaab02db799ebbe395fff19b2adc5", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-07-02T20:27:20Z"}, "committer": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-07-17T21:45:04Z"}, "message": "Add libdyndt as library for test_libdynd, so dependency rebuilding works correctly", "tree": {"sha": "08148cbb9fc88071ad8c32a6b15d17d8ba2868b9", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/08148cbb9fc88071ad8c32a6b15d17d8ba2868b9"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/35df93e01cdeaab02db799ebbe395fff19b2adc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/35df93e01cdeaab02db799ebbe395fff19b2adc5", "html_url": "https://github.com/libdynd/libdynd/commit/35df93e01cdeaab02db799ebbe395fff19b2adc5", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/35df93e01cdeaab02db799ebbe395fff19b2adc5/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2afe6c61916786c5d095e7dd15891f81bfd9b5f", "url": "https://api.github.com/repos/libdynd/libdynd/commits/e2afe6c61916786c5d095e7dd15891f81bfd9b5f", "html_url": "https://github.com/libdynd/libdynd/commit/e2afe6c61916786c5d095e7dd15891f81bfd9b5f"}]}, {"sha": "e2afe6c61916786c5d095e7dd15891f81bfd9b5f", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-07-02T19:01:28Z"}, "committer": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-07-17T21:45:04Z"}, "message": "Add graphviz visualization of matches graph", "tree": {"sha": "28f920dea63ff4f36b5559f7a04a5aaf0c4dc3f0", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/28f920dea63ff4f36b5559f7a04a5aaf0c4dc3f0"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/e2afe6c61916786c5d095e7dd15891f81bfd9b5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/e2afe6c61916786c5d095e7dd15891f81bfd9b5f", "html_url": "https://github.com/libdynd/libdynd/commit/e2afe6c61916786c5d095e7dd15891f81bfd9b5f", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/e2afe6c61916786c5d095e7dd15891f81bfd9b5f/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bc06ff8d8ecd9f6c0f0afc8985b89ee46897346", "url": "https://api.github.com/repos/libdynd/libdynd/commits/7bc06ff8d8ecd9f6c0f0afc8985b89ee46897346", "html_url": "https://github.com/libdynd/libdynd/commit/7bc06ff8d8ecd9f6c0f0afc8985b89ee46897346"}]}, {"sha": "7bc06ff8d8ecd9f6c0f0afc8985b89ee46897346", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-07-02T07:35:59Z"}, "committer": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-07-17T21:45:04Z"}, "message": "Postpone the candidate evaluation to later, just process first equation to simplify exposition", "tree": {"sha": "ca821239e090670afb4b8e5af65b5ea6a28bb4f4", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/ca821239e090670afb4b8e5af65b5ea6a28bb4f4"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/7bc06ff8d8ecd9f6c0f0afc8985b89ee46897346", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/7bc06ff8d8ecd9f6c0f0afc8985b89ee46897346", "html_url": "https://github.com/libdynd/libdynd/commit/7bc06ff8d8ecd9f6c0f0afc8985b89ee46897346", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/7bc06ff8d8ecd9f6c0f0afc8985b89ee46897346/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fca11ecfb8e004f88d0dc09e16cfb5257614ad23", "url": "https://api.github.com/repos/libdynd/libdynd/commits/fca11ecfb8e004f88d0dc09e16cfb5257614ad23", "html_url": "https://github.com/libdynd/libdynd/commit/fca11ecfb8e004f88d0dc09e16cfb5257614ad23"}]}, {"sha": "fca11ecfb8e004f88d0dc09e16cfb5257614ad23", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-07-02T00:55:44Z"}, "committer": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-07-17T21:45:04Z"}, "message": "Create notebook which constructs and runs multi-dispatch signature matching machines", "tree": {"sha": "a72d44d0e63f6e2429c1105ad937e2ae4e12ea68", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/a72d44d0e63f6e2429c1105ad937e2ae4e12ea68"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/fca11ecfb8e004f88d0dc09e16cfb5257614ad23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/fca11ecfb8e004f88d0dc09e16cfb5257614ad23", "html_url": "https://github.com/libdynd/libdynd/commit/fca11ecfb8e004f88d0dc09e16cfb5257614ad23", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/fca11ecfb8e004f88d0dc09e16cfb5257614ad23/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf0ca0b6c403dcbd724eb80e43843fd5fac8509b", "url": "https://api.github.com/repos/libdynd/libdynd/commits/bf0ca0b6c403dcbd724eb80e43843fd5fac8509b", "html_url": "https://github.com/libdynd/libdynd/commit/bf0ca0b6c403dcbd724eb80e43843fd5fac8509b"}]}, {"sha": "bf0ca0b6c403dcbd724eb80e43843fd5fac8509b", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-07-01T21:06:00Z"}, "committer": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-07-17T21:45:04Z"}, "message": "Fix up the rest of the examples to use the equations", "tree": {"sha": "0ad6e2bbdc4cc86cbcac79b48015979210d65b56", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/0ad6e2bbdc4cc86cbcac79b48015979210d65b56"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/bf0ca0b6c403dcbd724eb80e43843fd5fac8509b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/bf0ca0b6c403dcbd724eb80e43843fd5fac8509b", "html_url": "https://github.com/libdynd/libdynd/commit/bf0ca0b6c403dcbd724eb80e43843fd5fac8509b", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/bf0ca0b6c403dcbd724eb80e43843fd5fac8509b/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d351160790e1ec76b1daa831dd92998c8609a28", "url": "https://api.github.com/repos/libdynd/libdynd/commits/4d351160790e1ec76b1daa831dd92998c8609a28", "html_url": "https://github.com/libdynd/libdynd/commit/4d351160790e1ec76b1daa831dd92998c8609a28"}]}, {"sha": "4d351160790e1ec76b1daa831dd92998c8609a28", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-07-01T20:27:33Z"}, "committer": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-07-17T21:45:04Z"}, "message": "Expand the equation matching algorithm with a type variable symbol table", "tree": {"sha": "3fcb95fa52a1cdbe8973c627afeeb4ba87a2c4cd", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/3fcb95fa52a1cdbe8973c627afeeb4ba87a2c4cd"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/4d351160790e1ec76b1daa831dd92998c8609a28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/4d351160790e1ec76b1daa831dd92998c8609a28", "html_url": "https://github.com/libdynd/libdynd/commit/4d351160790e1ec76b1daa831dd92998c8609a28", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/4d351160790e1ec76b1daa831dd92998c8609a28/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "170de487c3a75a8ba75da1a8bfe77658b6da5808", "url": "https://api.github.com/repos/libdynd/libdynd/commits/170de487c3a75a8ba75da1a8bfe77658b6da5808", "html_url": "https://github.com/libdynd/libdynd/commit/170de487c3a75a8ba75da1a8bfe77658b6da5808"}]}, {"sha": "170de487c3a75a8ba75da1a8bfe77658b6da5808", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-07-01T19:47:21Z"}, "committer": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-07-17T21:45:04Z"}, "message": "Express the decision tree construction in terms of equations instead of hand-wavy candidates", "tree": {"sha": "c47485ff280bdf216ec63bdadbf4cc00a09349bc", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/c47485ff280bdf216ec63bdadbf4cc00a09349bc"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/170de487c3a75a8ba75da1a8bfe77658b6da5808", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/170de487c3a75a8ba75da1a8bfe77658b6da5808", "html_url": "https://github.com/libdynd/libdynd/commit/170de487c3a75a8ba75da1a8bfe77658b6da5808", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/170de487c3a75a8ba75da1a8bfe77658b6da5808/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f743daa69103ddc2b2829faa74680fad456b2bc8", "url": "https://api.github.com/repos/libdynd/libdynd/commits/f743daa69103ddc2b2829faa74680fad456b2bc8", "html_url": "https://github.com/libdynd/libdynd/commit/f743daa69103ddc2b2829faa74680fad456b2bc8"}]}, {"sha": "f743daa69103ddc2b2829faa74680fad456b2bc8", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-07-01T18:45:26Z"}, "committer": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-07-17T21:45:04Z"}, "message": "Add missing header to libdyndt_SRC", "tree": {"sha": "0defcdee25ad1acb4eb4ba77086515d9a74d3b38", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/0defcdee25ad1acb4eb4ba77086515d9a74d3b38"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/f743daa69103ddc2b2829faa74680fad456b2bc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/f743daa69103ddc2b2829faa74680fad456b2bc8", "html_url": "https://github.com/libdynd/libdynd/commit/f743daa69103ddc2b2829faa74680fad456b2bc8", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/f743daa69103ddc2b2829faa74680fad456b2bc8/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96d985e071821c84886c855ff6376b8eb94f0a8c", "url": "https://api.github.com/repos/libdynd/libdynd/commits/96d985e071821c84886c855ff6376b8eb94f0a8c", "html_url": "https://github.com/libdynd/libdynd/commit/96d985e071821c84886c855ff6376b8eb94f0a8c"}]}, {"sha": "96d985e071821c84886c855ff6376b8eb94f0a8c", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-06-26T21:06:59Z"}, "committer": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-07-17T21:45:04Z"}, "message": "Work out example 1 fully, including the resulting decision tree execution", "tree": {"sha": "437e87675b5f2cb030bd0391d41414303de68851", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/437e87675b5f2cb030bd0391d41414303de68851"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/96d985e071821c84886c855ff6376b8eb94f0a8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/96d985e071821c84886c855ff6376b8eb94f0a8c", "html_url": "https://github.com/libdynd/libdynd/commit/96d985e071821c84886c855ff6376b8eb94f0a8c", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/96d985e071821c84886c855ff6376b8eb94f0a8c/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79c92beac9d45abf0bb05f4eeec3f5d8ee72568c", "url": "https://api.github.com/repos/libdynd/libdynd/commits/79c92beac9d45abf0bb05f4eeec3f5d8ee72568c", "html_url": "https://github.com/libdynd/libdynd/commit/79c92beac9d45abf0bb05f4eeec3f5d8ee72568c"}]}, {"sha": "79c92beac9d45abf0bb05f4eeec3f5d8ee72568c", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-06-26T18:23:18Z"}, "committer": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-07-17T21:45:04Z"}, "message": "Add an example with a tuple", "tree": {"sha": "7a0cb73277605141876731fb773b0c57261f264f", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/7a0cb73277605141876731fb773b0c57261f264f"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/79c92beac9d45abf0bb05f4eeec3f5d8ee72568c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/79c92beac9d45abf0bb05f4eeec3f5d8ee72568c", "html_url": "https://github.com/libdynd/libdynd/commit/79c92beac9d45abf0bb05f4eeec3f5d8ee72568c", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/79c92beac9d45abf0bb05f4eeec3f5d8ee72568c/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d907df1a2d134b095a2fb0d93f16601ecb67065a", "url": "https://api.github.com/repos/libdynd/libdynd/commits/d907df1a2d134b095a2fb0d93f16601ecb67065a", "html_url": "https://github.com/libdynd/libdynd/commit/d907df1a2d134b095a2fb0d93f16601ecb67065a"}]}, {"sha": "d907df1a2d134b095a2fb0d93f16601ecb67065a", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-06-26T06:46:54Z"}, "committer": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-07-17T21:45:04Z"}, "message": "Add some examples including dimensions", "tree": {"sha": "e206edc176734d282f151f283d39a25c18e86d84", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/e206edc176734d282f151f283d39a25c18e86d84"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/d907df1a2d134b095a2fb0d93f16601ecb67065a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/d907df1a2d134b095a2fb0d93f16601ecb67065a", "html_url": "https://github.com/libdynd/libdynd/commit/d907df1a2d134b095a2fb0d93f16601ecb67065a", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/d907df1a2d134b095a2fb0d93f16601ecb67065a/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5404d34304b343a66eaa713a1eb0705c1ee5a89e", "url": "https://api.github.com/repos/libdynd/libdynd/commits/5404d34304b343a66eaa713a1eb0705c1ee5a89e", "html_url": "https://github.com/libdynd/libdynd/commit/5404d34304b343a66eaa713a1eb0705c1ee5a89e"}]}, {"sha": "5404d34304b343a66eaa713a1eb0705c1ee5a89e", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-06-25T08:04:10Z"}, "committer": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-07-17T21:45:04Z"}, "message": "Add some details about building the decision tree, with a few worked examples", "tree": {"sha": "9d660769070dafc83231b95fd4e977a98458deed", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/9d660769070dafc83231b95fd4e977a98458deed"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/5404d34304b343a66eaa713a1eb0705c1ee5a89e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/5404d34304b343a66eaa713a1eb0705c1ee5a89e", "html_url": "https://github.com/libdynd/libdynd/commit/5404d34304b343a66eaa713a1eb0705c1ee5a89e", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/5404d34304b343a66eaa713a1eb0705c1ee5a89e/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07129980eb64663ab7adc06841c26d44ebaeef34", "url": "https://api.github.com/repos/libdynd/libdynd/commits/07129980eb64663ab7adc06841c26d44ebaeef34", "html_url": "https://github.com/libdynd/libdynd/commit/07129980eb64663ab7adc06841c26d44ebaeef34"}]}, {"sha": "07129980eb64663ab7adc06841c26d44ebaeef34", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-06-25T06:28:57Z"}, "committer": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-07-17T21:45:04Z"}, "message": "Write out how the decision tree for multi-dispatch can work", "tree": {"sha": "764acd047ad869983eebb663aec1cc027a1ad2b7", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/764acd047ad869983eebb663aec1cc027a1ad2b7"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/07129980eb64663ab7adc06841c26d44ebaeef34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/07129980eb64663ab7adc06841c26d44ebaeef34", "html_url": "https://github.com/libdynd/libdynd/commit/07129980eb64663ab7adc06841c26d44ebaeef34", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/07129980eb64663ab7adc06841c26d44ebaeef34/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "317027a7646cd746d4e2d1c7a2ab4bddaaac986a", "url": "https://api.github.com/repos/libdynd/libdynd/commits/317027a7646cd746d4e2d1c7a2ab4bddaaac986a", "html_url": "https://github.com/libdynd/libdynd/commit/317027a7646cd746d4e2d1c7a2ab4bddaaac986a"}]}, {"sha": "317027a7646cd746d4e2d1c7a2ab4bddaaac986a", "commit": {"author": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-06-12T08:19:31Z"}, "committer": {"name": "Mark Wiebe", "email": "mwwiebe@gmail.com", "date": "2016-07-17T21:45:04Z"}, "message": "Some first scratches on a multidispatch algorithm based on the matches primitive", "tree": {"sha": "b25bdf7d87337bb2205d4cbe0db6c052ea3599e1", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/b25bdf7d87337bb2205d4cbe0db6c052ea3599e1"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/317027a7646cd746d4e2d1c7a2ab4bddaaac986a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/317027a7646cd746d4e2d1c7a2ab4bddaaac986a", "html_url": "https://github.com/libdynd/libdynd/commit/317027a7646cd746d4e2d1c7a2ab4bddaaac986a", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/317027a7646cd746d4e2d1c7a2ab4bddaaac986a/comments", "author": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8e449c41fe5d4fc1074c84f5110b1ee26ae1939", "url": "https://api.github.com/repos/libdynd/libdynd/commits/a8e449c41fe5d4fc1074c84f5110b1ee26ae1939", "html_url": "https://github.com/libdynd/libdynd/commit/a8e449c41fe5d4fc1074c84f5110b1ee26ae1939"}]}, {"sha": "a8e449c41fe5d4fc1074c84f5110b1ee26ae1939", "commit": {"author": {"name": "Irwin Zaid", "email": "izaid@users.noreply.github.com", "date": "2016-07-17T17:33:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-17T17:33:34Z"}, "message": "Update .travis.yml", "tree": {"sha": "bec42e03a55904cf10c99dcc8e293298ac14e9f0", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/bec42e03a55904cf10c99dcc8e293298ac14e9f0"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/a8e449c41fe5d4fc1074c84f5110b1ee26ae1939", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/a8e449c41fe5d4fc1074c84f5110b1ee26ae1939", "html_url": "https://github.com/libdynd/libdynd/commit/a8e449c41fe5d4fc1074c84f5110b1ee26ae1939", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/a8e449c41fe5d4fc1074c84f5110b1ee26ae1939/comments", "author": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea0e76c58a19853f0159e5f4a1d2b406b860d858", "url": "https://api.github.com/repos/libdynd/libdynd/commits/ea0e76c58a19853f0159e5f4a1d2b406b860d858", "html_url": "https://github.com/libdynd/libdynd/commit/ea0e76c58a19853f0159e5f4a1d2b406b860d858"}]}, {"sha": "ea0e76c58a19853f0159e5f4a1d2b406b860d858", "commit": {"author": {"name": "Irwin Zaid", "email": "izaid@users.noreply.github.com", "date": "2016-07-17T17:17:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-17T17:17:49Z"}, "message": "Merge pull request #1295 from izaid/fft\n\nClean-up of .travis.yml", "tree": {"sha": "c4f3ca9272ba7bebf8bee19b9a647d80a2a8945b", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/c4f3ca9272ba7bebf8bee19b9a647d80a2a8945b"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/ea0e76c58a19853f0159e5f4a1d2b406b860d858", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/ea0e76c58a19853f0159e5f4a1d2b406b860d858", "html_url": "https://github.com/libdynd/libdynd/commit/ea0e76c58a19853f0159e5f4a1d2b406b860d858", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/ea0e76c58a19853f0159e5f4a1d2b406b860d858/comments", "author": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e925274c6ee517bfc66d4bb11e8fa9d22893569c", "url": "https://api.github.com/repos/libdynd/libdynd/commits/e925274c6ee517bfc66d4bb11e8fa9d22893569c", "html_url": "https://github.com/libdynd/libdynd/commit/e925274c6ee517bfc66d4bb11e8fa9d22893569c"}, {"sha": "135e57a545f7da1754a3a26259168da5d66dbd4a", "url": "https://api.github.com/repos/libdynd/libdynd/commits/135e57a545f7da1754a3a26259168da5d66dbd4a", "html_url": "https://github.com/libdynd/libdynd/commit/135e57a545f7da1754a3a26259168da5d66dbd4a"}]}, {"sha": "135e57a545f7da1754a3a26259168da5d66dbd4a", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-17T17:02:42Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-17T17:02:42Z"}, "message": "Brought back a test", "tree": {"sha": "c4f3ca9272ba7bebf8bee19b9a647d80a2a8945b", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/c4f3ca9272ba7bebf8bee19b9a647d80a2a8945b"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/135e57a545f7da1754a3a26259168da5d66dbd4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/135e57a545f7da1754a3a26259168da5d66dbd4a", "html_url": "https://github.com/libdynd/libdynd/commit/135e57a545f7da1754a3a26259168da5d66dbd4a", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/135e57a545f7da1754a3a26259168da5d66dbd4a/comments", "author": null, "committer": null, "parents": [{"sha": "d6212cd6eda986db2ae51751ee5e16476827ff07", "url": "https://api.github.com/repos/libdynd/libdynd/commits/d6212cd6eda986db2ae51751ee5e16476827ff07", "html_url": "https://github.com/libdynd/libdynd/commit/d6212cd6eda986db2ae51751ee5e16476827ff07"}]}, {"sha": "d6212cd6eda986db2ae51751ee5e16476827ff07", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-17T16:33:27Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-17T16:33:27Z"}, "message": "Switched to c++14 flag for clang", "tree": {"sha": "4836c912e35098cc82839f3b8a3e9ac0d1745c97", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/4836c912e35098cc82839f3b8a3e9ac0d1745c97"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/d6212cd6eda986db2ae51751ee5e16476827ff07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/d6212cd6eda986db2ae51751ee5e16476827ff07", "html_url": "https://github.com/libdynd/libdynd/commit/d6212cd6eda986db2ae51751ee5e16476827ff07", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/d6212cd6eda986db2ae51751ee5e16476827ff07/comments", "author": null, "committer": null, "parents": [{"sha": "1b851a7dba583eaf14627efc489c0afa78478a8f", "url": "https://api.github.com/repos/libdynd/libdynd/commits/1b851a7dba583eaf14627efc489c0afa78478a8f", "html_url": "https://github.com/libdynd/libdynd/commit/1b851a7dba583eaf14627efc489c0afa78478a8f"}]}, {"sha": "1b851a7dba583eaf14627efc489c0afa78478a8f", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-17T16:16:46Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-17T16:16:46Z"}, "message": "Made sudo required", "tree": {"sha": "57127100aad1d623ea0839e2e055fa55f5229eae", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/57127100aad1d623ea0839e2e055fa55f5229eae"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/1b851a7dba583eaf14627efc489c0afa78478a8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/1b851a7dba583eaf14627efc489c0afa78478a8f", "html_url": "https://github.com/libdynd/libdynd/commit/1b851a7dba583eaf14627efc489c0afa78478a8f", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/1b851a7dba583eaf14627efc489c0afa78478a8f/comments", "author": null, "committer": null, "parents": [{"sha": "5923d38fb734bed601518acfec08b8aa2933186d", "url": "https://api.github.com/repos/libdynd/libdynd/commits/5923d38fb734bed601518acfec08b8aa2933186d", "html_url": "https://github.com/libdynd/libdynd/commit/5923d38fb734bed601518acfec08b8aa2933186d"}]}, {"sha": "5923d38fb734bed601518acfec08b8aa2933186d", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-17T16:12:34Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-17T16:12:34Z"}, "message": "Added LLVM toolchain", "tree": {"sha": "cd92d7cb9fab80e4bbf67dedb5fd89d537963249", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/cd92d7cb9fab80e4bbf67dedb5fd89d537963249"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/5923d38fb734bed601518acfec08b8aa2933186d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/5923d38fb734bed601518acfec08b8aa2933186d", "html_url": "https://github.com/libdynd/libdynd/commit/5923d38fb734bed601518acfec08b8aa2933186d", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/5923d38fb734bed601518acfec08b8aa2933186d/comments", "author": null, "committer": null, "parents": [{"sha": "7a182f88dd82d99489d538849ebfda8662533ad6", "url": "https://api.github.com/repos/libdynd/libdynd/commits/7a182f88dd82d99489d538849ebfda8662533ad6", "html_url": "https://github.com/libdynd/libdynd/commit/7a182f88dd82d99489d538849ebfda8662533ad6"}]}, {"sha": "7a182f88dd82d99489d538849ebfda8662533ad6", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-17T16:02:50Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-17T16:02:50Z"}, "message": "Trying a more modern clang", "tree": {"sha": "3392cfcc5c9f698862397263134660afa4e9f72c", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/3392cfcc5c9f698862397263134660afa4e9f72c"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/7a182f88dd82d99489d538849ebfda8662533ad6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/7a182f88dd82d99489d538849ebfda8662533ad6", "html_url": "https://github.com/libdynd/libdynd/commit/7a182f88dd82d99489d538849ebfda8662533ad6", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/7a182f88dd82d99489d538849ebfda8662533ad6/comments", "author": null, "committer": null, "parents": [{"sha": "8553f767d3856b623fc648716204510f43cfcbbd", "url": "https://api.github.com/repos/libdynd/libdynd/commits/8553f767d3856b623fc648716204510f43cfcbbd", "html_url": "https://github.com/libdynd/libdynd/commit/8553f767d3856b623fc648716204510f43cfcbbd"}]}, {"sha": "8553f767d3856b623fc648716204510f43cfcbbd", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-17T09:50:39Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-17T09:50:39Z"}, "message": "Another fix for Travis", "tree": {"sha": "807d16082b9f2c18e7fc781c26d1788b37569de6", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/807d16082b9f2c18e7fc781c26d1788b37569de6"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/8553f767d3856b623fc648716204510f43cfcbbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/8553f767d3856b623fc648716204510f43cfcbbd", "html_url": "https://github.com/libdynd/libdynd/commit/8553f767d3856b623fc648716204510f43cfcbbd", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/8553f767d3856b623fc648716204510f43cfcbbd/comments", "author": null, "committer": null, "parents": [{"sha": "1070032e6147745ddc98463a0f0d0abb2cf7676f", "url": "https://api.github.com/repos/libdynd/libdynd/commits/1070032e6147745ddc98463a0f0d0abb2cf7676f", "html_url": "https://github.com/libdynd/libdynd/commit/1070032e6147745ddc98463a0f0d0abb2cf7676f"}]}, {"sha": "1070032e6147745ddc98463a0f0d0abb2cf7676f", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-17T09:46:59Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-17T09:46:59Z"}, "message": "Change CXX flags in travis", "tree": {"sha": "c6db99d2df9089639f5b6e5d7d3cd679d04aa96f", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/c6db99d2df9089639f5b6e5d7d3cd679d04aa96f"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/1070032e6147745ddc98463a0f0d0abb2cf7676f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/1070032e6147745ddc98463a0f0d0abb2cf7676f", "html_url": "https://github.com/libdynd/libdynd/commit/1070032e6147745ddc98463a0f0d0abb2cf7676f", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/1070032e6147745ddc98463a0f0d0abb2cf7676f/comments", "author": null, "committer": null, "parents": [{"sha": "d0e800afa692d99391c63939e63f4811254b998b", "url": "https://api.github.com/repos/libdynd/libdynd/commits/d0e800afa692d99391c63939e63f4811254b998b", "html_url": "https://github.com/libdynd/libdynd/commit/d0e800afa692d99391c63939e63f4811254b998b"}]}, {"sha": "d0e800afa692d99391c63939e63f4811254b998b", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-17T09:44:03Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-17T09:44:03Z"}, "message": "Removed FFT flags from .travis.yml", "tree": {"sha": "5f0deab1ce6240048a0869b3d0ef85fd1fceac5f", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/5f0deab1ce6240048a0869b3d0ef85fd1fceac5f"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/d0e800afa692d99391c63939e63f4811254b998b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/d0e800afa692d99391c63939e63f4811254b998b", "html_url": "https://github.com/libdynd/libdynd/commit/d0e800afa692d99391c63939e63f4811254b998b", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/d0e800afa692d99391c63939e63f4811254b998b/comments", "author": null, "committer": null, "parents": [{"sha": "7380f0732a9c446d5e268646ca1d652c87bd523c", "url": "https://api.github.com/repos/libdynd/libdynd/commits/7380f0732a9c446d5e268646ca1d652c87bd523c", "html_url": "https://github.com/libdynd/libdynd/commit/7380f0732a9c446d5e268646ca1d652c87bd523c"}]}, {"sha": "7380f0732a9c446d5e268646ca1d652c87bd523c", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-17T09:27:20Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-17T09:27:20Z"}, "message": "Removed old fft files", "tree": {"sha": "da7ab18d67da25f72e0540cfa46e47735a1f22ef", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/da7ab18d67da25f72e0540cfa46e47735a1f22ef"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/7380f0732a9c446d5e268646ca1d652c87bd523c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/7380f0732a9c446d5e268646ca1d652c87bd523c", "html_url": "https://github.com/libdynd/libdynd/commit/7380f0732a9c446d5e268646ca1d652c87bd523c", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/7380f0732a9c446d5e268646ca1d652c87bd523c/comments", "author": null, "committer": null, "parents": [{"sha": "e925274c6ee517bfc66d4bb11e8fa9d22893569c", "url": "https://api.github.com/repos/libdynd/libdynd/commits/e925274c6ee517bfc66d4bb11e8fa9d22893569c", "html_url": "https://github.com/libdynd/libdynd/commit/e925274c6ee517bfc66d4bb11e8fa9d22893569c"}]}, {"sha": "e925274c6ee517bfc66d4bb11e8fa9d22893569c", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-17T08:46:50Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-17T08:46:50Z"}, "message": "Removed some debugging code", "tree": {"sha": "87463e36cbe15218a7f27ca35488fc9ccb69f5e6", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/87463e36cbe15218a7f27ca35488fc9ccb69f5e6"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/e925274c6ee517bfc66d4bb11e8fa9d22893569c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/e925274c6ee517bfc66d4bb11e8fa9d22893569c", "html_url": "https://github.com/libdynd/libdynd/commit/e925274c6ee517bfc66d4bb11e8fa9d22893569c", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/e925274c6ee517bfc66d4bb11e8fa9d22893569c/comments", "author": null, "committer": null, "parents": [{"sha": "b709bb73ffabf7b83a878a9cee83e600d4016005", "url": "https://api.github.com/repos/libdynd/libdynd/commits/b709bb73ffabf7b83a878a9cee83e600d4016005", "html_url": "https://github.com/libdynd/libdynd/commit/b709bb73ffabf7b83a878a9cee83e600d4016005"}]}, {"sha": "b709bb73ffabf7b83a878a9cee83e600d4016005", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-17T08:16:11Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-17T08:16:11Z"}, "message": "Switched valgrind to address sanitizer", "tree": {"sha": "df83cd1506888c6d53c4b6219171a2cf9cb5ffd1", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/df83cd1506888c6d53c4b6219171a2cf9cb5ffd1"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/b709bb73ffabf7b83a878a9cee83e600d4016005", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/b709bb73ffabf7b83a878a9cee83e600d4016005", "html_url": "https://github.com/libdynd/libdynd/commit/b709bb73ffabf7b83a878a9cee83e600d4016005", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/b709bb73ffabf7b83a878a9cee83e600d4016005/comments", "author": null, "committer": null, "parents": [{"sha": "75add9f8ef04c6cfd86d9c7e84af9d8d1579ec68", "url": "https://api.github.com/repos/libdynd/libdynd/commits/75add9f8ef04c6cfd86d9c7e84af9d8d1579ec68", "html_url": "https://github.com/libdynd/libdynd/commit/75add9f8ef04c6cfd86d9c7e84af9d8d1579ec68"}]}, {"sha": "75add9f8ef04c6cfd86d9c7e84af9d8d1579ec68", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-16T16:22:51Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-16T16:22:51Z"}, "message": "Added MKL TearDown to prevent memory leak", "tree": {"sha": "539323e16bfb4fb31d6a887a3ccd8868fd4c37b8", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/539323e16bfb4fb31d6a887a3ccd8868fd4c37b8"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/75add9f8ef04c6cfd86d9c7e84af9d8d1579ec68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/75add9f8ef04c6cfd86d9c7e84af9d8d1579ec68", "html_url": "https://github.com/libdynd/libdynd/commit/75add9f8ef04c6cfd86d9c7e84af9d8d1579ec68", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/75add9f8ef04c6cfd86d9c7e84af9d8d1579ec68/comments", "author": null, "committer": null, "parents": [{"sha": "ad3cd76d50cac3b04c91e05a0fc10d6bca14c70c", "url": "https://api.github.com/repos/libdynd/libdynd/commits/ad3cd76d50cac3b04c91e05a0fc10d6bca14c70c", "html_url": "https://github.com/libdynd/libdynd/commit/ad3cd76d50cac3b04c91e05a0fc10d6bca14c70c"}]}, {"sha": "ad3cd76d50cac3b04c91e05a0fc10d6bca14c70c", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-16T15:43:54Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-16T15:43:54Z"}, "message": "Recommented FFT test", "tree": {"sha": "cb398905b5149e27348c1601c92c1e73e0e3aeaf", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/cb398905b5149e27348c1601c92c1e73e0e3aeaf"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/ad3cd76d50cac3b04c91e05a0fc10d6bca14c70c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/ad3cd76d50cac3b04c91e05a0fc10d6bca14c70c", "html_url": "https://github.com/libdynd/libdynd/commit/ad3cd76d50cac3b04c91e05a0fc10d6bca14c70c", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/ad3cd76d50cac3b04c91e05a0fc10d6bca14c70c/comments", "author": null, "committer": null, "parents": [{"sha": "adda5ad52646e57fa46f87fe35d84828b67334d1", "url": "https://api.github.com/repos/libdynd/libdynd/commits/adda5ad52646e57fa46f87fe35d84828b67334d1", "html_url": "https://github.com/libdynd/libdynd/commit/adda5ad52646e57fa46f87fe35d84828b67334d1"}]}, {"sha": "adda5ad52646e57fa46f87fe35d84828b67334d1", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-16T15:24:42Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-16T15:24:42Z"}, "message": "Brought a test back", "tree": {"sha": "8f8cdbe8e3698e2956c9a7f06eee39a34b693788", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/8f8cdbe8e3698e2956c9a7f06eee39a34b693788"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/adda5ad52646e57fa46f87fe35d84828b67334d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/adda5ad52646e57fa46f87fe35d84828b67334d1", "html_url": "https://github.com/libdynd/libdynd/commit/adda5ad52646e57fa46f87fe35d84828b67334d1", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/adda5ad52646e57fa46f87fe35d84828b67334d1/comments", "author": null, "committer": null, "parents": [{"sha": "090431b5968a680b94ad3934b66e90c6b17b5383", "url": "https://api.github.com/repos/libdynd/libdynd/commits/090431b5968a680b94ad3934b66e90c6b17b5383", "html_url": "https://github.com/libdynd/libdynd/commit/090431b5968a680b94ad3934b66e90c6b17b5383"}]}, {"sha": "090431b5968a680b94ad3934b66e90c6b17b5383", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-16T15:05:36Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-16T15:05:36Z"}, "message": "Commented out some MKL tests", "tree": {"sha": "cb398905b5149e27348c1601c92c1e73e0e3aeaf", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/cb398905b5149e27348c1601c92c1e73e0e3aeaf"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/090431b5968a680b94ad3934b66e90c6b17b5383", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/090431b5968a680b94ad3934b66e90c6b17b5383", "html_url": "https://github.com/libdynd/libdynd/commit/090431b5968a680b94ad3934b66e90c6b17b5383", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/090431b5968a680b94ad3934b66e90c6b17b5383/comments", "author": null, "committer": null, "parents": [{"sha": "5e8e70fcc7edda96197fb68a6eb695b6b67d587a", "url": "https://api.github.com/repos/libdynd/libdynd/commits/5e8e70fcc7edda96197fb68a6eb695b6b67d587a", "html_url": "https://github.com/libdynd/libdynd/commit/5e8e70fcc7edda96197fb68a6eb695b6b67d587a"}]}, {"sha": "5e8e70fcc7edda96197fb68a6eb695b6b67d587a", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-16T14:42:53Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-16T14:42:53Z"}, "message": "Removed unnused variable", "tree": {"sha": "6f9f37a52d35348c95c19a692f4413fdcf3f4e03", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/6f9f37a52d35348c95c19a692f4413fdcf3f4e03"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/5e8e70fcc7edda96197fb68a6eb695b6b67d587a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/5e8e70fcc7edda96197fb68a6eb695b6b67d587a", "html_url": "https://github.com/libdynd/libdynd/commit/5e8e70fcc7edda96197fb68a6eb695b6b67d587a", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/5e8e70fcc7edda96197fb68a6eb695b6b67d587a/comments", "author": null, "committer": null, "parents": [{"sha": "6457a68844436c6e301eb4bbe6708d037c96d0f1", "url": "https://api.github.com/repos/libdynd/libdynd/commits/6457a68844436c6e301eb4bbe6708d037c96d0f1", "html_url": "https://github.com/libdynd/libdynd/commit/6457a68844436c6e301eb4bbe6708d037c96d0f1"}]}, {"sha": "6457a68844436c6e301eb4bbe6708d037c96d0f1", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-16T14:25:34Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-16T14:25:34Z"}, "message": "Removed status variable", "tree": {"sha": "3817f4a19b85491e4bbb60b939ae18efa404c759", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/3817f4a19b85491e4bbb60b939ae18efa404c759"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/6457a68844436c6e301eb4bbe6708d037c96d0f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/6457a68844436c6e301eb4bbe6708d037c96d0f1", "html_url": "https://github.com/libdynd/libdynd/commit/6457a68844436c6e301eb4bbe6708d037c96d0f1", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/6457a68844436c6e301eb4bbe6708d037c96d0f1/comments", "author": null, "committer": null, "parents": [{"sha": "7cc8dd51ec89d400f7f795a6e5c5fb1878f05fe3", "url": "https://api.github.com/repos/libdynd/libdynd/commits/7cc8dd51ec89d400f7f795a6e5c5fb1878f05fe3", "html_url": "https://github.com/libdynd/libdynd/commit/7cc8dd51ec89d400f7f795a6e5c5fb1878f05fe3"}]}, {"sha": "7cc8dd51ec89d400f7f795a6e5c5fb1878f05fe3", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-16T14:09:59Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-16T14:09:59Z"}, "message": "Removed FindBLAS", "tree": {"sha": "c97b1535dd145777252b11d89eaa43cddee72a4a", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/c97b1535dd145777252b11d89eaa43cddee72a4a"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/7cc8dd51ec89d400f7f795a6e5c5fb1878f05fe3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/7cc8dd51ec89d400f7f795a6e5c5fb1878f05fe3", "html_url": "https://github.com/libdynd/libdynd/commit/7cc8dd51ec89d400f7f795a6e5c5fb1878f05fe3", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/7cc8dd51ec89d400f7f795a6e5c5fb1878f05fe3/comments", "author": null, "committer": null, "parents": [{"sha": "dbec69fcd6e464d84c193a0844e57074cf54de12", "url": "https://api.github.com/repos/libdynd/libdynd/commits/dbec69fcd6e464d84c193a0844e57074cf54de12", "html_url": "https://github.com/libdynd/libdynd/commit/dbec69fcd6e464d84c193a0844e57074cf54de12"}]}, {"sha": "dbec69fcd6e464d84c193a0844e57074cf54de12", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-16T13:51:25Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-16T13:51:25Z"}, "message": "Debug #0", "tree": {"sha": "0d91e7f66b088125e4fc8aa6ecdc3794f5ebca24", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/0d91e7f66b088125e4fc8aa6ecdc3794f5ebca24"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/dbec69fcd6e464d84c193a0844e57074cf54de12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/dbec69fcd6e464d84c193a0844e57074cf54de12", "html_url": "https://github.com/libdynd/libdynd/commit/dbec69fcd6e464d84c193a0844e57074cf54de12", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/dbec69fcd6e464d84c193a0844e57074cf54de12/comments", "author": null, "committer": null, "parents": [{"sha": "bece3692a3e286794cc8743c6e4aa28ee88e621a", "url": "https://api.github.com/repos/libdynd/libdynd/commits/bece3692a3e286794cc8743c6e4aa28ee88e621a", "html_url": "https://github.com/libdynd/libdynd/commit/bece3692a3e286794cc8743c6e4aa28ee88e621a"}]}, {"sha": "bece3692a3e286794cc8743c6e4aa28ee88e621a", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-16T13:45:50Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-16T13:45:50Z"}, "message": "Changed source command", "tree": {"sha": "cb06a0eec9c75b116d1cc5ecb393eb199c41d455", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/cb06a0eec9c75b116d1cc5ecb393eb199c41d455"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/bece3692a3e286794cc8743c6e4aa28ee88e621a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/bece3692a3e286794cc8743c6e4aa28ee88e621a", "html_url": "https://github.com/libdynd/libdynd/commit/bece3692a3e286794cc8743c6e4aa28ee88e621a", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/bece3692a3e286794cc8743c6e4aa28ee88e621a/comments", "author": null, "committer": null, "parents": [{"sha": "93c0006afdbbdae66a8b7feb31d345c2709c57cd", "url": "https://api.github.com/repos/libdynd/libdynd/commits/93c0006afdbbdae66a8b7feb31d345c2709c57cd", "html_url": "https://github.com/libdynd/libdynd/commit/93c0006afdbbdae66a8b7feb31d345c2709c57cd"}]}, {"sha": "93c0006afdbbdae66a8b7feb31d345c2709c57cd", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-16T13:39:53Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-16T13:39:53Z"}, "message": "Added build plugins", "tree": {"sha": "6e0acc38ae411dbbfc8c8819f73ae1df897a7fe0", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/6e0acc38ae411dbbfc8c8819f73ae1df897a7fe0"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/93c0006afdbbdae66a8b7feb31d345c2709c57cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/93c0006afdbbdae66a8b7feb31d345c2709c57cd", "html_url": "https://github.com/libdynd/libdynd/commit/93c0006afdbbdae66a8b7feb31d345c2709c57cd", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/93c0006afdbbdae66a8b7feb31d345c2709c57cd/comments", "author": null, "committer": null, "parents": [{"sha": "98c5d3a479c3cbf423c0f6c79cfd600335ca2726", "url": "https://api.github.com/repos/libdynd/libdynd/commits/98c5d3a479c3cbf423c0f6c79cfd600335ca2726", "html_url": "https://github.com/libdynd/libdynd/commit/98c5d3a479c3cbf423c0f6c79cfd600335ca2726"}]}, {"sha": "98c5d3a479c3cbf423c0f6c79cfd600335ca2726", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-16T12:10:56Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-16T12:10:56Z"}, "message": "Added a source .bashrc", "tree": {"sha": "49b80ea6289cb3d0938a67e6047590136b403bc2", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/49b80ea6289cb3d0938a67e6047590136b403bc2"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/98c5d3a479c3cbf423c0f6c79cfd600335ca2726", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/98c5d3a479c3cbf423c0f6c79cfd600335ca2726", "html_url": "https://github.com/libdynd/libdynd/commit/98c5d3a479c3cbf423c0f6c79cfd600335ca2726", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/98c5d3a479c3cbf423c0f6c79cfd600335ca2726/comments", "author": null, "committer": null, "parents": [{"sha": "78e83528bc7e3e8093d6ebfa219c562a75b9aaf8", "url": "https://api.github.com/repos/libdynd/libdynd/commits/78e83528bc7e3e8093d6ebfa219c562a75b9aaf8", "html_url": "https://github.com/libdynd/libdynd/commit/78e83528bc7e3e8093d6ebfa219c562a75b9aaf8"}]}, {"sha": "78e83528bc7e3e8093d6ebfa219c562a75b9aaf8", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-16T12:05:42Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-16T12:05:42Z"}, "message": "Added the check properly", "tree": {"sha": "0d64d7f2064e2b55ce68b9f071d910e0c9937d25", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/0d64d7f2064e2b55ce68b9f071d910e0c9937d25"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/78e83528bc7e3e8093d6ebfa219c562a75b9aaf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/78e83528bc7e3e8093d6ebfa219c562a75b9aaf8", "html_url": "https://github.com/libdynd/libdynd/commit/78e83528bc7e3e8093d6ebfa219c562a75b9aaf8", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/78e83528bc7e3e8093d6ebfa219c562a75b9aaf8/comments", "author": null, "committer": null, "parents": [{"sha": "b84625e85340b948e41f032845445cd22dc39789", "url": "https://api.github.com/repos/libdynd/libdynd/commits/b84625e85340b948e41f032845445cd22dc39789", "html_url": "https://github.com/libdynd/libdynd/commit/b84625e85340b948e41f032845445cd22dc39789"}]}, {"sha": "b84625e85340b948e41f032845445cd22dc39789", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-16T12:01:55Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-16T12:01:55Z"}, "message": "Using the cache for intel properly", "tree": {"sha": "4409219fc3981d53dc10261bbe8e0d2c1906d186", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/4409219fc3981d53dc10261bbe8e0d2c1906d186"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/b84625e85340b948e41f032845445cd22dc39789", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/b84625e85340b948e41f032845445cd22dc39789", "html_url": "https://github.com/libdynd/libdynd/commit/b84625e85340b948e41f032845445cd22dc39789", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/b84625e85340b948e41f032845445cd22dc39789/comments", "author": null, "committer": null, "parents": [{"sha": "5244219d33d201bbbd7e9eb6b5bea511e136ed63", "url": "https://api.github.com/repos/libdynd/libdynd/commits/5244219d33d201bbbd7e9eb6b5bea511e136ed63", "html_url": "https://github.com/libdynd/libdynd/commit/5244219d33d201bbbd7e9eb6b5bea511e136ed63"}]}, {"sha": "5244219d33d201bbbd7e9eb6b5bea511e136ed63", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-16T11:57:11Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-16T11:57:11Z"}, "message": "Checking Travis CI", "tree": {"sha": "6da8dc35860db21ab7b10c9a510fc769e00d7653", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/6da8dc35860db21ab7b10c9a510fc769e00d7653"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/5244219d33d201bbbd7e9eb6b5bea511e136ed63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/5244219d33d201bbbd7e9eb6b5bea511e136ed63", "html_url": "https://github.com/libdynd/libdynd/commit/5244219d33d201bbbd7e9eb6b5bea511e136ed63", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/5244219d33d201bbbd7e9eb6b5bea511e136ed63/comments", "author": null, "committer": null, "parents": [{"sha": "adace8bbefb75e46a52f97b775ab2616dad7a4f4", "url": "https://api.github.com/repos/libdynd/libdynd/commits/adace8bbefb75e46a52f97b775ab2616dad7a4f4", "html_url": "https://github.com/libdynd/libdynd/commit/adace8bbefb75e46a52f97b775ab2616dad7a4f4"}]}, {"sha": "adace8bbefb75e46a52f97b775ab2616dad7a4f4", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-16T11:52:29Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-16T11:52:29Z"}, "message": "Added test for directory", "tree": {"sha": "75746fdebbff76a7d699437796f4f73c7a292ea7", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/75746fdebbff76a7d699437796f4f73c7a292ea7"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/adace8bbefb75e46a52f97b775ab2616dad7a4f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/adace8bbefb75e46a52f97b775ab2616dad7a4f4", "html_url": "https://github.com/libdynd/libdynd/commit/adace8bbefb75e46a52f97b775ab2616dad7a4f4", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/adace8bbefb75e46a52f97b775ab2616dad7a4f4/comments", "author": null, "committer": null, "parents": [{"sha": "f39923718261aa0bc3997077aaf848b268572a41", "url": "https://api.github.com/repos/libdynd/libdynd/commits/f39923718261aa0bc3997077aaf848b268572a41", "html_url": "https://github.com/libdynd/libdynd/commit/f39923718261aa0bc3997077aaf848b268572a41"}]}, {"sha": "f39923718261aa0bc3997077aaf848b268572a41", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-16T11:23:13Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-16T11:23:13Z"}, "message": "Testing cache", "tree": {"sha": "25c044cfe93062a6b8fd463aa3122301f75d125f", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/25c044cfe93062a6b8fd463aa3122301f75d125f"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/f39923718261aa0bc3997077aaf848b268572a41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/f39923718261aa0bc3997077aaf848b268572a41", "html_url": "https://github.com/libdynd/libdynd/commit/f39923718261aa0bc3997077aaf848b268572a41", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/f39923718261aa0bc3997077aaf848b268572a41/comments", "author": null, "committer": null, "parents": [{"sha": "930a54fac9a0a2086e34ece9c5577d3ee14b1c33", "url": "https://api.github.com/repos/libdynd/libdynd/commits/930a54fac9a0a2086e34ece9c5577d3ee14b1c33", "html_url": "https://github.com/libdynd/libdynd/commit/930a54fac9a0a2086e34ece9c5577d3ee14b1c33"}]}, {"sha": "930a54fac9a0a2086e34ece9c5577d3ee14b1c33", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-16T10:46:24Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-16T10:46:24Z"}, "message": "Added intel as a cache directory", "tree": {"sha": "36a33c7487e71e9f8a36cdbbb42cef1e51668449", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/36a33c7487e71e9f8a36cdbbb42cef1e51668449"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/930a54fac9a0a2086e34ece9c5577d3ee14b1c33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/930a54fac9a0a2086e34ece9c5577d3ee14b1c33", "html_url": "https://github.com/libdynd/libdynd/commit/930a54fac9a0a2086e34ece9c5577d3ee14b1c33", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/930a54fac9a0a2086e34ece9c5577d3ee14b1c33/comments", "author": null, "committer": null, "parents": [{"sha": "a088c572d051574b342e05c2e680e78ba69c355a", "url": "https://api.github.com/repos/libdynd/libdynd/commits/a088c572d051574b342e05c2e680e78ba69c355a", "html_url": "https://github.com/libdynd/libdynd/commit/a088c572d051574b342e05c2e680e78ba69c355a"}]}, {"sha": "a088c572d051574b342e05c2e680e78ba69c355a", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-16T10:26:45Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-16T10:26:45Z"}, "message": "Specified mkl as the icc component", "tree": {"sha": "7020ed2f1af376711532887949ccb8e5fba2d824", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/7020ed2f1af376711532887949ccb8e5fba2d824"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/a088c572d051574b342e05c2e680e78ba69c355a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/a088c572d051574b342e05c2e680e78ba69c355a", "html_url": "https://github.com/libdynd/libdynd/commit/a088c572d051574b342e05c2e680e78ba69c355a", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/a088c572d051574b342e05c2e680e78ba69c355a/comments", "author": null, "committer": null, "parents": [{"sha": "d5a64d5941f7759b02ec521de1c7e25f9f449ea5", "url": "https://api.github.com/repos/libdynd/libdynd/commits/d5a64d5941f7759b02ec521de1c7e25f9f449ea5", "html_url": "https://github.com/libdynd/libdynd/commit/d5a64d5941f7759b02ec521de1c7e25f9f449ea5"}]}, {"sha": "d5a64d5941f7759b02ec521de1c7e25f9f449ea5", "commit": {"author": {"name": "Irwin Zaid", "email": "izaid@users.noreply.github.com", "date": "2016-07-16T10:19:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-16T10:19:57Z"}, "message": "Merge pull request #1294 from izaid/mkl\n\nAdding tests for MKL", "tree": {"sha": "32805589b612805aeffc49e3ff066d4eb9c37b97", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/32805589b612805aeffc49e3ff066d4eb9c37b97"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/d5a64d5941f7759b02ec521de1c7e25f9f449ea5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/d5a64d5941f7759b02ec521de1c7e25f9f449ea5", "html_url": "https://github.com/libdynd/libdynd/commit/d5a64d5941f7759b02ec521de1c7e25f9f449ea5", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/d5a64d5941f7759b02ec521de1c7e25f9f449ea5/comments", "author": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4571796db7fbb57ef8f17527b35d056e5a9582e1", "url": "https://api.github.com/repos/libdynd/libdynd/commits/4571796db7fbb57ef8f17527b35d056e5a9582e1", "html_url": "https://github.com/libdynd/libdynd/commit/4571796db7fbb57ef8f17527b35d056e5a9582e1"}, {"sha": "fa1cfa97cb4458c8eb455e7637162f631bcbc396", "url": "https://api.github.com/repos/libdynd/libdynd/commits/fa1cfa97cb4458c8eb455e7637162f631bcbc396", "html_url": "https://github.com/libdynd/libdynd/commit/fa1cfa97cb4458c8eb455e7637162f631bcbc396"}]}, {"sha": "fa1cfa97cb4458c8eb455e7637162f631bcbc396", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-16T10:11:36Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-16T10:11:36Z"}, "message": "Fix #0", "tree": {"sha": "32805589b612805aeffc49e3ff066d4eb9c37b97", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/32805589b612805aeffc49e3ff066d4eb9c37b97"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/fa1cfa97cb4458c8eb455e7637162f631bcbc396", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/fa1cfa97cb4458c8eb455e7637162f631bcbc396", "html_url": "https://github.com/libdynd/libdynd/commit/fa1cfa97cb4458c8eb455e7637162f631bcbc396", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/fa1cfa97cb4458c8eb455e7637162f631bcbc396/comments", "author": null, "committer": null, "parents": [{"sha": "a62051a568b1bdc9ccd2b22bc0a73f6c2de58a75", "url": "https://api.github.com/repos/libdynd/libdynd/commits/a62051a568b1bdc9ccd2b22bc0a73f6c2de58a75", "html_url": "https://github.com/libdynd/libdynd/commit/a62051a568b1bdc9ccd2b22bc0a73f6c2de58a75"}]}, {"sha": "a62051a568b1bdc9ccd2b22bc0a73f6c2de58a75", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-16T10:05:07Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-16T10:05:07Z"}, "message": "Added ./install-icc", "tree": {"sha": "6e3097221a2f40253b2d958cebd7640407399a51", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/6e3097221a2f40253b2d958cebd7640407399a51"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/a62051a568b1bdc9ccd2b22bc0a73f6c2de58a75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/a62051a568b1bdc9ccd2b22bc0a73f6c2de58a75", "html_url": "https://github.com/libdynd/libdynd/commit/a62051a568b1bdc9ccd2b22bc0a73f6c2de58a75", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/a62051a568b1bdc9ccd2b22bc0a73f6c2de58a75/comments", "author": null, "committer": null, "parents": [{"sha": "d7fb3b7d4ab755fd97ebe4d7a4866f52360295db", "url": "https://api.github.com/repos/libdynd/libdynd/commits/d7fb3b7d4ab755fd97ebe4d7a4866f52360295db", "html_url": "https://github.com/libdynd/libdynd/commit/d7fb3b7d4ab755fd97ebe4d7a4866f52360295db"}]}, {"sha": "d7fb3b7d4ab755fd97ebe4d7a4866f52360295db", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-16T10:01:17Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-16T10:01:17Z"}, "message": "Simplified icc wget", "tree": {"sha": "a65b4132f65a273c9bfc2bbc0ba96fc407d8834d", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/a65b4132f65a273c9bfc2bbc0ba96fc407d8834d"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/d7fb3b7d4ab755fd97ebe4d7a4866f52360295db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/d7fb3b7d4ab755fd97ebe4d7a4866f52360295db", "html_url": "https://github.com/libdynd/libdynd/commit/d7fb3b7d4ab755fd97ebe4d7a4866f52360295db", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/d7fb3b7d4ab755fd97ebe4d7a4866f52360295db/comments", "author": null, "committer": null, "parents": [{"sha": "6dad77984787add22a34b826642db35961247605", "url": "https://api.github.com/repos/libdynd/libdynd/commits/6dad77984787add22a34b826642db35961247605", "html_url": "https://github.com/libdynd/libdynd/commit/6dad77984787add22a34b826642db35961247605"}]}, {"sha": "6dad77984787add22a34b826642db35961247605", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-16T09:32:27Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-16T09:32:27Z"}, "message": "Added install-icc script to .travis.yml", "tree": {"sha": "99a5a6bf89ced2fd4115bab76354cf32867e836e", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/99a5a6bf89ced2fd4115bab76354cf32867e836e"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/6dad77984787add22a34b826642db35961247605", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/6dad77984787add22a34b826642db35961247605", "html_url": "https://github.com/libdynd/libdynd/commit/6dad77984787add22a34b826642db35961247605", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/6dad77984787add22a34b826642db35961247605/comments", "author": null, "committer": null, "parents": [{"sha": "4571796db7fbb57ef8f17527b35d056e5a9582e1", "url": "https://api.github.com/repos/libdynd/libdynd/commits/4571796db7fbb57ef8f17527b35d056e5a9582e1", "html_url": "https://github.com/libdynd/libdynd/commit/4571796db7fbb57ef8f17527b35d056e5a9582e1"}]}, {"sha": "4571796db7fbb57ef8f17527b35d056e5a9582e1", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-16T09:20:10Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-16T09:20:10Z"}, "message": "Added serial number for Intel Parallel Studio", "tree": {"sha": "ca49d8294552331c76929d4a4b189f5e32326b62", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/ca49d8294552331c76929d4a4b189f5e32326b62"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/4571796db7fbb57ef8f17527b35d056e5a9582e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/4571796db7fbb57ef8f17527b35d056e5a9582e1", "html_url": "https://github.com/libdynd/libdynd/commit/4571796db7fbb57ef8f17527b35d056e5a9582e1", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/4571796db7fbb57ef8f17527b35d056e5a9582e1/comments", "author": null, "committer": null, "parents": [{"sha": "aaa4d5a8ff5687befc5bec50f9444246d09690f3", "url": "https://api.github.com/repos/libdynd/libdynd/commits/aaa4d5a8ff5687befc5bec50f9444246d09690f3", "html_url": "https://github.com/libdynd/libdynd/commit/aaa4d5a8ff5687befc5bec50f9444246d09690f3"}]}, {"sha": "aaa4d5a8ff5687befc5bec50f9444246d09690f3", "commit": {"author": {"name": "Irwin Zaid", "email": "izaid@users.noreply.github.com", "date": "2016-07-14T08:44:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-14T08:44:36Z"}, "message": "Merge pull request #1293 from izaid/various\n\nFixed path bug in registry_entry::insert", "tree": {"sha": "da6066ce8472e7ef61e6ee4a8baba0fa58143d0d", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/da6066ce8472e7ef61e6ee4a8baba0fa58143d0d"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/aaa4d5a8ff5687befc5bec50f9444246d09690f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/aaa4d5a8ff5687befc5bec50f9444246d09690f3", "html_url": "https://github.com/libdynd/libdynd/commit/aaa4d5a8ff5687befc5bec50f9444246d09690f3", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/aaa4d5a8ff5687befc5bec50f9444246d09690f3/comments", "author": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b2f9bd2255cef4c2a59da9efeaf5b68a61639cd", "url": "https://api.github.com/repos/libdynd/libdynd/commits/3b2f9bd2255cef4c2a59da9efeaf5b68a61639cd", "html_url": "https://github.com/libdynd/libdynd/commit/3b2f9bd2255cef4c2a59da9efeaf5b68a61639cd"}, {"sha": "b9c780e76941c54574a4ea39158358e2d7a6a91a", "url": "https://api.github.com/repos/libdynd/libdynd/commits/b9c780e76941c54574a4ea39158358e2d7a6a91a", "html_url": "https://github.com/libdynd/libdynd/commit/b9c780e76941c54574a4ea39158358e2d7a6a91a"}]}, {"sha": "b9c780e76941c54574a4ea39158358e2d7a6a91a", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-14T08:21:15Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-14T08:21:15Z"}, "message": "Fixed path bug in registry_entry::insert", "tree": {"sha": "da6066ce8472e7ef61e6ee4a8baba0fa58143d0d", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/da6066ce8472e7ef61e6ee4a8baba0fa58143d0d"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/b9c780e76941c54574a4ea39158358e2d7a6a91a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/b9c780e76941c54574a4ea39158358e2d7a6a91a", "html_url": "https://github.com/libdynd/libdynd/commit/b9c780e76941c54574a4ea39158358e2d7a6a91a", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/b9c780e76941c54574a4ea39158358e2d7a6a91a/comments", "author": null, "committer": null, "parents": [{"sha": "3b2f9bd2255cef4c2a59da9efeaf5b68a61639cd", "url": "https://api.github.com/repos/libdynd/libdynd/commits/3b2f9bd2255cef4c2a59da9efeaf5b68a61639cd", "html_url": "https://github.com/libdynd/libdynd/commit/3b2f9bd2255cef4c2a59da9efeaf5b68a61639cd"}]}, {"sha": "3b2f9bd2255cef4c2a59da9efeaf5b68a61639cd", "commit": {"author": {"name": "Irwin Zaid", "email": "izaid@users.noreply.github.com", "date": "2016-07-13T23:37:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-13T23:37:43Z"}, "message": "Merge pull request #1292 from izaid/various\n\nUpdates to the registry", "tree": {"sha": "309a2ec6a41cac49cfa87a77513c83850fa8885c", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/309a2ec6a41cac49cfa87a77513c83850fa8885c"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/3b2f9bd2255cef4c2a59da9efeaf5b68a61639cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/3b2f9bd2255cef4c2a59da9efeaf5b68a61639cd", "html_url": "https://github.com/libdynd/libdynd/commit/3b2f9bd2255cef4c2a59da9efeaf5b68a61639cd", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/3b2f9bd2255cef4c2a59da9efeaf5b68a61639cd/comments", "author": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7610a48e09f7259a54987acf490d16f0bb2446f", "url": "https://api.github.com/repos/libdynd/libdynd/commits/d7610a48e09f7259a54987acf490d16f0bb2446f", "html_url": "https://github.com/libdynd/libdynd/commit/d7610a48e09f7259a54987acf490d16f0bb2446f"}, {"sha": "862714b4b0a8103ad0e7ff7ba9c6979a2259f948", "url": "https://api.github.com/repos/libdynd/libdynd/commits/862714b4b0a8103ad0e7ff7ba9c6979a2259f948", "html_url": "https://github.com/libdynd/libdynd/commit/862714b4b0a8103ad0e7ff7ba9c6979a2259f948"}]}, {"sha": "862714b4b0a8103ad0e7ff7ba9c6979a2259f948", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-13T23:19:11Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-13T23:19:11Z"}, "message": "Updates to registry", "tree": {"sha": "309a2ec6a41cac49cfa87a77513c83850fa8885c", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/309a2ec6a41cac49cfa87a77513c83850fa8885c"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/862714b4b0a8103ad0e7ff7ba9c6979a2259f948", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/862714b4b0a8103ad0e7ff7ba9c6979a2259f948", "html_url": "https://github.com/libdynd/libdynd/commit/862714b4b0a8103ad0e7ff7ba9c6979a2259f948", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/862714b4b0a8103ad0e7ff7ba9c6979a2259f948/comments", "author": null, "committer": null, "parents": [{"sha": "ab3a6475cd820b623ad44db1b2c60dcb48f0c553", "url": "https://api.github.com/repos/libdynd/libdynd/commits/ab3a6475cd820b623ad44db1b2c60dcb48f0c553", "html_url": "https://github.com/libdynd/libdynd/commit/ab3a6475cd820b623ad44db1b2c60dcb48f0c553"}]}, {"sha": "ab3a6475cd820b623ad44db1b2c60dcb48f0c553", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-13T18:35:32Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-13T18:35:32Z"}, "message": "Updates to registry", "tree": {"sha": "bafeb2cc823ded63dd433b81e5474bf742d4637c", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/bafeb2cc823ded63dd433b81e5474bf742d4637c"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/ab3a6475cd820b623ad44db1b2c60dcb48f0c553", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/ab3a6475cd820b623ad44db1b2c60dcb48f0c553", "html_url": "https://github.com/libdynd/libdynd/commit/ab3a6475cd820b623ad44db1b2c60dcb48f0c553", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/ab3a6475cd820b623ad44db1b2c60dcb48f0c553/comments", "author": null, "committer": null, "parents": [{"sha": "d7610a48e09f7259a54987acf490d16f0bb2446f", "url": "https://api.github.com/repos/libdynd/libdynd/commits/d7610a48e09f7259a54987acf490d16f0bb2446f", "html_url": "https://github.com/libdynd/libdynd/commit/d7610a48e09f7259a54987acf490d16f0bb2446f"}]}, {"sha": "d7610a48e09f7259a54987acf490d16f0bb2446f", "commit": {"author": {"name": "Irwin Zaid", "email": "izaid@users.noreply.github.com", "date": "2016-07-13T11:43:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-13T11:43:12Z"}, "message": "Update simple_example.cpp", "tree": {"sha": "1f9921570d9ce726ff21ef49cae2dc5cb27211d2", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/1f9921570d9ce726ff21ef49cae2dc5cb27211d2"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/d7610a48e09f7259a54987acf490d16f0bb2446f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/d7610a48e09f7259a54987acf490d16f0bb2446f", "html_url": "https://github.com/libdynd/libdynd/commit/d7610a48e09f7259a54987acf490d16f0bb2446f", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/d7610a48e09f7259a54987acf490d16f0bb2446f/comments", "author": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7e4401c7232ed1484ae73b5e5d521a365a5f6d1", "url": "https://api.github.com/repos/libdynd/libdynd/commits/c7e4401c7232ed1484ae73b5e5d521a365a5f6d1", "html_url": "https://github.com/libdynd/libdynd/commit/c7e4401c7232ed1484ae73b5e5d521a365a5f6d1"}]}, {"sha": "c7e4401c7232ed1484ae73b5e5d521a365a5f6d1", "commit": {"author": {"name": "Irwin Zaid", "email": "izaid@users.noreply.github.com", "date": "2016-07-13T09:01:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-13T09:01:05Z"}, "message": "Merge pull request #1291 from izaid/destruct\n\nAdded registry.{h,c}pp", "tree": {"sha": "aee282a987e84d02b0be23be962f57e55bfc1959", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/aee282a987e84d02b0be23be962f57e55bfc1959"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/c7e4401c7232ed1484ae73b5e5d521a365a5f6d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/c7e4401c7232ed1484ae73b5e5d521a365a5f6d1", "html_url": "https://github.com/libdynd/libdynd/commit/c7e4401c7232ed1484ae73b5e5d521a365a5f6d1", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/c7e4401c7232ed1484ae73b5e5d521a365a5f6d1/comments", "author": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfbb4f504beb5d2cfd77badbf43a466921e343cd", "url": "https://api.github.com/repos/libdynd/libdynd/commits/dfbb4f504beb5d2cfd77badbf43a466921e343cd", "html_url": "https://github.com/libdynd/libdynd/commit/dfbb4f504beb5d2cfd77badbf43a466921e343cd"}, {"sha": "d03fd2ff75ea2b25b830cfb274bd08df06ac1edd", "url": "https://api.github.com/repos/libdynd/libdynd/commits/d03fd2ff75ea2b25b830cfb274bd08df06ac1edd", "html_url": "https://github.com/libdynd/libdynd/commit/d03fd2ff75ea2b25b830cfb274bd08df06ac1edd"}]}, {"sha": "d03fd2ff75ea2b25b830cfb274bd08df06ac1edd", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-13T08:28:22Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-13T08:28:22Z"}, "message": "Added registry.{h,c}pp", "tree": {"sha": "aee282a987e84d02b0be23be962f57e55bfc1959", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/aee282a987e84d02b0be23be962f57e55bfc1959"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/d03fd2ff75ea2b25b830cfb274bd08df06ac1edd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/d03fd2ff75ea2b25b830cfb274bd08df06ac1edd", "html_url": "https://github.com/libdynd/libdynd/commit/d03fd2ff75ea2b25b830cfb274bd08df06ac1edd", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/d03fd2ff75ea2b25b830cfb274bd08df06ac1edd/comments", "author": null, "committer": null, "parents": [{"sha": "dfbb4f504beb5d2cfd77badbf43a466921e343cd", "url": "https://api.github.com/repos/libdynd/libdynd/commits/dfbb4f504beb5d2cfd77badbf43a466921e343cd", "html_url": "https://github.com/libdynd/libdynd/commit/dfbb4f504beb5d2cfd77badbf43a466921e343cd"}]}, {"sha": "dfbb4f504beb5d2cfd77badbf43a466921e343cd", "commit": {"author": {"name": "Irwin Zaid", "email": "izaid@users.noreply.github.com", "date": "2016-07-12T20:48:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-12T20:48:56Z"}, "message": "Merge pull request #1289 from izaid/registry\n\nSome follow-on changes for registry API", "tree": {"sha": "49ebb574352a1db9b765cefe6fb72ccb084797b1", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/49ebb574352a1db9b765cefe6fb72ccb084797b1"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/dfbb4f504beb5d2cfd77badbf43a466921e343cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/dfbb4f504beb5d2cfd77badbf43a466921e343cd", "html_url": "https://github.com/libdynd/libdynd/commit/dfbb4f504beb5d2cfd77badbf43a466921e343cd", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/dfbb4f504beb5d2cfd77badbf43a466921e343cd/comments", "author": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e081d4c91991e68921bbc5a81a2ad01f5e82cdc", "url": "https://api.github.com/repos/libdynd/libdynd/commits/3e081d4c91991e68921bbc5a81a2ad01f5e82cdc", "html_url": "https://github.com/libdynd/libdynd/commit/3e081d4c91991e68921bbc5a81a2ad01f5e82cdc"}, {"sha": "e990db9f95776f6fff1658ec969f4d8552f5672c", "url": "https://api.github.com/repos/libdynd/libdynd/commits/e990db9f95776f6fff1658ec969f4d8552f5672c", "html_url": "https://github.com/libdynd/libdynd/commit/e990db9f95776f6fff1658ec969f4d8552f5672c"}]}, {"sha": "e990db9f95776f6fff1658ec969f4d8552f5672c", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-12T20:08:24Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-12T20:08:24Z"}, "message": "Some follow-on changes for registry API", "tree": {"sha": "49ebb574352a1db9b765cefe6fb72ccb084797b1", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/49ebb574352a1db9b765cefe6fb72ccb084797b1"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/e990db9f95776f6fff1658ec969f4d8552f5672c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/e990db9f95776f6fff1658ec969f4d8552f5672c", "html_url": "https://github.com/libdynd/libdynd/commit/e990db9f95776f6fff1658ec969f4d8552f5672c", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/e990db9f95776f6fff1658ec969f4d8552f5672c/comments", "author": null, "committer": null, "parents": [{"sha": "3e081d4c91991e68921bbc5a81a2ad01f5e82cdc", "url": "https://api.github.com/repos/libdynd/libdynd/commits/3e081d4c91991e68921bbc5a81a2ad01f5e82cdc", "html_url": "https://github.com/libdynd/libdynd/commit/3e081d4c91991e68921bbc5a81a2ad01f5e82cdc"}]}, {"sha": "3e081d4c91991e68921bbc5a81a2ad01f5e82cdc", "commit": {"author": {"name": "Irwin Zaid", "email": "izaid@users.noreply.github.com", "date": "2016-07-12T16:55:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-12T16:55:27Z"}, "message": "Update CMakeLists.txt", "tree": {"sha": "527a20233fdac6116081dffba31a6aa09735ca8b", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/527a20233fdac6116081dffba31a6aa09735ca8b"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/3e081d4c91991e68921bbc5a81a2ad01f5e82cdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/3e081d4c91991e68921bbc5a81a2ad01f5e82cdc", "html_url": "https://github.com/libdynd/libdynd/commit/3e081d4c91991e68921bbc5a81a2ad01f5e82cdc", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/3e081d4c91991e68921bbc5a81a2ad01f5e82cdc/comments", "author": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c343fc40e0f7d8c64c2ac27a5fba602732d64eab", "url": "https://api.github.com/repos/libdynd/libdynd/commits/c343fc40e0f7d8c64c2ac27a5fba602732d64eab", "html_url": "https://github.com/libdynd/libdynd/commit/c343fc40e0f7d8c64c2ac27a5fba602732d64eab"}]}, {"sha": "c343fc40e0f7d8c64c2ac27a5fba602732d64eab", "commit": {"author": {"name": "Irwin Zaid", "email": "izaid@users.noreply.github.com", "date": "2016-07-12T16:38:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-12T16:38:45Z"}, "message": "Merge pull request #1288 from izaid/various\n\nRemoved dynd::get(), added dynd::parent_registry() and some registry()", "tree": {"sha": "97dd2b1441fa22a4d5474862fb5854f7e37b748e", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/97dd2b1441fa22a4d5474862fb5854f7e37b748e"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/c343fc40e0f7d8c64c2ac27a5fba602732d64eab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/c343fc40e0f7d8c64c2ac27a5fba602732d64eab", "html_url": "https://github.com/libdynd/libdynd/commit/c343fc40e0f7d8c64c2ac27a5fba602732d64eab", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/c343fc40e0f7d8c64c2ac27a5fba602732d64eab/comments", "author": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd24f2a403f10f0be5b02999da79edf7771343d0", "url": "https://api.github.com/repos/libdynd/libdynd/commits/cd24f2a403f10f0be5b02999da79edf7771343d0", "html_url": "https://github.com/libdynd/libdynd/commit/cd24f2a403f10f0be5b02999da79edf7771343d0"}, {"sha": "ff1c3e7a883b87e2902b8d0e15a8fc5682b99c46", "url": "https://api.github.com/repos/libdynd/libdynd/commits/ff1c3e7a883b87e2902b8d0e15a8fc5682b99c46", "html_url": "https://github.com/libdynd/libdynd/commit/ff1c3e7a883b87e2902b8d0e15a8fc5682b99c46"}]}, {"sha": "ff1c3e7a883b87e2902b8d0e15a8fc5682b99c46", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-12T14:21:58Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-12T14:21:58Z"}, "message": "Removed dynd::get(), added dynd::parent_registry() and some registry()", "tree": {"sha": "97dd2b1441fa22a4d5474862fb5854f7e37b748e", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/97dd2b1441fa22a4d5474862fb5854f7e37b748e"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/ff1c3e7a883b87e2902b8d0e15a8fc5682b99c46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/ff1c3e7a883b87e2902b8d0e15a8fc5682b99c46", "html_url": "https://github.com/libdynd/libdynd/commit/ff1c3e7a883b87e2902b8d0e15a8fc5682b99c46", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/ff1c3e7a883b87e2902b8d0e15a8fc5682b99c46/comments", "author": null, "committer": null, "parents": [{"sha": "cd24f2a403f10f0be5b02999da79edf7771343d0", "url": "https://api.github.com/repos/libdynd/libdynd/commits/cd24f2a403f10f0be5b02999da79edf7771343d0", "html_url": "https://github.com/libdynd/libdynd/commit/cd24f2a403f10f0be5b02999da79edf7771343d0"}]}, {"sha": "cd24f2a403f10f0be5b02999da79edf7771343d0", "commit": {"author": {"name": "Irwin Zaid", "email": "izaid@users.noreply.github.com", "date": "2016-07-12T12:06:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-12T12:06:38Z"}, "message": "Merge pull request #1287 from izaid/various\n\nChanging the registry API", "tree": {"sha": "12b654ca1eaf7b155f3b05ffe8a8add4504b1f4c", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/12b654ca1eaf7b155f3b05ffe8a8add4504b1f4c"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/cd24f2a403f10f0be5b02999da79edf7771343d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/cd24f2a403f10f0be5b02999da79edf7771343d0", "html_url": "https://github.com/libdynd/libdynd/commit/cd24f2a403f10f0be5b02999da79edf7771343d0", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/cd24f2a403f10f0be5b02999da79edf7771343d0/comments", "author": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b45ba745510553730ca8717a4f3d8191922b0ab9", "url": "https://api.github.com/repos/libdynd/libdynd/commits/b45ba745510553730ca8717a4f3d8191922b0ab9", "html_url": "https://github.com/libdynd/libdynd/commit/b45ba745510553730ca8717a4f3d8191922b0ab9"}, {"sha": "3f4dfadbdba665c3383590b2015d9cfa9efb2e4f", "url": "https://api.github.com/repos/libdynd/libdynd/commits/3f4dfadbdba665c3383590b2015d9cfa9efb2e4f", "html_url": "https://github.com/libdynd/libdynd/commit/3f4dfadbdba665c3383590b2015d9cfa9efb2e4f"}]}, {"sha": "3f4dfadbdba665c3383590b2015d9cfa9efb2e4f", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-12T11:47:31Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-12T11:47:31Z"}, "message": "Removed dynd::insert", "tree": {"sha": "12b654ca1eaf7b155f3b05ffe8a8add4504b1f4c", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/12b654ca1eaf7b155f3b05ffe8a8add4504b1f4c"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/3f4dfadbdba665c3383590b2015d9cfa9efb2e4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/3f4dfadbdba665c3383590b2015d9cfa9efb2e4f", "html_url": "https://github.com/libdynd/libdynd/commit/3f4dfadbdba665c3383590b2015d9cfa9efb2e4f", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/3f4dfadbdba665c3383590b2015d9cfa9efb2e4f/comments", "author": null, "committer": null, "parents": [{"sha": "a4ea0bdaad41f6dd892a69a1ed555c47d8ff9c64", "url": "https://api.github.com/repos/libdynd/libdynd/commits/a4ea0bdaad41f6dd892a69a1ed555c47d8ff9c64", "html_url": "https://github.com/libdynd/libdynd/commit/a4ea0bdaad41f6dd892a69a1ed555c47d8ff9c64"}]}, {"sha": "a4ea0bdaad41f6dd892a69a1ed555c47d8ff9c64", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-12T11:29:43Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-12T11:29:43Z"}, "message": "Cleaned up more of the registry API", "tree": {"sha": "995cface273cfd70c817df059310f113b60a1d93", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/995cface273cfd70c817df059310f113b60a1d93"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/a4ea0bdaad41f6dd892a69a1ed555c47d8ff9c64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/a4ea0bdaad41f6dd892a69a1ed555c47d8ff9c64", "html_url": "https://github.com/libdynd/libdynd/commit/a4ea0bdaad41f6dd892a69a1ed555c47d8ff9c64", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/a4ea0bdaad41f6dd892a69a1ed555c47d8ff9c64/comments", "author": null, "committer": null, "parents": [{"sha": "403e82ec652e3584167b1c6e2a7bff2ff82d721c", "url": "https://api.github.com/repos/libdynd/libdynd/commits/403e82ec652e3584167b1c6e2a7bff2ff82d721c", "html_url": "https://github.com/libdynd/libdynd/commit/403e82ec652e3584167b1c6e2a7bff2ff82d721c"}]}, {"sha": "403e82ec652e3584167b1c6e2a7bff2ff82d721c", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-12T10:52:16Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-12T10:52:16Z"}, "message": "Changing the registry API", "tree": {"sha": "5d6aa1b0f17bf9c521fcba6da25bcc1f32ee9997", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/5d6aa1b0f17bf9c521fcba6da25bcc1f32ee9997"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/403e82ec652e3584167b1c6e2a7bff2ff82d721c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/403e82ec652e3584167b1c6e2a7bff2ff82d721c", "html_url": "https://github.com/libdynd/libdynd/commit/403e82ec652e3584167b1c6e2a7bff2ff82d721c", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/403e82ec652e3584167b1c6e2a7bff2ff82d721c/comments", "author": null, "committer": null, "parents": [{"sha": "b45ba745510553730ca8717a4f3d8191922b0ab9", "url": "https://api.github.com/repos/libdynd/libdynd/commits/b45ba745510553730ca8717a4f3d8191922b0ab9", "html_url": "https://github.com/libdynd/libdynd/commit/b45ba745510553730ca8717a4f3d8191922b0ab9"}]}, {"sha": "b45ba745510553730ca8717a4f3d8191922b0ab9", "commit": {"author": {"name": "Irwin Zaid", "email": "izaid@users.noreply.github.com", "date": "2016-07-12T09:43:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-12T09:43:37Z"}, "message": "Merge pull request #1286 from izaid/various\n\nAdded dynd. to registry", "tree": {"sha": "99e1c856ac9a1b92cdf80fad2f9f853cf0b88e5d", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/99e1c856ac9a1b92cdf80fad2f9f853cf0b88e5d"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/b45ba745510553730ca8717a4f3d8191922b0ab9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/b45ba745510553730ca8717a4f3d8191922b0ab9", "html_url": "https://github.com/libdynd/libdynd/commit/b45ba745510553730ca8717a4f3d8191922b0ab9", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/b45ba745510553730ca8717a4f3d8191922b0ab9/comments", "author": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b07377ca298eafe9f86ae9a370ed3571b08d280", "url": "https://api.github.com/repos/libdynd/libdynd/commits/1b07377ca298eafe9f86ae9a370ed3571b08d280", "html_url": "https://github.com/libdynd/libdynd/commit/1b07377ca298eafe9f86ae9a370ed3571b08d280"}, {"sha": "f8b248346dbbd4c189f201d2d96b54dfa9d60801", "url": "https://api.github.com/repos/libdynd/libdynd/commits/f8b248346dbbd4c189f201d2d96b54dfa9d60801", "html_url": "https://github.com/libdynd/libdynd/commit/f8b248346dbbd4c189f201d2d96b54dfa9d60801"}]}, {"sha": "f8b248346dbbd4c189f201d2d96b54dfa9d60801", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-12T09:25:47Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-12T09:25:47Z"}, "message": "Added dynd. to registry", "tree": {"sha": "99e1c856ac9a1b92cdf80fad2f9f853cf0b88e5d", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/99e1c856ac9a1b92cdf80fad2f9f853cf0b88e5d"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/f8b248346dbbd4c189f201d2d96b54dfa9d60801", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/f8b248346dbbd4c189f201d2d96b54dfa9d60801", "html_url": "https://github.com/libdynd/libdynd/commit/f8b248346dbbd4c189f201d2d96b54dfa9d60801", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/f8b248346dbbd4c189f201d2d96b54dfa9d60801/comments", "author": null, "committer": null, "parents": [{"sha": "1b07377ca298eafe9f86ae9a370ed3571b08d280", "url": "https://api.github.com/repos/libdynd/libdynd/commits/1b07377ca298eafe9f86ae9a370ed3571b08d280", "html_url": "https://github.com/libdynd/libdynd/commit/1b07377ca298eafe9f86ae9a370ed3571b08d280"}]}, {"sha": "1b07377ca298eafe9f86ae9a370ed3571b08d280", "commit": {"author": {"name": "Irwin Zaid", "email": "izaid@users.noreply.github.com", "date": "2016-07-12T08:37:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-12T08:37:38Z"}, "message": "Merge pull request #1285 from izaid/various\n\nAdded nd. to the registry", "tree": {"sha": "f86387bc8c535e3045011a124bf0bc6dc114ae16", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/f86387bc8c535e3045011a124bf0bc6dc114ae16"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/1b07377ca298eafe9f86ae9a370ed3571b08d280", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/1b07377ca298eafe9f86ae9a370ed3571b08d280", "html_url": "https://github.com/libdynd/libdynd/commit/1b07377ca298eafe9f86ae9a370ed3571b08d280", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/1b07377ca298eafe9f86ae9a370ed3571b08d280/comments", "author": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "725cd90c512869c1e275686b0ffbb2e94c8e5cc0", "url": "https://api.github.com/repos/libdynd/libdynd/commits/725cd90c512869c1e275686b0ffbb2e94c8e5cc0", "html_url": "https://github.com/libdynd/libdynd/commit/725cd90c512869c1e275686b0ffbb2e94c8e5cc0"}, {"sha": "6856d35948e6d4d1ea77fec3c65372f8e7f95fec", "url": "https://api.github.com/repos/libdynd/libdynd/commits/6856d35948e6d4d1ea77fec3c65372f8e7f95fec", "html_url": "https://github.com/libdynd/libdynd/commit/6856d35948e6d4d1ea77fec3c65372f8e7f95fec"}]}, {"sha": "6856d35948e6d4d1ea77fec3c65372f8e7f95fec", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-12T07:47:39Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-12T07:47:39Z"}, "message": "Added nd. to the registry", "tree": {"sha": "f86387bc8c535e3045011a124bf0bc6dc114ae16", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/f86387bc8c535e3045011a124bf0bc6dc114ae16"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/6856d35948e6d4d1ea77fec3c65372f8e7f95fec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/6856d35948e6d4d1ea77fec3c65372f8e7f95fec", "html_url": "https://github.com/libdynd/libdynd/commit/6856d35948e6d4d1ea77fec3c65372f8e7f95fec", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/6856d35948e6d4d1ea77fec3c65372f8e7f95fec/comments", "author": null, "committer": null, "parents": [{"sha": "725cd90c512869c1e275686b0ffbb2e94c8e5cc0", "url": "https://api.github.com/repos/libdynd/libdynd/commits/725cd90c512869c1e275686b0ffbb2e94c8e5cc0", "html_url": "https://github.com/libdynd/libdynd/commit/725cd90c512869c1e275686b0ffbb2e94c8e5cc0"}]}, {"sha": "725cd90c512869c1e275686b0ffbb2e94c8e5cc0", "commit": {"author": {"name": "Irwin Zaid", "email": "izaid@users.noreply.github.com", "date": "2016-07-11T22:15:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-11T22:15:25Z"}, "message": "Merge pull request #1284 from izaid/various\n\nMaking the registry use absolute paths", "tree": {"sha": "964af2ca26cbfe30cb9a3ad259af1fcac561a62e", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/964af2ca26cbfe30cb9a3ad259af1fcac561a62e"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/725cd90c512869c1e275686b0ffbb2e94c8e5cc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/725cd90c512869c1e275686b0ffbb2e94c8e5cc0", "html_url": "https://github.com/libdynd/libdynd/commit/725cd90c512869c1e275686b0ffbb2e94c8e5cc0", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/725cd90c512869c1e275686b0ffbb2e94c8e5cc0/comments", "author": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "235d14ec4a5f4394ff4c179f1bcebb07f81cee18", "url": "https://api.github.com/repos/libdynd/libdynd/commits/235d14ec4a5f4394ff4c179f1bcebb07f81cee18", "html_url": "https://github.com/libdynd/libdynd/commit/235d14ec4a5f4394ff4c179f1bcebb07f81cee18"}, {"sha": "90089140c36192b92f3a7be18a1d7994aa1633ef", "url": "https://api.github.com/repos/libdynd/libdynd/commits/90089140c36192b92f3a7be18a1d7994aa1633ef", "html_url": "https://github.com/libdynd/libdynd/commit/90089140c36192b92f3a7be18a1d7994aa1633ef"}]}, {"sha": "90089140c36192b92f3a7be18a1d7994aa1633ef", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-11T21:48:14Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-11T21:48:14Z"}, "message": "Moved more registry-related functions outside dynd::nd", "tree": {"sha": "964af2ca26cbfe30cb9a3ad259af1fcac561a62e", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/964af2ca26cbfe30cb9a3ad259af1fcac561a62e"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/90089140c36192b92f3a7be18a1d7994aa1633ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/90089140c36192b92f3a7be18a1d7994aa1633ef", "html_url": "https://github.com/libdynd/libdynd/commit/90089140c36192b92f3a7be18a1d7994aa1633ef", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/90089140c36192b92f3a7be18a1d7994aa1633ef/comments", "author": null, "committer": null, "parents": [{"sha": "1075889ef4d1eccd6a2356c0be8d363dc5b4a3be", "url": "https://api.github.com/repos/libdynd/libdynd/commits/1075889ef4d1eccd6a2356c0be8d363dc5b4a3be", "html_url": "https://github.com/libdynd/libdynd/commit/1075889ef4d1eccd6a2356c0be8d363dc5b4a3be"}]}, {"sha": "1075889ef4d1eccd6a2356c0be8d363dc5b4a3be", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-11T21:14:29Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-07-11T21:14:29Z"}, "message": "Moved nd::get to dynd::get", "tree": {"sha": "c8d911992592d57fddd6dbd24a4b86e8e97d1883", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/c8d911992592d57fddd6dbd24a4b86e8e97d1883"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/1075889ef4d1eccd6a2356c0be8d363dc5b4a3be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/1075889ef4d1eccd6a2356c0be8d363dc5b4a3be", "html_url": "https://github.com/libdynd/libdynd/commit/1075889ef4d1eccd6a2356c0be8d363dc5b4a3be", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/1075889ef4d1eccd6a2356c0be8d363dc5b4a3be/comments", "author": null, "committer": null, "parents": [{"sha": "235d14ec4a5f4394ff4c179f1bcebb07f81cee18", "url": "https://api.github.com/repos/libdynd/libdynd/commits/235d14ec4a5f4394ff4c179f1bcebb07f81cee18", "html_url": "https://github.com/libdynd/libdynd/commit/235d14ec4a5f4394ff4c179f1bcebb07f81cee18"}]}, {"sha": "235d14ec4a5f4394ff4c179f1bcebb07f81cee18", "commit": {"author": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2016-06-25T04:35:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-06-25T04:35:31Z"}, "message": "Merge pull request #1283 from insertinterestingnamehere/recipes\n\nClean up conda recipe", "tree": {"sha": "31071b74f12a28933cdb64accd2c8136b7893742", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/31071b74f12a28933cdb64accd2c8136b7893742"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/235d14ec4a5f4394ff4c179f1bcebb07f81cee18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/235d14ec4a5f4394ff4c179f1bcebb07f81cee18", "html_url": "https://github.com/libdynd/libdynd/commit/235d14ec4a5f4394ff4c179f1bcebb07f81cee18", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/235d14ec4a5f4394ff4c179f1bcebb07f81cee18/comments", "author": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2137ef126ecc57f13b35e79ef7f7d3694f479054", "url": "https://api.github.com/repos/libdynd/libdynd/commits/2137ef126ecc57f13b35e79ef7f7d3694f479054", "html_url": "https://github.com/libdynd/libdynd/commit/2137ef126ecc57f13b35e79ef7f7d3694f479054"}, {"sha": "aa457f265cf8f6acad1eba30df644f0b6428bae2", "url": "https://api.github.com/repos/libdynd/libdynd/commits/aa457f265cf8f6acad1eba30df644f0b6428bae2", "html_url": "https://github.com/libdynd/libdynd/commit/aa457f265cf8f6acad1eba30df644f0b6428bae2"}]}, {"sha": "aa457f265cf8f6acad1eba30df644f0b6428bae2", "commit": {"author": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2016-06-24T13:18:00Z"}, "committer": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2016-06-24T14:19:03Z"}, "message": "Re-add code using script_env in meta.yaml to forward CC and CXX to\nthe build script on Linux.\nChange clang/Python build back to gcc to avoid issues with LLVM apt\nsources not working. See\nhttps://github.com/travis-ci/travis-ci/issues/6120.", "tree": {"sha": "7a2037dfa1a1c2a1d93950c9b3fab2f9892b412b", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/7a2037dfa1a1c2a1d93950c9b3fab2f9892b412b"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/aa457f265cf8f6acad1eba30df644f0b6428bae2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/aa457f265cf8f6acad1eba30df644f0b6428bae2", "html_url": "https://github.com/libdynd/libdynd/commit/aa457f265cf8f6acad1eba30df644f0b6428bae2", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/aa457f265cf8f6acad1eba30df644f0b6428bae2/comments", "author": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "committer": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b3a84549892facc9f31e83757a02b6dbd53f8df", "url": "https://api.github.com/repos/libdynd/libdynd/commits/9b3a84549892facc9f31e83757a02b6dbd53f8df", "html_url": "https://github.com/libdynd/libdynd/commit/9b3a84549892facc9f31e83757a02b6dbd53f8df"}]}, {"sha": "9b3a84549892facc9f31e83757a02b6dbd53f8df", "commit": {"author": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2016-06-24T06:37:28Z"}, "committer": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2016-06-24T06:37:28Z"}, "message": "Increase clang version used in Linux/Clang/Python test to 3.8.", "tree": {"sha": "13943c60ec85ed3ab7ef14248f49cd05029d203c", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/13943c60ec85ed3ab7ef14248f49cd05029d203c"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/9b3a84549892facc9f31e83757a02b6dbd53f8df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/9b3a84549892facc9f31e83757a02b6dbd53f8df", "html_url": "https://github.com/libdynd/libdynd/commit/9b3a84549892facc9f31e83757a02b6dbd53f8df", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/9b3a84549892facc9f31e83757a02b6dbd53f8df/comments", "author": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "committer": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "567abcb1905fee05a04aa03ae07af77ab74fc428", "url": "https://api.github.com/repos/libdynd/libdynd/commits/567abcb1905fee05a04aa03ae07af77ab74fc428", "html_url": "https://github.com/libdynd/libdynd/commit/567abcb1905fee05a04aa03ae07af77ab74fc428"}]}, {"sha": "567abcb1905fee05a04aa03ae07af77ab74fc428", "commit": {"author": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2016-06-24T06:23:45Z"}, "committer": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2016-06-24T06:23:45Z"}, "message": "Clean out cruft from travis CI build.\nSet up coverage build to use gcc 6.\nChange Python build back to using clang 3.5 since it's the only place\nwhere clang/dynd-python is tested on Linux.", "tree": {"sha": "6a19f0f33389c29da4212237d93be52e52d3b446", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/6a19f0f33389c29da4212237d93be52e52d3b446"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/567abcb1905fee05a04aa03ae07af77ab74fc428", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/567abcb1905fee05a04aa03ae07af77ab74fc428", "html_url": "https://github.com/libdynd/libdynd/commit/567abcb1905fee05a04aa03ae07af77ab74fc428", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/567abcb1905fee05a04aa03ae07af77ab74fc428/comments", "author": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "committer": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e954f824f692c0cc717d116e0d40e75f5c194edb", "url": "https://api.github.com/repos/libdynd/libdynd/commits/e954f824f692c0cc717d116e0d40e75f5c194edb", "html_url": "https://github.com/libdynd/libdynd/commit/e954f824f692c0cc717d116e0d40e75f5c194edb"}]}, {"sha": "e954f824f692c0cc717d116e0d40e75f5c194edb", "commit": {"author": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2016-06-24T04:37:22Z"}, "committer": {"name": "Ian Henriksen", "email": "insertinterestingnamehere@gmail.com", "date": "2016-06-24T04:37:22Z"}, "message": "Clean out conda recipe for libdynd.\nAuto-detect the number of processors and use that to build the\nconda package in parallel on non-CI systems.\nStop statically linking libstdc++.\nClear out some dead code.", "tree": {"sha": "e85fb4264f703f7ac8a83bf593e62c46c14d20ab", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/e85fb4264f703f7ac8a83bf593e62c46c14d20ab"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/e954f824f692c0cc717d116e0d40e75f5c194edb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/e954f824f692c0cc717d116e0d40e75f5c194edb", "html_url": "https://github.com/libdynd/libdynd/commit/e954f824f692c0cc717d116e0d40e75f5c194edb", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/e954f824f692c0cc717d116e0d40e75f5c194edb/comments", "author": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "committer": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "255e395e15e86bfbd6c9daac7b3740d95dd861b7", "url": "https://api.github.com/repos/libdynd/libdynd/commits/255e395e15e86bfbd6c9daac7b3740d95dd861b7", "html_url": "https://github.com/libdynd/libdynd/commit/255e395e15e86bfbd6c9daac7b3740d95dd861b7"}]}, {"sha": "2137ef126ecc57f13b35e79ef7f7d3694f479054", "commit": {"author": {"name": "Irwin Zaid", "email": "izaid@users.noreply.github.com", "date": "2016-06-23T22:38:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-06-23T22:38:56Z"}, "message": "Merge pull request #1282 from izaid/various\n\nAdded an all_equal callable, fixed long-standing scalar reduction bug", "tree": {"sha": "459e71cc7805eef7ce2fb3ff4e5e04f1b8cf2b35", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/459e71cc7805eef7ce2fb3ff4e5e04f1b8cf2b35"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/2137ef126ecc57f13b35e79ef7f7d3694f479054", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/2137ef126ecc57f13b35e79ef7f7d3694f479054", "html_url": "https://github.com/libdynd/libdynd/commit/2137ef126ecc57f13b35e79ef7f7d3694f479054", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/2137ef126ecc57f13b35e79ef7f7d3694f479054/comments", "author": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62fe05c7a0950d5b531cf1b96814a78ec5395b77", "url": "https://api.github.com/repos/libdynd/libdynd/commits/62fe05c7a0950d5b531cf1b96814a78ec5395b77", "html_url": "https://github.com/libdynd/libdynd/commit/62fe05c7a0950d5b531cf1b96814a78ec5395b77"}, {"sha": "e956ea8c1028105f9a5c21295743100087685cde", "url": "https://api.github.com/repos/libdynd/libdynd/commits/e956ea8c1028105f9a5c21295743100087685cde", "html_url": "https://github.com/libdynd/libdynd/commit/e956ea8c1028105f9a5c21295743100087685cde"}]}, {"sha": "e956ea8c1028105f9a5c21295743100087685cde", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-23T21:58:48Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-23T21:58:48Z"}, "message": "Added all_equal callable", "tree": {"sha": "459e71cc7805eef7ce2fb3ff4e5e04f1b8cf2b35", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/459e71cc7805eef7ce2fb3ff4e5e04f1b8cf2b35"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/e956ea8c1028105f9a5c21295743100087685cde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/e956ea8c1028105f9a5c21295743100087685cde", "html_url": "https://github.com/libdynd/libdynd/commit/e956ea8c1028105f9a5c21295743100087685cde", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/e956ea8c1028105f9a5c21295743100087685cde/comments", "author": null, "committer": null, "parents": [{"sha": "62fe05c7a0950d5b531cf1b96814a78ec5395b77", "url": "https://api.github.com/repos/libdynd/libdynd/commits/62fe05c7a0950d5b531cf1b96814a78ec5395b77", "html_url": "https://github.com/libdynd/libdynd/commit/62fe05c7a0950d5b531cf1b96814a78ec5395b77"}]}, {"sha": "62fe05c7a0950d5b531cf1b96814a78ec5395b77", "commit": {"author": {"name": "Irwin Zaid", "email": "izaid@users.noreply.github.com", "date": "2016-06-23T15:36:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-06-23T15:36:34Z"}, "message": "Merge pull request #1281 from izaid/various\n\nReduction work", "tree": {"sha": "be622418b9318071d1396fffa35cb8a08bf4e5a5", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/be622418b9318071d1396fffa35cb8a08bf4e5a5"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/62fe05c7a0950d5b531cf1b96814a78ec5395b77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/62fe05c7a0950d5b531cf1b96814a78ec5395b77", "html_url": "https://github.com/libdynd/libdynd/commit/62fe05c7a0950d5b531cf1b96814a78ec5395b77", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/62fe05c7a0950d5b531cf1b96814a78ec5395b77/comments", "author": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "255e395e15e86bfbd6c9daac7b3740d95dd861b7", "url": "https://api.github.com/repos/libdynd/libdynd/commits/255e395e15e86bfbd6c9daac7b3740d95dd861b7", "html_url": "https://github.com/libdynd/libdynd/commit/255e395e15e86bfbd6c9daac7b3740d95dd861b7"}, {"sha": "ff5812692c959f02758f1318d62bb397b0272d6b", "url": "https://api.github.com/repos/libdynd/libdynd/commits/ff5812692c959f02758f1318d62bb397b0272d6b", "html_url": "https://github.com/libdynd/libdynd/commit/ff5812692c959f02758f1318d62bb397b0272d6b"}]}, {"sha": "ff5812692c959f02758f1318d62bb397b0272d6b", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-23T15:10:34Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-23T15:10:34Z"}, "message": "Removed some unneeded code", "tree": {"sha": "be622418b9318071d1396fffa35cb8a08bf4e5a5", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/be622418b9318071d1396fffa35cb8a08bf4e5a5"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/ff5812692c959f02758f1318d62bb397b0272d6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/ff5812692c959f02758f1318d62bb397b0272d6b", "html_url": "https://github.com/libdynd/libdynd/commit/ff5812692c959f02758f1318d62bb397b0272d6b", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/ff5812692c959f02758f1318d62bb397b0272d6b/comments", "author": null, "committer": null, "parents": [{"sha": "8b61e8291eb95a35637c491675fa817a4da58dc4", "url": "https://api.github.com/repos/libdynd/libdynd/commits/8b61e8291eb95a35637c491675fa817a4da58dc4", "html_url": "https://github.com/libdynd/libdynd/commit/8b61e8291eb95a35637c491675fa817a4da58dc4"}]}, {"sha": "8b61e8291eb95a35637c491675fa817a4da58dc4", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-23T14:34:07Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-23T14:34:07Z"}, "message": "Reenabled more tests", "tree": {"sha": "1d8bda417c2883af095177a009cac0c889d7b7cd", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/1d8bda417c2883af095177a009cac0c889d7b7cd"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/8b61e8291eb95a35637c491675fa817a4da58dc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/8b61e8291eb95a35637c491675fa817a4da58dc4", "html_url": "https://github.com/libdynd/libdynd/commit/8b61e8291eb95a35637c491675fa817a4da58dc4", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/8b61e8291eb95a35637c491675fa817a4da58dc4/comments", "author": null, "committer": null, "parents": [{"sha": "1e5ebc0e8afccf11de27b47e89499215f6282993", "url": "https://api.github.com/repos/libdynd/libdynd/commits/1e5ebc0e8afccf11de27b47e89499215f6282993", "html_url": "https://github.com/libdynd/libdynd/commit/1e5ebc0e8afccf11de27b47e89499215f6282993"}]}, {"sha": "1e5ebc0e8afccf11de27b47e89499215f6282993", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-23T14:22:56Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-23T14:22:56Z"}, "message": "Reenabled some var dim reduction tests", "tree": {"sha": "dfa4da4b920e739f615fcc70fd9fc146bcf94ba3", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/dfa4da4b920e739f615fcc70fd9fc146bcf94ba3"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/1e5ebc0e8afccf11de27b47e89499215f6282993", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/1e5ebc0e8afccf11de27b47e89499215f6282993", "html_url": "https://github.com/libdynd/libdynd/commit/1e5ebc0e8afccf11de27b47e89499215f6282993", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/1e5ebc0e8afccf11de27b47e89499215f6282993/comments", "author": null, "committer": null, "parents": [{"sha": "ef43587b360dba02b569b23d37f52981a9646f6f", "url": "https://api.github.com/repos/libdynd/libdynd/commits/ef43587b360dba02b569b23d37f52981a9646f6f", "html_url": "https://github.com/libdynd/libdynd/commit/ef43587b360dba02b569b23d37f52981a9646f6f"}]}, {"sha": "ef43587b360dba02b569b23d37f52981a9646f6f", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-23T11:22:38Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-23T11:22:38Z"}, "message": "Removed the nd::array overload of functional::reduction", "tree": {"sha": "9bb11b9a042fdf55aa193b1a882847ebe88b4f8d", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/9bb11b9a042fdf55aa193b1a882847ebe88b4f8d"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/ef43587b360dba02b569b23d37f52981a9646f6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/ef43587b360dba02b569b23d37f52981a9646f6f", "html_url": "https://github.com/libdynd/libdynd/commit/ef43587b360dba02b569b23d37f52981a9646f6f", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/ef43587b360dba02b569b23d37f52981a9646f6f/comments", "author": null, "committer": null, "parents": [{"sha": "11fd340f16b459a1c5a5845625848f7747bfc1de", "url": "https://api.github.com/repos/libdynd/libdynd/commits/11fd340f16b459a1c5a5845625848f7747bfc1de", "html_url": "https://github.com/libdynd/libdynd/commit/11fd340f16b459a1c5a5845625848f7747bfc1de"}]}, {"sha": "11fd340f16b459a1c5a5845625848f7747bfc1de", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-23T10:39:20Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-23T10:39:20Z"}, "message": "Removed non-identity code branches in reduction", "tree": {"sha": "1fcca8859c72589c12708c489c5aa8db3d0c37f3", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/1fcca8859c72589c12708c489c5aa8db3d0c37f3"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/11fd340f16b459a1c5a5845625848f7747bfc1de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/11fd340f16b459a1c5a5845625848f7747bfc1de", "html_url": "https://github.com/libdynd/libdynd/commit/11fd340f16b459a1c5a5845625848f7747bfc1de", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/11fd340f16b459a1c5a5845625848f7747bfc1de/comments", "author": null, "committer": null, "parents": [{"sha": "b2a6f849a50343fdab0d3a96f74ab9a6ecfdfd57", "url": "https://api.github.com/repos/libdynd/libdynd/commits/b2a6f849a50343fdab0d3a96f74ab9a6ecfdfd57", "html_url": "https://github.com/libdynd/libdynd/commit/b2a6f849a50343fdab0d3a96f74ab9a6ecfdfd57"}]}, {"sha": "b2a6f849a50343fdab0d3a96f74ab9a6ecfdfd57", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-23T10:23:58Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-23T10:23:58Z"}, "message": "Made an identity element mandatory for reductions", "tree": {"sha": "335e90d45dfb4cdace99f5cc7000d6fa72d4a59a", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/335e90d45dfb4cdace99f5cc7000d6fa72d4a59a"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/b2a6f849a50343fdab0d3a96f74ab9a6ecfdfd57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/b2a6f849a50343fdab0d3a96f74ab9a6ecfdfd57", "html_url": "https://github.com/libdynd/libdynd/commit/b2a6f849a50343fdab0d3a96f74ab9a6ecfdfd57", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/b2a6f849a50343fdab0d3a96f74ab9a6ecfdfd57/comments", "author": null, "committer": null, "parents": [{"sha": "137c3d9d98085065fb8daf97923e7fa1cbb2d9e7", "url": "https://api.github.com/repos/libdynd/libdynd/commits/137c3d9d98085065fb8daf97923e7fa1cbb2d9e7", "html_url": "https://github.com/libdynd/libdynd/commit/137c3d9d98085065fb8daf97923e7fa1cbb2d9e7"}]}, {"sha": "137c3d9d98085065fb8daf97923e7fa1cbb2d9e7", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-22T16:59:04Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-22T16:59:04Z"}, "message": "Added a nd::limits::min callable", "tree": {"sha": "6c7688ccf404c793118bfbd609896af0c1e5062e", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/6c7688ccf404c793118bfbd609896af0c1e5062e"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/137c3d9d98085065fb8daf97923e7fa1cbb2d9e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/137c3d9d98085065fb8daf97923e7fa1cbb2d9e7", "html_url": "https://github.com/libdynd/libdynd/commit/137c3d9d98085065fb8daf97923e7fa1cbb2d9e7", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/137c3d9d98085065fb8daf97923e7fa1cbb2d9e7/comments", "author": null, "committer": null, "parents": [{"sha": "585d9843cbd4006bc0ae32b1071041161e3f656f", "url": "https://api.github.com/repos/libdynd/libdynd/commits/585d9843cbd4006bc0ae32b1071041161e3f656f", "html_url": "https://github.com/libdynd/libdynd/commit/585d9843cbd4006bc0ae32b1071041161e3f656f"}]}, {"sha": "585d9843cbd4006bc0ae32b1071041161e3f656f", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-22T16:54:06Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-22T16:54:06Z"}, "message": "Added a nd::limits::min callable", "tree": {"sha": "bdcbd1ca2b83f10c31f6ec9985dffb1667c4b7aa", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/bdcbd1ca2b83f10c31f6ec9985dffb1667c4b7aa"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/585d9843cbd4006bc0ae32b1071041161e3f656f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/585d9843cbd4006bc0ae32b1071041161e3f656f", "html_url": "https://github.com/libdynd/libdynd/commit/585d9843cbd4006bc0ae32b1071041161e3f656f", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/585d9843cbd4006bc0ae32b1071041161e3f656f/comments", "author": null, "committer": null, "parents": [{"sha": "bd324e637a20dcb163832fedd3fe4a85fea41ab7", "url": "https://api.github.com/repos/libdynd/libdynd/commits/bd324e637a20dcb163832fedd3fe4a85fea41ab7", "html_url": "https://github.com/libdynd/libdynd/commit/bd324e637a20dcb163832fedd3fe4a85fea41ab7"}]}, {"sha": "bd324e637a20dcb163832fedd3fe4a85fea41ab7", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-22T16:31:40Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-22T16:31:40Z"}, "message": "Added an is_callable trait", "tree": {"sha": "c66ec79bf707928377cd39ac8aadfaed5b00d495", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/c66ec79bf707928377cd39ac8aadfaed5b00d495"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/bd324e637a20dcb163832fedd3fe4a85fea41ab7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/bd324e637a20dcb163832fedd3fe4a85fea41ab7", "html_url": "https://github.com/libdynd/libdynd/commit/bd324e637a20dcb163832fedd3fe4a85fea41ab7", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/bd324e637a20dcb163832fedd3fe4a85fea41ab7/comments", "author": null, "committer": null, "parents": [{"sha": "89cace0a5ca3e114b9ba0a1665cc7dbfd98afa7b", "url": "https://api.github.com/repos/libdynd/libdynd/commits/89cace0a5ca3e114b9ba0a1665cc7dbfd98afa7b", "html_url": "https://github.com/libdynd/libdynd/commit/89cace0a5ca3e114b9ba0a1665cc7dbfd98afa7b"}]}, {"sha": "89cace0a5ca3e114b9ba0a1665cc7dbfd98afa7b", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-22T15:46:14Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-22T15:46:14Z"}, "message": "Made reductions take an identity at creation", "tree": {"sha": "b0547c1af8cf849b3594a7f18dfec6d432d45b1d", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/b0547c1af8cf849b3594a7f18dfec6d432d45b1d"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/89cace0a5ca3e114b9ba0a1665cc7dbfd98afa7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/89cace0a5ca3e114b9ba0a1665cc7dbfd98afa7b", "html_url": "https://github.com/libdynd/libdynd/commit/89cace0a5ca3e114b9ba0a1665cc7dbfd98afa7b", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/89cace0a5ca3e114b9ba0a1665cc7dbfd98afa7b/comments", "author": null, "committer": null, "parents": [{"sha": "8848c37243ec15d1ee807957503473e08ab1189e", "url": "https://api.github.com/repos/libdynd/libdynd/commits/8848c37243ec15d1ee807957503473e08ab1189e", "html_url": "https://github.com/libdynd/libdynd/commit/8848c37243ec15d1ee807957503473e08ab1189e"}]}, {"sha": "8848c37243ec15d1ee807957503473e08ab1189e", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-22T11:28:20Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-22T11:28:20Z"}, "message": "Got all reduction tests working with > 1 args", "tree": {"sha": "bef736e379342a7dfc07eeb0b65c7d3322c81781", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/bef736e379342a7dfc07eeb0b65c7d3322c81781"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/8848c37243ec15d1ee807957503473e08ab1189e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/8848c37243ec15d1ee807957503473e08ab1189e", "html_url": "https://github.com/libdynd/libdynd/commit/8848c37243ec15d1ee807957503473e08ab1189e", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/8848c37243ec15d1ee807957503473e08ab1189e/comments", "author": null, "committer": null, "parents": [{"sha": "03550b6e1f39c60562d98ca9384101652bac23ad", "url": "https://api.github.com/repos/libdynd/libdynd/commits/03550b6e1f39c60562d98ca9384101652bac23ad", "html_url": "https://github.com/libdynd/libdynd/commit/03550b6e1f39c60562d98ca9384101652bac23ad"}]}, {"sha": "03550b6e1f39c60562d98ca9384101652bac23ad", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-22T09:05:11Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-22T09:05:11Z"}, "message": "More work towards many arg reductions", "tree": {"sha": "99875192c0a11aff45a046b23626451d351a9fad", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/99875192c0a11aff45a046b23626451d351a9fad"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/03550b6e1f39c60562d98ca9384101652bac23ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/03550b6e1f39c60562d98ca9384101652bac23ad", "html_url": "https://github.com/libdynd/libdynd/commit/03550b6e1f39c60562d98ca9384101652bac23ad", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/03550b6e1f39c60562d98ca9384101652bac23ad/comments", "author": null, "committer": null, "parents": [{"sha": "c9c0c86fa48ad0a82d210667f9ff817a4a9e6c9e", "url": "https://api.github.com/repos/libdynd/libdynd/commits/c9c0c86fa48ad0a82d210667f9ff817a4a9e6c9e", "html_url": "https://github.com/libdynd/libdynd/commit/c9c0c86fa48ad0a82d210667f9ff817a4a9e6c9e"}]}, {"sha": "c9c0c86fa48ad0a82d210667f9ff817a4a9e6c9e", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-21T16:00:47Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-21T16:00:47Z"}, "message": "Added an init child to reduction", "tree": {"sha": "ce66c46fe89627ab5aee0f70c745dd0ff40c8657", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/ce66c46fe89627ab5aee0f70c745dd0ff40c8657"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/c9c0c86fa48ad0a82d210667f9ff817a4a9e6c9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/c9c0c86fa48ad0a82d210667f9ff817a4a9e6c9e", "html_url": "https://github.com/libdynd/libdynd/commit/c9c0c86fa48ad0a82d210667f9ff817a4a9e6c9e", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/c9c0c86fa48ad0a82d210667f9ff817a4a9e6c9e/comments", "author": null, "committer": null, "parents": [{"sha": "4c1f0ceb172c0d17345420ffc655dcdd06324838", "url": "https://api.github.com/repos/libdynd/libdynd/commits/4c1f0ceb172c0d17345420ffc655dcdd06324838", "html_url": "https://github.com/libdynd/libdynd/commit/4c1f0ceb172c0d17345420ffc655dcdd06324838"}]}, {"sha": "4c1f0ceb172c0d17345420ffc655dcdd06324838", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-21T15:13:43Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-21T15:13:43Z"}, "message": "More changes to reductions", "tree": {"sha": "405d417b10f35d3b924c7e6e4828f9081e2f2962", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/405d417b10f35d3b924c7e6e4828f9081e2f2962"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/4c1f0ceb172c0d17345420ffc655dcdd06324838", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/4c1f0ceb172c0d17345420ffc655dcdd06324838", "html_url": "https://github.com/libdynd/libdynd/commit/4c1f0ceb172c0d17345420ffc655dcdd06324838", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/4c1f0ceb172c0d17345420ffc655dcdd06324838/comments", "author": null, "committer": null, "parents": [{"sha": "953992135b2a8a246de0398863991f6a96d522ed", "url": "https://api.github.com/repos/libdynd/libdynd/commits/953992135b2a8a246de0398863991f6a96d522ed", "html_url": "https://github.com/libdynd/libdynd/commit/953992135b2a8a246de0398863991f6a96d522ed"}]}, {"sha": "953992135b2a8a246de0398863991f6a96d522ed", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-21T13:50:44Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-21T13:50:44Z"}, "message": "Added first test for binary reductions", "tree": {"sha": "a487311c44baf9013859aa88b3ee2d833a47acc0", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/a487311c44baf9013859aa88b3ee2d833a47acc0"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/953992135b2a8a246de0398863991f6a96d522ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/953992135b2a8a246de0398863991f6a96d522ed", "html_url": "https://github.com/libdynd/libdynd/commit/953992135b2a8a246de0398863991f6a96d522ed", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/953992135b2a8a246de0398863991f6a96d522ed/comments", "author": null, "committer": null, "parents": [{"sha": "3bfbb7910193484581135896c4ef976f22105507", "url": "https://api.github.com/repos/libdynd/libdynd/commits/3bfbb7910193484581135896c4ef976f22105507", "html_url": "https://github.com/libdynd/libdynd/commit/3bfbb7910193484581135896c4ef976f22105507"}]}, {"sha": "3bfbb7910193484581135896c4ef976f22105507", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-21T13:20:48Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-21T13:20:48Z"}, "message": "Removed make_ellipsis_dim functions", "tree": {"sha": "4f403c847209e790575dd03a104ff667c4c56d26", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/4f403c847209e790575dd03a104ff667c4c56d26"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/3bfbb7910193484581135896c4ef976f22105507", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/3bfbb7910193484581135896c4ef976f22105507", "html_url": "https://github.com/libdynd/libdynd/commit/3bfbb7910193484581135896c4ef976f22105507", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/3bfbb7910193484581135896c4ef976f22105507/comments", "author": null, "committer": null, "parents": [{"sha": "13691fba73f05c78bb8f3321f392e4041f068c66", "url": "https://api.github.com/repos/libdynd/libdynd/commits/13691fba73f05c78bb8f3321f392e4041f068c66", "html_url": "https://github.com/libdynd/libdynd/commit/13691fba73f05c78bb8f3321f392e4041f068c66"}]}, {"sha": "13691fba73f05c78bb8f3321f392e4041f068c66", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-21T12:57:15Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-21T12:57:15Z"}, "message": "More reduction kernel changes", "tree": {"sha": "639652e1e24ef28dff763d8122b1f8b45bde7bed", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/639652e1e24ef28dff763d8122b1f8b45bde7bed"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/13691fba73f05c78bb8f3321f392e4041f068c66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/13691fba73f05c78bb8f3321f392e4041f068c66", "html_url": "https://github.com/libdynd/libdynd/commit/13691fba73f05c78bb8f3321f392e4041f068c66", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/13691fba73f05c78bb8f3321f392e4041f068c66/comments", "author": null, "committer": null, "parents": [{"sha": "ffc2062d45148c31432ebe819973940228f133ae", "url": "https://api.github.com/repos/libdynd/libdynd/commits/ffc2062d45148c31432ebe819973940228f133ae", "html_url": "https://github.com/libdynd/libdynd/commit/ffc2062d45148c31432ebe819973940228f133ae"}]}, {"sha": "ffc2062d45148c31432ebe819973940228f133ae", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-21T11:40:51Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-21T11:40:51Z"}, "message": "Added NArg to some reduction kernels", "tree": {"sha": "a9eaeebd0963400116c486a315e6c4e7d2a87b24", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/a9eaeebd0963400116c486a315e6c4e7d2a87b24"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/ffc2062d45148c31432ebe819973940228f133ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/ffc2062d45148c31432ebe819973940228f133ae", "html_url": "https://github.com/libdynd/libdynd/commit/ffc2062d45148c31432ebe819973940228f133ae", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/ffc2062d45148c31432ebe819973940228f133ae/comments", "author": null, "committer": null, "parents": [{"sha": "19357add00cf2ebde61b6ed3445f4fcb5a6a3e99", "url": "https://api.github.com/repos/libdynd/libdynd/commits/19357add00cf2ebde61b6ed3445f4fcb5a6a3e99", "html_url": "https://github.com/libdynd/libdynd/commit/19357add00cf2ebde61b6ed3445f4fcb5a6a3e99"}]}, {"sha": "19357add00cf2ebde61b6ed3445f4fcb5a6a3e99", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-21T11:02:27Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-21T11:02:27Z"}, "message": "Refactored some reduction tests", "tree": {"sha": "6373337688d18a333b35dcbd6eb82dbf3c7891a1", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/6373337688d18a333b35dcbd6eb82dbf3c7891a1"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/19357add00cf2ebde61b6ed3445f4fcb5a6a3e99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/19357add00cf2ebde61b6ed3445f4fcb5a6a3e99", "html_url": "https://github.com/libdynd/libdynd/commit/19357add00cf2ebde61b6ed3445f4fcb5a6a3e99", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/19357add00cf2ebde61b6ed3445f4fcb5a6a3e99/comments", "author": null, "committer": null, "parents": [{"sha": "255e395e15e86bfbd6c9daac7b3740d95dd861b7", "url": "https://api.github.com/repos/libdynd/libdynd/commits/255e395e15e86bfbd6c9daac7b3740d95dd861b7", "html_url": "https://github.com/libdynd/libdynd/commit/255e395e15e86bfbd6c9daac7b3740d95dd861b7"}]}, {"sha": "255e395e15e86bfbd6c9daac7b3740d95dd861b7", "commit": {"author": {"name": "Irwin Zaid", "email": "izaid@users.noreply.github.com", "date": "2016-06-20T18:03:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-06-20T18:03:17Z"}, "message": "Merge pull request #1280 from izaid/various2\n\nA variety of fixes", "tree": {"sha": "31ccb5bf23db7c5690de9d8d184f7558355987b4", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/31ccb5bf23db7c5690de9d8d184f7558355987b4"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/255e395e15e86bfbd6c9daac7b3740d95dd861b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/255e395e15e86bfbd6c9daac7b3740d95dd861b7", "html_url": "https://github.com/libdynd/libdynd/commit/255e395e15e86bfbd6c9daac7b3740d95dd861b7", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/255e395e15e86bfbd6c9daac7b3740d95dd861b7/comments", "author": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5589bb64a250f805a733c963acf62418aa3dece9", "url": "https://api.github.com/repos/libdynd/libdynd/commits/5589bb64a250f805a733c963acf62418aa3dece9", "html_url": "https://github.com/libdynd/libdynd/commit/5589bb64a250f805a733c963acf62418aa3dece9"}, {"sha": "fea28e943240a5d869db4561128c8373828a31a8", "url": "https://api.github.com/repos/libdynd/libdynd/commits/fea28e943240a5d869db4561128c8373828a31a8", "html_url": "https://github.com/libdynd/libdynd/commit/fea28e943240a5d869db4561128c8373828a31a8"}]}, {"sha": "fea28e943240a5d869db4561128c8373828a31a8", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-20T17:34:38Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-20T17:34:38Z"}, "message": "Added ndt::trivial_traits", "tree": {"sha": "31ccb5bf23db7c5690de9d8d184f7558355987b4", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/31ccb5bf23db7c5690de9d8d184f7558355987b4"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/fea28e943240a5d869db4561128c8373828a31a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/fea28e943240a5d869db4561128c8373828a31a8", "html_url": "https://github.com/libdynd/libdynd/commit/fea28e943240a5d869db4561128c8373828a31a8", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/fea28e943240a5d869db4561128c8373828a31a8/comments", "author": null, "committer": null, "parents": [{"sha": "38f6239e443c638daf55ae24d42fcfb2e1f75262", "url": "https://api.github.com/repos/libdynd/libdynd/commits/38f6239e443c638daf55ae24d42fcfb2e1f75262", "html_url": "https://github.com/libdynd/libdynd/commit/38f6239e443c638daf55ae24d42fcfb2e1f75262"}]}, {"sha": "38f6239e443c638daf55ae24d42fcfb2e1f75262", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-20T17:06:35Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-20T17:06:35Z"}, "message": "A couple more updates", "tree": {"sha": "5e203264314845585747f5f60035679775454b6e", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/5e203264314845585747f5f60035679775454b6e"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/38f6239e443c638daf55ae24d42fcfb2e1f75262", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/38f6239e443c638daf55ae24d42fcfb2e1f75262", "html_url": "https://github.com/libdynd/libdynd/commit/38f6239e443c638daf55ae24d42fcfb2e1f75262", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/38f6239e443c638daf55ae24d42fcfb2e1f75262/comments", "author": null, "committer": null, "parents": [{"sha": "56eff74197fa78e31d2a1a353cac54ac602908f7", "url": "https://api.github.com/repos/libdynd/libdynd/commits/56eff74197fa78e31d2a1a353cac54ac602908f7", "html_url": "https://github.com/libdynd/libdynd/commit/56eff74197fa78e31d2a1a353cac54ac602908f7"}]}, {"sha": "56eff74197fa78e31d2a1a353cac54ac602908f7", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-20T16:31:40Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-20T16:31:40Z"}, "message": "A variety of fixes", "tree": {"sha": "9d69e9a38a0c7d13ccfe2f61803488e35780bfd6", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/9d69e9a38a0c7d13ccfe2f61803488e35780bfd6"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/56eff74197fa78e31d2a1a353cac54ac602908f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/56eff74197fa78e31d2a1a353cac54ac602908f7", "html_url": "https://github.com/libdynd/libdynd/commit/56eff74197fa78e31d2a1a353cac54ac602908f7", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/56eff74197fa78e31d2a1a353cac54ac602908f7/comments", "author": null, "committer": null, "parents": [{"sha": "5589bb64a250f805a733c963acf62418aa3dece9", "url": "https://api.github.com/repos/libdynd/libdynd/commits/5589bb64a250f805a733c963acf62418aa3dece9", "html_url": "https://github.com/libdynd/libdynd/commit/5589bb64a250f805a733c963acf62418aa3dece9"}]}, {"sha": "5589bb64a250f805a733c963acf62418aa3dece9", "commit": {"author": {"name": "Irwin Zaid", "email": "izaid@users.noreply.github.com", "date": "2016-06-20T15:40:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-06-20T15:40:42Z"}, "message": "Merge pull request #1279 from izaid/stride\n\nChanging fixed_dim to not have stride = 0 if size == 1", "tree": {"sha": "d1154e914486643f78785389ba3e49e051574653", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/d1154e914486643f78785389ba3e49e051574653"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/5589bb64a250f805a733c963acf62418aa3dece9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/5589bb64a250f805a733c963acf62418aa3dece9", "html_url": "https://github.com/libdynd/libdynd/commit/5589bb64a250f805a733c963acf62418aa3dece9", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/5589bb64a250f805a733c963acf62418aa3dece9/comments", "author": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "327fc0d0b897070cda9e925f53ae2f8dac0672f0", "url": "https://api.github.com/repos/libdynd/libdynd/commits/327fc0d0b897070cda9e925f53ae2f8dac0672f0", "html_url": "https://github.com/libdynd/libdynd/commit/327fc0d0b897070cda9e925f53ae2f8dac0672f0"}, {"sha": "70c144b43974246795b07869844738f4f3c7e1e1", "url": "https://api.github.com/repos/libdynd/libdynd/commits/70c144b43974246795b07869844738f4f3c7e1e1", "html_url": "https://github.com/libdynd/libdynd/commit/70c144b43974246795b07869844738f4f3c7e1e1"}]}, {"sha": "70c144b43974246795b07869844738f4f3c7e1e1", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-20T15:08:06Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-20T15:08:06Z"}, "message": "Added fix for elwise", "tree": {"sha": "d1154e914486643f78785389ba3e49e051574653", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/d1154e914486643f78785389ba3e49e051574653"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/70c144b43974246795b07869844738f4f3c7e1e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/70c144b43974246795b07869844738f4f3c7e1e1", "html_url": "https://github.com/libdynd/libdynd/commit/70c144b43974246795b07869844738f4f3c7e1e1", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/70c144b43974246795b07869844738f4f3c7e1e1/comments", "author": null, "committer": null, "parents": [{"sha": "7cf458c0cca34062c83f0ccec99c33808a96299b", "url": "https://api.github.com/repos/libdynd/libdynd/commits/7cf458c0cca34062c83f0ccec99c33808a96299b", "html_url": "https://github.com/libdynd/libdynd/commit/7cf458c0cca34062c83f0ccec99c33808a96299b"}]}, {"sha": "7cf458c0cca34062c83f0ccec99c33808a96299b", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-20T14:17:41Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-20T14:17:41Z"}, "message": "Fixed every test except broadcast assign", "tree": {"sha": "872c16aef204cfe9bf55f2613393eaf4d93f53dd", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/872c16aef204cfe9bf55f2613393eaf4d93f53dd"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/7cf458c0cca34062c83f0ccec99c33808a96299b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/7cf458c0cca34062c83f0ccec99c33808a96299b", "html_url": "https://github.com/libdynd/libdynd/commit/7cf458c0cca34062c83f0ccec99c33808a96299b", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/7cf458c0cca34062c83f0ccec99c33808a96299b/comments", "author": null, "committer": null, "parents": [{"sha": "fc4784cf34eaa9c3f2a74c0da5588ade2c0f177b", "url": "https://api.github.com/repos/libdynd/libdynd/commits/fc4784cf34eaa9c3f2a74c0da5588ade2c0f177b", "html_url": "https://github.com/libdynd/libdynd/commit/fc4784cf34eaa9c3f2a74c0da5588ade2c0f177b"}]}, {"sha": "fc4784cf34eaa9c3f2a74c0da5588ade2c0f177b", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-20T13:47:15Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-20T13:47:15Z"}, "message": "Fixed 2 tests", "tree": {"sha": "f5b83fa4c310374acf04c49e08a3e77a3c77968b", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/f5b83fa4c310374acf04c49e08a3e77a3c77968b"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/fc4784cf34eaa9c3f2a74c0da5588ade2c0f177b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/fc4784cf34eaa9c3f2a74c0da5588ade2c0f177b", "html_url": "https://github.com/libdynd/libdynd/commit/fc4784cf34eaa9c3f2a74c0da5588ade2c0f177b", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/fc4784cf34eaa9c3f2a74c0da5588ade2c0f177b/comments", "author": null, "committer": null, "parents": [{"sha": "24419932e54bf5ee70d99c5f4a840aefaadc0047", "url": "https://api.github.com/repos/libdynd/libdynd/commits/24419932e54bf5ee70d99c5f4a840aefaadc0047", "html_url": "https://github.com/libdynd/libdynd/commit/24419932e54bf5ee70d99c5f4a840aefaadc0047"}]}, {"sha": "24419932e54bf5ee70d99c5f4a840aefaadc0047", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-20T13:29:06Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-20T13:29:06Z"}, "message": "Changed fixed_dim to have stride = 0 if size == 1", "tree": {"sha": "ccdf2ac81582a89397a08a29e494ec78c8cf6e88", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/ccdf2ac81582a89397a08a29e494ec78c8cf6e88"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/24419932e54bf5ee70d99c5f4a840aefaadc0047", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/24419932e54bf5ee70d99c5f4a840aefaadc0047", "html_url": "https://github.com/libdynd/libdynd/commit/24419932e54bf5ee70d99c5f4a840aefaadc0047", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/24419932e54bf5ee70d99c5f4a840aefaadc0047/comments", "author": null, "committer": null, "parents": [{"sha": "327fc0d0b897070cda9e925f53ae2f8dac0672f0", "url": "https://api.github.com/repos/libdynd/libdynd/commits/327fc0d0b897070cda9e925f53ae2f8dac0672f0", "html_url": "https://github.com/libdynd/libdynd/commit/327fc0d0b897070cda9e925f53ae2f8dac0672f0"}]}, {"sha": "327fc0d0b897070cda9e925f53ae2f8dac0672f0", "commit": {"author": {"name": "Irwin Zaid", "email": "izaid@users.noreply.github.com", "date": "2016-06-20T07:35:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-06-20T07:35:48Z"}, "message": "Merge pull request #1277 from izaid/various\n\nAdding tuple to apply", "tree": {"sha": "8eb5654d7f65636fb2cf8a1fab2f0122564db771", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/8eb5654d7f65636fb2cf8a1fab2f0122564db771"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/327fc0d0b897070cda9e925f53ae2f8dac0672f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/327fc0d0b897070cda9e925f53ae2f8dac0672f0", "html_url": "https://github.com/libdynd/libdynd/commit/327fc0d0b897070cda9e925f53ae2f8dac0672f0", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/327fc0d0b897070cda9e925f53ae2f8dac0672f0/comments", "author": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "330797d185e53f2a87236885bb6af3bafc393e69", "url": "https://api.github.com/repos/libdynd/libdynd/commits/330797d185e53f2a87236885bb6af3bafc393e69", "html_url": "https://github.com/libdynd/libdynd/commit/330797d185e53f2a87236885bb6af3bafc393e69"}, {"sha": "632f82cd3684800ceab2bb07941e9385547e3c71", "url": "https://api.github.com/repos/libdynd/libdynd/commits/632f82cd3684800ceab2bb07941e9385547e3c71", "html_url": "https://github.com/libdynd/libdynd/commit/632f82cd3684800ceab2bb07941e9385547e3c71"}]}, {"sha": "632f82cd3684800ceab2bb07941e9385547e3c71", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-19T21:19:20Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-19T21:19:20Z"}, "message": "Refactoring around fixed<T>", "tree": {"sha": "8eb5654d7f65636fb2cf8a1fab2f0122564db771", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/8eb5654d7f65636fb2cf8a1fab2f0122564db771"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/632f82cd3684800ceab2bb07941e9385547e3c71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/632f82cd3684800ceab2bb07941e9385547e3c71", "html_url": "https://github.com/libdynd/libdynd/commit/632f82cd3684800ceab2bb07941e9385547e3c71", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/632f82cd3684800ceab2bb07941e9385547e3c71/comments", "author": null, "committer": null, "parents": [{"sha": "8790b9d1c3ef6a709b120ed7f9702c266a779d6d", "url": "https://api.github.com/repos/libdynd/libdynd/commits/8790b9d1c3ef6a709b120ed7f9702c266a779d6d", "html_url": "https://github.com/libdynd/libdynd/commit/8790b9d1c3ef6a709b120ed7f9702c266a779d6d"}]}, {"sha": "8790b9d1c3ef6a709b120ed7f9702c266a779d6d", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-19T20:39:20Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-19T20:39:20Z"}, "message": "Added tuple<fixed<T>>", "tree": {"sha": "6ae6483438348a56385ea6b4ae6e6b249202f99a", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/6ae6483438348a56385ea6b4ae6e6b249202f99a"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/8790b9d1c3ef6a709b120ed7f9702c266a779d6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/8790b9d1c3ef6a709b120ed7f9702c266a779d6d", "html_url": "https://github.com/libdynd/libdynd/commit/8790b9d1c3ef6a709b120ed7f9702c266a779d6d", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/8790b9d1c3ef6a709b120ed7f9702c266a779d6d/comments", "author": null, "committer": null, "parents": [{"sha": "e2e0edeba0b26e71afa51abbc92acd9e1655f5df", "url": "https://api.github.com/repos/libdynd/libdynd/commits/e2e0edeba0b26e71afa51abbc92acd9e1655f5df", "html_url": "https://github.com/libdynd/libdynd/commit/e2e0edeba0b26e71afa51abbc92acd9e1655f5df"}]}, {"sha": "e2e0edeba0b26e71afa51abbc92acd9e1655f5df", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-19T17:51:58Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-19T17:51:58Z"}, "message": "Turned dynd::tuple metadata into a union", "tree": {"sha": "cf9a89fdb950af1bfbca1914ca3f7684ded0877c", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/cf9a89fdb950af1bfbca1914ca3f7684ded0877c"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/e2e0edeba0b26e71afa51abbc92acd9e1655f5df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/e2e0edeba0b26e71afa51abbc92acd9e1655f5df", "html_url": "https://github.com/libdynd/libdynd/commit/e2e0edeba0b26e71afa51abbc92acd9e1655f5df", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/e2e0edeba0b26e71afa51abbc92acd9e1655f5df/comments", "author": null, "committer": null, "parents": [{"sha": "7b39a392944e4066ee4a4891ad9dad1df605678f", "url": "https://api.github.com/repos/libdynd/libdynd/commits/7b39a392944e4066ee4a4891ad9dad1df605678f", "html_url": "https://github.com/libdynd/libdynd/commit/7b39a392944e4066ee4a4891ad9dad1df605678f"}]}, {"sha": "7b39a392944e4066ee4a4891ad9dad1df605678f", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-19T17:28:15Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-19T17:28:15Z"}, "message": "Moved tuple traits to dynd::for_each", "tree": {"sha": "33afba4356b34a92b121ad328f81d434e9c0c9d8", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/33afba4356b34a92b121ad328f81d434e9c0c9d8"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/7b39a392944e4066ee4a4891ad9dad1df605678f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/7b39a392944e4066ee4a4891ad9dad1df605678f", "html_url": "https://github.com/libdynd/libdynd/commit/7b39a392944e4066ee4a4891ad9dad1df605678f", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/7b39a392944e4066ee4a4891ad9dad1df605678f/comments", "author": null, "committer": null, "parents": [{"sha": "ec38fbcaeef67896c3d253fd2b9423af6d74b79f", "url": "https://api.github.com/repos/libdynd/libdynd/commits/ec38fbcaeef67896c3d253fd2b9423af6d74b79f", "html_url": "https://github.com/libdynd/libdynd/commit/ec38fbcaeef67896c3d253fd2b9423af6d74b79f"}]}, {"sha": "ec38fbcaeef67896c3d253fd2b9423af6d74b79f", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-19T16:35:50Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-19T16:35:50Z"}, "message": "Another debug print", "tree": {"sha": "8e54d7b46de4da1f3c230f96c5966b515fbfd556", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/8e54d7b46de4da1f3c230f96c5966b515fbfd556"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/ec38fbcaeef67896c3d253fd2b9423af6d74b79f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/ec38fbcaeef67896c3d253fd2b9423af6d74b79f", "html_url": "https://github.com/libdynd/libdynd/commit/ec38fbcaeef67896c3d253fd2b9423af6d74b79f", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/ec38fbcaeef67896c3d253fd2b9423af6d74b79f/comments", "author": null, "committer": null, "parents": [{"sha": "838076d8e87e8e5606fa5aab46a6c85a1d9b45a5", "url": "https://api.github.com/repos/libdynd/libdynd/commits/838076d8e87e8e5606fa5aab46a6c85a1d9b45a5", "html_url": "https://github.com/libdynd/libdynd/commit/838076d8e87e8e5606fa5aab46a6c85a1d9b45a5"}]}, {"sha": "838076d8e87e8e5606fa5aab46a6c85a1d9b45a5", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-19T16:08:00Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-19T16:08:00Z"}, "message": "Another debug print", "tree": {"sha": "c28afdc8496900164730c30f5b1f02b50862a0e2", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/c28afdc8496900164730c30f5b1f02b50862a0e2"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/838076d8e87e8e5606fa5aab46a6c85a1d9b45a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/838076d8e87e8e5606fa5aab46a6c85a1d9b45a5", "html_url": "https://github.com/libdynd/libdynd/commit/838076d8e87e8e5606fa5aab46a6c85a1d9b45a5", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/838076d8e87e8e5606fa5aab46a6c85a1d9b45a5/comments", "author": null, "committer": null, "parents": [{"sha": "1e0221dd0b6c6b6f3291a578814efae60cc2ae80", "url": "https://api.github.com/repos/libdynd/libdynd/commits/1e0221dd0b6c6b6f3291a578814efae60cc2ae80", "html_url": "https://github.com/libdynd/libdynd/commit/1e0221dd0b6c6b6f3291a578814efae60cc2ae80"}]}, {"sha": "1e0221dd0b6c6b6f3291a578814efae60cc2ae80", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-19T14:10:17Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-19T14:10:17Z"}, "message": "Added debugging", "tree": {"sha": "70831487d1548e848649290af716ac286f9cf269", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/70831487d1548e848649290af716ac286f9cf269"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/1e0221dd0b6c6b6f3291a578814efae60cc2ae80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/1e0221dd0b6c6b6f3291a578814efae60cc2ae80", "html_url": "https://github.com/libdynd/libdynd/commit/1e0221dd0b6c6b6f3291a578814efae60cc2ae80", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/1e0221dd0b6c6b6f3291a578814efae60cc2ae80/comments", "author": null, "committer": null, "parents": [{"sha": "aedbd4c15230ec6d9423d66e74b71cef8a718ed0", "url": "https://api.github.com/repos/libdynd/libdynd/commits/aedbd4c15230ec6d9423d66e74b71cef8a718ed0", "html_url": "https://github.com/libdynd/libdynd/commit/aedbd4c15230ec6d9423d66e74b71cef8a718ed0"}]}, {"sha": "aedbd4c15230ec6d9423d66e74b71cef8a718ed0", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-19T13:48:07Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-19T13:48:07Z"}, "message": "Trying with initializer list specialization", "tree": {"sha": "298642e91ad61bd2835af0214f5a92f592e59541", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/298642e91ad61bd2835af0214f5a92f592e59541"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/aedbd4c15230ec6d9423d66e74b71cef8a718ed0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/aedbd4c15230ec6d9423d66e74b71cef8a718ed0", "html_url": "https://github.com/libdynd/libdynd/commit/aedbd4c15230ec6d9423d66e74b71cef8a718ed0", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/aedbd4c15230ec6d9423d66e74b71cef8a718ed0/comments", "author": null, "committer": null, "parents": [{"sha": "0a75e66256cb4b50296b3827e8b72f20677bc5df", "url": "https://api.github.com/repos/libdynd/libdynd/commits/0a75e66256cb4b50296b3827e8b72f20677bc5df", "html_url": "https://github.com/libdynd/libdynd/commit/0a75e66256cb4b50296b3827e8b72f20677bc5df"}]}, {"sha": "0a75e66256cb4b50296b3827e8b72f20677bc5df", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-19T13:20:50Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-19T13:20:50Z"}, "message": "Added initializer list test", "tree": {"sha": "40bbe2a3644d7ecec773e818733dd9261ad4d7d0", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/40bbe2a3644d7ecec773e818733dd9261ad4d7d0"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/0a75e66256cb4b50296b3827e8b72f20677bc5df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/0a75e66256cb4b50296b3827e8b72f20677bc5df", "html_url": "https://github.com/libdynd/libdynd/commit/0a75e66256cb4b50296b3827e8b72f20677bc5df", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/0a75e66256cb4b50296b3827e8b72f20677bc5df/comments", "author": null, "committer": null, "parents": [{"sha": "94ddf8f2e36a97fb8987c0611b0534646822aceb", "url": "https://api.github.com/repos/libdynd/libdynd/commits/94ddf8f2e36a97fb8987c0611b0534646822aceb", "html_url": "https://github.com/libdynd/libdynd/commit/94ddf8f2e36a97fb8987c0611b0534646822aceb"}]}, {"sha": "94ddf8f2e36a97fb8987c0611b0534646822aceb", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-19T11:47:25Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-19T11:47:25Z"}, "message": "Trying test with std::array", "tree": {"sha": "5d124d4490694450efc4e978b2fc7ebbd513b3f8", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/5d124d4490694450efc4e978b2fc7ebbd513b3f8"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/94ddf8f2e36a97fb8987c0611b0534646822aceb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/94ddf8f2e36a97fb8987c0611b0534646822aceb", "html_url": "https://github.com/libdynd/libdynd/commit/94ddf8f2e36a97fb8987c0611b0534646822aceb", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/94ddf8f2e36a97fb8987c0611b0534646822aceb/comments", "author": null, "committer": null, "parents": [{"sha": "37e5e4ffacc9cbebb44f5ba70e2cbefe5ae15927", "url": "https://api.github.com/repos/libdynd/libdynd/commits/37e5e4ffacc9cbebb44f5ba70e2cbefe5ae15927", "html_url": "https://github.com/libdynd/libdynd/commit/37e5e4ffacc9cbebb44f5ba70e2cbefe5ae15927"}]}, {"sha": "37e5e4ffacc9cbebb44f5ba70e2cbefe5ae15927", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-19T11:26:34Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-19T11:26:34Z"}, "message": "Moved to const ref for initializer list zip", "tree": {"sha": "5d179a8d3a462b37341948c41ed75fa41bed0b34", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/5d179a8d3a462b37341948c41ed75fa41bed0b34"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/37e5e4ffacc9cbebb44f5ba70e2cbefe5ae15927", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/37e5e4ffacc9cbebb44f5ba70e2cbefe5ae15927", "html_url": "https://github.com/libdynd/libdynd/commit/37e5e4ffacc9cbebb44f5ba70e2cbefe5ae15927", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/37e5e4ffacc9cbebb44f5ba70e2cbefe5ae15927/comments", "author": null, "committer": null, "parents": [{"sha": "2c34699277cd79d93c3bf4915ea664328858a494", "url": "https://api.github.com/repos/libdynd/libdynd/commits/2c34699277cd79d93c3bf4915ea664328858a494", "html_url": "https://github.com/libdynd/libdynd/commit/2c34699277cd79d93c3bf4915ea664328858a494"}]}, {"sha": "2c34699277cd79d93c3bf4915ea664328858a494", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-17T10:41:09Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-17T10:41:09Z"}, "message": "Another attempted fix for GCC", "tree": {"sha": "3d895889099a1aa3e166d48d2fed5d410ba4dcbd", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/3d895889099a1aa3e166d48d2fed5d410ba4dcbd"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/2c34699277cd79d93c3bf4915ea664328858a494", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/2c34699277cd79d93c3bf4915ea664328858a494", "html_url": "https://github.com/libdynd/libdynd/commit/2c34699277cd79d93c3bf4915ea664328858a494", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/2c34699277cd79d93c3bf4915ea664328858a494/comments", "author": null, "committer": null, "parents": [{"sha": "1b8c029a34c3b318995edfacadc3d06434664676", "url": "https://api.github.com/repos/libdynd/libdynd/commits/1b8c029a34c3b318995edfacadc3d06434664676", "html_url": "https://github.com/libdynd/libdynd/commit/1b8c029a34c3b318995edfacadc3d06434664676"}]}, {"sha": "1b8c029a34c3b318995edfacadc3d06434664676", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-17T10:05:34Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-17T10:05:34Z"}, "message": "Attempted fix for GCC", "tree": {"sha": "254cde3dd6c5e0c54100732b5f98ac7a3bdb2b19", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/254cde3dd6c5e0c54100732b5f98ac7a3bdb2b19"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/1b8c029a34c3b318995edfacadc3d06434664676", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/1b8c029a34c3b318995edfacadc3d06434664676", "html_url": "https://github.com/libdynd/libdynd/commit/1b8c029a34c3b318995edfacadc3d06434664676", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/1b8c029a34c3b318995edfacadc3d06434664676/comments", "author": null, "committer": null, "parents": [{"sha": "a4c0013a7d6f05261fb480673f936f9843a83c3d", "url": "https://api.github.com/repos/libdynd/libdynd/commits/a4c0013a7d6f05261fb480673f936f9843a83c3d", "html_url": "https://github.com/libdynd/libdynd/commit/a4c0013a7d6f05261fb480673f936f9843a83c3d"}]}, {"sha": "a4c0013a7d6f05261fb480673f936f9843a83c3d", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-17T09:32:24Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-17T09:32:24Z"}, "message": "Fix for MSVC", "tree": {"sha": "191755a7d7430b67348d0011609666bf538d3834", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/191755a7d7430b67348d0011609666bf538d3834"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/a4c0013a7d6f05261fb480673f936f9843a83c3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/a4c0013a7d6f05261fb480673f936f9843a83c3d", "html_url": "https://github.com/libdynd/libdynd/commit/a4c0013a7d6f05261fb480673f936f9843a83c3d", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/a4c0013a7d6f05261fb480673f936f9843a83c3d/comments", "author": null, "committer": null, "parents": [{"sha": "b8f3e6c11a645638676b2f27a1630e1df73eb34a", "url": "https://api.github.com/repos/libdynd/libdynd/commits/b8f3e6c11a645638676b2f27a1630e1df73eb34a", "html_url": "https://github.com/libdynd/libdynd/commit/b8f3e6c11a645638676b2f27a1630e1df73eb34a"}]}, {"sha": "b8f3e6c11a645638676b2f27a1630e1df73eb34a", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-17T09:15:13Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-17T09:15:13Z"}, "message": "Testing new set of fold changes", "tree": {"sha": "d822c7448d378134901242533a52455d13e2eed8", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/d822c7448d378134901242533a52455d13e2eed8"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/b8f3e6c11a645638676b2f27a1630e1df73eb34a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/b8f3e6c11a645638676b2f27a1630e1df73eb34a", "html_url": "https://github.com/libdynd/libdynd/commit/b8f3e6c11a645638676b2f27a1630e1df73eb34a", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/b8f3e6c11a645638676b2f27a1630e1df73eb34a/comments", "author": null, "committer": null, "parents": [{"sha": "9764005df16fa2436c75a3e5a6e770a5b495f8c3", "url": "https://api.github.com/repos/libdynd/libdynd/commits/9764005df16fa2436c75a3e5a6e770a5b495f8c3", "html_url": "https://github.com/libdynd/libdynd/commit/9764005df16fa2436c75a3e5a6e770a5b495f8c3"}]}, {"sha": "9764005df16fa2436c75a3e5a6e770a5b495f8c3", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-17T08:45:16Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-17T08:45:16Z"}, "message": "Added simulated fold expressions", "tree": {"sha": "b6d395e8dcfc39328afce37f8c7fc8e698e05bd2", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/b6d395e8dcfc39328afce37f8c7fc8e698e05bd2"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/9764005df16fa2436c75a3e5a6e770a5b495f8c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/9764005df16fa2436c75a3e5a6e770a5b495f8c3", "html_url": "https://github.com/libdynd/libdynd/commit/9764005df16fa2436c75a3e5a6e770a5b495f8c3", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/9764005df16fa2436c75a3e5a6e770a5b495f8c3/comments", "author": null, "committer": null, "parents": [{"sha": "49d6e170068f2b5ae434e779d6251acbdb51d258", "url": "https://api.github.com/repos/libdynd/libdynd/commits/49d6e170068f2b5ae434e779d6251acbdb51d258", "html_url": "https://github.com/libdynd/libdynd/commit/49d6e170068f2b5ae434e779d6251acbdb51d258"}]}, {"sha": "49d6e170068f2b5ae434e779d6251acbdb51d258", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-16T11:20:51Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-16T11:20:51Z"}, "message": "Fleshed out tuple implementation", "tree": {"sha": "03fcde23867e3fc13fdbe7dbe3259fda2c87a7af", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/03fcde23867e3fc13fdbe7dbe3259fda2c87a7af"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/49d6e170068f2b5ae434e779d6251acbdb51d258", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/49d6e170068f2b5ae434e779d6251acbdb51d258", "html_url": "https://github.com/libdynd/libdynd/commit/49d6e170068f2b5ae434e779d6251acbdb51d258", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/49d6e170068f2b5ae434e779d6251acbdb51d258/comments", "author": null, "committer": null, "parents": [{"sha": "d0d8d15747cda383d692c05ca5836d2cd4db20db", "url": "https://api.github.com/repos/libdynd/libdynd/commits/d0d8d15747cda383d692c05ca5836d2cd4db20db", "html_url": "https://github.com/libdynd/libdynd/commit/d0d8d15747cda383d692c05ca5836d2cd4db20db"}]}, {"sha": "d0d8d15747cda383d692c05ca5836d2cd4db20db", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-16T09:45:12Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-16T09:45:12Z"}, "message": "Changes to apply", "tree": {"sha": "55483873386b27bbb075dd5562cd961cfb2e2760", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/55483873386b27bbb075dd5562cd961cfb2e2760"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/d0d8d15747cda383d692c05ca5836d2cd4db20db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/d0d8d15747cda383d692c05ca5836d2cd4db20db", "html_url": "https://github.com/libdynd/libdynd/commit/d0d8d15747cda383d692c05ca5836d2cd4db20db", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/d0d8d15747cda383d692c05ca5836d2cd4db20db/comments", "author": null, "committer": null, "parents": [{"sha": "330797d185e53f2a87236885bb6af3bafc393e69", "url": "https://api.github.com/repos/libdynd/libdynd/commits/330797d185e53f2a87236885bb6af3bafc393e69", "html_url": "https://github.com/libdynd/libdynd/commit/330797d185e53f2a87236885bb6af3bafc393e69"}]}, {"sha": "330797d185e53f2a87236885bb6af3bafc393e69", "commit": {"author": {"name": "Irwin Zaid", "email": "izaid@users.noreply.github.com", "date": "2016-06-15T09:13:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-06-15T09:13:14Z"}, "message": "Merge pull request #1276 from izaid/various\n\nRenamed fixed_dim<T> to fixed<T>", "tree": {"sha": "74cdc7f7695e8b68d3c721ef515406938c05df3e", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/74cdc7f7695e8b68d3c721ef515406938c05df3e"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/330797d185e53f2a87236885bb6af3bafc393e69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/330797d185e53f2a87236885bb6af3bafc393e69", "html_url": "https://github.com/libdynd/libdynd/commit/330797d185e53f2a87236885bb6af3bafc393e69", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/330797d185e53f2a87236885bb6af3bafc393e69/comments", "author": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c72acd87916cad3df53c78f90f0cd252389813a", "url": "https://api.github.com/repos/libdynd/libdynd/commits/3c72acd87916cad3df53c78f90f0cd252389813a", "html_url": "https://github.com/libdynd/libdynd/commit/3c72acd87916cad3df53c78f90f0cd252389813a"}, {"sha": "96a20e8500704ced41865735cbba5ab1df27c9b8", "url": "https://api.github.com/repos/libdynd/libdynd/commits/96a20e8500704ced41865735cbba5ab1df27c9b8", "html_url": "https://github.com/libdynd/libdynd/commit/96a20e8500704ced41865735cbba5ab1df27c9b8"}]}, {"sha": "96a20e8500704ced41865735cbba5ab1df27c9b8", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-15T08:53:45Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-15T08:53:45Z"}, "message": "Fix for MSVC", "tree": {"sha": "74cdc7f7695e8b68d3c721ef515406938c05df3e", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/74cdc7f7695e8b68d3c721ef515406938c05df3e"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/96a20e8500704ced41865735cbba5ab1df27c9b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/96a20e8500704ced41865735cbba5ab1df27c9b8", "html_url": "https://github.com/libdynd/libdynd/commit/96a20e8500704ced41865735cbba5ab1df27c9b8", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/96a20e8500704ced41865735cbba5ab1df27c9b8/comments", "author": null, "committer": null, "parents": [{"sha": "f29991e6fe786efadd70cb4e1bd1bc1de1c8d379", "url": "https://api.github.com/repos/libdynd/libdynd/commits/f29991e6fe786efadd70cb4e1bd1bc1de1c8d379", "html_url": "https://github.com/libdynd/libdynd/commit/f29991e6fe786efadd70cb4e1bd1bc1de1c8d379"}]}, {"sha": "f29991e6fe786efadd70cb4e1bd1bc1de1c8d379", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-15T08:39:57Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-15T08:39:57Z"}, "message": "Renamed fixed_dim<T> to fixed<T>", "tree": {"sha": "4a1388091af3e9b14caf16ae0b30876cb3a7a4d1", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/4a1388091af3e9b14caf16ae0b30876cb3a7a4d1"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/f29991e6fe786efadd70cb4e1bd1bc1de1c8d379", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/f29991e6fe786efadd70cb4e1bd1bc1de1c8d379", "html_url": "https://github.com/libdynd/libdynd/commit/f29991e6fe786efadd70cb4e1bd1bc1de1c8d379", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/f29991e6fe786efadd70cb4e1bd1bc1de1c8d379/comments", "author": null, "committer": null, "parents": [{"sha": "3c72acd87916cad3df53c78f90f0cd252389813a", "url": "https://api.github.com/repos/libdynd/libdynd/commits/3c72acd87916cad3df53c78f90f0cd252389813a", "html_url": "https://github.com/libdynd/libdynd/commit/3c72acd87916cad3df53c78f90f0cd252389813a"}]}, {"sha": "3c72acd87916cad3df53c78f90f0cd252389813a", "commit": {"author": {"name": "Irwin Zaid", "email": "izaid@users.noreply.github.com", "date": "2016-06-15T07:45:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-06-15T07:45:20Z"}, "message": "Merge pull request #1275 from izaid/various\n\nUpdating apply to allow for returning of arrays", "tree": {"sha": "9c149bee245dd48424c1dfa57e8101012cf21091", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/9c149bee245dd48424c1dfa57e8101012cf21091"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/3c72acd87916cad3df53c78f90f0cd252389813a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/3c72acd87916cad3df53c78f90f0cd252389813a", "html_url": "https://github.com/libdynd/libdynd/commit/3c72acd87916cad3df53c78f90f0cd252389813a", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/3c72acd87916cad3df53c78f90f0cd252389813a/comments", "author": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b2058ade415e1221e6f573cba81fd54bcb63c94", "url": "https://api.github.com/repos/libdynd/libdynd/commits/9b2058ade415e1221e6f573cba81fd54bcb63c94", "html_url": "https://github.com/libdynd/libdynd/commit/9b2058ade415e1221e6f573cba81fd54bcb63c94"}, {"sha": "822e8334ab4f6eb5c26442977dd38c986df6591b", "url": "https://api.github.com/repos/libdynd/libdynd/commits/822e8334ab4f6eb5c26442977dd38c986df6591b", "html_url": "https://github.com/libdynd/libdynd/commit/822e8334ab4f6eb5c26442977dd38c986df6591b"}]}, {"sha": "822e8334ab4f6eb5c26442977dd38c986df6591b", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-15T07:14:49Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-15T07:14:49Z"}, "message": "Fix for GCC", "tree": {"sha": "9c149bee245dd48424c1dfa57e8101012cf21091", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/9c149bee245dd48424c1dfa57e8101012cf21091"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/822e8334ab4f6eb5c26442977dd38c986df6591b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/822e8334ab4f6eb5c26442977dd38c986df6591b", "html_url": "https://github.com/libdynd/libdynd/commit/822e8334ab4f6eb5c26442977dd38c986df6591b", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/822e8334ab4f6eb5c26442977dd38c986df6591b/comments", "author": null, "committer": null, "parents": [{"sha": "af9522f902e7847ffb84df49a144d78ae267c2dd", "url": "https://api.github.com/repos/libdynd/libdynd/commits/af9522f902e7847ffb84df49a144d78ae267c2dd", "html_url": "https://github.com/libdynd/libdynd/commit/af9522f902e7847ffb84df49a144d78ae267c2dd"}]}, {"sha": "af9522f902e7847ffb84df49a144d78ae267c2dd", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-15T00:49:18Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-15T00:49:18Z"}, "message": "Removed the std::enable_if_t for return_wrapper", "tree": {"sha": "64effe83b665e375a6cec2545bde568dfeae1699", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/64effe83b665e375a6cec2545bde568dfeae1699"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/af9522f902e7847ffb84df49a144d78ae267c2dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/af9522f902e7847ffb84df49a144d78ae267c2dd", "html_url": "https://github.com/libdynd/libdynd/commit/af9522f902e7847ffb84df49a144d78ae267c2dd", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/af9522f902e7847ffb84df49a144d78ae267c2dd/comments", "author": null, "committer": null, "parents": [{"sha": "6a2e08afe5b062533817288140606de28fd9acf6", "url": "https://api.github.com/repos/libdynd/libdynd/commits/6a2e08afe5b062533817288140606de28fd9acf6", "html_url": "https://github.com/libdynd/libdynd/commit/6a2e08afe5b062533817288140606de28fd9acf6"}]}, {"sha": "6a2e08afe5b062533817288140606de28fd9acf6", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-15T00:22:33Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-15T00:22:33Z"}, "message": "Added has_return_wrapper trait", "tree": {"sha": "8dee3afabb128e369d0549c4b5cfbf8490b74c90", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/8dee3afabb128e369d0549c4b5cfbf8490b74c90"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/6a2e08afe5b062533817288140606de28fd9acf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/6a2e08afe5b062533817288140606de28fd9acf6", "html_url": "https://github.com/libdynd/libdynd/commit/6a2e08afe5b062533817288140606de28fd9acf6", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/6a2e08afe5b062533817288140606de28fd9acf6/comments", "author": null, "committer": null, "parents": [{"sha": "dce8f9d937d9b0a965bd26bf3d24f0afdf5dffe0", "url": "https://api.github.com/repos/libdynd/libdynd/commits/dce8f9d937d9b0a965bd26bf3d24f0afdf5dffe0", "html_url": "https://github.com/libdynd/libdynd/commit/dce8f9d937d9b0a965bd26bf3d24f0afdf5dffe0"}]}, {"sha": "dce8f9d937d9b0a965bd26bf3d24f0afdf5dffe0", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-14T23:36:57Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-14T23:36:57Z"}, "message": "Brought callable type creation into base_apply_callable", "tree": {"sha": "f9f379c6c654b090bf114f43cba85a9b7c547608", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/f9f379c6c654b090bf114f43cba85a9b7c547608"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/dce8f9d937d9b0a965bd26bf3d24f0afdf5dffe0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/dce8f9d937d9b0a965bd26bf3d24f0afdf5dffe0", "html_url": "https://github.com/libdynd/libdynd/commit/dce8f9d937d9b0a965bd26bf3d24f0afdf5dffe0", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/dce8f9d937d9b0a965bd26bf3d24f0afdf5dffe0/comments", "author": null, "committer": null, "parents": [{"sha": "3337d58d7aa4b211dacb0e53366289db763dfcd1", "url": "https://api.github.com/repos/libdynd/libdynd/commits/3337d58d7aa4b211dacb0e53366289db763dfcd1", "html_url": "https://github.com/libdynd/libdynd/commit/3337d58d7aa4b211dacb0e53366289db763dfcd1"}]}, {"sha": "3337d58d7aa4b211dacb0e53366289db763dfcd1", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-14T23:22:43Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-14T23:22:43Z"}, "message": "Removed extra temporary code", "tree": {"sha": "5a78d7d398b88ede38cb36daec11db0dbe0d04bc", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/5a78d7d398b88ede38cb36daec11db0dbe0d04bc"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/3337d58d7aa4b211dacb0e53366289db763dfcd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/3337d58d7aa4b211dacb0e53366289db763dfcd1", "html_url": "https://github.com/libdynd/libdynd/commit/3337d58d7aa4b211dacb0e53366289db763dfcd1", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/3337d58d7aa4b211dacb0e53366289db763dfcd1/comments", "author": null, "committer": null, "parents": [{"sha": "9ab3eb844c05b7cdc1bd58d5b7750619e38ac597", "url": "https://api.github.com/repos/libdynd/libdynd/commits/9ab3eb844c05b7cdc1bd58d5b7750619e38ac597", "html_url": "https://github.com/libdynd/libdynd/commit/9ab3eb844c05b7cdc1bd58d5b7750619e38ac597"}]}, {"sha": "9ab3eb844c05b7cdc1bd58d5b7750619e38ac597", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-14T22:11:07Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-14T22:11:07Z"}, "message": "Added KwdSequence to all the apply callables", "tree": {"sha": "555cda57e009f981e5926671454e2e9fdf545e6a", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/555cda57e009f981e5926671454e2e9fdf545e6a"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/9ab3eb844c05b7cdc1bd58d5b7750619e38ac597", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/9ab3eb844c05b7cdc1bd58d5b7750619e38ac597", "html_url": "https://github.com/libdynd/libdynd/commit/9ab3eb844c05b7cdc1bd58d5b7750619e38ac597", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/9ab3eb844c05b7cdc1bd58d5b7750619e38ac597/comments", "author": null, "committer": null, "parents": [{"sha": "67c1793bc0c08a4f56efcd18d9e0309ea9de127a", "url": "https://api.github.com/repos/libdynd/libdynd/commits/67c1793bc0c08a4f56efcd18d9e0309ea9de127a", "html_url": "https://github.com/libdynd/libdynd/commit/67c1793bc0c08a4f56efcd18d9e0309ea9de127a"}]}, {"sha": "67c1793bc0c08a4f56efcd18d9e0309ea9de127a", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-14T21:37:56Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-14T21:37:56Z"}, "message": "Attempted MSVC fix", "tree": {"sha": "b44a95b4011d63e3f161f8d4280fbcce18bf1509", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/b44a95b4011d63e3f161f8d4280fbcce18bf1509"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/67c1793bc0c08a4f56efcd18d9e0309ea9de127a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/67c1793bc0c08a4f56efcd18d9e0309ea9de127a", "html_url": "https://github.com/libdynd/libdynd/commit/67c1793bc0c08a4f56efcd18d9e0309ea9de127a", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/67c1793bc0c08a4f56efcd18d9e0309ea9de127a/comments", "author": null, "committer": null, "parents": [{"sha": "ba0e2128f8e152141ef1a37c6ad38390914de1cb", "url": "https://api.github.com/repos/libdynd/libdynd/commits/ba0e2128f8e152141ef1a37c6ad38390914de1cb", "html_url": "https://github.com/libdynd/libdynd/commit/ba0e2128f8e152141ef1a37c6ad38390914de1cb"}]}, {"sha": "ba0e2128f8e152141ef1a37c6ad38390914de1cb", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-14T20:04:33Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-14T20:04:33Z"}, "message": "More refactoring around apply", "tree": {"sha": "b9f66bc463c0ba5d3daa5ef4ed561dd9a94cac37", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/b9f66bc463c0ba5d3daa5ef4ed561dd9a94cac37"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/ba0e2128f8e152141ef1a37c6ad38390914de1cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/ba0e2128f8e152141ef1a37c6ad38390914de1cb", "html_url": "https://github.com/libdynd/libdynd/commit/ba0e2128f8e152141ef1a37c6ad38390914de1cb", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/ba0e2128f8e152141ef1a37c6ad38390914de1cb/comments", "author": null, "committer": null, "parents": [{"sha": "f9ab55ca15ac551c93ae571687422498fbf19cc6", "url": "https://api.github.com/repos/libdynd/libdynd/commits/f9ab55ca15ac551c93ae571687422498fbf19cc6", "html_url": "https://github.com/libdynd/libdynd/commit/f9ab55ca15ac551c93ae571687422498fbf19cc6"}]}, {"sha": "f9ab55ca15ac551c93ae571687422498fbf19cc6", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-14T19:31:23Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-14T19:31:23Z"}, "message": "Refactoring the apply callables", "tree": {"sha": "e5531757a4b2bb022bf13102c304abdcb55cc68f", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/e5531757a4b2bb022bf13102c304abdcb55cc68f"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/f9ab55ca15ac551c93ae571687422498fbf19cc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/f9ab55ca15ac551c93ae571687422498fbf19cc6", "html_url": "https://github.com/libdynd/libdynd/commit/f9ab55ca15ac551c93ae571687422498fbf19cc6", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/f9ab55ca15ac551c93ae571687422498fbf19cc6/comments", "author": null, "committer": null, "parents": [{"sha": "9ddf91a5be8158be7d9ca9d4cea4a993c7fbc2ec", "url": "https://api.github.com/repos/libdynd/libdynd/commits/9ddf91a5be8158be7d9ca9d4cea4a993c7fbc2ec", "html_url": "https://github.com/libdynd/libdynd/commit/9ddf91a5be8158be7d9ca9d4cea4a993c7fbc2ec"}]}, {"sha": "9ddf91a5be8158be7d9ca9d4cea4a993c7fbc2ec", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-14T18:51:11Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-14T18:51:11Z"}, "message": "Fix for apply test", "tree": {"sha": "18f36dc1773ffc8d5ce9eb2b9483295adcb0f4af", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/18f36dc1773ffc8d5ce9eb2b9483295adcb0f4af"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/9ddf91a5be8158be7d9ca9d4cea4a993c7fbc2ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/9ddf91a5be8158be7d9ca9d4cea4a993c7fbc2ec", "html_url": "https://github.com/libdynd/libdynd/commit/9ddf91a5be8158be7d9ca9d4cea4a993c7fbc2ec", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/9ddf91a5be8158be7d9ca9d4cea4a993c7fbc2ec/comments", "author": null, "committer": null, "parents": [{"sha": "87eabb15e14cb852d02df89f6f92dbd4523680ef", "url": "https://api.github.com/repos/libdynd/libdynd/commits/87eabb15e14cb852d02df89f6f92dbd4523680ef", "html_url": "https://github.com/libdynd/libdynd/commit/87eabb15e14cb852d02df89f6f92dbd4523680ef"}]}, {"sha": "87eabb15e14cb852d02df89f6f92dbd4523680ef", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-14T18:38:43Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-14T18:38:43Z"}, "message": "Attempt #2 to fix Appveyor", "tree": {"sha": "72107486853c7ced2f9253326b8a85e753ddb150", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/72107486853c7ced2f9253326b8a85e753ddb150"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/87eabb15e14cb852d02df89f6f92dbd4523680ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/87eabb15e14cb852d02df89f6f92dbd4523680ef", "html_url": "https://github.com/libdynd/libdynd/commit/87eabb15e14cb852d02df89f6f92dbd4523680ef", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/87eabb15e14cb852d02df89f6f92dbd4523680ef/comments", "author": null, "committer": null, "parents": [{"sha": "84977cc450b7d6f09cd39784ebf9a67168bcb3d0", "url": "https://api.github.com/repos/libdynd/libdynd/commits/84977cc450b7d6f09cd39784ebf9a67168bcb3d0", "html_url": "https://github.com/libdynd/libdynd/commit/84977cc450b7d6f09cd39784ebf9a67168bcb3d0"}]}, {"sha": "84977cc450b7d6f09cd39784ebf9a67168bcb3d0", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-14T18:06:10Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-14T18:06:10Z"}, "message": "Attempted fix for Appveyor", "tree": {"sha": "1f52ff99e691ae00b733dba7c9bf55880a86adb3", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/1f52ff99e691ae00b733dba7c9bf55880a86adb3"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/84977cc450b7d6f09cd39784ebf9a67168bcb3d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/84977cc450b7d6f09cd39784ebf9a67168bcb3d0", "html_url": "https://github.com/libdynd/libdynd/commit/84977cc450b7d6f09cd39784ebf9a67168bcb3d0", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/84977cc450b7d6f09cd39784ebf9a67168bcb3d0/comments", "author": null, "committer": null, "parents": [{"sha": "2496dd701a2229cdfa340a8142d7e645596f32c2", "url": "https://api.github.com/repos/libdynd/libdynd/commits/2496dd701a2229cdfa340a8142d7e645596f32c2", "html_url": "https://github.com/libdynd/libdynd/commit/2496dd701a2229cdfa340a8142d7e645596f32c2"}]}, {"sha": "2496dd701a2229cdfa340a8142d7e645596f32c2", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-14T17:50:51Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-14T17:50:51Z"}, "message": "Testing return wrapper stuff", "tree": {"sha": "7dc799a627c6423cab6d4c1e02b58837d5a570c8", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/7dc799a627c6423cab6d4c1e02b58837d5a570c8"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/2496dd701a2229cdfa340a8142d7e645596f32c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/2496dd701a2229cdfa340a8142d7e645596f32c2", "html_url": "https://github.com/libdynd/libdynd/commit/2496dd701a2229cdfa340a8142d7e645596f32c2", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/2496dd701a2229cdfa340a8142d7e645596f32c2/comments", "author": null, "committer": null, "parents": [{"sha": "f3992e94b21f293a0d32cbb646cfd65c0663a81a", "url": "https://api.github.com/repos/libdynd/libdynd/commits/f3992e94b21f293a0d32cbb646cfd65c0663a81a", "html_url": "https://github.com/libdynd/libdynd/commit/f3992e94b21f293a0d32cbb646cfd65c0663a81a"}]}, {"sha": "f3992e94b21f293a0d32cbb646cfd65c0663a81a", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-13T10:20:07Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-13T10:20:07Z"}, "message": "Added a base apply callable", "tree": {"sha": "651e7ef54cbf13bca37733280c2032f4be7b232b", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/651e7ef54cbf13bca37733280c2032f4be7b232b"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/f3992e94b21f293a0d32cbb646cfd65c0663a81a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/f3992e94b21f293a0d32cbb646cfd65c0663a81a", "html_url": "https://github.com/libdynd/libdynd/commit/f3992e94b21f293a0d32cbb646cfd65c0663a81a", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/f3992e94b21f293a0d32cbb646cfd65c0663a81a/comments", "author": null, "committer": null, "parents": [{"sha": "9b2058ade415e1221e6f573cba81fd54bcb63c94", "url": "https://api.github.com/repos/libdynd/libdynd/commits/9b2058ade415e1221e6f573cba81fd54bcb63c94", "html_url": "https://github.com/libdynd/libdynd/commit/9b2058ade415e1221e6f573cba81fd54bcb63c94"}]}, {"sha": "9b2058ade415e1221e6f573cba81fd54bcb63c94", "commit": {"author": {"name": "Irwin Zaid", "email": "izaid@users.noreply.github.com", "date": "2016-06-12T17:00:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-06-12T17:00:02Z"}, "message": "Merge pull request #1273 from izaid/various\n\nRefactored fixed_dim<T>, added more functionality to optional<T>", "tree": {"sha": "04a7b2eb8006c67eb9c5efffd47421e1ed8cc3cd", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/04a7b2eb8006c67eb9c5efffd47421e1ed8cc3cd"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/9b2058ade415e1221e6f573cba81fd54bcb63c94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/9b2058ade415e1221e6f573cba81fd54bcb63c94", "html_url": "https://github.com/libdynd/libdynd/commit/9b2058ade415e1221e6f573cba81fd54bcb63c94", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/9b2058ade415e1221e6f573cba81fd54bcb63c94/comments", "author": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e0578806c99dc0eda8c04a20366b3dca299db0b", "url": "https://api.github.com/repos/libdynd/libdynd/commits/7e0578806c99dc0eda8c04a20366b3dca299db0b", "html_url": "https://github.com/libdynd/libdynd/commit/7e0578806c99dc0eda8c04a20366b3dca299db0b"}, {"sha": "0f5fa4705bcc00d6911a29c8b84eb679cf253efb", "url": "https://api.github.com/repos/libdynd/libdynd/commits/0f5fa4705bcc00d6911a29c8b84eb679cf253efb", "html_url": "https://github.com/libdynd/libdynd/commit/0f5fa4705bcc00d6911a29c8b84eb679cf253efb"}]}, {"sha": "0f5fa4705bcc00d6911a29c8b84eb679cf253efb", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-12T14:31:22Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-12T14:31:22Z"}, "message": "Fix for Appveyor", "tree": {"sha": "04a7b2eb8006c67eb9c5efffd47421e1ed8cc3cd", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/04a7b2eb8006c67eb9c5efffd47421e1ed8cc3cd"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/0f5fa4705bcc00d6911a29c8b84eb679cf253efb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/0f5fa4705bcc00d6911a29c8b84eb679cf253efb", "html_url": "https://github.com/libdynd/libdynd/commit/0f5fa4705bcc00d6911a29c8b84eb679cf253efb", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/0f5fa4705bcc00d6911a29c8b84eb679cf253efb/comments", "author": null, "committer": null, "parents": [{"sha": "4126a59dd7b5408fe2ffc971f2b9090c0d781d3b", "url": "https://api.github.com/repos/libdynd/libdynd/commits/4126a59dd7b5408fe2ffc971f2b9090c0d781d3b", "html_url": "https://github.com/libdynd/libdynd/commit/4126a59dd7b5408fe2ffc971f2b9090c0d781d3b"}]}, {"sha": "4126a59dd7b5408fe2ffc971f2b9090c0d781d3b", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-12T13:42:18Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-12T13:42:18Z"}, "message": "A few follow-up changes", "tree": {"sha": "932c3bc96e9630571edda700912f8318ea4166dd", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/932c3bc96e9630571edda700912f8318ea4166dd"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/4126a59dd7b5408fe2ffc971f2b9090c0d781d3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/4126a59dd7b5408fe2ffc971f2b9090c0d781d3b", "html_url": "https://github.com/libdynd/libdynd/commit/4126a59dd7b5408fe2ffc971f2b9090c0d781d3b", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/4126a59dd7b5408fe2ffc971f2b9090c0d781d3b/comments", "author": null, "committer": null, "parents": [{"sha": "aaf9554bcfece57483fc2860e488887d381f5306", "url": "https://api.github.com/repos/libdynd/libdynd/commits/aaf9554bcfece57483fc2860e488887d381f5306", "html_url": "https://github.com/libdynd/libdynd/commit/aaf9554bcfece57483fc2860e488887d381f5306"}]}, {"sha": "aaf9554bcfece57483fc2860e488887d381f5306", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-12T13:27:41Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-12T13:27:41Z"}, "message": "Refactored fixed_dim<T>, added more functionality to optional<T>", "tree": {"sha": "19d365242842e7ab4f22a81b17d50e55c50df123", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/19d365242842e7ab4f22a81b17d50e55c50df123"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/aaf9554bcfece57483fc2860e488887d381f5306", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/aaf9554bcfece57483fc2860e488887d381f5306", "html_url": "https://github.com/libdynd/libdynd/commit/aaf9554bcfece57483fc2860e488887d381f5306", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/aaf9554bcfece57483fc2860e488887d381f5306/comments", "author": null, "committer": null, "parents": [{"sha": "7e0578806c99dc0eda8c04a20366b3dca299db0b", "url": "https://api.github.com/repos/libdynd/libdynd/commits/7e0578806c99dc0eda8c04a20366b3dca299db0b", "html_url": "https://github.com/libdynd/libdynd/commit/7e0578806c99dc0eda8c04a20366b3dca299db0b"}]}, {"sha": "7e0578806c99dc0eda8c04a20366b3dca299db0b", "commit": {"author": {"name": "Irwin Zaid", "email": "izaid@users.noreply.github.com", "date": "2016-06-04T20:45:50Z"}, "committer": {"name": "Irwin Zaid", "email": "izaid@users.noreply.github.com", "date": "2016-06-04T20:45:50Z"}, "message": "Merge pull request #1271 from izaid/dispatch\n\nRemoved more old dispatch callables", "tree": {"sha": "632805d89645527c406f67efd83561c31cd18d1b", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/632805d89645527c406f67efd83561c31cd18d1b"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/7e0578806c99dc0eda8c04a20366b3dca299db0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/7e0578806c99dc0eda8c04a20366b3dca299db0b", "html_url": "https://github.com/libdynd/libdynd/commit/7e0578806c99dc0eda8c04a20366b3dca299db0b", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/7e0578806c99dc0eda8c04a20366b3dca299db0b/comments", "author": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f2ee9b2819cff7d08cce4fed355c9fdb64099b6", "url": "https://api.github.com/repos/libdynd/libdynd/commits/1f2ee9b2819cff7d08cce4fed355c9fdb64099b6", "html_url": "https://github.com/libdynd/libdynd/commit/1f2ee9b2819cff7d08cce4fed355c9fdb64099b6"}, {"sha": "cce482624bc4b3dc9165d29b9f992ea01da1f3b7", "url": "https://api.github.com/repos/libdynd/libdynd/commits/cce482624bc4b3dc9165d29b9f992ea01da1f3b7", "html_url": "https://github.com/libdynd/libdynd/commit/cce482624bc4b3dc9165d29b9f992ea01da1f3b7"}]}, {"sha": "cce482624bc4b3dc9165d29b9f992ea01da1f3b7", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-04T20:14:37Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-04T20:14:37Z"}, "message": "Removed more old dispatch callables", "tree": {"sha": "632805d89645527c406f67efd83561c31cd18d1b", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/632805d89645527c406f67efd83561c31cd18d1b"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/cce482624bc4b3dc9165d29b9f992ea01da1f3b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/cce482624bc4b3dc9165d29b9f992ea01da1f3b7", "html_url": "https://github.com/libdynd/libdynd/commit/cce482624bc4b3dc9165d29b9f992ea01da1f3b7", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/cce482624bc4b3dc9165d29b9f992ea01da1f3b7/comments", "author": null, "committer": null, "parents": [{"sha": "1f2ee9b2819cff7d08cce4fed355c9fdb64099b6", "url": "https://api.github.com/repos/libdynd/libdynd/commits/1f2ee9b2819cff7d08cce4fed355c9fdb64099b6", "html_url": "https://github.com/libdynd/libdynd/commit/1f2ee9b2819cff7d08cce4fed355c9fdb64099b6"}]}, {"sha": "1f2ee9b2819cff7d08cce4fed355c9fdb64099b6", "commit": {"author": {"name": "Irwin Zaid", "email": "izaid@users.noreply.github.com", "date": "2016-06-04T19:44:37Z"}, "committer": {"name": "Irwin Zaid", "email": "izaid@users.noreply.github.com", "date": "2016-06-04T19:44:37Z"}, "message": "Merge pull request #1270 from izaid/dispatch\n\nRemoved base types from type constructors", "tree": {"sha": "c91fda0389394e69b814291bcdd6221e8f3b8c26", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/c91fda0389394e69b814291bcdd6221e8f3b8c26"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/1f2ee9b2819cff7d08cce4fed355c9fdb64099b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/1f2ee9b2819cff7d08cce4fed355c9fdb64099b6", "html_url": "https://github.com/libdynd/libdynd/commit/1f2ee9b2819cff7d08cce4fed355c9fdb64099b6", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/1f2ee9b2819cff7d08cce4fed355c9fdb64099b6/comments", "author": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "baffd7dcd7fb1d3f816006e2b706742c916818b8", "url": "https://api.github.com/repos/libdynd/libdynd/commits/baffd7dcd7fb1d3f816006e2b706742c916818b8", "html_url": "https://github.com/libdynd/libdynd/commit/baffd7dcd7fb1d3f816006e2b706742c916818b8"}, {"sha": "6aa40f17aa134027aa886f56f672f89c0f1ab988", "url": "https://api.github.com/repos/libdynd/libdynd/commits/6aa40f17aa134027aa886f56f672f89c0f1ab988", "html_url": "https://github.com/libdynd/libdynd/commit/6aa40f17aa134027aa886f56f672f89c0f1ab988"}]}, {"sha": "6aa40f17aa134027aa886f56f672f89c0f1ab988", "commit": {"author": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-04T19:22:44Z"}, "committer": {"name": "izaid", "email": "hi@irwinzaid.com", "date": "2016-06-04T19:22:44Z"}, "message": "Removed base types from type constructors", "tree": {"sha": "c91fda0389394e69b814291bcdd6221e8f3b8c26", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/c91fda0389394e69b814291bcdd6221e8f3b8c26"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/6aa40f17aa134027aa886f56f672f89c0f1ab988", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/6aa40f17aa134027aa886f56f672f89c0f1ab988", "html_url": "https://github.com/libdynd/libdynd/commit/6aa40f17aa134027aa886f56f672f89c0f1ab988", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/6aa40f17aa134027aa886f56f672f89c0f1ab988/comments", "author": null, "committer": null, "parents": [{"sha": "baffd7dcd7fb1d3f816006e2b706742c916818b8", "url": "https://api.github.com/repos/libdynd/libdynd/commits/baffd7dcd7fb1d3f816006e2b706742c916818b8", "html_url": "https://github.com/libdynd/libdynd/commit/baffd7dcd7fb1d3f816006e2b706742c916818b8"}]}, {"sha": "baffd7dcd7fb1d3f816006e2b706742c916818b8", "commit": {"author": {"name": "Irwin Zaid", "email": "izaid@users.noreply.github.com", "date": "2016-06-04T12:30:08Z"}, "committer": {"name": "Irwin Zaid", "email": "izaid@users.noreply.github.com", "date": "2016-06-04T12:30:08Z"}, "message": "Merge pull request #1269 from izaid/dispatch\n\nRestored base ID hierarchy", "tree": {"sha": "43b4f182aa84ee7ce68717af0b37e089c8544a27", "url": "https://api.github.com/repos/libdynd/libdynd/git/trees/43b4f182aa84ee7ce68717af0b37e089c8544a27"}, "url": "https://api.github.com/repos/libdynd/libdynd/git/commits/baffd7dcd7fb1d3f816006e2b706742c916818b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/libdynd/libdynd/commits/baffd7dcd7fb1d3f816006e2b706742c916818b8", "html_url": "https://github.com/libdynd/libdynd/commit/baffd7dcd7fb1d3f816006e2b706742c916818b8", "comments_url": "https://api.github.com/repos/libdynd/libdynd/commits/baffd7dcd7fb1d3f816006e2b706742c916818b8/comments", "author": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e5ad97c627dab77c0ab757cf7dd5386d15b2757", "url": "https://api.github.com/repos/libdynd/libdynd/commits/0e5ad97c627dab77c0ab757cf7dd5386d15b2757", "html_url": "https://github.com/libdynd/libdynd/commit/0e5ad97c627dab77c0ab757cf7dd5386d15b2757"}, {"sha": "301b62156fad7de76363055d96fd3d548bc99230", "url": "https://api.github.com/repos/libdynd/libdynd/commits/301b62156fad7de76363055d96fd3d548bc99230", "html_url": "https://github.com/libdynd/libdynd/commit/301b62156fad7de76363055d96fd3d548bc99230"}]}], "pull_requests": [{"url": "https://api.github.com/repos/libdynd/libdynd/pulls/1329", "id": 159976321, "html_url": "https://github.com/libdynd/libdynd/pull/1329", "diff_url": "https://github.com/libdynd/libdynd/pull/1329.diff", "patch_url": "https://github.com/libdynd/libdynd/pull/1329.patch", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/1329", "number": 1329, "state": "open", "locked": false, "title": "Update to latest googletest.", "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "body": "Another pass at https://github.com/libdynd/libdynd/pull/1319.", "created_at": "2017-12-23T18:31:52Z", "updated_at": "2017-12-23T20:51:19Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "fec71b9c47b8fdcfb6ec7e31f1c0268ad68d8fe6", "assignee": null, "assignees": [], "requested_reviewers": [], "milestone": null, "commits_url": "https://api.github.com/repos/libdynd/libdynd/pulls/1329/commits", "review_comments_url": "https://api.github.com/repos/libdynd/libdynd/pulls/1329/comments", "review_comment_url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/1329/comments", "statuses_url": "https://api.github.com/repos/libdynd/libdynd/statuses/4a1418dd673b5eb589fa811ffab0c4dbc3ac0b5d", "head": {"label": "insertinterestingnamehere:gtest_new", "ref": "gtest_new", "sha": "4a1418dd673b5eb589fa811ffab0c4dbc3ac0b5d", "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "repo": {"id": 22548868, "name": "libdynd", "full_name": "insertinterestingnamehere/libdynd", "owner": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "private": false, "html_url": "https://github.com/insertinterestingnamehere/libdynd", "description": "C++ dynamic ndarray library, with Python exposure", "fork": true, "url": "https://api.github.com/repos/insertinterestingnamehere/libdynd", "forks_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/forks", "keys_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/teams", "hooks_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/hooks", "issue_events_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/issues/events{/number}", "events_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/events", "assignees_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/assignees{/user}", "branches_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/branches{/branch}", "tags_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/tags", "blobs_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/git/refs{/sha}", "trees_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/statuses/{sha}", "languages_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/languages", "stargazers_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/stargazers", "contributors_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/contributors", "subscribers_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/subscribers", "subscription_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/subscription", "commits_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/commits{/sha}", "git_commits_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/git/commits{/sha}", "comments_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/comments{/number}", "issue_comment_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/issues/comments{/number}", "contents_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/contents/{+path}", "compare_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/merges", "archive_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/downloads", "issues_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/issues{/number}", "pulls_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/pulls{/number}", "milestones_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/milestones{/number}", "notifications_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/labels{/name}", "releases_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/releases{/id}", "deployments_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/deployments", "created_at": "2014-08-02T15:34:03Z", "updated_at": "2016-01-13T05:06:49Z", "pushed_at": "2017-12-23T20:55:20Z", "git_url": "git://github.com/insertinterestingnamehere/libdynd.git", "ssh_url": "git@github.com:insertinterestingnamehere/libdynd.git", "clone_url": "https://github.com/insertinterestingnamehere/libdynd.git", "svn_url": "https://github.com/insertinterestingnamehere/libdynd", "homepage": null, "size": 31077, "stargazers_count": 0, "watchers_count": 0, "language": "C++", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "open_issues_count": 0, "license": {"key": "other", "name": "Other", "spdx_id": null, "url": null}, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "libdynd:master", "ref": "master", "sha": "5df10025b5fcb0d87064c677cb4c8b5adc2e39a5", "user": {"login": "libdynd", "id": 10065955, "avatar_url": "https://avatars1.githubusercontent.com/u/10065955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/libdynd", "html_url": "https://github.com/libdynd", "followers_url": "https://api.github.com/users/libdynd/followers", "following_url": "https://api.github.com/users/libdynd/following{/other_user}", "gists_url": "https://api.github.com/users/libdynd/gists{/gist_id}", "starred_url": "https://api.github.com/users/libdynd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/libdynd/subscriptions", "organizations_url": "https://api.github.com/users/libdynd/orgs", "repos_url": "https://api.github.com/users/libdynd/repos", "events_url": "https://api.github.com/users/libdynd/events{/privacy}", "received_events_url": "https://api.github.com/users/libdynd/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 4665479, "name": "libdynd", "full_name": "libdynd/libdynd", "owner": {"login": "libdynd", "id": 10065955, "avatar_url": "https://avatars1.githubusercontent.com/u/10065955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/libdynd", "html_url": "https://github.com/libdynd", "followers_url": "https://api.github.com/users/libdynd/followers", "following_url": "https://api.github.com/users/libdynd/following{/other_user}", "gists_url": "https://api.github.com/users/libdynd/gists{/gist_id}", "starred_url": "https://api.github.com/users/libdynd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/libdynd/subscriptions", "organizations_url": "https://api.github.com/users/libdynd/orgs", "repos_url": "https://api.github.com/users/libdynd/repos", "events_url": "https://api.github.com/users/libdynd/events{/privacy}", "received_events_url": "https://api.github.com/users/libdynd/received_events", "type": "Organization", "site_admin": false}, "private": false, "html_url": "https://github.com/libdynd/libdynd", "description": "C++ dynamic ndarray library, with Python exposure", "fork": false, "url": "https://api.github.com/repos/libdynd/libdynd", "forks_url": "https://api.github.com/repos/libdynd/libdynd/forks", "keys_url": "https://api.github.com/repos/libdynd/libdynd/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/libdynd/libdynd/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/libdynd/libdynd/teams", "hooks_url": "https://api.github.com/repos/libdynd/libdynd/hooks", "issue_events_url": "https://api.github.com/repos/libdynd/libdynd/issues/events{/number}", "events_url": "https://api.github.com/repos/libdynd/libdynd/events", "assignees_url": "https://api.github.com/repos/libdynd/libdynd/assignees{/user}", "branches_url": "https://api.github.com/repos/libdynd/libdynd/branches{/branch}", "tags_url": "https://api.github.com/repos/libdynd/libdynd/tags", "blobs_url": "https://api.github.com/repos/libdynd/libdynd/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/libdynd/libdynd/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/libdynd/libdynd/git/refs{/sha}", "trees_url": "https://api.github.com/repos/libdynd/libdynd/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/libdynd/libdynd/statuses/{sha}", "languages_url": "https://api.github.com/repos/libdynd/libdynd/languages", "stargazers_url": "https://api.github.com/repos/libdynd/libdynd/stargazers", "contributors_url": "https://api.github.com/repos/libdynd/libdynd/contributors", "subscribers_url": "https://api.github.com/repos/libdynd/libdynd/subscribers", "subscription_url": "https://api.github.com/repos/libdynd/libdynd/subscription", "commits_url": "https://api.github.com/repos/libdynd/libdynd/commits{/sha}", "git_commits_url": "https://api.github.com/repos/libdynd/libdynd/git/commits{/sha}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/comments{/number}", "issue_comment_url": "https://api.github.com/repos/libdynd/libdynd/issues/comments{/number}", "contents_url": "https://api.github.com/repos/libdynd/libdynd/contents/{+path}", "compare_url": "https://api.github.com/repos/libdynd/libdynd/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/libdynd/libdynd/merges", "archive_url": "https://api.github.com/repos/libdynd/libdynd/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/libdynd/libdynd/downloads", "issues_url": "https://api.github.com/repos/libdynd/libdynd/issues{/number}", "pulls_url": "https://api.github.com/repos/libdynd/libdynd/pulls{/number}", "milestones_url": "https://api.github.com/repos/libdynd/libdynd/milestones{/number}", "notifications_url": "https://api.github.com/repos/libdynd/libdynd/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/libdynd/libdynd/labels{/name}", "releases_url": "https://api.github.com/repos/libdynd/libdynd/releases{/id}", "deployments_url": "https://api.github.com/repos/libdynd/libdynd/deployments", "created_at": "2012-06-14T16:14:46Z", "updated_at": "2018-01-07T16:36:46Z", "pushed_at": "2017-12-23T22:04:17Z", "git_url": "git://github.com/libdynd/libdynd.git", "ssh_url": "git@github.com:libdynd/libdynd.git", "clone_url": "https://github.com/libdynd/libdynd.git", "svn_url": "https://github.com/libdynd/libdynd", "homepage": "http://libdynd.org", "size": 31016, "stargazers_count": 228, "watchers_count": 228, "language": "C++", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 48, "mirror_url": null, "archived": false, "open_issues_count": 76, "license": {"key": "other", "name": "Other", "spdx_id": null, "url": null}, "forks": 48, "open_issues": 76, "watchers": 228, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/1329"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/1329"}, "issue": {"href": "https://api.github.com/repos/libdynd/libdynd/issues/1329"}, "comments": {"href": "https://api.github.com/repos/libdynd/libdynd/issues/1329/comments"}, "review_comments": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/1329/comments"}, "review_comment": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/1329/commits"}, "statuses": {"href": "https://api.github.com/repos/libdynd/libdynd/statuses/4a1418dd673b5eb589fa811ffab0c4dbc3ac0b5d"}}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/1265", "id": 72357853, "html_url": "https://github.com/libdynd/libdynd/pull/1265", "diff_url": "https://github.com/libdynd/libdynd/pull/1265.diff", "patch_url": "https://github.com/libdynd/libdynd/pull/1265.patch", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/1265", "number": 1265, "state": "open", "locked": false, "title": "[WIP] Add flag for building libdyndt only.", "user": {"login": "skrah", "id": 16530421, "avatar_url": "https://avatars1.githubusercontent.com/u/16530421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skrah", "html_url": "https://github.com/skrah", "followers_url": "https://api.github.com/users/skrah/followers", "following_url": "https://api.github.com/users/skrah/following{/other_user}", "gists_url": "https://api.github.com/users/skrah/gists{/gist_id}", "starred_url": "https://api.github.com/users/skrah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skrah/subscriptions", "organizations_url": "https://api.github.com/users/skrah/orgs", "repos_url": "https://api.github.com/users/skrah/repos", "events_url": "https://api.github.com/users/skrah/events{/privacy}", "received_events_url": "https://api.github.com/users/skrah/received_events", "type": "User", "site_admin": false}, "body": "The problem: It would be good to cut down build times for the dynd-python build when libdynd is in the tree. It is already possible to execute `make libdyndt` manually, but I have trouble finding an elegant way to make that happen inside the dynd-python cmake machinery.\n\nAnother way would be to add a `DYND_BUILD_LIBDYND` flag, which is what this patch is doing. Since the tests and benchmarks still depend on libdynd, this is still a bit convoluted.\n\nI'm not sure if I like this patch, I'm mainly hoping for better solutions.\n", "created_at": "2016-06-02T14:38:26Z", "updated_at": "2016-06-03T20:24:21Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "3ce6bb63a27207f3faa6d5a2cab15af8184d81c6", "assignee": null, "assignees": [], "requested_reviewers": [], "milestone": null, "commits_url": "https://api.github.com/repos/libdynd/libdynd/pulls/1265/commits", "review_comments_url": "https://api.github.com/repos/libdynd/libdynd/pulls/1265/comments", "review_comment_url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/1265/comments", "statuses_url": "https://api.github.com/repos/libdynd/libdynd/statuses/deaa9a8327634d958b82f9ebe39e971162d1c6c0", "head": {"label": "skrah:build_libdyndt_only", "ref": "build_libdyndt_only", "sha": "deaa9a8327634d958b82f9ebe39e971162d1c6c0", "user": {"login": "skrah", "id": 16530421, "avatar_url": "https://avatars1.githubusercontent.com/u/16530421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skrah", "html_url": "https://github.com/skrah", "followers_url": "https://api.github.com/users/skrah/followers", "following_url": "https://api.github.com/users/skrah/following{/other_user}", "gists_url": "https://api.github.com/users/skrah/gists{/gist_id}", "starred_url": "https://api.github.com/users/skrah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skrah/subscriptions", "organizations_url": "https://api.github.com/users/skrah/orgs", "repos_url": "https://api.github.com/users/skrah/repos", "events_url": "https://api.github.com/users/skrah/events{/privacy}", "received_events_url": "https://api.github.com/users/skrah/received_events", "type": "User", "site_admin": false}, "repo": {"id": 51998592, "name": "libdynd", "full_name": "skrah/libdynd", "owner": {"login": "skrah", "id": 16530421, "avatar_url": "https://avatars1.githubusercontent.com/u/16530421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skrah", "html_url": "https://github.com/skrah", "followers_url": "https://api.github.com/users/skrah/followers", "following_url": "https://api.github.com/users/skrah/following{/other_user}", "gists_url": "https://api.github.com/users/skrah/gists{/gist_id}", "starred_url": "https://api.github.com/users/skrah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skrah/subscriptions", "organizations_url": "https://api.github.com/users/skrah/orgs", "repos_url": "https://api.github.com/users/skrah/repos", "events_url": "https://api.github.com/users/skrah/events{/privacy}", "received_events_url": "https://api.github.com/users/skrah/received_events", "type": "User", "site_admin": false}, "private": false, "html_url": "https://github.com/skrah/libdynd", "description": "C++ dynamic ndarray library, with Python exposure", "fork": true, "url": "https://api.github.com/repos/skrah/libdynd", "forks_url": "https://api.github.com/repos/skrah/libdynd/forks", "keys_url": "https://api.github.com/repos/skrah/libdynd/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/skrah/libdynd/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/skrah/libdynd/teams", "hooks_url": "https://api.github.com/repos/skrah/libdynd/hooks", "issue_events_url": "https://api.github.com/repos/skrah/libdynd/issues/events{/number}", "events_url": "https://api.github.com/repos/skrah/libdynd/events", "assignees_url": "https://api.github.com/repos/skrah/libdynd/assignees{/user}", "branches_url": "https://api.github.com/repos/skrah/libdynd/branches{/branch}", "tags_url": "https://api.github.com/repos/skrah/libdynd/tags", "blobs_url": "https://api.github.com/repos/skrah/libdynd/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/skrah/libdynd/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/skrah/libdynd/git/refs{/sha}", "trees_url": "https://api.github.com/repos/skrah/libdynd/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/skrah/libdynd/statuses/{sha}", "languages_url": "https://api.github.com/repos/skrah/libdynd/languages", "stargazers_url": "https://api.github.com/repos/skrah/libdynd/stargazers", "contributors_url": "https://api.github.com/repos/skrah/libdynd/contributors", "subscribers_url": "https://api.github.com/repos/skrah/libdynd/subscribers", "subscription_url": "https://api.github.com/repos/skrah/libdynd/subscription", "commits_url": "https://api.github.com/repos/skrah/libdynd/commits{/sha}", "git_commits_url": "https://api.github.com/repos/skrah/libdynd/git/commits{/sha}", "comments_url": "https://api.github.com/repos/skrah/libdynd/comments{/number}", "issue_comment_url": "https://api.github.com/repos/skrah/libdynd/issues/comments{/number}", "contents_url": "https://api.github.com/repos/skrah/libdynd/contents/{+path}", "compare_url": "https://api.github.com/repos/skrah/libdynd/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/skrah/libdynd/merges", "archive_url": "https://api.github.com/repos/skrah/libdynd/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/skrah/libdynd/downloads", "issues_url": "https://api.github.com/repos/skrah/libdynd/issues{/number}", "pulls_url": "https://api.github.com/repos/skrah/libdynd/pulls{/number}", "milestones_url": "https://api.github.com/repos/skrah/libdynd/milestones{/number}", "notifications_url": "https://api.github.com/repos/skrah/libdynd/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/skrah/libdynd/labels{/name}", "releases_url": "https://api.github.com/repos/skrah/libdynd/releases{/id}", "deployments_url": "https://api.github.com/repos/skrah/libdynd/deployments", "created_at": "2016-02-18T10:12:01Z", "updated_at": "2016-02-18T10:12:03Z", "pushed_at": "2016-06-02T14:40:34Z", "git_url": "git://github.com/skrah/libdynd.git", "ssh_url": "git@github.com:skrah/libdynd.git", "clone_url": "https://github.com/skrah/libdynd.git", "svn_url": "https://github.com/skrah/libdynd", "homepage": "http://libdynd.org", "size": 30427, "stargazers_count": 0, "watchers_count": 0, "language": "C++", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "open_issues_count": 0, "license": {"key": "other", "name": "Other", "spdx_id": null, "url": null}, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "libdynd:master", "ref": "master", "sha": "e5c47a63e0ed02398de013d82c818ed86d48531f", "user": {"login": "libdynd", "id": 10065955, "avatar_url": "https://avatars1.githubusercontent.com/u/10065955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/libdynd", "html_url": "https://github.com/libdynd", "followers_url": "https://api.github.com/users/libdynd/followers", "following_url": "https://api.github.com/users/libdynd/following{/other_user}", "gists_url": "https://api.github.com/users/libdynd/gists{/gist_id}", "starred_url": "https://api.github.com/users/libdynd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/libdynd/subscriptions", "organizations_url": "https://api.github.com/users/libdynd/orgs", "repos_url": "https://api.github.com/users/libdynd/repos", "events_url": "https://api.github.com/users/libdynd/events{/privacy}", "received_events_url": "https://api.github.com/users/libdynd/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 4665479, "name": "libdynd", "full_name": "libdynd/libdynd", "owner": {"login": "libdynd", "id": 10065955, "avatar_url": "https://avatars1.githubusercontent.com/u/10065955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/libdynd", "html_url": "https://github.com/libdynd", "followers_url": "https://api.github.com/users/libdynd/followers", "following_url": "https://api.github.com/users/libdynd/following{/other_user}", "gists_url": "https://api.github.com/users/libdynd/gists{/gist_id}", "starred_url": "https://api.github.com/users/libdynd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/libdynd/subscriptions", "organizations_url": "https://api.github.com/users/libdynd/orgs", "repos_url": "https://api.github.com/users/libdynd/repos", "events_url": "https://api.github.com/users/libdynd/events{/privacy}", "received_events_url": "https://api.github.com/users/libdynd/received_events", "type": "Organization", "site_admin": false}, "private": false, "html_url": "https://github.com/libdynd/libdynd", "description": "C++ dynamic ndarray library, with Python exposure", "fork": false, "url": "https://api.github.com/repos/libdynd/libdynd", "forks_url": "https://api.github.com/repos/libdynd/libdynd/forks", "keys_url": "https://api.github.com/repos/libdynd/libdynd/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/libdynd/libdynd/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/libdynd/libdynd/teams", "hooks_url": "https://api.github.com/repos/libdynd/libdynd/hooks", "issue_events_url": "https://api.github.com/repos/libdynd/libdynd/issues/events{/number}", "events_url": "https://api.github.com/repos/libdynd/libdynd/events", "assignees_url": "https://api.github.com/repos/libdynd/libdynd/assignees{/user}", "branches_url": "https://api.github.com/repos/libdynd/libdynd/branches{/branch}", "tags_url": "https://api.github.com/repos/libdynd/libdynd/tags", "blobs_url": "https://api.github.com/repos/libdynd/libdynd/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/libdynd/libdynd/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/libdynd/libdynd/git/refs{/sha}", "trees_url": "https://api.github.com/repos/libdynd/libdynd/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/libdynd/libdynd/statuses/{sha}", "languages_url": "https://api.github.com/repos/libdynd/libdynd/languages", "stargazers_url": "https://api.github.com/repos/libdynd/libdynd/stargazers", "contributors_url": "https://api.github.com/repos/libdynd/libdynd/contributors", "subscribers_url": "https://api.github.com/repos/libdynd/libdynd/subscribers", "subscription_url": "https://api.github.com/repos/libdynd/libdynd/subscription", "commits_url": "https://api.github.com/repos/libdynd/libdynd/commits{/sha}", "git_commits_url": "https://api.github.com/repos/libdynd/libdynd/git/commits{/sha}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/comments{/number}", "issue_comment_url": "https://api.github.com/repos/libdynd/libdynd/issues/comments{/number}", "contents_url": "https://api.github.com/repos/libdynd/libdynd/contents/{+path}", "compare_url": "https://api.github.com/repos/libdynd/libdynd/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/libdynd/libdynd/merges", "archive_url": "https://api.github.com/repos/libdynd/libdynd/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/libdynd/libdynd/downloads", "issues_url": "https://api.github.com/repos/libdynd/libdynd/issues{/number}", "pulls_url": "https://api.github.com/repos/libdynd/libdynd/pulls{/number}", "milestones_url": "https://api.github.com/repos/libdynd/libdynd/milestones{/number}", "notifications_url": "https://api.github.com/repos/libdynd/libdynd/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/libdynd/libdynd/labels{/name}", "releases_url": "https://api.github.com/repos/libdynd/libdynd/releases{/id}", "deployments_url": "https://api.github.com/repos/libdynd/libdynd/deployments", "created_at": "2012-06-14T16:14:46Z", "updated_at": "2018-01-07T16:36:46Z", "pushed_at": "2017-12-23T22:04:17Z", "git_url": "git://github.com/libdynd/libdynd.git", "ssh_url": "git@github.com:libdynd/libdynd.git", "clone_url": "https://github.com/libdynd/libdynd.git", "svn_url": "https://github.com/libdynd/libdynd", "homepage": "http://libdynd.org", "size": 31016, "stargazers_count": 228, "watchers_count": 228, "language": "C++", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 48, "mirror_url": null, "archived": false, "open_issues_count": 76, "license": {"key": "other", "name": "Other", "spdx_id": null, "url": null}, "forks": 48, "open_issues": 76, "watchers": 228, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/1265"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/1265"}, "issue": {"href": "https://api.github.com/repos/libdynd/libdynd/issues/1265"}, "comments": {"href": "https://api.github.com/repos/libdynd/libdynd/issues/1265/comments"}, "review_comments": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/1265/comments"}, "review_comment": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/1265/commits"}, "statuses": {"href": "https://api.github.com/repos/libdynd/libdynd/statuses/deaa9a8327634d958b82f9ebe39e971162d1c6c0"}}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/1194", "id": 69703804, "html_url": "https://github.com/libdynd/libdynd/pull/1194", "diff_url": "https://github.com/libdynd/libdynd/pull/1194.diff", "patch_url": "https://github.com/libdynd/libdynd/pull/1194.patch", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/1194", "number": 1194, "state": "open", "locked": false, "title": "Simplify compile-time if", "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "body": "Simplify make_all_if by using std::tuple and generic lambdas rather than a\nproxy template to perform the compile-time if statement.\n\nCurrently doesn't work with gcc or clang. The errors thrown are completely different in each case. I'm not sure if it's bugs in the compilers or an issue with my implementation. This approach works across all compilers in simpler cases. I'm putting this here for the next time we end up revisiting our metaprogramming code. If nothing else, it shows a useful technique.\n\nConceptually, this works because generic lambdas are represented as instances of anonymous classes with templated call operators. This means that the code inside each lambda should only be instantiated when the given lambda is called with concrete types. A compile-time if statement can be performed by writing the different generic lambdas needed, putting them in a std::tuple, and then using std::get to get the appropriate lambda to call. I haven't verified that this works with lambdas that capture things from the surrounding scope, but that's not a huge deal since none of the lambdas involved actually need to be called outside their surrounding scope, so any needed contextual information can be passed in the function parameters to the lambdas.\n", "created_at": "2016-05-11T16:39:10Z", "updated_at": "2016-05-11T16:39:10Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "a4559253f538faec6b5b2deaaf944221481902de", "assignee": null, "assignees": [], "requested_reviewers": [], "milestone": null, "commits_url": "https://api.github.com/repos/libdynd/libdynd/pulls/1194/commits", "review_comments_url": "https://api.github.com/repos/libdynd/libdynd/pulls/1194/comments", "review_comment_url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/1194/comments", "statuses_url": "https://api.github.com/repos/libdynd/libdynd/statuses/ec699d0951c9eb627b8b79200e9d5652d4344f3f", "head": {"label": "insertinterestingnamehere:static_if", "ref": "static_if", "sha": "ec699d0951c9eb627b8b79200e9d5652d4344f3f", "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "repo": {"id": 22548868, "name": "libdynd", "full_name": "insertinterestingnamehere/libdynd", "owner": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "private": false, "html_url": "https://github.com/insertinterestingnamehere/libdynd", "description": "C++ dynamic ndarray library, with Python exposure", "fork": true, "url": "https://api.github.com/repos/insertinterestingnamehere/libdynd", "forks_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/forks", "keys_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/teams", "hooks_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/hooks", "issue_events_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/issues/events{/number}", "events_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/events", "assignees_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/assignees{/user}", "branches_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/branches{/branch}", "tags_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/tags", "blobs_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/git/refs{/sha}", "trees_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/statuses/{sha}", "languages_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/languages", "stargazers_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/stargazers", "contributors_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/contributors", "subscribers_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/subscribers", "subscription_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/subscription", "commits_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/commits{/sha}", "git_commits_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/git/commits{/sha}", "comments_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/comments{/number}", "issue_comment_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/issues/comments{/number}", "contents_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/contents/{+path}", "compare_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/merges", "archive_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/downloads", "issues_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/issues{/number}", "pulls_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/pulls{/number}", "milestones_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/milestones{/number}", "notifications_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/labels{/name}", "releases_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/releases{/id}", "deployments_url": "https://api.github.com/repos/insertinterestingnamehere/libdynd/deployments", "created_at": "2014-08-02T15:34:03Z", "updated_at": "2016-01-13T05:06:49Z", "pushed_at": "2017-12-23T20:55:20Z", "git_url": "git://github.com/insertinterestingnamehere/libdynd.git", "ssh_url": "git@github.com:insertinterestingnamehere/libdynd.git", "clone_url": "https://github.com/insertinterestingnamehere/libdynd.git", "svn_url": "https://github.com/insertinterestingnamehere/libdynd", "homepage": null, "size": 31077, "stargazers_count": 0, "watchers_count": 0, "language": "C++", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "open_issues_count": 0, "license": {"key": "other", "name": "Other", "spdx_id": null, "url": null}, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "libdynd:master", "ref": "master", "sha": "6b7a20776f371da1dfcf6174135a8fc28492ce38", "user": {"login": "libdynd", "id": 10065955, "avatar_url": "https://avatars1.githubusercontent.com/u/10065955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/libdynd", "html_url": "https://github.com/libdynd", "followers_url": "https://api.github.com/users/libdynd/followers", "following_url": "https://api.github.com/users/libdynd/following{/other_user}", "gists_url": "https://api.github.com/users/libdynd/gists{/gist_id}", "starred_url": "https://api.github.com/users/libdynd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/libdynd/subscriptions", "organizations_url": "https://api.github.com/users/libdynd/orgs", "repos_url": "https://api.github.com/users/libdynd/repos", "events_url": "https://api.github.com/users/libdynd/events{/privacy}", "received_events_url": "https://api.github.com/users/libdynd/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 4665479, "name": "libdynd", "full_name": "libdynd/libdynd", "owner": {"login": "libdynd", "id": 10065955, "avatar_url": "https://avatars1.githubusercontent.com/u/10065955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/libdynd", "html_url": "https://github.com/libdynd", "followers_url": "https://api.github.com/users/libdynd/followers", "following_url": "https://api.github.com/users/libdynd/following{/other_user}", "gists_url": "https://api.github.com/users/libdynd/gists{/gist_id}", "starred_url": "https://api.github.com/users/libdynd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/libdynd/subscriptions", "organizations_url": "https://api.github.com/users/libdynd/orgs", "repos_url": "https://api.github.com/users/libdynd/repos", "events_url": "https://api.github.com/users/libdynd/events{/privacy}", "received_events_url": "https://api.github.com/users/libdynd/received_events", "type": "Organization", "site_admin": false}, "private": false, "html_url": "https://github.com/libdynd/libdynd", "description": "C++ dynamic ndarray library, with Python exposure", "fork": false, "url": "https://api.github.com/repos/libdynd/libdynd", "forks_url": "https://api.github.com/repos/libdynd/libdynd/forks", "keys_url": "https://api.github.com/repos/libdynd/libdynd/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/libdynd/libdynd/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/libdynd/libdynd/teams", "hooks_url": "https://api.github.com/repos/libdynd/libdynd/hooks", "issue_events_url": "https://api.github.com/repos/libdynd/libdynd/issues/events{/number}", "events_url": "https://api.github.com/repos/libdynd/libdynd/events", "assignees_url": "https://api.github.com/repos/libdynd/libdynd/assignees{/user}", "branches_url": "https://api.github.com/repos/libdynd/libdynd/branches{/branch}", "tags_url": "https://api.github.com/repos/libdynd/libdynd/tags", "blobs_url": "https://api.github.com/repos/libdynd/libdynd/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/libdynd/libdynd/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/libdynd/libdynd/git/refs{/sha}", "trees_url": "https://api.github.com/repos/libdynd/libdynd/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/libdynd/libdynd/statuses/{sha}", "languages_url": "https://api.github.com/repos/libdynd/libdynd/languages", "stargazers_url": "https://api.github.com/repos/libdynd/libdynd/stargazers", "contributors_url": "https://api.github.com/repos/libdynd/libdynd/contributors", "subscribers_url": "https://api.github.com/repos/libdynd/libdynd/subscribers", "subscription_url": "https://api.github.com/repos/libdynd/libdynd/subscription", "commits_url": "https://api.github.com/repos/libdynd/libdynd/commits{/sha}", "git_commits_url": "https://api.github.com/repos/libdynd/libdynd/git/commits{/sha}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/comments{/number}", "issue_comment_url": "https://api.github.com/repos/libdynd/libdynd/issues/comments{/number}", "contents_url": "https://api.github.com/repos/libdynd/libdynd/contents/{+path}", "compare_url": "https://api.github.com/repos/libdynd/libdynd/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/libdynd/libdynd/merges", "archive_url": "https://api.github.com/repos/libdynd/libdynd/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/libdynd/libdynd/downloads", "issues_url": "https://api.github.com/repos/libdynd/libdynd/issues{/number}", "pulls_url": "https://api.github.com/repos/libdynd/libdynd/pulls{/number}", "milestones_url": "https://api.github.com/repos/libdynd/libdynd/milestones{/number}", "notifications_url": "https://api.github.com/repos/libdynd/libdynd/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/libdynd/libdynd/labels{/name}", "releases_url": "https://api.github.com/repos/libdynd/libdynd/releases{/id}", "deployments_url": "https://api.github.com/repos/libdynd/libdynd/deployments", "created_at": "2012-06-14T16:14:46Z", "updated_at": "2018-01-07T16:36:46Z", "pushed_at": "2017-12-23T22:04:17Z", "git_url": "git://github.com/libdynd/libdynd.git", "ssh_url": "git@github.com:libdynd/libdynd.git", "clone_url": "https://github.com/libdynd/libdynd.git", "svn_url": "https://github.com/libdynd/libdynd", "homepage": "http://libdynd.org", "size": 31016, "stargazers_count": 228, "watchers_count": 228, "language": "C++", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 48, "mirror_url": null, "archived": false, "open_issues_count": 76, "license": {"key": "other", "name": "Other", "spdx_id": null, "url": null}, "forks": 48, "open_issues": 76, "watchers": 228, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/1194"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/1194"}, "issue": {"href": "https://api.github.com/repos/libdynd/libdynd/issues/1194"}, "comments": {"href": "https://api.github.com/repos/libdynd/libdynd/issues/1194/comments"}, "review_comments": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/1194/comments"}, "review_comment": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/1194/commits"}, "statuses": {"href": "https://api.github.com/repos/libdynd/libdynd/statuses/ec699d0951c9eb627b8b79200e9d5652d4344f3f"}}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/1153", "id": 66776395, "html_url": "https://github.com/libdynd/libdynd/pull/1153", "diff_url": "https://github.com/libdynd/libdynd/pull/1153.diff", "patch_url": "https://github.com/libdynd/libdynd/pull/1153.patch", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/1153", "number": 1153, "state": "open", "locked": false, "title": "Added a type ID for escape option", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "", "created_at": "2016-04-17T18:29:12Z", "updated_at": "2016-04-17T19:30:34Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "3959d3239782fa0aa6442022a1f165fce90a3391", "assignee": null, "assignees": [], "requested_reviewers": [], "milestone": null, "commits_url": "https://api.github.com/repos/libdynd/libdynd/pulls/1153/commits", "review_comments_url": "https://api.github.com/repos/libdynd/libdynd/pulls/1153/comments", "review_comment_url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/1153/comments", "statuses_url": "https://api.github.com/repos/libdynd/libdynd/statuses/c49a7a8f4b91cd87c068e8d070592e0fa4d05a08", "head": {"label": "izaid:esc", "ref": "esc", "sha": "c49a7a8f4b91cd87c068e8d070592e0fa4d05a08", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "repo": {"id": 16832741, "name": "libdynd", "full_name": "izaid/libdynd", "owner": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "private": false, "html_url": "https://github.com/izaid/libdynd", "description": "C++ dynamic ndarray library, with Python exposure", "fork": true, "url": "https://api.github.com/repos/izaid/libdynd", "forks_url": "https://api.github.com/repos/izaid/libdynd/forks", "keys_url": "https://api.github.com/repos/izaid/libdynd/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/izaid/libdynd/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/izaid/libdynd/teams", "hooks_url": "https://api.github.com/repos/izaid/libdynd/hooks", "issue_events_url": "https://api.github.com/repos/izaid/libdynd/issues/events{/number}", "events_url": "https://api.github.com/repos/izaid/libdynd/events", "assignees_url": "https://api.github.com/repos/izaid/libdynd/assignees{/user}", "branches_url": "https://api.github.com/repos/izaid/libdynd/branches{/branch}", "tags_url": "https://api.github.com/repos/izaid/libdynd/tags", "blobs_url": "https://api.github.com/repos/izaid/libdynd/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/izaid/libdynd/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/izaid/libdynd/git/refs{/sha}", "trees_url": "https://api.github.com/repos/izaid/libdynd/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/izaid/libdynd/statuses/{sha}", "languages_url": "https://api.github.com/repos/izaid/libdynd/languages", "stargazers_url": "https://api.github.com/repos/izaid/libdynd/stargazers", "contributors_url": "https://api.github.com/repos/izaid/libdynd/contributors", "subscribers_url": "https://api.github.com/repos/izaid/libdynd/subscribers", "subscription_url": "https://api.github.com/repos/izaid/libdynd/subscription", "commits_url": "https://api.github.com/repos/izaid/libdynd/commits{/sha}", "git_commits_url": "https://api.github.com/repos/izaid/libdynd/git/commits{/sha}", "comments_url": "https://api.github.com/repos/izaid/libdynd/comments{/number}", "issue_comment_url": "https://api.github.com/repos/izaid/libdynd/issues/comments{/number}", "contents_url": "https://api.github.com/repos/izaid/libdynd/contents/{+path}", "compare_url": "https://api.github.com/repos/izaid/libdynd/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/izaid/libdynd/merges", "archive_url": "https://api.github.com/repos/izaid/libdynd/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/izaid/libdynd/downloads", "issues_url": "https://api.github.com/repos/izaid/libdynd/issues{/number}", "pulls_url": "https://api.github.com/repos/izaid/libdynd/pulls{/number}", "milestones_url": "https://api.github.com/repos/izaid/libdynd/milestones{/number}", "notifications_url": "https://api.github.com/repos/izaid/libdynd/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/izaid/libdynd/labels{/name}", "releases_url": "https://api.github.com/repos/izaid/libdynd/releases{/id}", "deployments_url": "https://api.github.com/repos/izaid/libdynd/deployments", "created_at": "2014-02-14T09:26:37Z", "updated_at": "2015-04-20T08:51:27Z", "pushed_at": "2016-07-30T15:34:26Z", "git_url": "git://github.com/izaid/libdynd.git", "ssh_url": "git@github.com:izaid/libdynd.git", "clone_url": "https://github.com/izaid/libdynd.git", "svn_url": "https://github.com/izaid/libdynd", "homepage": null, "size": 31650, "stargazers_count": 0, "watchers_count": 0, "language": "C++", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "open_issues_count": 0, "license": {"key": "other", "name": "Other", "spdx_id": null, "url": null}, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "libdynd:master", "ref": "master", "sha": "173dd068fda135f2610c47db87260b7ccbc7fe0b", "user": {"login": "libdynd", "id": 10065955, "avatar_url": "https://avatars1.githubusercontent.com/u/10065955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/libdynd", "html_url": "https://github.com/libdynd", "followers_url": "https://api.github.com/users/libdynd/followers", "following_url": "https://api.github.com/users/libdynd/following{/other_user}", "gists_url": "https://api.github.com/users/libdynd/gists{/gist_id}", "starred_url": "https://api.github.com/users/libdynd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/libdynd/subscriptions", "organizations_url": "https://api.github.com/users/libdynd/orgs", "repos_url": "https://api.github.com/users/libdynd/repos", "events_url": "https://api.github.com/users/libdynd/events{/privacy}", "received_events_url": "https://api.github.com/users/libdynd/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 4665479, "name": "libdynd", "full_name": "libdynd/libdynd", "owner": {"login": "libdynd", "id": 10065955, "avatar_url": "https://avatars1.githubusercontent.com/u/10065955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/libdynd", "html_url": "https://github.com/libdynd", "followers_url": "https://api.github.com/users/libdynd/followers", "following_url": "https://api.github.com/users/libdynd/following{/other_user}", "gists_url": "https://api.github.com/users/libdynd/gists{/gist_id}", "starred_url": "https://api.github.com/users/libdynd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/libdynd/subscriptions", "organizations_url": "https://api.github.com/users/libdynd/orgs", "repos_url": "https://api.github.com/users/libdynd/repos", "events_url": "https://api.github.com/users/libdynd/events{/privacy}", "received_events_url": "https://api.github.com/users/libdynd/received_events", "type": "Organization", "site_admin": false}, "private": false, "html_url": "https://github.com/libdynd/libdynd", "description": "C++ dynamic ndarray library, with Python exposure", "fork": false, "url": "https://api.github.com/repos/libdynd/libdynd", "forks_url": "https://api.github.com/repos/libdynd/libdynd/forks", "keys_url": "https://api.github.com/repos/libdynd/libdynd/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/libdynd/libdynd/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/libdynd/libdynd/teams", "hooks_url": "https://api.github.com/repos/libdynd/libdynd/hooks", "issue_events_url": "https://api.github.com/repos/libdynd/libdynd/issues/events{/number}", "events_url": "https://api.github.com/repos/libdynd/libdynd/events", "assignees_url": "https://api.github.com/repos/libdynd/libdynd/assignees{/user}", "branches_url": "https://api.github.com/repos/libdynd/libdynd/branches{/branch}", "tags_url": "https://api.github.com/repos/libdynd/libdynd/tags", "blobs_url": "https://api.github.com/repos/libdynd/libdynd/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/libdynd/libdynd/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/libdynd/libdynd/git/refs{/sha}", "trees_url": "https://api.github.com/repos/libdynd/libdynd/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/libdynd/libdynd/statuses/{sha}", "languages_url": "https://api.github.com/repos/libdynd/libdynd/languages", "stargazers_url": "https://api.github.com/repos/libdynd/libdynd/stargazers", "contributors_url": "https://api.github.com/repos/libdynd/libdynd/contributors", "subscribers_url": "https://api.github.com/repos/libdynd/libdynd/subscribers", "subscription_url": "https://api.github.com/repos/libdynd/libdynd/subscription", "commits_url": "https://api.github.com/repos/libdynd/libdynd/commits{/sha}", "git_commits_url": "https://api.github.com/repos/libdynd/libdynd/git/commits{/sha}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/comments{/number}", "issue_comment_url": "https://api.github.com/repos/libdynd/libdynd/issues/comments{/number}", "contents_url": "https://api.github.com/repos/libdynd/libdynd/contents/{+path}", "compare_url": "https://api.github.com/repos/libdynd/libdynd/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/libdynd/libdynd/merges", "archive_url": "https://api.github.com/repos/libdynd/libdynd/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/libdynd/libdynd/downloads", "issues_url": "https://api.github.com/repos/libdynd/libdynd/issues{/number}", "pulls_url": "https://api.github.com/repos/libdynd/libdynd/pulls{/number}", "milestones_url": "https://api.github.com/repos/libdynd/libdynd/milestones{/number}", "notifications_url": "https://api.github.com/repos/libdynd/libdynd/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/libdynd/libdynd/labels{/name}", "releases_url": "https://api.github.com/repos/libdynd/libdynd/releases{/id}", "deployments_url": "https://api.github.com/repos/libdynd/libdynd/deployments", "created_at": "2012-06-14T16:14:46Z", "updated_at": "2018-01-07T16:36:46Z", "pushed_at": "2017-12-23T22:04:17Z", "git_url": "git://github.com/libdynd/libdynd.git", "ssh_url": "git@github.com:libdynd/libdynd.git", "clone_url": "https://github.com/libdynd/libdynd.git", "svn_url": "https://github.com/libdynd/libdynd", "homepage": "http://libdynd.org", "size": 31016, "stargazers_count": 228, "watchers_count": 228, "language": "C++", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 48, "mirror_url": null, "archived": false, "open_issues_count": 76, "license": {"key": "other", "name": "Other", "spdx_id": null, "url": null}, "forks": 48, "open_issues": 76, "watchers": 228, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/1153"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/1153"}, "issue": {"href": "https://api.github.com/repos/libdynd/libdynd/issues/1153"}, "comments": {"href": "https://api.github.com/repos/libdynd/libdynd/issues/1153/comments"}, "review_comments": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/1153/comments"}, "review_comment": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/1153/commits"}, "statuses": {"href": "https://api.github.com/repos/libdynd/libdynd/statuses/c49a7a8f4b91cd87c068e8d070592e0fa4d05a08"}}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/1037", "id": 63429994, "html_url": "https://github.com/libdynd/libdynd/pull/1037", "diff_url": "https://github.com/libdynd/libdynd/pull/1037.diff", "patch_url": "https://github.com/libdynd/libdynd/pull/1037.patch", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/1037", "number": 1037, "state": "open", "locked": false, "title": "Added sparsehash as a header-only library", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "", "created_at": "2016-03-18T20:12:52Z", "updated_at": "2016-03-18T21:24:04Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "61b2c46aa9785f4b2af4196b47c65b84b3bab69e", "assignee": null, "assignees": [], "requested_reviewers": [], "milestone": null, "commits_url": "https://api.github.com/repos/libdynd/libdynd/pulls/1037/commits", "review_comments_url": "https://api.github.com/repos/libdynd/libdynd/pulls/1037/comments", "review_comment_url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/1037/comments", "statuses_url": "https://api.github.com/repos/libdynd/libdynd/statuses/9feb9115deb8c342dcf43b88996ed6565c84d89c", "head": {"label": "izaid:google2", "ref": "google2", "sha": "9feb9115deb8c342dcf43b88996ed6565c84d89c", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "repo": {"id": 16832741, "name": "libdynd", "full_name": "izaid/libdynd", "owner": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "private": false, "html_url": "https://github.com/izaid/libdynd", "description": "C++ dynamic ndarray library, with Python exposure", "fork": true, "url": "https://api.github.com/repos/izaid/libdynd", "forks_url": "https://api.github.com/repos/izaid/libdynd/forks", "keys_url": "https://api.github.com/repos/izaid/libdynd/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/izaid/libdynd/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/izaid/libdynd/teams", "hooks_url": "https://api.github.com/repos/izaid/libdynd/hooks", "issue_events_url": "https://api.github.com/repos/izaid/libdynd/issues/events{/number}", "events_url": "https://api.github.com/repos/izaid/libdynd/events", "assignees_url": "https://api.github.com/repos/izaid/libdynd/assignees{/user}", "branches_url": "https://api.github.com/repos/izaid/libdynd/branches{/branch}", "tags_url": "https://api.github.com/repos/izaid/libdynd/tags", "blobs_url": "https://api.github.com/repos/izaid/libdynd/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/izaid/libdynd/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/izaid/libdynd/git/refs{/sha}", "trees_url": "https://api.github.com/repos/izaid/libdynd/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/izaid/libdynd/statuses/{sha}", "languages_url": "https://api.github.com/repos/izaid/libdynd/languages", "stargazers_url": "https://api.github.com/repos/izaid/libdynd/stargazers", "contributors_url": "https://api.github.com/repos/izaid/libdynd/contributors", "subscribers_url": "https://api.github.com/repos/izaid/libdynd/subscribers", "subscription_url": "https://api.github.com/repos/izaid/libdynd/subscription", "commits_url": "https://api.github.com/repos/izaid/libdynd/commits{/sha}", "git_commits_url": "https://api.github.com/repos/izaid/libdynd/git/commits{/sha}", "comments_url": "https://api.github.com/repos/izaid/libdynd/comments{/number}", "issue_comment_url": "https://api.github.com/repos/izaid/libdynd/issues/comments{/number}", "contents_url": "https://api.github.com/repos/izaid/libdynd/contents/{+path}", "compare_url": "https://api.github.com/repos/izaid/libdynd/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/izaid/libdynd/merges", "archive_url": "https://api.github.com/repos/izaid/libdynd/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/izaid/libdynd/downloads", "issues_url": "https://api.github.com/repos/izaid/libdynd/issues{/number}", "pulls_url": "https://api.github.com/repos/izaid/libdynd/pulls{/number}", "milestones_url": "https://api.github.com/repos/izaid/libdynd/milestones{/number}", "notifications_url": "https://api.github.com/repos/izaid/libdynd/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/izaid/libdynd/labels{/name}", "releases_url": "https://api.github.com/repos/izaid/libdynd/releases{/id}", "deployments_url": "https://api.github.com/repos/izaid/libdynd/deployments", "created_at": "2014-02-14T09:26:37Z", "updated_at": "2015-04-20T08:51:27Z", "pushed_at": "2016-07-30T15:34:26Z", "git_url": "git://github.com/izaid/libdynd.git", "ssh_url": "git@github.com:izaid/libdynd.git", "clone_url": "https://github.com/izaid/libdynd.git", "svn_url": "https://github.com/izaid/libdynd", "homepage": null, "size": 31650, "stargazers_count": 0, "watchers_count": 0, "language": "C++", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "open_issues_count": 0, "license": {"key": "other", "name": "Other", "spdx_id": null, "url": null}, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "libdynd:master", "ref": "master", "sha": "a9ca66183e124bdbb48a0b9b88e36dc6fdd7dbc2", "user": {"login": "libdynd", "id": 10065955, "avatar_url": "https://avatars1.githubusercontent.com/u/10065955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/libdynd", "html_url": "https://github.com/libdynd", "followers_url": "https://api.github.com/users/libdynd/followers", "following_url": "https://api.github.com/users/libdynd/following{/other_user}", "gists_url": "https://api.github.com/users/libdynd/gists{/gist_id}", "starred_url": "https://api.github.com/users/libdynd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/libdynd/subscriptions", "organizations_url": "https://api.github.com/users/libdynd/orgs", "repos_url": "https://api.github.com/users/libdynd/repos", "events_url": "https://api.github.com/users/libdynd/events{/privacy}", "received_events_url": "https://api.github.com/users/libdynd/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 4665479, "name": "libdynd", "full_name": "libdynd/libdynd", "owner": {"login": "libdynd", "id": 10065955, "avatar_url": "https://avatars1.githubusercontent.com/u/10065955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/libdynd", "html_url": "https://github.com/libdynd", "followers_url": "https://api.github.com/users/libdynd/followers", "following_url": "https://api.github.com/users/libdynd/following{/other_user}", "gists_url": "https://api.github.com/users/libdynd/gists{/gist_id}", "starred_url": "https://api.github.com/users/libdynd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/libdynd/subscriptions", "organizations_url": "https://api.github.com/users/libdynd/orgs", "repos_url": "https://api.github.com/users/libdynd/repos", "events_url": "https://api.github.com/users/libdynd/events{/privacy}", "received_events_url": "https://api.github.com/users/libdynd/received_events", "type": "Organization", "site_admin": false}, "private": false, "html_url": "https://github.com/libdynd/libdynd", "description": "C++ dynamic ndarray library, with Python exposure", "fork": false, "url": "https://api.github.com/repos/libdynd/libdynd", "forks_url": "https://api.github.com/repos/libdynd/libdynd/forks", "keys_url": "https://api.github.com/repos/libdynd/libdynd/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/libdynd/libdynd/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/libdynd/libdynd/teams", "hooks_url": "https://api.github.com/repos/libdynd/libdynd/hooks", "issue_events_url": "https://api.github.com/repos/libdynd/libdynd/issues/events{/number}", "events_url": "https://api.github.com/repos/libdynd/libdynd/events", "assignees_url": "https://api.github.com/repos/libdynd/libdynd/assignees{/user}", "branches_url": "https://api.github.com/repos/libdynd/libdynd/branches{/branch}", "tags_url": "https://api.github.com/repos/libdynd/libdynd/tags", "blobs_url": "https://api.github.com/repos/libdynd/libdynd/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/libdynd/libdynd/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/libdynd/libdynd/git/refs{/sha}", "trees_url": "https://api.github.com/repos/libdynd/libdynd/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/libdynd/libdynd/statuses/{sha}", "languages_url": "https://api.github.com/repos/libdynd/libdynd/languages", "stargazers_url": "https://api.github.com/repos/libdynd/libdynd/stargazers", "contributors_url": "https://api.github.com/repos/libdynd/libdynd/contributors", "subscribers_url": "https://api.github.com/repos/libdynd/libdynd/subscribers", "subscription_url": "https://api.github.com/repos/libdynd/libdynd/subscription", "commits_url": "https://api.github.com/repos/libdynd/libdynd/commits{/sha}", "git_commits_url": "https://api.github.com/repos/libdynd/libdynd/git/commits{/sha}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/comments{/number}", "issue_comment_url": "https://api.github.com/repos/libdynd/libdynd/issues/comments{/number}", "contents_url": "https://api.github.com/repos/libdynd/libdynd/contents/{+path}", "compare_url": "https://api.github.com/repos/libdynd/libdynd/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/libdynd/libdynd/merges", "archive_url": "https://api.github.com/repos/libdynd/libdynd/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/libdynd/libdynd/downloads", "issues_url": "https://api.github.com/repos/libdynd/libdynd/issues{/number}", "pulls_url": "https://api.github.com/repos/libdynd/libdynd/pulls{/number}", "milestones_url": "https://api.github.com/repos/libdynd/libdynd/milestones{/number}", "notifications_url": "https://api.github.com/repos/libdynd/libdynd/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/libdynd/libdynd/labels{/name}", "releases_url": "https://api.github.com/repos/libdynd/libdynd/releases{/id}", "deployments_url": "https://api.github.com/repos/libdynd/libdynd/deployments", "created_at": "2012-06-14T16:14:46Z", "updated_at": "2018-01-07T16:36:46Z", "pushed_at": "2017-12-23T22:04:17Z", "git_url": "git://github.com/libdynd/libdynd.git", "ssh_url": "git@github.com:libdynd/libdynd.git", "clone_url": "https://github.com/libdynd/libdynd.git", "svn_url": "https://github.com/libdynd/libdynd", "homepage": "http://libdynd.org", "size": 31016, "stargazers_count": 228, "watchers_count": 228, "language": "C++", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 48, "mirror_url": null, "archived": false, "open_issues_count": 76, "license": {"key": "other", "name": "Other", "spdx_id": null, "url": null}, "forks": 48, "open_issues": 76, "watchers": 228, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/1037"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/1037"}, "issue": {"href": "https://api.github.com/repos/libdynd/libdynd/issues/1037"}, "comments": {"href": "https://api.github.com/repos/libdynd/libdynd/issues/1037/comments"}, "review_comments": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/1037/comments"}, "review_comment": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/1037/commits"}, "statuses": {"href": "https://api.github.com/repos/libdynd/libdynd/statuses/9feb9115deb8c342dcf43b88996ed6565c84d89c"}}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/1036", "id": 63402661, "html_url": "https://github.com/libdynd/libdynd/pull/1036", "diff_url": "https://github.com/libdynd/libdynd/pull/1036.diff", "patch_url": "https://github.com/libdynd/libdynd/pull/1036.patch", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/1036", "number": 1036, "state": "open", "locked": false, "title": "[WIP] Adding Google sparsehash as a thirdparty library", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "", "created_at": "2016-03-18T16:42:06Z", "updated_at": "2016-03-18T19:34:02Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "184f005fc5cb565112133c9e95501fd8a6053b90", "assignee": null, "assignees": [], "requested_reviewers": [], "milestone": null, "commits_url": "https://api.github.com/repos/libdynd/libdynd/pulls/1036/commits", "review_comments_url": "https://api.github.com/repos/libdynd/libdynd/pulls/1036/comments", "review_comment_url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/1036/comments", "statuses_url": "https://api.github.com/repos/libdynd/libdynd/statuses/91d70c4fbb51f45ba9a1d28af0cb5f287aff50fd", "head": {"label": "izaid:google", "ref": "google", "sha": "91d70c4fbb51f45ba9a1d28af0cb5f287aff50fd", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "repo": {"id": 16832741, "name": "libdynd", "full_name": "izaid/libdynd", "owner": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "private": false, "html_url": "https://github.com/izaid/libdynd", "description": "C++ dynamic ndarray library, with Python exposure", "fork": true, "url": "https://api.github.com/repos/izaid/libdynd", "forks_url": "https://api.github.com/repos/izaid/libdynd/forks", "keys_url": "https://api.github.com/repos/izaid/libdynd/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/izaid/libdynd/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/izaid/libdynd/teams", "hooks_url": "https://api.github.com/repos/izaid/libdynd/hooks", "issue_events_url": "https://api.github.com/repos/izaid/libdynd/issues/events{/number}", "events_url": "https://api.github.com/repos/izaid/libdynd/events", "assignees_url": "https://api.github.com/repos/izaid/libdynd/assignees{/user}", "branches_url": "https://api.github.com/repos/izaid/libdynd/branches{/branch}", "tags_url": "https://api.github.com/repos/izaid/libdynd/tags", "blobs_url": "https://api.github.com/repos/izaid/libdynd/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/izaid/libdynd/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/izaid/libdynd/git/refs{/sha}", "trees_url": "https://api.github.com/repos/izaid/libdynd/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/izaid/libdynd/statuses/{sha}", "languages_url": "https://api.github.com/repos/izaid/libdynd/languages", "stargazers_url": "https://api.github.com/repos/izaid/libdynd/stargazers", "contributors_url": "https://api.github.com/repos/izaid/libdynd/contributors", "subscribers_url": "https://api.github.com/repos/izaid/libdynd/subscribers", "subscription_url": "https://api.github.com/repos/izaid/libdynd/subscription", "commits_url": "https://api.github.com/repos/izaid/libdynd/commits{/sha}", "git_commits_url": "https://api.github.com/repos/izaid/libdynd/git/commits{/sha}", "comments_url": "https://api.github.com/repos/izaid/libdynd/comments{/number}", "issue_comment_url": "https://api.github.com/repos/izaid/libdynd/issues/comments{/number}", "contents_url": "https://api.github.com/repos/izaid/libdynd/contents/{+path}", "compare_url": "https://api.github.com/repos/izaid/libdynd/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/izaid/libdynd/merges", "archive_url": "https://api.github.com/repos/izaid/libdynd/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/izaid/libdynd/downloads", "issues_url": "https://api.github.com/repos/izaid/libdynd/issues{/number}", "pulls_url": "https://api.github.com/repos/izaid/libdynd/pulls{/number}", "milestones_url": "https://api.github.com/repos/izaid/libdynd/milestones{/number}", "notifications_url": "https://api.github.com/repos/izaid/libdynd/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/izaid/libdynd/labels{/name}", "releases_url": "https://api.github.com/repos/izaid/libdynd/releases{/id}", "deployments_url": "https://api.github.com/repos/izaid/libdynd/deployments", "created_at": "2014-02-14T09:26:37Z", "updated_at": "2015-04-20T08:51:27Z", "pushed_at": "2016-07-30T15:34:26Z", "git_url": "git://github.com/izaid/libdynd.git", "ssh_url": "git@github.com:izaid/libdynd.git", "clone_url": "https://github.com/izaid/libdynd.git", "svn_url": "https://github.com/izaid/libdynd", "homepage": null, "size": 31650, "stargazers_count": 0, "watchers_count": 0, "language": "C++", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "open_issues_count": 0, "license": {"key": "other", "name": "Other", "spdx_id": null, "url": null}, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "libdynd:master", "ref": "master", "sha": "a9ca66183e124bdbb48a0b9b88e36dc6fdd7dbc2", "user": {"login": "libdynd", "id": 10065955, "avatar_url": "https://avatars1.githubusercontent.com/u/10065955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/libdynd", "html_url": "https://github.com/libdynd", "followers_url": "https://api.github.com/users/libdynd/followers", "following_url": "https://api.github.com/users/libdynd/following{/other_user}", "gists_url": "https://api.github.com/users/libdynd/gists{/gist_id}", "starred_url": "https://api.github.com/users/libdynd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/libdynd/subscriptions", "organizations_url": "https://api.github.com/users/libdynd/orgs", "repos_url": "https://api.github.com/users/libdynd/repos", "events_url": "https://api.github.com/users/libdynd/events{/privacy}", "received_events_url": "https://api.github.com/users/libdynd/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 4665479, "name": "libdynd", "full_name": "libdynd/libdynd", "owner": {"login": "libdynd", "id": 10065955, "avatar_url": "https://avatars1.githubusercontent.com/u/10065955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/libdynd", "html_url": "https://github.com/libdynd", "followers_url": "https://api.github.com/users/libdynd/followers", "following_url": "https://api.github.com/users/libdynd/following{/other_user}", "gists_url": "https://api.github.com/users/libdynd/gists{/gist_id}", "starred_url": "https://api.github.com/users/libdynd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/libdynd/subscriptions", "organizations_url": "https://api.github.com/users/libdynd/orgs", "repos_url": "https://api.github.com/users/libdynd/repos", "events_url": "https://api.github.com/users/libdynd/events{/privacy}", "received_events_url": "https://api.github.com/users/libdynd/received_events", "type": "Organization", "site_admin": false}, "private": false, "html_url": "https://github.com/libdynd/libdynd", "description": "C++ dynamic ndarray library, with Python exposure", "fork": false, "url": "https://api.github.com/repos/libdynd/libdynd", "forks_url": "https://api.github.com/repos/libdynd/libdynd/forks", "keys_url": "https://api.github.com/repos/libdynd/libdynd/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/libdynd/libdynd/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/libdynd/libdynd/teams", "hooks_url": "https://api.github.com/repos/libdynd/libdynd/hooks", "issue_events_url": "https://api.github.com/repos/libdynd/libdynd/issues/events{/number}", "events_url": "https://api.github.com/repos/libdynd/libdynd/events", "assignees_url": "https://api.github.com/repos/libdynd/libdynd/assignees{/user}", "branches_url": "https://api.github.com/repos/libdynd/libdynd/branches{/branch}", "tags_url": "https://api.github.com/repos/libdynd/libdynd/tags", "blobs_url": "https://api.github.com/repos/libdynd/libdynd/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/libdynd/libdynd/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/libdynd/libdynd/git/refs{/sha}", "trees_url": "https://api.github.com/repos/libdynd/libdynd/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/libdynd/libdynd/statuses/{sha}", "languages_url": "https://api.github.com/repos/libdynd/libdynd/languages", "stargazers_url": "https://api.github.com/repos/libdynd/libdynd/stargazers", "contributors_url": "https://api.github.com/repos/libdynd/libdynd/contributors", "subscribers_url": "https://api.github.com/repos/libdynd/libdynd/subscribers", "subscription_url": "https://api.github.com/repos/libdynd/libdynd/subscription", "commits_url": "https://api.github.com/repos/libdynd/libdynd/commits{/sha}", "git_commits_url": "https://api.github.com/repos/libdynd/libdynd/git/commits{/sha}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/comments{/number}", "issue_comment_url": "https://api.github.com/repos/libdynd/libdynd/issues/comments{/number}", "contents_url": "https://api.github.com/repos/libdynd/libdynd/contents/{+path}", "compare_url": "https://api.github.com/repos/libdynd/libdynd/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/libdynd/libdynd/merges", "archive_url": "https://api.github.com/repos/libdynd/libdynd/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/libdynd/libdynd/downloads", "issues_url": "https://api.github.com/repos/libdynd/libdynd/issues{/number}", "pulls_url": "https://api.github.com/repos/libdynd/libdynd/pulls{/number}", "milestones_url": "https://api.github.com/repos/libdynd/libdynd/milestones{/number}", "notifications_url": "https://api.github.com/repos/libdynd/libdynd/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/libdynd/libdynd/labels{/name}", "releases_url": "https://api.github.com/repos/libdynd/libdynd/releases{/id}", "deployments_url": "https://api.github.com/repos/libdynd/libdynd/deployments", "created_at": "2012-06-14T16:14:46Z", "updated_at": "2018-01-07T16:36:46Z", "pushed_at": "2017-12-23T22:04:17Z", "git_url": "git://github.com/libdynd/libdynd.git", "ssh_url": "git@github.com:libdynd/libdynd.git", "clone_url": "https://github.com/libdynd/libdynd.git", "svn_url": "https://github.com/libdynd/libdynd", "homepage": "http://libdynd.org", "size": 31016, "stargazers_count": 228, "watchers_count": 228, "language": "C++", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 48, "mirror_url": null, "archived": false, "open_issues_count": 76, "license": {"key": "other", "name": "Other", "spdx_id": null, "url": null}, "forks": 48, "open_issues": 76, "watchers": 228, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/1036"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/1036"}, "issue": {"href": "https://api.github.com/repos/libdynd/libdynd/issues/1036"}, "comments": {"href": "https://api.github.com/repos/libdynd/libdynd/issues/1036/comments"}, "review_comments": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/1036/comments"}, "review_comment": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/1036/commits"}, "statuses": {"href": "https://api.github.com/repos/libdynd/libdynd/statuses/91d70c4fbb51f45ba9a1d28af0cb5f287aff50fd"}}, "author_association": "OWNER"}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/1022", "id": 62292074, "html_url": "https://github.com/libdynd/libdynd/pull/1022", "diff_url": "https://github.com/libdynd/libdynd/pull/1022.diff", "patch_url": "https://github.com/libdynd/libdynd/pull/1022.patch", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/1022", "number": 1022, "state": "open", "locked": false, "title": "Fix invalid access.", "user": {"login": "skrah", "id": 16530421, "avatar_url": "https://avatars1.githubusercontent.com/u/16530421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skrah", "html_url": "https://github.com/skrah", "followers_url": "https://api.github.com/users/skrah/followers", "following_url": "https://api.github.com/users/skrah/following{/other_user}", "gists_url": "https://api.github.com/users/skrah/gists{/gist_id}", "starred_url": "https://api.github.com/users/skrah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skrah/subscriptions", "organizations_url": "https://api.github.com/users/skrah/orgs", "repos_url": "https://api.github.com/users/skrah/repos", "events_url": "https://api.github.com/users/skrah/events{/privacy}", "received_events_url": "https://api.github.com/users/skrah/received_events", "type": "User", "site_admin": false}, "body": "This fixes a valgrind error in the dynd tests.\n", "created_at": "2016-03-09T20:38:23Z", "updated_at": "2016-06-02T10:39:35Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "87ce76cda0b262a6f5dea7779a5fb64438400018", "assignee": null, "assignees": [], "requested_reviewers": [], "milestone": null, "commits_url": "https://api.github.com/repos/libdynd/libdynd/pulls/1022/commits", "review_comments_url": "https://api.github.com/repos/libdynd/libdynd/pulls/1022/comments", "review_comment_url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/1022/comments", "statuses_url": "https://api.github.com/repos/libdynd/libdynd/statuses/2154a91a3ab29628ab375c7315472a3a74a8d17e", "head": {"label": "skrah:valgrind_fix", "ref": "valgrind_fix", "sha": "2154a91a3ab29628ab375c7315472a3a74a8d17e", "user": {"login": "skrah", "id": 16530421, "avatar_url": "https://avatars1.githubusercontent.com/u/16530421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skrah", "html_url": "https://github.com/skrah", "followers_url": "https://api.github.com/users/skrah/followers", "following_url": "https://api.github.com/users/skrah/following{/other_user}", "gists_url": "https://api.github.com/users/skrah/gists{/gist_id}", "starred_url": "https://api.github.com/users/skrah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skrah/subscriptions", "organizations_url": "https://api.github.com/users/skrah/orgs", "repos_url": "https://api.github.com/users/skrah/repos", "events_url": "https://api.github.com/users/skrah/events{/privacy}", "received_events_url": "https://api.github.com/users/skrah/received_events", "type": "User", "site_admin": false}, "repo": {"id": 51998592, "name": "libdynd", "full_name": "skrah/libdynd", "owner": {"login": "skrah", "id": 16530421, "avatar_url": "https://avatars1.githubusercontent.com/u/16530421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skrah", "html_url": "https://github.com/skrah", "followers_url": "https://api.github.com/users/skrah/followers", "following_url": "https://api.github.com/users/skrah/following{/other_user}", "gists_url": "https://api.github.com/users/skrah/gists{/gist_id}", "starred_url": "https://api.github.com/users/skrah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skrah/subscriptions", "organizations_url": "https://api.github.com/users/skrah/orgs", "repos_url": "https://api.github.com/users/skrah/repos", "events_url": "https://api.github.com/users/skrah/events{/privacy}", "received_events_url": "https://api.github.com/users/skrah/received_events", "type": "User", "site_admin": false}, "private": false, "html_url": "https://github.com/skrah/libdynd", "description": "C++ dynamic ndarray library, with Python exposure", "fork": true, "url": "https://api.github.com/repos/skrah/libdynd", "forks_url": "https://api.github.com/repos/skrah/libdynd/forks", "keys_url": "https://api.github.com/repos/skrah/libdynd/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/skrah/libdynd/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/skrah/libdynd/teams", "hooks_url": "https://api.github.com/repos/skrah/libdynd/hooks", "issue_events_url": "https://api.github.com/repos/skrah/libdynd/issues/events{/number}", "events_url": "https://api.github.com/repos/skrah/libdynd/events", "assignees_url": "https://api.github.com/repos/skrah/libdynd/assignees{/user}", "branches_url": "https://api.github.com/repos/skrah/libdynd/branches{/branch}", "tags_url": "https://api.github.com/repos/skrah/libdynd/tags", "blobs_url": "https://api.github.com/repos/skrah/libdynd/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/skrah/libdynd/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/skrah/libdynd/git/refs{/sha}", "trees_url": "https://api.github.com/repos/skrah/libdynd/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/skrah/libdynd/statuses/{sha}", "languages_url": "https://api.github.com/repos/skrah/libdynd/languages", "stargazers_url": "https://api.github.com/repos/skrah/libdynd/stargazers", "contributors_url": "https://api.github.com/repos/skrah/libdynd/contributors", "subscribers_url": "https://api.github.com/repos/skrah/libdynd/subscribers", "subscription_url": "https://api.github.com/repos/skrah/libdynd/subscription", "commits_url": "https://api.github.com/repos/skrah/libdynd/commits{/sha}", "git_commits_url": "https://api.github.com/repos/skrah/libdynd/git/commits{/sha}", "comments_url": "https://api.github.com/repos/skrah/libdynd/comments{/number}", "issue_comment_url": "https://api.github.com/repos/skrah/libdynd/issues/comments{/number}", "contents_url": "https://api.github.com/repos/skrah/libdynd/contents/{+path}", "compare_url": "https://api.github.com/repos/skrah/libdynd/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/skrah/libdynd/merges", "archive_url": "https://api.github.com/repos/skrah/libdynd/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/skrah/libdynd/downloads", "issues_url": "https://api.github.com/repos/skrah/libdynd/issues{/number}", "pulls_url": "https://api.github.com/repos/skrah/libdynd/pulls{/number}", "milestones_url": "https://api.github.com/repos/skrah/libdynd/milestones{/number}", "notifications_url": "https://api.github.com/repos/skrah/libdynd/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/skrah/libdynd/labels{/name}", "releases_url": "https://api.github.com/repos/skrah/libdynd/releases{/id}", "deployments_url": "https://api.github.com/repos/skrah/libdynd/deployments", "created_at": "2016-02-18T10:12:01Z", "updated_at": "2016-02-18T10:12:03Z", "pushed_at": "2016-06-02T14:40:34Z", "git_url": "git://github.com/skrah/libdynd.git", "ssh_url": "git@github.com:skrah/libdynd.git", "clone_url": "https://github.com/skrah/libdynd.git", "svn_url": "https://github.com/skrah/libdynd", "homepage": "http://libdynd.org", "size": 30427, "stargazers_count": 0, "watchers_count": 0, "language": "C++", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "open_issues_count": 0, "license": {"key": "other", "name": "Other", "spdx_id": null, "url": null}, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "libdynd:master", "ref": "master", "sha": "e5c47a63e0ed02398de013d82c818ed86d48531f", "user": {"login": "libdynd", "id": 10065955, "avatar_url": "https://avatars1.githubusercontent.com/u/10065955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/libdynd", "html_url": "https://github.com/libdynd", "followers_url": "https://api.github.com/users/libdynd/followers", "following_url": "https://api.github.com/users/libdynd/following{/other_user}", "gists_url": "https://api.github.com/users/libdynd/gists{/gist_id}", "starred_url": "https://api.github.com/users/libdynd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/libdynd/subscriptions", "organizations_url": "https://api.github.com/users/libdynd/orgs", "repos_url": "https://api.github.com/users/libdynd/repos", "events_url": "https://api.github.com/users/libdynd/events{/privacy}", "received_events_url": "https://api.github.com/users/libdynd/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 4665479, "name": "libdynd", "full_name": "libdynd/libdynd", "owner": {"login": "libdynd", "id": 10065955, "avatar_url": "https://avatars1.githubusercontent.com/u/10065955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/libdynd", "html_url": "https://github.com/libdynd", "followers_url": "https://api.github.com/users/libdynd/followers", "following_url": "https://api.github.com/users/libdynd/following{/other_user}", "gists_url": "https://api.github.com/users/libdynd/gists{/gist_id}", "starred_url": "https://api.github.com/users/libdynd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/libdynd/subscriptions", "organizations_url": "https://api.github.com/users/libdynd/orgs", "repos_url": "https://api.github.com/users/libdynd/repos", "events_url": "https://api.github.com/users/libdynd/events{/privacy}", "received_events_url": "https://api.github.com/users/libdynd/received_events", "type": "Organization", "site_admin": false}, "private": false, "html_url": "https://github.com/libdynd/libdynd", "description": "C++ dynamic ndarray library, with Python exposure", "fork": false, "url": "https://api.github.com/repos/libdynd/libdynd", "forks_url": "https://api.github.com/repos/libdynd/libdynd/forks", "keys_url": "https://api.github.com/repos/libdynd/libdynd/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/libdynd/libdynd/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/libdynd/libdynd/teams", "hooks_url": "https://api.github.com/repos/libdynd/libdynd/hooks", "issue_events_url": "https://api.github.com/repos/libdynd/libdynd/issues/events{/number}", "events_url": "https://api.github.com/repos/libdynd/libdynd/events", "assignees_url": "https://api.github.com/repos/libdynd/libdynd/assignees{/user}", "branches_url": "https://api.github.com/repos/libdynd/libdynd/branches{/branch}", "tags_url": "https://api.github.com/repos/libdynd/libdynd/tags", "blobs_url": "https://api.github.com/repos/libdynd/libdynd/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/libdynd/libdynd/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/libdynd/libdynd/git/refs{/sha}", "trees_url": "https://api.github.com/repos/libdynd/libdynd/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/libdynd/libdynd/statuses/{sha}", "languages_url": "https://api.github.com/repos/libdynd/libdynd/languages", "stargazers_url": "https://api.github.com/repos/libdynd/libdynd/stargazers", "contributors_url": "https://api.github.com/repos/libdynd/libdynd/contributors", "subscribers_url": "https://api.github.com/repos/libdynd/libdynd/subscribers", "subscription_url": "https://api.github.com/repos/libdynd/libdynd/subscription", "commits_url": "https://api.github.com/repos/libdynd/libdynd/commits{/sha}", "git_commits_url": "https://api.github.com/repos/libdynd/libdynd/git/commits{/sha}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/comments{/number}", "issue_comment_url": "https://api.github.com/repos/libdynd/libdynd/issues/comments{/number}", "contents_url": "https://api.github.com/repos/libdynd/libdynd/contents/{+path}", "compare_url": "https://api.github.com/repos/libdynd/libdynd/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/libdynd/libdynd/merges", "archive_url": "https://api.github.com/repos/libdynd/libdynd/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/libdynd/libdynd/downloads", "issues_url": "https://api.github.com/repos/libdynd/libdynd/issues{/number}", "pulls_url": "https://api.github.com/repos/libdynd/libdynd/pulls{/number}", "milestones_url": "https://api.github.com/repos/libdynd/libdynd/milestones{/number}", "notifications_url": "https://api.github.com/repos/libdynd/libdynd/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/libdynd/libdynd/labels{/name}", "releases_url": "https://api.github.com/repos/libdynd/libdynd/releases{/id}", "deployments_url": "https://api.github.com/repos/libdynd/libdynd/deployments", "created_at": "2012-06-14T16:14:46Z", "updated_at": "2018-01-07T16:36:46Z", "pushed_at": "2017-12-23T22:04:17Z", "git_url": "git://github.com/libdynd/libdynd.git", "ssh_url": "git@github.com:libdynd/libdynd.git", "clone_url": "https://github.com/libdynd/libdynd.git", "svn_url": "https://github.com/libdynd/libdynd", "homepage": "http://libdynd.org", "size": 31016, "stargazers_count": 228, "watchers_count": 228, "language": "C++", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 48, "mirror_url": null, "archived": false, "open_issues_count": 76, "license": {"key": "other", "name": "Other", "spdx_id": null, "url": null}, "forks": 48, "open_issues": 76, "watchers": 228, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/1022"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/1022"}, "issue": {"href": "https://api.github.com/repos/libdynd/libdynd/issues/1022"}, "comments": {"href": "https://api.github.com/repos/libdynd/libdynd/issues/1022/comments"}, "review_comments": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/1022/comments"}, "review_comment": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/1022/commits"}, "statuses": {"href": "https://api.github.com/repos/libdynd/libdynd/statuses/2154a91a3ab29628ab375c7315472a3a74a8d17e"}}, "author_association": "CONTRIBUTOR"}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/561", "id": 45514632, "html_url": "https://github.com/libdynd/libdynd/pull/561", "diff_url": "https://github.com/libdynd/libdynd/pull/561.diff", "patch_url": "https://github.com/libdynd/libdynd/pull/561.patch", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/561", "number": 561, "state": "open", "locked": false, "title": "Turn zeros and ones into kernels", "user": {"login": "cpcloud", "id": 417981, "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpcloud", "html_url": "https://github.com/cpcloud", "followers_url": "https://api.github.com/users/cpcloud/followers", "following_url": "https://api.github.com/users/cpcloud/following{/other_user}", "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions", "organizations_url": "https://api.github.com/users/cpcloud/orgs", "repos_url": "https://api.github.com/users/cpcloud/repos", "events_url": "https://api.github.com/users/cpcloud/events{/privacy}", "received_events_url": "https://api.github.com/users/cpcloud/received_events", "type": "User", "site_admin": false}, "body": null, "created_at": "2015-09-21T05:03:18Z", "updated_at": "2015-10-26T00:06:08Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "fbbe4ea4b853364a8dabfa8043c93e9fd2ccb584", "assignee": null, "assignees": [], "requested_reviewers": [], "milestone": null, "commits_url": "https://api.github.com/repos/libdynd/libdynd/pulls/561/commits", "review_comments_url": "https://api.github.com/repos/libdynd/libdynd/pulls/561/comments", "review_comment_url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/issues/561/comments", "statuses_url": "https://api.github.com/repos/libdynd/libdynd/statuses/8580884f3e816550fc00f24b217a20b6b42e0101", "head": {"label": "cpcloud:fill-kernels", "ref": "fill-kernels", "sha": "8580884f3e816550fc00f24b217a20b6b42e0101", "user": {"login": "cpcloud", "id": 417981, "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpcloud", "html_url": "https://github.com/cpcloud", "followers_url": "https://api.github.com/users/cpcloud/followers", "following_url": "https://api.github.com/users/cpcloud/following{/other_user}", "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions", "organizations_url": "https://api.github.com/users/cpcloud/orgs", "repos_url": "https://api.github.com/users/cpcloud/repos", "events_url": "https://api.github.com/users/cpcloud/events{/privacy}", "received_events_url": "https://api.github.com/users/cpcloud/received_events", "type": "User", "site_admin": false}, "repo": {"id": 21354038, "name": "libdynd", "full_name": "cpcloud/libdynd", "owner": {"login": "cpcloud", "id": 417981, "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpcloud", "html_url": "https://github.com/cpcloud", "followers_url": "https://api.github.com/users/cpcloud/followers", "following_url": "https://api.github.com/users/cpcloud/following{/other_user}", "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions", "organizations_url": "https://api.github.com/users/cpcloud/orgs", "repos_url": "https://api.github.com/users/cpcloud/repos", "events_url": "https://api.github.com/users/cpcloud/events{/privacy}", "received_events_url": "https://api.github.com/users/cpcloud/received_events", "type": "User", "site_admin": false}, "private": false, "html_url": "https://github.com/cpcloud/libdynd", "description": "C++ dynamic ndarray library, with Python exposure", "fork": true, "url": "https://api.github.com/repos/cpcloud/libdynd", "forks_url": "https://api.github.com/repos/cpcloud/libdynd/forks", "keys_url": "https://api.github.com/repos/cpcloud/libdynd/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/cpcloud/libdynd/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/cpcloud/libdynd/teams", "hooks_url": "https://api.github.com/repos/cpcloud/libdynd/hooks", "issue_events_url": "https://api.github.com/repos/cpcloud/libdynd/issues/events{/number}", "events_url": "https://api.github.com/repos/cpcloud/libdynd/events", "assignees_url": "https://api.github.com/repos/cpcloud/libdynd/assignees{/user}", "branches_url": "https://api.github.com/repos/cpcloud/libdynd/branches{/branch}", "tags_url": "https://api.github.com/repos/cpcloud/libdynd/tags", "blobs_url": "https://api.github.com/repos/cpcloud/libdynd/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/cpcloud/libdynd/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/cpcloud/libdynd/git/refs{/sha}", "trees_url": "https://api.github.com/repos/cpcloud/libdynd/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/cpcloud/libdynd/statuses/{sha}", "languages_url": "https://api.github.com/repos/cpcloud/libdynd/languages", "stargazers_url": "https://api.github.com/repos/cpcloud/libdynd/stargazers", "contributors_url": "https://api.github.com/repos/cpcloud/libdynd/contributors", "subscribers_url": "https://api.github.com/repos/cpcloud/libdynd/subscribers", "subscription_url": "https://api.github.com/repos/cpcloud/libdynd/subscription", "commits_url": "https://api.github.com/repos/cpcloud/libdynd/commits{/sha}", "git_commits_url": "https://api.github.com/repos/cpcloud/libdynd/git/commits{/sha}", "comments_url": "https://api.github.com/repos/cpcloud/libdynd/comments{/number}", "issue_comment_url": "https://api.github.com/repos/cpcloud/libdynd/issues/comments{/number}", "contents_url": "https://api.github.com/repos/cpcloud/libdynd/contents/{+path}", "compare_url": "https://api.github.com/repos/cpcloud/libdynd/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/cpcloud/libdynd/merges", "archive_url": "https://api.github.com/repos/cpcloud/libdynd/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/cpcloud/libdynd/downloads", "issues_url": "https://api.github.com/repos/cpcloud/libdynd/issues{/number}", "pulls_url": "https://api.github.com/repos/cpcloud/libdynd/pulls{/number}", "milestones_url": "https://api.github.com/repos/cpcloud/libdynd/milestones{/number}", "notifications_url": "https://api.github.com/repos/cpcloud/libdynd/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/cpcloud/libdynd/labels{/name}", "releases_url": "https://api.github.com/repos/cpcloud/libdynd/releases{/id}", "deployments_url": "https://api.github.com/repos/cpcloud/libdynd/deployments", "created_at": "2014-06-30T14:29:58Z", "updated_at": "2015-03-12T12:38:14Z", "pushed_at": "2015-10-26T00:06:07Z", "git_url": "git://github.com/cpcloud/libdynd.git", "ssh_url": "git@github.com:cpcloud/libdynd.git", "clone_url": "https://github.com/cpcloud/libdynd.git", "svn_url": "https://github.com/cpcloud/libdynd", "homepage": null, "size": 22209, "stargazers_count": 0, "watchers_count": 0, "language": "C++", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "open_issues_count": 0, "license": {"key": "other", "name": "Other", "spdx_id": null, "url": null}, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "libdynd:master", "ref": "master", "sha": "316e92bd126329c0b00fc329c27e4c3ee68e6e41", "user": {"login": "libdynd", "id": 10065955, "avatar_url": "https://avatars1.githubusercontent.com/u/10065955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/libdynd", "html_url": "https://github.com/libdynd", "followers_url": "https://api.github.com/users/libdynd/followers", "following_url": "https://api.github.com/users/libdynd/following{/other_user}", "gists_url": "https://api.github.com/users/libdynd/gists{/gist_id}", "starred_url": "https://api.github.com/users/libdynd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/libdynd/subscriptions", "organizations_url": "https://api.github.com/users/libdynd/orgs", "repos_url": "https://api.github.com/users/libdynd/repos", "events_url": "https://api.github.com/users/libdynd/events{/privacy}", "received_events_url": "https://api.github.com/users/libdynd/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 4665479, "name": "libdynd", "full_name": "libdynd/libdynd", "owner": {"login": "libdynd", "id": 10065955, "avatar_url": "https://avatars1.githubusercontent.com/u/10065955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/libdynd", "html_url": "https://github.com/libdynd", "followers_url": "https://api.github.com/users/libdynd/followers", "following_url": "https://api.github.com/users/libdynd/following{/other_user}", "gists_url": "https://api.github.com/users/libdynd/gists{/gist_id}", "starred_url": "https://api.github.com/users/libdynd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/libdynd/subscriptions", "organizations_url": "https://api.github.com/users/libdynd/orgs", "repos_url": "https://api.github.com/users/libdynd/repos", "events_url": "https://api.github.com/users/libdynd/events{/privacy}", "received_events_url": "https://api.github.com/users/libdynd/received_events", "type": "Organization", "site_admin": false}, "private": false, "html_url": "https://github.com/libdynd/libdynd", "description": "C++ dynamic ndarray library, with Python exposure", "fork": false, "url": "https://api.github.com/repos/libdynd/libdynd", "forks_url": "https://api.github.com/repos/libdynd/libdynd/forks", "keys_url": "https://api.github.com/repos/libdynd/libdynd/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/libdynd/libdynd/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/libdynd/libdynd/teams", "hooks_url": "https://api.github.com/repos/libdynd/libdynd/hooks", "issue_events_url": "https://api.github.com/repos/libdynd/libdynd/issues/events{/number}", "events_url": "https://api.github.com/repos/libdynd/libdynd/events", "assignees_url": "https://api.github.com/repos/libdynd/libdynd/assignees{/user}", "branches_url": "https://api.github.com/repos/libdynd/libdynd/branches{/branch}", "tags_url": "https://api.github.com/repos/libdynd/libdynd/tags", "blobs_url": "https://api.github.com/repos/libdynd/libdynd/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/libdynd/libdynd/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/libdynd/libdynd/git/refs{/sha}", "trees_url": "https://api.github.com/repos/libdynd/libdynd/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/libdynd/libdynd/statuses/{sha}", "languages_url": "https://api.github.com/repos/libdynd/libdynd/languages", "stargazers_url": "https://api.github.com/repos/libdynd/libdynd/stargazers", "contributors_url": "https://api.github.com/repos/libdynd/libdynd/contributors", "subscribers_url": "https://api.github.com/repos/libdynd/libdynd/subscribers", "subscription_url": "https://api.github.com/repos/libdynd/libdynd/subscription", "commits_url": "https://api.github.com/repos/libdynd/libdynd/commits{/sha}", "git_commits_url": "https://api.github.com/repos/libdynd/libdynd/git/commits{/sha}", "comments_url": "https://api.github.com/repos/libdynd/libdynd/comments{/number}", "issue_comment_url": "https://api.github.com/repos/libdynd/libdynd/issues/comments{/number}", "contents_url": "https://api.github.com/repos/libdynd/libdynd/contents/{+path}", "compare_url": "https://api.github.com/repos/libdynd/libdynd/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/libdynd/libdynd/merges", "archive_url": "https://api.github.com/repos/libdynd/libdynd/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/libdynd/libdynd/downloads", "issues_url": "https://api.github.com/repos/libdynd/libdynd/issues{/number}", "pulls_url": "https://api.github.com/repos/libdynd/libdynd/pulls{/number}", "milestones_url": "https://api.github.com/repos/libdynd/libdynd/milestones{/number}", "notifications_url": "https://api.github.com/repos/libdynd/libdynd/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/libdynd/libdynd/labels{/name}", "releases_url": "https://api.github.com/repos/libdynd/libdynd/releases{/id}", "deployments_url": "https://api.github.com/repos/libdynd/libdynd/deployments", "created_at": "2012-06-14T16:14:46Z", "updated_at": "2018-01-07T16:36:46Z", "pushed_at": "2017-12-23T22:04:17Z", "git_url": "git://github.com/libdynd/libdynd.git", "ssh_url": "git@github.com:libdynd/libdynd.git", "clone_url": "https://github.com/libdynd/libdynd.git", "svn_url": "https://github.com/libdynd/libdynd", "homepage": "http://libdynd.org", "size": 31016, "stargazers_count": 228, "watchers_count": 228, "language": "C++", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 48, "mirror_url": null, "archived": false, "open_issues_count": 76, "license": {"key": "other", "name": "Other", "spdx_id": null, "url": null}, "forks": 48, "open_issues": 76, "watchers": 228, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/561"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/561"}, "issue": {"href": "https://api.github.com/repos/libdynd/libdynd/issues/561"}, "comments": {"href": "https://api.github.com/repos/libdynd/libdynd/issues/561/comments"}, "review_comments": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/561/comments"}, "review_comment": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/561/commits"}, "statuses": {"href": "https://api.github.com/repos/libdynd/libdynd/statuses/8580884f3e816550fc00f24b217a20b6b42e0101"}}, "author_association": "CONTRIBUTOR"}], "issue_comments": [{"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/31050788", "html_url": "https://github.com/libdynd/libdynd/pull/1#issuecomment-31050788", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/1", "id": 31050788, "user": {"login": "aterrel", "id": 30583, "avatar_url": "https://avatars1.githubusercontent.com/u/30583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aterrel", "html_url": "https://github.com/aterrel", "followers_url": "https://api.github.com/users/aterrel/followers", "following_url": "https://api.github.com/users/aterrel/following{/other_user}", "gists_url": "https://api.github.com/users/aterrel/gists{/gist_id}", "starred_url": "https://api.github.com/users/aterrel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aterrel/subscriptions", "organizations_url": "https://api.github.com/users/aterrel/orgs", "repos_url": "https://api.github.com/users/aterrel/repos", "events_url": "https://api.github.com/users/aterrel/events{/privacy}", "received_events_url": "https://api.github.com/users/aterrel/received_events", "type": "User", "site_admin": false}, "created_at": "2013-12-21T00:00:40Z", "updated_at": "2013-12-21T00:00:40Z", "author_association": "NONE", "body": "+1 I don't see any obvious errors\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/31050788/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/34681812", "html_url": "https://github.com/libdynd/libdynd/issues/2#issuecomment-34681812", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/2", "id": 34681812, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-02-10T21:01:14Z", "updated_at": "2014-02-10T21:01:14Z", "author_association": "OWNER", "body": "I've pushed a fix to this, just waiting to validate it through the automated builds. These builds are installable from binstar (https://binstar.org/mwiebe/dynd-python for instructions) as they get uploaded by the builder machines.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/34681812/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/34699034", "html_url": "https://github.com/libdynd/libdynd/issues/2#issuecomment-34699034", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/2", "id": 34699034, "user": {"login": "mrocklin", "id": 306380, "avatar_url": "https://avatars3.githubusercontent.com/u/306380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrocklin", "html_url": "https://github.com/mrocklin", "followers_url": "https://api.github.com/users/mrocklin/followers", "following_url": "https://api.github.com/users/mrocklin/following{/other_user}", "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions", "organizations_url": "https://api.github.com/users/mrocklin/orgs", "repos_url": "https://api.github.com/users/mrocklin/repos", "events_url": "https://api.github.com/users/mrocklin/events{/privacy}", "received_events_url": "https://api.github.com/users/mrocklin/received_events", "type": "User", "site_admin": false}, "created_at": "2014-02-10T23:02:04Z", "updated_at": "2014-02-10T23:02:04Z", "author_association": "NONE", "body": "Wonderful.  Thanks for the speedy response @mwiebe !\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/34699034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/34817445", "html_url": "https://github.com/libdynd/libdynd/issues/2#issuecomment-34817445", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/2", "id": 34817445, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-02-11T22:40:37Z", "updated_at": "2014-02-11T22:40:37Z", "author_association": "OWNER", "body": "Thanks for the bug report, proceeding to close the issue.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/34817445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/34997314", "html_url": "https://github.com/libdynd/libdynd/pull/4#issuecomment-34997314", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/4", "id": 34997314, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-02-13T16:38:44Z", "updated_at": "2014-02-13T16:38:44Z", "author_association": "OWNER", "body": "@aterrel I removed the irrelevant commit, this should be better.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/34997314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/35132814", "html_url": "https://github.com/libdynd/libdynd/pull/5#issuecomment-35132814", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/5", "id": 35132814, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-02-14T22:48:39Z", "updated_at": "2014-02-14T22:48:39Z", "author_association": "OWNER", "body": "Looks good, thanks! Another comment is to make a feature branch for the PR instead of working off of master. e.g.:\n\n```\n$ git checkout -b cudabuild\n...\n$ git push origin cudabuild\n```\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/35132814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/35809686", "html_url": "https://github.com/libdynd/libdynd/issues/3#issuecomment-35809686", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/3", "id": 35809686, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-02-22T18:13:22Z", "updated_at": "2014-02-22T18:13:22Z", "author_association": "OWNER", "body": "Done in PR #8.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/35809686/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/36326437", "html_url": "https://github.com/libdynd/libdynd/pull/10#issuecomment-36326437", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/10", "id": 36326437, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-02-28T06:58:18Z", "updated_at": "2014-02-28T06:58:18Z", "author_association": "OWNER", "body": "Having the memory space fixture-basted tests is great, but I think there really needs to be a test_cuda_array.cpp which specifically puts all the typical things you would do with the assignments between various memory space arrays through their paces, and validates that you can only create cuda memory types that make sense. It should do these tests trying to use the more user-friendly array object syntax where possible. (Note: I'm using the new datashape syntax here, so my examples won't necessarily work unless you rebase off of my new_parser branch)\n\n```\n// I was under the impression that this was what we wanted:\nndt::type(\"cuda_host[strided * strided * int32]\")\n// not this:\nndt::type(\"strided * strided * cuda_host[int32]\")\n// to make it possible to error check against things like this:\nndt::type(\"strided * var * cuda_host[int32]\")\nndt::type(\"pointer[strided * cuda_host[int32]\")\n```\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/36326437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/36344014", "html_url": "https://github.com/libdynd/libdynd/pull/10#issuecomment-36344014", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/10", "id": 36344014, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2014-02-28T12:01:43Z", "updated_at": "2014-02-28T12:01:43Z", "author_association": "OWNER", "body": "Okay, there is already some testing for valid memory types in test_cuda_host_type.cpp and test_cuda_device_type.cpp.\n\nI agree that test_cuda_array.cpp is a good thing, and I'll do it, but I'd like to hold off on it until after this merge. The TestFixture for memory spaces and test_cuda_*_type.cpp should be doing enough for now.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/36344014/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/37056357", "html_url": "https://github.com/libdynd/libdynd/pull/11#issuecomment-37056357", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/11", "id": 37056357, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-03-07T19:06:08Z", "updated_at": "2014-03-07T19:06:08Z", "author_association": "OWNER", "body": "Going with apply for now, I could see us eventually creating three similar functions possibly with the following naming scheme:\n\nnd::apply\nThis function, uses the fact of immediate evaluation for efficiency, reducing the number of dynamic allocations and some other things.\n\nnd::map\nSimilar to this, but returns a deferred object instead of immediately evaluating it\n\nnd::foreach\nallows parameters to be mutable references, guarantees a particular loop order, so can modify multiple arrays in place.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/37056357/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/37478533", "html_url": "https://github.com/libdynd/libdynd/pull/4#issuecomment-37478533", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/4", "id": 37478533, "user": {"login": "aterrel", "id": 30583, "avatar_url": "https://avatars1.githubusercontent.com/u/30583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aterrel", "html_url": "https://github.com/aterrel", "followers_url": "https://api.github.com/users/aterrel/followers", "following_url": "https://api.github.com/users/aterrel/following{/other_user}", "gists_url": "https://api.github.com/users/aterrel/gists{/gist_id}", "starred_url": "https://api.github.com/users/aterrel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aterrel/subscriptions", "organizations_url": "https://api.github.com/users/aterrel/orgs", "repos_url": "https://api.github.com/users/aterrel/repos", "events_url": "https://api.github.com/users/aterrel/events{/privacy}", "received_events_url": "https://api.github.com/users/aterrel/received_events", "type": "User", "site_admin": false}, "created_at": "2014-03-12T22:44:35Z", "updated_at": "2014-03-12T22:44:35Z", "author_association": "NONE", "body": "LGTM\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/37478533/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/37478559", "html_url": "https://github.com/libdynd/libdynd/pull/11#issuecomment-37478559", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/11", "id": 37478559, "user": {"login": "aterrel", "id": 30583, "avatar_url": "https://avatars1.githubusercontent.com/u/30583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aterrel", "html_url": "https://github.com/aterrel", "followers_url": "https://api.github.com/users/aterrel/followers", "following_url": "https://api.github.com/users/aterrel/following{/other_user}", "gists_url": "https://api.github.com/users/aterrel/gists{/gist_id}", "starred_url": "https://api.github.com/users/aterrel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aterrel/subscriptions", "organizations_url": "https://api.github.com/users/aterrel/orgs", "repos_url": "https://api.github.com/users/aterrel/repos", "events_url": "https://api.github.com/users/aterrel/events{/privacy}", "received_events_url": "https://api.github.com/users/aterrel/received_events", "type": "User", "site_admin": false}, "created_at": "2014-03-12T22:44:54Z", "updated_at": "2014-03-12T22:44:54Z", "author_association": "NONE", "body": "this stall out?\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/37478559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/37483444", "html_url": "https://github.com/libdynd/libdynd/pull/11#issuecomment-37483444", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/11", "id": 37483444, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-03-12T23:48:55Z", "updated_at": "2014-03-12T23:48:55Z", "author_association": "OWNER", "body": "I'm going to close this at let @izaid make a PR for his branch.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/37483444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/37988856", "html_url": "https://github.com/libdynd/libdynd/issues/12#issuecomment-37988856", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/12", "id": 37988856, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-03-18T21:10:49Z", "updated_at": "2014-03-18T21:10:49Z", "author_association": "OWNER", "body": "Ah, that would be because we removed that flag when doing the CUDA support. It could be turned on selectively based on whether CUDA support is enabled.\n\nIn clang, there is a very useful __has_feature macro I've been meaning to use for this purpose (http://clang.llvm.org/docs/LanguageExtensions.html#checks-for-standard-language-features) but haven't gotten around to doing that change yet. Not sure if gcc has something similar yet.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/37988856/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/37991372", "html_url": "https://github.com/libdynd/libdynd/issues/12#issuecomment-37991372", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/12", "id": 37991372, "user": {"login": "garaud", "id": 98194, "avatar_url": "https://avatars0.githubusercontent.com/u/98194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/garaud", "html_url": "https://github.com/garaud", "followers_url": "https://api.github.com/users/garaud/followers", "following_url": "https://api.github.com/users/garaud/following{/other_user}", "gists_url": "https://api.github.com/users/garaud/gists{/gist_id}", "starred_url": "https://api.github.com/users/garaud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/garaud/subscriptions", "organizations_url": "https://api.github.com/users/garaud/orgs", "repos_url": "https://api.github.com/users/garaud/repos", "events_url": "https://api.github.com/users/garaud/events{/privacy}", "received_events_url": "https://api.github.com/users/garaud/received_events", "type": "User", "site_admin": false}, "created_at": "2014-03-18T21:32:58Z", "updated_at": "2014-03-18T21:32:58Z", "author_association": "CONTRIBUTOR", "body": "OK. My CMake fix hasn't been tested with the CUDA support. I don't know if it's enough. Tell me if you want me to change something.\n\nInteresting Clang feature. Thanks, I didn't know. I don't know for GCC.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/37991372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/37996564", "html_url": "https://github.com/libdynd/libdynd/pull/14#issuecomment-37996564", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/14", "id": 37996564, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-03-18T22:24:48Z", "updated_at": "2014-03-18T22:24:48Z", "author_association": "OWNER", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/37996564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/37997231", "html_url": "https://github.com/libdynd/libdynd/pull/13#issuecomment-37997231", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/13", "id": 37997231, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-03-18T22:32:18Z", "updated_at": "2014-03-18T22:32:18Z", "author_association": "OWNER", "body": "There's a build error on gcc in travisci from this, and looking at config.hpp, it appears that it's something I've run into before and made a DYND_ISNAN macro to work around. Changing the C++11 logic for 4.6 should fix this.\n\nhttps://github.com/ContinuumIO/libdynd/blob/master/include/dynd/config.hpp#L41\n\nI think let's have it be C++98 (remove the --std=c++0x flag) for gcc < 4.7, and C++11 from gcc 4.7 and onward. Also, if DYND_CUDA is enabled, it should exclude c++11 on gcc 4.7 and onward.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/37997231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/38113542", "html_url": "https://github.com/libdynd/libdynd/pull/13#issuecomment-38113542", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/13", "id": 38113542, "user": {"login": "aterrel", "id": 30583, "avatar_url": "https://avatars1.githubusercontent.com/u/30583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aterrel", "html_url": "https://github.com/aterrel", "followers_url": "https://api.github.com/users/aterrel/followers", "following_url": "https://api.github.com/users/aterrel/following{/other_user}", "gists_url": "https://api.github.com/users/aterrel/gists{/gist_id}", "starred_url": "https://api.github.com/users/aterrel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aterrel/subscriptions", "organizations_url": "https://api.github.com/users/aterrel/orgs", "repos_url": "https://api.github.com/users/aterrel/repos", "events_url": "https://api.github.com/users/aterrel/events{/privacy}", "received_events_url": "https://api.github.com/users/aterrel/received_events", "type": "User", "site_admin": false}, "created_at": "2014-03-19T22:09:42Z", "updated_at": "2014-03-19T22:09:42Z", "author_association": "NONE", "body": "Is this really the right approach?  C++11 adds non-compatible features with C++98. Having two standards in a single code base seems pretty dangerous to me. (Or at least lots of fun #ifdefs)\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/38113542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/38120451", "html_url": "https://github.com/libdynd/libdynd/pull/13#issuecomment-38120451", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/13", "id": 38120451, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-03-19T23:33:53Z", "updated_at": "2014-03-19T23:33:53Z", "author_association": "OWNER", "body": "The particular C++11 features being supported don't make things too crazy, there are basically just two things presently:\n- adding the constexpr keyword in places via DYND_CONSTEXPR\n- allowing initializer lists to construct nd::array, e.g. \"nd::array b = a + {1, 2, 3};\"\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/38120451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/39402534", "html_url": "https://github.com/libdynd/libdynd/pull/22#issuecomment-39402534", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/22", "id": 39402534, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-04-03T01:04:38Z", "updated_at": "2014-04-03T01:04:38Z", "author_association": "OWNER", "body": "Merged\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/39402534/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/39433730", "html_url": "https://github.com/libdynd/libdynd/pull/23#issuecomment-39433730", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/23", "id": 39433730, "user": {"login": "FrancescAlted", "id": 314521, "avatar_url": "https://avatars1.githubusercontent.com/u/314521?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FrancescAlted", "html_url": "https://github.com/FrancescAlted", "followers_url": "https://api.github.com/users/FrancescAlted/followers", "following_url": "https://api.github.com/users/FrancescAlted/following{/other_user}", "gists_url": "https://api.github.com/users/FrancescAlted/gists{/gist_id}", "starred_url": "https://api.github.com/users/FrancescAlted/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FrancescAlted/subscriptions", "organizations_url": "https://api.github.com/users/FrancescAlted/orgs", "repos_url": "https://api.github.com/users/FrancescAlted/repos", "events_url": "https://api.github.com/users/FrancescAlted/events{/privacy}", "received_events_url": "https://api.github.com/users/FrancescAlted/received_events", "type": "User", "site_admin": false}, "created_at": "2014-04-03T09:58:23Z", "updated_at": "2014-04-03T09:58:23Z", "author_association": "NONE", "body": "In general looks good to me.  I think you don't have tests on time arithmetic yet, so adding some would be interesting.  Also, full support for TZ does not seem to be there yet.  I suppose this will be implemented in a future PR for datetime.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/39433730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/39764231", "html_url": "https://github.com/libdynd/libdynd/pull/20#issuecomment-39764231", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/20", "id": 39764231, "user": {"login": "mrocklin", "id": 306380, "avatar_url": "https://avatars3.githubusercontent.com/u/306380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrocklin", "html_url": "https://github.com/mrocklin", "followers_url": "https://api.github.com/users/mrocklin/followers", "following_url": "https://api.github.com/users/mrocklin/following{/other_user}", "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions", "organizations_url": "https://api.github.com/users/mrocklin/orgs", "repos_url": "https://api.github.com/users/mrocklin/repos", "events_url": "https://api.github.com/users/mrocklin/events{/privacy}", "received_events_url": "https://api.github.com/users/mrocklin/received_events", "type": "User", "site_admin": false}, "created_at": "2014-04-07T18:15:12Z", "updated_at": "2014-04-07T18:15:12Z", "author_association": "NONE", "body": "After glancing through this briefly the first thing that comes to mind is, \"gosh, parsing dates sure is complex,\" which, of course, is true.  So some general questions:\n\nIs there a standard solution to this problem?  \n\nHow does this compare to `strptime`?  \n\nHow extensible is our solution to new date/datetime formats if they should arise?  \n\nDo we have performance comparisons to other date/datetime parsing systems?\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/39764231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/39767869", "html_url": "https://github.com/libdynd/libdynd/pull/20#issuecomment-39767869", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/20", "id": 39767869, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-04-07T18:45:21Z", "updated_at": "2014-04-07T18:45:21Z", "author_association": "OWNER", "body": "Yeah, parsing dates is kind of messy. What I've written here is really only part of the story, because it's pretty English-oriented.\n\nC++ does have a mechanism to parse datetimes that are formatted as specified by the current locale (http://www.cplusplus.com/reference/locale/time_get/get_date/), so doing that is an option, but has some complications making sure the string is in the system locale's codec before calling it. Pandas is using the dateutil library, which has its own custom parser. In NumPy, the parser only handles ISO 8601 formatted strings.\n\nFor strptime, you specify the exact format to match against. This accepts any number of common unambiguous formats.\n\nTo extend it to new date/time formats requires editing the C++ code.\n\nNo, I haven't done performance testing, but I suspect this code does pretty well because of how it's written.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/39767869/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/39769542", "html_url": "https://github.com/libdynd/libdynd/pull/20#issuecomment-39769542", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/20", "id": 39769542, "user": {"login": "mrocklin", "id": 306380, "avatar_url": "https://avatars3.githubusercontent.com/u/306380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrocklin", "html_url": "https://github.com/mrocklin", "followers_url": "https://api.github.com/users/mrocklin/followers", "following_url": "https://api.github.com/users/mrocklin/following{/other_user}", "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions", "organizations_url": "https://api.github.com/users/mrocklin/orgs", "repos_url": "https://api.github.com/users/mrocklin/repos", "events_url": "https://api.github.com/users/mrocklin/events{/privacy}", "received_events_url": "https://api.github.com/users/mrocklin/received_events", "type": "User", "site_admin": false}, "created_at": "2014-04-07T18:59:46Z", "updated_at": "2014-04-07T18:59:46Z", "author_association": "NONE", "body": "How likely are we to want new datetime formats in the future? If the answer if \"somewhat likely\" and if generic prebuilt systems like `strptime` aren't terribly slow then an approach like that seems like it would require less maintenance.  I have been bottlenecked by strptime before though (although it was through the Python interface) so it could be that a dual system that optimized common formats would be worthwhile.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/39769542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/39771318", "html_url": "https://github.com/libdynd/libdynd/pull/20#issuecomment-39771318", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/20", "id": 39771318, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-04-07T19:15:25Z", "updated_at": "2014-04-07T19:15:25Z", "author_association": "OWNER", "body": "I think exposing both strftime and strptime as ufuncs or ufunc methods makes sense. This is partially implemented already:\n\n```\nIn [8]: from dynd import nd, ndt\n\nIn [9]: a = nd.array(['2011-12-10', '2000-01-01'], dtype=ndt.date)\n\nIn [10]: a\nOut[10]: nd.array([2011-12-10, 2000-01-01], type=\"strided * date\")\n\nIn [11]: a.strftime('%Y-%m')\nOut[11]: nd.array([\"2011-12\", \"2000-01\"], type=\"strided * expr<string, op0=date, expr=strftime(op0, \"%Y-%m\")>\")\n```\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/39771318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/41088462", "html_url": "https://github.com/libdynd/libdynd/pull/30#issuecomment-41088462", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/30", "id": 41088462, "user": {"login": "talumbau", "id": 1891418, "avatar_url": "https://avatars1.githubusercontent.com/u/1891418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/talumbau", "html_url": "https://github.com/talumbau", "followers_url": "https://api.github.com/users/talumbau/followers", "following_url": "https://api.github.com/users/talumbau/following{/other_user}", "gists_url": "https://api.github.com/users/talumbau/gists{/gist_id}", "starred_url": "https://api.github.com/users/talumbau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/talumbau/subscriptions", "organizations_url": "https://api.github.com/users/talumbau/orgs", "repos_url": "https://api.github.com/users/talumbau/repos", "events_url": "https://api.github.com/users/talumbau/events{/privacy}", "received_events_url": "https://api.github.com/users/talumbau/received_events", "type": "User", "site_admin": false}, "created_at": "2014-04-22T20:02:46Z", "updated_at": "2014-04-22T20:02:46Z", "author_association": "CONTRIBUTOR", "body": "so. much. code. +1 for merge\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/41088462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/41461731", "html_url": "https://github.com/libdynd/libdynd/pull/32#issuecomment-41461731", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/32", "id": 41461731, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-04-26T06:51:40Z", "updated_at": "2014-04-26T06:51:40Z", "author_association": "OWNER", "body": "Merging so can be used right away\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/41461731/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/41808263", "html_url": "https://github.com/libdynd/libdynd/pull/34#issuecomment-41808263", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/34", "id": 41808263, "user": {"login": "talumbau", "id": 1891418, "avatar_url": "https://avatars1.githubusercontent.com/u/1891418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/talumbau", "html_url": "https://github.com/talumbau", "followers_url": "https://api.github.com/users/talumbau/followers", "following_url": "https://api.github.com/users/talumbau/following{/other_user}", "gists_url": "https://api.github.com/users/talumbau/gists{/gist_id}", "starred_url": "https://api.github.com/users/talumbau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/talumbau/subscriptions", "organizations_url": "https://api.github.com/users/talumbau/orgs", "repos_url": "https://api.github.com/users/talumbau/repos", "events_url": "https://api.github.com/users/talumbau/events{/privacy}", "received_events_url": "https://api.github.com/users/talumbau/received_events", "type": "User", "site_admin": false}, "created_at": "2014-04-30T15:09:46Z", "updated_at": "2014-04-30T15:09:46Z", "author_association": "CONTRIBUTOR", "body": "Python syntax is weird in this case, but you have dutifully followed the rules. +1\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/41808263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/42471682", "html_url": "https://github.com/libdynd/libdynd/pull/36#issuecomment-42471682", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/36", "id": 42471682, "user": {"login": "talumbau", "id": 1891418, "avatar_url": "https://avatars1.githubusercontent.com/u/1891418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/talumbau", "html_url": "https://github.com/talumbau", "followers_url": "https://api.github.com/users/talumbau/followers", "following_url": "https://api.github.com/users/talumbau/following{/other_user}", "gists_url": "https://api.github.com/users/talumbau/gists{/gist_id}", "starred_url": "https://api.github.com/users/talumbau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/talumbau/subscriptions", "organizations_url": "https://api.github.com/users/talumbau/orgs", "repos_url": "https://api.github.com/users/talumbau/repos", "events_url": "https://api.github.com/users/talumbau/events{/privacy}", "received_events_url": "https://api.github.com/users/talumbau/received_events", "type": "User", "site_admin": false}, "created_at": "2014-05-07T19:24:52Z", "updated_at": "2014-05-07T19:24:52Z", "author_association": "CONTRIBUTOR", "body": "+1 to merge. I think size_t is fine for resolving the unsigned/signed comparisons.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/42471682/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/42572775", "html_url": "https://github.com/libdynd/libdynd/pull/37#issuecomment-42572775", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/37", "id": 42572775, "user": {"login": "talumbau", "id": 1891418, "avatar_url": "https://avatars1.githubusercontent.com/u/1891418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/talumbau", "html_url": "https://github.com/talumbau", "followers_url": "https://api.github.com/users/talumbau/followers", "following_url": "https://api.github.com/users/talumbau/following{/other_user}", "gists_url": "https://api.github.com/users/talumbau/gists{/gist_id}", "starred_url": "https://api.github.com/users/talumbau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/talumbau/subscriptions", "organizations_url": "https://api.github.com/users/talumbau/orgs", "repos_url": "https://api.github.com/users/talumbau/repos", "events_url": "https://api.github.com/users/talumbau/events{/privacy}", "received_events_url": "https://api.github.com/users/talumbau/received_events", "type": "User", "site_admin": false}, "created_at": "2014-05-08T16:37:11Z", "updated_at": "2014-05-08T16:37:11Z", "author_association": "CONTRIBUTOR", "body": "looks good. +1\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/42572775/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/42574145", "html_url": "https://github.com/libdynd/libdynd/pull/38#issuecomment-42574145", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/38", "id": 42574145, "user": {"login": "talumbau", "id": 1891418, "avatar_url": "https://avatars1.githubusercontent.com/u/1891418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/talumbau", "html_url": "https://github.com/talumbau", "followers_url": "https://api.github.com/users/talumbau/followers", "following_url": "https://api.github.com/users/talumbau/following{/other_user}", "gists_url": "https://api.github.com/users/talumbau/gists{/gist_id}", "starred_url": "https://api.github.com/users/talumbau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/talumbau/subscriptions", "organizations_url": "https://api.github.com/users/talumbau/orgs", "repos_url": "https://api.github.com/users/talumbau/repos", "events_url": "https://api.github.com/users/talumbau/events{/privacy}", "received_events_url": "https://api.github.com/users/talumbau/received_events", "type": "User", "site_admin": false}, "created_at": "2014-05-08T16:48:13Z", "updated_at": "2014-05-08T16:48:13Z", "author_association": "CONTRIBUTOR", "body": "LGTM +1\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/42574145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/42875783", "html_url": "https://github.com/libdynd/libdynd/pull/39#issuecomment-42875783", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/39", "id": 42875783, "user": {"login": "talumbau", "id": 1891418, "avatar_url": "https://avatars1.githubusercontent.com/u/1891418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/talumbau", "html_url": "https://github.com/talumbau", "followers_url": "https://api.github.com/users/talumbau/followers", "following_url": "https://api.github.com/users/talumbau/following{/other_user}", "gists_url": "https://api.github.com/users/talumbau/gists{/gist_id}", "starred_url": "https://api.github.com/users/talumbau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/talumbau/subscriptions", "organizations_url": "https://api.github.com/users/talumbau/orgs", "repos_url": "https://api.github.com/users/talumbau/repos", "events_url": "https://api.github.com/users/talumbau/events{/privacy}", "received_events_url": "https://api.github.com/users/talumbau/received_events", "type": "User", "site_admin": false}, "created_at": "2014-05-12T19:20:25Z", "updated_at": "2014-05-12T19:20:25Z", "author_association": "CONTRIBUTOR", "body": "good to go. +1\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/42875783/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/42877023", "html_url": "https://github.com/libdynd/libdynd/pull/41#issuecomment-42877023", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/41", "id": 42877023, "user": {"login": "talumbau", "id": 1891418, "avatar_url": "https://avatars1.githubusercontent.com/u/1891418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/talumbau", "html_url": "https://github.com/talumbau", "followers_url": "https://api.github.com/users/talumbau/followers", "following_url": "https://api.github.com/users/talumbau/following{/other_user}", "gists_url": "https://api.github.com/users/talumbau/gists{/gist_id}", "starred_url": "https://api.github.com/users/talumbau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/talumbau/subscriptions", "organizations_url": "https://api.github.com/users/talumbau/orgs", "repos_url": "https://api.github.com/users/talumbau/repos", "events_url": "https://api.github.com/users/talumbau/events{/privacy}", "received_events_url": "https://api.github.com/users/talumbau/received_events", "type": "User", "site_admin": false}, "created_at": "2014-05-12T19:31:19Z", "updated_at": "2014-05-12T19:31:19Z", "author_association": "CONTRIBUTOR", "body": "+1 for merge.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/42877023/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/43116172", "html_url": "https://github.com/libdynd/libdynd/pull/43#issuecomment-43116172", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/43", "id": 43116172, "user": {"login": "mrocklin", "id": 306380, "avatar_url": "https://avatars3.githubusercontent.com/u/306380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrocklin", "html_url": "https://github.com/mrocklin", "followers_url": "https://api.github.com/users/mrocklin/followers", "following_url": "https://api.github.com/users/mrocklin/following{/other_user}", "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions", "organizations_url": "https://api.github.com/users/mrocklin/orgs", "repos_url": "https://api.github.com/users/mrocklin/repos", "events_url": "https://api.github.com/users/mrocklin/events{/privacy}", "received_events_url": "https://api.github.com/users/mrocklin/received_events", "type": "User", "site_admin": false}, "created_at": "2014-05-14T18:07:20Z", "updated_at": "2014-05-14T18:07:20Z", "author_association": "NONE", "body": "Can you motivate the name `arrfunc`?\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/43116172/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/43116419", "html_url": "https://github.com/libdynd/libdynd/pull/43#issuecomment-43116419", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/43", "id": 43116419, "user": {"login": "mrocklin", "id": 306380, "avatar_url": "https://avatars3.githubusercontent.com/u/306380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrocklin", "html_url": "https://github.com/mrocklin", "followers_url": "https://api.github.com/users/mrocklin/followers", "following_url": "https://api.github.com/users/mrocklin/following{/other_user}", "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions", "organizations_url": "https://api.github.com/users/mrocklin/orgs", "repos_url": "https://api.github.com/users/mrocklin/repos", "events_url": "https://api.github.com/users/mrocklin/events{/privacy}", "received_events_url": "https://api.github.com/users/mrocklin/received_events", "type": "User", "site_admin": false}, "created_at": "2014-05-14T18:09:11Z", "updated_at": "2014-05-14T18:09:11Z", "author_association": "NONE", "body": "Is there anything in here that isn't just a renaming?  Are you able to perform these changes with developer tools or is this a lot of grepping?\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/43116419/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/43117364", "html_url": "https://github.com/libdynd/libdynd/pull/43#issuecomment-43117364", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/43", "id": 43117364, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-05-14T18:16:57Z", "updated_at": "2014-05-14T18:16:57Z", "author_association": "OWNER", "body": "The name arrfunc came out of some discussion with TJ. It's a typed array function.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/43117364/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/43117674", "html_url": "https://github.com/libdynd/libdynd/pull/43#issuecomment-43117674", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/43", "id": 43117674, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-05-14T18:19:18Z", "updated_at": "2014-05-14T18:19:18Z", "author_association": "OWNER", "body": "No, it's all renaming, and I don't have any tools that can do this with some semantic knowledge. http://clang.llvm.org/docs/LibTooling.html is making it a possibility to do changes like this that way, though.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/43117674/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/43117703", "html_url": "https://github.com/libdynd/libdynd/pull/43#issuecomment-43117703", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/43", "id": 43117703, "user": {"login": "mrocklin", "id": 306380, "avatar_url": "https://avatars3.githubusercontent.com/u/306380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrocklin", "html_url": "https://github.com/mrocklin", "followers_url": "https://api.github.com/users/mrocklin/followers", "following_url": "https://api.github.com/users/mrocklin/following{/other_user}", "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions", "organizations_url": "https://api.github.com/users/mrocklin/orgs", "repos_url": "https://api.github.com/users/mrocklin/repos", "events_url": "https://api.github.com/users/mrocklin/events{/privacy}", "received_events_url": "https://api.github.com/users/mrocklin/received_events", "type": "User", "site_admin": false}, "created_at": "2014-05-14T18:19:32Z", "updated_at": "2014-05-14T18:19:32Z", "author_association": "NONE", "body": "What does typed array function mean exactly?  Is this a new concept?\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/43117703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/43118710", "html_url": "https://github.com/libdynd/libdynd/pull/43#issuecomment-43118710", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/43", "id": 43118710, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-05-14T18:27:38Z", "updated_at": "2014-05-14T18:27:38Z", "author_association": "OWNER", "body": "The features of it that I'm considering important to have are:\n- Can be scalar or array: e.g. scalar add with type (int32, int32) -> int32, lifted version of that add with type (A... \\* int32, A... \\* int32) -> A... \\* int32\n- Lowers to a ckernel for execution\n- Composable, so dynd would grow a set of functions which assemble together arrfuncs. There is already some of this in the lifting mechanism, for example.\n\nOne thing I haven't worked out is where to put or how to structure the extra keyword parameters that can affect the output type like was done in blaze functions. I think that needs to go in here too.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/43118710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/43129535", "html_url": "https://github.com/libdynd/libdynd/pull/43#issuecomment-43129535", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/43", "id": 43129535, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-05-14T19:57:23Z", "updated_at": "2014-05-14T19:57:23Z", "author_association": "OWNER", "body": "The next steps will be to incrementally tweak the arrfunc abstraction a bit, I think after a few iterations of that the choice of name will prove to be good or need changing.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/43129535/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/43424374", "html_url": "https://github.com/libdynd/libdynd/pull/45#issuecomment-43424374", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/45", "id": 43424374, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-05-17T21:16:37Z", "updated_at": "2014-05-17T21:17:02Z", "author_association": "OWNER", "body": "When I try to build this in MSVC2013, here are the first errors that show up:\n\n```\n2>  yn.c\n2>d:\\develop\\libdynd\\thirdparty\\cephes\\mconf.h(76): error C2054: expected '(' to follow 'inline'\n2>d:\\develop\\libdynd\\thirdparty\\cephes\\mconf.h(77): error C2085: '__npy_inff' : not in formal parameter list\n2>d:\\develop\\libdynd\\thirdparty\\cephes\\mconf.h(77): error C2143: syntax error : missing ';' before '{'\n2>d:\\develop\\libdynd\\thirdparty\\cephes\\mconf.h(82): error C2054: expected '(' to follow 'inline'\n2>d:\\develop\\libdynd\\thirdparty\\cephes\\mconf.h(83): error C2085: '__npy_nanf' : not in formal parameter list\n2>d:\\develop\\libdynd\\thirdparty\\cephes\\mconf.h(83): error C2143: syntax error : missing ';' before '{'\n2>d:\\develop\\libdynd\\thirdparty\\cephes\\mconf.h(88): error C2054: expected '(' to follow 'inline'\n2>d:\\develop\\libdynd\\thirdparty\\cephes\\mconf.h(89): error C2085: '__npy_pzerof' : not in formal parameter list\n2>d:\\develop\\libdynd\\thirdparty\\cephes\\mconf.h(89): error C2143: syntax error : missing ';' before '{'\n2>d:\\develop\\libdynd\\thirdparty\\cephes\\mconf.h(94): error C2054: expected '(' to follow 'inline'\n2>d:\\develop\\libdynd\\thirdparty\\cephes\\mconf.h(95): error C2085: '__npy_nzerof' : not in formal parameter list\n2>d:\\develop\\libdynd\\thirdparty\\cephes\\mconf.h(95): error C2143: syntax error : missing ';' before '{'\n2>d:\\develop\\libdynd\\thirdparty\\cephes\\protos.h(10): warning C4273: 'acosh' : inconsistent dll linkage\n2>          C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\math.h(475) : see previous definition of 'acosh'\n```\n\nBecause we're in C++, I think using `std::numeric_limits<T>::infinity()`, `std::numeric_limits<T>::quiet_NaN()`, etc would be reasonable.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/43424374/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/43539076", "html_url": "https://github.com/libdynd/libdynd/pull/48#issuecomment-43539076", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/48", "id": 43539076, "user": {"login": "mrocklin", "id": 306380, "avatar_url": "https://avatars3.githubusercontent.com/u/306380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrocklin", "html_url": "https://github.com/mrocklin", "followers_url": "https://api.github.com/users/mrocklin/followers", "following_url": "https://api.github.com/users/mrocklin/following{/other_user}", "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions", "organizations_url": "https://api.github.com/users/mrocklin/orgs", "repos_url": "https://api.github.com/users/mrocklin/repos", "events_url": "https://api.github.com/users/mrocklin/events{/privacy}", "received_events_url": "https://api.github.com/users/mrocklin/received_events", "type": "User", "site_admin": false}, "created_at": "2014-05-19T18:26:57Z", "updated_at": "2014-05-19T18:26:57Z", "author_association": "NONE", "body": "Awesome.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/43539076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/43547093", "html_url": "https://github.com/libdynd/libdynd/pull/44#issuecomment-43547093", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/44", "id": 43547093, "user": {"login": "talumbau", "id": 1891418, "avatar_url": "https://avatars1.githubusercontent.com/u/1891418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/talumbau", "html_url": "https://github.com/talumbau", "followers_url": "https://api.github.com/users/talumbau/followers", "following_url": "https://api.github.com/users/talumbau/following{/other_user}", "gists_url": "https://api.github.com/users/talumbau/gists{/gist_id}", "starred_url": "https://api.github.com/users/talumbau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/talumbau/subscriptions", "organizations_url": "https://api.github.com/users/talumbau/orgs", "repos_url": "https://api.github.com/users/talumbau/repos", "events_url": "https://api.github.com/users/talumbau/events{/privacy}", "received_events_url": "https://api.github.com/users/talumbau/received_events", "type": "User", "site_admin": false}, "created_at": "2014-05-19T19:43:32Z", "updated_at": "2014-05-19T19:43:32Z", "author_association": "CONTRIBUTOR", "body": "(retroactive) +1\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/43547093/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/43547909", "html_url": "https://github.com/libdynd/libdynd/pull/48#issuecomment-43547909", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/48", "id": 43547909, "user": {"login": "talumbau", "id": 1891418, "avatar_url": "https://avatars1.githubusercontent.com/u/1891418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/talumbau", "html_url": "https://github.com/talumbau", "followers_url": "https://api.github.com/users/talumbau/followers", "following_url": "https://api.github.com/users/talumbau/following{/other_user}", "gists_url": "https://api.github.com/users/talumbau/gists{/gist_id}", "starred_url": "https://api.github.com/users/talumbau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/talumbau/subscriptions", "organizations_url": "https://api.github.com/users/talumbau/orgs", "repos_url": "https://api.github.com/users/talumbau/repos", "events_url": "https://api.github.com/users/talumbau/events{/privacy}", "received_events_url": "https://api.github.com/users/talumbau/received_events", "type": "User", "site_admin": false}, "created_at": "2014-05-19T19:51:26Z", "updated_at": "2014-05-19T19:51:26Z", "author_association": "CONTRIBUTOR", "body": "I agree with @mrocklin \n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/43547909/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/43970070", "html_url": "https://github.com/libdynd/libdynd/pull/45#issuecomment-43970070", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/45", "id": 43970070, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-05-23T04:23:51Z", "updated_at": "2014-05-23T04:23:51Z", "author_association": "OWNER", "body": "Looks good to me. After fixing up the things I've noted, and appending info about the cephes license to LICENSE.md, will go ahead and merge.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/43970070/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/44877664", "html_url": "https://github.com/libdynd/libdynd/pull/54#issuecomment-44877664", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/54", "id": 44877664, "user": {"login": "talumbau", "id": 1891418, "avatar_url": "https://avatars1.githubusercontent.com/u/1891418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/talumbau", "html_url": "https://github.com/talumbau", "followers_url": "https://api.github.com/users/talumbau/followers", "following_url": "https://api.github.com/users/talumbau/following{/other_user}", "gists_url": "https://api.github.com/users/talumbau/gists{/gist_id}", "starred_url": "https://api.github.com/users/talumbau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/talumbau/subscriptions", "organizations_url": "https://api.github.com/users/talumbau/orgs", "repos_url": "https://api.github.com/users/talumbau/repos", "events_url": "https://api.github.com/users/talumbau/events{/privacy}", "received_events_url": "https://api.github.com/users/talumbau/received_events", "type": "User", "site_admin": false}, "created_at": "2014-06-02T19:05:07Z", "updated_at": "2014-06-02T19:05:07Z", "author_association": "CONTRIBUTOR", "body": "+1 with fix for option[option[T]]\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/44877664/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/45361398", "html_url": "https://github.com/libdynd/libdynd/pull/55#issuecomment-45361398", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/55", "id": 45361398, "user": {"login": "talumbau", "id": 1891418, "avatar_url": "https://avatars1.githubusercontent.com/u/1891418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/talumbau", "html_url": "https://github.com/talumbau", "followers_url": "https://api.github.com/users/talumbau/followers", "following_url": "https://api.github.com/users/talumbau/following{/other_user}", "gists_url": "https://api.github.com/users/talumbau/gists{/gist_id}", "starred_url": "https://api.github.com/users/talumbau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/talumbau/subscriptions", "organizations_url": "https://api.github.com/users/talumbau/orgs", "repos_url": "https://api.github.com/users/talumbau/repos", "events_url": "https://api.github.com/users/talumbau/events{/privacy}", "received_events_url": "https://api.github.com/users/talumbau/received_events", "type": "User", "site_admin": false}, "created_at": "2014-06-06T17:14:43Z", "updated_at": "2014-06-06T17:14:43Z", "author_association": "CONTRIBUTOR", "body": "LGTM, as I commented before (but apparently it got lost?), would like to see template techniques used to reduce size of option type implementation, e.g. identical implementations for date, datetime, and time. +1 if Travis CI doesn't complain!\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/45361398/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/45393150", "html_url": "https://github.com/libdynd/libdynd/issues/56#issuecomment-45393150", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/56", "id": 45393150, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-06-06T23:15:05Z", "updated_at": "2014-06-06T23:15:05Z", "author_association": "OWNER", "body": "I've split up the files that are using the most memory (elwise.hpp and test_elwise.cpp) to try and reduce memory usage, can you try this and see if it helped?\n\n@izaid do you have any ideas for what to try?\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/45393150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/45397624", "html_url": "https://github.com/libdynd/libdynd/issues/56#issuecomment-45397624", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/56", "id": 45397624, "user": {"login": "momenezes", "id": 116143, "avatar_url": "https://avatars3.githubusercontent.com/u/116143?v=4", "gravatar_id": "", "url": "https://api.github.com/users/momenezes", "html_url": "https://github.com/momenezes", "followers_url": "https://api.github.com/users/momenezes/followers", "following_url": "https://api.github.com/users/momenezes/following{/other_user}", "gists_url": "https://api.github.com/users/momenezes/gists{/gist_id}", "starred_url": "https://api.github.com/users/momenezes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/momenezes/subscriptions", "organizations_url": "https://api.github.com/users/momenezes/orgs", "repos_url": "https://api.github.com/users/momenezes/repos", "events_url": "https://api.github.com/users/momenezes/events{/privacy}", "received_events_url": "https://api.github.com/users/momenezes/received_events", "type": "User", "site_admin": false}, "created_at": "2014-06-07T01:16:23Z", "updated_at": "2014-06-07T01:16:23Z", "author_association": "NONE", "body": "Hi,\n\nAlmost there; it seems that compilation have progressed but still geting segfault.\n\n```\nmake[2]: Entering directory `/home/mario/progs/python/src/libdynd/build'\n/usr/bin/cmake -E cmake_progress_report /home/mario/progs/python/src/libdynd/build/CMakeFiles \n[100%] Building CXX object examples/CMakeFiles/simple_example.dir/simple_example.cpp.o\ncd /home/mario/progs/python/src/libdynd/build/examples && /usr/bin/c++   -  DDYND_ELWISE_MAX=7 -g -fomit-frame-pointer -fstrict-aliasing -fPIC -Wall -Wextra -Werror -Wno-missing-field-initializers -fmax-errors=20 -std=c++11 -O2 -g -DNDEBUG -I/home/mario/progs/python/src/libdynd/thirdparty/datetime/include -I/home/mario/progs/python/src/libdynd/include -I/home/mario/progs/python/src/libdynd/thirdparty/utf8/source -I/home/mario/progs/python/src/libdynd/build/include -I/home/mario/progs/python/src/libdynd/examples/../include    -o CMakeFiles/simple_example.dir/simple_example.cpp.o -c  /home/mario/progs/python/src/libdynd/examples/simple_example.cpp\nIn file included from /home/mario/progs/python/src/libdynd/include/dynd/func/elwise.hpp:14:0,\n             from /home/mario/progs/python/src/libdynd/examples/simple_example.cpp:17:\n/home/mario/progs/python/src/libdynd/include/dynd/func/elwise_callrefres.hpp:162:1: internal compiler error: Segmentation Fault\n DYND_PP_JOIN_MAP(CALL_REF_RES, (), DYND_PP_RANGE(1, DYND_PP_INC(DYND_ELWISE_MAX)))\n ^\nPlease submit a full bug report,\nwith preprocessed source if appropriate.\n```\n\nThis machine has only 4GB of memory, which, in spite of being a modest amount, I think is enough for such compilation.\n\nThanks for your attention\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/45397624/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/45398145", "html_url": "https://github.com/libdynd/libdynd/issues/56#issuecomment-45398145", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/56", "id": 45398145, "user": {"login": "momenezes", "id": 116143, "avatar_url": "https://avatars3.githubusercontent.com/u/116143?v=4", "gravatar_id": "", "url": "https://api.github.com/users/momenezes", "html_url": "https://github.com/momenezes", "followers_url": "https://api.github.com/users/momenezes/followers", "following_url": "https://api.github.com/users/momenezes/following{/other_user}", "gists_url": "https://api.github.com/users/momenezes/gists{/gist_id}", "starred_url": "https://api.github.com/users/momenezes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/momenezes/subscriptions", "organizations_url": "https://api.github.com/users/momenezes/orgs", "repos_url": "https://api.github.com/users/momenezes/repos", "events_url": "https://api.github.com/users/momenezes/events{/privacy}", "received_events_url": "https://api.github.com/users/momenezes/received_events", "type": "User", "site_admin": false}, "created_at": "2014-06-07T01:42:04Z", "updated_at": "2014-06-07T01:42:04Z", "author_association": "NONE", "body": "Hi again,\n\n After updating my local repo, I forgot to `rm -rf build` to rebuild all makefiles.\n\n I, then, did this and seems that now the compilation succeed.\n\nthanks for the fix.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/45398145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/45530655", "html_url": "https://github.com/libdynd/libdynd/issues/56#issuecomment-45530655", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/56", "id": 45530655, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-06-09T19:06:50Z", "updated_at": "2014-06-09T19:06:50Z", "author_association": "OWNER", "body": "Thanks for reporting that, and glad it works now!\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/45530655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/45665841", "html_url": "https://github.com/libdynd/libdynd/pull/58#issuecomment-45665841", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/58", "id": 45665841, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-06-10T20:18:00Z", "updated_at": "2014-06-10T20:18:00Z", "author_association": "OWNER", "body": "Merging - this PR consists of function signature changes/renamings and updates to reflect them.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/45665841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/46718737", "html_url": "https://github.com/libdynd/libdynd/issues/62#issuecomment-46718737", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/62", "id": 46718737, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-06-20T19:43:34Z", "updated_at": "2014-06-20T19:43:34Z", "author_association": "OWNER", "body": "Having arrays generally be created immutable is basically an experiment to see how far this can go. Without deferred evaluation happening everywhere, it looks like this might not be as reasonable an option.\n\nIn NumPy, there's an inconsistency around this related to the array scalars, which are immutable (except for the struct one which is sort of not), and which get returned when you hit zero dimensions. So code like\n\n```\nv = a[1]\nv[...] = 100\n```\n\nworks if `a` has two or more dimensions, but not if `a` has one dimension.\n\nWhen a dynd array is immutable, it should (in the future) be possible to use it as a key in a dictionary, otherwise not. I guess this boils down to the design question of how to cleanly support mutable computations while also getting some of the nice properties with immutability. What directions would you like to see this go?\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/46718737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/46794583", "html_url": "https://github.com/libdynd/libdynd/issues/62#issuecomment-46794583", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/62", "id": 46794583, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2014-06-22T22:10:49Z", "updated_at": "2014-06-22T22:10:49Z", "author_association": "OWNER", "body": "Alright, I understand the idea here. I don't think arrays should be immutable by default as there are too many times arrays are constructed as an intermediate part of a calculation. Without thinking about this too deeply, if I was to come up with some sort of principle, it would be the following:\n\nArrays should, by default, not be immutable. Arrays which represent scalars should, by default, be immutable.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/46794583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/48137341", "html_url": "https://github.com/libdynd/libdynd/pull/75#issuecomment-48137341", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/75", "id": 48137341, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-07-07T03:04:48Z", "updated_at": "2014-07-07T03:04:48Z", "author_association": "OWNER", "body": "I'm going to merge this, I think it's good as is, and any refinements can be follow-up PRs.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/48137341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/48827186", "html_url": "https://github.com/libdynd/libdynd/issues/80#issuecomment-48827186", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/80", "id": 48827186, "user": {"login": "cpcloud", "id": 417981, "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpcloud", "html_url": "https://github.com/cpcloud", "followers_url": "https://api.github.com/users/cpcloud/followers", "following_url": "https://api.github.com/users/cpcloud/following{/other_user}", "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions", "organizations_url": "https://api.github.com/users/cpcloud/orgs", "repos_url": "https://api.github.com/users/cpcloud/repos", "events_url": "https://api.github.com/users/cpcloud/events{/privacy}", "received_events_url": "https://api.github.com/users/cpcloud/received_events", "type": "User", "site_admin": false}, "created_at": "2014-07-12T23:44:12Z", "updated_at": "2014-07-12T23:44:12Z", "author_association": "CONTRIBUTOR", "body": "Moving to dynd-python.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/48827186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/48852428", "html_url": "https://github.com/libdynd/libdynd/pull/81#issuecomment-48852428", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/81", "id": 48852428, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-07-13T21:28:52Z", "updated_at": "2014-07-13T21:28:52Z", "author_association": "OWNER", "body": "Thanks for the fix!\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/48852428/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/48852436", "html_url": "https://github.com/libdynd/libdynd/pull/81#issuecomment-48852436", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/81", "id": 48852436, "user": {"login": "cpcloud", "id": 417981, "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpcloud", "html_url": "https://github.com/cpcloud", "followers_url": "https://api.github.com/users/cpcloud/followers", "following_url": "https://api.github.com/users/cpcloud/following{/other_user}", "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions", "organizations_url": "https://api.github.com/users/cpcloud/orgs", "repos_url": "https://api.github.com/users/cpcloud/repos", "events_url": "https://api.github.com/users/cpcloud/events{/privacy}", "received_events_url": "https://api.github.com/users/cpcloud/received_events", "type": "User", "site_admin": false}, "created_at": "2014-07-13T21:29:30Z", "updated_at": "2014-07-13T21:29:30Z", "author_association": "CONTRIBUTOR", "body": "sure thing!\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/48852436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/49049826", "html_url": "https://github.com/libdynd/libdynd/issues/78#issuecomment-49049826", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/78", "id": 49049826, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2014-07-15T15:34:25Z", "updated_at": "2014-07-15T15:34:25Z", "author_association": "OWNER", "body": "Any thoughts on this, @mwiebe?\n\nWhat is the right way to get dim_size's of individual dimensions? Going through get_shape feels a bit unnecessary, as it has to create the std::vector. Is that the preferred way to do this or should we setup a convenience method?\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/49049826/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/49050165", "html_url": "https://github.com/libdynd/libdynd/issues/62#issuecomment-49050165", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/62", "id": 49050165, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2014-07-15T15:36:38Z", "updated_at": "2014-07-15T15:36:38Z", "author_association": "OWNER", "body": "What do you think about disabling this? Right now, it is getting a bit complex to use arrays in simple expressions, as they are always created immutable.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/49050165/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/49135995", "html_url": "https://github.com/libdynd/libdynd/issues/62#issuecomment-49135995", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/62", "id": 49135995, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-07-16T08:17:35Z", "updated_at": "2014-07-16T08:17:35Z", "author_association": "OWNER", "body": "Yeah, let's change the default to readwrite instead of immutable. Forcing the result of possibly large immediately evaluated expressions to immutable doesn't make sense.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/49135995/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/49137021", "html_url": "https://github.com/libdynd/libdynd/issues/78#issuecomment-49137021", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/78", "id": 49137021, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-07-16T08:31:05Z", "updated_at": "2014-07-16T08:31:05Z", "author_association": "OWNER", "body": "I've implemented/merged a change with the hope to make it easier to work with purely strided arrays, maybe this helps in the cases you're running into? This change had a few elements to it:\n1. The arrmeta of all the types of strided dims is the same, redundantly storing the information from fixed_dim and cfixed_dim. I created a type with the dim_size/stride pair called size_stride_t which is how the arrmeta is laid out.\n2. The type has a new field, accessible as tp.get_strided_ndim(), which indicates how many adjacent strided dimensions are in a row at the beginning of the type. This is also the number of size_stride_t structs at the beginning of its corresponding arrmeta.\n3. To provide an interface to this, I added another overload of tp.get_as_strided, which produces information for the number of dimensions requested instead of just one.\n\nI believe your use case is using strided arrays, so checking the strided_ndim and using the size_stride_t might be an efficient and easy way to access this info? Maybe it still needs some API tweaks or additions to be more convenient.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/49137021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/49177091", "html_url": "https://github.com/libdynd/libdynd/issues/78#issuecomment-49177091", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/78", "id": 49177091, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2014-07-16T14:52:53Z", "updated_at": "2014-07-16T14:52:53Z", "author_association": "OWNER", "body": "Just had a look at this, and it is much better. One further thought for convenience.\n\nWhy don't we add a new method to nd::array called get_dim_size(intptr_t i), which returns the size of the ith dimension? It can use get_strided_ndim() and then directly grab the dim_size from the array metadata. That should be very efficient. If the dimension is beyond that returned by get_strided_ndim(), then it'll have to go through types, but okay.\n\nThe thing is, dealing with datashapes and array metadata is very powerful, but sometimes it is a bit inconvenient if you are doing high-level calculations. Other times, though, it is great.\n\nI don't mind writing this if we settle on the API.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/49177091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/49212074", "html_url": "https://github.com/libdynd/libdynd/pull/83#issuecomment-49212074", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/83", "id": 49212074, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-07-16T19:08:28Z", "updated_at": "2014-07-16T19:08:28Z", "author_association": "OWNER", "body": "Looking through this, a few questions/notes:\n- For axis/axes-style arguments, I've made things support python-style negative indices, is this something we want in general?\n- Also for the axes argument, we probably want to bounds check them\n- The C++11 initializer_list would be nice to use for the axes. I guess for code in C++11, it will already work by creating a temporary vector to pass in.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/49212074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/51230751", "html_url": "https://github.com/libdynd/libdynd/pull/87#issuecomment-51230751", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/87", "id": 51230751, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-08-05T17:27:14Z", "updated_at": "2014-08-05T17:27:14Z", "author_association": "OWNER", "body": "Seems reasonable to me, merging\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/51230751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/51232355", "html_url": "https://github.com/libdynd/libdynd/pull/88#issuecomment-51232355", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/88", "id": 51232355, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-08-05T17:39:06Z", "updated_at": "2014-08-05T17:39:06Z", "author_association": "OWNER", "body": "Thanks for the fix!\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/51232355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/51234990", "html_url": "https://github.com/libdynd/libdynd/pull/89#issuecomment-51234990", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/89", "id": 51234990, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-08-05T17:58:58Z", "updated_at": "2014-08-05T17:58:58Z", "author_association": "OWNER", "body": "I don't think we want to add null checks everywhere in the C++ layer like this, rather put them a layer up like in the python exposure where we want more safety over performance.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/51234990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/51235393", "html_url": "https://github.com/libdynd/libdynd/pull/89#issuecomment-51235393", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/89", "id": 51235393, "user": {"login": "cpcloud", "id": 417981, "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpcloud", "html_url": "https://github.com/cpcloud", "followers_url": "https://api.github.com/users/cpcloud/followers", "following_url": "https://api.github.com/users/cpcloud/following{/other_user}", "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions", "organizations_url": "https://api.github.com/users/cpcloud/orgs", "repos_url": "https://api.github.com/users/cpcloud/repos", "events_url": "https://api.github.com/users/cpcloud/events{/privacy}", "received_events_url": "https://api.github.com/users/cpcloud/received_events", "type": "User", "site_admin": false}, "created_at": "2014-08-05T18:01:48Z", "updated_at": "2014-08-05T18:01:48Z", "author_association": "CONTRIBUTOR", "body": "sounds good, i'll make the change\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/51235393/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/51417443", "html_url": "https://github.com/libdynd/libdynd/issues/85#issuecomment-51417443", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/85", "id": 51417443, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-08-07T00:49:06Z", "updated_at": "2014-08-07T00:49:06Z", "author_association": "OWNER", "body": "This was fixed in dynd-python.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/51417443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/51417600", "html_url": "https://github.com/libdynd/libdynd/issues/78#issuecomment-51417600", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/78", "id": 51417600, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-08-07T00:51:17Z", "updated_at": "2014-08-07T00:51:17Z", "author_association": "OWNER", "body": "Adding the get_dim_size(intptr_t i) method as you're describing sounds good to me.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/51417600/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/51418492", "html_url": "https://github.com/libdynd/libdynd/issues/6#issuecomment-51418492", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/6", "id": 51418492, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-08-07T01:04:04Z", "updated_at": "2014-08-07T01:04:04Z", "author_association": "OWNER", "body": "This works now, likely fixed by the python assignment arrfunc changes in dynd-python.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/51418492/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/51418560", "html_url": "https://github.com/libdynd/libdynd/issues/7#issuecomment-51418560", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/7", "id": 51418560, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-08-07T01:05:11Z", "updated_at": "2014-08-07T01:05:11Z", "author_association": "OWNER", "body": "This works now.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/51418560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/52658967", "html_url": "https://github.com/libdynd/libdynd/pull/95#issuecomment-52658967", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/95", "id": 52658967, "user": {"login": "aterrel", "id": 30583, "avatar_url": "https://avatars1.githubusercontent.com/u/30583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aterrel", "html_url": "https://github.com/aterrel", "followers_url": "https://api.github.com/users/aterrel/followers", "following_url": "https://api.github.com/users/aterrel/following{/other_user}", "gists_url": "https://api.github.com/users/aterrel/gists{/gist_id}", "starred_url": "https://api.github.com/users/aterrel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aterrel/subscriptions", "organizations_url": "https://api.github.com/users/aterrel/orgs", "repos_url": "https://api.github.com/users/aterrel/repos", "events_url": "https://api.github.com/users/aterrel/events{/privacy}", "received_events_url": "https://api.github.com/users/aterrel/received_events", "type": "User", "site_admin": false}, "created_at": "2014-08-19T16:18:01Z", "updated_at": "2014-08-19T16:18:01Z", "author_association": "NONE", "body": "no description what is this doing?\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/52658967/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/53072762", "html_url": "https://github.com/libdynd/libdynd/issues/78#issuecomment-53072762", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/78", "id": 53072762, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2014-08-22T15:12:39Z", "updated_at": "2014-08-22T15:12:39Z", "author_association": "OWNER", "body": "Done with PR, see https://github.com/ContinuumIO/libdynd/pull/100\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/53072762/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/53158455", "html_url": "https://github.com/libdynd/libdynd/issues/103#issuecomment-53158455", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/103", "id": 53158455, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2014-08-23T16:51:27Z", "updated_at": "2014-08-23T16:51:27Z", "author_association": "OWNER", "body": "I'll point out that the fft interface already has it's own cleanup function, that gets called via atexit https://github.com/ContinuumIO/libdynd/blob/5bb5385b09e299d9e9eada35b0b6a75f8705b7d4/src/dynd/fft.cpp#L23\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/53158455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/53897196", "html_url": "https://github.com/libdynd/libdynd/pull/110#issuecomment-53897196", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/110", "id": 53897196, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-08-29T16:14:33Z", "updated_at": "2014-08-29T16:14:33Z", "author_association": "OWNER", "body": "Looks good! I didn't see a test case of a label being a number `{'1234' : int}`, that might be nice to include as well.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/53897196/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/53900753", "html_url": "https://github.com/libdynd/libdynd/pull/110#issuecomment-53900753", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/110", "id": 53900753, "user": {"login": "nevermindewe", "id": 5727768, "avatar_url": "https://avatars1.githubusercontent.com/u/5727768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nevermindewe", "html_url": "https://github.com/nevermindewe", "followers_url": "https://api.github.com/users/nevermindewe/followers", "following_url": "https://api.github.com/users/nevermindewe/following{/other_user}", "gists_url": "https://api.github.com/users/nevermindewe/gists{/gist_id}", "starred_url": "https://api.github.com/users/nevermindewe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nevermindewe/subscriptions", "organizations_url": "https://api.github.com/users/nevermindewe/orgs", "repos_url": "https://api.github.com/users/nevermindewe/repos", "events_url": "https://api.github.com/users/nevermindewe/events{/privacy}", "received_events_url": "https://api.github.com/users/nevermindewe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-08-29T16:43:50Z", "updated_at": "2014-08-29T16:43:50Z", "author_association": "CONTRIBUTOR", "body": "Good catch. I just added a test for that.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/53900753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/53905669", "html_url": "https://github.com/libdynd/libdynd/issues/78#issuecomment-53905669", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/78", "id": 53905669, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-08-29T17:25:25Z", "updated_at": "2014-08-29T17:25:25Z", "author_association": "OWNER", "body": "Merged\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/53905669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/54759222", "html_url": "https://github.com/libdynd/libdynd/pull/111#issuecomment-54759222", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/111", "id": 54759222, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2014-09-07T20:21:24Z", "updated_at": "2014-09-07T20:21:24Z", "author_association": "OWNER", "body": "I think we can merge this now, though more to do obviously.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/54759222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/54769359", "html_url": "https://github.com/libdynd/libdynd/issues/112#issuecomment-54769359", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/112", "id": 54769359, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-09-08T01:51:28Z", "updated_at": "2014-09-08T01:51:28Z", "author_association": "OWNER", "body": "Defining this kind of coding convention in terms of clang-format (http://clang.llvm.org/docs/ClangFormat.html), and using it to reformat code that's inconsistent is the approach I prefer. I've created .clang-format files in the repo (https://github.com/ContinuumIO/libdynd/blob/master/.clang-format), and if you set up clang-format keybindings in your text editor, it's generally just a single keystroke to fix things up.\n\nThat doesn't answer what is the one true style for libdynd. I started with size-4 indentation, but it wasn't working great in some cases, so I switched it to size-2. That means the code base is also presently inconsistent on that indentation amount.\n\nI've set options in the .clang-format file to do roughly the brace-style that I was using in the code prior to adding it. Have you got clang-format working in your editor, and what do you think of the results it's producing?\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/54769359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/54770255", "html_url": "https://github.com/libdynd/libdynd/pull/77#issuecomment-54770255", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/77", "id": 54770255, "user": {"login": "mrocklin", "id": 306380, "avatar_url": "https://avatars3.githubusercontent.com/u/306380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrocklin", "html_url": "https://github.com/mrocklin", "followers_url": "https://api.github.com/users/mrocklin/followers", "following_url": "https://api.github.com/users/mrocklin/following{/other_user}", "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions", "organizations_url": "https://api.github.com/users/mrocklin/orgs", "repos_url": "https://api.github.com/users/mrocklin/repos", "events_url": "https://api.github.com/users/mrocklin/events{/privacy}", "received_events_url": "https://api.github.com/users/mrocklin/received_events", "type": "User", "site_admin": false}, "created_at": "2014-09-08T02:12:31Z", "updated_at": "2014-09-08T02:12:31Z", "author_association": "NONE", "body": "I'd be very interested in seeing how the Python interface to this would look.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/54770255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/54771017", "html_url": "https://github.com/libdynd/libdynd/issues/98#issuecomment-54771017", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/98", "id": 54771017, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-09-08T02:30:07Z", "updated_at": "2014-09-08T02:30:07Z", "author_association": "OWNER", "body": "Handed off to Irwin\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/54771017/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/54850938", "html_url": "https://github.com/libdynd/libdynd/issues/114#issuecomment-54850938", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/114", "id": 54850938, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-09-08T16:53:50Z", "updated_at": "2014-09-08T16:53:50Z", "author_association": "OWNER", "body": "Yeah, sounds good to me. I made the name as it is to more tightly couple libdynd/dynd-python as things were changing rapidly.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/54850938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/55152150", "html_url": "https://github.com/libdynd/libdynd/issues/116#issuecomment-55152150", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/116", "id": 55152150, "user": {"login": "cpcloud", "id": 417981, "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpcloud", "html_url": "https://github.com/cpcloud", "followers_url": "https://api.github.com/users/cpcloud/followers", "following_url": "https://api.github.com/users/cpcloud/following{/other_user}", "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions", "organizations_url": "https://api.github.com/users/cpcloud/orgs", "repos_url": "https://api.github.com/users/cpcloud/repos", "events_url": "https://api.github.com/users/cpcloud/events{/privacy}", "received_events_url": "https://api.github.com/users/cpcloud/received_events", "type": "User", "site_admin": false}, "created_at": "2014-09-10T17:36:47Z", "updated_at": "2014-09-10T17:37:15Z", "author_association": "CONTRIBUTOR", "body": "So `...` currently means arbitrarily many arguments, each of an arbitrary type unless it's prefixed with a type variable or a concrete type?\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/55152150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/55152629", "html_url": "https://github.com/libdynd/libdynd/issues/116#issuecomment-55152629", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/116", "id": 55152629, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-09-10T17:40:04Z", "updated_at": "2014-09-10T17:40:04Z", "author_association": "OWNER", "body": "`...` currently means arbitrary dimensions, like `... * float32` matches against any number of dimensions followed by a float32. This is proposing to also use `...` to mean arbitrary many arguments when it appears by itself, with no `* Type` following it.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/55152629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/55188555", "html_url": "https://github.com/libdynd/libdynd/issues/116#issuecomment-55188555", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/116", "id": 55188555, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2014-09-10T21:49:46Z", "updated_at": "2014-09-10T21:49:46Z", "author_association": "OWNER", "body": "Just chiming in to say it seems elegant to me, and the double use isn't that big a deal.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/55188555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/55370957", "html_url": "https://github.com/libdynd/libdynd/issues/112#issuecomment-55370957", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/112", "id": 55370957, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-09-12T07:38:53Z", "updated_at": "2014-09-12T07:38:53Z", "author_association": "OWNER", "body": "More specifically to this bug, it looks like the reason for the inconsistency is that the style I was using before with if/else isn't one of the options, what I picked (Stroustrup) is slightly different:\n\nFrom http://clang.llvm.org/docs/ClangFormatStyleOptions.html#configurable-format-style-options\n\n> BreakBeforeBraces (BraceBreakingStyle)\n> The brace breaking style to use.\n> \n> Possible values:\n> \n> BS_Attach (in configuration: Attach) Always attach braces to surrounding context.\n> BS_Linux (in configuration: Linux) Like Attach, but break before braces on function, namespace and class definitions.\n> BS_Stroustrup (in configuration: Stroustrup) Like Attach, but break before function definitions, and \u2018else\u2019.\n> BS_Allman (in configuration: Allman) Always break before braces.\n> BS_GNU (in configuration: GNU) Always break before braces and add an extra level of indentation to braces of control statements, not to those of class, function or other definitions.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/55370957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/55547708", "html_url": "https://github.com/libdynd/libdynd/issues/117#issuecomment-55547708", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/117", "id": 55547708, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-09-15T02:15:10Z", "updated_at": "2014-09-15T02:15:10Z", "author_association": "OWNER", "body": "See https://github.com/CppCon/CppCon2014/tree/master/Presentations/Types%20Don't%20Know%20%23%20-%20Howard%20Hinnant%20-%20CppCon%202014\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/55547708/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/55547922", "html_url": "https://github.com/libdynd/libdynd/pull/119#issuecomment-55547922", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/119", "id": 55547922, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-09-15T02:20:41Z", "updated_at": "2014-09-15T02:20:41Z", "author_association": "OWNER", "body": "The implementation looks ok, but I have a question for how it affects the arrfunc design: How does it interact with composability of arrfuncs? For example let's say we have a chain_arrfunc operation:\n\n```\nnd::arrfunc af0 = ..., af1 = ...; // Signatures (T1) -> T2 and (T0) -> T1\nnd::arrfunc chained = chain_arrfunc(af0, af1); // Gets signature (T0) -> T2\n```\n\nBoth `af0` and `af1` use aux_buffer data, what does `chain_arrfunc` need to do?\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/55547922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/55574657", "html_url": "https://github.com/libdynd/libdynd/pull/119#issuecomment-55574657", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/119", "id": 55574657, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2014-09-15T10:40:53Z", "updated_at": "2014-09-15T10:40:53Z", "author_association": "OWNER", "body": "Currently, there are two ways to handle the above that should just work \"out of the box\". First, if the arrfuncs both expect the same aux_buffer subclass (or none) then it's fine. Second, one can define two aux_buffer subclasses, say my_aux_buffer0 (for af0) and my_aux_buffer1 (for af1). If one of these inherits from the other, then it should also work fine.\n\nI think these are good solutions to that problem. I don't think we can (should?) support chained arrfuncs that take totally different aux_buffers.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/55574657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/56147128", "html_url": "https://github.com/libdynd/libdynd/pull/119#issuecomment-56147128", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/119", "id": 56147128, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-09-19T07:51:09Z", "updated_at": "2014-09-19T07:51:54Z", "author_association": "OWNER", "body": "Looks alright to me, feel free to merge it after fixing the various spacing, naming things. I'll double check on the jenkins build tomorrow after it's in.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/56147128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/56490207", "html_url": "https://github.com/libdynd/libdynd/pull/120#issuecomment-56490207", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/120", "id": 56490207, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-09-23T08:39:11Z", "updated_at": "2014-09-23T08:39:11Z", "author_association": "OWNER", "body": "This one also needs a corresponding python bindings update to merge concurrently, I'll create that.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/56490207/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/56492051", "html_url": "https://github.com/libdynd/libdynd/pull/120#issuecomment-56492051", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/120", "id": 56492051, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-09-23T08:58:03Z", "updated_at": "2014-09-23T08:58:03Z", "author_association": "OWNER", "body": "One thing that needs to be tested is that passing a readonly or immutable array as any parameter of a non-const arrfunc raises an error.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/56492051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/56492171", "html_url": "https://github.com/libdynd/libdynd/pull/120#issuecomment-56492171", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/120", "id": 56492171, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2014-09-23T08:59:25Z", "updated_at": "2014-09-23T08:59:25Z", "author_association": "OWNER", "body": "Okay, I can add a test for that.\n\nI also probably just broke the Python bindings again (sorry) due to the new change in instantiate (aux_buffer \\* -> nd::array).\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/56492171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/57354783", "html_url": "https://github.com/libdynd/libdynd/issues/127#issuecomment-57354783", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/127", "id": 57354783, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-09-30T17:56:45Z", "updated_at": "2014-09-30T17:56:45Z", "author_association": "OWNER", "body": "Maybe we should consider setting up precompiled headers?\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/57354783/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/57359002", "html_url": "https://github.com/libdynd/libdynd/issues/127#issuecomment-57359002", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/127", "id": 57359002, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2014-09-30T18:23:20Z", "updated_at": "2014-09-30T18:23:20Z", "author_association": "OWNER", "body": "Yeah, that might be what we should do. Solution for now is to use clang.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/57359002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/57540066", "html_url": "https://github.com/libdynd/libdynd/issues/62#issuecomment-57540066", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/62", "id": 57540066, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2014-10-01T21:16:58Z", "updated_at": "2014-10-01T21:16:58Z", "author_association": "OWNER", "body": "Done, closed.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/57540066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/57715144", "html_url": "https://github.com/libdynd/libdynd/issues/114#issuecomment-57715144", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/114", "id": 57715144, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2014-10-02T21:46:57Z", "updated_at": "2014-10-02T21:46:57Z", "author_association": "OWNER", "body": "libdynd.so is now the default. We should probably add a version and make libdynd.so a symlink at some point.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/57715144/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/58020760", "html_url": "https://github.com/libdynd/libdynd/pull/134#issuecomment-58020760", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/134", "id": 58020760, "user": {"login": "mrocklin", "id": 306380, "avatar_url": "https://avatars3.githubusercontent.com/u/306380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrocklin", "html_url": "https://github.com/mrocklin", "followers_url": "https://api.github.com/users/mrocklin/followers", "following_url": "https://api.github.com/users/mrocklin/following{/other_user}", "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions", "organizations_url": "https://api.github.com/users/mrocklin/orgs", "repos_url": "https://api.github.com/users/mrocklin/repos", "events_url": "https://api.github.com/users/mrocklin/events{/privacy}", "received_events_url": "https://api.github.com/users/mrocklin/received_events", "type": "User", "site_admin": false}, "created_at": "2014-10-06T14:01:52Z", "updated_at": "2014-10-06T14:01:52Z", "author_association": "NONE", "body": "Should I be aware of anything here for Blaze compatibility?\n\nOn Mon, Oct 6, 2014 at 12:13 AM, Mark notifications@github.com wrote:\n\n> This is towards making the 'strided' dim type be an abstract type, and\n> have concrete arrays always used 'fixed' in the context they used strided\n> before.\n> \n> Most of the effort of this conversion is done, but there are still some\n> \n> ## crashes/failures in the tests, and the python connection needs updating.\n> \n> You can merge this Pull Request by running\n> \n>   git pull https://github.com/mwiebe/libdynd stridedtofixed\n> \n> Or view, comment on, or merge it at:\n> \n>   https://github.com/ContinuumIO/libdynd/pull/134\n> Commit Summary\n> - First pass towards replacing use of 'strided' with 'fixed' throughout\n> - Changes to implementation/tests, so only a few are crashing/failing\n>   still\n> \n> File Changes\n> - _M_ include/dynd/array.hpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-0 (116)\n> - _M_ include/dynd/arrmeta_holder.hpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-1 (6)\n> - _M_ include/dynd/buffer_storage.hpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-2 (3)\n> - _M_ include/dynd/ensure_immutable_contig.hpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-3 (3)\n> - _M_ include/dynd/func/arrfunc.hpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-4 (27)\n> - _M_ include/dynd/random.hpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-5 (22)\n> - _M_ include/dynd/type.hpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-6 (59)\n> - _M_ include/dynd/types/arrfunc_type.hpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-7 (4)\n> - _M_ include/dynd/types/base_expr_type.hpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-8 (4)\n> - _M_ include/dynd/types/base_memory_type.hpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-9 (12)\n> - _M_ include/dynd/types/base_tuple_type.hpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-10 (6)\n> - _M_ include/dynd/types/base_type.hpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-11 (16)\n> - _M_ include/dynd/types/busdate_type.hpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-12 (2)\n> - _M_ include/dynd/types/bytes_type.hpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-13 (4)\n> - _M_ include/dynd/types/categorical_type.hpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-14 (4)\n> - _M_ include/dynd/types/cfixed_dim_type.hpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-15 (10)\n> - _M_ include/dynd/types/char_type.hpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-16 (2)\n> - _M_ include/dynd/types/cstruct_type.hpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-17 (27)\n> - _M_ include/dynd/types/ctuple_type.hpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-18 (28)\n> - _M_ include/dynd/types/date_type.hpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-19 (2)\n> - _M_ include/dynd/types/datetime_type.hpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-20 (2)\n> - _M_ include/dynd/types/dim_fragment_type.hpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-21 (4)\n> - _M_ include/dynd/types/ellipsis_dim_type.hpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-22 (4)\n> - _M_ include/dynd/types/fixed_dim_type.hpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-23 (12)\n> - _M_ include/dynd/types/fixedbytes_type.hpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-24 (2)\n> - _M_ include/dynd/types/fixedstring_type.hpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-25 (2)\n> - _M_ include/dynd/types/funcproto_type.hpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-26 (13)\n> - _M_ include/dynd/types/json_type.hpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-27 (4)\n> - _M_ include/dynd/types/ndarrayarg_type.hpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-28 (2)\n> - _M_ include/dynd/types/option_type.hpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-29 (7)\n> - _M_ include/dynd/types/pointer_type.hpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-30 (10)\n> - _M_ include/dynd/types/strided_dim_type.hpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-31 (12)\n> - _M_ include/dynd/types/string_type.hpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-32 (4)\n> - _M_ include/dynd/types/struct_type.hpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-33 (27)\n> - _M_ include/dynd/types/time_type.hpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-34 (2)\n> - _M_ include/dynd/types/tuple_type.hpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-35 (30)\n> - _M_ include/dynd/types/type_type.hpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-36 (4)\n> - _M_ include/dynd/types/typevar_dim_type.hpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-37 (4)\n> - _M_ include/dynd/types/typevar_type.hpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-38 (4)\n> - _M_ include/dynd/types/var_dim_type.hpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-39 (10)\n> - _M_ include/dynd/types/void_pointer_type.hpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-40 (2)\n> - _M_ src/dynd/array.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-41 (508)\n> - _M_ src/dynd/dim_iter.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-42 (5)\n> - _M_ src/dynd/func/arrfunc.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-43 (25)\n> - _M_ src/dynd/func/chain_arrfunc.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-44 (20)\n> - _M_ src/dynd/func/copy_arrfunc.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-45 (14)\n> - _M_ src/dynd/func/lift_arrfunc.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-46 (67)\n> - _M_ src/dynd/func/multidispatch_arrfunc.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-47 (32)\n> - _M_ src/dynd/func/rolling_arrfunc.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-48 (25)\n> - _M_ src/dynd/func/take_arrfunc.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-49 (22)\n> - _M_ src/dynd/kernels/expression_assignment_kernels.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-50 (5)\n> - _M_ src/dynd/kernels/expression_comparison_kernels.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-51 (4)\n> - _M_ src/dynd/kernels/option_kernels.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-52 (6)\n> - _M_ src/dynd/random.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-53 (14)\n> - _M_ src/dynd/type.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-54 (63)\n> - _M_ src/dynd/types/arrfunc_type.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-55 (2)\n> - _M_ src/dynd/types/base_expr_type.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-56 (7)\n> - _M_ src/dynd/types/base_memory_type.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-57 (20)\n> - _M_ src/dynd/types/base_struct_type.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-58 (3)\n> - _M_ src/dynd/types/base_tuple_type.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-59 (27)\n> - _M_ src/dynd/types/base_type.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-60 (13)\n> - _M_ src/dynd/types/bytes_type.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-61 (2)\n> - _M_ src/dynd/types/categorical_type.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-62 (13)\n> - _M_ src/dynd/types/cfixed_dim_type.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-63 (78)\n> - _M_ src/dynd/types/cstruct_type.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-64 (17)\n> - _M_ src/dynd/types/ctuple_type.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-65 (14)\n> - _M_ src/dynd/types/dim_fragment_type.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-66 (3)\n> - _M_ src/dynd/types/ellipsis_dim_type.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-67 (3)\n> - _M_ src/dynd/types/fixed_dim_type.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-68 (210)\n> - _M_ src/dynd/types/funcproto_type.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-69 (15)\n> - _M_ src/dynd/types/json_type.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-70 (2)\n> - _M_ src/dynd/types/option_type.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-71 (11)\n> - _M_ src/dynd/types/pointer_type.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-72 (14)\n> - _M_ src/dynd/types/strided_dim_type.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-73 (55)\n> - _M_ src/dynd/types/string_type.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-74 (2)\n> - _M_ src/dynd/types/struct_type.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-75 (14)\n> - _M_ src/dynd/types/tuple_type.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-76 (14)\n> - _M_ src/dynd/types/type_substitute.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-77 (2)\n> - _M_ src/dynd/types/type_type.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-78 (8)\n> - _M_ src/dynd/types/typevar_dim_type.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-79 (3)\n> - _M_ src/dynd/types/typevar_type.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-80 (8)\n> - _M_ src/dynd/types/var_dim_type.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-81 (159)\n> - _M_ src/dynd/view.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-82 (9)\n> - _M_ tests/CMakeLists.txt\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-83 (1)\n> - _M_ tests/array/test_array.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-84 (98)\n> - _M_ tests/array/test_array_assign.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-85 (43)\n> - _M_ tests/array/test_array_range.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-86 (81)\n> - _M_ tests/array/test_array_views.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-87 (168)\n> - _M_ tests/array/test_arrmeta_holder.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-88 (6)\n> - _M_ tests/array/test_view.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-89 (80)\n> - _M_ tests/dynd_assertions.hpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-90 (53)\n> - _M_ tests/func/test_callable.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-91 (2)\n> - _M_ tests/func/test_elwise_callrefres.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-92 (8)\n> - _M_ tests/func/test_elwise_callretres.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-93 (4)\n> - _M_ tests/func/test_elwise_funcrefres.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-94 (8)\n> - _M_ tests/func/test_elwise_funcretres.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-95 (2)\n> - _M_ tests/func/test_elwise_methrefres.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-96 (8)\n> - _M_ tests/func/test_elwise_methretres.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-97 (2)\n> - _M_ tests/func/test_functor_arrfunc.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-98 (28)\n> - _M_ tests/func/test_lift_arrfunc.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-99 (9)\n> - _M_ tests/func/test_reduction.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-100 (69)\n> - _M_ tests/func/test_rolling.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-101 (4)\n> - _M_ tests/func/test_take.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-102 (6)\n> - _M_ tests/test_arithmetic_op.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-103 (10)\n> - _M_ tests/types/test_categorical_type.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-104 (4)\n> - _M_ tests/types/test_cfixed_dim_type.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-105 (12)\n> - _M_ tests/types/test_cstruct_type.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-106 (6)\n> - _M_ tests/types/test_date_type.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-107 (24)\n> - _M_ tests/types/test_fixed_dim_type.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-108 (67)\n> - _M_ tests/types/test_groupby_type.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-109 (55)\n> - _D_ tests/types/test_strided_dim_type.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-110 (148)\n> - _M_ tests/types/test_string_type.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-111 (11)\n> - _M_ tests/types/test_struct_type.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-112 (6)\n> - _M_ tests/types/test_symbolic_types.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-113 (2)\n> - _M_ tests/types/test_type_type.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-114 (2)\n> - _M_ tests/types/test_var_dim_type.cpp\n>   https://github.com/ContinuumIO/libdynd/pull/134/files#diff-115 (20)\n> \n> Patch Links:\n> - https://github.com/ContinuumIO/libdynd/pull/134.patch\n> - https://github.com/ContinuumIO/libdynd/pull/134.diff\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/ContinuumIO/libdynd/pull/134.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/58020760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/58043967", "html_url": "https://github.com/libdynd/libdynd/pull/135#issuecomment-58043967", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/135", "id": 58043967, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-10-06T16:24:13Z", "updated_at": "2014-10-06T16:24:13Z", "author_association": "OWNER", "body": "I think I've run into something like what you're seeing, where gcc had memory leaks and clang didn't. In my case it turned out to be a gcc bug, not sure about here.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/58043967/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/58048555", "html_url": "https://github.com/libdynd/libdynd/pull/134#issuecomment-58048555", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/134", "id": 58048555, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-10-06T16:52:14Z", "updated_at": "2014-10-06T16:52:14Z", "author_association": "OWNER", "body": "I don't expect these changes to affect blaze, but will definitely test blaze against it before merging the python bindings, because it's possible it could.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/58048555/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/58048643", "html_url": "https://github.com/libdynd/libdynd/pull/135#issuecomment-58048643", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/135", "id": 58048643, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2014-10-06T16:52:51Z", "updated_at": "2014-10-06T16:52:51Z", "author_association": "OWNER", "body": "What was your resolution? It is confusing me, and I'm looking into now.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/58048643/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/58050989", "html_url": "https://github.com/libdynd/libdynd/pull/135#issuecomment-58050989", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/135", "id": 58050989, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-10-06T17:07:03Z", "updated_at": "2014-10-06T17:07:03Z", "author_association": "OWNER", "body": "It was in the nd::elwise machinery, my description of it and the changeset that fixed it is https://github.com/ContinuumIO/libdynd/commit/dd2f5971964f7da22037f1c3b10d1ba4563ccfcb\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/58050989/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/58064757", "html_url": "https://github.com/libdynd/libdynd/pull/135#issuecomment-58064757", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/135", "id": 58064757, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2014-10-06T18:17:38Z", "updated_at": "2014-10-06T18:17:38Z", "author_association": "OWNER", "body": "Fixed the memory issue, it was my mistake.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/58064757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/58199437", "html_url": "https://github.com/libdynd/libdynd/issues/98#issuecomment-58199437", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/98", "id": 58199437, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2014-10-07T15:06:45Z", "updated_at": "2014-10-07T15:06:45Z", "author_association": "OWNER", "body": "I'm closing this now. I merged in a pretty solid neighborhood arrfunc. Still needs a bit of work, but it is very usable right now.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/58199437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/58292613", "html_url": "https://github.com/libdynd/libdynd/issues/123#issuecomment-58292613", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/123", "id": 58292613, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-10-08T01:36:39Z", "updated_at": "2014-10-08T01:36:39Z", "author_association": "OWNER", "body": "This is done.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/58292613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/58688745", "html_url": "https://github.com/libdynd/libdynd/pull/140#issuecomment-58688745", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/140", "id": 58688745, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-10-10T17:32:41Z", "updated_at": "2014-10-10T17:32:41Z", "author_association": "OWNER", "body": "1100 lines of code deleted, nice!\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/58688745/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/59881910", "html_url": "https://github.com/libdynd/libdynd/issues/147#issuecomment-59881910", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/147", "id": 59881910, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-10-21T05:47:09Z", "updated_at": "2014-10-21T05:47:09Z", "author_association": "OWNER", "body": "It apparently can reduce compilation times on MSVC (http://msdn.microsoft.com/en-us/library/4141z1cx.aspx), but maybe not elsewhere. I'm for it because it's a lot simpler than manually managing the include guards, and all the compilers support it.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/59881910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/59884882", "html_url": "https://github.com/libdynd/libdynd/issues/148#issuecomment-59884882", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/148", "id": 59884882, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-10-21T06:31:15Z", "updated_at": "2014-10-21T06:31:15Z", "author_association": "OWNER", "body": "Looking around, everything I'm finding is clear about it as you say, so let's do this.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/59884882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/60859143", "html_url": "https://github.com/libdynd/libdynd/issues/147#issuecomment-60859143", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/147", "id": 60859143, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2014-10-29T01:11:46Z", "updated_at": "2014-10-29T01:11:46Z", "author_association": "OWNER", "body": "Done, closed.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/60859143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/61018509", "html_url": "https://github.com/libdynd/libdynd/issues/155#issuecomment-61018509", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/155", "id": 61018509, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2014-10-29T22:46:59Z", "updated_at": "2014-10-29T22:46:59Z", "author_association": "OWNER", "body": "Looks good. I would just add that unnamed parameters must come before named parameters of the same type (src / aux). For instance, I don't see any reason why the following shouldn't be valid:\n\n(int, val: fixed \\* float32; int, boundary: string) -> int\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/61018509/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/61111913", "html_url": "https://github.com/libdynd/libdynd/issues/157#issuecomment-61111913", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/157", "id": 61111913, "user": {"login": "mrocklin", "id": 306380, "avatar_url": "https://avatars3.githubusercontent.com/u/306380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrocklin", "html_url": "https://github.com/mrocklin", "followers_url": "https://api.github.com/users/mrocklin/followers", "following_url": "https://api.github.com/users/mrocklin/following{/other_user}", "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions", "organizations_url": "https://api.github.com/users/mrocklin/orgs", "repos_url": "https://api.github.com/users/mrocklin/repos", "events_url": "https://api.github.com/users/mrocklin/events{/privacy}", "received_events_url": "https://api.github.com/users/mrocklin/received_events", "type": "User", "site_admin": false}, "created_at": "2014-10-30T15:28:47Z", "updated_at": "2014-10-30T15:28:47Z", "author_association": "NONE", "body": "Perhaps off topic, but what are your thoughts on `?T` reductions like `mean(nd.array([1, 2, None]))`\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/61111913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/61112760", "html_url": "https://github.com/libdynd/libdynd/issues/157#issuecomment-61112760", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/157", "id": 61112760, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-10-30T15:33:41Z", "updated_at": "2014-10-30T15:33:41Z", "author_association": "OWNER", "body": "I had some thoughts about this a while ago here: https://github.com/numpy/numpy/blob/master/doc/neps/missing-data.rst#reduction-ufuncs-with-missing-values\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/61112760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/61328840", "html_url": "https://github.com/libdynd/libdynd/issues/158#issuecomment-61328840", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/158", "id": 61328840, "user": {"login": "jreback", "id": 953992, "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jreback", "html_url": "https://github.com/jreback", "followers_url": "https://api.github.com/users/jreback/followers", "following_url": "https://api.github.com/users/jreback/following{/other_user}", "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}", "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jreback/subscriptions", "organizations_url": "https://api.github.com/users/jreback/orgs", "repos_url": "https://api.github.com/users/jreback/repos", "events_url": "https://api.github.com/users/jreback/events{/privacy}", "received_events_url": "https://api.github.com/users/jreback/received_events", "type": "User", "site_admin": false}, "created_at": "2014-10-31T20:47:06Z", "updated_at": "2014-10-31T20:47:06Z", "author_association": "CONTRIBUTOR", "body": "your number 2 is effectively interning, so +1 on that.\nIn theory strings < 5 in length should be differently but probably complicates things. (as you can hold this in a single 64-point pointer).\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/61328840/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/61816963", "html_url": "https://github.com/libdynd/libdynd/issues/155#issuecomment-61816963", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/155", "id": 61816963, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2014-11-05T14:45:44Z", "updated_at": "2014-11-05T14:45:44Z", "author_association": "OWNER", "body": "A preview version of this is in master. A slightly better version is my FFT branch, which gets merged when more of the arrfunc machinery is sorted out.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/61816963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/63477458", "html_url": "https://github.com/libdynd/libdynd/issues/151#issuecomment-63477458", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/151", "id": 63477458, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2014-11-18T14:22:48Z", "updated_at": "2014-11-18T14:22:48Z", "author_association": "OWNER", "body": "Closing this issue, because I don't think we need them anymore with the introduction of variadic templates.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/63477458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/63477548", "html_url": "https://github.com/libdynd/libdynd/issues/127#issuecomment-63477548", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/127", "id": 63477548, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2014-11-18T14:23:22Z", "updated_at": "2014-11-18T14:23:22Z", "author_association": "OWNER", "body": "C++11 solved this.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/63477548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/64821576", "html_url": "https://github.com/libdynd/libdynd/pull/173#issuecomment-64821576", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/173", "id": 64821576, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2014-11-27T18:47:27Z", "updated_at": "2014-11-27T18:47:27Z", "author_association": "OWNER", "body": "This adds a new build mode to Travis CI, where DyND and its tests are built with CUDA but not run.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/64821576/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/64886243", "html_url": "https://github.com/libdynd/libdynd/issues/155#issuecomment-64886243", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/155", "id": 64886243, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2014-11-28T11:52:37Z", "updated_at": "2014-11-28T11:52:37Z", "author_association": "OWNER", "body": "Closed, because I merged this into master with the C++11 changes.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/64886243/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/65033535", "html_url": "https://github.com/libdynd/libdynd/pull/180#issuecomment-65033535", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/180", "id": 65033535, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-12-01T08:33:36Z", "updated_at": "2014-12-01T08:59:38Z", "author_association": "OWNER", "body": "The build on appveyor corresponding to the bug is:\n\nhttps://ci.appveyor.com/project/mwiebe/libdynd/build/0.6.6.16/job/eedio9nqgcv0h3lk\n\nthe test failure caused by the MSVC compiler bug is visible in this failure:\n\n[ RUN      ] TypeAssign.FixedSizeTests_Float64\n....\\tests\\types\\test_type_assign.cpp(331): error: Expected: typed_data_assign(ndt::type(complex_float32_type_id), 0, (char *)&v_cf32, s_dt, 0, s_ptr, &tmp_ectx) throws an exception of type runtime_error.\n  Actual: it throws nothing.\n....\\tests\\types\\test_type_assign.cpp(336): error: Expected: typed_data_assign(ndt::type(complex_float32_type_id), 0, (char *)&v_cf32, s_dt, 0, s_ptr, &tmp_ectx) throws an exception of type runtime_error.\n  Actual: it throws nothing.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/65033535/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/65035723", "html_url": "https://github.com/libdynd/libdynd/pull/180#issuecomment-65035723", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/180", "id": 65035723, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-12-01T08:57:12Z", "updated_at": "2014-12-01T08:57:12Z", "author_association": "OWNER", "body": "Bug report submitted here:\n\nhttps://connect.microsoft.com/VisualStudio/feedback/details/1043829/32-bit-x86-compiler-performs-invalid-reordering-violating-pragma-fenv-access-on-request\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/65035723/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/65520055", "html_url": "https://github.com/libdynd/libdynd/pull/186#issuecomment-65520055", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/186", "id": 65520055, "user": {"login": "quasiben", "id": 1403768, "avatar_url": "https://avatars0.githubusercontent.com/u/1403768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/quasiben", "html_url": "https://github.com/quasiben", "followers_url": "https://api.github.com/users/quasiben/followers", "following_url": "https://api.github.com/users/quasiben/following{/other_user}", "gists_url": "https://api.github.com/users/quasiben/gists{/gist_id}", "starred_url": "https://api.github.com/users/quasiben/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/quasiben/subscriptions", "organizations_url": "https://api.github.com/users/quasiben/orgs", "repos_url": "https://api.github.com/users/quasiben/repos", "events_url": "https://api.github.com/users/quasiben/events{/privacy}", "received_events_url": "https://api.github.com/users/quasiben/received_events", "type": "User", "site_admin": false}, "created_at": "2014-12-04T00:49:54Z", "updated_at": "2014-12-04T00:49:54Z", "author_association": "NONE", "body": "enjoyed the small bit of flowery prose in the history section.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/65520055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/68220228", "html_url": "https://github.com/libdynd/libdynd/pull/229#issuecomment-68220228", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/229", "id": 68220228, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2014-12-28T21:32:15Z", "updated_at": "2014-12-28T21:32:15Z", "author_association": "OWNER", "body": "Merging because I want to touch the initializer list code as well.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/68220228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/68382996", "html_url": "https://github.com/libdynd/libdynd/issues/149#issuecomment-68382996", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/149", "id": 68382996, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2014-12-30T18:34:23Z", "updated_at": "2014-12-30T18:35:19Z", "author_association": "OWNER", "body": "We came to the decision today that the \"kernel\" and \"func\" directories will be merged into a single \"func\" directory. Analogous files will also be merged.\n\nIn master, func/elwise.hpp is an example of what this should look like.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/68382996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/68836545", "html_url": "https://github.com/libdynd/libdynd/pull/238#issuecomment-68836545", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/238", "id": 68836545, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2015-01-06T07:59:51Z", "updated_at": "2015-01-06T07:59:51Z", "author_association": "OWNER", "body": "Merging current progress...\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/68836545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/69265496", "html_url": "https://github.com/libdynd/libdynd/issues/199#issuecomment-69265496", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/199", "id": 69265496, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-01-08T22:56:16Z", "updated_at": "2015-01-08T22:56:16Z", "author_association": "OWNER", "body": "I fixed this.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/69265496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/69265719", "html_url": "https://github.com/libdynd/libdynd/issues/200#issuecomment-69265719", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/200", "id": 69265719, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-01-08T22:58:02Z", "updated_at": "2015-01-08T22:58:02Z", "author_association": "OWNER", "body": "It turned out that FindCUDA.cmake had a bug, see the long discussion at http://public.kitware.com/pipermail/cmake/2015-January/059482.html (which starts on a different issue).\n\nThis should be fixed in the CMake repository. There is also a workaround, which I've implemented here. One simply needs to pass a build type to CMake. It works with any build type, but not no build type.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/69265719/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/70062497", "html_url": "https://github.com/libdynd/libdynd/issues/258#issuecomment-70062497", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/258", "id": 70062497, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2015-01-15T09:52:28Z", "updated_at": "2015-01-15T09:52:28Z", "author_association": "OWNER", "body": "Yeah, good idea about printing the version/platform info at the beginning. We don't have an OSX CI setup, so it doesn't surprise me that would break. I think also the behaviour across OSX versions varies considerably. Do you know how to get a stack trace from the segfault? I think you can do it with lldb.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/70062497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/70063481", "html_url": "https://github.com/libdynd/libdynd/issues/258#issuecomment-70063481", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/258", "id": 70063481, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-01-15T10:01:20Z", "updated_at": "2015-01-15T10:01:20Z", "author_association": "OWNER", "body": "My main platform is OS X 10.10, things are working here.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/70063481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/70189709", "html_url": "https://github.com/libdynd/libdynd/issues/258#issuecomment-70189709", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/258", "id": 70189709, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-01-16T00:34:26Z", "updated_at": "2015-01-16T00:34:26Z", "author_association": "OWNER", "body": "Interestingly, I just tried to upgrade to CUDA 7.0, which requires clang instead of GCC. I now get this test failure.\n\nTo be clear, I was building with clang before as well when I didn't use CUDA (up to earlier today), but it wasn't an issue.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/70189709/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/70190273", "html_url": "https://github.com/libdynd/libdynd/issues/258#issuecomment-70190273", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/258", "id": 70190273, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-01-16T00:40:34Z", "updated_at": "2015-01-16T00:40:34Z", "author_association": "OWNER", "body": "FYI, it is just two tests. The rest of DyND works.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/70190273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/70190342", "html_url": "https://github.com/libdynd/libdynd/issues/258#issuecomment-70190342", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/258", "id": 70190342, "user": {"login": "jreback", "id": 953992, "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jreback", "html_url": "https://github.com/jreback", "followers_url": "https://api.github.com/users/jreback/followers", "following_url": "https://api.github.com/users/jreback/following{/other_user}", "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}", "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jreback/subscriptions", "organizations_url": "https://api.github.com/users/jreback/orgs", "repos_url": "https://api.github.com/users/jreback/repos", "events_url": "https://api.github.com/users/jreback/events{/privacy}", "received_events_url": "https://api.github.com/users/jreback/received_events", "type": "User", "site_admin": false}, "created_at": "2015-01-16T00:41:26Z", "updated_at": "2015-01-16T00:41:26Z", "author_association": "CONTRIBUTOR", "body": "FYI I am running 10.9\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/70190342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/70272187", "html_url": "https://github.com/libdynd/libdynd/issues/258#issuecomment-70272187", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/258", "id": 70272187, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-01-16T15:45:44Z", "updated_at": "2015-01-16T15:45:44Z", "author_association": "OWNER", "body": "While I haven't fixed this, I have modified test_libdynd to simply fail (for those two tests) instead of segault on Mac. You should be able to run the rest of test_libdynd without any problems.\n\n@mwiebe It's strange that there is only an issue in two type substitution tests. If it was really a problem with type substitution, we should get failures everywhere.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/70272187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/70275284", "html_url": "https://github.com/libdynd/libdynd/issues/258#issuecomment-70275284", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/258", "id": 70275284, "user": {"login": "jreback", "id": 953992, "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jreback", "html_url": "https://github.com/jreback", "followers_url": "https://api.github.com/users/jreback/followers", "following_url": "https://api.github.com/users/jreback/following{/other_user}", "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}", "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jreback/subscriptions", "organizations_url": "https://api.github.com/users/jreback/orgs", "repos_url": "https://api.github.com/users/jreback/repos", "events_url": "https://api.github.com/users/jreback/events{/privacy}", "received_events_url": "https://api.github.com/users/jreback/received_events", "type": "User", "site_admin": false}, "created_at": "2015-01-16T16:03:22Z", "updated_at": "2015-01-16T16:03:22Z", "author_association": "CONTRIBUTOR", "body": "Cool...that finishes now thanks!\n\ni'll leave the issue open so the failed tests are noted\n\n```\n[----------] Global test environment tear-down\n[==========] 526 tests from 95 test cases ran. (221 ms total)\n[  PASSED  ] 524 tests.\n[  FAILED  ] 2 tests, listed below:\n[  FAILED  ] SubstituteTypeVars.SimpleNoSubstitutions\n[  FAILED  ] SubstituteTypeVars.SimpleSubstitution\n\n 2 FAILED TESTS\n```\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/70275284/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/71202790", "html_url": "https://github.com/libdynd/libdynd/issues/117#issuecomment-71202790", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/117", "id": 71202790, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-01-23T14:45:38Z", "updated_at": "2015-01-23T14:45:38Z", "author_association": "OWNER", "body": "I did this, but badly! Still need to add a proper hash function implementation to ndt::type.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/71202790/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/71240021", "html_url": "https://github.com/libdynd/libdynd/issues/271#issuecomment-71240021", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/271", "id": 71240021, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-01-23T18:29:53Z", "updated_at": "2015-01-23T18:30:59Z", "author_association": "OWNER", "body": "Hi David,\n\nWe recently updated libdynd to use C++11, and thus do require Visual Studio 2013. This is mentioned in some of the docs (see BUILD.md), but sorry you couldn't find it easily!\n\nIf it doesn't work with VS 2013, please let us know!\n\nEdit: It is, in fact, mentioned on the main page of the repository.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/71240021/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/71240569", "html_url": "https://github.com/libdynd/libdynd/issues/271#issuecomment-71240569", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/271", "id": 71240569, "user": {"login": "cournape", "id": 25111, "avatar_url": "https://avatars1.githubusercontent.com/u/25111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cournape", "html_url": "https://github.com/cournape", "followers_url": "https://api.github.com/users/cournape/followers", "following_url": "https://api.github.com/users/cournape/following{/other_user}", "gists_url": "https://api.github.com/users/cournape/gists{/gist_id}", "starred_url": "https://api.github.com/users/cournape/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cournape/subscriptions", "organizations_url": "https://api.github.com/users/cournape/orgs", "repos_url": "https://api.github.com/users/cournape/repos", "events_url": "https://api.github.com/users/cournape/events{/privacy}", "received_events_url": "https://api.github.com/users/cournape/received_events", "type": "User", "site_admin": false}, "created_at": "2015-01-23T18:32:46Z", "updated_at": "2015-01-23T18:32:46Z", "author_association": "NONE", "body": "@izaid it was not mentioned in the tarball, but I see indeed the requirement updated from 2010 to 2013 in master.\n\nQuick question: I suspect you need to build dynd_python w/ the same compiler. Is that how you build it even for python 2.x ?\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/71240569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/71241054", "html_url": "https://github.com/libdynd/libdynd/issues/271#issuecomment-71241054", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/271", "id": 71241054, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-01-23T18:35:43Z", "updated_at": "2015-01-23T18:35:43Z", "author_association": "OWNER", "body": "Ok, cool, thanks for letting us know about the tarball.\n\nYes, I believe we typically build dynd_python with the same compiler. I don't use Windows, so @mwiebe can jump in if I've got something wrong.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/71241054/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/71258954", "html_url": "https://github.com/libdynd/libdynd/issues/271#issuecomment-71258954", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/271", "id": 71258954, "user": {"login": "cournape", "id": 25111, "avatar_url": "https://avatars1.githubusercontent.com/u/25111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cournape", "html_url": "https://github.com/cournape", "followers_url": "https://api.github.com/users/cournape/followers", "following_url": "https://api.github.com/users/cournape/following{/other_user}", "gists_url": "https://api.github.com/users/cournape/gists{/gist_id}", "starred_url": "https://api.github.com/users/cournape/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cournape/subscriptions", "organizations_url": "https://api.github.com/users/cournape/orgs", "repos_url": "https://api.github.com/users/cournape/repos", "events_url": "https://api.github.com/users/cournape/events{/privacy}", "received_events_url": "https://api.github.com/users/cournape/received_events", "type": "User", "site_admin": false}, "created_at": "2015-01-23T20:21:11Z", "updated_at": "2015-01-23T20:21:11Z", "author_association": "NONE", "body": "I can confirm the 3 tests now pass with VS 2013. Aren't compiler bugs fun :)\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/71258954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/71270369", "html_url": "https://github.com/libdynd/libdynd/issues/271#issuecomment-71270369", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/271", "id": 71270369, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2015-01-23T21:38:10Z", "updated_at": "2015-01-23T21:38:10Z", "author_association": "OWNER", "body": "@cournape we do use the same compiler for building the Python bindings, and even though it's not something recommended by Microsoft, haven't run into any difficulties doing so. Thanks for trying it out!\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/71270369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/72355314", "html_url": "https://github.com/libdynd/libdynd/issues/270#issuecomment-72355314", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/270", "id": 72355314, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2015-02-01T07:44:58Z", "updated_at": "2015-02-01T07:44:58Z", "author_association": "OWNER", "body": "Integrate a fast/accurate float <-> string conversion routine. It looks like https://github.com/floitsch/double-conversion is one, Python uses a tweaked netlib dtoa https://github.com/python/cpython/blob/c7688b44387d116522ff53c0927169db45969f0e/Python/dtoa.c. Supporting hex float notation would be nice as part of this.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/72355314/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/73363711", "html_url": "https://github.com/libdynd/libdynd/issues/247#issuecomment-73363711", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/247", "id": 73363711, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2015-02-07T13:13:06Z", "updated_at": "2015-02-07T13:13:06Z", "author_association": "OWNER", "body": "@izaid were these issues still there somewhere, or should we close this bug?\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/73363711/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/73363774", "html_url": "https://github.com/libdynd/libdynd/issues/247#issuecomment-73363774", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/247", "id": 73363774, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-02-07T13:15:03Z", "updated_at": "2015-02-07T13:15:03Z", "author_association": "OWNER", "body": "Issues are still there. Note the #ifndef _MSC_VER in func/test_apply.cpp\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/73363774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/73363811", "html_url": "https://github.com/libdynd/libdynd/issues/247#issuecomment-73363811", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/247", "id": 73363811, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2015-02-07T13:16:12Z", "updated_at": "2015-02-07T13:16:12Z", "author_association": "OWNER", "body": "Ah, cool, my WIN32 search failed me :)\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/73363811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/73489751", "html_url": "https://github.com/libdynd/libdynd/issues/247#issuecomment-73489751", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/247", "id": 73489751, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2015-02-09T10:51:37Z", "updated_at": "2015-02-09T10:51:37Z", "author_association": "OWNER", "body": "In playing around with it some, what seems weird is cases that fail work just fine when I copy/paste the code into simple_example.cpp. I wonder if something about the context that code is compiling, within a template inside of the google test framework, is causing trouble?\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/73489751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/73494753", "html_url": "https://github.com/libdynd/libdynd/issues/247#issuecomment-73494753", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/247", "id": 73494753, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-02-09T11:33:45Z", "updated_at": "2015-02-09T11:33:45Z", "author_association": "OWNER", "body": "It could be, but that's something I haven't come across before. Do all the failing cases work in simple example? (And this is without CUDA, right?)\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/73494753/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/73497498", "html_url": "https://github.com/libdynd/libdynd/issues/247#issuecomment-73497498", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/247", "id": 73497498, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2015-02-09T11:58:38Z", "updated_at": "2015-02-09T11:58:38Z", "author_association": "OWNER", "body": "After fiddling a bit more, I was able to get this now using a different test assertion. Presently my suspicion is drifting to another MSVC bug where two adjacent parameter packs get flattened and then recreated incorrectly. Consider this error message:\n\n```\n1>C:\\Dev\\dynd-python\\libraries\\libdynd\\include\\dynd/func/arrfunc.hpp(1085): error C2664: \n'dynd::nd::array\n dynd::nd::arrfunc::call<dynd::nd::array,dynd::nd::array,int>(\n     const dynd::nd::detail::args<dynd::nd::array> &,\n     const dynd::nd::detail::kwds<dynd::nd::array,int> &) const' :\ncannot convert argument 1 from\n     'dynd::nd::detail::args<dynd::nd::array,dynd::nd::array>' to\n     'const dynd::nd::detail::args<dynd::nd::array> &'\n```\n\nI think the input is like (A<T1, T2>, B<T3>), and is being forwarded as (A<T1>, B<T2, T3>), because the two parameter packs <typename... TA, typename... TB> are somehow being flattened to <T1, T2, T3> and unflattened incorrectly.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/73497498/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/73499321", "html_url": "https://github.com/libdynd/libdynd/issues/247#issuecomment-73499321", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/247", "id": 73499321, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-02-09T12:15:55Z", "updated_at": "2015-02-09T12:15:55Z", "author_association": "OWNER", "body": "Yeah, that looks weird. I don't know exactly what the problem with that is.\n\nYou may have noticed that I updated the arrfunc call operator on the weekend. We now have both static and dynamic parsing, including for keyword arguments at the Python level. I don't think much needs to change for arrfunc calling anymore, so if we can just hunt down these last bugs we'll be good.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/73499321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/73713236", "html_url": "https://github.com/libdynd/libdynd/issues/281#issuecomment-73713236", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/281", "id": 73713236, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2015-02-10T15:01:59Z", "updated_at": "2015-02-10T15:05:15Z", "author_association": "OWNER", "body": "There's an additional wrinkle this adds to pattern matching, where to match this against other types we need to know what their type constructor arguments look like. We probably want to publish this information via some virtual methods.\n- Need to match type-var constructed type against a concrete type\n- Need to be able to construct concrete type from the parsed arguments\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/73713236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/74201486", "html_url": "https://github.com/libdynd/libdynd/issues/247#issuecomment-74201486", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/247", "id": 74201486, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2015-02-13T03:53:54Z", "updated_at": "2015-02-13T03:53:54Z", "author_association": "OWNER", "body": "Issue has been reported here:\n\nhttps://connect.microsoft.com/VisualStudio/feedback/details/1127375/types-within-adjacent-variadic-template-packs-get-rearranged-valid-code-fails-to-compile\n\nHere's a small.cpp file which reproduces the issue:\n\n```\n/*\nC:\\Dev>cl /EHsc bug.cpp\nMicrosoft (R) C/C++ Optimizing Compiler Version 18.00.31101 for x86\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\nbug.cpp\nbug.cpp(43) : error C2664: 'void print_tuples<int,int,int>(const std::tuple<int> &,const std::tuple<int,int> &)' : cannot convert argument 2 from 'std::tuple<int>' to 'const std::tuple<int,int> &'\n        Reason: cannot convert from 'std::tuple<int>' to 'const std::tuple<int,int>'\n        No user-defined-conversion operator available that can perform this conversion, or the operator cannot be called\n\n*/\n\n#include <iostream>\n#include <tuple>\n\nusing namespace std;\n\n// Helper to print tuple\ntemplate<int I, typename... A>\nstruct print_tuple_i {\n    static void call(ostream& o, const tuple<A...> &a)\n    {\n        print_tuple_i<I-1, A...>::call(o, a);\n        o << std::get<I>(a) << \" \";\n    }\n};\n\ntemplate<typename... A>\nstruct print_tuple_i<0, A...> {\n    static void call(ostream& o, const tuple<A...> &a)\n    {\n        o << std::get<0>(a) << \" \";\n    }\n};\n\ntemplate<typename... A>\nostream &operator<<(ostream& o, const tuple<A...> &a)\n{\n    print_tuple_i<sizeof...(A)-1, A...>::call(o, a);\n    return o;\n}\n\ntemplate<typename... A, typename... B>\nvoid print_tuples(const tuple<A...>& a, const tuple<B...>& b)\n{\n    cout << a << \" : \" << b << endl;\n}\n\nint main() {\n    print_tuples(tuple<int>(1), tuple<int, int>(2, 3));\n    print_tuples(tuple<int, int>(1, 2), tuple<int>(3)); // <---- Uncomment this, and compilation succeeds.\n}\n```\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/74201486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/74223187", "html_url": "https://github.com/libdynd/libdynd/issues/247#issuecomment-74223187", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/247", "id": 74223187, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-02-13T08:57:02Z", "updated_at": "2015-02-13T08:57:02Z", "author_association": "OWNER", "body": "I'm confirming that this also happens with CUDA.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/74223187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/74357581", "html_url": "https://github.com/libdynd/libdynd/issues/27#issuecomment-74357581", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/27", "id": 74357581, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-02-14T02:26:10Z", "updated_at": "2015-02-14T02:26:10Z", "author_association": "OWNER", "body": "Closing this as elwise doesn't even exist anymore in that form! Going forward, we do still have a casting issue, but it's global.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/74357581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/76622625", "html_url": "https://github.com/libdynd/libdynd/issues/211#issuecomment-76622625", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/211", "id": 76622625, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-03-01T18:28:23Z", "updated_at": "2015-03-01T18:28:23Z", "author_association": "OWNER", "body": "I just fixed the take test. The multidispatch test I've left unfixed, as there is now a question of unifying the two versions of multidispatch.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/76622625/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/76753585", "html_url": "https://github.com/libdynd/libdynd/pull/327#issuecomment-76753585", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/327", "id": 76753585, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2015-03-02T17:11:32Z", "updated_at": "2015-03-02T17:11:32Z", "author_association": "OWNER", "body": "Still more problems, but I fixed a lot. Merging this for now.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/76753585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/77724820", "html_url": "https://github.com/libdynd/libdynd/pull/329#issuecomment-77724820", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/329", "id": 77724820, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2015-03-08T00:25:35Z", "updated_at": "2015-03-08T00:25:35Z", "author_association": "OWNER", "body": "This gets things closer to working, but now getting link errors. Merging the progress...\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/77724820/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/78973902", "html_url": "https://github.com/libdynd/libdynd/pull/331#issuecomment-78973902", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/331", "id": 78973902, "user": {"login": "jreback", "id": 953992, "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jreback", "html_url": "https://github.com/jreback", "followers_url": "https://api.github.com/users/jreback/followers", "following_url": "https://api.github.com/users/jreback/following{/other_user}", "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}", "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jreback/subscriptions", "organizations_url": "https://api.github.com/users/jreback/orgs", "repos_url": "https://api.github.com/users/jreback/repos", "events_url": "https://api.github.com/users/jreback/events{/privacy}", "received_events_url": "https://api.github.com/users/jreback/received_events", "type": "User", "site_admin": false}, "created_at": "2015-03-13T13:39:20Z", "updated_at": "2015-03-13T13:39:20Z", "author_association": "CONTRIBUTOR", "body": "+1\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/78973902/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/78975341", "html_url": "https://github.com/libdynd/libdynd/pull/331#issuecomment-78975341", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/331", "id": 78975341, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-03-13T13:42:45Z", "updated_at": "2015-03-13T13:42:45Z", "author_association": "OWNER", "body": "I like how fast you were with that +1!\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/78975341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/84626301", "html_url": "https://github.com/libdynd/libdynd/pull/334#issuecomment-84626301", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/334", "id": 84626301, "user": {"login": "mrocklin", "id": 306380, "avatar_url": "https://avatars3.githubusercontent.com/u/306380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrocklin", "html_url": "https://github.com/mrocklin", "followers_url": "https://api.github.com/users/mrocklin/followers", "following_url": "https://api.github.com/users/mrocklin/following{/other_user}", "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions", "organizations_url": "https://api.github.com/users/mrocklin/orgs", "repos_url": "https://api.github.com/users/mrocklin/repos", "events_url": "https://api.github.com/users/mrocklin/events{/privacy}", "received_events_url": "https://api.github.com/users/mrocklin/received_events", "type": "User", "site_admin": false}, "created_at": "2015-03-22T14:59:28Z", "updated_at": "2015-03-22T14:59:28Z", "author_association": "NONE", "body": "Cool.  Glad to see pedestrian things like this happen.  \n\nFrom an external perspective a fair amount of this seems repetitive; is there a way to generalize things? \n\nI ask because the [number of operators](https://docs.python.org/2/library/operator.html#mapping-operators-to-functions) is somewhat large and presumably one might want to change this code in the future.  Is it possible to define these operators and their computation/type interactions in a more compact way that would make future changes more pleasant?\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/84626301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/84665634", "html_url": "https://github.com/libdynd/libdynd/pull/334#issuecomment-84665634", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/334", "id": 84665634, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2015-03-22T17:48:08Z", "updated_at": "2015-03-22T17:48:08Z", "author_association": "OWNER", "body": "Looks like great progress to me. I think at some point, after the operators are filled in, we should take a look at the performance implications of using the big # type IDs by # type IDs table versus alternatives, and see if we can find a better approach.\n\n@mrocklin I'm pretty sure it's possible to further reduce the amount of repeating boilerplate here. On the other hand I also think usually a good idea to start with a few instances of the code more fully written out, establishing and tweaking what the pattern is before generalizing.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/84665634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/84676786", "html_url": "https://github.com/libdynd/libdynd/pull/334#issuecomment-84676786", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/334", "id": 84676786, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-03-22T19:02:34Z", "updated_at": "2015-03-22T19:02:34Z", "author_association": "OWNER", "body": "@mrocklin When I was implementing unary minus, I was thinking of you. ;)\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/84676786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/84678721", "html_url": "https://github.com/libdynd/libdynd/pull/334#issuecomment-84678721", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/334", "id": 84678721, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-03-22T19:05:29Z", "updated_at": "2015-03-22T19:05:29Z", "author_association": "OWNER", "body": "I do think there is a lot of repetition here, which is frustrating. I'd like to find a way to reduce that without making the code unreadable. For instance, I could use dynd's preprocessor more, but it makes it much harder to see what's going on. Let me see what I can do...\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/84678721/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/84699443", "html_url": "https://github.com/libdynd/libdynd/pull/334#issuecomment-84699443", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/334", "id": 84699443, "user": {"login": "mrocklin", "id": 306380, "avatar_url": "https://avatars3.githubusercontent.com/u/306380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrocklin", "html_url": "https://github.com/mrocklin", "followers_url": "https://api.github.com/users/mrocklin/followers", "following_url": "https://api.github.com/users/mrocklin/following{/other_user}", "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions", "organizations_url": "https://api.github.com/users/mrocklin/orgs", "repos_url": "https://api.github.com/users/mrocklin/repos", "events_url": "https://api.github.com/users/mrocklin/events{/privacy}", "received_events_url": "https://api.github.com/users/mrocklin/received_events", "type": "User", "site_admin": false}, "created_at": "2015-03-22T20:42:09Z", "updated_at": "2015-03-22T20:42:09Z", "author_association": "NONE", "body": "Mostly I wanted to point to the [list of python operators](https://docs.python.org/2/library/operator.html#mapping-operators-to-functions) to flesh out a scope that would be useful from the Python user side.  \n\nHappy to leave design bits to you all.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/84699443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/85257383", "html_url": "https://github.com/libdynd/libdynd/issues/270#issuecomment-85257383", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/270", "id": 85257383, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-03-24T00:25:22Z", "updated_at": "2015-03-24T00:25:22Z", "author_association": "OWNER", "body": "Hello, my name is Ian Henriksen.\nI'm currently a masters student studying mathematics at Brigham Young University. My research is in isogeometric analysis (finite element analysis on spline curves).\nI'm running a little late, but I'm putting together an application for a Google Summer of Code.\n\nAs a student, I am still in the process of becoming more exposed to making significant contributions in open source. However, I have spent a great deal of time making a Cython API for BLAS and LAPACK in SciPy. See https://github.com/scipy/scipy/pull/4021. As such, I am certainly interested a new challenge to continue my education.\nI've been interested in the progress of DyND, and am looking for where I can contribute. I have a lot of experience working with Python, NumPy, and Cython, and am also familiar with C, C++, and Fortran. I'm less familiar with the current DyND internals, but I am very interested to learn more about them. Expression analysis for n-dimensional arrays in C++ is a really great idea, and I'd like to delve more into how it works.\n\nHere are some ideas I have had for projects I am interested in working on:\n- Exposing a Cython api in dynd-python to make it so that the array objects can be used in Cython for array arithmetic without the GIL and without the corresponding Python overhead.\n- Writing type-generic implementations of existing linear algebra operations for DyND arrays (like matrix multiplication, solving systems of equations, etc.). Alternatively, I could provide DyND-centered wrappers for BLAS and LAPACK.\n- Writing an approximation theory library for Python. My plan would be to focus primarily on evaluation and refinement of splines. I'd also like to include methods for working with other polynomial objects (polynomials in the power basis, Chebyshev polynomials, and Legendre Polynomials). A primary goal, then, would be to develop a working prototype for a C++ library developed using libdynd that can be exposed to Python and other dynamic languages the same way the core array object is. Ideally, both the array library and the polynomial library would expose C++, Cython, and Python APIs that are as similar as possible.\n- Writing a utility similar to f2py or fwrap for wrapping Fortran libraries using dynd. This would probably be one of the harder projects here, but I'd be intrigued to work on it as well.\n\nAre any of these projects needed in DyND? What would be the most helpful?\n\nThanks!\n\nIan Henriksen\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/85257383/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/85422889", "html_url": "https://github.com/libdynd/libdynd/issues/270#issuecomment-85422889", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/270", "id": 85422889, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-03-24T09:35:32Z", "updated_at": "2015-03-24T09:35:32Z", "author_association": "OWNER", "body": "Hey Ian! These are all fantastic ideas. I think the first two especially would fit with where DyND is at this stage.\n\nTo start off, though, we didn't actually end up applying for GSoC, so we can't mentor you through that. That's not a problem for me, but it may be for you. If you're still interested, can you shoot me an email and we'll talk further about what can be done.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/85422889/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/85486822", "html_url": "https://github.com/libdynd/libdynd/issues/270#issuecomment-85486822", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/270", "id": 85486822, "user": {"login": "bryevdv", "id": 1078448, "avatar_url": "https://avatars3.githubusercontent.com/u/1078448?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bryevdv", "html_url": "https://github.com/bryevdv", "followers_url": "https://api.github.com/users/bryevdv/followers", "following_url": "https://api.github.com/users/bryevdv/following{/other_user}", "gists_url": "https://api.github.com/users/bryevdv/gists{/gist_id}", "starred_url": "https://api.github.com/users/bryevdv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bryevdv/subscriptions", "organizations_url": "https://api.github.com/users/bryevdv/orgs", "repos_url": "https://api.github.com/users/bryevdv/repos", "events_url": "https://api.github.com/users/bryevdv/events{/privacy}", "received_events_url": "https://api.github.com/users/bryevdv/received_events", "type": "User", "site_admin": false}, "created_at": "2015-03-24T13:06:46Z", "updated_at": "2015-03-24T13:06:46Z", "author_association": "CONTRIBUTOR", "body": "I think NumFocus got a block of grants? Perhaps something could be routed through them. (I could also be mistaken)\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/85486822/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/85557517", "html_url": "https://github.com/libdynd/libdynd/issues/270#issuecomment-85557517", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/270", "id": 85557517, "user": {"login": "mrocklin", "id": 306380, "avatar_url": "https://avatars3.githubusercontent.com/u/306380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrocklin", "html_url": "https://github.com/mrocklin", "followers_url": "https://api.github.com/users/mrocklin/followers", "following_url": "https://api.github.com/users/mrocklin/following{/other_user}", "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions", "organizations_url": "https://api.github.com/users/mrocklin/orgs", "repos_url": "https://api.github.com/users/mrocklin/repos", "events_url": "https://api.github.com/users/mrocklin/events{/privacy}", "received_events_url": "https://api.github.com/users/mrocklin/received_events", "type": "User", "site_admin": false}, "created_at": "2015-03-24T15:30:31Z", "updated_at": "2015-03-24T15:30:31Z", "author_association": "NONE", "body": "PSF would also be appropriate if the project was at least a little Pythonic.  \n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/85557517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/85616547", "html_url": "https://github.com/libdynd/libdynd/issues/270#issuecomment-85616547", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/270", "id": 85616547, "user": {"login": "nouiz", "id": 180987, "avatar_url": "https://avatars3.githubusercontent.com/u/180987?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nouiz", "html_url": "https://github.com/nouiz", "followers_url": "https://api.github.com/users/nouiz/followers", "following_url": "https://api.github.com/users/nouiz/following{/other_user}", "gists_url": "https://api.github.com/users/nouiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nouiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nouiz/subscriptions", "organizations_url": "https://api.github.com/users/nouiz/orgs", "repos_url": "https://api.github.com/users/nouiz/repos", "events_url": "https://api.github.com/users/nouiz/events{/privacy}", "received_events_url": "https://api.github.com/users/nouiz/received_events", "type": "User", "site_admin": false}, "created_at": "2015-03-24T17:45:47Z", "updated_at": "2015-03-24T17:45:47Z", "author_association": "NONE", "body": "Is it too late for PSF for new org? I recall that they wouldn't accept new\norg, except if they have a very good candidate (it seem to be the case).\n\nIf you try that, do it rapidly and tell you have a good candidate.\n\nOn Tue, Mar 24, 2015 at 10:30 AM, Matthew Rocklin notifications@github.com\nwrote:\n\n> PSF would also be appropriate if the project was at least a little\n> Pythonic.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/libdynd/libdynd/issues/270#issuecomment-85557517.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/85616547/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/85637530", "html_url": "https://github.com/libdynd/libdynd/issues/270#issuecomment-85637530", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/270", "id": 85637530, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-03-24T18:42:54Z", "updated_at": "2015-03-24T18:42:54Z", "author_association": "OWNER", "body": "Although I enjoy working on open source work as a challenge alone, I will admittedly not be able to devote as much time to these projects as I would like to without some form of funding. I'm not particularly attached to the GSOC program, though it does seem like a good way to do it. I'll contact @izaid and see what we can arrange.\nNumFocus was listed as an organization, though it's unclear if it is still planning to participate. Their [page](https://www.google-melange.com/gsoc/org2/google/gsoc2015/numfocus) looks pretty empty. I'll put together an application tomorrow afternoon through them and through PSF and see where it goes. For the PSF, the Cython API would probably be the most applicable since it'll help people develop extension modules with array operations a lot easier. Efficient array operations are one of the biggest features missing in Cython right now and a public Cython API for DyND is a perfect way to address that need. I'll list the linear algebra operations as a secondary goal.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/85637530/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/85643920", "html_url": "https://github.com/libdynd/libdynd/issues/270#issuecomment-85643920", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/270", "id": 85643920, "user": {"login": "mrocklin", "id": 306380, "avatar_url": "https://avatars3.githubusercontent.com/u/306380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrocklin", "html_url": "https://github.com/mrocklin", "followers_url": "https://api.github.com/users/mrocklin/followers", "following_url": "https://api.github.com/users/mrocklin/following{/other_user}", "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions", "organizations_url": "https://api.github.com/users/mrocklin/orgs", "repos_url": "https://api.github.com/users/mrocklin/repos", "events_url": "https://api.github.com/users/mrocklin/events{/privacy}", "received_events_url": "https://api.github.com/users/mrocklin/received_events", "type": "User", "site_admin": false}, "created_at": "2015-03-24T18:59:52Z", "updated_at": "2015-03-24T18:59:52Z", "author_association": "NONE", "body": "From @aterrel (NumFocus board member)\n\nNumFOCUS is participating in GSoC, but DyND is not one of our supported projects. So DyND would need to apply to NumFOCUS first to be part of our sponsored projects.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/85643920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/85654978", "html_url": "https://github.com/libdynd/libdynd/issues/270#issuecomment-85654978", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/270", "id": 85654978, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-03-24T19:21:34Z", "updated_at": "2015-03-24T19:21:34Z", "author_association": "OWNER", "body": "Thanks @mrocklin @nouiz @bryevdv -- am sorting it out now.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/85654978/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/86380456", "html_url": "https://github.com/libdynd/libdynd/pull/334#issuecomment-86380456", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/334", "id": 86380456, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2015-03-26T07:52:05Z", "updated_at": "2015-03-26T07:52:05Z", "author_association": "OWNER", "body": "Merged with Windows fixes from another PR\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/86380456/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/94317687", "html_url": "https://github.com/libdynd/libdynd/pull/393#issuecomment-94317687", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/393", "id": 94317687, "user": {"login": "jreback", "id": 953992, "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jreback", "html_url": "https://github.com/jreback", "followers_url": "https://api.github.com/users/jreback/followers", "following_url": "https://api.github.com/users/jreback/following{/other_user}", "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}", "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jreback/subscriptions", "organizations_url": "https://api.github.com/users/jreback/orgs", "repos_url": "https://api.github.com/users/jreback/repos", "events_url": "https://api.github.com/users/jreback/events{/privacy}", "received_events_url": "https://api.github.com/users/jreback/received_events", "type": "User", "site_admin": false}, "created_at": "2015-04-19T21:47:53Z", "updated_at": "2015-04-19T21:47:53Z", "author_association": "CONTRIBUTOR", "body": "whoosh!\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/94317687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/102203220", "html_url": "https://github.com/libdynd/libdynd/pull/399#issuecomment-102203220", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/399", "id": 102203220, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2015-05-14T23:50:37Z", "updated_at": "2015-05-14T23:50:37Z", "author_association": "OWNER", "body": "Looks great! The g_in_fast_death_test_child change seems to have broken linux builds though.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/102203220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/102518861", "html_url": "https://github.com/libdynd/libdynd/pull/399#issuecomment-102518861", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/399", "id": 102518861, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-05-15T20:27:07Z", "updated_at": "2015-05-15T20:27:07Z", "author_association": "OWNER", "body": "Okay, this should fix that now. Are the test failures with cuda on Travis expected?\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/102518861/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/102524914", "html_url": "https://github.com/libdynd/libdynd/pull/399#issuecomment-102524914", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/399", "id": 102524914, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2015-05-15T21:01:35Z", "updated_at": "2015-05-15T21:01:35Z", "author_association": "OWNER", "body": "Yes, the cuda support doesn't build because of arrfunc refactoring work that hasn't been reconciled with cuda yet.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/102524914/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/110032226", "html_url": "https://github.com/libdynd/libdynd/pull/394#issuecomment-110032226", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/394", "id": 110032226, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-06-08T15:10:34Z", "updated_at": "2015-06-08T15:10:34Z", "author_association": "OWNER", "body": "@mwiebe Can we get these merged, at least partially?\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/110032226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/113572522", "html_url": "https://github.com/libdynd/libdynd/issues/408#issuecomment-113572522", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/408", "id": 113572522, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-06-19T16:51:35Z", "updated_at": "2015-06-19T16:51:35Z", "author_association": "OWNER", "body": "So I've never seen this is before. I'd vote towards an incompatibility as well.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/113572522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/114063180", "html_url": "https://github.com/libdynd/libdynd/pull/394#issuecomment-114063180", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/394", "id": 114063180, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2015-06-22T10:44:13Z", "updated_at": "2015-06-22T10:44:13Z", "author_association": "OWNER", "body": "@izaid the build error is gone, but the flow of resolve_dst_type et al isn't quite complete yet\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/114063180/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/114064581", "html_url": "https://github.com/libdynd/libdynd/pull/394#issuecomment-114064581", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/394", "id": 114064581, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-06-22T10:52:18Z", "updated_at": "2015-06-22T10:52:18Z", "author_association": "OWNER", "body": "Thanks! I can take it from here if you'd rather.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/114064581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/116163818", "html_url": "https://github.com/libdynd/libdynd/issues/415#issuecomment-116163818", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/415", "id": 116163818, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-06-27T22:39:02Z", "updated_at": "2015-06-27T22:39:02Z", "author_association": "OWNER", "body": "Is this with the latest Github source? I use Mac OS as my main machine, and things are fine.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/116163818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/116163992", "html_url": "https://github.com/libdynd/libdynd/issues/415#issuecomment-116163992", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/415", "id": 116163992, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-06-27T22:44:18Z", "updated_at": "2015-06-27T22:44:18Z", "author_association": "OWNER", "body": "This is the same error as https://github.com/libdynd/libdynd/issues/408. AFAICT it's a build error that only shows up when building with older versions of libc++. Which version of OSX is this?\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/116163992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/116164121", "html_url": "https://github.com/libdynd/libdynd/issues/415#issuecomment-116164121", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/415", "id": 116164121, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-06-27T22:48:08Z", "updated_at": "2015-06-27T22:48:08Z", "author_association": "OWNER", "body": "Building with g++/libstdc++ should probably work as a short-term solution.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/116164121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/116164295", "html_url": "https://github.com/libdynd/libdynd/issues/415#issuecomment-116164295", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/415", "id": 116164295, "user": {"login": "jreback", "id": 953992, "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jreback", "html_url": "https://github.com/jreback", "followers_url": "https://api.github.com/users/jreback/followers", "following_url": "https://api.github.com/users/jreback/following{/other_user}", "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}", "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jreback/subscriptions", "organizations_url": "https://api.github.com/users/jreback/orgs", "repos_url": "https://api.github.com/users/jreback/repos", "events_url": "https://api.github.com/users/jreback/events{/privacy}", "received_events_url": "https://api.github.com/users/jreback/received_events", "type": "User", "site_admin": false}, "created_at": "2015-06-27T22:52:05Z", "updated_at": "2015-06-27T22:52:05Z", "author_association": "CONTRIBUTOR", "body": "I have an old libc++ I believe (though I thought I updated last time)\nhow do I show u the version?\n\nthis is where binstar versions of libdynd/dynd-Python would help :)\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/116164295/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/116190722", "html_url": "https://github.com/libdynd/libdynd/issues/415#issuecomment-116190722", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/415", "id": 116190722, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-06-28T04:06:03Z", "updated_at": "2015-06-28T04:06:03Z", "author_association": "OWNER", "body": "As to my knowledge there isn't a reliable way to distinguish between the different versions of libc++ that have shipped with the different llvm releases. The version macro it defines has the same value (1101) for versions where this does and does not work. The way I isolated the issue was to test on different versions of freebsd where one had the latest libc++ and the other did not.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/116190722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/116190788", "html_url": "https://github.com/libdynd/libdynd/issues/415#issuecomment-116190788", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/415", "id": 116190788, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-06-28T04:09:25Z", "updated_at": "2015-06-28T04:09:25Z", "author_association": "OWNER", "body": "This error can be reproduced on Linux (mint 17 with clang-3.6 installed) by running cmake with\n\n```\ncmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_C_COMPILER=/usr/bin/clang-3.6 -DCMAKE_CXX_COMPILER=/usr/bin/clang++-3.6 -DCMAKE_CXX_FLAGS=\"-stdlib=libc++\" ..\n```\n\nI'm not sure if the extra \"-stdlib=libc++\" should link properly, but using the headers for compilation is enough to get this error to show up.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/116190788/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/116760096", "html_url": "https://github.com/libdynd/libdynd/pull/416#issuecomment-116760096", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/416", "id": 116760096, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-06-29T16:55:18Z", "updated_at": "2015-06-29T16:55:18Z", "author_association": "OWNER", "body": "Yep -- it was also necessary to use value as a parameter to templates.\n\nI think multidispatch is slowly converging, but it needs a lot of work still. I'm updating everything else and letting that drive how multidispatch works, it's all very experimental.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/116760096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/116851071", "html_url": "https://github.com/libdynd/libdynd/issues/415#issuecomment-116851071", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/415", "id": 116851071, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-06-29T21:27:56Z", "updated_at": "2015-06-29T21:27:56Z", "author_association": "OWNER", "body": "If we wanted to make a Travis CI build with libc++ we could run cmake with\n\n```\ncmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_VERBOSE_MAKEFILE=ON -DDYND_BUILD_BENCHMARKS=OFF -DCMAKE_C_COMPILER=/usr/bin/clang-3.6 -DCMAKE_CXX_COMPILER=/usr/bin/clang++-3.6 -DCMAKE_CXX_FLAGS=\"-stdlib=libc++ -lc++ -lc++abi -Wno-error=unused-command-line-argument\" ..\n```\n\nIf clang and libc++abi have been installed this should work for compiling, linking, and testing.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/116851071/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/117128302", "html_url": "https://github.com/libdynd/libdynd/pull/394#issuecomment-117128302", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/394", "id": 117128302, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-06-30T11:16:04Z", "updated_at": "2015-06-30T11:16:04Z", "author_association": "OWNER", "body": "Closing because we are moving to my branch.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/117128302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/117260004", "html_url": "https://github.com/libdynd/libdynd/pull/180#issuecomment-117260004", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/180", "id": 117260004, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2015-06-30T17:08:17Z", "updated_at": "2015-06-30T17:08:17Z", "author_association": "OWNER", "body": "According to the connect site, the bug this is for is resolved as fixed.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/117260004/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/120662188", "html_url": "https://github.com/libdynd/libdynd/issues/418#issuecomment-120662188", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/418", "id": 120662188, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-07-11T21:19:18Z", "updated_at": "2015-07-11T21:19:18Z", "author_association": "OWNER", "body": "I'm seeing this with gcc 4.9.2 as well now.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/120662188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/120662243", "html_url": "https://github.com/libdynd/libdynd/issues/418#issuecomment-120662243", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/418", "id": 120662243, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-07-11T21:20:53Z", "updated_at": "2015-07-11T21:20:53Z", "author_association": "OWNER", "body": "Okay, this is on my todo list to sort out. If you are trying to build dynd-python, it is currently broken (fixing that now).\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/120662243/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/120662338", "html_url": "https://github.com/libdynd/libdynd/issues/443#issuecomment-120662338", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/443", "id": 120662338, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-07-11T21:22:57Z", "updated_at": "2015-07-11T21:22:57Z", "author_association": "OWNER", "body": "If the \"maybe unused\" variables are arguments, there is a DYND_IGNORE_UNUSED(...) macro that fixes it. We can probably come up with something similar for declared variables.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/120662338/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/120662543", "html_url": "https://github.com/libdynd/libdynd/issues/418#issuecomment-120662543", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/418", "id": 120662543, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-07-11T21:27:35Z", "updated_at": "2015-07-11T21:27:35Z", "author_association": "OWNER", "body": "Thanks. There's no major rush on my end. I've been suppressing the error in all the builds where it has been cropping up. I've put these here primarily to document these though, since we should probably be able to install from source on all recent versions of gcc without having to override any flags.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/120662543/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/120662619", "html_url": "https://github.com/libdynd/libdynd/issues/418#issuecomment-120662619", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/418", "id": 120662619, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-07-11T21:29:49Z", "updated_at": "2015-07-11T21:29:49Z", "author_association": "OWNER", "body": "Also, thanks for the great work over the last few days. Something you did recently fixed the last few test failures I was seeing with my mingw-w64 dynd-python build.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/120662619/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/120663496", "html_url": "https://github.com/libdynd/libdynd/issues/443#issuecomment-120663496", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/443", "id": 120663496, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-07-11T21:51:59Z", "updated_at": "2015-07-11T21:51:59Z", "author_association": "OWNER", "body": "Yes, we could do the same thing for uninitialized variables. I'll look into this a little deeper on Monday and see if I can figure out if this is just compiler noise that we can safely ignore in all cases.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/120663496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/121307469", "html_url": "https://github.com/libdynd/libdynd/pull/452#issuecomment-121307469", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/452", "id": 121307469, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-07-14T16:56:08Z", "updated_at": "2015-07-14T16:56:08Z", "author_association": "OWNER", "body": "I opted to do the disabling/re-enabling in two separate macros rather than a single multi-line macro since the warnings were still showing (but not causing errors) when I used a multi-line macro to suppress them. That's probably a gcc bug, but this workaround should be good enough.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/121307469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/121851168", "html_url": "https://github.com/libdynd/libdynd/pull/453#issuecomment-121851168", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/453", "id": 121851168, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2015-07-16T06:50:52Z", "updated_at": "2015-07-16T06:50:52Z", "author_association": "OWNER", "body": "Something strange going on here, it ends up calling instantiate for an RNG kernel:\n\n```\n    test_libdynd.exe!dynd::nd::random::detail::uniform_kernel<4,2,std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> >::instantiate(char * __formal, unsigned __int64 __formal, char * __formal, void * ckb, __int64 ckb_offset, const dynd::ndt::type & __formal, const char * __formal, __int64 __formal, const dynd::ndt::type * __formal, const char * const * __formal, unsigned int kernreq, const dynd::eval::eval_context * __formal, const dynd::nd::array & kwds, const std::map<dynd::nd::string,dynd::ndt::type,std::less<dynd::nd::string>,std::allocator<std::pair<dynd::nd::string const ,dynd::ndt::type> > > & __formal) Line 79   C++\n    test_libdynd.exe!instantiate_option_to_value_assignment_kernel(char * __formal, unsigned __int64 __formal, char * __formal, void * ckb, __int64 ckb_offset, const dynd::ndt::type & dst_tp, const char * dst_arrmeta, __int64 nsrc, const dynd::ndt::type * src_tp, const char * const * src_arrmeta, unsigned int kernreq, const dynd::eval::eval_context * ectx, const dynd::nd::array & kwds, const std::map<dynd::nd::string,dynd::ndt::type,std::less<dynd::nd::string>,std::allocator<std::pair<dynd::nd::string const ,dynd::ndt::type> > > & tp_vars) Line 263  C++\n    test_libdynd.exe!dynd::kernels::make_option_assignment_kernel(void * ckb, __int64 ckb_offset, const dynd::ndt::type & dst_tp, const char * dst_arrmeta, const dynd::ndt::type & src_tp, const char * src_arrmeta, unsigned int kernreq, const dynd::eval::eval_context * ectx) Line 509 C++\n    test_libdynd.exe!dynd::ndt::option_type::make_assignment_kernel(void * ckb, __int64 ckb_offset, const dynd::ndt::type & dst_tp, const char * dst_arrmeta, const dynd::ndt::type & src_tp, const char * src_arrmeta, unsigned int kernreq, const dynd::eval::eval_context * ectx) Line 375   C++\n    test_libdynd.exe!dynd::make_assignment_kernel(void * ckb, __int64 ckb_offset, const dynd::ndt::type & dst_tp, const char * dst_arrmeta, const dynd::ndt::type & src_tp, const char * src_arrmeta, unsigned int kernreq, const dynd::eval::eval_context * ectx) Line 171 C++\n```\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/121851168/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/121880496", "html_url": "https://github.com/libdynd/libdynd/pull/453#issuecomment-121880496", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/453", "id": 121880496, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-07-16T08:42:10Z", "updated_at": "2015-07-16T08:42:10Z", "author_association": "OWNER", "body": "That is super weird. It's also really weird that all Travis CI tests pass. Is it possible that MSVC is actually compiling things wrong?\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/121880496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/122013041", "html_url": "https://github.com/libdynd/libdynd/pull/453#issuecomment-122013041", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/453", "id": 122013041, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2015-07-16T16:33:46Z", "updated_at": "2015-07-16T16:33:46Z", "author_association": "OWNER", "body": "This code fails to compile in the MSVC 2015 RC, so I wouldn't be surprised by that at all.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/122013041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/122598557", "html_url": "https://github.com/libdynd/libdynd/pull/453#issuecomment-122598557", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/453", "id": 122598557, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2015-07-18T21:40:05Z", "updated_at": "2015-07-18T21:40:21Z", "author_association": "OWNER", "body": "I've figured out a workaround, which is to replace the is_avail_kernel alias template with inheritance.\n\n```\n// is_avail_kernel.hpp line 379\n\n  // With this, it fails\n  template <type_id_t Src0TypeID>\n  using is_avail_kernel =\n      detail::is_avail_kernel<Src0TypeID, type_kind_of<Src0TypeID>::value>;\n\n  // Replaced with this, it succeeds\n  template <type_id_t Src0TypeID>\n  struct is_avail_kernel\n      : public detail::is_avail_kernel<Src0TypeID,\n                                       type_kind_of<Src0TypeID>::value> {\n  };\n```\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/122598557/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/122601762", "html_url": "https://github.com/libdynd/libdynd/pull/453#issuecomment-122601762", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/453", "id": 122601762, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-07-18T22:15:09Z", "updated_at": "2015-07-18T22:15:09Z", "author_association": "OWNER", "body": "Thanks! We'll add template aliases to the long list of things that MSVC can't handle.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/122601762/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/122690496", "html_url": "https://github.com/libdynd/libdynd/pull/453#issuecomment-122690496", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/453", "id": 122690496, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-07-19T18:17:58Z", "updated_at": "2015-07-19T18:17:58Z", "author_association": "OWNER", "body": "Fixed in master now.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/122690496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/122690551", "html_url": "https://github.com/libdynd/libdynd/pull/450#issuecomment-122690551", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/450", "id": 122690551, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-07-19T18:18:15Z", "updated_at": "2015-07-19T18:18:15Z", "author_association": "OWNER", "body": "Fixed in master now.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/122690551/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/125300823", "html_url": "https://github.com/libdynd/libdynd/issues/467#issuecomment-125300823", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/467", "id": 125300823, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-07-27T18:39:18Z", "updated_at": "2015-07-27T18:39:18Z", "author_association": "OWNER", "body": "Yep, this one is easily solved. If you see undefined reference to \"dynd::nd::array::f\", it means some file is very likely missing an #include \"dynd/gfunc/call_callable.hpp\". gfunc is the ancient arrfunc which can't be deleted until we sort out views properly, it causes trouble sometimes. Try putting the include in test_time_type.cpp.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/125300823/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/125303937", "html_url": "https://github.com/libdynd/libdynd/issues/467#issuecomment-125303937", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/467", "id": 125303937, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-07-27T18:51:52Z", "updated_at": "2015-07-27T18:51:52Z", "author_association": "OWNER", "body": "Yep, that fixes it, I'll submit a PR shortly. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/125303937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/125304668", "html_url": "https://github.com/libdynd/libdynd/pull/468#issuecomment-125304668", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/468", "id": 125304668, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-07-27T18:55:17Z", "updated_at": "2015-07-27T18:55:17Z", "author_association": "OWNER", "body": "Will merge when green.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/125304668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/125305045", "html_url": "https://github.com/libdynd/libdynd/pull/468#issuecomment-125305045", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/468", "id": 125305045, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-07-27T18:56:54Z", "updated_at": "2015-07-27T18:56:54Z", "author_association": "OWNER", "body": "Great! Thanks!\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/125305045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/125309581", "html_url": "https://github.com/libdynd/libdynd/issues/469#issuecomment-125309581", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/469", "id": 125309581, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2015-07-27T19:10:00Z", "updated_at": "2015-07-27T19:10:00Z", "author_association": "OWNER", "body": "I've got this on my list to take a deeper look into. This area of the MSVC compiler got a lot of improvements and fixes from 2013 to 2015, but this probably represents a regression in some corner case.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/125309581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/125315730", "html_url": "https://github.com/libdynd/libdynd/issues/469#issuecomment-125315730", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/469", "id": 125315730, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-07-27T19:24:04Z", "updated_at": "2015-07-27T19:24:04Z", "author_association": "OWNER", "body": "That sounds right to me. Let me know how I can help.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/125315730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/126520737", "html_url": "https://github.com/libdynd/libdynd/pull/476#issuecomment-126520737", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/476", "id": 126520737, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-07-30T23:29:30Z", "updated_at": "2015-07-30T23:29:30Z", "author_association": "OWNER", "body": "Sounds good, thanks!\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/126520737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/127759971", "html_url": "https://github.com/libdynd/libdynd/pull/481#issuecomment-127759971", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/481", "id": 127759971, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-08-04T20:59:53Z", "updated_at": "2015-08-04T20:59:53Z", "author_association": "OWNER", "body": "Ha, this is awesome! We've been talking about doing this for a while, but have been held back because we didn't think we could install everything without sudo. Massive +1 if you can do it.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/127759971/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/127762350", "html_url": "https://github.com/libdynd/libdynd/pull/481#issuecomment-127762350", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/481", "id": 127762350, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-08-04T21:08:43Z", "updated_at": "2015-08-04T21:08:43Z", "author_association": "OWNER", "body": "Thanks, I noticed that the SciPy devs got theirs working recently, so I'm feeling hopeful :)\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/127762350/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/127796974", "html_url": "https://github.com/libdynd/libdynd/pull/481#issuecomment-127796974", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/481", "id": 127796974, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-08-04T23:37:53Z", "updated_at": "2015-08-04T23:37:53Z", "author_association": "OWNER", "body": "Okay, except for the Python build, this is working. I've currently removed the Python build since it tends to fail all the time. If you'd like, I can figure out how to re-add it or re-add it as an allow-fail block so it can run and fail without making the indicator for the whole PR fail. Thoughts?\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/127796974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/127862345", "html_url": "https://github.com/libdynd/libdynd/pull/481#issuecomment-127862345", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/481", "id": 127862345, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-08-05T05:25:02Z", "updated_at": "2015-08-05T05:25:02Z", "author_association": "OWNER", "body": "Okay, I haven't figured out how to get the Python build running yet. I'll try a few more things tomorrow. The latest version is my most recent attempt. It has all the others commented out to let me debug faster. Other than that, all the builds that use only C++ work fine.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/127862345/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/128006385", "html_url": "https://github.com/libdynd/libdynd/pull/481#issuecomment-128006385", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/481", "id": 128006385, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-08-05T14:01:28Z", "updated_at": "2015-08-05T14:01:28Z", "author_association": "OWNER", "body": "Okay, it's awesome that everything is working besides Python. That being said, I don't think we can drop the Python build -- it is too useful. We use it to determine if we broke the Python bindings and need to fix them, which happens frequently.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/128006385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/128408911", "html_url": "https://github.com/libdynd/libdynd/pull/481#issuecomment-128408911", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/481", "id": 128408911, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-08-06T15:20:54Z", "updated_at": "2015-08-06T15:20:54Z", "author_association": "OWNER", "body": "@insertinterestingnamehere I merged the dynd-python PR and reran Travis, but it seems we're getting a segmentation fault at the test stage.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/128408911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/128423536", "html_url": "https://github.com/libdynd/libdynd/pull/481#issuecomment-128423536", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/481", "id": 128423536, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-08-06T16:13:28Z", "updated_at": "2015-08-06T16:13:28Z", "author_association": "OWNER", "body": "@izaid This looks like the segfault we were seeing with clang the other day. I'm baffled as to why it is only showing up on the new infrastructure and not on the current clang builds. I'll try enabling the verbose output and see if there are any differences in the flags.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/128423536/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/128428260", "html_url": "https://github.com/libdynd/libdynd/pull/481#issuecomment-128428260", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/481", "id": 128428260, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-08-06T16:32:13Z", "updated_at": "2015-08-06T16:32:13Z", "author_association": "OWNER", "body": "@insertinterestingnamehere Agreed. I think this segfault is now a major issue we need to solve. I'm also seeing a segfault on anaconda.org, although that is using gcc. I wonder if it is the same.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/128428260/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/128438321", "html_url": "https://github.com/libdynd/libdynd/pull/481#issuecomment-128438321", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/481", "id": 128438321, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-08-06T16:49:08Z", "updated_at": "2015-08-06T16:49:08Z", "author_association": "OWNER", "body": "Hmm, rebuilding numpy with clang didn't fix it either. I'm not sure if this could show up with gcc. I'll try running the travis build here using gcc.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/128438321/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/128456213", "html_url": "https://github.com/libdynd/libdynd/pull/481#issuecomment-128456213", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/481", "id": 128456213, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-08-06T17:44:19Z", "updated_at": "2015-08-06T17:44:19Z", "author_association": "OWNER", "body": "Okay, this all works with gcc. If you'd like I can re-enable the other builds and we can merge this for now.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/128456213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/128651051", "html_url": "https://github.com/libdynd/libdynd/pull/481#issuecomment-128651051", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/481", "id": 128651051, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-08-07T09:23:27Z", "updated_at": "2015-08-07T09:23:27Z", "author_association": "OWNER", "body": "Wait, so do all the builds work?\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/128651051/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/128703194", "html_url": "https://github.com/libdynd/libdynd/pull/481#issuecomment-128703194", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/481", "id": 128703194, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-08-07T13:47:30Z", "updated_at": "2015-08-07T13:47:30Z", "author_association": "OWNER", "body": "Yep, I just commented the others out to speed up debugging the Python build. The Python build works with gcc but not with clang.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/128703194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/128706161", "html_url": "https://github.com/libdynd/libdynd/pull/481#issuecomment-128706161", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/481", "id": 128706161, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-08-07T13:56:38Z", "updated_at": "2015-08-07T13:56:38Z", "author_association": "OWNER", "body": "Okay, we'll definitely merge this but I'd like to see if I can sort out the clang issue first.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/128706161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/128709133", "html_url": "https://github.com/libdynd/libdynd/pull/481#issuecomment-128709133", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/481", "id": 128709133, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-08-07T14:04:57Z", "updated_at": "2015-08-07T14:04:57Z", "author_association": "OWNER", "body": "Oh, wait, are you saying that you want me to merge this now to help with sorting out the clang issue with Python? In that case I'll do it now.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/128709133/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/128717336", "html_url": "https://github.com/libdynd/libdynd/pull/481#issuecomment-128717336", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/481", "id": 128717336, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-08-07T14:42:04Z", "updated_at": "2015-08-07T14:42:04Z", "author_association": "OWNER", "body": "Not really, I need to re-enable the other builds first. We could do that if\nyou'd like though.\n\nOn Fri, Aug 7, 2015, 8:05 AM Irwin Zaid notifications@github.com wrote:\n\n> Oh, wait, are you saying that you want me to merge this now to help with\n> sorting out the clang issue with Python? In that case I'll do it now.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/libdynd/libdynd/pull/481#issuecomment-128709133.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/128717336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/128722042", "html_url": "https://github.com/libdynd/libdynd/pull/481#issuecomment-128722042", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/481", "id": 128722042, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-08-07T14:54:40Z", "updated_at": "2015-08-07T14:54:40Z", "author_association": "OWNER", "body": "@insertinterestingnamehere I believe I just fixed the clang issue, at least on my local machine. I've merged a change into dynd-python. Do you want to try again now?\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/128722042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/128723210", "html_url": "https://github.com/libdynd/libdynd/pull/481#issuecomment-128723210", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/481", "id": 128723210, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-08-07T14:56:21Z", "updated_at": "2015-08-07T14:56:21Z", "author_association": "OWNER", "body": "Fantastic! Yes, I'll switch this build back to clang and see if that fixes\nit. Thanks!\n\nOn Fri, Aug 7, 2015 at 8:54 AM Irwin Zaid notifications@github.com wrote:\n\n> @insertinterestingnamehere https://github.com/insertinterestingnamehere\n> I believe I just fixed the clang issue, at least on my local machine. I've\n> merged a change into dynd-python. Do you want to try again now?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/libdynd/libdynd/pull/481#issuecomment-128722042.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/128723210/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/128728849", "html_url": "https://github.com/libdynd/libdynd/pull/481#issuecomment-128728849", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/481", "id": 128728849, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-08-07T15:16:33Z", "updated_at": "2015-08-07T15:16:33Z", "author_association": "OWNER", "body": "Okay, the clang build works here now. I'll re-enable the other builds and get a similar PR up for dynd-python.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/128728849/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/128732830", "html_url": "https://github.com/libdynd/libdynd/pull/481#issuecomment-128732830", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/481", "id": 128732830, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-08-07T15:25:39Z", "updated_at": "2015-08-07T15:25:39Z", "author_association": "OWNER", "body": "Alright, let's see if this works. Once the builds pass again this should be good to go.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/128732830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/128757877", "html_url": "https://github.com/libdynd/libdynd/pull/481#issuecomment-128757877", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/481", "id": 128757877, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-08-07T16:33:11Z", "updated_at": "2015-08-07T16:33:11Z", "author_association": "OWNER", "body": "Alright, this is done. Thanks!\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/128757877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/128771306", "html_url": "https://github.com/libdynd/libdynd/pull/481#issuecomment-128771306", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/481", "id": 128771306, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-08-07T17:20:58Z", "updated_at": "2015-08-07T17:20:58Z", "author_association": "OWNER", "body": "Fantastic work!\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/128771306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/136335191", "html_url": "https://github.com/libdynd/libdynd/pull/475#issuecomment-136335191", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/475", "id": 136335191, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-08-31T10:58:15Z", "updated_at": "2015-08-31T10:58:15Z", "author_association": "OWNER", "body": "Ended up going with conda.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/136335191/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/136961118", "html_url": "https://github.com/libdynd/libdynd/pull/530#issuecomment-136961118", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/530", "id": 136961118, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-02T07:28:52Z", "updated_at": "2015-09-02T07:28:52Z", "author_association": "OWNER", "body": "Sounds good, merged.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/136961118/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/137627274", "html_url": "https://github.com/libdynd/libdynd/pull/532#issuecomment-137627274", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/532", "id": 137627274, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-04T02:18:24Z", "updated_at": "2015-09-04T02:18:24Z", "author_association": "OWNER", "body": "Okay, my goal here was to find a small workaround rather than adding a lot of extra code. I have it down to 3 errors, but am struggling to get it any further. I'll leave it open for reference while we work on getting this fixed. Mark's larger refactoring in https://github.com/libdynd/libdynd/pull/531 is probably the way to go.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/137627274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/137627426", "html_url": "https://github.com/libdynd/libdynd/pull/532#issuecomment-137627426", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/532", "id": 137627426, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-04T02:19:39Z", "updated_at": "2015-09-04T02:19:39Z", "author_association": "OWNER", "body": "I now have a msvc 2013 environment working, so at least this is no longer causing problems for the visibility fixes.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/137627426/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/137645040", "html_url": "https://github.com/libdynd/libdynd/pull/532#issuecomment-137645040", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/532", "id": 137645040, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-04T03:57:50Z", "updated_at": "2015-09-04T03:57:50Z", "author_association": "OWNER", "body": "Let's merge this then, and continue with 2015 separately.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/137645040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/137666081", "html_url": "https://github.com/libdynd/libdynd/pull/531#issuecomment-137666081", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/531", "id": 137666081, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-04T07:36:12Z", "updated_at": "2015-09-04T07:36:12Z", "author_association": "OWNER", "body": "It looks to me like something is broken about the SFINAE that should be happening within `has_make`, but not sure about the details yet.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/137666081/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/137704848", "html_url": "https://github.com/libdynd/libdynd/pull/531#issuecomment-137704848", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/531", "id": 137704848, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-04T11:00:42Z", "updated_at": "2015-09-04T11:00:42Z", "author_association": "OWNER", "body": "FYI, std::common_type is already overloaded for the complex types in complex.hpp\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/137704848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/137772182", "html_url": "https://github.com/libdynd/libdynd/pull/532#issuecomment-137772182", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/532", "id": 137772182, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-04T15:43:21Z", "updated_at": "2015-09-04T15:43:21Z", "author_association": "OWNER", "body": "Ah, sorry I wasn't clear, getting 2013 working on my end stemmed from getting the environment for it working properly and was independent of these changes. There's little or no net gain from this PR for the repository in general other than a small reduction in the number of msvc2015 errors we're seeing. Aside from that, this is just a handful of unnecessary special cases. I'll open a PR that reverts it.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/137772182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/137810219", "html_url": "https://github.com/libdynd/libdynd/pull/452#issuecomment-137810219", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/452", "id": 137810219, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-04T18:16:26Z", "updated_at": "2015-09-04T18:16:26Z", "author_association": "OWNER", "body": "It would be good to get this one merged at some point.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/137810219/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/137828473", "html_url": "https://github.com/libdynd/libdynd/pull/452#issuecomment-137828473", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/452", "id": 137828473, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-04T19:13:57Z", "updated_at": "2015-09-04T19:13:57Z", "author_association": "OWNER", "body": "Looks reasonable to me\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/137828473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/137828962", "html_url": "https://github.com/libdynd/libdynd/pull/452#issuecomment-137828962", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/452", "id": 137828962, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-04T19:14:39Z", "updated_at": "2015-09-04T19:14:39Z", "author_association": "OWNER", "body": "Thanks!\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/137828962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/137874319", "html_url": "https://github.com/libdynd/libdynd/pull/529#issuecomment-137874319", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/529", "id": 137874319, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-04T22:53:24Z", "updated_at": "2015-09-04T22:53:24Z", "author_association": "OWNER", "body": "Hahaha, okay, this has spectacularly many compiler errors at the moment, but the first pass to make all needed symbols visible is done. The next step in this PR is to go back and see if I can make the compiler happy that all the visibility declarations are consistent.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/137874319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/137879311", "html_url": "https://github.com/libdynd/libdynd/pull/529#issuecomment-137879311", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/529", "id": 137879311, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-04T23:44:42Z", "updated_at": "2015-09-04T23:44:42Z", "author_association": "OWNER", "body": "This is lots of work. So far, it looks like major steps in the right direction!\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/137879311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/138618006", "html_url": "https://github.com/libdynd/libdynd/issues/443#issuecomment-138618006", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/443", "id": 138618006, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-08T16:19:54Z", "updated_at": "2015-09-08T16:19:54Z", "author_association": "OWNER", "body": "Closed by https://github.com/libdynd/libdynd/pull/452.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/138618006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/138674807", "html_url": "https://github.com/libdynd/libdynd/pull/529#issuecomment-138674807", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/529", "id": 138674807, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-08T19:18:57Z", "updated_at": "2015-09-08T19:18:57Z", "author_association": "OWNER", "body": "Okay, so the next barrier to this appears to be that msvc raises a warning when an object from the standard library is exposed as a part of the interface for a dll. I'm trying to minimize this by more agressively inlining some functions and methods. From there, I think we should just suppress that particular warning, merge this, then continue working to remove the dependencies on standard library types in separate pull requests. Thoughts?\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/138674807/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/138675512", "html_url": "https://github.com/libdynd/libdynd/pull/529#issuecomment-138675512", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/529", "id": 138675512, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-08T19:22:11Z", "updated_at": "2015-09-08T19:22:11Z", "author_association": "OWNER", "body": "Yep, I think that's absolutely the right approach. Suppress the MSVC warning, make this pass on all platforms, then feel free to merge it if it does.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/138675512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/138698925", "html_url": "https://github.com/libdynd/libdynd/issues/418#issuecomment-138698925", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/418", "id": 138698925, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-08T21:03:00Z", "updated_at": "2015-09-08T21:03:00Z", "author_association": "OWNER", "body": "This one is also resolved by https://github.com/libdynd/libdynd/pull/452.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/138698925/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/138784347", "html_url": "https://github.com/libdynd/libdynd/pull/529#issuecomment-138784347", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/529", "id": 138784347, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-09T04:59:37Z", "updated_at": "2015-09-09T04:59:37Z", "author_association": "OWNER", "body": "Thanks for the input. This is working on msvc 2013 now. MinGW and msvc 2015 are still terribly averse to it though. :)\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/138784347/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/138941360", "html_url": "https://github.com/libdynd/libdynd/pull/529#issuecomment-138941360", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/529", "id": 138941360, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-09T15:08:50Z", "updated_at": "2015-09-09T15:08:50Z", "author_association": "OWNER", "body": "Merging. I'll follow up later today with more fixes and cleanup for MinGW and msvc 2015.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/138941360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/139008591", "html_url": "https://github.com/libdynd/libdynd/pull/536#issuecomment-139008591", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/536", "id": 139008591, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-09T18:57:52Z", "updated_at": "2015-09-09T18:57:52Z", "author_association": "OWNER", "body": "This is good to go. The rest of the changes ended up being relatively straightforward. I did make it so that `dynd::dynd_exception` no longer subclasses from `std::exception` so that it can pass across dll boundaries. If there are no objections, I'd like to merge this soon and continue with more modifications to the build system in a separate PR.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/139008591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/139008726", "html_url": "https://github.com/libdynd/libdynd/pull/536#issuecomment-139008726", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/536", "id": 139008726, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-09T18:58:16Z", "updated_at": "2015-09-09T18:58:16Z", "author_association": "OWNER", "body": "https://github.com/libdynd/dynd-python/pull/354 fixes the dynd-python error in the Python build.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/139008726/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/139445030", "html_url": "https://github.com/libdynd/libdynd/pull/539#issuecomment-139445030", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/539", "id": 139445030, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-11T03:39:49Z", "updated_at": "2015-09-11T03:39:49Z", "author_association": "OWNER", "body": "Okay, enabling parallel compilation for msvc made appveyor terribly slow, so that'll just have to be done via the arguments to cmake for now.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/139445030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/139445841", "html_url": "https://github.com/libdynd/libdynd/pull/539#issuecomment-139445841", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/539", "id": 139445841, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-11T03:49:25Z", "updated_at": "2015-09-11T03:49:25Z", "author_association": "OWNER", "body": "I just enabled parallel building for the conda build as well. I haven't taken the time to make the number of threads an option. I just set it to default at 5 so that it will run well on the two-core Travis CI machines. @izaid any thoughts on that?\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/139445841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/139447611", "html_url": "https://github.com/libdynd/libdynd/pull/539#issuecomment-139447611", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/539", "id": 139447611, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-11T04:07:26Z", "updated_at": "2015-09-11T04:07:26Z", "author_association": "OWNER", "body": "Wow, is it actually twice as fast with clang? That's impressive, feel free to merge so long as nothing is terribly slow.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/139447611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/139582687", "html_url": "https://github.com/libdynd/libdynd/pull/539#issuecomment-139582687", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/539", "id": 139582687, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-11T15:52:49Z", "updated_at": "2015-09-11T15:52:49Z", "author_association": "OWNER", "body": "The only slowdown was because appveyor couldn't handle running msvc with the -MP flag. On my windows machine doing that speeds up compilation dramatically, but the single-core appveyor bot wouldn't have anything of it, so I removed that change. Merging now.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/139582687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/139626436", "html_url": "https://github.com/libdynd/libdynd/pull/539#issuecomment-139626436", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/539", "id": 139626436, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-11T18:50:52Z", "updated_at": "2015-09-11T18:50:52Z", "author_association": "OWNER", "body": "I wonder if it's worth using http://www.cmake.org/cmake/help/v3.0/module/ProcessorCount.html to set the default?\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/139626436/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/139659178", "html_url": "https://github.com/libdynd/libdynd/pull/539#issuecomment-139659178", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/539", "id": 139659178, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-11T20:54:19Z", "updated_at": "2015-09-11T20:54:19Z", "author_association": "OWNER", "body": "Yep, we could definitely do some kind of dynamic processor detection in the conda build. There really isn't any point in doing that in the Travis build. On the other hand, the conda build calls cmake and then make, so setting the number of cores automatically may need to be done in shell. I haven't found any way to have cmake set the default number of threads for a makefile yet.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/139659178/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/139663059", "html_url": "https://github.com/libdynd/libdynd/pull/539#issuecomment-139663059", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/539", "id": 139663059, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-11T21:16:40Z", "updated_at": "2015-09-11T21:16:40Z", "author_association": "OWNER", "body": "Okay, I took a shot at it in https://github.com/libdynd/libdynd/pull/540.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/139663059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/139666691", "html_url": "https://github.com/libdynd/libdynd/pull/540#issuecomment-139666691", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/540", "id": 139666691, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-11T21:33:07Z", "updated_at": "2015-09-11T21:33:07Z", "author_association": "OWNER", "body": "Only for Linux and Mac for now.\n\nWe could do the same thing in the conda build for windows by adding `-DCMAKE_C_FLAGS=\"-MP\" -DCMAKE_CXX_FLAGS=\"-MP\"` to the cmake configuration step. I'm reluctant to do that by default in CMakeLists.txt for Windows right now though because it makes AppVeyor take around twice as long as before.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/139666691/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/139668107", "html_url": "https://github.com/libdynd/libdynd/pull/541#issuecomment-139668107", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/541", "id": 139668107, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-11T21:42:32Z", "updated_at": "2015-09-11T21:42:32Z", "author_association": "OWNER", "body": "My goal here is to make it so that we can (finally) build a usable dll and then make that the default behavior. There are still many linker errors that come when trying to build a dll, but I'll be pushing progress here as it comes.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/139668107/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/139832355", "html_url": "https://github.com/libdynd/libdynd/pull/542#issuecomment-139832355", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/542", "id": 139832355, "user": {"login": "seibert", "id": 425352, "avatar_url": "https://avatars1.githubusercontent.com/u/425352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seibert", "html_url": "https://github.com/seibert", "followers_url": "https://api.github.com/users/seibert/followers", "following_url": "https://api.github.com/users/seibert/following{/other_user}", "gists_url": "https://api.github.com/users/seibert/gists{/gist_id}", "starred_url": "https://api.github.com/users/seibert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seibert/subscriptions", "organizations_url": "https://api.github.com/users/seibert/orgs", "repos_url": "https://api.github.com/users/seibert/repos", "events_url": "https://api.github.com/users/seibert/events{/privacy}", "received_events_url": "https://api.github.com/users/seibert/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-13T00:41:12Z", "updated_at": "2015-09-13T00:41:12Z", "author_association": "NONE", "body": "This sounds very interesting...  Can you explain a little more what the motivation is for this feature?\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/139832355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/140229481", "html_url": "https://github.com/libdynd/libdynd/issues/545#issuecomment-140229481", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/545", "id": 140229481, "user": {"login": "cpcloud", "id": 417981, "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpcloud", "html_url": "https://github.com/cpcloud", "followers_url": "https://api.github.com/users/cpcloud/followers", "following_url": "https://api.github.com/users/cpcloud/following{/other_user}", "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions", "organizations_url": "https://api.github.com/users/cpcloud/orgs", "repos_url": "https://api.github.com/users/cpcloud/repos", "events_url": "https://api.github.com/users/cpcloud/events{/privacy}", "received_events_url": "https://api.github.com/users/cpcloud/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-14T23:05:24Z", "updated_at": "2015-09-14T23:05:45Z", "author_association": "CONTRIBUTOR", "body": "since shape and dtype are specified together, you pass it all in as a datashape like this:\n\n``` python\nIn [1]: from dynd import nd\n\nIn [2]: nd.empty(\"2 * 5 * int64\")\nOut[2]:\nnd.array([[                   0,                    0,                    0,\n           -6230216477459388373,                    0],\n          [                   0, -6643761981031997627,                    0,\n                              0, -2748508434750321115]],\n         type=\"2 * 5 * int64\")\n\nIn [3]: nd.zeros(\"2 * 5 * int64\")\nOut[3]:\nnd.array([[0, 0, 0, 0, 0], [0, 0, 0, 0, 0]],\n         type=\"2 * 5 * int64\")\n```\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/140229481/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/140231129", "html_url": "https://github.com/libdynd/libdynd/issues/545#issuecomment-140231129", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/545", "id": 140231129, "user": {"login": "jreback", "id": 953992, "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jreback", "html_url": "https://github.com/jreback", "followers_url": "https://api.github.com/users/jreback/followers", "following_url": "https://api.github.com/users/jreback/following{/other_user}", "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}", "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jreback/subscriptions", "organizations_url": "https://api.github.com/users/jreback/orgs", "repos_url": "https://api.github.com/users/jreback/repos", "events_url": "https://api.github.com/users/jreback/events{/privacy}", "received_events_url": "https://api.github.com/users/jreback/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-14T23:17:58Z", "updated_at": "2015-09-14T23:17:58Z", "author_association": "CONTRIBUTOR", "body": "agreed\n\nso works around for me\nbut for compat dynd needs to coerce these\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/140231129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/140231236", "html_url": "https://github.com/libdynd/libdynd/issues/545#issuecomment-140231236", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/545", "id": 140231236, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-14T23:18:56Z", "updated_at": "2015-09-14T23:18:56Z", "author_association": "OWNER", "body": "We'll definitely do a compatibility layer. I'm not sure exactly which form it will take (it may need an explicit buy-in), and I quite appreciate having all these issues here. No ETA on that, sorry.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/140231236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/140233302", "html_url": "https://github.com/libdynd/libdynd/issues/545#issuecomment-140233302", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/545", "id": 140233302, "user": {"login": "jreback", "id": 953992, "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jreback", "html_url": "https://github.com/jreback", "followers_url": "https://api.github.com/users/jreback/followers", "following_url": "https://api.github.com/users/jreback/following{/other_user}", "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}", "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jreback/subscriptions", "organizations_url": "https://api.github.com/users/jreback/orgs", "repos_url": "https://api.github.com/users/jreback/repos", "events_url": "https://api.github.com/users/jreback/events{/privacy}", "received_events_url": "https://api.github.com/users/jreback/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-14T23:34:46Z", "updated_at": "2015-09-14T23:34:46Z", "author_association": "CONTRIBUTOR", "body": "yeh no hurry. posting as a I find.\n\nI am in fact creating a compat layer (which of course I hope to eventually disolve :)\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/140233302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/140233513", "html_url": "https://github.com/libdynd/libdynd/issues/545#issuecomment-140233513", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/545", "id": 140233513, "user": {"login": "jreback", "id": 953992, "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jreback", "html_url": "https://github.com/jreback", "followers_url": "https://api.github.com/users/jreback/followers", "following_url": "https://api.github.com/users/jreback/following{/other_user}", "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}", "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jreback/subscriptions", "organizations_url": "https://api.github.com/users/jreback/orgs", "repos_url": "https://api.github.com/users/jreback/repos", "events_url": "https://api.github.com/users/jreback/events{/privacy}", "received_events_url": "https://api.github.com/users/jreback/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-14T23:36:26Z", "updated_at": "2015-09-14T23:36:26Z", "author_association": "CONTRIBUTOR", "body": "@cpcloud in fact this type of transformation is so common, I think it belongs in datashape proper, mainly for numpy compat in construction:\n\n```\nIn [4]: dshape('3 * 5 * int64')\nOut[4]: dshape(\"3 * 5 * int64\")\n\nIn [5]: dshape((3,5),dtype='int64')\nTypeError: dshape() got an unexpected keyword argument 'dtype'\n```\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/140233513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/140233687", "html_url": "https://github.com/libdynd/libdynd/issues/545#issuecomment-140233687", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/545", "id": 140233687, "user": {"login": "cpcloud", "id": 417981, "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpcloud", "html_url": "https://github.com/cpcloud", "followers_url": "https://api.github.com/users/cpcloud/followers", "following_url": "https://api.github.com/users/cpcloud/following{/other_user}", "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions", "organizations_url": "https://api.github.com/users/cpcloud/orgs", "repos_url": "https://api.github.com/users/cpcloud/repos", "events_url": "https://api.github.com/users/cpcloud/events{/privacy}", "received_events_url": "https://api.github.com/users/cpcloud/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-14T23:37:48Z", "updated_at": "2015-09-14T23:37:48Z", "author_association": "CONTRIBUTOR", "body": "@jreback in fact this _is_ in datashape :)\n\n``` python\nIn [3]: from datashape import dshape, from_numpy\n\nIn [4]: from_numpy((2, 5), int)\nOut[4]: dshape(\"2 * 5 * int64\")\n\nIn [5]: from dynd import nd\n\nIn [6]: nd.zeros(str(from_numpy((2, 5), np.int64)))\nOut[6]:\nnd.array([[0, 0, 0, 0, 0], [0, 0, 0, 0, 0]],\n         type=\"2 * 5 * int64\")\n```\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/140233687/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/140233918", "html_url": "https://github.com/libdynd/libdynd/issues/545#issuecomment-140233918", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/545", "id": 140233918, "user": {"login": "jreback", "id": 953992, "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jreback", "html_url": "https://github.com/jreback", "followers_url": "https://api.github.com/users/jreback/followers", "following_url": "https://api.github.com/users/jreback/following{/other_user}", "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}", "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jreback/subscriptions", "organizations_url": "https://api.github.com/users/jreback/orgs", "repos_url": "https://api.github.com/users/jreback/repos", "events_url": "https://api.github.com/users/jreback/events{/privacy}", "received_events_url": "https://api.github.com/users/jreback/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-14T23:39:44Z", "updated_at": "2015-09-14T23:39:44Z", "author_association": "CONTRIBUTOR", "body": "ahha!\n\nthe magical method, awesome! thanks\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/140233918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/140234273", "html_url": "https://github.com/libdynd/libdynd/issues/545#issuecomment-140234273", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/545", "id": 140234273, "user": {"login": "jreback", "id": 953992, "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jreback", "html_url": "https://github.com/jreback", "followers_url": "https://api.github.com/users/jreback/followers", "following_url": "https://api.github.com/users/jreback/following{/other_user}", "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}", "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jreback/subscriptions", "organizations_url": "https://api.github.com/users/jreback/orgs", "repos_url": "https://api.github.com/users/jreback/repos", "events_url": "https://api.github.com/users/jreback/events{/privacy}", "received_events_url": "https://api.github.com/users/jreback/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-14T23:42:47Z", "updated_at": "2015-09-14T23:42:47Z", "author_association": "CONTRIBUTOR", "body": "hmm, this should really by on dynd-python.....\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/140234273/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/140234791", "html_url": "https://github.com/libdynd/libdynd/issues/545#issuecomment-140234791", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/545", "id": 140234791, "user": {"login": "cpcloud", "id": 417981, "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpcloud", "html_url": "https://github.com/cpcloud", "followers_url": "https://api.github.com/users/cpcloud/followers", "following_url": "https://api.github.com/users/cpcloud/following{/other_user}", "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions", "organizations_url": "https://api.github.com/users/cpcloud/orgs", "repos_url": "https://api.github.com/users/cpcloud/repos", "events_url": "https://api.github.com/users/cpcloud/events{/privacy}", "received_events_url": "https://api.github.com/users/cpcloud/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-14T23:46:56Z", "updated_at": "2015-09-14T23:46:56Z", "author_association": "CONTRIBUTOR", "body": "@jreback what do you mean? This is really a datashape only operation ... dynd-python has `ndt`\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/140234791/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/140234862", "html_url": "https://github.com/libdynd/libdynd/issues/545#issuecomment-140234862", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/545", "id": 140234862, "user": {"login": "jreback", "id": 953992, "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jreback", "html_url": "https://github.com/jreback", "followers_url": "https://api.github.com/users/jreback/followers", "following_url": "https://api.github.com/users/jreback/following{/other_user}", "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}", "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jreback/subscriptions", "organizations_url": "https://api.github.com/users/jreback/orgs", "repos_url": "https://api.github.com/users/jreback/repos", "events_url": "https://api.github.com/users/jreback/events{/privacy}", "received_events_url": "https://api.github.com/users/jreback/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-14T23:47:33Z", "updated_at": "2015-09-14T23:47:33Z", "author_association": "CONTRIBUTOR", "body": "yeh what I mean is should have posted it on `dynd-python`, this is `libdynd` \n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/140234862/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/140234876", "html_url": "https://github.com/libdynd/libdynd/issues/545#issuecomment-140234876", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/545", "id": 140234876, "user": {"login": "cpcloud", "id": 417981, "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpcloud", "html_url": "https://github.com/cpcloud", "followers_url": "https://api.github.com/users/cpcloud/followers", "following_url": "https://api.github.com/users/cpcloud/following{/other_user}", "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions", "organizations_url": "https://api.github.com/users/cpcloud/orgs", "repos_url": "https://api.github.com/users/cpcloud/repos", "events_url": "https://api.github.com/users/cpcloud/events{/privacy}", "received_events_url": "https://api.github.com/users/cpcloud/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-14T23:47:40Z", "updated_at": "2015-09-14T23:47:53Z", "author_association": "CONTRIBUTOR", "body": "FWIW, when The Great Parser Rewrite\u2122 happens there will be the One True Representation and this problem will go away.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/140234876/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/140235128", "html_url": "https://github.com/libdynd/libdynd/issues/545#issuecomment-140235128", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/545", "id": 140235128, "user": {"login": "jreback", "id": 953992, "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jreback", "html_url": "https://github.com/jreback", "followers_url": "https://api.github.com/users/jreback/followers", "following_url": "https://api.github.com/users/jreback/following{/other_user}", "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}", "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jreback/subscriptions", "organizations_url": "https://api.github.com/users/jreback/orgs", "repos_url": "https://api.github.com/users/jreback/repos", "events_url": "https://api.github.com/users/jreback/events{/privacy}", "received_events_url": "https://api.github.com/users/jreback/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-14T23:49:54Z", "updated_at": "2015-09-14T23:50:41Z", "author_association": "CONTRIBUTOR", "body": "hahah, ok in the meantime...\n\nI am actually trying to do this.\n\n`shape=(2,5), ndt.type('?int64')`\n\nhow do I make a datashape from this?\n\n`dshape('2 * 5 * ?int64'`\n\nw/o string hacking :tm: \n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/140235128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/140235626", "html_url": "https://github.com/libdynd/libdynd/issues/545#issuecomment-140235626", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/545", "id": 140235626, "user": {"login": "cpcloud", "id": 417981, "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpcloud", "html_url": "https://github.com/cpcloud", "followers_url": "https://api.github.com/users/cpcloud/followers", "following_url": "https://api.github.com/users/cpcloud/following{/other_user}", "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions", "organizations_url": "https://api.github.com/users/cpcloud/orgs", "repos_url": "https://api.github.com/users/cpcloud/repos", "events_url": "https://api.github.com/users/cpcloud/events{/privacy}", "received_events_url": "https://api.github.com/users/cpcloud/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-14T23:53:59Z", "updated_at": "2015-09-14T23:53:59Z", "author_association": "CONTRIBUTOR", "body": "not the prettiest thing in the world:\n\n``` python\nIn [15]: from dynd import nd, ndt\n\nIn [16]: from datashape import DataShape, dshape\n\nIn [17]: t = ndt.type('?int64')\n\nIn [18]: DataShape(*(shape + (dshape(str(t)),)))\nOut[18]: dshape(\"2 * 5 * ?int64\")\n\nIn [19]: nd.zeros(str(DataShape(*(shape + (dshape(str(t)),)))))\nOut[19]:\nnd.array([[0, 0, 0, 0, 0], [0, 0, 0, 0, 0]],\n         type=\"2 * 5 * ?int64\")\n```\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/140235626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/140235804", "html_url": "https://github.com/libdynd/libdynd/issues/545#issuecomment-140235804", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/545", "id": 140235804, "user": {"login": "jreback", "id": 953992, "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jreback", "html_url": "https://github.com/jreback", "followers_url": "https://api.github.com/users/jreback/followers", "following_url": "https://api.github.com/users/jreback/following{/other_user}", "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}", "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jreback/subscriptions", "organizations_url": "https://api.github.com/users/jreback/orgs", "repos_url": "https://api.github.com/users/jreback/repos", "events_url": "https://api.github.com/users/jreback/events{/privacy}", "received_events_url": "https://api.github.com/users/jreback/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-14T23:55:32Z", "updated_at": "2015-09-14T23:56:04Z", "author_association": "CONTRIBUTOR", "body": "winner-winner chicken-dinner\n\n```\nIn [25]: nd.empty('*'.join([ str(i) for i in shape ] + [str(dtype)]))\nOut[25]: \nnd.array([[4294967297, 4294967297, 4294967297, 4294967297, 4294967297],\n          [4294967297, 4294967297, 4294967297, 4294967297, 4294967297]],\n         type=\"2 * 5 * ?int64\")\n```\n\ndon't need no datashape :chicken: \n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/140235804/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/140241775", "html_url": "https://github.com/libdynd/libdynd/issues/545#issuecomment-140241775", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/545", "id": 140241775, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-15T00:37:18Z", "updated_at": "2015-09-15T00:37:18Z", "author_association": "OWNER", "body": "One thing to note is that `nd.empty` does support almost the syntax you started with, just without the `dtype=` keyword parameter passing:\n\n`````` python\nIn [2]: nd.empty((2, 5), 'int64')\nOut[2]: \nnd.array([[27584998696288348, 31525665550303337, 12948278432563253,\n                463863545956,                 0],\n          [0, 0, 0, 0, 0]],\n         type=\"2 * 5 * int64\")```\n``````\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/140241775/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/140605239", "html_url": "https://github.com/libdynd/libdynd/pull/541#issuecomment-140605239", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/541", "id": 140605239, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-16T02:14:07Z", "updated_at": "2015-09-16T02:14:07Z", "author_association": "OWNER", "body": "@mwiebe @izaid It looks like I need to use a cmake templating mechanism to make it so that if we are installing a shared library the preprocessor defines give `__declspec(dllimport)` in all the appropriate places and if we are installing a static library all the dllimports are not present. Can either of you confirm that? It seems weird to be changing one of the main macros like that, but that's the only way I see for supporting using both static and dynamic libraries.\nAs things are, this version works for building a shared lib (other than the fact that the libdynd.dll needs to be copied into the folder for the tests to get them to run properly), but it fails badly for a static build. On the other hand, if I make it so that the dllimport macro isn't present for client modules, everything works fine.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/140605239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/140785488", "html_url": "https://github.com/libdynd/libdynd/pull/541#issuecomment-140785488", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/541", "id": 140785488, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-16T15:55:47Z", "updated_at": "2015-09-16T15:55:47Z", "author_association": "OWNER", "body": "Okay, I think I see where to go from here. [It appears](http://stackoverflow.com/questions/4489441/why-when-is-declspec-dllimport-not-needed) this is only a problem for data and objects exported from the dll. Those, I should be able to fix by declaring things like `dynd::ndt::type::instances`, `dynd::eval::default_eval_context`, `dynd::ndt::detail::builtin_kinds`, `dynd::ndt::detail::builtin_data_alignments`, `dynd::ndt::type::instances`, `dynd::ndt::detail::builtin_data_sizes`, `dynd::string_encoding_char_size_table`, `dynd::nd::sin`, `dynd::nd::random::uniform`, `dynd::nd::mean`, etc. in their corresponding header files as static rather than having them be declared extern in the headers and defined in the cpp files.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/140785488/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/140839861", "html_url": "https://github.com/libdynd/libdynd/pull/541#issuecomment-140839861", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/541", "id": 140839861, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-16T18:47:08Z", "updated_at": "2015-09-16T18:47:08Z", "author_association": "OWNER", "body": "Okay, this is good locally. We'll see if appveyor agrees.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/140839861/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/140897475", "html_url": "https://github.com/libdynd/libdynd/pull/541#issuecomment-140897475", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/541", "id": 140897475, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-16T21:16:35Z", "updated_at": "2015-09-16T21:16:35Z", "author_association": "OWNER", "body": "Okay, this is passing. I'm still hunting out symbols that aren't used by the tests but still should be exported. This can be merged as it is though.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/140897475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/140900659", "html_url": "https://github.com/libdynd/libdynd/pull/541#issuecomment-140900659", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/541", "id": 140900659, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-16T21:32:20Z", "updated_at": "2015-09-16T21:32:20Z", "author_association": "OWNER", "body": "This is a lot of solid work, thanks a lot!\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/140900659/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/140903041", "html_url": "https://github.com/libdynd/libdynd/pull/541#issuecomment-140903041", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/541", "id": 140903041, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-16T21:44:54Z", "updated_at": "2015-09-16T21:44:54Z", "author_association": "OWNER", "body": "Thanks for the help!\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/140903041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/141155248", "html_url": "https://github.com/libdynd/libdynd/pull/551#issuecomment-141155248", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/551", "id": 141155248, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-17T17:13:25Z", "updated_at": "2015-09-17T17:13:25Z", "author_association": "OWNER", "body": "With this last change, the tests all compile and pass for both static and dynamic libs on both msvc 2013 and mingw-w64 (gcc 5.2).\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/141155248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/141159302", "html_url": "https://github.com/libdynd/libdynd/pull/551#issuecomment-141159302", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/551", "id": 141159302, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-17T17:27:20Z", "updated_at": "2015-09-17T17:27:20Z", "author_association": "OWNER", "body": "No news for cuda on windows. I just gave that build a shot and it is definitely broken, though maybe I'm not telling cmake to use nvcc properly. We'll have to revisit that at some point, but now probably isn't the time.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/141159302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/141522524", "html_url": "https://github.com/libdynd/libdynd/pull/471#issuecomment-141522524", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/471", "id": 141522524, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-18T18:09:43Z", "updated_at": "2015-09-18T18:09:43Z", "author_association": "OWNER", "body": "This is now all working in master. Closing.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/141522524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/141740221", "html_url": "https://github.com/libdynd/libdynd/pull/557#issuecomment-141740221", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/557", "id": 141740221, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-20T03:19:28Z", "updated_at": "2015-09-20T03:19:28Z", "author_association": "OWNER", "body": "This is fantastic! It's great that we can start doing stuff like this now!\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/141740221/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/141826781", "html_url": "https://github.com/libdynd/libdynd/issues/559#issuecomment-141826781", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/559", "id": 141826781, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-20T19:46:33Z", "updated_at": "2015-09-20T19:46:33Z", "author_association": "OWNER", "body": "@cpcloud, you are the current expert on this.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/141826781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/141826799", "html_url": "https://github.com/libdynd/libdynd/issues/559#issuecomment-141826799", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/559", "id": 141826799, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-20T19:47:04Z", "updated_at": "2015-09-20T19:47:04Z", "author_association": "OWNER", "body": "But, yes, it should do that Jeff. It's just a question of a missing feature.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/141826799/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/141879062", "html_url": "https://github.com/libdynd/libdynd/pull/561#issuecomment-141879062", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/561", "id": 141879062, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-21T05:04:48Z", "updated_at": "2015-09-21T05:04:48Z", "author_association": "OWNER", "body": "Want to look through this, @insertinterestingnamehere?\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/141879062/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/141879674", "html_url": "https://github.com/libdynd/libdynd/pull/561#issuecomment-141879674", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/561", "id": 141879674, "user": {"login": "cpcloud", "id": 417981, "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpcloud", "html_url": "https://github.com/cpcloud", "followers_url": "https://api.github.com/users/cpcloud/followers", "following_url": "https://api.github.com/users/cpcloud/following{/other_user}", "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions", "organizations_url": "https://api.github.com/users/cpcloud/orgs", "repos_url": "https://api.github.com/users/cpcloud/repos", "events_url": "https://api.github.com/users/cpcloud/events{/privacy}", "received_events_url": "https://api.github.com/users/cpcloud/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-21T05:16:46Z", "updated_at": "2015-09-21T05:16:46Z", "author_association": "CONTRIBUTOR", "body": "I see the problem\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/141879674/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/142032703", "html_url": "https://github.com/libdynd/libdynd/pull/561#issuecomment-142032703", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/561", "id": 142032703, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-21T16:20:37Z", "updated_at": "2015-09-21T16:20:37Z", "author_association": "OWNER", "body": "Hmm. That's a really odd test failure. Looking into it more now.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/142032703/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/142039187", "html_url": "https://github.com/libdynd/libdynd/pull/561#issuecomment-142039187", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/561", "id": 142039187, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-21T16:47:08Z", "updated_at": "2015-09-21T16:47:08Z", "author_association": "OWNER", "body": "@insertinterestingnamehere -- Actually, I was just thinking it'd be good for you to review the code. I don't think you need to fix any failures.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/142039187/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/142041076", "html_url": "https://github.com/libdynd/libdynd/pull/561#issuecomment-142041076", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/561", "id": 142041076, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-21T16:52:08Z", "updated_at": "2015-09-21T16:52:08Z", "author_association": "OWNER", "body": "Good idea. Thanks. I've been wanting to read through more examples of going from function to kernel to arrfunc.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/142041076/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/142043629", "html_url": "https://github.com/libdynd/libdynd/pull/561#issuecomment-142043629", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/561", "id": 142043629, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-21T17:02:54Z", "updated_at": "2015-09-21T17:04:31Z", "author_association": "OWNER", "body": "@insertinterestingnamehere If you can do this as a formal code review, that'd be great. Leave comments for anything that needs to be fixed.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/142043629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/142043791", "html_url": "https://github.com/libdynd/libdynd/pull/561#issuecomment-142043791", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/561", "id": 142043791, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-21T17:03:38Z", "updated_at": "2015-09-21T17:03:38Z", "author_association": "OWNER", "body": "Will do.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/142043791/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/142070074", "html_url": "https://github.com/libdynd/libdynd/pull/561#issuecomment-142070074", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/561", "id": 142070074, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-21T18:35:40Z", "updated_at": "2015-09-21T18:35:40Z", "author_association": "OWNER", "body": "I'm fine with these changes once the tests pass. Looking forward, I do have some questions about these routines though:\nWhat is the benefit of using an arrfunc for these allocation routines as opposed to a convenience function?\nIn the long run, should we expect looping through an array for initialization to be optimized by the compiler, or should we work towards doing this sort of initialization via a call to `memset`?\nIs there any reason we chose to make two nearly identical arrfuncs for filling an array with values, and is there a straightforward way to remove the repetition?\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/142070074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/142085710", "html_url": "https://github.com/libdynd/libdynd/pull/549#issuecomment-142085710", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/549", "id": 142085710, "user": {"login": "cpcloud", "id": 417981, "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpcloud", "html_url": "https://github.com/cpcloud", "followers_url": "https://api.github.com/users/cpcloud/followers", "following_url": "https://api.github.com/users/cpcloud/following{/other_user}", "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions", "organizations_url": "https://api.github.com/users/cpcloud/orgs", "repos_url": "https://api.github.com/users/cpcloud/repos", "events_url": "https://api.github.com/users/cpcloud/events{/privacy}", "received_events_url": "https://api.github.com/users/cpcloud/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-21T19:30:07Z", "updated_at": "2015-09-21T19:30:07Z", "author_association": "CONTRIBUTOR", "body": "@izaid should this be merged?\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/142085710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/142086780", "html_url": "https://github.com/libdynd/libdynd/pull/549#issuecomment-142086780", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/549", "id": 142086780, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-21T19:34:53Z", "updated_at": "2015-09-21T19:34:53Z", "author_association": "OWNER", "body": "Merged.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/142086780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/142343652", "html_url": "https://github.com/libdynd/libdynd/pull/562#issuecomment-142343652", "issue_url": "https://api.github.com/repos/libdynd/libdynd/issues/562", "id": 142343652, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "created_at": "2015-09-22T16:39:57Z", "updated_at": "2015-09-22T16:39:57Z", "author_association": "OWNER", "body": "I'm a little worried about the msvc failure. It looks like it's complaining about using an explicit template instantiation as a template parameter. Hopefully using the kernels in `kernels/apply.hpp` will help in working around the issues here.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/issues/comments/142343652/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}], "commit_comments": [{"url": "https://api.github.com/repos/libdynd/libdynd/comments/1652842", "html_url": "https://github.com/libdynd/libdynd/commit/f2ee697e70d0048ba69b9e5fc1b98666fd1b825f#commitcomment-1652842", "id": 1652842, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "position": 127, "line": 355, "path": "src/dnd/codegen/unary_kernel_adapter_codegen_x64_sysvabi.cpp", "commit_id": "f2ee697e70d0048ba69b9e5fc1b98666fd1b825f", "created_at": "2012-07-31T16:25:03Z", "updated_at": "2012-07-31T16:25:03Z", "author_association": "OWNER", "body": "I believe most compilers use different instructions than NOPs for larger sizes, to skip over these parts faster, have you seen that before?\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/comments/1652842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/comments/1652855", "html_url": "https://github.com/libdynd/libdynd/commit/f2ee697e70d0048ba69b9e5fc1b98666fd1b825f#commitcomment-1652855", "id": 1652855, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "position": 5, "line": 244, "path": "src/dnd/kernels/assignment_kernels.cpp", "commit_id": "f2ee697e70d0048ba69b9e5fc1b98666fd1b825f", "created_at": "2012-07-31T16:27:13Z", "updated_at": "2012-07-31T16:27:13Z", "author_association": "OWNER", "body": "Should just delete things like this, no need to clutter with code comments.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/comments/1652855/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/comments/1652880", "html_url": "https://github.com/libdynd/libdynd/commit/f2ee697e70d0048ba69b9e5fc1b98666fd1b825f#commitcomment-1652880", "id": 1652880, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "position": 22, "line": 34, "path": "tests/codegen/test_binary_kernel_adapter.cpp", "commit_id": "f2ee697e70d0048ba69b9e5fc1b98666fd1b825f", "created_at": "2012-07-31T16:30:57Z", "updated_at": "2012-07-31T16:30:57Z", "author_association": "OWNER", "body": "We'll have to figure out what kind of formatting conventions we want - ideally I think it shouldn't be possible to identify who wrote what code based on the formatting. Should start a C++ conventions doc on the wiki.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/comments/1652880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/comments/1652896", "html_url": "https://github.com/libdynd/libdynd/commit/f2ee697e70d0048ba69b9e5fc1b98666fd1b825f#commitcomment-1652896", "id": 1652896, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "position": 40, "line": 96, "path": "tests/codegen/test_unary_kernel_adapter.cpp", "commit_id": "f2ee697e70d0048ba69b9e5fc1b98666fd1b825f", "created_at": "2012-07-31T16:34:08Z", "updated_at": "2012-07-31T16:34:08Z", "author_association": "OWNER", "body": "Could this go in kernels_for_disassembly.cpp, to isolate all the working kernels like this?\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/comments/1652896/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/comments/1652938", "html_url": "https://github.com/libdynd/libdynd/commit/f2ee697e70d0048ba69b9e5fc1b98666fd1b825f#commitcomment-1652938", "id": 1652938, "user": {"login": "ovillellas", "id": 1890137, "avatar_url": "https://avatars2.githubusercontent.com/u/1890137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ovillellas", "html_url": "https://github.com/ovillellas", "followers_url": "https://api.github.com/users/ovillellas/followers", "following_url": "https://api.github.com/users/ovillellas/following{/other_user}", "gists_url": "https://api.github.com/users/ovillellas/gists{/gist_id}", "starred_url": "https://api.github.com/users/ovillellas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ovillellas/subscriptions", "organizations_url": "https://api.github.com/users/ovillellas/orgs", "repos_url": "https://api.github.com/users/ovillellas/repos", "events_url": "https://api.github.com/users/ovillellas/events{/privacy}", "received_events_url": "https://api.github.com/users/ovillellas/received_events", "type": "User", "site_admin": false}, "position": 40, "line": 96, "path": "tests/codegen/test_unary_kernel_adapter.cpp", "commit_id": "f2ee697e70d0048ba69b9e5fc1b98666fd1b825f", "created_at": "2012-07-31T16:44:50Z", "updated_at": "2012-07-31T16:44:50Z", "author_association": "CONTRIBUTOR", "body": "that just slipped in, shouldn't be there.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/comments/1652938/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/comments/1652964", "html_url": "https://github.com/libdynd/libdynd/commit/f2ee697e70d0048ba69b9e5fc1b98666fd1b825f#commitcomment-1652964", "id": 1652964, "user": {"login": "ovillellas", "id": 1890137, "avatar_url": "https://avatars2.githubusercontent.com/u/1890137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ovillellas", "html_url": "https://github.com/ovillellas", "followers_url": "https://api.github.com/users/ovillellas/followers", "following_url": "https://api.github.com/users/ovillellas/following{/other_user}", "gists_url": "https://api.github.com/users/ovillellas/gists{/gist_id}", "starred_url": "https://api.github.com/users/ovillellas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ovillellas/subscriptions", "organizations_url": "https://api.github.com/users/ovillellas/orgs", "repos_url": "https://api.github.com/users/ovillellas/repos", "events_url": "https://api.github.com/users/ovillellas/events{/privacy}", "received_events_url": "https://api.github.com/users/ovillellas/received_events", "type": "User", "site_admin": false}, "position": 22, "line": 34, "path": "tests/codegen/test_binary_kernel_adapter.cpp", "commit_id": "f2ee697e70d0048ba69b9e5fc1b98666fd1b825f", "created_at": "2012-07-31T16:50:09Z", "updated_at": "2012-07-31T16:50:09Z", "author_association": "CONTRIBUTOR", "body": "this was kind of making things clear for me. Plenty of parameters in a single line confuses me. IMO it is even better to keep parameter lists shorts, for example I wanted to propose to you packing all the signature items in some kind of struct, so that it becomes a single parameter. But yes, we need some coding conventions... in my opinion those are more important in the interface front to be consistent (headers). Implementation should be more \"free but easy to read\" IMO.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/comments/1652964/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/comments/1652983", "html_url": "https://github.com/libdynd/libdynd/commit/f2ee697e70d0048ba69b9e5fc1b98666fd1b825f#commitcomment-1652983", "id": 1652983, "user": {"login": "ovillellas", "id": 1890137, "avatar_url": "https://avatars2.githubusercontent.com/u/1890137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ovillellas", "html_url": "https://github.com/ovillellas", "followers_url": "https://api.github.com/users/ovillellas/followers", "following_url": "https://api.github.com/users/ovillellas/following{/other_user}", "gists_url": "https://api.github.com/users/ovillellas/gists{/gist_id}", "starred_url": "https://api.github.com/users/ovillellas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ovillellas/subscriptions", "organizations_url": "https://api.github.com/users/ovillellas/orgs", "repos_url": "https://api.github.com/users/ovillellas/repos", "events_url": "https://api.github.com/users/ovillellas/events{/privacy}", "received_events_url": "https://api.github.com/users/ovillellas/received_events", "type": "User", "site_admin": false}, "position": 127, "line": 355, "path": "src/dnd/codegen/unary_kernel_adapter_codegen_x64_sysvabi.cpp", "commit_id": "f2ee697e70d0048ba69b9e5fc1b98666fd1b825f", "created_at": "2012-07-31T16:54:02Z", "updated_at": "2012-07-31T16:54:02Z", "author_association": "CONTRIBUTOR", "body": "yep, but this is right now just used to align the specialization table. The multibyte nops would be overkill ATM. In the intel manuals there are recommended nops upto size 9...\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/comments/1652983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/comments/1653064", "html_url": "https://github.com/libdynd/libdynd/commit/f2ee697e70d0048ba69b9e5fc1b98666fd1b825f#commitcomment-1653064", "id": 1653064, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "position": 127, "line": 355, "path": "src/dnd/codegen/unary_kernel_adapter_codegen_x64_sysvabi.cpp", "commit_id": "f2ee697e70d0048ba69b9e5fc1b98666fd1b825f", "created_at": "2012-07-31T17:09:35Z", "updated_at": "2012-07-31T17:09:35Z", "author_association": "OWNER", "body": "Ok, I noticed that MS's compiler was sometimes (but not always) aligning the beginning of the loop, and is using instructions other than NOP for sizes smaller than 9.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/comments/1653064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/comments/1653091", "html_url": "https://github.com/libdynd/libdynd/commit/f2ee697e70d0048ba69b9e5fc1b98666fd1b825f#commitcomment-1653091", "id": 1653091, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "position": 22, "line": 34, "path": "tests/codegen/test_binary_kernel_adapter.cpp", "commit_id": "f2ee697e70d0048ba69b9e5fc1b98666fd1b825f", "created_at": "2012-07-31T17:16:03Z", "updated_at": "2012-07-31T17:16:03Z", "author_association": "OWNER", "body": "Yes, with this multi-dimensional dynamic code I find the number of parameters everywhere gets large very quickly. In the current Python-exposed gfunc code, there's a vector<dtype> used for this signature, so maybe a vector or begin/end pointers could be used, to also be consistent with the more general n-ary functions which need to be added yet.\n\nI agree with the implementation being a bit more free than headers that get published more widely, but it would be nice for it to all be pretty close together. This code will be open sourced, and I'd like to establish conventions early of being relatively strict about code cleanliness in general.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/comments/1653091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/comments/1656524", "html_url": "https://github.com/libdynd/libdynd/commit/f2ee697e70d0048ba69b9e5fc1b98666fd1b825f#commitcomment-1656524", "id": 1656524, "user": {"login": "ovillellas", "id": 1890137, "avatar_url": "https://avatars2.githubusercontent.com/u/1890137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ovillellas", "html_url": "https://github.com/ovillellas", "followers_url": "https://api.github.com/users/ovillellas/followers", "following_url": "https://api.github.com/users/ovillellas/following{/other_user}", "gists_url": "https://api.github.com/users/ovillellas/gists{/gist_id}", "starred_url": "https://api.github.com/users/ovillellas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ovillellas/subscriptions", "organizations_url": "https://api.github.com/users/ovillellas/orgs", "repos_url": "https://api.github.com/users/ovillellas/repos", "events_url": "https://api.github.com/users/ovillellas/events{/privacy}", "received_events_url": "https://api.github.com/users/ovillellas/received_events", "type": "User", "site_admin": false}, "position": 22, "line": 34, "path": "tests/codegen/test_binary_kernel_adapter.cpp", "commit_id": "f2ee697e70d0048ba69b9e5fc1b98666fd1b825f", "created_at": "2012-08-01T09:36:17Z", "updated_at": "2012-08-01T09:36:17Z", "author_association": "CONTRIBUTOR", "body": "I'd go for something simple, both for types and strides, maybe packed into\nan struct all the info. In fact, I will do that not only for the arguments,\nbuy I'd consider also return type as an extra element... and the calling\nconvention.\n\nThe idea is passing a description of streams, not so different from what\nyou get when programing GPUs. You see, in the end is all the same stuff...\npassing streams of inputs to a fixed function. Note that GPUs usually have\nalso a set of static data that gets passed in to be shared among all the\nelement computations.\n\nI'll go for something that goes like:\n\nstruct call_signature {\n    callconv_t calling_convention;\n    call_type_id_t\\* types; // [0] is return value, [1] is 1st arg, ...\n    size_t arg_count; // including return... that is, the size of \"types\"\n};\n\nstruct call_context {\n    void\\*               streams;   // [0] is return stream, [1] is 1st arg,\n[2] is 2nd arg...\n    ptrdiff_t\\*          strides; // \u001b\u001b[0] is return stream stride, ...\n};\n\nThe generated code will receive a call_context that contains enough\ninformation to describe the streams, the count and function to call. Note\nthat I would keep the count outside the call_context as well as the\nfunction, but that could not be needed. The arg count should be implicit in\nthe function being called (generated code).\n\nThe code generator would receive the signature. I would assume the\ncall_signature to contain call_type_id_t... that is, types from the calling\nconvention point of view. That is so because we really want to cache code\nbased on the calling convention signature, that should be made outside of\nthe code generation. There should be a function to translate a signature\nfrom the semantic point of view (the current type_id) to the calling\nconvention type. Note that those functions already exist as the unique_id\n(kind of). On its current implementation using bitfields for the different\ntypes we could support around 21 parameters (using 3 bits per parameter in\na 64 bit register... with 1 bit for different calling conventions -not\nneeded in 64 bits). In any case, I would move that to some kind  data base\nthat allows retrieving a unique id.\n\nLong story short: doing something like that will reduce the interface. If\nwe get the signature and the call_context, the interface for n-ary function\nwill be the same, and internally it could use if necessary some internal\ndispatch to generate the different functions if needed. We could probably\nmake an assembly function template that would be general for all kernels in\nmost places, with the only changes needed being those dealing with the\nsetup of the arguments, the update of the streams and the extraction of the\nresult.\n\nCheers,\n  Oscar\n\nOn Tue, Jul 31, 2012 at 7:16 PM, Mark <\nreply@reply.github.com\n\n> wrote:\n> \n> Yes, with this multi-dimensional dynamic code I find the number of\n> parameters everywhere gets large very quickly. In the current\n> Python-exposed gfunc code, there's a vector<dtype> used for this signature,\n> so maybe a vector or begin/end pointers could be used, to also be\n> consistent with the more general n-ary functions which need to be added yet.\n> \n> I agree with the implementation being a bit more free than headers that\n> get published more widely, but it would be nice for it to all be pretty\n> close together. This code will be open sourced, and I'd like to establish\n> conventions early of being relatively strict about code cleanliness in\n> general.\n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> \n> https://github.com/ContinuumIO/dynamicndarray/commit/f2ee697e70d0048ba69b9e5fc1b98666fd1b825f#commitcomment-1653091\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/comments/1656524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/comments/1658244", "html_url": "https://github.com/libdynd/libdynd/commit/f2ee697e70d0048ba69b9e5fc1b98666fd1b825f#commitcomment-1658244", "id": 1658244, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "position": 22, "line": 34, "path": "tests/codegen/test_binary_kernel_adapter.cpp", "commit_id": "f2ee697e70d0048ba69b9e5fc1b98666fd1b825f", "created_at": "2012-08-01T16:24:36Z", "updated_at": "2012-08-01T16:24:36Z", "author_association": "OWNER", "body": "Yes, this is good for the n-ary kernels, can you put this in a new document on the wiki to start a design doc for them there?\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/comments/1658244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/comments/1658347", "html_url": "https://github.com/libdynd/libdynd/commit/f2ee697e70d0048ba69b9e5fc1b98666fd1b825f#commitcomment-1658347", "id": 1658347, "user": {"login": "ovillellas", "id": 1890137, "avatar_url": "https://avatars2.githubusercontent.com/u/1890137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ovillellas", "html_url": "https://github.com/ovillellas", "followers_url": "https://api.github.com/users/ovillellas/followers", "following_url": "https://api.github.com/users/ovillellas/following{/other_user}", "gists_url": "https://api.github.com/users/ovillellas/gists{/gist_id}", "starred_url": "https://api.github.com/users/ovillellas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ovillellas/subscriptions", "organizations_url": "https://api.github.com/users/ovillellas/orgs", "repos_url": "https://api.github.com/users/ovillellas/repos", "events_url": "https://api.github.com/users/ovillellas/events{/privacy}", "received_events_url": "https://api.github.com/users/ovillellas/received_events", "type": "User", "site_admin": false}, "position": 22, "line": 34, "path": "tests/codegen/test_binary_kernel_adapter.cpp", "commit_id": "f2ee697e70d0048ba69b9e5fc1b98666fd1b825f", "created_at": "2012-08-01T16:51:01Z", "updated_at": "2012-08-01T16:51:01Z", "author_association": "CONTRIBUTOR", "body": "sure.\n\nOn Wed, Aug 1, 2012 at 6:24 PM, Mark <\nreply@reply.github.com\n\n> wrote:\n> \n> Yes, this is good for the n-ary kernels, can you put this in a new\n> document on the wiki to start a design doc for them there?\n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> \n> https://github.com/ContinuumIO/dynamicndarray/commit/f2ee697e70d0048ba69b9e5fc1b98666fd1b825f#commitcomment-1658244\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/comments/1658347/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/comments/8039050", "html_url": "https://github.com/libdynd/libdynd/commit/9cc430654c085012a18478f12f04bd1d892ee423#commitcomment-8039050", "id": 8039050, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "position": 11, "line": 65, "path": "tests/types/test_pointer_type.cpp", "commit_id": "9cc430654c085012a18478f12f04bd1d892ee423", "created_at": "2014-10-05T00:59:23Z", "updated_at": "2014-10-05T00:59:23Z", "author_association": "OWNER", "body": "Might be nice to test that the type of `a` and the type of `b` are as expected.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/comments/8039050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/comments/8054122", "html_url": "https://github.com/libdynd/libdynd/commit/9cc430654c085012a18478f12f04bd1d892ee423#commitcomment-8054122", "id": 8054122, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "position": null, "line": null, "path": null, "commit_id": "9cc430654c085012a18478f12f04bd1d892ee423", "created_at": "2014-10-06T18:38:56Z", "updated_at": "2014-10-06T18:38:56Z", "author_association": "OWNER", "body": "I added such a test in latest merge.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/comments/8054122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/comments/8482713", "html_url": "https://github.com/libdynd/libdynd/commit/3262d7fb385fb634557eb66f0bd6fd9f7cf6a7a5#commitcomment-8482713", "id": 8482713, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "position": 4, "line": 97, "path": "include/dynd/type.hpp", "commit_id": "3262d7fb385fb634557eb66f0bd6fd9f7cf6a7a5", "created_at": "2014-11-07T18:00:34Z", "updated_at": "2014-11-07T18:00:34Z", "author_association": "OWNER", "body": "Are you sure it's necessary to remove this?\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/comments/8482713/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/comments/8482898", "html_url": "https://github.com/libdynd/libdynd/commit/3262d7fb385fb634557eb66f0bd6fd9f7cf6a7a5#commitcomment-8482898", "id": 8482898, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "position": 4, "line": 97, "path": "include/dynd/type.hpp", "commit_id": "3262d7fb385fb634557eb66f0bd6fd9f7cf6a7a5", "created_at": "2014-11-07T18:13:46Z", "updated_at": "2014-11-07T18:13:46Z", "author_association": "OWNER", "body": "Not necessary, but in most of our other classes we don't use the private label at the top. So we should be consistent I think.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/comments/8482898/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/comments/8792331", "html_url": "https://github.com/libdynd/libdynd/commit/4c5f17b9530b90c8e6748d2ded77ac5ab59743e6#commitcomment-8792331", "id": 8792331, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "position": null, "line": null, "path": null, "commit_id": "4c5f17b9530b90c8e6748d2ded77ac5ab59743e6", "created_at": "2014-12-02T08:17:48Z", "updated_at": "2014-12-02T08:17:48Z", "author_association": "OWNER", "body": "I don't think this will work with CUDA, I'm pretty sure CUDA can only handle gcc 4.7.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/comments/8792331/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/comments/8792378", "html_url": "https://github.com/libdynd/libdynd/commit/4c5f17b9530b90c8e6748d2ded77ac5ab59743e6#commitcomment-8792378", "id": 8792378, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "position": null, "line": null, "path": null, "commit_id": "4c5f17b9530b90c8e6748d2ded77ac5ab59743e6", "created_at": "2014-12-02T08:22:15Z", "updated_at": "2014-12-02T08:22:15Z", "author_association": "OWNER", "body": "Indeed, I discovered this by observing it fail.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/comments/8792378/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/comments/9116712", "html_url": "https://github.com/libdynd/libdynd/commit/bf437f4609a4edece04e8a37a0419d0ed601f0a5#commitcomment-9116712", "id": 9116712, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "position": null, "line": null, "path": null, "commit_id": "bf437f4609a4edece04e8a37a0419d0ed601f0a5", "created_at": "2014-12-30T09:59:43Z", "updated_at": "2014-12-30T09:59:43Z", "author_association": "OWNER", "body": "This is actually a problem when compiling dynd-python with Clang. It fails because tolower and isspace are supposedly ambiguous, which is why I added the std::. Unfortunately, with this change, it is back to being ambiguous and failing again.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/comments/9116712/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/comments/9207248", "html_url": "https://github.com/libdynd/libdynd/commit/bea89c83460483352bff43da7afa205a86b7e473#commitcomment-9207248", "id": 9207248, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "position": 5, "line": 25, "path": "CMakeLists.txt", "commit_id": "bea89c83460483352bff43da7afa205a86b7e473", "created_at": "2015-01-08T19:01:47Z", "updated_at": "2015-01-08T19:01:47Z", "author_association": "OWNER", "body": "+1\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/comments/9207248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/comments/9207743", "html_url": "https://github.com/libdynd/libdynd/commit/bea89c83460483352bff43da7afa205a86b7e473#commitcomment-9207743", "id": 9207743, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "position": 5, "line": 25, "path": "CMakeLists.txt", "commit_id": "bea89c83460483352bff43da7afa205a86b7e473", "created_at": "2015-01-08T19:37:14Z", "updated_at": "2015-01-08T19:37:14Z", "author_association": "OWNER", "body": "Great to see you are paying attention!\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/comments/9207743/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/comments/10331366", "html_url": "https://github.com/libdynd/libdynd/commit/cc0ed991c19f2a68f94a4e3b82469389cec2ca1b#commitcomment-10331366", "id": 10331366, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "position": 4, "line": 309, "path": "include/dynd/types/arrfunc_type.hpp", "commit_id": "cc0ed991c19f2a68f94a4e3b82469389cec2ca1b", "created_at": "2015-03-22T00:01:02Z", "updated_at": "2015-03-22T00:01:02Z", "author_association": "OWNER", "body": "Docstring would be nice - I assume this returns all the typevars contained in the type? Just saying 'vars' is a tiny bit ambiguous with var_dim.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/comments/10331366/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/comments/10708451", "html_url": "https://github.com/libdynd/libdynd/commit/b973ba6012ce7a1b68ac4abc6be2e3d6406e606f#commitcomment-10708451", "id": 10708451, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "position": 39, "line": 37, "path": "include/dynd/kernels/arithmetic.hpp", "commit_id": "b973ba6012ce7a1b68ac4abc6be2e3d6406e606f", "created_at": "2015-04-14T08:27:15Z", "updated_at": "2015-04-14T08:27:22Z", "author_association": "OWNER", "body": "Doesn't ndt::make_arrfunc<R (A0)>() accomplish this much simpler?\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/comments/10708451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/comments/10708899", "html_url": "https://github.com/libdynd/libdynd/commit/b973ba6012ce7a1b68ac4abc6be2e3d6406e606f#commitcomment-10708899", "id": 10708899, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "position": 39, "line": 37, "path": "include/dynd/kernels/arithmetic.hpp", "commit_id": "b973ba6012ce7a1b68ac4abc6be2e3d6406e606f", "created_at": "2015-04-14T08:54:59Z", "updated_at": "2015-04-14T08:54:59Z", "author_association": "OWNER", "body": "Indeed it does!\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/comments/10708899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/comments/11914837", "html_url": "https://github.com/libdynd/libdynd/commit/e334dbd7b7ee2f85a7c218193b93813b191d0025#commitcomment-11914837", "id": 11914837, "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "position": 157, "line": 270, "path": "include/dynd/float16.hpp", "commit_id": "e334dbd7b7ee2f85a7c218193b93813b191d0025", "created_at": "2015-06-29T17:22:37Z", "updated_at": "2015-06-29T17:22:37Z", "author_association": "OWNER", "body": "This could just be XOR with 0x8000, I believe.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/comments/11914837/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/comments/11917695", "html_url": "https://github.com/libdynd/libdynd/commit/e334dbd7b7ee2f85a7c218193b93813b191d0025#commitcomment-11917695", "id": 11917695, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "position": 157, "line": 270, "path": "include/dynd/float16.hpp", "commit_id": "e334dbd7b7ee2f85a7c218193b93813b191d0025", "created_at": "2015-06-29T19:44:06Z", "updated_at": "2015-06-29T19:44:06Z", "author_association": "OWNER", "body": "Probably, yes! float16 and float128 are not complete. :)\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/comments/11917695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/comments/15741990", "html_url": "https://github.com/libdynd/libdynd/commit/4cd164aea81d4e505df33688198b7f3e49074c3a#commitcomment-15741990", "id": 15741990, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "position": 16, "line": 101, "path": "include/dynd/bytes.hpp", "commit_id": "4cd164aea81d4e505df33688198b7f3e49074c3a", "created_at": "2016-01-28T18:45:15Z", "updated_at": "2016-01-28T18:45:15Z", "author_association": "OWNER", "body": "Do we want this operator in `dynd::bytes` or `dynd::string`? I actually don't know the answer, it's a question of what semantics we want.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/comments/15741990/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/comments/15742000", "html_url": "https://github.com/libdynd/libdynd/commit/4cd164aea81d4e505df33688198b7f3e49074c3a#commitcomment-15742000", "id": 15742000, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "position": 41, "line": 41, "path": "include/dynd/kernels/string_concat_kernel.hpp", "commit_id": "4cd164aea81d4e505df33688198b7f3e49074c3a", "created_at": "2016-01-28T18:45:35Z", "updated_at": "2016-01-28T18:45:35Z", "author_association": "OWNER", "body": "The `extra_type` is no longer necessary, feel free to delete.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/comments/15742000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/comments/15742045", "html_url": "https://github.com/libdynd/libdynd/commit/4cd164aea81d4e505df33688198b7f3e49074c3a#commitcomment-15742045", "id": 15742045, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "position": 47, "line": 47, "path": "include/dynd/kernels/string_concat_kernel.hpp", "commit_id": "4cd164aea81d4e505df33688198b7f3e49074c3a", "created_at": "2016-01-28T18:47:17Z", "updated_at": "2016-01-28T18:47:17Z", "author_association": "OWNER", "body": "Kernel looks good. Where we should put concat_one_string is a good question.\n\nSome kernels, like this one, expose functions that are generally useful. Another example would be all our special mathematical functions. If that is the case, we typically expose a `dynd::` version so people can use them independently. I'm not sure if concat is a candidate for this or not, just putting it out there.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/comments/15742045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/comments/15742075", "html_url": "https://github.com/libdynd/libdynd/commit/4cd164aea81d4e505df33688198b7f3e49074c3a#commitcomment-15742075", "id": 15742075, "user": {"login": "mdboom", "id": 38294, "avatar_url": "https://avatars3.githubusercontent.com/u/38294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdboom", "html_url": "https://github.com/mdboom", "followers_url": "https://api.github.com/users/mdboom/followers", "following_url": "https://api.github.com/users/mdboom/following{/other_user}", "gists_url": "https://api.github.com/users/mdboom/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdboom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdboom/subscriptions", "organizations_url": "https://api.github.com/users/mdboom/orgs", "repos_url": "https://api.github.com/users/mdboom/repos", "events_url": "https://api.github.com/users/mdboom/events{/privacy}", "received_events_url": "https://api.github.com/users/mdboom/received_events", "type": "User", "site_admin": false}, "position": 16, "line": 101, "path": "include/dynd/bytes.hpp", "commit_id": "4cd164aea81d4e505df33688198b7f3e49074c3a", "created_at": "2016-01-28T18:48:06Z", "updated_at": "2016-01-28T18:48:06Z", "author_association": "CONTRIBUTOR", "body": "Yeah -- I don't feel strongly either.  My thinking was \"concatenating bytes doesn't really have to assume anything about the content, so probably makes sense there\".  (In contrast to the comparison operators which _do_ belong in `string` IMHO).\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/comments/15742075/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/comments/15742082", "html_url": "https://github.com/libdynd/libdynd/commit/4cd164aea81d4e505df33688198b7f3e49074c3a#commitcomment-15742082", "id": 15742082, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "position": 61, "line": 61, "path": "include/dynd/kernels/string_concat_kernel.hpp", "commit_id": "4cd164aea81d4e505df33688198b7f3e49074c3a", "created_at": "2016-01-28T18:48:13Z", "updated_at": "2016-01-28T18:48:13Z", "author_association": "OWNER", "body": "Looks good. You can drop the `dynd::` part. Also, `make_type<dynd::string>()` and `type(string_id)` do the same thing. No preference here.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/comments/15742082/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/comments/15742140", "html_url": "https://github.com/libdynd/libdynd/commit/4cd164aea81d4e505df33688198b7f3e49074c3a#commitcomment-15742140", "id": 15742140, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "position": 16, "line": 16, "path": "include/dynd/string.hpp", "commit_id": "4cd164aea81d4e505df33688198b7f3e49074c3a", "created_at": "2016-01-28T18:50:02Z", "updated_at": "2016-01-28T18:54:08Z", "author_association": "OWNER", "body": "Just a little mistake, need to also rename view on line 16 to string_concatenation. What we do here is really declare a singleton struct of type `string_concatenation` and a global variable of the same type called `string_concatenation`. The name after the declaration refers to the variable `string_concatenation`, but the struct can be referred to by `struct string_concatenation`.\n\nThe explanation is complicated, but the user interface is easy.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/comments/15742140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/comments/15742151", "html_url": "https://github.com/libdynd/libdynd/commit/4cd164aea81d4e505df33688198b7f3e49074c3a#commitcomment-15742151", "id": 15742151, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "position": 17, "line": 17, "path": "src/dynd/kernels/string_concat_kernel.cpp", "commit_id": "4cd164aea81d4e505df33688198b7f3e49074c3a", "created_at": "2016-01-28T18:50:32Z", "updated_at": "2016-01-28T18:50:32Z", "author_association": "OWNER", "body": "I'm sure you'd catch this, but the function body shouldn't be there.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/comments/15742151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/comments/15742188", "html_url": "https://github.com/libdynd/libdynd/commit/4cd164aea81d4e505df33688198b7f3e49074c3a#commitcomment-15742188", "id": 15742188, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "position": 22, "line": 439, "path": "tests/types/test_string_type.cpp", "commit_id": "4cd164aea81d4e505df33688198b7f3e49074c3a", "created_at": "2016-01-28T18:51:28Z", "updated_at": "2016-01-28T18:51:28Z", "author_association": "OWNER", "body": "We can use `EXPECT_ARRAY_EQ` for testing. If you do that, you don't need to use `.as<T>`.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/comments/15742188/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/comments/15742198", "html_url": "https://github.com/libdynd/libdynd/commit/4cd164aea81d4e505df33688198b7f3e49074c3a#commitcomment-15742198", "id": 15742198, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "position": 34, "line": 449, "path": "tests/types/test_string_type.cpp", "commit_id": "4cd164aea81d4e505df33688198b7f3e49074c3a", "created_at": "2016-01-28T18:52:12Z", "updated_at": "2016-01-28T18:52:12Z", "author_association": "OWNER", "body": "This should just work `nd::string_concatenation(a, b)`, without the `()`.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/comments/15742198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/comments/15742280", "html_url": "https://github.com/libdynd/libdynd/commit/4cd164aea81d4e505df33688198b7f3e49074c3a#commitcomment-15742280", "id": 15742280, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "position": 16, "line": 101, "path": "include/dynd/bytes.hpp", "commit_id": "4cd164aea81d4e505df33688198b7f3e49074c3a", "created_at": "2016-01-28T18:55:01Z", "updated_at": "2016-01-28T18:55:01Z", "author_association": "OWNER", "body": "Ping @insertinterestingnamehere and @mwiebe.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/comments/15742280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/comments/15742288", "html_url": "https://github.com/libdynd/libdynd/commit/4cd164aea81d4e505df33688198b7f3e49074c3a#commitcomment-15742288", "id": 15742288, "user": {"login": "mdboom", "id": 38294, "avatar_url": "https://avatars3.githubusercontent.com/u/38294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdboom", "html_url": "https://github.com/mdboom", "followers_url": "https://api.github.com/users/mdboom/followers", "following_url": "https://api.github.com/users/mdboom/following{/other_user}", "gists_url": "https://api.github.com/users/mdboom/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdboom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdboom/subscriptions", "organizations_url": "https://api.github.com/users/mdboom/orgs", "repos_url": "https://api.github.com/users/mdboom/repos", "events_url": "https://api.github.com/users/mdboom/events{/privacy}", "received_events_url": "https://api.github.com/users/mdboom/received_events", "type": "User", "site_admin": false}, "position": 34, "line": 449, "path": "tests/types/test_string_type.cpp", "commit_id": "4cd164aea81d4e505df33688198b7f3e49074c3a", "created_at": "2016-01-28T18:55:12Z", "updated_at": "2016-01-28T18:55:12Z", "author_association": "CONTRIBUTOR", "body": "Yeah -- I was puzzled by this, too.  I think it's due to my forgetting to rename the _instance name_ of `view` to `string_concatenation` above.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/comments/15742288/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/comments/15742385", "html_url": "https://github.com/libdynd/libdynd/commit/4cd164aea81d4e505df33688198b7f3e49074c3a#commitcomment-15742385", "id": 15742385, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "position": 16, "line": 101, "path": "include/dynd/bytes.hpp", "commit_id": "4cd164aea81d4e505df33688198b7f3e49074c3a", "created_at": "2016-01-28T18:59:03Z", "updated_at": "2016-01-28T18:59:03Z", "author_association": "OWNER", "body": "Concatenating bytes sounds fine to me. I don't really have a strong opinion there.\nAren't our strings null terminated though? That would make it so that we'd want a string-specific implementation of concatenation.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/comments/15742385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/comments/15742421", "html_url": "https://github.com/libdynd/libdynd/commit/4cd164aea81d4e505df33688198b7f3e49074c3a#commitcomment-15742421", "id": 15742421, "user": {"login": "mdboom", "id": 38294, "avatar_url": "https://avatars3.githubusercontent.com/u/38294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdboom", "html_url": "https://github.com/mdboom", "followers_url": "https://api.github.com/users/mdboom/followers", "following_url": "https://api.github.com/users/mdboom/following{/other_user}", "gists_url": "https://api.github.com/users/mdboom/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdboom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdboom/subscriptions", "organizations_url": "https://api.github.com/users/mdboom/orgs", "repos_url": "https://api.github.com/users/mdboom/repos", "events_url": "https://api.github.com/users/mdboom/events{/privacy}", "received_events_url": "https://api.github.com/users/mdboom/received_events", "type": "User", "site_admin": false}, "position": 17, "line": 17, "path": "src/dynd/kernels/string_concat_kernel.cpp", "commit_id": "4cd164aea81d4e505df33688198b7f3e49074c3a", "created_at": "2016-01-28T19:00:31Z", "updated_at": "2016-01-28T19:00:31Z", "author_association": "CONTRIBUTOR", "body": "Not sure I follow.  You mean the function body should be in `string.hpp`?\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/comments/15742421/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/comments/15742432", "html_url": "https://github.com/libdynd/libdynd/commit/4cd164aea81d4e505df33688198b7f3e49074c3a#commitcomment-15742432", "id": 15742432, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "position": 16, "line": 101, "path": "include/dynd/bytes.hpp", "commit_id": "4cd164aea81d4e505df33688198b7f3e49074c3a", "created_at": "2016-01-28T19:00:54Z", "updated_at": "2016-01-28T19:00:54Z", "author_association": "OWNER", "body": "`dynd::string` is actually not NULL-terminated, which is the same as `std::string` (also not NULL-terminated). So we're actually cool, though I know that is a bit unexpected depending on one's background.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/comments/15742432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/comments/15742492", "html_url": "https://github.com/libdynd/libdynd/commit/4cd164aea81d4e505df33688198b7f3e49074c3a#commitcomment-15742492", "id": 15742492, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "position": 17, "line": 17, "path": "src/dynd/kernels/string_concat_kernel.cpp", "commit_id": "4cd164aea81d4e505df33688198b7f3e49074c3a", "created_at": "2016-01-28T19:03:15Z", "updated_at": "2016-01-28T19:03:15Z", "author_association": "OWNER", "body": "You have this function defined twice, right? Once in string_concat_kernel.cpp and once in string.cpp?\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/comments/15742492/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/comments/15742506", "html_url": "https://github.com/libdynd/libdynd/commit/4cd164aea81d4e505df33688198b7f3e49074c3a#commitcomment-15742506", "id": 15742506, "user": {"login": "mdboom", "id": 38294, "avatar_url": "https://avatars3.githubusercontent.com/u/38294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdboom", "html_url": "https://github.com/mdboom", "followers_url": "https://api.github.com/users/mdboom/followers", "following_url": "https://api.github.com/users/mdboom/following{/other_user}", "gists_url": "https://api.github.com/users/mdboom/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdboom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdboom/subscriptions", "organizations_url": "https://api.github.com/users/mdboom/orgs", "repos_url": "https://api.github.com/users/mdboom/repos", "events_url": "https://api.github.com/users/mdboom/events{/privacy}", "received_events_url": "https://api.github.com/users/mdboom/received_events", "type": "User", "site_admin": false}, "position": 16, "line": 101, "path": "include/dynd/bytes.hpp", "commit_id": "4cd164aea81d4e505df33688198b7f3e49074c3a", "created_at": "2016-01-28T19:03:43Z", "updated_at": "2016-01-28T19:03:43Z", "author_association": "CONTRIBUTOR", "body": "I don't think the current string implementation is null-terminated.  It's allocated for _exactly_ the size of the string.  It's completely reasonable that it would become null-terminated, however (to shrink without reallocating etc.) so indeed that probably is still a good argument for a string-specific concatenation implementation.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/comments/15742506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/comments/15742512", "html_url": "https://github.com/libdynd/libdynd/commit/4cd164aea81d4e505df33688198b7f3e49074c3a#commitcomment-15742512", "id": 15742512, "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "position": 17, "line": 17, "path": "src/dynd/kernels/string_concat_kernel.cpp", "commit_id": "4cd164aea81d4e505df33688198b7f3e49074c3a", "created_at": "2016-01-28T19:04:15Z", "updated_at": "2016-01-28T19:05:15Z", "author_association": "OWNER", "body": "Ah, okay, I see. You don't even need this file `string_concat_kernel.cpp`. The reason the compiler isn't complaining is probably because that file wasn't added to CMakeLists.txt. (Just delete it.)\n\nIn general, we try and keep our kernels all in the header files.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/comments/15742512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/comments/15742524", "html_url": "https://github.com/libdynd/libdynd/commit/4cd164aea81d4e505df33688198b7f3e49074c3a#commitcomment-15742524", "id": 15742524, "user": {"login": "mdboom", "id": 38294, "avatar_url": "https://avatars3.githubusercontent.com/u/38294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdboom", "html_url": "https://github.com/mdboom", "followers_url": "https://api.github.com/users/mdboom/followers", "following_url": "https://api.github.com/users/mdboom/following{/other_user}", "gists_url": "https://api.github.com/users/mdboom/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdboom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdboom/subscriptions", "organizations_url": "https://api.github.com/users/mdboom/orgs", "repos_url": "https://api.github.com/users/mdboom/repos", "events_url": "https://api.github.com/users/mdboom/events{/privacy}", "received_events_url": "https://api.github.com/users/mdboom/received_events", "type": "User", "site_admin": false}, "position": 17, "line": 17, "path": "src/dynd/kernels/string_concat_kernel.cpp", "commit_id": "4cd164aea81d4e505df33688198b7f3e49074c3a", "created_at": "2016-01-28T19:05:04Z", "updated_at": "2016-01-28T19:05:10Z", "author_association": "CONTRIBUTOR", "body": "Ah, indeed.  I committed this file by accident.  In this case, I don't need a `string_concat_kernel.cpp` at all, I suppose.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/comments/15742524/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/comments/15742900", "html_url": "https://github.com/libdynd/libdynd/commit/4cd164aea81d4e505df33688198b7f3e49074c3a#commitcomment-15742900", "id": 15742900, "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "position": 16, "line": 101, "path": "include/dynd/bytes.hpp", "commit_id": "4cd164aea81d4e505df33688198b7f3e49074c3a", "created_at": "2016-01-28T19:18:47Z", "updated_at": "2016-01-28T19:18:47Z", "author_association": "OWNER", "body": "Okay, that's a surprise to me. Implementing it in bytes sounds great for now then. We can change that if we decide to go for null terminated strings later.\n", "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/comments/15742900/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}], "review_comments": [{"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/9767018", "pull_request_review_id": null, "id": 9767018, "diff_hunk": "@@ -21,6 +23,16 @@ if(\"${CMAKE_SOURCE_DIR}\" STREQUAL \"${CMAKE_CURRENT_SOURCE_DIR}\")\n             \"Build a libdynd shared library instead of a static library\"\n             ON)\n     endif()\n+# -DDYND_CUDA=ON/OFF, whether to build libdynd with NVIDIA's CUDA\n+    if(CUDA_FOUND)\n+        option(DYND_CUDA\n+            \"Build a libdynd library with CUDA\"\n+            OFF) # While CUDA support is in development, we default to OFF.\n+    else()\n+        option(DYND_CUDA\n+            \"Build a libdynd library without CUDA\"\n+            OFF)\n+    endif()", "path": "CMakeLists.txt", "position": 22, "original_position": 22, "commit_id": "862e80a19d4478c2dd8f162c94f70be46a04b527", "original_commit_id": "862e80a19d4478c2dd8f162c94f70be46a04b527", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "Here I think we just want:\n\n```\n        option(DYND_CUDA\n             \"Build a libdynd library with CUDA\"\n             OFF) # While CUDA support is in development, we default to OFF.\n```\n\nwithout the `if(CUDA_FOUND)` part, and later if we change that we can change it to\n\n```\n        option(DYND_CUDA\n             \"Build a libdynd library with CUDA\"\n             CUDA_FOUND) # Enable CUDA by default if it was found\n```\n", "created_at": "2014-02-14T22:36:02Z", "updated_at": "2014-02-14T22:36:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/5#discussion_r9767018", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/5", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/9767018"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/5#discussion_r9767018"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/5"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/9767018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10155527", "pull_request_review_id": null, "id": 10155527, "diff_hunk": "@@ -0,0 +1,91 @@\n+//\n+// Copyright (C) 2011-14 Irwin Zaid, Mark Wiebe, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#ifndef _DYND__CUDA_CONFIG_HPP_\n+#define _DYND__CUDA_CONFIG_HPP_\n+\n+#include <assert.h>\n+#include <cmath>\n+\n+#ifdef DYND_CUDA\n+#include <cuda_runtime.h>\n+#endif // DYND_CUDA\n+\n+#ifdef __CUDACC__", "path": "include/dynd/cuda_config.hpp", "position": null, "original_position": 16, "commit_id": "6b31ebb2836722c88c145e018be602cf7163525a", "original_commit_id": "cff9817e9ff536ccf934354e761f7973e5dad739", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "Maybe a comment here, \"This is set when building with CUDA's nvcc\"\n", "created_at": "2014-02-28T06:02:14Z", "updated_at": "2014-03-04T19:51:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/10#discussion_r10155527", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/10", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10155527"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/10#discussion_r10155527"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/10"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10155527/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10155533", "pull_request_review_id": null, "id": 10155533, "diff_hunk": "@@ -0,0 +1,91 @@\n+//\n+// Copyright (C) 2011-14 Irwin Zaid, Mark Wiebe, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#ifndef _DYND__CUDA_CONFIG_HPP_\n+#define _DYND__CUDA_CONFIG_HPP_\n+\n+#include <assert.h>\n+#include <cmath>\n+\n+#ifdef DYND_CUDA\n+#include <cuda_runtime.h>\n+#endif // DYND_CUDA\n+\n+#ifdef __CUDACC__\n+\n+#ifdef __CUDA_ARCH__", "path": "include/dynd/cuda_config.hpp", "position": null, "original_position": 18, "commit_id": "6b31ebb2836722c88c145e018be602cf7163525a", "original_commit_id": "cff9817e9ff536ccf934354e761f7973e5dad739", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "And a similar comment, \"This is set when building code which runs on the GPU\"\n", "created_at": "2014-02-28T06:02:36Z", "updated_at": "2014-03-04T19:51:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/10#discussion_r10155533", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/10", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10155533"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/10#discussion_r10155533"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/10"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10155533/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10155575", "pull_request_review_id": null, "id": 10155575, "diff_hunk": "@@ -0,0 +1,91 @@\n+//\n+// Copyright (C) 2011-14 Irwin Zaid, Mark Wiebe, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#ifndef _DYND__CUDA_CONFIG_HPP_\n+#define _DYND__CUDA_CONFIG_HPP_\n+\n+#include <assert.h>\n+#include <cmath>\n+\n+#ifdef DYND_CUDA\n+#include <cuda_runtime.h>\n+#endif // DYND_CUDA\n+\n+#ifdef __CUDACC__\n+\n+#ifdef __CUDA_ARCH__\n+#define DYND_CUDA_DEVICE_ARCH\n+#else\n+#define DYND_CUDA_HOST_ARCH\n+#endif\n+\n+#define DYND_CUDA_DEVICE_CALLABLE __device__\n+#define DYND_CUDA_HOST_DEVICE_CALLABLE __host__ DYND_CUDA_DEVICE_CALLABLE\n+#define DYND_CUDA_GLOBAL_CALLABLE __global__", "path": "include/dynd/cuda_config.hpp", "position": null, "original_position": 26, "commit_id": "6b31ebb2836722c88c145e018be602cf7163525a", "original_commit_id": "cff9817e9ff536ccf934354e761f7973e5dad739", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "These macros are a bit of a mouthful to see embedded in the code. Are all three of them used? Maybe with some brainstorming we can come up with acceptable shorter names. DYND_CUDA_DEVCALL.\n\nAlso, some comments here explaining what precisely the three symbols mean would be great.\n", "created_at": "2014-02-28T06:05:43Z", "updated_at": "2014-03-04T19:51:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/10#discussion_r10155575", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/10", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10155575"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/10#discussion_r10155575"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/10"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10155575/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10155632", "pull_request_review_id": null, "id": 10155632, "diff_hunk": "@@ -118,6 +124,7 @@ set(libdynd_SRC\n     src/dynd/types/base_bytes_type.cpp", "path": "CMakeLists.txt", "position": 36, "original_position": 21, "commit_id": "6b31ebb2836722c88c145e018be602cf7163525a", "original_commit_id": "cff9817e9ff536ccf934354e761f7973e5dad739", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "Need to add cuda_config.hpp into the list of files too.\n", "created_at": "2014-02-28T06:09:56Z", "updated_at": "2014-03-04T19:51:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/10#discussion_r10155632", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/10", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10155632"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/10#discussion_r10155632"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/10"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10155632/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10155647", "pull_request_review_id": null, "id": 10155647, "diff_hunk": "@@ -0,0 +1,91 @@\n+//\n+// Copyright (C) 2011-14 Irwin Zaid, Mark Wiebe, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#ifndef _DYND__CUDA_CONFIG_HPP_\n+#define _DYND__CUDA_CONFIG_HPP_\n+\n+#include <assert.h>\n+#include <cmath>\n+\n+#ifdef DYND_CUDA\n+#include <cuda_runtime.h>\n+#endif // DYND_CUDA\n+\n+#ifdef __CUDACC__\n+\n+#ifdef __CUDA_ARCH__\n+#define DYND_CUDA_DEVICE_ARCH\n+#else\n+#define DYND_CUDA_HOST_ARCH\n+#endif\n+\n+#define DYND_CUDA_DEVICE_CALLABLE __device__\n+#define DYND_CUDA_HOST_DEVICE_CALLABLE __host__ DYND_CUDA_DEVICE_CALLABLE\n+#define DYND_CUDA_GLOBAL_CALLABLE __global__\n+\n+#else // __CUDACC__\n+\n+#define DYND_CUDA_HOST_ARCH\n+#define DYND_CUDA_HOST_DEVICE_CALLABLE\n+\n+namespace dynd {\n+// Prevent isfinite from nvcc clashing with isfinite from cmath\n+template <typename T>\n+inline bool isfinite(T arg) {\n+    return std::isfinite(arg);\n+}\n+} // namespace dynd\n+\n+#endif // __CUDACC_\n+\n+#ifdef DYND_CUDA\n+\n+namespace dynd {\n+\n+    /**\n+     * Configuration of threads in a CUDA kernel, specialized to the number of grid\n+     * and block dimensions for efficiency.\n+     */\n+    template <int grid_ndim, int block_ndim>\n+    struct cuda_global_config;\n+\n+    template <>\n+    struct cuda_global_config<1, 1> {\n+        unsigned int grid;\n+        unsigned int block;\n+        unsigned int threads;\n+\n+        cuda_global_config() {}\n+\n+        cuda_global_config(unsigned int grid, unsigned int block) : grid(grid), block(block), threads(grid * block) {}", "path": "include/dynd/cuda_config.hpp", "position": null, "original_position": 62, "commit_id": "6b31ebb2836722c88c145e018be602cf7163525a", "original_commit_id": "cff9817e9ff536ccf934354e761f7973e5dad739", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "While I don't think 80 columns is reasonable in general for the code in libdynd, would be nice to split up some of these longer lines a bit.\n", "created_at": "2014-02-28T06:11:11Z", "updated_at": "2014-03-04T19:51:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/10#discussion_r10155647", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/10", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10155647"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/10#discussion_r10155647"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/10"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10155647/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10155669", "pull_request_review_id": null, "id": 10155669, "diff_hunk": "@@ -34,7 +34,10 @@\n # define DYND_ASSERT_ALIGNED(ptr, stride, alignment, extra_info) {}\n #endif\n \n-#if DYND_ASSIGNMENT_TRACING\n+#define DYND_ASSERT_WHAT(what_arg) assert(!what_arg)", "path": "include/dynd/diagnostics.hpp", "position": null, "original_position": 5, "commit_id": "6b31ebb2836722c88c145e018be602cf7163525a", "original_commit_id": "cff9817e9ff536ccf934354e761f7973e5dad739", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "The name DYND_ASSERT_WHAT feels weird to me, where does the name \"WHAT\" in the assertion come from? Also, a little comment here explaining when and why it's used would be nice.\n", "created_at": "2014-02-28T06:13:09Z", "updated_at": "2014-03-04T19:51:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/10#discussion_r10155669", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/10", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10155669"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/10#discussion_r10155669"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/10"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10155669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10155684", "pull_request_review_id": null, "id": 10155684, "diff_hunk": "@@ -13,9 +13,10 @@\n \n struct eval_context {\n     assign_error_mode default_assign_error_mode;\n+    assign_error_mode default_cuda_device_to_device_assign_error_mode;\n \n     DYND_CONSTEXPR eval_context()\n-        : default_assign_error_mode(assign_error_fractional)\n+        : default_assign_error_mode(assign_error_fractional), default_cuda_device_to_device_assign_error_mode(assign_error_none)", "path": "include/dynd/eval/eval_context.hpp", "position": null, "original_position": 8, "commit_id": "6b31ebb2836722c88c145e018be602cf7163525a", "original_commit_id": "cff9817e9ff536ccf934354e761f7973e5dad739", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "Could split this on two lines.\n\nI like keeping this in here unconditionally like you've done. Matching the ABI fairly closely between builds with and without DYND_CUDA defined is nice to try and do.\n", "created_at": "2014-02-28T06:14:52Z", "updated_at": "2014-03-04T19:51:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/10#discussion_r10155684", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/10", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10155684"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/10#discussion_r10155684"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/10"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10155684/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10155716", "pull_request_review_id": null, "id": 10155716, "diff_hunk": "@@ -183,6 +183,75 @@ struct strided_assign_kernel_extra {\n     static void destruct(ckernel_prefix *extra);\n };\n \n+#ifdef DYND_CUDA", "path": "include/dynd/kernels/assignment_kernels.hpp", "position": 4, "original_position": 4, "commit_id": "6b31ebb2836722c88c145e018be602cf7163525a", "original_commit_id": "cff9817e9ff536ccf934354e761f7973e5dad739", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "Maybe put this into a separate cuda_assignment_kernels.hpp, and #include that from here to isolate cuda/non-cuda more.\n", "created_at": "2014-02-28T06:16:56Z", "updated_at": "2014-03-04T19:51:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/10#discussion_r10155716", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/10", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10155716"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/10#discussion_r10155716"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/10"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10155716/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10155741", "pull_request_review_id": null, "id": 10155741, "diff_hunk": "@@ -0,0 +1,78 @@\n+//\n+// Copyright (C) 2011-14 Irwin Zaid, Mark Wiebe, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#ifndef _DYND__BASE_MEMORY_TYPE_HPP_\n+#define _DYND__BASE_MEMORY_TYPE_HPP_\n+\n+#include <dynd/types/base_type.hpp>\n+#include <dynd/type.hpp>\n+\n+using namespace std;\n+using namespace dynd;\n+\n+namespace dynd {\n+\n+/**\n+ * Base class for all types of memory_kind.", "path": "include/dynd/types/base_memory_type.hpp", "position": null, "original_position": 18, "commit_id": "6b31ebb2836722c88c145e018be602cf7163525a", "original_commit_id": "cff9817e9ff536ccf934354e761f7973e5dad739", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "A bit more explanation of what memory_kind is for would be good here.\n", "created_at": "2014-02-28T06:18:40Z", "updated_at": "2014-03-04T19:51:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/10#discussion_r10155741", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/10", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10155741"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/10#discussion_r10155741"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/10"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10155741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10155748", "pull_request_review_id": null, "id": 10155748, "diff_hunk": "@@ -0,0 +1,78 @@\n+//\n+// Copyright (C) 2011-14 Irwin Zaid, Mark Wiebe, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#ifndef _DYND__BASE_MEMORY_TYPE_HPP_\n+#define _DYND__BASE_MEMORY_TYPE_HPP_\n+\n+#include <dynd/types/base_type.hpp>\n+#include <dynd/type.hpp>\n+\n+using namespace std;\n+using namespace dynd;\n+\n+namespace dynd {\n+\n+/**\n+ * Base class for all types of memory_kind.\n+ */\n+class base_memory_type : public base_type {\n+protected:\n+    ndt::type m_target_tp;\n+    size_t m_target_metadata_offset;\n+public:\n+    inline base_memory_type(type_id_t type_id, const ndt::type& target_tp, size_t data_size,\n+            size_t alignment, size_t target_metadata_offset, flags_type flags)\n+        : base_type(type_id, memory_kind, data_size, alignment, flags, target_metadata_offset + target_tp.get_metadata_size(),", "path": "include/dynd/types/base_memory_type.hpp", "position": null, "original_position": 27, "commit_id": "6b31ebb2836722c88c145e018be602cf7163525a", "original_commit_id": "cff9817e9ff536ccf934354e761f7973e5dad739", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "long line could be split up a bit\n", "created_at": "2014-02-28T06:19:20Z", "updated_at": "2014-03-04T19:51:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/10#discussion_r10155748", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/10", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10155748"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/10#discussion_r10155748"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/10"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10155748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10155782", "pull_request_review_id": null, "id": 10155782, "diff_hunk": "@@ -0,0 +1,78 @@\n+//\n+// Copyright (C) 2011-14 Irwin Zaid, Mark Wiebe, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#ifndef _DYND__BASE_MEMORY_TYPE_HPP_\n+#define _DYND__BASE_MEMORY_TYPE_HPP_\n+\n+#include <dynd/types/base_type.hpp>\n+#include <dynd/type.hpp>\n+\n+using namespace std;\n+using namespace dynd;\n+\n+namespace dynd {\n+\n+/**\n+ * Base class for all types of memory_kind.\n+ */\n+class base_memory_type : public base_type {\n+protected:\n+    ndt::type m_target_tp;", "path": "include/dynd/types/base_memory_type.hpp", "position": null, "original_position": 22, "commit_id": "6b31ebb2836722c88c145e018be602cf7163525a", "original_commit_id": "cff9817e9ff536ccf934354e761f7973e5dad739", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "I'm thinking that since the memory_kind is not actually holding a pointer, but we've instead gone the route of modifying the pointers upstream, that target_tp isn't a good name for this type. Maybe m_data_tp or something similar is better.\n", "created_at": "2014-02-28T06:21:02Z", "updated_at": "2014-03-04T19:51:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/10#discussion_r10155782", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/10", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10155782"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/10#discussion_r10155782"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/10"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10155782/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10155860", "pull_request_review_id": null, "id": 10155860, "diff_hunk": "@@ -0,0 +1,65 @@\n+//\n+// Copyright (C) 2011-14 Irwin Zaid, Mark Wiebe, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#ifdef DYND_CUDA\n+\n+#include <dynd/types/cuda_device_type.hpp>\n+#include <dynd/kernels/assignment_kernels.hpp>\n+\n+using namespace std;\n+using namespace dynd;\n+\n+cuda_device_type::cuda_device_type(const ndt::type& target_tp)\n+    : base_memory_type(cuda_device_type_id, target_tp, target_tp.get_data_size(),\n+        get_cuda_device_data_alignment(target_tp), 0, target_tp.get_flags())\n+{\n+    if (!target_tp.is_builtin()) {\n+        throw std::runtime_error(\"only built-in types may be allocated in CUDA global memory\");\n+    }", "path": "src/dynd/types/cuda_device_type.cpp", "position": null, "original_position": 20, "commit_id": "6b31ebb2836722c88c145e018be602cf7163525a", "original_commit_id": "cff9817e9ff536ccf934354e761f7973e5dad739", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "I'm a bit confused by this check, can't strided arrays, for example, be allocated in CUDA global memory?\n", "created_at": "2014-02-28T06:25:29Z", "updated_at": "2014-03-04T19:51:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/10#discussion_r10155860", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/10", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10155860"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/10#discussion_r10155860"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/10"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10155860/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10155899", "pull_request_review_id": null, "id": 10155899, "diff_hunk": "@@ -0,0 +1,108 @@\n+//\n+// Copyright (C) 2011-14 Irwin Zaid, Mark Wiebe, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#include <dynd/types/base_memory_type.hpp>\n+#include <dynd/gfunc/make_callable.hpp>\n+\n+using namespace std;\n+using namespace dynd;\n+\n+base_memory_type::~base_memory_type()\n+{\n+}\n+\n+size_t base_memory_type::get_default_data_size(intptr_t ndim, const intptr_t *shape) const {\n+    if (m_target_tp.is_builtin()) {\n+        return m_target_tp.get_data_size();\n+    } else {\n+        return m_target_tp.extended()->get_default_data_size(ndim, shape);\n+    }\n+}\n+\n+void base_memory_type::print_data(std::ostream& o, const char *metadata, const char *data) const\n+{\n+    m_target_tp.print_data(o, metadata + m_target_metadata_offset, data);\n+}\n+\n+bool base_memory_type::is_lossless_assignment(const ndt::type& dst_tp, const ndt::type& src_tp) const\n+{\n+    // Default to calling with the target types\n+    if (dst_tp.extended() == this) {\n+        return ::is_lossless_assignment(m_target_tp, src_tp);\n+    } else {\n+        return ::is_lossless_assignment(dst_tp, m_target_tp);\n+    }\n+}\n+\n+bool base_memory_type::operator==(const base_type& rhs) const\n+{\n+    // Default to equivalence between the target types\n+    if (this == &rhs) {\n+        return true;\n+    } else if (rhs.get_kind() != memory_kind) {\n+        return false;\n+    } else {\n+        const base_memory_type *dt = static_cast<const base_memory_type*>(&rhs);\n+        return m_target_tp == dt->m_target_tp;\n+    }", "path": "src/dynd/types/base_memory_type.cpp", "position": null, "original_position": 49, "commit_id": "6b31ebb2836722c88c145e018be602cf7163525a", "original_commit_id": "cff9817e9ff536ccf934354e761f7973e5dad739", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "I'm not sure this is what we want, shouldn't different memory types compare different even if they contain the same data? Maybe it should be pure virtual and force the child classes to implement it.\n", "created_at": "2014-02-28T06:28:00Z", "updated_at": "2014-03-04T19:51:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/10#discussion_r10155899", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/10", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10155899"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/10#discussion_r10155899"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/10"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10155899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10155933", "pull_request_review_id": null, "id": 10155933, "diff_hunk": "@@ -65,7 +65,7 @@\n #endif\n \n dynd::dynd_int128::dynd_int128(const dynd_float16& value)\n-    : m_lo((int64_t)value), m_hi(value.signbit() ? 0xffffffffffffffffULL : 0UL)\n+    : m_lo((int64_t)value), m_hi(value.signbit_() ? 0xffffffffffffffffULL : 0UL)", "path": "src/dynd/types/dynd_int128.cpp", "position": 5, "original_position": 5, "commit_id": "6b31ebb2836722c88c145e018be602cf7163525a", "original_commit_id": "cff9817e9ff536ccf934354e761f7973e5dad739", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "Seriously? This makes me slightly angry at NVIDIA, that they would define a macro called signbit. :P\n", "created_at": "2014-02-28T06:30:40Z", "updated_at": "2014-03-04T19:51:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/10#discussion_r10155933", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/10", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10155933"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/10#discussion_r10155933"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/10"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10155933/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10155976", "pull_request_review_id": null, "id": 10155976, "diff_hunk": "@@ -0,0 +1,131 @@\n+//\n+// Copyright (C) 2010-13 Mark Wiebe, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//", "path": "src/dynd/types/dynd_int128.cu", "position": null, "original_position": 4, "commit_id": "6b31ebb2836722c88c145e018be602cf7163525a", "original_commit_id": "cff9817e9ff536ccf934354e761f7973e5dad739", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "Is it necessary for the code in this one to be duplicated, or could this use the #include \"dynd_int128.cpp\" trick as well?\n", "created_at": "2014-02-28T06:34:09Z", "updated_at": "2014-03-04T19:51:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/10#discussion_r10155976", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/10", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10155976"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/10#discussion_r10155976"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/10"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10155976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10156123", "pull_request_review_id": null, "id": 10156123, "diff_hunk": "@@ -193,12 +206,15 @@\n     EXPECT_EQ(sizeof(float), (unsigned)a.get_strides()[1]);\n }\n \n-TEST(Array, ThreeDimConstructor) {\n+TYPED_TEST_P(Array, ThreeDimConstructor) {\n     // Three-dimensional nd::array with size-one dimension\n-    nd::array a = nd::empty(1, 5, 4, ndt::make_strided_dim(\n+    nd::array a = nd::empty(1, 5, 4, ndt::make_strided_dim(ndt::make_strided_dim(\n                     ndt::make_strided_dim(\n-                        ndt::make_strided_dim(ndt::make_type<float>()))));\n-    EXPECT_EQ(ndt::make_strided_dim(ndt::make_strided_dim(ndt::make_strided_dim(ndt::make_type<float>()))), a.get_type());\n+                        TestFixture::MakeType(ndt::make_type<float>())))));\n+    EXPECT_EQ(ndt::make_strided_dim(ndt::make_strided_dim(\n+                ndt::make_strided_dim(TestFixture::MakeType(ndt::make_type<float>())))), a.get_type());", "path": "tests/array/test_array.cpp", "position": 144, "original_position": 144, "commit_id": "6b31ebb2836722c88c145e018be602cf7163525a", "original_commit_id": "cff9817e9ff536ccf934354e761f7973e5dad739", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "I guess this explains the type checks in the cuda_host and cuda_device types above I was confused about. This appears to be making the type \"strided \\* strided \\* cuda_device[float32]\" instead of what I thought we had chosen, which was to always have the memory type at the outermost level of \"cuda_device[strided \\* strided \\* float32]\". What's the reason for the former?\n", "created_at": "2014-02-28T06:46:23Z", "updated_at": "2014-03-04T19:51:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/10#discussion_r10156123", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/10", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10156123"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/10#discussion_r10156123"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/10"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10156123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10156143", "pull_request_review_id": null, "id": 10156143, "diff_hunk": "@@ -0,0 +1,132 @@\n+//\n+// Copyright (C) 2011-14 Irwin Zaid, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//", "path": "tests/test_memory.cpp", "position": null, "original_position": 4, "commit_id": "6b31ebb2836722c88c145e018be602cf7163525a", "original_commit_id": "cff9817e9ff536ccf934354e761f7973e5dad739", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "I think this file should be test_memory.hpp, not test_memory.cpp, because it's #included by a bunch of files.\n", "created_at": "2014-02-28T06:47:47Z", "updated_at": "2014-03-04T19:51:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/10#discussion_r10156143", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/10", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10156143"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/10#discussion_r10156143"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/10"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10156143/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10161396", "pull_request_review_id": null, "id": 10161396, "diff_hunk": "@@ -0,0 +1,91 @@\n+//\n+// Copyright (C) 2011-14 Irwin Zaid, Mark Wiebe, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#ifndef _DYND__CUDA_CONFIG_HPP_\n+#define _DYND__CUDA_CONFIG_HPP_\n+\n+#include <assert.h>\n+#include <cmath>\n+\n+#ifdef DYND_CUDA\n+#include <cuda_runtime.h>\n+#endif // DYND_CUDA\n+\n+#ifdef __CUDACC__\n+\n+#ifdef __CUDA_ARCH__\n+#define DYND_CUDA_DEVICE_ARCH\n+#else\n+#define DYND_CUDA_HOST_ARCH\n+#endif\n+\n+#define DYND_CUDA_DEVICE_CALLABLE __device__\n+#define DYND_CUDA_HOST_DEVICE_CALLABLE __host__ DYND_CUDA_DEVICE_CALLABLE\n+#define DYND_CUDA_GLOBAL_CALLABLE __global__", "path": "include/dynd/cuda_config.hpp", "position": null, "original_position": 26, "commit_id": "6b31ebb2836722c88c145e018be602cf7163525a", "original_commit_id": "cff9817e9ff536ccf934354e761f7973e5dad739", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Yeah, all three of them are used. DYND_CUDA_HOST_DEVICE_CALLABLE is unavoidable. I can remove the others and sprinkle **device** and **global** throughout the code, but it keeping all three of them seems consistent.\n\nComments are fine, I'll add some. I don't care about the names, I'd be fine if you want to choose them. Maybe we just drop the 'CALLABLE' part?\n", "created_at": "2014-02-28T11:46:38Z", "updated_at": "2014-03-04T19:51:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/10#discussion_r10161396", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/10", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10161396"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/10#discussion_r10161396"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/10"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10161396/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10161420", "pull_request_review_id": null, "id": 10161420, "diff_hunk": "@@ -118,6 +124,7 @@ set(libdynd_SRC\n     src/dynd/types/base_bytes_type.cpp", "path": "CMakeLists.txt", "position": 36, "original_position": 21, "commit_id": "6b31ebb2836722c88c145e018be602cf7163525a", "original_commit_id": "cff9817e9ff536ccf934354e761f7973e5dad739", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "That's fine. Just curious, why do you put the _.hpp files in CMake. I thought only the source files (_.cpp, *.cu) need to be specified.\n", "created_at": "2014-02-28T11:47:31Z", "updated_at": "2014-03-04T19:51:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/10#discussion_r10161420", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/10", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10161420"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/10#discussion_r10161420"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/10"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10161420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10161445", "pull_request_review_id": null, "id": 10161445, "diff_hunk": "@@ -34,7 +34,10 @@\n # define DYND_ASSERT_ALIGNED(ptr, stride, alignment, extra_info) {}\n #endif\n \n-#if DYND_ASSIGNMENT_TRACING\n+#define DYND_ASSERT_WHAT(what_arg) assert(!what_arg)", "path": "include/dynd/diagnostics.hpp", "position": null, "original_position": 5, "commit_id": "6b31ebb2836722c88c145e018be602cf7163525a", "original_commit_id": "cff9817e9ff536ccf934354e761f7973e5dad739", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "I actually take the terminology from the standard library. ;)\n\nThe code for runtime_error is:\n\n## \n\nclass runtime_error : public exception {\npublic:\n  explicit runtime_error (const string& what_arg);\n};\n\n## \n\nAnd the base exception call even has a method what() that returns the error message.\n\nAgain, we can change them, I don't care.\n", "created_at": "2014-02-28T11:49:04Z", "updated_at": "2014-03-04T19:51:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/10#discussion_r10161445", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/10", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10161445"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/10#discussion_r10161445"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/10"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10161445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10161460", "pull_request_review_id": null, "id": 10161460, "diff_hunk": "@@ -13,9 +13,10 @@\n \n struct eval_context {\n     assign_error_mode default_assign_error_mode;\n+    assign_error_mode default_cuda_device_to_device_assign_error_mode;\n \n     DYND_CONSTEXPR eval_context()\n-        : default_assign_error_mode(assign_error_fractional)\n+        : default_assign_error_mode(assign_error_fractional), default_cuda_device_to_device_assign_error_mode(assign_error_none)", "path": "include/dynd/eval/eval_context.hpp", "position": null, "original_position": 8, "commit_id": "6b31ebb2836722c88c145e018be602cf7163525a", "original_commit_id": "cff9817e9ff536ccf934354e761f7973e5dad739", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Cool. I'm trying to keep the ABI consistent when possible.\n", "created_at": "2014-02-28T11:49:36Z", "updated_at": "2014-03-04T19:51:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/10#discussion_r10161460", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/10", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10161460"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/10#discussion_r10161460"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/10"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10161460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10161518", "pull_request_review_id": null, "id": 10161518, "diff_hunk": "@@ -183,6 +183,75 @@ struct strided_assign_kernel_extra {\n     static void destruct(ckernel_prefix *extra);\n };\n \n+#ifdef DYND_CUDA", "path": "include/dynd/kernels/assignment_kernels.hpp", "position": 4, "original_position": 4, "commit_id": "6b31ebb2836722c88c145e018be602cf7163525a", "original_commit_id": "cff9817e9ff536ccf934354e761f7973e5dad739", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "If it's okay with you, I think it would be better to keep the declarations in assignment_kernels.hpp. Otherwise, we need to do a cuda_whatever.hpp for every single file we are going to change, and I think it will get very messy.\n\nSince we split at the source file level, and it works nicely because of the different extensions (assignment_kernels.cu versus assignment_kernels.cpp), the code is basically separate anyway.\n", "created_at": "2014-02-28T11:52:20Z", "updated_at": "2014-03-04T19:51:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/10#discussion_r10161518", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/10", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10161518"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/10#discussion_r10161518"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/10"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10161518/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10161528", "pull_request_review_id": null, "id": 10161528, "diff_hunk": "@@ -0,0 +1,78 @@\n+//\n+// Copyright (C) 2011-14 Irwin Zaid, Mark Wiebe, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#ifndef _DYND__BASE_MEMORY_TYPE_HPP_\n+#define _DYND__BASE_MEMORY_TYPE_HPP_\n+\n+#include <dynd/types/base_type.hpp>\n+#include <dynd/type.hpp>\n+\n+using namespace std;\n+using namespace dynd;\n+\n+namespace dynd {\n+\n+/**\n+ * Base class for all types of memory_kind.", "path": "include/dynd/types/base_memory_type.hpp", "position": null, "original_position": 18, "commit_id": "6b31ebb2836722c88c145e018be602cf7163525a", "original_commit_id": "cff9817e9ff536ccf934354e761f7973e5dad739", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Will do.\n", "created_at": "2014-02-28T11:52:37Z", "updated_at": "2014-03-04T19:51:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/10#discussion_r10161528", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/10", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10161528"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/10#discussion_r10161528"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/10"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10161528/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10161557", "pull_request_review_id": null, "id": 10161557, "diff_hunk": "@@ -0,0 +1,78 @@\n+//\n+// Copyright (C) 2011-14 Irwin Zaid, Mark Wiebe, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#ifndef _DYND__BASE_MEMORY_TYPE_HPP_\n+#define _DYND__BASE_MEMORY_TYPE_HPP_\n+\n+#include <dynd/types/base_type.hpp>\n+#include <dynd/type.hpp>\n+\n+using namespace std;\n+using namespace dynd;\n+\n+namespace dynd {\n+\n+/**\n+ * Base class for all types of memory_kind.\n+ */\n+class base_memory_type : public base_type {\n+protected:\n+    ndt::type m_target_tp;", "path": "include/dynd/types/base_memory_type.hpp", "position": null, "original_position": 22, "commit_id": "6b31ebb2836722c88c145e018be602cf7163525a", "original_commit_id": "cff9817e9ff536ccf934354e761f7973e5dad739", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "I agree with you that the target_tp is not a good name, but I was struggling to come up with something better. What about if we refer to it as the dtype of a memory type? We then change get_target_type to get_dtype?\n\nOr is that too confusing with the array dtype?\n", "created_at": "2014-02-28T11:53:53Z", "updated_at": "2014-03-04T19:51:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/10#discussion_r10161557", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/10", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10161557"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/10#discussion_r10161557"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/10"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10161557/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10161559", "pull_request_review_id": null, "id": 10161559, "diff_hunk": "@@ -0,0 +1,65 @@\n+//\n+// Copyright (C) 2011-14 Irwin Zaid, Mark Wiebe, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#ifdef DYND_CUDA\n+\n+#include <dynd/types/cuda_device_type.hpp>\n+#include <dynd/kernels/assignment_kernels.hpp>\n+\n+using namespace std;\n+using namespace dynd;\n+\n+cuda_device_type::cuda_device_type(const ndt::type& target_tp)\n+    : base_memory_type(cuda_device_type_id, target_tp, target_tp.get_data_size(),\n+        get_cuda_device_data_alignment(target_tp), 0, target_tp.get_flags())\n+{\n+    if (!target_tp.is_builtin()) {\n+        throw std::runtime_error(\"only built-in types may be allocated in CUDA global memory\");\n+    }", "path": "src/dynd/types/cuda_device_type.cpp", "position": null, "original_position": 20, "commit_id": "6b31ebb2836722c88c145e018be602cf7163525a", "original_commit_id": "cff9817e9ff536ccf934354e761f7973e5dad739", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Answered in email.\n", "created_at": "2014-02-28T11:54:03Z", "updated_at": "2014-03-04T19:51:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/10#discussion_r10161559", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/10", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10161559"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/10#discussion_r10161559"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/10"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10161559/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10161564", "pull_request_review_id": null, "id": 10161564, "diff_hunk": "@@ -0,0 +1,108 @@\n+//\n+// Copyright (C) 2011-14 Irwin Zaid, Mark Wiebe, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#include <dynd/types/base_memory_type.hpp>\n+#include <dynd/gfunc/make_callable.hpp>\n+\n+using namespace std;\n+using namespace dynd;\n+\n+base_memory_type::~base_memory_type()\n+{\n+}\n+\n+size_t base_memory_type::get_default_data_size(intptr_t ndim, const intptr_t *shape) const {\n+    if (m_target_tp.is_builtin()) {\n+        return m_target_tp.get_data_size();\n+    } else {\n+        return m_target_tp.extended()->get_default_data_size(ndim, shape);\n+    }\n+}\n+\n+void base_memory_type::print_data(std::ostream& o, const char *metadata, const char *data) const\n+{\n+    m_target_tp.print_data(o, metadata + m_target_metadata_offset, data);\n+}\n+\n+bool base_memory_type::is_lossless_assignment(const ndt::type& dst_tp, const ndt::type& src_tp) const\n+{\n+    // Default to calling with the target types\n+    if (dst_tp.extended() == this) {\n+        return ::is_lossless_assignment(m_target_tp, src_tp);\n+    } else {\n+        return ::is_lossless_assignment(dst_tp, m_target_tp);\n+    }\n+}\n+\n+bool base_memory_type::operator==(const base_type& rhs) const\n+{\n+    // Default to equivalence between the target types\n+    if (this == &rhs) {\n+        return true;\n+    } else if (rhs.get_kind() != memory_kind) {\n+        return false;\n+    } else {\n+        const base_memory_type *dt = static_cast<const base_memory_type*>(&rhs);\n+        return m_target_tp == dt->m_target_tp;\n+    }", "path": "src/dynd/types/base_memory_type.cpp", "position": null, "original_position": 49, "commit_id": "6b31ebb2836722c88c145e018be602cf7163525a", "original_commit_id": "cff9817e9ff536ccf934354e761f7973e5dad739", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Agreed. I wasn't thinking too carefully, will change.\n", "created_at": "2014-02-28T11:54:21Z", "updated_at": "2014-03-04T19:51:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/10#discussion_r10161564", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/10", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10161564"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/10#discussion_r10161564"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/10"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10161564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10161605", "pull_request_review_id": null, "id": 10161605, "diff_hunk": "@@ -0,0 +1,131 @@\n+//\n+// Copyright (C) 2010-13 Mark Wiebe, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//", "path": "src/dynd/types/dynd_int128.cu", "position": null, "original_position": 4, "commit_id": "6b31ebb2836722c88c145e018be602cf7163525a", "original_commit_id": "cff9817e9ff536ccf934354e761f7973e5dad739", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "That's a mistake on my part, good catch. It should be #include \"dynd_int128.cpp\", I'll change it.\n", "created_at": "2014-02-28T11:56:29Z", "updated_at": "2014-03-04T19:51:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/10#discussion_r10161605", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/10", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10161605"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/10#discussion_r10161605"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/10"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10161605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10161613", "pull_request_review_id": null, "id": 10161613, "diff_hunk": "@@ -193,12 +206,15 @@\n     EXPECT_EQ(sizeof(float), (unsigned)a.get_strides()[1]);\n }\n \n-TEST(Array, ThreeDimConstructor) {\n+TYPED_TEST_P(Array, ThreeDimConstructor) {\n     // Three-dimensional nd::array with size-one dimension\n-    nd::array a = nd::empty(1, 5, 4, ndt::make_strided_dim(\n+    nd::array a = nd::empty(1, 5, 4, ndt::make_strided_dim(ndt::make_strided_dim(\n                     ndt::make_strided_dim(\n-                        ndt::make_strided_dim(ndt::make_type<float>()))));\n-    EXPECT_EQ(ndt::make_strided_dim(ndt::make_strided_dim(ndt::make_strided_dim(ndt::make_type<float>()))), a.get_type());\n+                        TestFixture::MakeType(ndt::make_type<float>())))));\n+    EXPECT_EQ(ndt::make_strided_dim(ndt::make_strided_dim(\n+                ndt::make_strided_dim(TestFixture::MakeType(ndt::make_type<float>())))), a.get_type());", "path": "tests/array/test_array.cpp", "position": 144, "original_position": 144, "commit_id": "6b31ebb2836722c88c145e018be602cf7163525a", "original_commit_id": "cff9817e9ff536ccf934354e761f7973e5dad739", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Answered in new email.\n", "created_at": "2014-02-28T11:56:45Z", "updated_at": "2014-03-04T19:51:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/10#discussion_r10161613", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/10", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10161613"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/10#discussion_r10161613"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/10"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10161613/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10161615", "pull_request_review_id": null, "id": 10161615, "diff_hunk": "@@ -0,0 +1,132 @@\n+//\n+// Copyright (C) 2011-14 Irwin Zaid, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//", "path": "tests/test_memory.cpp", "position": null, "original_position": 4, "commit_id": "6b31ebb2836722c88c145e018be602cf7163525a", "original_commit_id": "cff9817e9ff536ccf934354e761f7973e5dad739", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Okay, will change.\n", "created_at": "2014-02-28T11:56:54Z", "updated_at": "2014-03-04T19:51:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/10#discussion_r10161615", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/10", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10161615"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/10#discussion_r10161615"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/10"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10161615/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10175460", "pull_request_review_id": null, "id": 10175460, "diff_hunk": "@@ -0,0 +1,91 @@\n+//\n+// Copyright (C) 2011-14 Irwin Zaid, Mark Wiebe, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#ifndef _DYND__CUDA_CONFIG_HPP_\n+#define _DYND__CUDA_CONFIG_HPP_\n+\n+#include <assert.h>\n+#include <cmath>\n+\n+#ifdef DYND_CUDA\n+#include <cuda_runtime.h>\n+#endif // DYND_CUDA\n+\n+#ifdef __CUDACC__\n+\n+#ifdef __CUDA_ARCH__\n+#define DYND_CUDA_DEVICE_ARCH\n+#else\n+#define DYND_CUDA_HOST_ARCH\n+#endif\n+\n+#define DYND_CUDA_DEVICE_CALLABLE __device__\n+#define DYND_CUDA_HOST_DEVICE_CALLABLE __host__ DYND_CUDA_DEVICE_CALLABLE\n+#define DYND_CUDA_GLOBAL_CALLABLE __global__", "path": "include/dynd/cuda_config.hpp", "position": null, "original_position": 26, "commit_id": "6b31ebb2836722c88c145e018be602cf7163525a", "original_commit_id": "cff9817e9ff536ccf934354e761f7973e5dad739", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "Maybe DYND_CUDA_DCALL, DYND_CUDA_HDCALL, and DYND_CUDA_GCALL? Is that too brief? In an IDE environment, hovering over the symbol would pop up the documentation comment just above the definition, or right click + go to definition is available.\n", "created_at": "2014-02-28T18:46:22Z", "updated_at": "2014-03-04T19:51:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/10#discussion_r10175460", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/10", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10175460"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/10#discussion_r10175460"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/10"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10175460/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10175635", "pull_request_review_id": null, "id": 10175635, "diff_hunk": "@@ -34,7 +34,10 @@\n # define DYND_ASSERT_ALIGNED(ptr, stride, alignment, extra_info) {}\n #endif\n \n-#if DYND_ASSIGNMENT_TRACING\n+#define DYND_ASSERT_WHAT(what_arg) assert(!what_arg)", "path": "include/dynd/diagnostics.hpp", "position": null, "original_position": 5, "commit_id": "6b31ebb2836722c88c145e018be602cf7163525a", "original_commit_id": "cff9817e9ff536ccf934354e761f7973e5dad739", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "Looking at the usages, it's being used with a message, and always triggers the assertion. Maybe DYND_TRIGGER_ASSERT(message) would more clearly communicate that? With the current naming, saying DYND_ASSERT_WHAT(x < 3) feels like a reasonable thing to write, and I don't think that's the intention here.\n", "created_at": "2014-02-28T18:50:14Z", "updated_at": "2014-03-04T19:51:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/10#discussion_r10175635", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/10", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10175635"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/10#discussion_r10175635"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/10"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10175635/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10175678", "pull_request_review_id": null, "id": 10175678, "diff_hunk": "@@ -183,6 +183,75 @@ struct strided_assign_kernel_extra {\n     static void destruct(ckernel_prefix *extra);\n };\n \n+#ifdef DYND_CUDA", "path": "include/dynd/kernels/assignment_kernels.hpp", "position": 4, "original_position": 4, "commit_id": "6b31ebb2836722c88c145e018be602cf7163525a", "original_commit_id": "cff9817e9ff536ccf934354e761f7973e5dad739", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "ok, that's cool with me.\n", "created_at": "2014-02-28T18:51:00Z", "updated_at": "2014-03-04T19:51:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/10#discussion_r10175678", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/10", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10175678"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/10#discussion_r10175678"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/10"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10175678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10175766", "pull_request_review_id": null, "id": 10175766, "diff_hunk": "@@ -0,0 +1,78 @@\n+//\n+// Copyright (C) 2011-14 Irwin Zaid, Mark Wiebe, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#ifndef _DYND__BASE_MEMORY_TYPE_HPP_\n+#define _DYND__BASE_MEMORY_TYPE_HPP_\n+\n+#include <dynd/types/base_type.hpp>\n+#include <dynd/type.hpp>\n+\n+using namespace std;\n+using namespace dynd;\n+\n+namespace dynd {\n+\n+/**\n+ * Base class for all types of memory_kind.\n+ */\n+class base_memory_type : public base_type {\n+protected:\n+    ndt::type m_target_tp;", "path": "include/dynd/types/base_memory_type.hpp", "position": null, "original_position": 22, "commit_id": "6b31ebb2836722c88c145e018be602cf7163525a", "original_commit_id": "cff9817e9ff536ccf934354e761f7973e5dad739", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "I think reusing the dtype name here isn't a good idea. What else could we use...storage_tp like in the expression kind might be good.\n", "created_at": "2014-02-28T18:52:49Z", "updated_at": "2014-03-04T19:51:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/10#discussion_r10175766", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/10", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10175766"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/10#discussion_r10175766"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/10"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10175766/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10175818", "pull_request_review_id": null, "id": 10175818, "diff_hunk": "@@ -118,6 +124,7 @@ set(libdynd_SRC\n     src/dynd/types/base_bytes_type.cpp", "path": "CMakeLists.txt", "position": 36, "original_position": 21, "commit_id": "6b31ebb2836722c88c145e018be602cf7163525a", "original_commit_id": "cff9817e9ff536ccf934354e761f7973e5dad739", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "It's for the people silly enough to use IDEs like MSVC. :) The .hpp needs to be there to show up in the project file lists.\n", "created_at": "2014-02-28T18:53:59Z", "updated_at": "2014-03-04T19:51:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/10#discussion_r10175818", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/10", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10175818"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/10#discussion_r10175818"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/10"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10175818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10268605", "pull_request_review_id": null, "id": 10268605, "diff_hunk": "@@ -0,0 +1,91 @@\n+//\n+// Copyright (C) 2011-14 Irwin Zaid, Mark Wiebe, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#ifndef _DYND__CUDA_CONFIG_HPP_\n+#define _DYND__CUDA_CONFIG_HPP_\n+\n+#include <assert.h>\n+#include <cmath>\n+\n+#ifdef DYND_CUDA\n+#include <cuda_runtime.h>\n+#endif // DYND_CUDA\n+\n+#ifdef __CUDACC__\n+\n+#ifdef __CUDA_ARCH__\n+#define DYND_CUDA_DEVICE_ARCH\n+#else\n+#define DYND_CUDA_HOST_ARCH\n+#endif\n+\n+#define DYND_CUDA_DEVICE_CALLABLE __device__\n+#define DYND_CUDA_HOST_DEVICE_CALLABLE __host__ DYND_CUDA_DEVICE_CALLABLE\n+#define DYND_CUDA_GLOBAL_CALLABLE __global__", "path": "include/dynd/cuda_config.hpp", "position": null, "original_position": 26, "commit_id": "6b31ebb2836722c88c145e018be602cf7163525a", "original_commit_id": "cff9817e9ff536ccf934354e761f7973e5dad739", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "I think we should keep the HOST and DEVICE part as it maps one-to-one from CUDA. What I did was drop the CALLABLE part for all three.\n", "created_at": "2014-03-04T18:53:36Z", "updated_at": "2014-03-04T19:51:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/10#discussion_r10268605", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/10", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10268605"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/10#discussion_r10268605"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/10"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10268605/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10269848", "pull_request_review_id": null, "id": 10269848, "diff_hunk": "@@ -34,7 +34,10 @@\n # define DYND_ASSERT_ALIGNED(ptr, stride, alignment, extra_info) {}\n #endif\n \n-#if DYND_ASSIGNMENT_TRACING\n+#define DYND_ASSERT_WHAT(what_arg) assert(!what_arg)", "path": "include/dynd/diagnostics.hpp", "position": null, "original_position": 5, "commit_id": "6b31ebb2836722c88c145e018be602cf7163525a", "original_commit_id": "cff9817e9ff536ccf934354e761f7973e5dad739", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Okay, I changed it to DYND_TRIGGER_ASSERT.\n", "created_at": "2014-03-04T19:18:03Z", "updated_at": "2014-03-04T19:51:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/10#discussion_r10269848", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/10", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10269848"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/10#discussion_r10269848"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/10"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10269848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10270406", "pull_request_review_id": null, "id": 10270406, "diff_hunk": "@@ -0,0 +1,78 @@\n+//\n+// Copyright (C) 2011-14 Irwin Zaid, Mark Wiebe, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#ifndef _DYND__BASE_MEMORY_TYPE_HPP_\n+#define _DYND__BASE_MEMORY_TYPE_HPP_\n+\n+#include <dynd/types/base_type.hpp>\n+#include <dynd/type.hpp>\n+\n+using namespace std;\n+using namespace dynd;\n+\n+namespace dynd {\n+\n+/**\n+ * Base class for all types of memory_kind.\n+ */\n+class base_memory_type : public base_type {\n+protected:\n+    ndt::type m_target_tp;", "path": "include/dynd/types/base_memory_type.hpp", "position": null, "original_position": 22, "commit_id": "6b31ebb2836722c88c145e018be602cf7163525a", "original_commit_id": "cff9817e9ff536ccf934354e761f7973e5dad739", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "I went with storage_tp.\n", "created_at": "2014-03-04T19:29:51Z", "updated_at": "2014-03-04T19:51:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/10#discussion_r10270406", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/10", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10270406"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/10#discussion_r10270406"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/10"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10270406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10270778", "pull_request_review_id": null, "id": 10270778, "diff_hunk": "@@ -0,0 +1,78 @@\n+//\n+// Copyright (C) 2011-14 Irwin Zaid, Mark Wiebe, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#ifndef _DYND__BASE_MEMORY_TYPE_HPP_\n+#define _DYND__BASE_MEMORY_TYPE_HPP_\n+\n+#include <dynd/types/base_type.hpp>\n+#include <dynd/type.hpp>\n+\n+using namespace std;\n+using namespace dynd;\n+\n+namespace dynd {\n+\n+/**\n+ * Base class for all types of memory_kind.\n+ */\n+class base_memory_type : public base_type {\n+protected:\n+    ndt::type m_target_tp;", "path": "include/dynd/types/base_memory_type.hpp", "position": null, "original_position": 22, "commit_id": "6b31ebb2836722c88c145e018be602cf7163525a", "original_commit_id": "cff9817e9ff536ccf934354e761f7973e5dad739", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Though another option is value_tp.\n", "created_at": "2014-03-04T19:37:10Z", "updated_at": "2014-03-04T19:51:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/10#discussion_r10270778", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/10", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10270778"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/10#discussion_r10270778"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/10"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/10270778/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11403251", "pull_request_review_id": null, "id": 11403251, "diff_hunk": "@@ -526,6 +526,108 @@ void datetime_type::get_dynamic_array_functions(const std::pair<std::string, gfu\n             throw runtime_error(\"datetime property access only implemented for UTC and abstract timezones\");\n         }\n     }\n+\n+    void get_property_kernel_hours_after_1970_single(char *dst, const char *src,", "path": "src/dynd/types/datetime_type.cpp", "position": 106, "original_position": 14, "commit_id": "47160bdbb68cf004569c76b935d4bbe1304a4203", "original_commit_id": "ebacc726c12387a2ccafa48a77d9f682e4630022", "user": {"login": "mrocklin", "id": 306380, "avatar_url": "https://avatars3.githubusercontent.com/u/306380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrocklin", "html_url": "https://github.com/mrocklin", "followers_url": "https://api.github.com/users/mrocklin/followers", "following_url": "https://api.github.com/users/mrocklin/following{/other_user}", "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions", "organizations_url": "https://api.github.com/users/mrocklin/orgs", "repos_url": "https://api.github.com/users/mrocklin/repos", "events_url": "https://api.github.com/users/mrocklin/events{/privacy}", "received_events_url": "https://api.github.com/users/mrocklin/received_events", "type": "User", "site_admin": false}, "body": "Why do these take in strings that are immediately cast to integers?\n", "created_at": "2014-04-08T18:07:35Z", "updated_at": "2014-04-08T22:26:06Z", "html_url": "https://github.com/libdynd/libdynd/pull/26#discussion_r11403251", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/26", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11403251"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/26#discussion_r11403251"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/26"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11403251/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11405850", "pull_request_review_id": null, "id": 11405850, "diff_hunk": "@@ -526,6 +526,108 @@ void datetime_type::get_dynamic_array_functions(const std::pair<std::string, gfu\n             throw runtime_error(\"datetime property access only implemented for UTC and abstract timezones\");\n         }\n     }\n+\n+    void get_property_kernel_hours_after_1970_single(char *dst, const char *src,", "path": "src/dynd/types/datetime_type.cpp", "position": 106, "original_position": 14, "commit_id": "47160bdbb68cf004569c76b935d4bbe1304a4203", "original_commit_id": "ebacc726c12387a2ccafa48a77d9f682e4630022", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "DyND is using `char *` instead of `void *` for raw data pointers in general, so that byte offsets such as stride values can be added to them easily.\n", "created_at": "2014-04-08T18:59:14Z", "updated_at": "2014-04-08T22:26:06Z", "html_url": "https://github.com/libdynd/libdynd/pull/26#discussion_r11405850", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/26", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11405850"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/26#discussion_r11405850"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/26"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11405850/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11423842", "pull_request_review_id": null, "id": 11423842, "diff_hunk": "@@ -27,6 +27,11 @@ if(\"${CMAKE_SOURCE_DIR}\" STREQUAL \"${CMAKE_CURRENT_SOURCE_DIR}\")\n     option(DYND_CUDA\n         \"Build a libdynd library with CUDA\"\n         OFF) # While CUDA support is in development, we default to OFF.\n+# -DDYND_ELWISE_MAX, the maximum number of arguments that the elwise function\n+#   in libdynd will support\n+    SET(DYND_ELWISE_MAX 7 CACHE BOOL", "path": "CMakeLists.txt", "position": null, "original_position": 6, "commit_id": "d89d4ca9211612be9ac1d1396a67be9ec9aec272", "original_commit_id": "af7b550faabf4c9bbe8a3927684c9eaf527fee5d", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "I think this should be \"CACHE STRING\" instead of \"CACHE BOOL\", for the UI hint.\n", "created_at": "2014-04-09T06:10:31Z", "updated_at": "2014-04-11T00:48:42Z", "html_url": "https://github.com/libdynd/libdynd/pull/25#discussion_r11423842", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/25", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11423842"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/25#discussion_r11423842"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/25"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11423842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11424795", "pull_request_review_id": null, "id": 11424795, "diff_hunk": "@@ -27,6 +27,11 @@ if(\"${CMAKE_SOURCE_DIR}\" STREQUAL \"${CMAKE_CURRENT_SOURCE_DIR}\")\n     option(DYND_CUDA\n         \"Build a libdynd library with CUDA\"\n         OFF) # While CUDA support is in development, we default to OFF.\n+# -DDYND_ELWISE_MAX, the maximum number of arguments that the elwise function\n+#   in libdynd will support\n+    SET(DYND_ELWISE_MAX 7 CACHE BOOL", "path": "CMakeLists.txt", "position": null, "original_position": 6, "commit_id": "d89d4ca9211612be9ac1d1396a67be9ec9aec272", "original_commit_id": "af7b550faabf4c9bbe8a3927684c9eaf527fee5d", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "I also found that this setting should be moved out of the containing if statement, it should be defined even if libdynd is a subproject.\n", "created_at": "2014-04-09T07:07:12Z", "updated_at": "2014-04-11T00:48:42Z", "html_url": "https://github.com/libdynd/libdynd/pull/25#discussion_r11424795", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/25", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11424795"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/25#discussion_r11424795"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/25"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11424795/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11426138", "pull_request_review_id": null, "id": 11426138, "diff_hunk": "@@ -213,50 +410,198 @@ int main(int argc, char **argv) {\n \n     fout << endl;\n \n-    fout << \"#define DYND_PP_REPEAT(TOK, COUNT) DYND_PP_PASTE(DYND_PP_REPEAT_, COUNT)(TOK)\" << endl;\n-    fout << \"#define DYND_PP_REPEAT_0(TOK)\" << endl;\n-    fout << \"#define DYND_PP_REPEAT_1(TOK) TOK\" << endl;\n-    for (int i = 2; i <= pp_len_max; i++) {\n-        fout << \"#define DYND_PP_REPEAT_\" << i << \"(TOK) TOK, DYND_PP_REPEAT_\" << i - 1 << \"(TOK)\" << endl;\n+    fout << \"#define DYND_PP_REPEAT DYND_PP_REPEAT_0\" << endl;\n+    for (int dep = 0; dep < pp_dep_max; dep++) {\n+        fout << \"#define DYND_PP_REPEAT_\" << dep << \"(TOK, LEN)\";\n+        fout << \" \";\n+        fout << \"(DYND_PP_JOIN_REPEAT_\" << dep << \"(TOK, (,), LEN))\" << endl;\n     }\n \n     fout << endl;\n \n-    fout << \"#define DYND_PP_MAP DYND_PP_NESTED_MAP(0)\" << endl;\n-    fout << \"#define DYND_PP_NESTED_MAP(DEPTH) DYND_PP_PASTE(DYND_PP_NESTED_MAP_, DEPTH)\" << endl;\n+    fout << \"#define DYND_PP_JOIN_REPEAT DYND_PP_JOIN_REPEAT_0\" << endl;\n+    for (int dep = 0; dep < pp_dep_max; dep++) {\n+        fout << \"#define DYND_PP_JOIN_REPEAT_\" << dep << \"(TOK, SEP, LEN)\";\n+        fout << \" \";\n+        fout << \"DYND_PP_PASTE(DYND_PP_JOIN_REPEAT_\" << dep << \"_, LEN)(TOK, SEP)\" << endl;\n+        fout << \"#define DYND_PP_JOIN_REPEAT_\" << dep << \"_0(TOK, SEP)\" << endl;\n+        fout << \"#define DYND_PP_JOIN_REPEAT_\" << dep << \"_1(TOK, SEP) TOK\" << endl;\n+        for (int len = 2; len <= pp_len_max; len++) {\n+            fout << \"#define DYND_PP_JOIN_REPEAT_\" << dep << \"_\" << len << \"(TOK, SEP)\";\n+            fout << \" TOK DYND_PP_ID SEP \";\n+            fout << \"DYND_PP_JOIN_REPEAT_\" << dep << \"_\" << len - 1 << \"(TOK, SEP)\" << endl;\n+        }\n+    }\n+\n+    fout << endl;\n+\n+    fout << \"#define DYND_PP_MAP DYND_PP_MAP_0\" << endl;\n+    for (int dep = 0; dep <= pp_dep_max; dep++) {\n+        fout << \"#define DYND_PP_MAP_\" << dep << \"(MAC, A) (DYND_PP_JOIN_MAP_\" << dep << \"(MAC, (,), A))\" << endl;\n+    }\n+\n+    fout << endl;\n+\n+    fout << \"#define DYND_PP_JOIN_MAP DYND_PP_JOIN_MAP_0\" << endl;", "path": "include/dynd/pp/gen.cpp", "position": null, "original_position": 265, "commit_id": "d89d4ca9211612be9ac1d1396a67be9ec9aec272", "original_commit_id": "af7b550faabf4c9bbe8a3927684c9eaf527fee5d", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "While tracing through the macro execution logic, I've run into some things I didn't get. How would you recommend I get more acquainted with it?\n\nFor example, looking at the macros for DYND_PP_JOIN_MAP_0 vs DYND_PP_JOIN_MAP_1, it looks the same, what are the numbers doing here?\n", "created_at": "2014-04-09T08:06:48Z", "updated_at": "2014-04-11T00:48:42Z", "html_url": "https://github.com/libdynd/libdynd/pull/25#discussion_r11426138", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/25", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11426138"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/25#discussion_r11426138"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/25"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11426138/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11426224", "pull_request_review_id": null, "id": 11426224, "diff_hunk": "@@ -125,6 +126,25 @@ class fixed_dim_type : public base_uniform_dim_type {\n     }\n \n     ndt::type make_fixed_dim(intptr_t ndim, const intptr_t *shape, const ndt::type& uniform_tp, const int *axis_perm);\n+\n+    template<class T> struct fixed_dim_from_array {\n+        typedef T uniform_type;\n+        static const int ndim = 0;\n+\n+        static ndt::type make() {\n+            return ndt::make_type<uniform_type>();\n+        }\n+    };\n+    template<class T, int N> struct fixed_dim_from_array<T[N]> {\n+        typedef typename nd::detail::uniform_type_from_array<T[N]>::type uniform_type;\n+        static const int ndim = nd::detail::ndim_from_array<T[N]>::value;\n+\n+        static ndt::type make() {\n+            intptr_t shape[ndim];\n+            nd::detail::fill_shape<T[N]>::fill(shape);\n+            return ndt::make_fixed_dim(ndim, shape, ndt::make_type<uniform_type>(), NULL);\n+        }\n+    };", "path": "include/dynd/types/fixed_dim_type.hpp", "position": null, "original_position": 30, "commit_id": "d89d4ca9211612be9ac1d1396a67be9ec9aec272", "original_commit_id": "af7b550faabf4c9bbe8a3927684c9eaf527fee5d", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "This is nice, I think it could be a bit better by chaining the make function recursively instead of creating the temporary shape array.\n\nWould be great to have a test of it in test_fixed_dim.cpp.\n", "created_at": "2014-04-09T08:09:52Z", "updated_at": "2014-04-11T00:48:42Z", "html_url": "https://github.com/libdynd/libdynd/pull/25#discussion_r11426224", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/25", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11426224"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/25#discussion_r11426224"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/25"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11426224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11429423", "pull_request_review_id": null, "id": 11429423, "diff_hunk": "@@ -125,6 +126,25 @@ class fixed_dim_type : public base_uniform_dim_type {\n     }\n \n     ndt::type make_fixed_dim(intptr_t ndim, const intptr_t *shape, const ndt::type& uniform_tp, const int *axis_perm);\n+\n+    template<class T> struct fixed_dim_from_array {\n+        typedef T uniform_type;\n+        static const int ndim = 0;\n+\n+        static ndt::type make() {\n+            return ndt::make_type<uniform_type>();\n+        }\n+    };\n+    template<class T, int N> struct fixed_dim_from_array<T[N]> {\n+        typedef typename nd::detail::uniform_type_from_array<T[N]>::type uniform_type;\n+        static const int ndim = nd::detail::ndim_from_array<T[N]>::value;\n+\n+        static ndt::type make() {\n+            intptr_t shape[ndim];\n+            nd::detail::fill_shape<T[N]>::fill(shape);\n+            return ndt::make_fixed_dim(ndim, shape, ndt::make_type<uniform_type>(), NULL);\n+        }\n+    };", "path": "include/dynd/types/fixed_dim_type.hpp", "position": null, "original_position": 30, "commit_id": "d89d4ca9211612be9ac1d1396a67be9ec9aec272", "original_commit_id": "af7b550faabf4c9bbe8a3927684c9eaf527fee5d", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "It is now recursive, and I have added tests into test_fixed_dim.cpp.\n", "created_at": "2014-04-09T10:05:28Z", "updated_at": "2014-04-11T00:48:42Z", "html_url": "https://github.com/libdynd/libdynd/pull/25#discussion_r11429423", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/25", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11429423"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/25#discussion_r11429423"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/25"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11429423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11429593", "pull_request_review_id": null, "id": 11429593, "diff_hunk": "@@ -27,6 +27,11 @@ if(\"${CMAKE_SOURCE_DIR}\" STREQUAL \"${CMAKE_CURRENT_SOURCE_DIR}\")\n     option(DYND_CUDA\n         \"Build a libdynd library with CUDA\"\n         OFF) # While CUDA support is in development, we default to OFF.\n+# -DDYND_ELWISE_MAX, the maximum number of arguments that the elwise function\n+#   in libdynd will support\n+    SET(DYND_ELWISE_MAX 7 CACHE BOOL", "path": "CMakeLists.txt", "position": null, "original_position": 6, "commit_id": "d89d4ca9211612be9ac1d1396a67be9ec9aec272", "original_commit_id": "af7b550faabf4c9bbe8a3927684c9eaf527fee5d", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Done.\n", "created_at": "2014-04-09T10:12:00Z", "updated_at": "2014-04-11T00:48:42Z", "html_url": "https://github.com/libdynd/libdynd/pull/25#discussion_r11429593", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/25", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11429593"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/25#discussion_r11429593"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/25"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11429593/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11430445", "pull_request_review_id": null, "id": 11430445, "diff_hunk": "@@ -213,50 +410,198 @@ int main(int argc, char **argv) {\n \n     fout << endl;\n \n-    fout << \"#define DYND_PP_REPEAT(TOK, COUNT) DYND_PP_PASTE(DYND_PP_REPEAT_, COUNT)(TOK)\" << endl;\n-    fout << \"#define DYND_PP_REPEAT_0(TOK)\" << endl;\n-    fout << \"#define DYND_PP_REPEAT_1(TOK) TOK\" << endl;\n-    for (int i = 2; i <= pp_len_max; i++) {\n-        fout << \"#define DYND_PP_REPEAT_\" << i << \"(TOK) TOK, DYND_PP_REPEAT_\" << i - 1 << \"(TOK)\" << endl;\n+    fout << \"#define DYND_PP_REPEAT DYND_PP_REPEAT_0\" << endl;\n+    for (int dep = 0; dep < pp_dep_max; dep++) {\n+        fout << \"#define DYND_PP_REPEAT_\" << dep << \"(TOK, LEN)\";\n+        fout << \" \";\n+        fout << \"(DYND_PP_JOIN_REPEAT_\" << dep << \"(TOK, (,), LEN))\" << endl;\n     }\n \n     fout << endl;\n \n-    fout << \"#define DYND_PP_MAP DYND_PP_NESTED_MAP(0)\" << endl;\n-    fout << \"#define DYND_PP_NESTED_MAP(DEPTH) DYND_PP_PASTE(DYND_PP_NESTED_MAP_, DEPTH)\" << endl;\n+    fout << \"#define DYND_PP_JOIN_REPEAT DYND_PP_JOIN_REPEAT_0\" << endl;\n+    for (int dep = 0; dep < pp_dep_max; dep++) {\n+        fout << \"#define DYND_PP_JOIN_REPEAT_\" << dep << \"(TOK, SEP, LEN)\";\n+        fout << \" \";\n+        fout << \"DYND_PP_PASTE(DYND_PP_JOIN_REPEAT_\" << dep << \"_, LEN)(TOK, SEP)\" << endl;\n+        fout << \"#define DYND_PP_JOIN_REPEAT_\" << dep << \"_0(TOK, SEP)\" << endl;\n+        fout << \"#define DYND_PP_JOIN_REPEAT_\" << dep << \"_1(TOK, SEP) TOK\" << endl;\n+        for (int len = 2; len <= pp_len_max; len++) {\n+            fout << \"#define DYND_PP_JOIN_REPEAT_\" << dep << \"_\" << len << \"(TOK, SEP)\";\n+            fout << \" TOK DYND_PP_ID SEP \";\n+            fout << \"DYND_PP_JOIN_REPEAT_\" << dep << \"_\" << len - 1 << \"(TOK, SEP)\" << endl;\n+        }\n+    }\n+\n+    fout << endl;\n+\n+    fout << \"#define DYND_PP_MAP DYND_PP_MAP_0\" << endl;\n+    for (int dep = 0; dep <= pp_dep_max; dep++) {\n+        fout << \"#define DYND_PP_MAP_\" << dep << \"(MAC, A) (DYND_PP_JOIN_MAP_\" << dep << \"(MAC, (,), A))\" << endl;\n+    }\n+\n+    fout << endl;\n+\n+    fout << \"#define DYND_PP_JOIN_MAP DYND_PP_JOIN_MAP_0\" << endl;", "path": "include/dynd/pp/gen.cpp", "position": null, "original_position": 265, "commit_id": "d89d4ca9211612be9ac1d1396a67be9ec9aec272", "original_commit_id": "af7b550faabf4c9bbe8a3927684c9eaf527fee5d", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "I think the best thing to do is to simply try it out. You can do this by using gcc -E or cl.exe /E, which just shows the preprocessor output. You can look at the tests I've written in test_pp_list.cpp as an example of how to use the more complicated macros.\n\nMost of the macros behave like their Python counterparts. DYND_PP_RANGE(4) returns (0, 1, 2, 3). DYND_PP_MAP(MAC, (0, 1, 2, 3)) returns (MAC(0), MAC(1), MAC(2), MAC(3)). DYND_PP_REPEAT(TOK, 4) returns (TOK, TOK, TOK, TOK).\n\nDYND_PP_ELWISE and DYND_PP_OUTER behave like the dynd functions we are implementing. DYND_PP_ELWISE(MAC, (0, 1, 2), (3, 4, 5)) returns (MAC(0, 3), MAC(1, 4), MAC(2, 5)). DYND_PP_OUTER(MAC, (0, 1, 2), (3, 4, 5)) returns (MAC(0, 3), MAC(0, 4), MAC(0, 5), MAC(1, 3), MAC(1, 4), MAC(1, 5), MAC(2, 3), MAC(2, 4), MAC(2, 5)).\n\nThe JOIN versions of the above take an arbitrary separator in parentheses, like (,), (;), or () for nothing, and apply the same operation except without enclosing the final result in parentheses. The JOIN versions are needed for doing the metaprogramming. \n", "created_at": "2014-04-09T10:44:53Z", "updated_at": "2014-04-11T00:48:42Z", "html_url": "https://github.com/libdynd/libdynd/pull/25#discussion_r11430445", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/25", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11430445"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/25#discussion_r11430445"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/25"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11430445/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11430547", "pull_request_review_id": null, "id": 11430547, "diff_hunk": "@@ -213,50 +410,198 @@ int main(int argc, char **argv) {\n \n     fout << endl;\n \n-    fout << \"#define DYND_PP_REPEAT(TOK, COUNT) DYND_PP_PASTE(DYND_PP_REPEAT_, COUNT)(TOK)\" << endl;\n-    fout << \"#define DYND_PP_REPEAT_0(TOK)\" << endl;\n-    fout << \"#define DYND_PP_REPEAT_1(TOK) TOK\" << endl;\n-    for (int i = 2; i <= pp_len_max; i++) {\n-        fout << \"#define DYND_PP_REPEAT_\" << i << \"(TOK) TOK, DYND_PP_REPEAT_\" << i - 1 << \"(TOK)\" << endl;\n+    fout << \"#define DYND_PP_REPEAT DYND_PP_REPEAT_0\" << endl;\n+    for (int dep = 0; dep < pp_dep_max; dep++) {\n+        fout << \"#define DYND_PP_REPEAT_\" << dep << \"(TOK, LEN)\";\n+        fout << \" \";\n+        fout << \"(DYND_PP_JOIN_REPEAT_\" << dep << \"(TOK, (,), LEN))\" << endl;\n     }\n \n     fout << endl;\n \n-    fout << \"#define DYND_PP_MAP DYND_PP_NESTED_MAP(0)\" << endl;\n-    fout << \"#define DYND_PP_NESTED_MAP(DEPTH) DYND_PP_PASTE(DYND_PP_NESTED_MAP_, DEPTH)\" << endl;\n+    fout << \"#define DYND_PP_JOIN_REPEAT DYND_PP_JOIN_REPEAT_0\" << endl;\n+    for (int dep = 0; dep < pp_dep_max; dep++) {\n+        fout << \"#define DYND_PP_JOIN_REPEAT_\" << dep << \"(TOK, SEP, LEN)\";\n+        fout << \" \";\n+        fout << \"DYND_PP_PASTE(DYND_PP_JOIN_REPEAT_\" << dep << \"_, LEN)(TOK, SEP)\" << endl;\n+        fout << \"#define DYND_PP_JOIN_REPEAT_\" << dep << \"_0(TOK, SEP)\" << endl;\n+        fout << \"#define DYND_PP_JOIN_REPEAT_\" << dep << \"_1(TOK, SEP) TOK\" << endl;\n+        for (int len = 2; len <= pp_len_max; len++) {\n+            fout << \"#define DYND_PP_JOIN_REPEAT_\" << dep << \"_\" << len << \"(TOK, SEP)\";\n+            fout << \" TOK DYND_PP_ID SEP \";\n+            fout << \"DYND_PP_JOIN_REPEAT_\" << dep << \"_\" << len - 1 << \"(TOK, SEP)\" << endl;\n+        }\n+    }\n+\n+    fout << endl;\n+\n+    fout << \"#define DYND_PP_MAP DYND_PP_MAP_0\" << endl;\n+    for (int dep = 0; dep <= pp_dep_max; dep++) {\n+        fout << \"#define DYND_PP_MAP_\" << dep << \"(MAC, A) (DYND_PP_JOIN_MAP_\" << dep << \"(MAC, (,), A))\" << endl;\n+    }\n+\n+    fout << endl;\n+\n+    fout << \"#define DYND_PP_JOIN_MAP DYND_PP_JOIN_MAP_0\" << endl;", "path": "include/dynd/pp/gen.cpp", "position": null, "original_position": 265, "commit_id": "d89d4ca9211612be9ac1d1396a67be9ec9aec272", "original_commit_id": "af7b550faabf4c9bbe8a3927684c9eaf527fee5d", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Here is the deal with the subscripts. For the most part, a macro with subscripts shouldn't be called directly. There is only one situation where it should, which I'll detail below.\n\nThe C preprocessor isn't recursive. So, if I define a macro that internally uses some particular macro, like DYND_PP_MAP, there can be issues. Consider #define MAC(X) DYND_PP_MAP(OTHER_MAC, DYND_PP_RANGE(X)). MAC(4) returns (OTHER_MAC(0), OTHER_MAC(1), OTHER_MAC(2), OTHER_MAC(3)).\n\nHowever, if I write something like DYND_PP_MAP(MAC, DYND_PP_RANGE(4)), the DYND_PP_MAP call in MAC's definition won't expand. For that reason, I need a second implementation of DYND_PP_MAP, i.e. DYND_PP_MAP_1. I should instead write #define MAC(X) DYND_PP_MAP_1(OTHER_MAC, DYND_PP_RANGE(X)).\n", "created_at": "2014-04-09T10:50:18Z", "updated_at": "2014-04-11T00:48:42Z", "html_url": "https://github.com/libdynd/libdynd/pull/25#discussion_r11430547", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/25", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11430547"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/25#discussion_r11430547"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/25"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11430547/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11430626", "pull_request_review_id": null, "id": 11430626, "diff_hunk": "@@ -213,50 +410,198 @@ int main(int argc, char **argv) {\n \n     fout << endl;\n \n-    fout << \"#define DYND_PP_REPEAT(TOK, COUNT) DYND_PP_PASTE(DYND_PP_REPEAT_, COUNT)(TOK)\" << endl;\n-    fout << \"#define DYND_PP_REPEAT_0(TOK)\" << endl;\n-    fout << \"#define DYND_PP_REPEAT_1(TOK) TOK\" << endl;\n-    for (int i = 2; i <= pp_len_max; i++) {\n-        fout << \"#define DYND_PP_REPEAT_\" << i << \"(TOK) TOK, DYND_PP_REPEAT_\" << i - 1 << \"(TOK)\" << endl;\n+    fout << \"#define DYND_PP_REPEAT DYND_PP_REPEAT_0\" << endl;\n+    for (int dep = 0; dep < pp_dep_max; dep++) {\n+        fout << \"#define DYND_PP_REPEAT_\" << dep << \"(TOK, LEN)\";\n+        fout << \" \";\n+        fout << \"(DYND_PP_JOIN_REPEAT_\" << dep << \"(TOK, (,), LEN))\" << endl;\n     }\n \n     fout << endl;\n \n-    fout << \"#define DYND_PP_MAP DYND_PP_NESTED_MAP(0)\" << endl;\n-    fout << \"#define DYND_PP_NESTED_MAP(DEPTH) DYND_PP_PASTE(DYND_PP_NESTED_MAP_, DEPTH)\" << endl;\n+    fout << \"#define DYND_PP_JOIN_REPEAT DYND_PP_JOIN_REPEAT_0\" << endl;\n+    for (int dep = 0; dep < pp_dep_max; dep++) {\n+        fout << \"#define DYND_PP_JOIN_REPEAT_\" << dep << \"(TOK, SEP, LEN)\";\n+        fout << \" \";\n+        fout << \"DYND_PP_PASTE(DYND_PP_JOIN_REPEAT_\" << dep << \"_, LEN)(TOK, SEP)\" << endl;\n+        fout << \"#define DYND_PP_JOIN_REPEAT_\" << dep << \"_0(TOK, SEP)\" << endl;\n+        fout << \"#define DYND_PP_JOIN_REPEAT_\" << dep << \"_1(TOK, SEP) TOK\" << endl;\n+        for (int len = 2; len <= pp_len_max; len++) {\n+            fout << \"#define DYND_PP_JOIN_REPEAT_\" << dep << \"_\" << len << \"(TOK, SEP)\";\n+            fout << \" TOK DYND_PP_ID SEP \";\n+            fout << \"DYND_PP_JOIN_REPEAT_\" << dep << \"_\" << len - 1 << \"(TOK, SEP)\" << endl;\n+        }\n+    }\n+\n+    fout << endl;\n+\n+    fout << \"#define DYND_PP_MAP DYND_PP_MAP_0\" << endl;\n+    for (int dep = 0; dep <= pp_dep_max; dep++) {\n+        fout << \"#define DYND_PP_MAP_\" << dep << \"(MAC, A) (DYND_PP_JOIN_MAP_\" << dep << \"(MAC, (,), A))\" << endl;\n+    }\n+\n+    fout << endl;\n+\n+    fout << \"#define DYND_PP_JOIN_MAP DYND_PP_JOIN_MAP_0\" << endl;", "path": "include/dynd/pp/gen.cpp", "position": null, "original_position": 265, "commit_id": "d89d4ca9211612be9ac1d1396a67be9ec9aec272", "original_commit_id": "af7b550faabf4c9bbe8a3927684c9eaf527fee5d", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "The general idea is that, for these situations, the programmer needs to keep track of the recursive depth manually. I believe BOOST does exactly the same thing.\n\nHence ppgen takes an argument that specifies the maximum depth (default is 3). And, for each of DYND_PP_MAP, DYND_PP_REDUCE, DYND_PP_JOIN, DYND_PP_REPEAT, DYND_PP_ELWISE, and DYND_PP_OUTER, there is a corresponding version DYND_PP_*_X, all of which are identical.\n\nBy default, DYND_PP_MAP is a shortcut for DYND_PP_MAP_0. Likewise for the other list macros.\n", "created_at": "2014-04-09T10:54:07Z", "updated_at": "2014-04-11T00:48:42Z", "html_url": "https://github.com/libdynd/libdynd/pull/25#discussion_r11430626", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/25", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11430626"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/25#discussion_r11430626"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/25"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11430626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11430685", "pull_request_review_id": null, "id": 11430685, "diff_hunk": "@@ -213,50 +410,198 @@ int main(int argc, char **argv) {\n \n     fout << endl;\n \n-    fout << \"#define DYND_PP_REPEAT(TOK, COUNT) DYND_PP_PASTE(DYND_PP_REPEAT_, COUNT)(TOK)\" << endl;\n-    fout << \"#define DYND_PP_REPEAT_0(TOK)\" << endl;\n-    fout << \"#define DYND_PP_REPEAT_1(TOK) TOK\" << endl;\n-    for (int i = 2; i <= pp_len_max; i++) {\n-        fout << \"#define DYND_PP_REPEAT_\" << i << \"(TOK) TOK, DYND_PP_REPEAT_\" << i - 1 << \"(TOK)\" << endl;\n+    fout << \"#define DYND_PP_REPEAT DYND_PP_REPEAT_0\" << endl;\n+    for (int dep = 0; dep < pp_dep_max; dep++) {\n+        fout << \"#define DYND_PP_REPEAT_\" << dep << \"(TOK, LEN)\";\n+        fout << \" \";\n+        fout << \"(DYND_PP_JOIN_REPEAT_\" << dep << \"(TOK, (,), LEN))\" << endl;\n     }\n \n     fout << endl;\n \n-    fout << \"#define DYND_PP_MAP DYND_PP_NESTED_MAP(0)\" << endl;\n-    fout << \"#define DYND_PP_NESTED_MAP(DEPTH) DYND_PP_PASTE(DYND_PP_NESTED_MAP_, DEPTH)\" << endl;\n+    fout << \"#define DYND_PP_JOIN_REPEAT DYND_PP_JOIN_REPEAT_0\" << endl;\n+    for (int dep = 0; dep < pp_dep_max; dep++) {\n+        fout << \"#define DYND_PP_JOIN_REPEAT_\" << dep << \"(TOK, SEP, LEN)\";\n+        fout << \" \";\n+        fout << \"DYND_PP_PASTE(DYND_PP_JOIN_REPEAT_\" << dep << \"_, LEN)(TOK, SEP)\" << endl;\n+        fout << \"#define DYND_PP_JOIN_REPEAT_\" << dep << \"_0(TOK, SEP)\" << endl;\n+        fout << \"#define DYND_PP_JOIN_REPEAT_\" << dep << \"_1(TOK, SEP) TOK\" << endl;\n+        for (int len = 2; len <= pp_len_max; len++) {\n+            fout << \"#define DYND_PP_JOIN_REPEAT_\" << dep << \"_\" << len << \"(TOK, SEP)\";\n+            fout << \" TOK DYND_PP_ID SEP \";\n+            fout << \"DYND_PP_JOIN_REPEAT_\" << dep << \"_\" << len - 1 << \"(TOK, SEP)\" << endl;\n+        }\n+    }\n+\n+    fout << endl;\n+\n+    fout << \"#define DYND_PP_MAP DYND_PP_MAP_0\" << endl;\n+    for (int dep = 0; dep <= pp_dep_max; dep++) {\n+        fout << \"#define DYND_PP_MAP_\" << dep << \"(MAC, A) (DYND_PP_JOIN_MAP_\" << dep << \"(MAC, (,), A))\" << endl;\n+    }\n+\n+    fout << endl;\n+\n+    fout << \"#define DYND_PP_JOIN_MAP DYND_PP_JOIN_MAP_0\" << endl;", "path": "include/dynd/pp/gen.cpp", "position": null, "original_position": 265, "commit_id": "d89d4ca9211612be9ac1d1396a67be9ec9aec272", "original_commit_id": "af7b550faabf4c9bbe8a3927684c9eaf527fee5d", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "In elwise.hpp, I call the macro ELWISE with a DYND_PP_JOIN_MAP. Hence I need to use a recursive depth of 1 for each call to DYND_PP_JOIN_MAP in the implementation macro. For consistency, I put the other list processing macros at depth 1 too.\n", "created_at": "2014-04-09T10:56:19Z", "updated_at": "2014-04-11T00:48:42Z", "html_url": "https://github.com/libdynd/libdynd/pull/25#discussion_r11430685", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/25", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11430685"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/25#discussion_r11430685"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/25"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11430685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11470074", "pull_request_review_id": null, "id": 11470074, "diff_hunk": "@@ -0,0 +1,498 @@\n+//\n+// Copyright (C) 2011-14 Mark Wiebe, Irwin Zaid, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#ifndef _DYND__ELWISE_HPP_\n+#define _DYND__ELWISE_HPP_\n+\n+#include <utility>\n+\n+#include <dynd/array.hpp>\n+#include <dynd/kernels/ckernel_deferred.hpp>\n+#include <dynd/kernels/make_lifted_ckernel.hpp>\n+#include <dynd/kernels/expr_kernel_generator.hpp>\n+#include <dynd/shape_tools.hpp>\n+#include <dynd/types/strided_dim_type.hpp>\n+#include <dynd/types/fixed_dim_type.hpp>\n+#include <dynd/pp/list.hpp>\n+#include <dynd/pp/meta.hpp>\n+\n+using namespace std;\n+\n+namespace dynd { namespace nd {\n+\n+namespace detail {\n+\n+template<class FuncProto>\n+struct elwise_ckernel_instantiator;\n+\n+#define ELWISE_CKERNEL_INSTANTIATOR_FUNC_RET_RES(NSRC)\n+\n+#define ELWISE_CKERNEL_INSTANTIATOR_FUNC_REF_RES(NSRC) \\\n+    template<typename R, DYND_PP_JOIN_MAP_1(DYND_PP_META_TYPENAME, (,), DYND_PP_META_NAME_RANGE(A, NSRC))> \\\n+    struct elwise_ckernel_instantiator<void (*)(R &, DYND_PP_JOIN_1((,), DYND_PP_META_NAME_RANGE(A, NSRC)))> { \\\n+        typedef elwise_ckernel_instantiator extra_type; \\\n+        typedef void (*func_type)(R &, DYND_PP_JOIN_1((,), DYND_PP_META_NAME_RANGE(A, NSRC))); \\\n+\\\n+        DYND_PP_JOIN_ELWISE_1(DYND_PP_META_TYPEDEF_TYPENAME, (;), DYND_PP_OUTER_1(DYND_PP_META_SCOPE, \\\n+            DYND_PP_OUTER_1(DYND_PP_META_TEMPLATE, (remove_reference), DYND_PP_META_NAME_RANGE(A, NSRC)), (type)), \\\n+            DYND_PP_META_NAME_RANGE(U, NSRC)); \\\n+\\\n+        ckernel_prefix base; \\\n+        func_type func; \\\n+\\\n+        static void single(char *dst, char * const *src, \\\n+                           ckernel_prefix *ckp) \\\n+        { \\\n+            extra_type *e = reinterpret_cast<extra_type *>(ckp); \\\n+            e->func(*reinterpret_cast<R*>(dst), DYND_PP_JOIN_MAP_1(DYND_PP_META_DEREFERENCE, (,), \\\n+                    DYND_PP_ELWISE_1(DYND_PP_META_REINTERPRET_CAST, \\\n+                    DYND_PP_MAP_1(DYND_PP_META_AS_PTR, \\\n+                    DYND_PP_META_NAME_RANGE(U, NSRC)), DYND_PP_META_AT_RANGE(src, NSRC)))); \\\n+        } \\\n+\\\n+        static void strided(char *dst, intptr_t dst_stride, \\\n+                            char * const *src, const intptr_t *src_stride, \\\n+                            size_t count, ckernel_prefix *ckp) \\\n+        { \\\n+            extra_type *e = reinterpret_cast<extra_type *>(ckp); \\\n+            func_type func = e->func; \\\n+            DYND_PP_JOIN_ELWISE_1(DYND_PP_META_DECL_ASGN, (;), DYND_PP_REPEAT_1(char *, NSRC), \\\n+                DYND_PP_META_NAME_RANGE(src, NSRC), DYND_PP_META_AT_RANGE(src, NSRC)); \\\n+            DYND_PP_JOIN_ELWISE_1(DYND_PP_META_DECL_ASGN, (;), DYND_PP_REPEAT_1(intptr_t, NSRC), \\\n+                DYND_PP_META_NAME_RANGE(src_stride, NSRC), DYND_PP_META_AT_RANGE(src_stride, NSRC)); \\\n+            for (size_t i = 0; i < count; ++i) { \\\n+                func(*reinterpret_cast<R*>(dst), DYND_PP_JOIN_MAP_1(DYND_PP_META_DEREFERENCE, (,), \\\n+                    DYND_PP_ELWISE_1(DYND_PP_META_REINTERPRET_CAST, \\\n+                    DYND_PP_MAP_1(DYND_PP_META_AS_PTR, \\\n+                    DYND_PP_META_NAME_RANGE(U, NSRC)), DYND_PP_META_NAME_RANGE(src, NSRC)))); \\\n+                dst += dst_stride; \\\n+                DYND_PP_JOIN_ELWISE_1(DYND_PP_META_ADD_EQ, (;), \\\n+                    DYND_PP_META_NAME_RANGE(src, NSRC), DYND_PP_META_NAME_RANGE(src_stride, NSRC)); \\\n+            } \\\n+        } \\\n+\\\n+        static intptr_t instantiate(void *self_data_ptr, \\\n+                    dynd::ckernel_builder *out_ckb, intptr_t ckb_offset, \\\n+                    const char *const* DYND_UNUSED(dynd_metadata), uint32_t kerntype, \\\n+                    const eval::eval_context *DYND_UNUSED(ectx)) \\\n+        { \\\n+            extra_type *e = out_ckb->get_at<extra_type>(ckb_offset); \\\n+            if (kerntype == kernel_request_single) { \\\n+                e->base.set_function(&extra_type::single); \\\n+            } else if (kerntype == kernel_request_strided) { \\\n+                e->base.set_function(&extra_type::strided); \\\n+            } else { \\\n+                throw runtime_error(\"unsupported kernel request in elwise\"); \\\n+            } \\\n+            e->func = reinterpret_cast<func_type>(self_data_ptr); \\\n+\\\n+            return ckb_offset + sizeof(extra_type); \\\n+        } \\\n+    }; \\\n+\n+#define ELWISE_CKERNEL_INSTANTIATOR(NSRC) \\\n+    ELWISE_CKERNEL_INSTANTIATOR_FUNC_RET_RES(NSRC) \\\n+    ELWISE_CKERNEL_INSTANTIATOR_FUNC_REF_RES(NSRC)\n+\n+DYND_PP_JOIN_MAP(ELWISE_CKERNEL_INSTANTIATOR, (), DYND_PP_RANGE(1, DYND_PP_INC(DYND_ELWISE_MAX)))\n+\n+#undef ELWISE_CKERNEL_INSTANTIATOR\n+#undef ELWISE_CKERNEL_INSTANTIATOR_FUNC_REF_RET\n+#undef ELWISE_CKERNEL_INSTANTIATOR_FUNC_REF_RES\n+\n+// Remove this\n+template<typename R, typename T0, typename T1>\n+struct elwise_ckernel_instantiator<R (*)(T0, T1)> {\n+    typedef elwise_ckernel_instantiator extra_type;\n+\n+    ckernel_prefix base;\n+    R (*func)(T0, T1);\n+\n+    typedef typename remove_reference<T0>::type U0;\n+    typedef typename remove_reference<T0>::type U1;\n+\n+    static void single(char *dst, char * const *src,\n+                       ckernel_prefix *ckp)\n+    {\n+        extra_type *e = reinterpret_cast<extra_type *>(ckp);\n+        *reinterpret_cast<R *>(dst) = e->func(\n+                            *reinterpret_cast<U0 *>(src[0]),\n+                            *reinterpret_cast<U1 *>(src[1]));\n+    }\n+\n+    static void strided(char *dst, intptr_t dst_stride,\n+                        char * const *src, const intptr_t *src_stride,\n+                        size_t count, ckernel_prefix *ckp)\n+    {\n+        extra_type *e = reinterpret_cast<extra_type *>(ckp);\n+        R (*func)(T0, T1);\n+        func = e->func;\n+        char *src0 = src[0], *src1 = src[1];\n+        intptr_t src0_stride = src_stride[0], src1_stride = src_stride[1];\n+        for (size_t i = 0; i < count; ++i) {\n+            *reinterpret_cast<R *>(dst) = func(\n+                                *reinterpret_cast<U0 *>(src0),\n+                                *reinterpret_cast<U1 *>(src1));\n+            dst += dst_stride;\n+            src0 += src0_stride;\n+            src1 += src1_stride;\n+        }\n+    }\n+\n+    static intptr_t instantiate(void *self_data_ptr,\n+                dynd::ckernel_builder *out_ckb, intptr_t ckb_offset,\n+                const char *const* DYND_UNUSED(dynd_metadata), uint32_t kerntype,\n+                const eval::eval_context *DYND_UNUSED(ectx))\n+    {\n+        extra_type *e = out_ckb->get_at<extra_type>(ckb_offset);\n+        if (kerntype == kernel_request_single) {\n+            e->base.set_function(&extra_type::single);\n+        } else if (kerntype == kernel_request_strided) {\n+            e->base.set_function(&extra_type::strided);\n+        } else {\n+            throw runtime_error(\"unsupported kernel request in elwise\");\n+        }\n+        e->func = reinterpret_cast<R (*)(T0, T1)>(self_data_ptr);\n+        // No need for a destructor function in this ckernel\n+\n+        return ckb_offset + sizeof(extra_type);\n+    }\n+};\n+\n+// Remove this\n+template<typename T, typename R, typename A0, typename A1>\n+struct elwise_ckernel_instantiator<R (T::*)(A0, A1)> {\n+    typedef elwise_ckernel_instantiator extra_type;\n+\n+    ckernel_prefix base;\n+    T *obj;\n+    R (T::*func)(A0, A1);\n+\n+    static void single(char *dst, const char * const *src,\n+                       ckernel_prefix *ckp)\n+    {\n+        extra_type *e = reinterpret_cast<extra_type *>(ckp);\n+        *reinterpret_cast<R *>(dst) = ((e->obj)->*(e->func))(\n+                            *reinterpret_cast<const A0 *>(src[0]),\n+                            *reinterpret_cast<const A1 *>(src[1]));\n+    }\n+\n+    static void strided(char *dst, intptr_t dst_stride,\n+                        const char * const *src, const intptr_t *src_stride,\n+                        size_t count, ckernel_prefix *ckp)\n+    {\n+        extra_type *e = reinterpret_cast<extra_type *>(ckp);\n+        T *obj = e->obj;\n+        R (T::*func)(A0, A1) = e->func;\n+        const char *src0 = src[0], *src1 = src[1];\n+        intptr_t src0_stride = src_stride[0], src1_stride = src_stride[1];\n+        for (size_t i = 0; i < count; ++i) {\n+            *reinterpret_cast<R *>(dst) = (obj->*func)(\n+                                *reinterpret_cast<const A0 *>(src0),\n+                                *reinterpret_cast<const A1 *>(src1));\n+            dst += dst_stride;\n+            src0 += src0_stride;\n+            src1 += src1_stride;\n+        }\n+    }\n+\n+    static intptr_t instantiate(void *self_data_ptr,\n+                dynd::ckernel_builder *out_ckb, intptr_t ckb_offset,\n+                const char *const* DYND_UNUSED(dynd_metadata), uint32_t kerntype,\n+                const eval::eval_context *DYND_UNUSED(ectx))\n+    {\n+        extra_type *e = out_ckb->get_at<extra_type>(ckb_offset);\n+        if (kerntype == kernel_request_single) {\n+            e->base.set_function(&extra_type::single);\n+        } else if (kerntype == kernel_request_strided) {\n+            e->base.set_function(&extra_type::strided);\n+        } else {\n+            throw runtime_error(\"unsupported kernel request in elwise\");\n+        }\n+        std::pair<T *, R (T::*)(A0, A1)> *pr = reinterpret_cast<std::pair<T *, R (T::*)(A0, A1)> *>(self_data_ptr);\n+        e->obj = pr->first;\n+        e->func = pr->second;\n+        // No need for a destructor function in this ckernel\n+\n+        return ckb_offset + sizeof(extra_type);\n+    }\n+};\n+\n+}; // namespace detail\n+\n+#define ELWISE_BROADCAST(NSRC) \\\n+    template<DYND_PP_JOIN_MAP_1(DYND_PP_META_TYPENAME, (,), DYND_PP_META_NAME_RANGE(A, NSRC))> \\\n+    void elwise_broadcast(DYND_PP_JOIN_OUTER_1(DYND_PP_META_DECL, (,), \\\n+                (const nd::array &), DYND_PP_META_NAME_RANGE(a, NSRC)), \\\n+        intptr_t& out_ndim, dynd::dimvector& out_shape) { \\", "path": "include/dynd/elwise.hpp", "position": null, "original_position": 229, "commit_id": "d89d4ca9211612be9ac1d1396a67be9ec9aec272", "original_commit_id": "de30e385b4f5a70f5dcfaa100c5367f2534e56fb", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "This function should probably go in namespace detail\n", "created_at": "2014-04-10T05:15:21Z", "updated_at": "2014-04-11T00:48:42Z", "html_url": "https://github.com/libdynd/libdynd/pull/25#discussion_r11470074", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/25", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11470074"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/25#discussion_r11470074"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/25"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11470074/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11470529", "pull_request_review_id": null, "id": 11470529, "diff_hunk": "@@ -0,0 +1,498 @@\n+//\n+// Copyright (C) 2011-14 Mark Wiebe, Irwin Zaid, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#ifndef _DYND__ELWISE_HPP_\n+#define _DYND__ELWISE_HPP_\n+\n+#include <utility>\n+\n+#include <dynd/array.hpp>\n+#include <dynd/kernels/ckernel_deferred.hpp>\n+#include <dynd/kernels/make_lifted_ckernel.hpp>\n+#include <dynd/kernels/expr_kernel_generator.hpp>\n+#include <dynd/shape_tools.hpp>\n+#include <dynd/types/strided_dim_type.hpp>\n+#include <dynd/types/fixed_dim_type.hpp>\n+#include <dynd/pp/list.hpp>\n+#include <dynd/pp/meta.hpp>\n+\n+using namespace std;\n+\n+namespace dynd { namespace nd {\n+\n+namespace detail {\n+\n+template<class FuncProto>\n+struct elwise_ckernel_instantiator;\n+\n+#define ELWISE_CKERNEL_INSTANTIATOR_FUNC_RET_RES(NSRC)\n+\n+#define ELWISE_CKERNEL_INSTANTIATOR_FUNC_REF_RES(NSRC) \\\n+    template<typename R, DYND_PP_JOIN_MAP_1(DYND_PP_META_TYPENAME, (,), DYND_PP_META_NAME_RANGE(A, NSRC))> \\\n+    struct elwise_ckernel_instantiator<void (*)(R &, DYND_PP_JOIN_1((,), DYND_PP_META_NAME_RANGE(A, NSRC)))> { \\\n+        typedef elwise_ckernel_instantiator extra_type; \\\n+        typedef void (*func_type)(R &, DYND_PP_JOIN_1((,), DYND_PP_META_NAME_RANGE(A, NSRC))); \\\n+\\\n+        DYND_PP_JOIN_ELWISE_1(DYND_PP_META_TYPEDEF_TYPENAME, (;), DYND_PP_OUTER_1(DYND_PP_META_SCOPE, \\\n+            DYND_PP_OUTER_1(DYND_PP_META_TEMPLATE, (remove_reference), DYND_PP_META_NAME_RANGE(A, NSRC)), (type)), \\\n+            DYND_PP_META_NAME_RANGE(U, NSRC)); \\\n+\\\n+        ckernel_prefix base; \\\n+        func_type func; \\\n+\\\n+        static void single(char *dst, char * const *src, \\\n+                           ckernel_prefix *ckp) \\\n+        { \\\n+            extra_type *e = reinterpret_cast<extra_type *>(ckp); \\\n+            e->func(*reinterpret_cast<R*>(dst), DYND_PP_JOIN_MAP_1(DYND_PP_META_DEREFERENCE, (,), \\\n+                    DYND_PP_ELWISE_1(DYND_PP_META_REINTERPRET_CAST, \\\n+                    DYND_PP_MAP_1(DYND_PP_META_AS_PTR, \\\n+                    DYND_PP_META_NAME_RANGE(U, NSRC)), DYND_PP_META_AT_RANGE(src, NSRC)))); \\\n+        } \\\n+\\\n+        static void strided(char *dst, intptr_t dst_stride, \\\n+                            char * const *src, const intptr_t *src_stride, \\\n+                            size_t count, ckernel_prefix *ckp) \\\n+        { \\\n+            extra_type *e = reinterpret_cast<extra_type *>(ckp); \\\n+            func_type func = e->func; \\\n+            DYND_PP_JOIN_ELWISE_1(DYND_PP_META_DECL_ASGN, (;), DYND_PP_REPEAT_1(char *, NSRC), \\\n+                DYND_PP_META_NAME_RANGE(src, NSRC), DYND_PP_META_AT_RANGE(src, NSRC)); \\\n+            DYND_PP_JOIN_ELWISE_1(DYND_PP_META_DECL_ASGN, (;), DYND_PP_REPEAT_1(intptr_t, NSRC), \\\n+                DYND_PP_META_NAME_RANGE(src_stride, NSRC), DYND_PP_META_AT_RANGE(src_stride, NSRC)); \\\n+            for (size_t i = 0; i < count; ++i) { \\\n+                func(*reinterpret_cast<R*>(dst), DYND_PP_JOIN_MAP_1(DYND_PP_META_DEREFERENCE, (,), \\\n+                    DYND_PP_ELWISE_1(DYND_PP_META_REINTERPRET_CAST, \\\n+                    DYND_PP_MAP_1(DYND_PP_META_AS_PTR, \\\n+                    DYND_PP_META_NAME_RANGE(U, NSRC)), DYND_PP_META_NAME_RANGE(src, NSRC)))); \\\n+                dst += dst_stride; \\\n+                DYND_PP_JOIN_ELWISE_1(DYND_PP_META_ADD_EQ, (;), \\\n+                    DYND_PP_META_NAME_RANGE(src, NSRC), DYND_PP_META_NAME_RANGE(src_stride, NSRC)); \\\n+            } \\\n+        } \\\n+\\\n+        static intptr_t instantiate(void *self_data_ptr, \\\n+                    dynd::ckernel_builder *out_ckb, intptr_t ckb_offset, \\\n+                    const char *const* DYND_UNUSED(dynd_metadata), uint32_t kerntype, \\\n+                    const eval::eval_context *DYND_UNUSED(ectx)) \\\n+        { \\\n+            extra_type *e = out_ckb->get_at<extra_type>(ckb_offset); \\\n+            if (kerntype == kernel_request_single) { \\\n+                e->base.set_function(&extra_type::single); \\\n+            } else if (kerntype == kernel_request_strided) { \\\n+                e->base.set_function(&extra_type::strided); \\\n+            } else { \\\n+                throw runtime_error(\"unsupported kernel request in elwise\"); \\\n+            } \\\n+            e->func = reinterpret_cast<func_type>(self_data_ptr); \\\n+\\\n+            return ckb_offset + sizeof(extra_type); \\\n+        } \\\n+    }; \\\n+\n+#define ELWISE_CKERNEL_INSTANTIATOR(NSRC) \\\n+    ELWISE_CKERNEL_INSTANTIATOR_FUNC_RET_RES(NSRC) \\\n+    ELWISE_CKERNEL_INSTANTIATOR_FUNC_REF_RES(NSRC)\n+\n+DYND_PP_JOIN_MAP(ELWISE_CKERNEL_INSTANTIATOR, (), DYND_PP_RANGE(1, DYND_PP_INC(DYND_ELWISE_MAX)))\n+\n+#undef ELWISE_CKERNEL_INSTANTIATOR\n+#undef ELWISE_CKERNEL_INSTANTIATOR_FUNC_REF_RET\n+#undef ELWISE_CKERNEL_INSTANTIATOR_FUNC_REF_RES\n+\n+// Remove this\n+template<typename R, typename T0, typename T1>\n+struct elwise_ckernel_instantiator<R (*)(T0, T1)> {\n+    typedef elwise_ckernel_instantiator extra_type;\n+\n+    ckernel_prefix base;\n+    R (*func)(T0, T1);\n+\n+    typedef typename remove_reference<T0>::type U0;\n+    typedef typename remove_reference<T0>::type U1;\n+\n+    static void single(char *dst, char * const *src,\n+                       ckernel_prefix *ckp)\n+    {\n+        extra_type *e = reinterpret_cast<extra_type *>(ckp);\n+        *reinterpret_cast<R *>(dst) = e->func(\n+                            *reinterpret_cast<U0 *>(src[0]),\n+                            *reinterpret_cast<U1 *>(src[1]));\n+    }\n+\n+    static void strided(char *dst, intptr_t dst_stride,\n+                        char * const *src, const intptr_t *src_stride,\n+                        size_t count, ckernel_prefix *ckp)\n+    {\n+        extra_type *e = reinterpret_cast<extra_type *>(ckp);\n+        R (*func)(T0, T1);\n+        func = e->func;\n+        char *src0 = src[0], *src1 = src[1];\n+        intptr_t src0_stride = src_stride[0], src1_stride = src_stride[1];\n+        for (size_t i = 0; i < count; ++i) {\n+            *reinterpret_cast<R *>(dst) = func(\n+                                *reinterpret_cast<U0 *>(src0),\n+                                *reinterpret_cast<U1 *>(src1));\n+            dst += dst_stride;\n+            src0 += src0_stride;\n+            src1 += src1_stride;\n+        }\n+    }\n+\n+    static intptr_t instantiate(void *self_data_ptr,\n+                dynd::ckernel_builder *out_ckb, intptr_t ckb_offset,\n+                const char *const* DYND_UNUSED(dynd_metadata), uint32_t kerntype,\n+                const eval::eval_context *DYND_UNUSED(ectx))\n+    {\n+        extra_type *e = out_ckb->get_at<extra_type>(ckb_offset);\n+        if (kerntype == kernel_request_single) {\n+            e->base.set_function(&extra_type::single);\n+        } else if (kerntype == kernel_request_strided) {\n+            e->base.set_function(&extra_type::strided);\n+        } else {\n+            throw runtime_error(\"unsupported kernel request in elwise\");\n+        }\n+        e->func = reinterpret_cast<R (*)(T0, T1)>(self_data_ptr);\n+        // No need for a destructor function in this ckernel\n+\n+        return ckb_offset + sizeof(extra_type);\n+    }\n+};\n+\n+// Remove this\n+template<typename T, typename R, typename A0, typename A1>\n+struct elwise_ckernel_instantiator<R (T::*)(A0, A1)> {\n+    typedef elwise_ckernel_instantiator extra_type;\n+\n+    ckernel_prefix base;\n+    T *obj;\n+    R (T::*func)(A0, A1);\n+\n+    static void single(char *dst, const char * const *src,\n+                       ckernel_prefix *ckp)\n+    {\n+        extra_type *e = reinterpret_cast<extra_type *>(ckp);\n+        *reinterpret_cast<R *>(dst) = ((e->obj)->*(e->func))(\n+                            *reinterpret_cast<const A0 *>(src[0]),\n+                            *reinterpret_cast<const A1 *>(src[1]));\n+    }\n+\n+    static void strided(char *dst, intptr_t dst_stride,\n+                        const char * const *src, const intptr_t *src_stride,\n+                        size_t count, ckernel_prefix *ckp)\n+    {\n+        extra_type *e = reinterpret_cast<extra_type *>(ckp);\n+        T *obj = e->obj;\n+        R (T::*func)(A0, A1) = e->func;\n+        const char *src0 = src[0], *src1 = src[1];\n+        intptr_t src0_stride = src_stride[0], src1_stride = src_stride[1];\n+        for (size_t i = 0; i < count; ++i) {\n+            *reinterpret_cast<R *>(dst) = (obj->*func)(\n+                                *reinterpret_cast<const A0 *>(src0),\n+                                *reinterpret_cast<const A1 *>(src1));\n+            dst += dst_stride;\n+            src0 += src0_stride;\n+            src1 += src1_stride;\n+        }\n+    }\n+\n+    static intptr_t instantiate(void *self_data_ptr,\n+                dynd::ckernel_builder *out_ckb, intptr_t ckb_offset,\n+                const char *const* DYND_UNUSED(dynd_metadata), uint32_t kerntype,\n+                const eval::eval_context *DYND_UNUSED(ectx))\n+    {\n+        extra_type *e = out_ckb->get_at<extra_type>(ckb_offset);\n+        if (kerntype == kernel_request_single) {\n+            e->base.set_function(&extra_type::single);\n+        } else if (kerntype == kernel_request_strided) {\n+            e->base.set_function(&extra_type::strided);\n+        } else {\n+            throw runtime_error(\"unsupported kernel request in elwise\");\n+        }\n+        std::pair<T *, R (T::*)(A0, A1)> *pr = reinterpret_cast<std::pair<T *, R (T::*)(A0, A1)> *>(self_data_ptr);\n+        e->obj = pr->first;\n+        e->func = pr->second;\n+        // No need for a destructor function in this ckernel\n+\n+        return ckb_offset + sizeof(extra_type);\n+    }\n+};\n+\n+}; // namespace detail\n+\n+#define ELWISE_BROADCAST(NSRC) \\\n+    template<DYND_PP_JOIN_MAP_1(DYND_PP_META_TYPENAME, (,), DYND_PP_META_NAME_RANGE(A, NSRC))> \\\n+    void elwise_broadcast(DYND_PP_JOIN_OUTER_1(DYND_PP_META_DECL, (,), \\\n+                (const nd::array &), DYND_PP_META_NAME_RANGE(a, NSRC)), \\\n+        intptr_t& out_ndim, dynd::dimvector& out_shape) { \\\n+\\\n+        DYND_PP_IF_ELSE(DYND_PP_EQ(NSRC, 1)) \\\n+        ( \\\n+            out_ndim = a0.get_ndim() - detail::ndim_from_array<A0>::value; \\\n+            a0.get_shape(out_shape.get()); \\\n+        ) \\\n+        ( \\\n+            DYND_PP_JOIN_ELWISE_1(DYND_PP_META_ASGN, (;), \\\n+                DYND_PP_OUTER_1(DYND_PP_META_DECL, (intptr_t), \\\n+                    DYND_PP_META_NAME_RANGE(ndim, NSRC)), \\\n+                DYND_PP_ELWISE_1(DYND_PP_META_SUB, \\\n+                    DYND_PP_OUTER_1(DYND_PP_META_DOT_CALL, \\\n+                        DYND_PP_META_NAME_RANGE(a, NSRC), (get_ndim)), \\\n+                    DYND_PP_OUTER_1(DYND_PP_META_TEMPLATE_SCOPE, \\\n+                        (detail::ndim_from_array), DYND_PP_META_NAME_RANGE(A, NSRC), (value)))); \\\n+\\\n+            out_ndim = ndim0; \\\n+            DYND_PP_JOIN_OUTER_1(DYND_PP_META_ASGN, (;), (out_ndim), \\\n+                DYND_PP_OUTER_1(DYND_PP_META_CALL, (max), \\\n+                    DYND_PP_META_NAME_RANGE(ndim, 1, NSRC), (out_ndim))); \\\n+\\\n+            out_shape.init(out_ndim); \\\n+            for (intptr_t j = 0; j != out_ndim; ++j) { \\\n+                out_shape[j] = 1; \\\n+            } \\\n+\\\n+            dimvector tmp_shape(out_ndim); \\\n+            DYND_PP_JOIN_ELWISE_1(DYND_PP_META_IF, (), \\\n+                DYND_PP_OUTER_1(DYND_PP_META_GT, \\\n+                    DYND_PP_META_NAME_RANGE(ndim, NSRC), (0)), \\\n+                DYND_PP_ELWISE_1(DYND_PP_META_SEMI, \\\n+                    DYND_PP_OUTER_1(DYND_PP_META_DOT_CALL, \\\n+                        DYND_PP_META_NAME_RANGE(a, NSRC), (get_shape), (tmp_shape.get())), \\\n+                            DYND_PP_OUTER_1(DYND_PP_META_FLAT_CALL, \\\n+                                (incremental_broadcast), DYND_PP_OUTER_1(DYND_PP_APPEND, (tmp_shape.get()), DYND_PP_OUTER_1(DYND_PP_APPEND, \\\n+                                DYND_PP_META_NAME_RANGE(ndim, NSRC), ((out_ndim, out_shape.get()))))))) \\\n+        ) \\\n+    }\n+\n+DYND_PP_JOIN_MAP(ELWISE_BROADCAST, (), DYND_PP_RANGE(1, DYND_PP_INC(DYND_ELWISE_MAX)))\n+\n+#undef ELWISE_BROADCAST\n+\n+#define ELWISE_FUNC_RET_RES(NSRC)\n+\n+#define ELWISE_FUNC_REF_RES(NSRC) \\\n+    template<typename R, DYND_PP_JOIN_MAP_1(DYND_PP_META_TYPENAME, (,), DYND_PP_META_NAME_RANGE(A, NSRC))> \\\n+    inline nd::array elwise(void (*func)(R&, DYND_PP_JOIN_1((,), DYND_PP_META_NAME_RANGE(A, NSRC))), \\\n+        DYND_PP_JOIN_OUTER(DYND_PP_META_DECL, (,), (const nd::array&), DYND_PP_META_NAME_RANGE(a, NSRC)), \\\n+        const eval::eval_context *ectx = &eval::default_eval_context) \\\n+    { \\\n+        DYND_PP_JOIN_ELWISE_1(DYND_PP_META_TYPEDEF_TYPENAME, (;), DYND_PP_OUTER_1(DYND_PP_META_SCOPE, \\\n+            DYND_PP_OUTER_1(DYND_PP_META_TEMPLATE, (remove_reference), DYND_PP_META_NAME_RANGE(A, NSRC)), (type)), \\\n+            DYND_PP_META_NAME_RANGE(U, NSRC)); \\\n+\\\n+        ndt::type data_dynd_types[DYND_PP_INC(NSRC)] = {ndt::fixed_dim_from_array<R>::make(), DYND_PP_JOIN_ELWISE_1(DYND_PP_META_SCOPE_CALL, (,), \\\n+            DYND_PP_OUTER(DYND_PP_META_TEMPLATE, (ndt::fixed_dim_from_array), \\\n+            DYND_PP_META_NAME_RANGE(U, NSRC)), DYND_PP_REPEAT(make, NSRC))}; \\\n+\\\n+        DYND_PP_JOIN_ELWISE_1(DYND_PP_META_ASGN, (;), \\\n+            DYND_PP_OUTER_1(DYND_PP_META_DECL, \\\n+                (const nd::array), DYND_PP_META_NAME_RANGE(acast, NSRC)), \\\n+            DYND_PP_OUTER_1(DYND_PP_META_DOT_CALL, \\\n+                DYND_PP_ELWISE_1(DYND_PP_META_DOT, \\\n+                    DYND_PP_META_NAME_RANGE(a, NSRC), \\\n+                        DYND_PP_OUTER_1(DYND_PP_META_CALL, \\\n+                            (ucast), DYND_PP_OUTER_1(DYND_PP_META_DOT_CALL, \\\n+                                DYND_PP_META_AT_RANGE(data_dynd_types, 1, DYND_PP_INC(NSRC)), (get_dtype)))), (eval))); \\\n+\\\n+        intptr_t res_strided_ndim; \\\n+        dimvector res_strided_shape; \\\n+        elwise_broadcast<DYND_PP_JOIN_1((,), DYND_PP_META_NAME_RANGE(U, NSRC))> \\\n+            (DYND_PP_JOIN_1((,), DYND_PP_META_NAME_RANGE(acast, NSRC)), res_strided_ndim, res_strided_shape); \\\n+        nd::array result = nd::make_strided_array(data_dynd_types[0], res_strided_ndim, res_strided_shape.get()); \\\n+\\\n+        ckernel_deferred ckd; \\\n+        ckd.ckernel_funcproto = expr_operation_funcproto; \\\n+        ckd.data_types_size = DYND_PP_INC(NSRC); \\", "path": "include/dynd/elwise.hpp", "position": null, "original_position": 307, "commit_id": "d89d4ca9211612be9ac1d1396a67be9ec9aec272", "original_commit_id": "de30e385b4f5a70f5dcfaa100c5367f2534e56fb", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "In contexts like this, it could just be NSRC + 1, right?\n", "created_at": "2014-04-10T05:35:24Z", "updated_at": "2014-04-11T00:48:42Z", "html_url": "https://github.com/libdynd/libdynd/pull/25#discussion_r11470529", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/25", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11470529"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/25#discussion_r11470529"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/25"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11470529/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11474307", "pull_request_review_id": null, "id": 11474307, "diff_hunk": "@@ -0,0 +1,498 @@\n+//\n+// Copyright (C) 2011-14 Mark Wiebe, Irwin Zaid, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#ifndef _DYND__ELWISE_HPP_\n+#define _DYND__ELWISE_HPP_\n+\n+#include <utility>\n+\n+#include <dynd/array.hpp>\n+#include <dynd/kernels/ckernel_deferred.hpp>\n+#include <dynd/kernels/make_lifted_ckernel.hpp>\n+#include <dynd/kernels/expr_kernel_generator.hpp>\n+#include <dynd/shape_tools.hpp>\n+#include <dynd/types/strided_dim_type.hpp>\n+#include <dynd/types/fixed_dim_type.hpp>\n+#include <dynd/pp/list.hpp>\n+#include <dynd/pp/meta.hpp>\n+\n+using namespace std;\n+\n+namespace dynd { namespace nd {\n+\n+namespace detail {\n+\n+template<class FuncProto>\n+struct elwise_ckernel_instantiator;\n+\n+#define ELWISE_CKERNEL_INSTANTIATOR_FUNC_RET_RES(NSRC)\n+\n+#define ELWISE_CKERNEL_INSTANTIATOR_FUNC_REF_RES(NSRC) \\\n+    template<typename R, DYND_PP_JOIN_MAP_1(DYND_PP_META_TYPENAME, (,), DYND_PP_META_NAME_RANGE(A, NSRC))> \\\n+    struct elwise_ckernel_instantiator<void (*)(R &, DYND_PP_JOIN_1((,), DYND_PP_META_NAME_RANGE(A, NSRC)))> { \\\n+        typedef elwise_ckernel_instantiator extra_type; \\\n+        typedef void (*func_type)(R &, DYND_PP_JOIN_1((,), DYND_PP_META_NAME_RANGE(A, NSRC))); \\\n+\\\n+        DYND_PP_JOIN_ELWISE_1(DYND_PP_META_TYPEDEF_TYPENAME, (;), DYND_PP_OUTER_1(DYND_PP_META_SCOPE, \\\n+            DYND_PP_OUTER_1(DYND_PP_META_TEMPLATE, (remove_reference), DYND_PP_META_NAME_RANGE(A, NSRC)), (type)), \\\n+            DYND_PP_META_NAME_RANGE(U, NSRC)); \\\n+\\\n+        ckernel_prefix base; \\\n+        func_type func; \\\n+\\\n+        static void single(char *dst, char * const *src, \\\n+                           ckernel_prefix *ckp) \\\n+        { \\\n+            extra_type *e = reinterpret_cast<extra_type *>(ckp); \\\n+            e->func(*reinterpret_cast<R*>(dst), DYND_PP_JOIN_MAP_1(DYND_PP_META_DEREFERENCE, (,), \\\n+                    DYND_PP_ELWISE_1(DYND_PP_META_REINTERPRET_CAST, \\\n+                    DYND_PP_MAP_1(DYND_PP_META_AS_PTR, \\\n+                    DYND_PP_META_NAME_RANGE(U, NSRC)), DYND_PP_META_AT_RANGE(src, NSRC)))); \\\n+        } \\\n+\\\n+        static void strided(char *dst, intptr_t dst_stride, \\\n+                            char * const *src, const intptr_t *src_stride, \\\n+                            size_t count, ckernel_prefix *ckp) \\\n+        { \\\n+            extra_type *e = reinterpret_cast<extra_type *>(ckp); \\\n+            func_type func = e->func; \\\n+            DYND_PP_JOIN_ELWISE_1(DYND_PP_META_DECL_ASGN, (;), DYND_PP_REPEAT_1(char *, NSRC), \\\n+                DYND_PP_META_NAME_RANGE(src, NSRC), DYND_PP_META_AT_RANGE(src, NSRC)); \\\n+            DYND_PP_JOIN_ELWISE_1(DYND_PP_META_DECL_ASGN, (;), DYND_PP_REPEAT_1(intptr_t, NSRC), \\\n+                DYND_PP_META_NAME_RANGE(src_stride, NSRC), DYND_PP_META_AT_RANGE(src_stride, NSRC)); \\\n+            for (size_t i = 0; i < count; ++i) { \\\n+                func(*reinterpret_cast<R*>(dst), DYND_PP_JOIN_MAP_1(DYND_PP_META_DEREFERENCE, (,), \\\n+                    DYND_PP_ELWISE_1(DYND_PP_META_REINTERPRET_CAST, \\\n+                    DYND_PP_MAP_1(DYND_PP_META_AS_PTR, \\\n+                    DYND_PP_META_NAME_RANGE(U, NSRC)), DYND_PP_META_NAME_RANGE(src, NSRC)))); \\\n+                dst += dst_stride; \\\n+                DYND_PP_JOIN_ELWISE_1(DYND_PP_META_ADD_EQ, (;), \\\n+                    DYND_PP_META_NAME_RANGE(src, NSRC), DYND_PP_META_NAME_RANGE(src_stride, NSRC)); \\\n+            } \\\n+        } \\\n+\\\n+        static intptr_t instantiate(void *self_data_ptr, \\\n+                    dynd::ckernel_builder *out_ckb, intptr_t ckb_offset, \\\n+                    const char *const* DYND_UNUSED(dynd_metadata), uint32_t kerntype, \\\n+                    const eval::eval_context *DYND_UNUSED(ectx)) \\\n+        { \\\n+            extra_type *e = out_ckb->get_at<extra_type>(ckb_offset); \\\n+            if (kerntype == kernel_request_single) { \\\n+                e->base.set_function(&extra_type::single); \\\n+            } else if (kerntype == kernel_request_strided) { \\\n+                e->base.set_function(&extra_type::strided); \\\n+            } else { \\\n+                throw runtime_error(\"unsupported kernel request in elwise\"); \\\n+            } \\\n+            e->func = reinterpret_cast<func_type>(self_data_ptr); \\\n+\\\n+            return ckb_offset + sizeof(extra_type); \\\n+        } \\\n+    }; \\\n+\n+#define ELWISE_CKERNEL_INSTANTIATOR(NSRC) \\\n+    ELWISE_CKERNEL_INSTANTIATOR_FUNC_RET_RES(NSRC) \\\n+    ELWISE_CKERNEL_INSTANTIATOR_FUNC_REF_RES(NSRC)\n+\n+DYND_PP_JOIN_MAP(ELWISE_CKERNEL_INSTANTIATOR, (), DYND_PP_RANGE(1, DYND_PP_INC(DYND_ELWISE_MAX)))\n+\n+#undef ELWISE_CKERNEL_INSTANTIATOR\n+#undef ELWISE_CKERNEL_INSTANTIATOR_FUNC_REF_RET\n+#undef ELWISE_CKERNEL_INSTANTIATOR_FUNC_REF_RES\n+\n+// Remove this\n+template<typename R, typename T0, typename T1>\n+struct elwise_ckernel_instantiator<R (*)(T0, T1)> {\n+    typedef elwise_ckernel_instantiator extra_type;\n+\n+    ckernel_prefix base;\n+    R (*func)(T0, T1);\n+\n+    typedef typename remove_reference<T0>::type U0;\n+    typedef typename remove_reference<T0>::type U1;\n+\n+    static void single(char *dst, char * const *src,\n+                       ckernel_prefix *ckp)\n+    {\n+        extra_type *e = reinterpret_cast<extra_type *>(ckp);\n+        *reinterpret_cast<R *>(dst) = e->func(\n+                            *reinterpret_cast<U0 *>(src[0]),\n+                            *reinterpret_cast<U1 *>(src[1]));\n+    }\n+\n+    static void strided(char *dst, intptr_t dst_stride,\n+                        char * const *src, const intptr_t *src_stride,\n+                        size_t count, ckernel_prefix *ckp)\n+    {\n+        extra_type *e = reinterpret_cast<extra_type *>(ckp);\n+        R (*func)(T0, T1);\n+        func = e->func;\n+        char *src0 = src[0], *src1 = src[1];\n+        intptr_t src0_stride = src_stride[0], src1_stride = src_stride[1];\n+        for (size_t i = 0; i < count; ++i) {\n+            *reinterpret_cast<R *>(dst) = func(\n+                                *reinterpret_cast<U0 *>(src0),\n+                                *reinterpret_cast<U1 *>(src1));\n+            dst += dst_stride;\n+            src0 += src0_stride;\n+            src1 += src1_stride;\n+        }\n+    }\n+\n+    static intptr_t instantiate(void *self_data_ptr,\n+                dynd::ckernel_builder *out_ckb, intptr_t ckb_offset,\n+                const char *const* DYND_UNUSED(dynd_metadata), uint32_t kerntype,\n+                const eval::eval_context *DYND_UNUSED(ectx))\n+    {\n+        extra_type *e = out_ckb->get_at<extra_type>(ckb_offset);\n+        if (kerntype == kernel_request_single) {\n+            e->base.set_function(&extra_type::single);\n+        } else if (kerntype == kernel_request_strided) {\n+            e->base.set_function(&extra_type::strided);\n+        } else {\n+            throw runtime_error(\"unsupported kernel request in elwise\");\n+        }\n+        e->func = reinterpret_cast<R (*)(T0, T1)>(self_data_ptr);\n+        // No need for a destructor function in this ckernel\n+\n+        return ckb_offset + sizeof(extra_type);\n+    }\n+};\n+\n+// Remove this\n+template<typename T, typename R, typename A0, typename A1>\n+struct elwise_ckernel_instantiator<R (T::*)(A0, A1)> {\n+    typedef elwise_ckernel_instantiator extra_type;\n+\n+    ckernel_prefix base;\n+    T *obj;\n+    R (T::*func)(A0, A1);\n+\n+    static void single(char *dst, const char * const *src,\n+                       ckernel_prefix *ckp)\n+    {\n+        extra_type *e = reinterpret_cast<extra_type *>(ckp);\n+        *reinterpret_cast<R *>(dst) = ((e->obj)->*(e->func))(\n+                            *reinterpret_cast<const A0 *>(src[0]),\n+                            *reinterpret_cast<const A1 *>(src[1]));\n+    }\n+\n+    static void strided(char *dst, intptr_t dst_stride,\n+                        const char * const *src, const intptr_t *src_stride,\n+                        size_t count, ckernel_prefix *ckp)\n+    {\n+        extra_type *e = reinterpret_cast<extra_type *>(ckp);\n+        T *obj = e->obj;\n+        R (T::*func)(A0, A1) = e->func;\n+        const char *src0 = src[0], *src1 = src[1];\n+        intptr_t src0_stride = src_stride[0], src1_stride = src_stride[1];\n+        for (size_t i = 0; i < count; ++i) {\n+            *reinterpret_cast<R *>(dst) = (obj->*func)(\n+                                *reinterpret_cast<const A0 *>(src0),\n+                                *reinterpret_cast<const A1 *>(src1));\n+            dst += dst_stride;\n+            src0 += src0_stride;\n+            src1 += src1_stride;\n+        }\n+    }\n+\n+    static intptr_t instantiate(void *self_data_ptr,\n+                dynd::ckernel_builder *out_ckb, intptr_t ckb_offset,\n+                const char *const* DYND_UNUSED(dynd_metadata), uint32_t kerntype,\n+                const eval::eval_context *DYND_UNUSED(ectx))\n+    {\n+        extra_type *e = out_ckb->get_at<extra_type>(ckb_offset);\n+        if (kerntype == kernel_request_single) {\n+            e->base.set_function(&extra_type::single);\n+        } else if (kerntype == kernel_request_strided) {\n+            e->base.set_function(&extra_type::strided);\n+        } else {\n+            throw runtime_error(\"unsupported kernel request in elwise\");\n+        }\n+        std::pair<T *, R (T::*)(A0, A1)> *pr = reinterpret_cast<std::pair<T *, R (T::*)(A0, A1)> *>(self_data_ptr);\n+        e->obj = pr->first;\n+        e->func = pr->second;\n+        // No need for a destructor function in this ckernel\n+\n+        return ckb_offset + sizeof(extra_type);\n+    }\n+};\n+\n+}; // namespace detail\n+\n+#define ELWISE_BROADCAST(NSRC) \\\n+    template<DYND_PP_JOIN_MAP_1(DYND_PP_META_TYPENAME, (,), DYND_PP_META_NAME_RANGE(A, NSRC))> \\\n+    void elwise_broadcast(DYND_PP_JOIN_OUTER_1(DYND_PP_META_DECL, (,), \\\n+                (const nd::array &), DYND_PP_META_NAME_RANGE(a, NSRC)), \\\n+        intptr_t& out_ndim, dynd::dimvector& out_shape) { \\\n+\\\n+        DYND_PP_IF_ELSE(DYND_PP_EQ(NSRC, 1)) \\\n+        ( \\\n+            out_ndim = a0.get_ndim() - detail::ndim_from_array<A0>::value; \\\n+            a0.get_shape(out_shape.get()); \\\n+        ) \\\n+        ( \\\n+            DYND_PP_JOIN_ELWISE_1(DYND_PP_META_ASGN, (;), \\\n+                DYND_PP_OUTER_1(DYND_PP_META_DECL, (intptr_t), \\\n+                    DYND_PP_META_NAME_RANGE(ndim, NSRC)), \\\n+                DYND_PP_ELWISE_1(DYND_PP_META_SUB, \\\n+                    DYND_PP_OUTER_1(DYND_PP_META_DOT_CALL, \\\n+                        DYND_PP_META_NAME_RANGE(a, NSRC), (get_ndim)), \\\n+                    DYND_PP_OUTER_1(DYND_PP_META_TEMPLATE_SCOPE, \\\n+                        (detail::ndim_from_array), DYND_PP_META_NAME_RANGE(A, NSRC), (value)))); \\\n+\\\n+            out_ndim = ndim0; \\\n+            DYND_PP_JOIN_OUTER_1(DYND_PP_META_ASGN, (;), (out_ndim), \\\n+                DYND_PP_OUTER_1(DYND_PP_META_CALL, (max), \\\n+                    DYND_PP_META_NAME_RANGE(ndim, 1, NSRC), (out_ndim))); \\\n+\\\n+            out_shape.init(out_ndim); \\\n+            for (intptr_t j = 0; j != out_ndim; ++j) { \\\n+                out_shape[j] = 1; \\\n+            } \\\n+\\\n+            dimvector tmp_shape(out_ndim); \\\n+            DYND_PP_JOIN_ELWISE_1(DYND_PP_META_IF, (), \\\n+                DYND_PP_OUTER_1(DYND_PP_META_GT, \\\n+                    DYND_PP_META_NAME_RANGE(ndim, NSRC), (0)), \\\n+                DYND_PP_ELWISE_1(DYND_PP_META_SEMI, \\\n+                    DYND_PP_OUTER_1(DYND_PP_META_DOT_CALL, \\\n+                        DYND_PP_META_NAME_RANGE(a, NSRC), (get_shape), (tmp_shape.get())), \\\n+                            DYND_PP_OUTER_1(DYND_PP_META_FLAT_CALL, \\\n+                                (incremental_broadcast), DYND_PP_OUTER_1(DYND_PP_APPEND, (tmp_shape.get()), DYND_PP_OUTER_1(DYND_PP_APPEND, \\\n+                                DYND_PP_META_NAME_RANGE(ndim, NSRC), ((out_ndim, out_shape.get()))))))) \\\n+        ) \\\n+    }\n+\n+DYND_PP_JOIN_MAP(ELWISE_BROADCAST, (), DYND_PP_RANGE(1, DYND_PP_INC(DYND_ELWISE_MAX)))\n+\n+#undef ELWISE_BROADCAST\n+\n+#define ELWISE_FUNC_RET_RES(NSRC)\n+\n+#define ELWISE_FUNC_REF_RES(NSRC) \\\n+    template<typename R, DYND_PP_JOIN_MAP_1(DYND_PP_META_TYPENAME, (,), DYND_PP_META_NAME_RANGE(A, NSRC))> \\\n+    inline nd::array elwise(void (*func)(R&, DYND_PP_JOIN_1((,), DYND_PP_META_NAME_RANGE(A, NSRC))), \\\n+        DYND_PP_JOIN_OUTER(DYND_PP_META_DECL, (,), (const nd::array&), DYND_PP_META_NAME_RANGE(a, NSRC)), \\\n+        const eval::eval_context *ectx = &eval::default_eval_context) \\\n+    { \\\n+        DYND_PP_JOIN_ELWISE_1(DYND_PP_META_TYPEDEF_TYPENAME, (;), DYND_PP_OUTER_1(DYND_PP_META_SCOPE, \\\n+            DYND_PP_OUTER_1(DYND_PP_META_TEMPLATE, (remove_reference), DYND_PP_META_NAME_RANGE(A, NSRC)), (type)), \\\n+            DYND_PP_META_NAME_RANGE(U, NSRC)); \\\n+\\\n+        ndt::type data_dynd_types[DYND_PP_INC(NSRC)] = {ndt::fixed_dim_from_array<R>::make(), DYND_PP_JOIN_ELWISE_1(DYND_PP_META_SCOPE_CALL, (,), \\\n+            DYND_PP_OUTER(DYND_PP_META_TEMPLATE, (ndt::fixed_dim_from_array), \\\n+            DYND_PP_META_NAME_RANGE(U, NSRC)), DYND_PP_REPEAT(make, NSRC))}; \\\n+\\\n+        DYND_PP_JOIN_ELWISE_1(DYND_PP_META_ASGN, (;), \\\n+            DYND_PP_OUTER_1(DYND_PP_META_DECL, \\\n+                (const nd::array), DYND_PP_META_NAME_RANGE(acast, NSRC)), \\\n+            DYND_PP_OUTER_1(DYND_PP_META_DOT_CALL, \\\n+                DYND_PP_ELWISE_1(DYND_PP_META_DOT, \\\n+                    DYND_PP_META_NAME_RANGE(a, NSRC), \\\n+                        DYND_PP_OUTER_1(DYND_PP_META_CALL, \\\n+                            (ucast), DYND_PP_OUTER_1(DYND_PP_META_DOT_CALL, \\\n+                                DYND_PP_META_AT_RANGE(data_dynd_types, 1, DYND_PP_INC(NSRC)), (get_dtype)))), (eval))); \\\n+\\\n+        intptr_t res_strided_ndim; \\\n+        dimvector res_strided_shape; \\\n+        elwise_broadcast<DYND_PP_JOIN_1((,), DYND_PP_META_NAME_RANGE(U, NSRC))> \\\n+            (DYND_PP_JOIN_1((,), DYND_PP_META_NAME_RANGE(acast, NSRC)), res_strided_ndim, res_strided_shape); \\\n+        nd::array result = nd::make_strided_array(data_dynd_types[0], res_strided_ndim, res_strided_shape.get()); \\\n+\\\n+        ckernel_deferred ckd; \\\n+        ckd.ckernel_funcproto = expr_operation_funcproto; \\\n+        ckd.data_types_size = DYND_PP_INC(NSRC); \\", "path": "include/dynd/elwise.hpp", "position": null, "original_position": 307, "commit_id": "d89d4ca9211612be9ac1d1396a67be9ec9aec272", "original_commit_id": "de30e385b4f5a70f5dcfaa100c5367f2534e56fb", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Yes. I used DYND_PP_INC because then it is for sure evaluated at compile-time.\n\nEdit: Of course, a const expression '5 + 1' should be too. I have switched DYND_PP_INC with the expressions.\n", "created_at": "2014-04-10T08:08:40Z", "updated_at": "2014-04-11T00:48:42Z", "html_url": "https://github.com/libdynd/libdynd/pull/25#discussion_r11474307", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/25", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11474307"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/25#discussion_r11474307"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/25"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11474307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11483220", "pull_request_review_id": null, "id": 11483220, "diff_hunk": "@@ -0,0 +1,498 @@\n+//\n+// Copyright (C) 2011-14 Mark Wiebe, Irwin Zaid, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#ifndef _DYND__ELWISE_HPP_\n+#define _DYND__ELWISE_HPP_\n+\n+#include <utility>\n+\n+#include <dynd/array.hpp>\n+#include <dynd/kernels/ckernel_deferred.hpp>\n+#include <dynd/kernels/make_lifted_ckernel.hpp>\n+#include <dynd/kernels/expr_kernel_generator.hpp>\n+#include <dynd/shape_tools.hpp>\n+#include <dynd/types/strided_dim_type.hpp>\n+#include <dynd/types/fixed_dim_type.hpp>\n+#include <dynd/pp/list.hpp>\n+#include <dynd/pp/meta.hpp>\n+\n+using namespace std;\n+\n+namespace dynd { namespace nd {\n+\n+namespace detail {\n+\n+template<class FuncProto>\n+struct elwise_ckernel_instantiator;\n+\n+#define ELWISE_CKERNEL_INSTANTIATOR_FUNC_RET_RES(NSRC)\n+\n+#define ELWISE_CKERNEL_INSTANTIATOR_FUNC_REF_RES(NSRC) \\\n+    template<typename R, DYND_PP_JOIN_MAP_1(DYND_PP_META_TYPENAME, (,), DYND_PP_META_NAME_RANGE(A, NSRC))> \\\n+    struct elwise_ckernel_instantiator<void (*)(R &, DYND_PP_JOIN_1((,), DYND_PP_META_NAME_RANGE(A, NSRC)))> { \\\n+        typedef elwise_ckernel_instantiator extra_type; \\\n+        typedef void (*func_type)(R &, DYND_PP_JOIN_1((,), DYND_PP_META_NAME_RANGE(A, NSRC))); \\\n+\\\n+        DYND_PP_JOIN_ELWISE_1(DYND_PP_META_TYPEDEF_TYPENAME, (;), DYND_PP_OUTER_1(DYND_PP_META_SCOPE, \\\n+            DYND_PP_OUTER_1(DYND_PP_META_TEMPLATE, (remove_reference), DYND_PP_META_NAME_RANGE(A, NSRC)), (type)), \\\n+            DYND_PP_META_NAME_RANGE(U, NSRC)); \\\n+\\\n+        ckernel_prefix base; \\\n+        func_type func; \\\n+\\\n+        static void single(char *dst, char * const *src, \\\n+                           ckernel_prefix *ckp) \\\n+        { \\\n+            extra_type *e = reinterpret_cast<extra_type *>(ckp); \\\n+            e->func(*reinterpret_cast<R*>(dst), DYND_PP_JOIN_MAP_1(DYND_PP_META_DEREFERENCE, (,), \\\n+                    DYND_PP_ELWISE_1(DYND_PP_META_REINTERPRET_CAST, \\\n+                    DYND_PP_MAP_1(DYND_PP_META_AS_PTR, \\\n+                    DYND_PP_META_NAME_RANGE(U, NSRC)), DYND_PP_META_AT_RANGE(src, NSRC)))); \\\n+        } \\\n+\\\n+        static void strided(char *dst, intptr_t dst_stride, \\\n+                            char * const *src, const intptr_t *src_stride, \\\n+                            size_t count, ckernel_prefix *ckp) \\\n+        { \\\n+            extra_type *e = reinterpret_cast<extra_type *>(ckp); \\\n+            func_type func = e->func; \\\n+            DYND_PP_JOIN_ELWISE_1(DYND_PP_META_DECL_ASGN, (;), DYND_PP_REPEAT_1(char *, NSRC), \\\n+                DYND_PP_META_NAME_RANGE(src, NSRC), DYND_PP_META_AT_RANGE(src, NSRC)); \\\n+            DYND_PP_JOIN_ELWISE_1(DYND_PP_META_DECL_ASGN, (;), DYND_PP_REPEAT_1(intptr_t, NSRC), \\\n+                DYND_PP_META_NAME_RANGE(src_stride, NSRC), DYND_PP_META_AT_RANGE(src_stride, NSRC)); \\\n+            for (size_t i = 0; i < count; ++i) { \\\n+                func(*reinterpret_cast<R*>(dst), DYND_PP_JOIN_MAP_1(DYND_PP_META_DEREFERENCE, (,), \\\n+                    DYND_PP_ELWISE_1(DYND_PP_META_REINTERPRET_CAST, \\\n+                    DYND_PP_MAP_1(DYND_PP_META_AS_PTR, \\\n+                    DYND_PP_META_NAME_RANGE(U, NSRC)), DYND_PP_META_NAME_RANGE(src, NSRC)))); \\\n+                dst += dst_stride; \\\n+                DYND_PP_JOIN_ELWISE_1(DYND_PP_META_ADD_EQ, (;), \\\n+                    DYND_PP_META_NAME_RANGE(src, NSRC), DYND_PP_META_NAME_RANGE(src_stride, NSRC)); \\\n+            } \\\n+        } \\\n+\\\n+        static intptr_t instantiate(void *self_data_ptr, \\\n+                    dynd::ckernel_builder *out_ckb, intptr_t ckb_offset, \\\n+                    const char *const* DYND_UNUSED(dynd_metadata), uint32_t kerntype, \\\n+                    const eval::eval_context *DYND_UNUSED(ectx)) \\\n+        { \\\n+            extra_type *e = out_ckb->get_at<extra_type>(ckb_offset); \\\n+            if (kerntype == kernel_request_single) { \\\n+                e->base.set_function(&extra_type::single); \\\n+            } else if (kerntype == kernel_request_strided) { \\\n+                e->base.set_function(&extra_type::strided); \\\n+            } else { \\\n+                throw runtime_error(\"unsupported kernel request in elwise\"); \\\n+            } \\\n+            e->func = reinterpret_cast<func_type>(self_data_ptr); \\\n+\\\n+            return ckb_offset + sizeof(extra_type); \\\n+        } \\\n+    }; \\\n+\n+#define ELWISE_CKERNEL_INSTANTIATOR(NSRC) \\\n+    ELWISE_CKERNEL_INSTANTIATOR_FUNC_RET_RES(NSRC) \\\n+    ELWISE_CKERNEL_INSTANTIATOR_FUNC_REF_RES(NSRC)\n+\n+DYND_PP_JOIN_MAP(ELWISE_CKERNEL_INSTANTIATOR, (), DYND_PP_RANGE(1, DYND_PP_INC(DYND_ELWISE_MAX)))\n+\n+#undef ELWISE_CKERNEL_INSTANTIATOR\n+#undef ELWISE_CKERNEL_INSTANTIATOR_FUNC_REF_RET\n+#undef ELWISE_CKERNEL_INSTANTIATOR_FUNC_REF_RES\n+\n+// Remove this\n+template<typename R, typename T0, typename T1>\n+struct elwise_ckernel_instantiator<R (*)(T0, T1)> {\n+    typedef elwise_ckernel_instantiator extra_type;\n+\n+    ckernel_prefix base;\n+    R (*func)(T0, T1);\n+\n+    typedef typename remove_reference<T0>::type U0;\n+    typedef typename remove_reference<T0>::type U1;\n+\n+    static void single(char *dst, char * const *src,\n+                       ckernel_prefix *ckp)\n+    {\n+        extra_type *e = reinterpret_cast<extra_type *>(ckp);\n+        *reinterpret_cast<R *>(dst) = e->func(\n+                            *reinterpret_cast<U0 *>(src[0]),\n+                            *reinterpret_cast<U1 *>(src[1]));\n+    }\n+\n+    static void strided(char *dst, intptr_t dst_stride,\n+                        char * const *src, const intptr_t *src_stride,\n+                        size_t count, ckernel_prefix *ckp)\n+    {\n+        extra_type *e = reinterpret_cast<extra_type *>(ckp);\n+        R (*func)(T0, T1);\n+        func = e->func;\n+        char *src0 = src[0], *src1 = src[1];\n+        intptr_t src0_stride = src_stride[0], src1_stride = src_stride[1];\n+        for (size_t i = 0; i < count; ++i) {\n+            *reinterpret_cast<R *>(dst) = func(\n+                                *reinterpret_cast<U0 *>(src0),\n+                                *reinterpret_cast<U1 *>(src1));\n+            dst += dst_stride;\n+            src0 += src0_stride;\n+            src1 += src1_stride;\n+        }\n+    }\n+\n+    static intptr_t instantiate(void *self_data_ptr,\n+                dynd::ckernel_builder *out_ckb, intptr_t ckb_offset,\n+                const char *const* DYND_UNUSED(dynd_metadata), uint32_t kerntype,\n+                const eval::eval_context *DYND_UNUSED(ectx))\n+    {\n+        extra_type *e = out_ckb->get_at<extra_type>(ckb_offset);\n+        if (kerntype == kernel_request_single) {\n+            e->base.set_function(&extra_type::single);\n+        } else if (kerntype == kernel_request_strided) {\n+            e->base.set_function(&extra_type::strided);\n+        } else {\n+            throw runtime_error(\"unsupported kernel request in elwise\");\n+        }\n+        e->func = reinterpret_cast<R (*)(T0, T1)>(self_data_ptr);\n+        // No need for a destructor function in this ckernel\n+\n+        return ckb_offset + sizeof(extra_type);\n+    }\n+};\n+\n+// Remove this\n+template<typename T, typename R, typename A0, typename A1>\n+struct elwise_ckernel_instantiator<R (T::*)(A0, A1)> {\n+    typedef elwise_ckernel_instantiator extra_type;\n+\n+    ckernel_prefix base;\n+    T *obj;\n+    R (T::*func)(A0, A1);\n+\n+    static void single(char *dst, const char * const *src,\n+                       ckernel_prefix *ckp)\n+    {\n+        extra_type *e = reinterpret_cast<extra_type *>(ckp);\n+        *reinterpret_cast<R *>(dst) = ((e->obj)->*(e->func))(\n+                            *reinterpret_cast<const A0 *>(src[0]),\n+                            *reinterpret_cast<const A1 *>(src[1]));\n+    }\n+\n+    static void strided(char *dst, intptr_t dst_stride,\n+                        const char * const *src, const intptr_t *src_stride,\n+                        size_t count, ckernel_prefix *ckp)\n+    {\n+        extra_type *e = reinterpret_cast<extra_type *>(ckp);\n+        T *obj = e->obj;\n+        R (T::*func)(A0, A1) = e->func;\n+        const char *src0 = src[0], *src1 = src[1];\n+        intptr_t src0_stride = src_stride[0], src1_stride = src_stride[1];\n+        for (size_t i = 0; i < count; ++i) {\n+            *reinterpret_cast<R *>(dst) = (obj->*func)(\n+                                *reinterpret_cast<const A0 *>(src0),\n+                                *reinterpret_cast<const A1 *>(src1));\n+            dst += dst_stride;\n+            src0 += src0_stride;\n+            src1 += src1_stride;\n+        }\n+    }\n+\n+    static intptr_t instantiate(void *self_data_ptr,\n+                dynd::ckernel_builder *out_ckb, intptr_t ckb_offset,\n+                const char *const* DYND_UNUSED(dynd_metadata), uint32_t kerntype,\n+                const eval::eval_context *DYND_UNUSED(ectx))\n+    {\n+        extra_type *e = out_ckb->get_at<extra_type>(ckb_offset);\n+        if (kerntype == kernel_request_single) {\n+            e->base.set_function(&extra_type::single);\n+        } else if (kerntype == kernel_request_strided) {\n+            e->base.set_function(&extra_type::strided);\n+        } else {\n+            throw runtime_error(\"unsupported kernel request in elwise\");\n+        }\n+        std::pair<T *, R (T::*)(A0, A1)> *pr = reinterpret_cast<std::pair<T *, R (T::*)(A0, A1)> *>(self_data_ptr);\n+        e->obj = pr->first;\n+        e->func = pr->second;\n+        // No need for a destructor function in this ckernel\n+\n+        return ckb_offset + sizeof(extra_type);\n+    }\n+};\n+\n+}; // namespace detail\n+\n+#define ELWISE_BROADCAST(NSRC) \\\n+    template<DYND_PP_JOIN_MAP_1(DYND_PP_META_TYPENAME, (,), DYND_PP_META_NAME_RANGE(A, NSRC))> \\\n+    void elwise_broadcast(DYND_PP_JOIN_OUTER_1(DYND_PP_META_DECL, (,), \\\n+                (const nd::array &), DYND_PP_META_NAME_RANGE(a, NSRC)), \\\n+        intptr_t& out_ndim, dynd::dimvector& out_shape) { \\", "path": "include/dynd/elwise.hpp", "position": null, "original_position": 229, "commit_id": "d89d4ca9211612be9ac1d1396a67be9ec9aec272", "original_commit_id": "de30e385b4f5a70f5dcfaa100c5367f2534e56fb", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Done.\n", "created_at": "2014-04-10T13:07:59Z", "updated_at": "2014-04-11T00:48:42Z", "html_url": "https://github.com/libdynd/libdynd/pull/25#discussion_r11483220", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/25", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11483220"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/25#discussion_r11483220"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/25"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11483220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11685725", "pull_request_review_id": null, "id": 11685725, "diff_hunk": "@@ -0,0 +1,87 @@\n+//\n+// Copyright (C) 2011-14 Mark Wiebe, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#ifndef _DYND__ACCUM_KERNELS_HPP_\n+#define _DYND__ACCUM_KERNELS_HPP_\n+\n+#include <dynd/kernels/ckernel_builder.hpp>\n+#include <dynd/types/type_id.hpp>\n+#include <dynd/eval/eval_context.hpp>\n+\n+namespace dynd {\n+\n+/** Typedef for an accumulation operation on a single element */\n+typedef void (*accum_single_operation_t)(char *dst, const char *src,\n+                                         void *accum_state,\n+                                         ckernel_prefix *self);\n+/** Typedef for an accumulation operation on a strided segment of elements */\n+typedef void (*accum_strided_operation_t)(char *dst, intptr_t dst_stride,\n+                                          const char *src, intptr_t src_stride,\n+                                          size_t count,\n+                                          void *accum_state,\n+                                          ckernel_prefix *self);\n+\n+/**\n+ * Every accumulator ckernel is prefixed with this structure.\n+ */\n+struct accum_ckernel_prefix {\n+    // All ckernels begin with a `ckernel_prefix`\n+    ckernel_prefix base;\n+    // If non-NULL, this is either an accum_single_operation_t or\n+    // an accum_strided_operation_t, used for parallelizing scan\n+    // operations.\n+    void *pre_scan_func;\n+    // Functions for creating/managing the accumulator state\n+    void *(*create_accum_state)(accum_ckernel_prefix *self);\n+    void (*reset_accum_state)(void *prefix_state, accum_ckernel_prefix *self);\n+    void (*free_accum_state)(void *prefix_state, accum_ckernel_prefix *self);\n+};\n+\n+/**\n+ * A helper RAII class for holding on to an accum_state.\n+ */\n+class accum_state_holder {\n+    void *m_accum_state;\n+    accum_ckernel_prefix *m_ckp;\n+public:\n+    inline accum_state_holder(accum_ckernel_prefix *ckp)\n+      : m_accum_state(ckp->create_accum_state(ckp)), m_ckp(ckp)\n+    {\n+    }\n+\n+    inline ~accum_state_holder()\n+    {\n+        m_ckp->free_accum_state(m_accum_state, m_ckp);\n+    }\n+\n+    inline void reset()\n+    {\n+        m_ckp->reset_accum_state(m_accum_state, m_ckp);\n+    }\n+\n+    inline void *accum_state()\n+    {\n+        return m_accum_state;\n+    }\n+};\n+\n+/**\n+ * Makes a ckernel whose child must be an accum ckernel, which applies the\n+ * accumulation to the array. The way this is used is to first apply this", "path": "include/dynd/kernels/accum_kernels.hpp", "position": null, "original_position": 72, "commit_id": "77040b0790dbf386ef3220b0cdabb4e15a1cbdab", "original_commit_id": "f64fdb94467700313f1f30592a82e94544e97882", "user": {"login": "talumbau", "id": 1891418, "avatar_url": "https://avatars1.githubusercontent.com/u/1891418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/talumbau", "html_url": "https://github.com/talumbau", "followers_url": "https://api.github.com/users/talumbau/followers", "following_url": "https://api.github.com/users/talumbau/following{/other_user}", "gists_url": "https://api.github.com/users/talumbau/gists{/gist_id}", "starred_url": "https://api.github.com/users/talumbau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/talumbau/subscriptions", "organizations_url": "https://api.github.com/users/talumbau/orgs", "repos_url": "https://api.github.com/users/talumbau/repos", "events_url": "https://api.github.com/users/talumbau/events{/privacy}", "received_events_url": "https://api.github.com/users/talumbau/received_events", "type": "User", "site_admin": false}, "body": "Was this comment cut off accidentally? Seems to end mid-sentence.\n", "created_at": "2014-04-16T14:15:45Z", "updated_at": "2014-04-23T20:24:04Z", "html_url": "https://github.com/libdynd/libdynd/pull/28#discussion_r11685725", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/28", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11685725"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/28#discussion_r11685725"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/28"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11685725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11885602", "pull_request_review_id": null, "id": 11885602, "diff_hunk": "@@ -0,0 +1,25 @@\n+\ufeff# Expression CKernels", "path": "documents/expr_ckernels.md", "position": 1, "original_position": 1, "commit_id": "77040b0790dbf386ef3220b0cdabb4e15a1cbdab", "original_commit_id": "3f4d773599b4e45f78a4eaca205bc60b8ddef08d", "user": {"login": "talumbau", "id": 1891418, "avatar_url": "https://avatars1.githubusercontent.com/u/1891418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/talumbau", "html_url": "https://github.com/talumbau", "followers_url": "https://api.github.com/users/talumbau/followers", "following_url": "https://api.github.com/users/talumbau/following{/other_user}", "gists_url": "https://api.github.com/users/talumbau/gists{/gist_id}", "starred_url": "https://api.github.com/users/talumbau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/talumbau/subscriptions", "organizations_url": "https://api.github.com/users/talumbau/orgs", "repos_url": "https://api.github.com/users/talumbau/repos", "events_url": "https://api.github.com/users/talumbau/events{/privacy}", "received_events_url": "https://api.github.com/users/talumbau/received_events", "type": "User", "site_admin": false}, "body": "Would it be out of place here to motivate this with a small example? Or even just a \"e.g. (some kind of kernel over some kind of array\"\n", "created_at": "2014-04-23T03:11:07Z", "updated_at": "2014-04-23T20:24:04Z", "html_url": "https://github.com/libdynd/libdynd/pull/28#discussion_r11885602", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/28", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11885602"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/28#discussion_r11885602"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/28"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11885602/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11921704", "pull_request_review_id": null, "id": 11921704, "diff_hunk": "@@ -0,0 +1,25 @@\n+\ufeff# Expression CKernels", "path": "documents/expr_ckernels.md", "position": 1, "original_position": 1, "commit_id": "77040b0790dbf386ef3220b0cdabb4e15a1cbdab", "original_commit_id": "3f4d773599b4e45f78a4eaca205bc60b8ddef08d", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "added, thanks\n", "created_at": "2014-04-23T20:24:12Z", "updated_at": "2014-04-23T20:24:12Z", "html_url": "https://github.com/libdynd/libdynd/pull/28#discussion_r11921704", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/28", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11921704"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/28#discussion_r11921704"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/28"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11921704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11974121", "pull_request_review_id": null, "id": 11974121, "diff_hunk": "@@ -214,14 +218,276 @@ static bool try_view(const ndt::type &tp, const char *metadata,\n     }\n }\n \n+static void refine_bytes_view(memory_block_ptr &data_ref, char *&data_ptr,\n+                              ndt::type &data_tp, const char *&data_meta,\n+                              intptr_t &data_dim_size, intptr_t &data_stride)\n+{\n+    // Handle sequence of strided dims\n+    intptr_t dim_size, stride;\n+    ndt::type el_tp;\n+    const char *el_meta;\n+    if (data_tp.get_as_strided_dim(data_meta, dim_size, stride, el_tp,\n+                                   el_meta)) {\n+        dimvector shape(data_tp.get_ndim());\n+        dimvector strides(data_tp.get_ndim());\n+        intptr_t ndim = 1;\n+        shape[0] = dim_size;\n+        strides[0] = stride;\n+        bool csorted = true;\n+        // Get all the strided dimensions we can in a row\n+        while (el_tp.get_as_strided_dim(el_meta, dim_size, stride, el_tp,\n+                                        el_meta)) {\n+            shape[ndim] = dim_size;\n+            strides[ndim] = stride;\n+            if (stride > strides[ndim-1]) {\n+                csorted = false;\n+            }\n+            ++ndim;\n+        }\n+        if (!csorted) {\n+            // If the strides weren't sorted in C order, sort them\n+            shortvector<int> axis_perm(ndim);\n+            strides_to_axis_perm(ndim, strides.get(), axis_perm.get());\n+            dimvector shape_sorted(ndim);\n+            dimvector strides_sorted(ndim);\n+            for (intptr_t i = 0; i < ndim; ++i) {\n+                int i_perm = axis_perm[i];\n+                shape_sorted[ndim-i-1] = shape[i_perm];\n+                strides_sorted[ndim-i-1] = strides[i_perm];\n+            }\n+            shape.swap(shape_sorted);\n+            strides.swap(strides_sorted);\n+        }\n+        // Try to collapse the shape/strides into a single strided array\n+        intptr_t i = 0;\n+        while (data_dim_size == -1 && i < ndim) {\n+            // If there's not already a dim_size/stride, start one\n+            if (shape[i] != 1) {\n+                data_dim_size = shape[i];\n+                data_stride = strides[i];\n+                ++i;\n+            }\n+        }\n+        for (; i < ndim; ++i) {\n+            if (shape[i] != 1) {\n+                if (shape[i] * strides[i] != data_stride) {\n+                    // Indicate we couldn't view this as bytes\n+                    data_tp = ndt::type();\n+                    data_dim_size = -1;\n+                    return;\n+                }\n+                data_dim_size *= shape[i];\n+                data_stride = strides[i];\n+            }\n+        }\n+        data_tp = el_tp;\n+        data_meta = el_meta;\n+        return;\n+    }\n+\n+    switch (data_tp.get_type_id()) {\n+    case var_dim_type_id: {\n+        // We can only allow leading var_dim\n+        if (data_dim_size != -1) {\n+            break;\n+        }\n+        const var_dim_type_metadata *meta =\n+            reinterpret_cast<const var_dim_type_metadata *>(data_meta);\n+        if (meta->blockref != NULL) {\n+            data_ref = meta->blockref;\n+        }\n+        var_dim_type_data *d = reinterpret_cast<var_dim_type_data *>(data_ptr);\n+        data_ptr = d->begin + meta->offset;\n+        if (d->size != 1) {\n+            data_dim_size = d->size;\n+            data_stride = meta->stride;\n+        }\n+        data_tp = data_tp.tcast<var_dim_type>()->get_element_type();\n+        data_meta += sizeof(var_dim_type_metadata);\n+        return;\n+    }\n+    case pointer_type_id: {\n+        // We can only strip away leading pointers\n+        if (data_dim_size != -1) {\n+            break;\n+        }\n+        const pointer_type_metadata *meta =\n+            reinterpret_cast<const pointer_type_metadata *>(data_meta);\n+        if (meta->blockref != NULL) {\n+            data_ref = meta->blockref;\n+        }\n+        data_ptr = *reinterpret_cast<char **>(data_ptr) + meta->offset;\n+        data_tp = data_tp.tcast<pointer_type>()->get_target_type();\n+        data_meta += sizeof(pointer_type_metadata);\n+        return;\n+    }\n+    default:\n+        break;\n+    }\n+\n+    // If the data type has a fixed size, check if it fits the strides\n+    size_t data_tp_size = data_tp.get_data_size();\n+    if (data_tp_size > 0) {\n+        if (data_dim_size == -1) {\n+            // Indicate success (one item)\n+            data_tp = ndt::type();\n+            data_dim_size = data_tp_size;\n+            data_stride = 1;\n+            return;\n+        } else if ((intptr_t)data_tp_size == data_stride) {\n+            data_tp = ndt::type();\n+            data_dim_size *= data_tp_size;\n+            data_stride = 1;\n+            return;\n+        }\n+    }\n+\n+    // Indicate we couldn't view this as bytes\n+    data_tp = ndt::type();\n+    data_dim_size = -1;\n+}\n+\n+static nd::array view_as_bytes(const nd::array& arr, const ndt::type& tp)\n+{\n+    if (arr.get_type().get_flags()&type_flag_destructor) {\n+        // Can't view arrays of object type\n+        return nd::array();\n+    }\n+\n+    // Get the essential components of the array to analyze\n+    memory_block_ptr data_ref = arr.get_data_memblock();\n+    char *data_ptr = arr.get_ndo()->m_data_pointer;\n+    ndt::type data_tp = arr.get_type();\n+    const char *data_meta = arr.get_ndo_meta();\n+    intptr_t data_dim_size = -1, data_stride = 0;\n+    // Repeatedly refine the data\n+    while (data_tp.get_type_id() != uninitialized_type_id) {\n+        refine_bytes_view(data_ref, data_ptr, data_tp, data_meta, data_dim_size,\n+                          data_stride);\n+    }\n+    // Check that it worked, and that the resulting data pointer is aligned\n+    if (data_dim_size < 0 ||\n+            !offset_is_aligned(reinterpret_cast<size_t>(data_ptr),\n+                           tp.tcast<bytes_type>()->get_target_alignment())) {\n+        // This signals we could not view the data as a\n+        // contiguous chunk of bytes\n+        return nd::array();", "path": "src/dynd/view.cpp", "position": 168, "original_position": 168, "commit_id": "82dcdbe6091ca4c3a802b5f2b1b48c2234a8d3c3", "original_commit_id": "82dcdbe6091ca4c3a802b5f2b1b48c2234a8d3c3", "user": {"login": "talumbau", "id": 1891418, "avatar_url": "https://avatars1.githubusercontent.com/u/1891418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/talumbau", "html_url": "https://github.com/talumbau", "followers_url": "https://api.github.com/users/talumbau/followers", "following_url": "https://api.github.com/users/talumbau/following{/other_user}", "gists_url": "https://api.github.com/users/talumbau/gists{/gist_id}", "starred_url": "https://api.github.com/users/talumbau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/talumbau/subscriptions", "organizations_url": "https://api.github.com/users/talumbau/orgs", "repos_url": "https://api.github.com/users/talumbau/repos", "events_url": "https://api.github.com/users/talumbau/events{/privacy}", "received_events_url": "https://api.github.com/users/talumbau/received_events", "type": "User", "site_admin": false}, "body": "Not sure I follow everything happening here, but it seems like the intended operation is unable to proceed at this point, so we return an empty array. Is this the best way to go? (it might be, just interested in why)\n", "created_at": "2014-04-24T21:41:09Z", "updated_at": "2014-04-24T21:41:09Z", "html_url": "https://github.com/libdynd/libdynd/pull/31#discussion_r11974121", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/31", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11974121"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/31#discussion_r11974121"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/31"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11974121/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11974139", "pull_request_review_id": null, "id": 11974139, "diff_hunk": "@@ -214,14 +218,276 @@ static bool try_view(const ndt::type &tp, const char *metadata,\n     }\n }\n \n+static void refine_bytes_view(memory_block_ptr &data_ref, char *&data_ptr,\n+                              ndt::type &data_tp, const char *&data_meta,\n+                              intptr_t &data_dim_size, intptr_t &data_stride)\n+{\n+    // Handle sequence of strided dims\n+    intptr_t dim_size, stride;\n+    ndt::type el_tp;\n+    const char *el_meta;\n+    if (data_tp.get_as_strided_dim(data_meta, dim_size, stride, el_tp,\n+                                   el_meta)) {\n+        dimvector shape(data_tp.get_ndim());\n+        dimvector strides(data_tp.get_ndim());\n+        intptr_t ndim = 1;\n+        shape[0] = dim_size;\n+        strides[0] = stride;\n+        bool csorted = true;\n+        // Get all the strided dimensions we can in a row\n+        while (el_tp.get_as_strided_dim(el_meta, dim_size, stride, el_tp,\n+                                        el_meta)) {\n+            shape[ndim] = dim_size;\n+            strides[ndim] = stride;\n+            if (stride > strides[ndim-1]) {\n+                csorted = false;\n+            }\n+            ++ndim;\n+        }\n+        if (!csorted) {\n+            // If the strides weren't sorted in C order, sort them\n+            shortvector<int> axis_perm(ndim);\n+            strides_to_axis_perm(ndim, strides.get(), axis_perm.get());\n+            dimvector shape_sorted(ndim);\n+            dimvector strides_sorted(ndim);\n+            for (intptr_t i = 0; i < ndim; ++i) {\n+                int i_perm = axis_perm[i];\n+                shape_sorted[ndim-i-1] = shape[i_perm];\n+                strides_sorted[ndim-i-1] = strides[i_perm];\n+            }\n+            shape.swap(shape_sorted);\n+            strides.swap(strides_sorted);\n+        }\n+        // Try to collapse the shape/strides into a single strided array\n+        intptr_t i = 0;\n+        while (data_dim_size == -1 && i < ndim) {\n+            // If there's not already a dim_size/stride, start one\n+            if (shape[i] != 1) {\n+                data_dim_size = shape[i];\n+                data_stride = strides[i];\n+                ++i;\n+            }\n+        }\n+        for (; i < ndim; ++i) {\n+            if (shape[i] != 1) {\n+                if (shape[i] * strides[i] != data_stride) {\n+                    // Indicate we couldn't view this as bytes\n+                    data_tp = ndt::type();\n+                    data_dim_size = -1;\n+                    return;\n+                }\n+                data_dim_size *= shape[i];\n+                data_stride = strides[i];\n+            }\n+        }\n+        data_tp = el_tp;\n+        data_meta = el_meta;\n+        return;\n+    }\n+\n+    switch (data_tp.get_type_id()) {\n+    case var_dim_type_id: {\n+        // We can only allow leading var_dim\n+        if (data_dim_size != -1) {\n+            break;\n+        }\n+        const var_dim_type_metadata *meta =\n+            reinterpret_cast<const var_dim_type_metadata *>(data_meta);\n+        if (meta->blockref != NULL) {\n+            data_ref = meta->blockref;\n+        }\n+        var_dim_type_data *d = reinterpret_cast<var_dim_type_data *>(data_ptr);\n+        data_ptr = d->begin + meta->offset;\n+        if (d->size != 1) {\n+            data_dim_size = d->size;\n+            data_stride = meta->stride;\n+        }\n+        data_tp = data_tp.tcast<var_dim_type>()->get_element_type();\n+        data_meta += sizeof(var_dim_type_metadata);\n+        return;\n+    }\n+    case pointer_type_id: {\n+        // We can only strip away leading pointers\n+        if (data_dim_size != -1) {\n+            break;\n+        }\n+        const pointer_type_metadata *meta =\n+            reinterpret_cast<const pointer_type_metadata *>(data_meta);\n+        if (meta->blockref != NULL) {\n+            data_ref = meta->blockref;\n+        }\n+        data_ptr = *reinterpret_cast<char **>(data_ptr) + meta->offset;\n+        data_tp = data_tp.tcast<pointer_type>()->get_target_type();\n+        data_meta += sizeof(pointer_type_metadata);\n+        return;\n+    }\n+    default:\n+        break;\n+    }\n+\n+    // If the data type has a fixed size, check if it fits the strides\n+    size_t data_tp_size = data_tp.get_data_size();\n+    if (data_tp_size > 0) {\n+        if (data_dim_size == -1) {\n+            // Indicate success (one item)\n+            data_tp = ndt::type();\n+            data_dim_size = data_tp_size;\n+            data_stride = 1;\n+            return;\n+        } else if ((intptr_t)data_tp_size == data_stride) {\n+            data_tp = ndt::type();\n+            data_dim_size *= data_tp_size;\n+            data_stride = 1;\n+            return;\n+        }\n+    }\n+\n+    // Indicate we couldn't view this as bytes\n+    data_tp = ndt::type();\n+    data_dim_size = -1;\n+}\n+\n+static nd::array view_as_bytes(const nd::array& arr, const ndt::type& tp)\n+{\n+    if (arr.get_type().get_flags()&type_flag_destructor) {\n+        // Can't view arrays of object type\n+        return nd::array();\n+    }\n+\n+    // Get the essential components of the array to analyze\n+    memory_block_ptr data_ref = arr.get_data_memblock();\n+    char *data_ptr = arr.get_ndo()->m_data_pointer;\n+    ndt::type data_tp = arr.get_type();\n+    const char *data_meta = arr.get_ndo_meta();\n+    intptr_t data_dim_size = -1, data_stride = 0;\n+    // Repeatedly refine the data\n+    while (data_tp.get_type_id() != uninitialized_type_id) {\n+        refine_bytes_view(data_ref, data_ptr, data_tp, data_meta, data_dim_size,\n+                          data_stride);\n+    }\n+    // Check that it worked, and that the resulting data pointer is aligned\n+    if (data_dim_size < 0 ||\n+            !offset_is_aligned(reinterpret_cast<size_t>(data_ptr),\n+                           tp.tcast<bytes_type>()->get_target_alignment())) {\n+        // This signals we could not view the data as a\n+        // contiguous chunk of bytes\n+        return nd::array();\n+    }\n+\n+    char *result_data_ptr = NULL;\n+    nd::array result(make_array_memory_block(\n+        tp.extended()->get_metadata_size(), tp.get_data_size(),\n+        tp.get_data_alignment(), &result_data_ptr));\n+    // Set the bytes extents\n+    ((char **)result_data_ptr)[0] = data_ptr;\n+    ((char **)result_data_ptr)[1] = data_ptr + data_dim_size;\n+    // Set the array metadata\n+    array_preamble *ndo = result.get_ndo();\n+    ndo->m_type = ndt::type(tp).release();\n+    ndo->m_data_pointer = result_data_ptr;\n+    ndo->m_data_reference = NULL;\n+    ndo->m_flags = arr.get_flags();\n+    // Set the bytes metadata\n+    bytes_type_metadata *ndo_meta =\n+        reinterpret_cast<bytes_type_metadata *>(result.get_ndo_meta());\n+    ndo_meta->blockref = data_ref.release();\n+    return result;\n+}\n+\n+static nd::array view_from_bytes(const nd::array &arr, const ndt::type &tp)\n+{\n+    if (tp.get_flags() & (type_flag_blockref | type_flag_destructor |\n+                          type_flag_not_host_readable)) {\n+        // Bytes cannot be viewed as blockref types, types which require\n+        // destruction, or types not on host memory.\n+        return nd::array();\n+    }\n+\n+    const bytes_type_metadata *bytes_meta =\n+        reinterpret_cast<const bytes_type_metadata *>(arr.get_ndo_meta());\n+    bytes_type_data *bytes_d =\n+        reinterpret_cast<bytes_type_data *>(arr.get_ndo()->m_data_pointer);\n+    memory_block_ptr data_ref;\n+    if (bytes_meta->blockref != NULL) {\n+        data_ref = bytes_meta->blockref;\n+    } else {\n+        data_ref = arr.get_data_memblock();\n+    }\n+    char *data_ptr = bytes_d->begin;\n+    intptr_t data_size = bytes_d->end - data_ptr;\n+\n+    size_t tp_data_size = tp.get_data_size();\n+    if (tp_data_size > 0) {\n+        // If the data type has a single chunk of POD memory, it's ok\n+        if ((intptr_t)tp_data_size == data_size &&\n+                offset_is_aligned(reinterpret_cast<size_t>(data_ptr),\n+                                  tp.get_data_alignment())) {\n+            // Allocate a result array to attempt the view in it\n+            nd::array result(make_array_memory_block(tp.get_metadata_size()));\n+            // Initialize the fields\n+            result.get_ndo()->m_data_pointer = data_ptr;\n+            result.get_ndo()->m_data_reference = data_ref.release();\n+            result.get_ndo()->m_type = ndt::type(tp).release();\n+            result.get_ndo()->m_flags = arr.get_ndo()->m_flags;\n+            if (tp.get_metadata_size() > 0) {\n+                tp.extended()->metadata_default_construct(result.get_ndo_meta(),\n+                                                          0, NULL);\n+            }\n+            return result;\n+        }\n+    } else if (tp.get_type_id() == strided_dim_type_id) {\n+        ndt::type el_tp = tp.tcast<strided_dim_type>()->get_element_type();\n+        size_t el_data_size = el_tp.get_data_size();\n+        // If the element type has a single chunk of POD memory, and\n+        // it divides into the memory size, it's ok\n+        if (data_size % (intptr_t)el_data_size == 0 &&\n+                offset_is_aligned(reinterpret_cast<size_t>(data_ptr),\n+                                  tp.get_data_alignment())) {\n+            // Allocate a result array to attempt the view in it\n+            nd::array result(make_array_memory_block(tp.get_metadata_size()));\n+            // Initialize the fields\n+            result.get_ndo()->m_data_pointer = data_ptr;\n+            result.get_ndo()->m_data_reference = data_ref.release();\n+            result.get_ndo()->m_type = ndt::type(tp).release();\n+            result.get_ndo()->m_flags = arr.get_ndo()->m_flags;\n+            if (el_tp.get_metadata_size() > 0) {\n+                el_tp.extended()->metadata_default_construct(\n+                    result.get_ndo_meta() + sizeof(strided_dim_type_metadata),\n+                    0, NULL);\n+            }\n+            strided_dim_type_metadata *strided_meta =\n+                reinterpret_cast<strided_dim_type_metadata *>(\n+                    result.get_ndo_meta());\n+            strided_meta->size = data_size / el_data_size;\n+            strided_meta->stride = el_data_size;\n+            return result;\n+        }\n+    }\n+\n+    // No view could be produced\n+    return nd::array();", "path": "src/dynd/view.cpp", "position": 262, "original_position": 262, "commit_id": "82dcdbe6091ca4c3a802b5f2b1b48c2234a8d3c3", "original_commit_id": "82dcdbe6091ca4c3a802b5f2b1b48c2234a8d3c3", "user": {"login": "talumbau", "id": 1891418, "avatar_url": "https://avatars1.githubusercontent.com/u/1891418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/talumbau", "html_url": "https://github.com/talumbau", "followers_url": "https://api.github.com/users/talumbau/followers", "following_url": "https://api.github.com/users/talumbau/following{/other_user}", "gists_url": "https://api.github.com/users/talumbau/gists{/gist_id}", "starred_url": "https://api.github.com/users/talumbau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/talumbau/subscriptions", "organizations_url": "https://api.github.com/users/talumbau/orgs", "repos_url": "https://api.github.com/users/talumbau/repos", "events_url": "https://api.github.com/users/talumbau/events{/privacy}", "received_events_url": "https://api.github.com/users/talumbau/received_events", "type": "User", "site_admin": false}, "body": "same as comment above.\n", "created_at": "2014-04-24T21:41:34Z", "updated_at": "2014-04-24T21:41:34Z", "html_url": "https://github.com/libdynd/libdynd/pull/31#discussion_r11974139", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/31", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11974139"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/31#discussion_r11974139"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/31"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11974139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11974720", "pull_request_review_id": null, "id": 11974720, "diff_hunk": "@@ -214,14 +218,276 @@ static bool try_view(const ndt::type &tp, const char *metadata,\n     }\n }\n \n+static void refine_bytes_view(memory_block_ptr &data_ref, char *&data_ptr,\n+                              ndt::type &data_tp, const char *&data_meta,\n+                              intptr_t &data_dim_size, intptr_t &data_stride)\n+{\n+    // Handle sequence of strided dims\n+    intptr_t dim_size, stride;\n+    ndt::type el_tp;\n+    const char *el_meta;\n+    if (data_tp.get_as_strided_dim(data_meta, dim_size, stride, el_tp,\n+                                   el_meta)) {\n+        dimvector shape(data_tp.get_ndim());\n+        dimvector strides(data_tp.get_ndim());\n+        intptr_t ndim = 1;\n+        shape[0] = dim_size;\n+        strides[0] = stride;\n+        bool csorted = true;\n+        // Get all the strided dimensions we can in a row\n+        while (el_tp.get_as_strided_dim(el_meta, dim_size, stride, el_tp,\n+                                        el_meta)) {\n+            shape[ndim] = dim_size;\n+            strides[ndim] = stride;\n+            if (stride > strides[ndim-1]) {\n+                csorted = false;\n+            }\n+            ++ndim;\n+        }\n+        if (!csorted) {\n+            // If the strides weren't sorted in C order, sort them\n+            shortvector<int> axis_perm(ndim);\n+            strides_to_axis_perm(ndim, strides.get(), axis_perm.get());\n+            dimvector shape_sorted(ndim);\n+            dimvector strides_sorted(ndim);\n+            for (intptr_t i = 0; i < ndim; ++i) {\n+                int i_perm = axis_perm[i];\n+                shape_sorted[ndim-i-1] = shape[i_perm];\n+                strides_sorted[ndim-i-1] = strides[i_perm];\n+            }\n+            shape.swap(shape_sorted);\n+            strides.swap(strides_sorted);\n+        }\n+        // Try to collapse the shape/strides into a single strided array\n+        intptr_t i = 0;\n+        while (data_dim_size == -1 && i < ndim) {\n+            // If there's not already a dim_size/stride, start one\n+            if (shape[i] != 1) {\n+                data_dim_size = shape[i];\n+                data_stride = strides[i];\n+                ++i;\n+            }\n+        }\n+        for (; i < ndim; ++i) {\n+            if (shape[i] != 1) {\n+                if (shape[i] * strides[i] != data_stride) {\n+                    // Indicate we couldn't view this as bytes\n+                    data_tp = ndt::type();\n+                    data_dim_size = -1;\n+                    return;\n+                }\n+                data_dim_size *= shape[i];\n+                data_stride = strides[i];\n+            }\n+        }\n+        data_tp = el_tp;\n+        data_meta = el_meta;\n+        return;\n+    }\n+\n+    switch (data_tp.get_type_id()) {\n+    case var_dim_type_id: {\n+        // We can only allow leading var_dim\n+        if (data_dim_size != -1) {\n+            break;\n+        }\n+        const var_dim_type_metadata *meta =\n+            reinterpret_cast<const var_dim_type_metadata *>(data_meta);\n+        if (meta->blockref != NULL) {\n+            data_ref = meta->blockref;\n+        }\n+        var_dim_type_data *d = reinterpret_cast<var_dim_type_data *>(data_ptr);\n+        data_ptr = d->begin + meta->offset;\n+        if (d->size != 1) {\n+            data_dim_size = d->size;\n+            data_stride = meta->stride;\n+        }\n+        data_tp = data_tp.tcast<var_dim_type>()->get_element_type();\n+        data_meta += sizeof(var_dim_type_metadata);\n+        return;\n+    }\n+    case pointer_type_id: {\n+        // We can only strip away leading pointers\n+        if (data_dim_size != -1) {\n+            break;\n+        }\n+        const pointer_type_metadata *meta =\n+            reinterpret_cast<const pointer_type_metadata *>(data_meta);\n+        if (meta->blockref != NULL) {\n+            data_ref = meta->blockref;\n+        }\n+        data_ptr = *reinterpret_cast<char **>(data_ptr) + meta->offset;\n+        data_tp = data_tp.tcast<pointer_type>()->get_target_type();\n+        data_meta += sizeof(pointer_type_metadata);\n+        return;\n+    }\n+    default:\n+        break;\n+    }\n+\n+    // If the data type has a fixed size, check if it fits the strides\n+    size_t data_tp_size = data_tp.get_data_size();\n+    if (data_tp_size > 0) {\n+        if (data_dim_size == -1) {\n+            // Indicate success (one item)\n+            data_tp = ndt::type();\n+            data_dim_size = data_tp_size;\n+            data_stride = 1;\n+            return;\n+        } else if ((intptr_t)data_tp_size == data_stride) {\n+            data_tp = ndt::type();\n+            data_dim_size *= data_tp_size;\n+            data_stride = 1;\n+            return;\n+        }\n+    }\n+\n+    // Indicate we couldn't view this as bytes\n+    data_tp = ndt::type();\n+    data_dim_size = -1;\n+}\n+\n+static nd::array view_as_bytes(const nd::array& arr, const ndt::type& tp)\n+{\n+    if (arr.get_type().get_flags()&type_flag_destructor) {\n+        // Can't view arrays of object type\n+        return nd::array();\n+    }\n+\n+    // Get the essential components of the array to analyze\n+    memory_block_ptr data_ref = arr.get_data_memblock();\n+    char *data_ptr = arr.get_ndo()->m_data_pointer;\n+    ndt::type data_tp = arr.get_type();\n+    const char *data_meta = arr.get_ndo_meta();\n+    intptr_t data_dim_size = -1, data_stride = 0;\n+    // Repeatedly refine the data\n+    while (data_tp.get_type_id() != uninitialized_type_id) {\n+        refine_bytes_view(data_ref, data_ptr, data_tp, data_meta, data_dim_size,\n+                          data_stride);\n+    }\n+    // Check that it worked, and that the resulting data pointer is aligned\n+    if (data_dim_size < 0 ||\n+            !offset_is_aligned(reinterpret_cast<size_t>(data_ptr),\n+                           tp.tcast<bytes_type>()->get_target_alignment())) {\n+        // This signals we could not view the data as a\n+        // contiguous chunk of bytes\n+        return nd::array();", "path": "src/dynd/view.cpp", "position": 168, "original_position": 168, "commit_id": "82dcdbe6091ca4c3a802b5f2b1b48c2234a8d3c3", "original_commit_id": "82dcdbe6091ca4c3a802b5f2b1b48c2234a8d3c3", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "Yeah, it returns an empty array which the view() function sees and raises an exception, so this does not escape.\n", "created_at": "2014-04-24T21:54:49Z", "updated_at": "2014-04-24T21:54:49Z", "html_url": "https://github.com/libdynd/libdynd/pull/31#discussion_r11974720", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/31", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11974720"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/31#discussion_r11974720"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/31"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/11974720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/12380951", "pull_request_review_id": null, "id": 12380951, "diff_hunk": "@@ -34,6 +35,129 @@ bool parse::parse_alpha_name_no_ws(const char *&begin, const char *end,\n     return true;\n }\n \n+bool parse::parse_doublequote_string_no_ws(const char *&rbegin, const char *end,\n+                                           const char *&out_strbegin,\n+                                           const char *&out_strend,\n+                                           bool &out_escaped)\n+{\n+    bool escaped = false;\n+    const char *begin = rbegin;\n+    if (!parse_token_no_ws(begin, end, '\\\"')) {\n+        return false;\n+    }\n+    for (;;) {\n+        if (begin == end) {\n+            throw parse::parse_error(rbegin, \"string has no ending quote\");\n+        }\n+        char c = *begin++;\n+        if (c == '\\\\') {\n+            escaped = true;\n+            if (begin == end) {\n+                throw parse::parse_error(rbegin, \"string has no ending quote\");\n+            }\n+            c = *begin++;\n+            switch (c) {\n+                case '\"':\n+                case '\\\\':\n+                case '/':\n+                case 'b':\n+                case 'f':\n+                case 'n':\n+                case 'r':\n+                case 't':\n+                    break;\n+                case 'u': {\n+                    if (end - begin < 4) {\n+                        throw parse::parse_error(begin-2, \"invalid unicode escape sequence in string\");\n+                    }\n+                    uint32_t cp = 0;\n+                    for (int i = 0; i < 4; ++i) {\n+                        char c = *begin++;\n+                        if (!(('0' <= c && c <= '9') ||\n+                              ('A' <= c && c <= 'F') ||\n+                              ('a' <= c && c <= 'f'))) {\n+                            throw parse::parse_error(\n+                                begin - 1,\n+                                \"invalid unicode escape sequence in string\");\n+                        }\n+                    }\n+                    break;\n+                }\n+                default:\n+                    throw parse::parse_error(begin-2, \"invalid escape sequence in string\");\n+            }\n+        } else if (c == '\"') {\n+            out_strbegin = rbegin + 1;\n+            out_strend = begin - 1;\n+            out_escaped = escaped;\n+            rbegin = begin;\n+            return true;\n+        }\n+    }\n+}\n+\n+void parse::unescape_string(const char *strbegin, const char *strend,\n+                     std::string &out)\n+{\n+    out.resize(0);", "path": "src/dynd/parser_util.cpp", "position": 75, "original_position": 76, "commit_id": "63bdb97ebcef9d5fe6d8c434761654258d4dd0d2", "original_commit_id": "1a9b7d465d1f00fdcab68a2bf25cfa811fd3b9fa", "user": {"login": "talumbau", "id": 1891418, "avatar_url": "https://avatars1.githubusercontent.com/u/1891418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/talumbau", "html_url": "https://github.com/talumbau", "followers_url": "https://api.github.com/users/talumbau/followers", "following_url": "https://api.github.com/users/talumbau/following{/other_user}", "gists_url": "https://api.github.com/users/talumbau/gists{/gist_id}", "starred_url": "https://api.github.com/users/talumbau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/talumbau/subscriptions", "organizations_url": "https://api.github.com/users/talumbau/orgs", "repos_url": "https://api.github.com/users/talumbau/repos", "events_url": "https://api.github.com/users/talumbau/events{/privacy}", "received_events_url": "https://api.github.com/users/talumbau/received_events", "type": "User", "site_admin": false}, "body": "So, is this where you achieve avoiding dynamic string creation? In the old code, you had something like:\n\n```\n out = \"\";\n```\n\nwhich I believe our dutiful compiler would make into something like\n\n```\nout.operator=( std::string(\"\"));\n```\n\nyes?\n", "created_at": "2014-05-07T14:50:58Z", "updated_at": "2014-05-07T18:56:24Z", "html_url": "https://github.com/libdynd/libdynd/pull/36#discussion_r12380951", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/36", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/12380951"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/36#discussion_r12380951"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/36"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/12380951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/12381420", "pull_request_review_id": null, "id": 12381420, "diff_hunk": "@@ -15,6 +15,23 @@ using namespace dynd;\n base_struct_type::~base_struct_type() {\n }\n \n+intptr_t base_struct_type::get_field_index(const char *field_index_begin,\n+                                           const char *field_index_end) const\n+{\n+    intptr_t size = field_index_end - field_index_begin;", "path": "src/dynd/types/base_struct_type.cpp", "position": null, "original_position": 7, "commit_id": "63bdb97ebcef9d5fe6d8c434761654258d4dd0d2", "original_commit_id": "1a9b7d465d1f00fdcab68a2bf25cfa811fd3b9fa", "user": {"login": "talumbau", "id": 1891418, "avatar_url": "https://avatars1.githubusercontent.com/u/1891418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/talumbau", "html_url": "https://github.com/talumbau", "followers_url": "https://api.github.com/users/talumbau/followers", "following_url": "https://api.github.com/users/talumbau/following{/other_user}", "gists_url": "https://api.github.com/users/talumbau/gists{/gist_id}", "starred_url": "https://api.github.com/users/talumbau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/talumbau/subscriptions", "organizations_url": "https://api.github.com/users/talumbau/orgs", "repos_url": "https://api.github.com/users/talumbau/repos", "events_url": "https://api.github.com/users/talumbau/events{/privacy}", "received_events_url": "https://api.github.com/users/talumbau/received_events", "type": "User", "site_admin": false}, "body": "At first I thought that clang/gcc were just being pedantic, but now I wonder if this is legit. Could size here be negative under some pathological condition? If so, the warning about comparing signed and unsigned is good.\n", "created_at": "2014-05-07T14:57:44Z", "updated_at": "2014-05-07T18:56:24Z", "html_url": "https://github.com/libdynd/libdynd/pull/36#discussion_r12381420", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/36", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/12381420"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/36#discussion_r12381420"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/36"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/12381420/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/12381566", "pull_request_review_id": null, "id": 12381566, "diff_hunk": "@@ -34,6 +35,129 @@ bool parse::parse_alpha_name_no_ws(const char *&begin, const char *end,\n     return true;\n }\n \n+bool parse::parse_doublequote_string_no_ws(const char *&rbegin, const char *end,\n+                                           const char *&out_strbegin,\n+                                           const char *&out_strend,\n+                                           bool &out_escaped)\n+{\n+    bool escaped = false;\n+    const char *begin = rbegin;\n+    if (!parse_token_no_ws(begin, end, '\\\"')) {\n+        return false;\n+    }\n+    for (;;) {\n+        if (begin == end) {\n+            throw parse::parse_error(rbegin, \"string has no ending quote\");\n+        }\n+        char c = *begin++;\n+        if (c == '\\\\') {\n+            escaped = true;\n+            if (begin == end) {\n+                throw parse::parse_error(rbegin, \"string has no ending quote\");\n+            }\n+            c = *begin++;\n+            switch (c) {\n+                case '\"':\n+                case '\\\\':\n+                case '/':\n+                case 'b':\n+                case 'f':\n+                case 'n':\n+                case 'r':\n+                case 't':\n+                    break;\n+                case 'u': {\n+                    if (end - begin < 4) {\n+                        throw parse::parse_error(begin-2, \"invalid unicode escape sequence in string\");\n+                    }\n+                    uint32_t cp = 0;\n+                    for (int i = 0; i < 4; ++i) {\n+                        char c = *begin++;\n+                        if (!(('0' <= c && c <= '9') ||\n+                              ('A' <= c && c <= 'F') ||\n+                              ('a' <= c && c <= 'f'))) {\n+                            throw parse::parse_error(\n+                                begin - 1,\n+                                \"invalid unicode escape sequence in string\");\n+                        }\n+                    }\n+                    break;\n+                }\n+                default:\n+                    throw parse::parse_error(begin-2, \"invalid escape sequence in string\");\n+            }\n+        } else if (c == '\"') {\n+            out_strbegin = rbegin + 1;\n+            out_strend = begin - 1;\n+            out_escaped = escaped;\n+            rbegin = begin;\n+            return true;\n+        }\n+    }\n+}\n+\n+void parse::unescape_string(const char *strbegin, const char *strend,\n+                     std::string &out)\n+{\n+    out.resize(0);", "path": "src/dynd/parser_util.cpp", "position": 75, "original_position": 76, "commit_id": "63bdb97ebcef9d5fe6d8c434761654258d4dd0d2", "original_commit_id": "1a9b7d465d1f00fdcab68a2bf25cfa811fd3b9fa", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "This change probably has almost no perceivable effect, the gains are from the common case of not having to call unescape_string at all, and the data being used in place as a string directly from the input buffer.\n", "created_at": "2014-05-07T15:00:10Z", "updated_at": "2014-05-07T18:56:24Z", "html_url": "https://github.com/libdynd/libdynd/pull/36#discussion_r12381566", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/36", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/12381566"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/36#discussion_r12381566"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/36"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/12381566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/12381685", "pull_request_review_id": null, "id": 12381685, "diff_hunk": "@@ -15,6 +15,23 @@ using namespace dynd;\n base_struct_type::~base_struct_type() {\n }\n \n+intptr_t base_struct_type::get_field_index(const char *field_index_begin,\n+                                           const char *field_index_end) const\n+{\n+    intptr_t size = field_index_end - field_index_begin;", "path": "src/dynd/types/base_struct_type.cpp", "position": null, "original_position": 7, "commit_id": "63bdb97ebcef9d5fe6d8c434761654258d4dd0d2", "original_commit_id": "1a9b7d465d1f00fdcab68a2bf25cfa811fd3b9fa", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "From just the types, yes it could be negative, but in practice it shouldn't be here. The compiler I'm developing with isn't pedantic about this particular thing, that's why these warnings slip in from my code.\n", "created_at": "2014-05-07T15:01:49Z", "updated_at": "2014-05-07T18:56:24Z", "html_url": "https://github.com/libdynd/libdynd/pull/36#discussion_r12381685", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/36", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/12381685"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/36#discussion_r12381685"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/36"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/12381685/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/12594926", "pull_request_review_id": null, "id": 12594926, "diff_hunk": "@@ -0,0 +1,181 @@\n+//\n+// Copyright (C) 2011-14 Mark Wiebe, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#include <dynd/types/funcproto_type.hpp>\n+#include <dynd/gfunc/make_callable.hpp>\n+\n+using namespace std;\n+using namespace dynd;\n+\n+funcproto_type::funcproto_type(size_t param_count, const ndt::type *param_types,\n+                               const ndt::type &return_type)\n+    : base_type(funcproto_type_id, symbolic_kind, 0, 1, type_flag_none, 0, 0),\n+      m_param_types(param_types, param_types + param_count),\n+      m_return_type(return_type)\n+{\n+}\n+\n+void funcproto_type::print_data(std::ostream &DYND_UNUSED(o),\n+                                const char *DYND_UNUSED(metadata),\n+                                const char *DYND_UNUSED(data)) const\n+{\n+    throw type_error(\"Cannot store data of funcproto type\");\n+}\n+\n+void funcproto_type::print_type(std::ostream& o) const\n+{\n+    // Use the function prototype datashape syntax\n+    o << \"(\";\n+    for (size_t i = 0, i_end = m_param_types.size(); i != i_end; ++i) {\n+        if (i != 0) {\n+            o << \", \";\n+        }\n+        o << m_param_types[i];\n+    }\n+    o << \") -> \" << m_return_type;\n+}\n+\n+void funcproto_type::transform_child_types(type_transform_fn_t transform_fn, void *extra,\n+                ndt::type& out_transformed_tp, bool& out_was_transformed) const\n+{\n+    std::vector<ndt::type> tmp_param_types(m_param_types.size());\n+    ndt::type tmp_return_type;\n+\n+    bool was_transformed = false;\n+    for (size_t i = 0, i_end = m_param_types.size(); i != i_end; ++i) {\n+        transform_fn(m_param_types[i], extra, tmp_param_types[i], was_transformed);\n+    }\n+    transform_fn(m_return_type, extra, tmp_return_type, was_transformed);\n+    if (was_transformed) {\n+        out_transformed_tp = ndt::make_funcproto(\n+            tmp_param_types.size(),\n+            tmp_param_types.empty() ? NULL : &tmp_param_types[0],\n+            tmp_return_type);\n+        out_was_transformed = true;\n+    } else {\n+        out_transformed_tp = ndt::type(this, true);\n+    }\n+}\n+\n+ndt::type funcproto_type::get_canonical_type() const\n+{\n+    std::vector<ndt::type> param_types(m_param_types.size());\n+    ndt::type return_type;\n+\n+    for (size_t i = 0, i_end = m_param_types.size(); i != i_end; ++i) {\n+        param_types[i] = m_param_types[i].get_canonical_type();\n+    }\n+    return_type = m_return_type.get_canonical_type();\n+\n+    return ndt::make_funcproto(param_types.size(),\n+                               param_types.empty() ? NULL : &param_types[0],\n+                               return_type);\n+}\n+\n+ndt::type funcproto_type::apply_linear_index(\n+    intptr_t DYND_UNUSED(nindices), const irange *DYND_UNUSED(indices),\n+    size_t DYND_UNUSED(current_i), const ndt::type &DYND_UNUSED(root_tp),\n+    bool DYND_UNUSED(leading_dimension)) const\n+{\n+    throw type_error(\"Cannot store data of funcproto type\");\n+}\n+\n+intptr_t funcproto_type::apply_linear_index(\n+    intptr_t DYND_UNUSED(nindices), const irange *DYND_UNUSED(indices),\n+    const char *DYND_UNUSED(metadata), const ndt::type &DYND_UNUSED(result_tp),\n+    char *DYND_UNUSED(out_metadata), memory_block_data *DYND_UNUSED(embedded_reference), size_t DYND_UNUSED(current_i),\n+    const ndt::type &DYND_UNUSED(root_tp), bool DYND_UNUSED(leading_dimension), char **DYND_UNUSED(inout_data),\n+    memory_block_data **DYND_UNUSED(inout_dataref)) const\n+{\n+    throw type_error(\"Cannot store data of funcproto type\");\n+}\n+\n+bool funcproto_type::is_lossless_assignment(const ndt::type& dst_tp, const ndt::type& src_tp) const\n+{\n+    if (dst_tp.extended() == this) {\n+        if (src_tp.extended() == this) {\n+            return true;\n+        } else if (src_tp.get_type_id() == funcproto_type_id) {\n+            return *dst_tp.extended() == *src_tp.extended();\n+        }\n+    }\n+\n+    return false;\n+}\n+\n+/*\n+size_t funcproto_type::make_assignment_kernel(\n+                ckernel_builder *DYND_UNUSED(out_ckb), size_t DYND_UNUSED(ckb_offset),\n+                const ndt::type& dst_tp, const char *DYND_UNUSED(dst_metadata),\n+                const ndt::type& src_tp, const char *DYND_UNUSED(src_metadata),\n+                kernel_request_t DYND_UNUSED(kernreq), assign_error_mode DYND_UNUSED(errmode),\n+                const eval::eval_context *DYND_UNUSED(ectx)) const\n+{\n+    throw type_error(\"Cannot store data of funcproto type\");\n+}\n+\n+size_t funcproto_type::make_comparison_kernel(\n+                ckernel_builder *DYND_UNUSED(out), size_t DYND_UNUSED(offset_out),\n+                const ndt::type& src0_tp, const char *DYND_UNUSED(src0_metadata),\n+                const ndt::type& src1_tp, const char *DYND_UNUSED(src1_metadata),\n+                comparison_type_t comptype,\n+                const eval::eval_context *DYND_UNUSED(ectx)) const\n+{\n+    throw type_error(\"Cannot store data of funcproto type\");\n+}\n+*/\n+\n+bool funcproto_type::operator==(const base_type& rhs) const\n+{\n+    if (this == &rhs) {\n+        return true;\n+    } else if (rhs.get_type_id() != funcproto_type_id) {\n+        return false;\n+    } else {\n+        const funcproto_type *fpt = static_cast<const funcproto_type *>(&rhs);\n+        return m_param_types == fpt->m_param_types && m_return_type == fpt->m_return_type;\n+    }\n+}\n+\n+void funcproto_type::metadata_default_construct(\n+    char *DYND_UNUSED(metadata), intptr_t DYND_UNUSED(ndim),\n+    const intptr_t *DYND_UNUSED(shape)) const\n+{\n+    throw type_error(\"Cannot store data of funcproto type\");\n+}\n+\n+void funcproto_type::metadata_copy_construct(\n+    char *DYND_UNUSED(dst_metadata), const char *DYND_UNUSED(src_metadata),\n+    memory_block_data *DYND_UNUSED(embedded_reference)) const\n+{\n+    throw type_error(\"Cannot store data of funcproto type\");\n+}\n+\n+void funcproto_type::metadata_destruct(char *DYND_UNUSED(metadata)) const\n+{\n+    throw type_error(\"Cannot store data of funcproto type\");\n+}\n+\n+static nd::array property_get_param_types(const ndt::type& dt) {\n+    const funcproto_type *d = dt.tcast<funcproto_type>();\n+    // TODO: This property should be an immutable nd::array, which we would just return.\n+    return nd::array(d->get_param_types_vector());\n+}\n+\n+static nd::array property_get_return_type(const ndt::type& dt) {\n+    const funcproto_type *d = dt.tcast<funcproto_type>();\n+    return nd::array(d->get_return_type());\n+}\n+\n+static pair<string, gfunc::callable> type_properties[] = {\n+    pair<string, gfunc::callable>(\"param_types\", gfunc::make_callable(&property_get_param_types, \"self\")),\n+    pair<string, gfunc::callable>(\"return_type\", gfunc::make_callable(&property_get_return_type, \"self\"))\n+};\n+\n+void funcproto_type::get_dynamic_type_properties(const std::pair<std::string, gfunc::callable> **out_properties, size_t *out_count) const", "path": "src/dynd/types/funcproto_type.cpp", "position": 177, "original_position": 177, "commit_id": "2f65dca30dba232770601f9a595578a71ceda7e5", "original_commit_id": "ff214ccea218b541277fe8ccb4c9b43337969477", "user": {"login": "talumbau", "id": 1891418, "avatar_url": "https://avatars1.githubusercontent.com/u/1891418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/talumbau", "html_url": "https://github.com/talumbau", "followers_url": "https://api.github.com/users/talumbau/followers", "following_url": "https://api.github.com/users/talumbau/following{/other_user}", "gists_url": "https://api.github.com/users/talumbau/gists{/gist_id}", "starred_url": "https://api.github.com/users/talumbau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/talumbau/subscriptions", "organizations_url": "https://api.github.com/users/talumbau/orgs", "repos_url": "https://api.github.com/users/talumbau/repos", "events_url": "https://api.github.com/users/talumbau/events{/privacy}", "received_events_url": "https://api.github.com/users/talumbau/received_events", "type": "User", "site_admin": false}, "body": "would like to see a unit test around this function\n", "created_at": "2014-05-13T17:04:53Z", "updated_at": "2014-05-13T18:21:12Z", "html_url": "https://github.com/libdynd/libdynd/pull/42#discussion_r12594926", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/42", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/12594926"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/42#discussion_r12594926"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/42"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/12594926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/12595531", "pull_request_review_id": null, "id": 12595531, "diff_hunk": "@@ -0,0 +1,140 @@\n+//\n+// Copyright (C) 2011-14 Mark Wiebe, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#include <dynd/types/typevar_dim_type.hpp>\n+#include <dynd/types/typevar_type.hpp>\n+#include <dynd/gfunc/make_callable.hpp>\n+\n+using namespace std;\n+using namespace dynd;\n+\n+typevar_dim_type::typevar_dim_type(const nd::string &name,\n+                                   const ndt::type &element_type)\n+    : base_uniform_dim_type(typevar_dim_type_id, element_type, 0, 1, 0, type_flag_none),\n+      m_name(name)\n+{\n+    if (m_name.is_null()) {\n+        throw type_error(\"dynd typevar name cannot be null\");\n+    } else if(!is_valid_typevar_name(m_name.begin(), m_name.end())) {\n+        stringstream ss;\n+        ss << \"dynd typevar name \\\"\";\n+        print_escaped_utf8_string(ss, m_name.begin(), m_name.end());\n+        ss << \"\\\" is not valid, it must be alphanumeric and begin with a capital\";\n+        throw type_error(ss.str());\n+    }\n+}\n+\n+void typevar_dim_type::print_data(std::ostream &DYND_UNUSED(o),\n+                                const char *DYND_UNUSED(metadata),\n+                                const char *DYND_UNUSED(data)) const\n+{\n+    throw type_error(\"Cannot store data of typevar type\");\n+}\n+\n+void typevar_dim_type::print_type(std::ostream& o) const\n+{\n+    // Type variables are barewords starting with a capital letter\n+    o << m_name.str() << \" * \" << get_element_type();\n+}\n+\n+ndt::type typevar_dim_type::apply_linear_index(\n+    intptr_t DYND_UNUSED(nindices), const irange *DYND_UNUSED(indices),\n+    size_t DYND_UNUSED(current_i), const ndt::type &DYND_UNUSED(root_tp),\n+    bool DYND_UNUSED(leading_dimension)) const\n+{\n+    throw type_error(\"Cannot store data of typevar type\");\n+}\n+\n+intptr_t typevar_dim_type::apply_linear_index(\n+    intptr_t DYND_UNUSED(nindices), const irange *DYND_UNUSED(indices),\n+    const char *DYND_UNUSED(metadata), const ndt::type &DYND_UNUSED(result_tp),\n+    char *DYND_UNUSED(out_metadata), memory_block_data *DYND_UNUSED(embedded_reference), size_t DYND_UNUSED(current_i),\n+    const ndt::type &DYND_UNUSED(root_tp), bool DYND_UNUSED(leading_dimension), char **DYND_UNUSED(inout_data),\n+    memory_block_data **DYND_UNUSED(inout_dataref)) const\n+{\n+    throw type_error(\"Cannot store data of typevar type\");\n+}\n+\n+intptr_t typevar_dim_type::get_dim_size(const char *DYND_UNUSED(metadata),\n+                                        const char *DYND_UNUSED(data)) const\n+{\n+    return -1;\n+}\n+\n+bool typevar_dim_type::is_lossless_assignment(const ndt::type& dst_tp, const ndt::type& src_tp) const\n+{\n+    if (dst_tp.extended() == this) {\n+        if (src_tp.extended() == this) {\n+            return true;\n+        } else if (src_tp.get_type_id() == typevar_dim_type_id) {\n+            return *dst_tp.extended() == *src_tp.extended();\n+        }\n+    }\n+\n+    return false;\n+}\n+\n+bool typevar_dim_type::operator==(const base_type& rhs) const\n+{\n+    if (this == &rhs) {\n+        return true;\n+    } else if (rhs.get_type_id() != typevar_dim_type_id) {\n+        return false;\n+    } else {\n+        const typevar_dim_type *tvt =\n+            static_cast<const typevar_dim_type *>(&rhs);\n+        return m_name == tvt->m_name &&\n+               m_element_tp == tvt->m_element_tp;\n+    }\n+}\n+\n+void typevar_dim_type::metadata_default_construct(\n+    char *DYND_UNUSED(metadata), intptr_t DYND_UNUSED(ndim),\n+    const intptr_t *DYND_UNUSED(shape)) const\n+{\n+    throw type_error(\"Cannot store data of typevar type\");\n+}\n+\n+void typevar_dim_type::metadata_copy_construct(\n+    char *DYND_UNUSED(dst_metadata), const char *DYND_UNUSED(src_metadata),\n+    memory_block_data *DYND_UNUSED(embedded_reference)) const\n+{\n+    throw type_error(\"Cannot store data of typevar type\");\n+}\n+\n+size_t typevar_dim_type::metadata_copy_construct_onedim(\n+    char *DYND_UNUSED(dst_metadata), const char *DYND_UNUSED(src_metadata),\n+    memory_block_data *DYND_UNUSED(embedded_reference)) const\n+{\n+    throw type_error(\"Cannot store data of typevar type\");\n+}\n+\n+void typevar_dim_type::metadata_destruct(char *DYND_UNUSED(metadata)) const\n+{\n+    throw type_error(\"Cannot store data of typevar type\");\n+}\n+\n+static nd::array property_get_name(const ndt::type& tp) {\n+    return tp.tcast<typevar_dim_type>()->get_name();\n+}\n+\n+static ndt::type property_get_element_type(const ndt::type& dt) {\n+    return dt.tcast<typevar_dim_type>()->get_element_type();\n+}\n+\n+static pair<string, gfunc::callable> type_properties[] = {\n+    pair<string, gfunc::callable>(\n+        \"name\", gfunc::make_callable(&property_get_name, \"self\")),\n+    pair<string, gfunc::callable>(\n+        \"element_type\",\n+        gfunc::make_callable(&property_get_element_type, \"self\")), };\n+\n+void typevar_dim_type::get_dynamic_type_properties(", "path": "src/dynd/types/typevar_dim_type.cpp", "position": 134, "original_position": 134, "commit_id": "2f65dca30dba232770601f9a595578a71ceda7e5", "original_commit_id": "ff214ccea218b541277fe8ccb4c9b43337969477", "user": {"login": "talumbau", "id": 1891418, "avatar_url": "https://avatars1.githubusercontent.com/u/1891418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/talumbau", "html_url": "https://github.com/talumbau", "followers_url": "https://api.github.com/users/talumbau/followers", "following_url": "https://api.github.com/users/talumbau/following{/other_user}", "gists_url": "https://api.github.com/users/talumbau/gists{/gist_id}", "starred_url": "https://api.github.com/users/talumbau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/talumbau/subscriptions", "organizations_url": "https://api.github.com/users/talumbau/orgs", "repos_url": "https://api.github.com/users/talumbau/repos", "events_url": "https://api.github.com/users/talumbau/events{/privacy}", "received_events_url": "https://api.github.com/users/talumbau/received_events", "type": "User", "site_admin": false}, "body": "would like to see unit test for this\n", "created_at": "2014-05-13T17:16:16Z", "updated_at": "2014-05-13T18:21:12Z", "html_url": "https://github.com/libdynd/libdynd/pull/42#discussion_r12595531", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/42", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/12595531"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/42#discussion_r12595531"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/42"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/12595531/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/12595761", "pull_request_review_id": null, "id": 12595761, "diff_hunk": "@@ -0,0 +1,135 @@\n+//\n+// Copyright (C) 2011-14 Mark Wiebe, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#include <dynd/types/typevar_type.hpp>\n+#include <dynd/gfunc/make_callable.hpp>\n+\n+using namespace std;\n+using namespace dynd;\n+\n+typevar_type::typevar_type(const nd::string& name)\n+    : base_type(typevar_type_id, symbolic_kind, 0, 1, type_flag_none, 0, 0),\n+      m_name(name)\n+{\n+    if (m_name.is_null()) {\n+        throw type_error(\"dynd typevar name cannot be null\");\n+    } else if(!is_valid_typevar_name(m_name.begin(), m_name.end())) {\n+        stringstream ss;\n+        ss << \"dynd typevar name \\\"\";\n+        print_escaped_utf8_string(ss, m_name.begin(), m_name.end());\n+        ss << \"\\\" is not valid, it must be alphanumeric and begin with a capital\";\n+        throw type_error(ss.str());\n+    }\n+}\n+\n+void typevar_type::print_data(std::ostream &DYND_UNUSED(o),\n+                                const char *DYND_UNUSED(metadata),\n+                                const char *DYND_UNUSED(data)) const\n+{\n+    throw type_error(\"Cannot store data of typevar type\");\n+}\n+\n+void typevar_type::print_type(std::ostream& o) const\n+{\n+    // Type variables are barewords starting with a capital letter\n+    o << m_name.str();\n+}\n+\n+ndt::type typevar_type::apply_linear_index(\n+    intptr_t DYND_UNUSED(nindices), const irange *DYND_UNUSED(indices),\n+    size_t DYND_UNUSED(current_i), const ndt::type &DYND_UNUSED(root_tp),\n+    bool DYND_UNUSED(leading_dimension)) const\n+{\n+    throw type_error(\"Cannot store data of typevar type\");\n+}\n+\n+intptr_t typevar_type::apply_linear_index(\n+    intptr_t DYND_UNUSED(nindices), const irange *DYND_UNUSED(indices),\n+    const char *DYND_UNUSED(metadata), const ndt::type &DYND_UNUSED(result_tp),\n+    char *DYND_UNUSED(out_metadata), memory_block_data *DYND_UNUSED(embedded_reference), size_t DYND_UNUSED(current_i),\n+    const ndt::type &DYND_UNUSED(root_tp), bool DYND_UNUSED(leading_dimension), char **DYND_UNUSED(inout_data),\n+    memory_block_data **DYND_UNUSED(inout_dataref)) const\n+{\n+    throw type_error(\"Cannot store data of typevar type\");\n+}\n+\n+bool typevar_type::is_lossless_assignment(const ndt::type& dst_tp, const ndt::type& src_tp) const\n+{\n+    if (dst_tp.extended() == this) {\n+        if (src_tp.extended() == this) {\n+            return true;\n+        } else if (src_tp.get_type_id() == typevar_type_id) {\n+            return *dst_tp.extended() == *src_tp.extended();\n+        }\n+    }\n+\n+    return false;\n+}\n+\n+bool typevar_type::operator==(const base_type& rhs) const\n+{\n+    if (this == &rhs) {\n+        return true;\n+    } else if (rhs.get_type_id() != typevar_type_id) {\n+        return false;\n+    } else {\n+        const typevar_type *tvt = static_cast<const typevar_type *>(&rhs);\n+        return m_name == tvt->m_name;\n+    }\n+}\n+\n+void typevar_type::metadata_default_construct(\n+    char *DYND_UNUSED(metadata), intptr_t DYND_UNUSED(ndim),\n+    const intptr_t *DYND_UNUSED(shape)) const\n+{\n+    throw type_error(\"Cannot store data of typevar type\");\n+}\n+\n+void typevar_type::metadata_copy_construct(\n+    char *DYND_UNUSED(dst_metadata), const char *DYND_UNUSED(src_metadata),\n+    memory_block_data *DYND_UNUSED(embedded_reference)) const\n+{\n+    throw type_error(\"Cannot store data of typevar type\");\n+}\n+\n+void typevar_type::metadata_destruct(char *DYND_UNUSED(metadata)) const\n+{\n+    throw type_error(\"Cannot store data of typevar type\");\n+}\n+\n+static nd::array property_get_name(const ndt::type& tp) {\n+    return tp.tcast<typevar_type>()->get_name();\n+}\n+\n+static pair<string, gfunc::callable> type_properties[] = {\n+    pair<string, gfunc::callable>(\"name\", gfunc::make_callable(&property_get_name, \"self\")),\n+};\n+\n+void typevar_type::get_dynamic_type_properties(const std::pair<std::string, gfunc::callable> **out_properties, size_t *out_count) const", "path": "src/dynd/types/typevar_type.cpp", "position": 110, "original_position": 110, "commit_id": "2f65dca30dba232770601f9a595578a71ceda7e5", "original_commit_id": "ff214ccea218b541277fe8ccb4c9b43337969477", "user": {"login": "talumbau", "id": 1891418, "avatar_url": "https://avatars1.githubusercontent.com/u/1891418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/talumbau", "html_url": "https://github.com/talumbau", "followers_url": "https://api.github.com/users/talumbau/followers", "following_url": "https://api.github.com/users/talumbau/following{/other_user}", "gists_url": "https://api.github.com/users/talumbau/gists{/gist_id}", "starred_url": "https://api.github.com/users/talumbau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/talumbau/subscriptions", "organizations_url": "https://api.github.com/users/talumbau/orgs", "repos_url": "https://api.github.com/users/talumbau/repos", "events_url": "https://api.github.com/users/talumbau/events{/privacy}", "received_events_url": "https://api.github.com/users/talumbau/received_events", "type": "User", "site_admin": false}, "body": "unit test?\n", "created_at": "2014-05-13T17:20:41Z", "updated_at": "2014-05-13T18:21:12Z", "html_url": "https://github.com/libdynd/libdynd/pull/42#discussion_r12595761", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/42", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/12595761"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/42#discussion_r12595761"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/42"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/12595761/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/12595972", "pull_request_review_id": null, "id": 12595972, "diff_hunk": "@@ -0,0 +1,78 @@\n+//\n+// Copyright (C) 2011-14 Mark Wiebe, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#ifndef _DYND__TYPEVAR_DIM_TYPE_HPP_\n+#define _DYND__TYPEVAR_DIM_TYPE_HPP_\n+\n+#include <vector>\n+#include <string>\n+\n+#include <dynd/array.hpp>\n+#include <dynd/string.hpp>\n+#include <dynd/types/base_uniform_dim_type.hpp>\n+\n+namespace dynd {\n+\n+class typevar_dim_type : public base_uniform_dim_type {\n+    nd::string m_name;\n+\n+public:\n+    typevar_dim_type(const nd::string &name, const ndt::type &element_type);\n+\n+    virtual ~typevar_dim_type() {}\n+\n+    inline const nd::string& get_name() const {\n+        return m_name;\n+    }\n+\n+    inline std::string get_name_str() const {\n+        return m_name.str();\n+    }\n+\n+    void print_data(std::ostream& o, const char *metadata, const char *data) const;\n+\n+    void print_type(std::ostream& o) const;\n+\n+    ndt::type apply_linear_index(intptr_t nindices, const irange *indices,\n+                size_t current_i, const ndt::type& root_tp, bool leading_dimension) const;\n+    intptr_t apply_linear_index(intptr_t nindices, const irange *indices, const char *metadata,\n+                    const ndt::type& result_tp, char *out_metadata,\n+                    memory_block_data *embedded_reference,\n+                    size_t current_i, const ndt::type& root_tp,\n+                    bool leading_dimension, char **inout_data,\n+                    memory_block_data **inout_dataref) const;\n+\n+    intptr_t get_dim_size(const char *metadata, const char *data) const;\n+\n+    bool is_lossless_assignment(const ndt::type& dst_tp, const ndt::type& src_tp) const;\n+\n+    bool operator==(const base_type& rhs) const;\n+\n+    void metadata_default_construct(char *metadata, intptr_t ndim,\n+                                    const intptr_t *shape) const;\n+    void metadata_copy_construct(char *dst_metadata, const char *src_metadata,\n+                                 memory_block_data *embedded_reference) const;\n+    size_t\n+    metadata_copy_construct_onedim(char *dst_metadata, const char *src_metadata,\n+                                   memory_block_data *embedded_reference) const;\n+    void metadata_destruct(char *metadata) const;\n+\n+    void get_dynamic_type_properties(", "path": "include/dynd/types/typevar_dim_type.hpp", "position": 62, "original_position": 62, "commit_id": "2f65dca30dba232770601f9a595578a71ceda7e5", "original_commit_id": "ff214ccea218b541277fe8ccb4c9b43337969477", "user": {"login": "talumbau", "id": 1891418, "avatar_url": "https://avatars1.githubusercontent.com/u/1891418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/talumbau", "html_url": "https://github.com/talumbau", "followers_url": "https://api.github.com/users/talumbau/followers", "following_url": "https://api.github.com/users/talumbau/following{/other_user}", "gists_url": "https://api.github.com/users/talumbau/gists{/gist_id}", "starred_url": "https://api.github.com/users/talumbau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/talumbau/subscriptions", "organizations_url": "https://api.github.com/users/talumbau/orgs", "repos_url": "https://api.github.com/users/talumbau/repos", "events_url": "https://api.github.com/users/talumbau/events{/privacy}", "received_events_url": "https://api.github.com/users/talumbau/received_events", "type": "User", "site_admin": false}, "body": "unit test!\n", "created_at": "2014-05-13T17:24:23Z", "updated_at": "2014-05-13T18:21:12Z", "html_url": "https://github.com/libdynd/libdynd/pull/42#discussion_r12595972", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/42", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/12595972"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/42#discussion_r12595972"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/42"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/12595972/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/13192562", "pull_request_review_id": null, "id": 13192562, "diff_hunk": "@@ -25,19 +25,17 @@ namespace dynd {\n  *                   with `dst_tp` and `src_tp`.\n  * \\param window_size  The size of the rolling window.\n  */\n-void make_rolling_arrfunc(arrfunc_type_data *out_af, const ndt::type &dst_tp,\n-                          const ndt::type &src_tp, const nd::array &window_op,\n+void make_rolling_arrfunc(arrfunc_type_data *out_af, const nd::arrfunc &window_op,", "path": "include/dynd/func/rolling_arrfunc.hpp", "position": 6, "original_position": 6, "commit_id": "5f24067737bf2441f9b40214727f3c7ed2ca9cb8", "original_commit_id": "5f24067737bf2441f9b40214727f3c7ed2ca9cb8", "user": {"login": "talumbau", "id": 1891418, "avatar_url": "https://avatars1.githubusercontent.com/u/1891418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/talumbau", "html_url": "https://github.com/talumbau", "followers_url": "https://api.github.com/users/talumbau/followers", "following_url": "https://api.github.com/users/talumbau/following{/other_user}", "gists_url": "https://api.github.com/users/talumbau/gists{/gist_id}", "starred_url": "https://api.github.com/users/talumbau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/talumbau/subscriptions", "organizations_url": "https://api.github.com/users/talumbau/orgs", "repos_url": "https://api.github.com/users/talumbau/repos", "events_url": "https://api.github.com/users/talumbau/events{/privacy}", "received_events_url": "https://api.github.com/users/talumbau/received_events", "type": "User", "site_admin": false}, "body": "Noticed you have the return type here as arrfunc_type_data instead of nd::arrfunc (like below). I guess this is for efficiency but seems a bit confusing to have two different options for the same thing. \n", "created_at": "2014-05-29T17:24:01Z", "updated_at": "2014-05-29T17:24:01Z", "html_url": "https://github.com/libdynd/libdynd/pull/49#discussion_r13192562", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/49", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/13192562"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/49#discussion_r13192562"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/49"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/13192562/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/12983448", "pull_request_review_id": null, "id": 12983448, "diff_hunk": "@@ -0,0 +1,158 @@\n+//\n+// Copyright (C) 2011-14 Irwin Zaid, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#include <dynd/special.hpp>\n+\n+using namespace dynd;\n+\n+double dynd::factorial(int n) {\n+    if (n < 0) {\n+        throw std::runtime_error(\"n must be a nonnegative integer\");", "path": "src/dynd/special.cpp", "position": null, "original_position": 12, "commit_id": "7b263f1974250fd561c21571edfef0b3036f4199", "original_commit_id": "0dcb78cf698117aae120ae6fe6e34fb714f7c280", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "I've started using std::invalid_argument for this kind of error\n", "created_at": "2014-05-23T01:58:06Z", "updated_at": "2014-06-02T17:10:19Z", "html_url": "https://github.com/libdynd/libdynd/pull/45#discussion_r12983448", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/45", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/12983448"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/45#discussion_r12983448"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/45"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/12983448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/12983450", "pull_request_review_id": null, "id": 12983450, "diff_hunk": "@@ -0,0 +1,158 @@\n+//\n+// Copyright (C) 2011-14 Irwin Zaid, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#include <dynd/special.hpp>\n+\n+using namespace dynd;\n+\n+double dynd::factorial(int n) {\n+    if (n < 0) {\n+        throw std::runtime_error(\"n must be a nonnegative integer\");\n+    }\n+\n+    double res = 1.0;\n+    for (int k = 1; k <= n; ++k) {\n+        res *= k;\n+    }\n+\n+    return res;\n+}\n+\n+double dynd::factorial2(int n) {\n+    if (n < 0) {\n+        throw std::runtime_error(\"n must be a nonnegative integer\");", "path": "src/dynd/special.cpp", "position": null, "original_position": 25, "commit_id": "7b263f1974250fd561c21571edfef0b3036f4199", "original_commit_id": "0dcb78cf698117aae120ae6fe6e34fb714f7c280", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "Also std::invalid_argument\n", "created_at": "2014-05-23T01:58:17Z", "updated_at": "2014-06-02T17:10:19Z", "html_url": "https://github.com/libdynd/libdynd/pull/45#discussion_r12983450", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/45", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/12983450"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/45#discussion_r12983450"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/45"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/12983450/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/12983457", "pull_request_review_id": null, "id": 12983457, "diff_hunk": "@@ -0,0 +1,158 @@\n+//\n+// Copyright (C) 2011-14 Irwin Zaid, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#include <dynd/special.hpp>\n+\n+using namespace dynd;\n+\n+double dynd::factorial(int n) {\n+    if (n < 0) {\n+        throw std::runtime_error(\"n must be a nonnegative integer\");\n+    }\n+\n+    double res = 1.0;\n+    for (int k = 1; k <= n; ++k) {\n+        res *= k;\n+    }\n+\n+    return res;\n+}\n+\n+double dynd::factorial2(int n) {\n+    if (n < 0) {\n+        throw std::runtime_error(\"n must be a nonnegative integer\");\n+    }\n+\n+    double res = 1.0;\n+    for (int k = n; k > 0; k -= 2) {\n+        res *= k;\n+    }\n+\n+    return res;\n+}\n+\n+double dynd::factorial_ratio(int m, int n) {\n+    if (m < 0 || n < 0) {\n+        throw std::runtime_error(\"m and n must be nonnegative integers\");", "path": "src/dynd/special.cpp", "position": null, "original_position": 38, "commit_id": "7b263f1974250fd561c21571edfef0b3036f4199", "original_commit_id": "0dcb78cf698117aae120ae6fe6e34fb714f7c280", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "invalid_argument\n", "created_at": "2014-05-23T01:58:28Z", "updated_at": "2014-06-02T17:10:19Z", "html_url": "https://github.com/libdynd/libdynd/pull/45#discussion_r12983457", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/45", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/12983457"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/45#discussion_r12983457"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/45"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/12983457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/12983484", "pull_request_review_id": null, "id": 12983484, "diff_hunk": "@@ -0,0 +1,158 @@\n+//\n+// Copyright (C) 2011-14 Irwin Zaid, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#include <dynd/special.hpp>\n+\n+using namespace dynd;\n+\n+double dynd::factorial(int n) {\n+    if (n < 0) {\n+        throw std::runtime_error(\"n must be a nonnegative integer\");\n+    }\n+\n+    double res = 1.0;\n+    for (int k = 1; k <= n; ++k) {\n+        res *= k;\n+    }\n+\n+    return res;\n+}\n+\n+double dynd::factorial2(int n) {\n+    if (n < 0) {\n+        throw std::runtime_error(\"n must be a nonnegative integer\");\n+    }\n+\n+    double res = 1.0;\n+    for (int k = n; k > 0; k -= 2) {\n+        res *= k;\n+    }\n+\n+    return res;\n+}\n+\n+double dynd::factorial_ratio(int m, int n) {\n+    if (m < 0 || n < 0) {\n+        throw std::runtime_error(\"m and n must be nonnegative integers\");\n+    }\n+\n+    if (m < n) {\n+        return 1.0 / factorial_ratio(n, m);\n+    }\n+\n+    double res = 1.0;\n+    for (int k = n + 1; k <= m; ++k) {\n+        res *= k;\n+    }\n+\n+    return res;\n+}\n+\n+double dynd::sph_bessel_j(double nu, double x) {\n+    if (nu == 0) {\n+        return sph_bessel_j0(x);\n+    }\n+\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+\n+    if (x < 1) {\n+        double x_div_2 = x / 2.0;\n+        double x_sq_div_4 = x_div_2 * x_div_2;\n+\n+        int k = 0;\n+        double term = std::pow(x_div_2, nu) / gamma(nu + 1.5), res = term;\n+        do {\n+            ++k;\n+            term *= -x_sq_div_4 / (k * (k + nu + 0.5));\n+            res += term;\n+        } while (fabs(std::numeric_limits<double>::epsilon() * res) < fabs(term));\n+\n+        return std::sqrt(dynd::dynd_pi_div_4<double>()) * res;\n+    }\n+\n+    return std::sqrt(dynd::dynd_pi_div_2<double>() / x) * bessel_j(nu + 0.5, x);\n+}\n+\n+double dynd::legendre_p_next(int l, double x, double pls1, double pl) {\n+    return ((2 * l + 1) * x * pl - l * pls1) / (l + 1);\n+}\n+\n+double dynd::legendre_p(int l, double x) {\n+    if (l < 0) {\n+        throw std::runtime_error(\"l must be a nonnegative integer\");\n+    }\n+\n+    if (fabs(x) > 1) {\n+        throw std::runtime_error(\"fabs(x) must be less than or equal to 1\");", "path": "src/dynd/special.cpp", "position": null, "original_position": 90, "commit_id": "7b263f1974250fd561c21571edfef0b3036f4199", "original_commit_id": "0dcb78cf698117aae120ae6fe6e34fb714f7c280", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "Also, in these messages, would be good to mention the function name, as that may not be visible from the context. Possibly \"legendre_p: fabs(x) must be ...\"\n", "created_at": "2014-05-23T02:00:25Z", "updated_at": "2014-06-02T17:10:19Z", "html_url": "https://github.com/libdynd/libdynd/pull/45#discussion_r12983484", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/45", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/12983484"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/45#discussion_r12983484"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/45"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/12983484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/12983673", "pull_request_review_id": null, "id": 12983673, "diff_hunk": "@@ -0,0 +1,278 @@\n+// Copyright (C) 2011-14 Irwin Zaid, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#include <iostream>\n+#include <stdexcept>\n+#include <cmath>\n+#include <inc_gtest.hpp>\n+\n+#include \"special_vals.hpp\"\n+\n+#include <dynd/special.hpp>\n+\n+using namespace std;\n+using namespace dynd;\n+\n+double rel_error(double expected, double actual) {\n+    if ((expected == 0.0) && (actual == 0.0)) {\n+        return 0.0;\n+    }\n+\n+    return fabs(1.0 - actual / expected);\n+}\n+\n+double rel_error(dynd_complex<double> expected, dynd_complex<double> actual) {\n+    if ((expected == 0.0) && (actual == 0.0)) {\n+        return 0.0;\n+    }\n+\n+    return fabs(1.0 - abs(actual) / abs(expected));", "path": "tests/test_special.cpp", "position": null, "original_position": 30, "commit_id": "7b263f1974250fd561c21571edfef0b3036f4199", "original_commit_id": "0dcb78cf698117aae120ae6fe6e34fb714f7c280", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "This doesn't look right to me, compare the following:\n\n```\nIn [55]: actual = -1j\n\nIn [56]: expected = 1j\n\nIn [57]: abs(1 - abs(actual) / abs(expected))\nOut[57]: 0.0\n\nIn [58]: abs(actual - expected) / abs(expected)\nOut[58]: 2.0\n```\n\nI think it should just use the latter.\n", "created_at": "2014-05-23T02:12:04Z", "updated_at": "2014-06-02T17:10:19Z", "html_url": "https://github.com/libdynd/libdynd/pull/45#discussion_r12983673", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/45", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/12983673"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/45#discussion_r12983673"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/45"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/12983673/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/12983752", "pull_request_review_id": null, "id": 12983752, "diff_hunk": "@@ -0,0 +1,278 @@\n+// Copyright (C) 2011-14 Irwin Zaid, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#include <iostream>\n+#include <stdexcept>\n+#include <cmath>\n+#include <inc_gtest.hpp>\n+\n+#include \"special_vals.hpp\"\n+\n+#include <dynd/special.hpp>\n+\n+using namespace std;\n+using namespace dynd;\n+\n+double rel_error(double expected, double actual) {\n+    if ((expected == 0.0) && (actual == 0.0)) {\n+        return 0.0;\n+    }\n+\n+    return fabs(1.0 - actual / expected);\n+}\n+\n+double rel_error(dynd_complex<double> expected, dynd_complex<double> actual) {\n+    if ((expected == 0.0) && (actual == 0.0)) {\n+        return 0.0;\n+    }\n+\n+    return fabs(1.0 - abs(actual) / abs(expected));\n+}\n+\n+#define REL_ERROR_MAX 1E-8\n+\n+TEST(Special, Factorial) {\n+    nd::array vals = factorial_vals();\n+    intptr_t size = vals.get_dim_size();\n+\n+    for (int i = 0; i < size; ++i) {\n+        EXPECT_GE(REL_ERROR_MAX,\n+            rel_error(vals(i, 1).as<double>(), factorial(vals(i, 0).as<int>())));", "path": "tests/test_special.cpp", "position": null, "original_position": 41, "commit_id": "7b263f1974250fd561c21571edfef0b3036f4199", "original_commit_id": "0dcb78cf698117aae120ae6fe6e34fb714f7c280", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "I wonder if we can do better than this, so as to be able to more quickly debug issues on foreign systems? If there is one error among many here, it will say something like \"0.00001 is not greater or equal to 0.000231\", and we won't immediately be able to tell which of the test values failed. If we write our own EXPECT_REL_ERROR macro that additionally prints out the expected and actual values on failure, I think we will be much happer in that scenario.\n", "created_at": "2014-05-23T02:17:07Z", "updated_at": "2014-06-02T17:10:19Z", "html_url": "https://github.com/libdynd/libdynd/pull/45#discussion_r12983752", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/45", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/12983752"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/45#discussion_r12983752"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/45"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/12983752/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/12983792", "pull_request_review_id": null, "id": 12983792, "diff_hunk": "@@ -0,0 +1,29 @@\n+cmake_minimum_required(VERSION 2.6)\n+project(cephes)\n+\n+set(CMAKE_VERBOSE_MAKEFILE 1)\n+\n+set(cephes_SRC\n+    ${CMAKE_CURRENT_SOURCE_DIR}/airy.c\n+    ${CMAKE_CURRENT_SOURCE_DIR}/cbrt.c\n+    ${CMAKE_CURRENT_SOURCE_DIR}/const.c\n+    ${CMAKE_CURRENT_SOURCE_DIR}/gamma.c\n+    ${CMAKE_CURRENT_SOURCE_DIR}/j0.c\n+    ${CMAKE_CURRENT_SOURCE_DIR}/j1.c\n+    ${CMAKE_CURRENT_SOURCE_DIR}/jv.c\n+    ${CMAKE_CURRENT_SOURCE_DIR}/polevl.c\n+    ${CMAKE_CURRENT_SOURCE_DIR}/mtherr.c\n+    ${CMAKE_CURRENT_SOURCE_DIR}/sf_error.c\n+    ${CMAKE_CURRENT_SOURCE_DIR}/struve.c\n+    ${CMAKE_CURRENT_SOURCE_DIR}/yn.c\n+    ${CMAKE_CURRENT_SOURCE_DIR}/mconf.h", "path": "thirdparty/cephes/CMakeLists.txt", "position": null, "original_position": 19, "commit_id": "7b263f1974250fd561c21571edfef0b3036f4199", "original_commit_id": "0dcb78cf698117aae120ae6fe6e34fb714f7c280", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "Are these ${CMAKE_CURRENT_SOURCE_DIR} needed? Isn't that just implied by them being source files?\n", "created_at": "2014-05-23T02:19:44Z", "updated_at": "2014-06-02T17:10:19Z", "html_url": "https://github.com/libdynd/libdynd/pull/45#discussion_r12983792", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/45", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/12983792"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/45#discussion_r12983792"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/45"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/12983792/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/13282545", "pull_request_review_id": null, "id": 13282545, "diff_hunk": "@@ -0,0 +1,158 @@\n+//\n+// Copyright (C) 2011-14 Irwin Zaid, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#include <dynd/special.hpp>\n+\n+using namespace dynd;\n+\n+double dynd::factorial(int n) {\n+    if (n < 0) {\n+        throw std::runtime_error(\"n must be a nonnegative integer\");", "path": "src/dynd/special.cpp", "position": null, "original_position": 12, "commit_id": "7b263f1974250fd561c21571edfef0b3036f4199", "original_commit_id": "0dcb78cf698117aae120ae6fe6e34fb714f7c280", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Changed.\n", "created_at": "2014-06-02T13:00:03Z", "updated_at": "2014-06-02T17:10:19Z", "html_url": "https://github.com/libdynd/libdynd/pull/45#discussion_r13282545", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/45", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/13282545"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/45#discussion_r13282545"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/45"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/13282545/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/13282550", "pull_request_review_id": null, "id": 13282550, "diff_hunk": "@@ -0,0 +1,158 @@\n+//\n+// Copyright (C) 2011-14 Irwin Zaid, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#include <dynd/special.hpp>\n+\n+using namespace dynd;\n+\n+double dynd::factorial(int n) {\n+    if (n < 0) {\n+        throw std::runtime_error(\"n must be a nonnegative integer\");\n+    }\n+\n+    double res = 1.0;\n+    for (int k = 1; k <= n; ++k) {\n+        res *= k;\n+    }\n+\n+    return res;\n+}\n+\n+double dynd::factorial2(int n) {\n+    if (n < 0) {\n+        throw std::runtime_error(\"n must be a nonnegative integer\");", "path": "src/dynd/special.cpp", "position": null, "original_position": 25, "commit_id": "7b263f1974250fd561c21571edfef0b3036f4199", "original_commit_id": "0dcb78cf698117aae120ae6fe6e34fb714f7c280", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Also changed.\n", "created_at": "2014-06-02T13:00:10Z", "updated_at": "2014-06-02T17:10:19Z", "html_url": "https://github.com/libdynd/libdynd/pull/45#discussion_r13282550", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/45", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/13282550"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/45#discussion_r13282550"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/45"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/13282550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/13282557", "pull_request_review_id": null, "id": 13282557, "diff_hunk": "@@ -0,0 +1,158 @@\n+//\n+// Copyright (C) 2011-14 Irwin Zaid, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#include <dynd/special.hpp>\n+\n+using namespace dynd;\n+\n+double dynd::factorial(int n) {\n+    if (n < 0) {\n+        throw std::runtime_error(\"n must be a nonnegative integer\");\n+    }\n+\n+    double res = 1.0;\n+    for (int k = 1; k <= n; ++k) {\n+        res *= k;\n+    }\n+\n+    return res;\n+}\n+\n+double dynd::factorial2(int n) {\n+    if (n < 0) {\n+        throw std::runtime_error(\"n must be a nonnegative integer\");\n+    }\n+\n+    double res = 1.0;\n+    for (int k = n; k > 0; k -= 2) {\n+        res *= k;\n+    }\n+\n+    return res;\n+}\n+\n+double dynd::factorial_ratio(int m, int n) {\n+    if (m < 0 || n < 0) {\n+        throw std::runtime_error(\"m and n must be nonnegative integers\");", "path": "src/dynd/special.cpp", "position": null, "original_position": 38, "commit_id": "7b263f1974250fd561c21571edfef0b3036f4199", "original_commit_id": "0dcb78cf698117aae120ae6fe6e34fb714f7c280", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "changed\n", "created_at": "2014-06-02T13:00:16Z", "updated_at": "2014-06-02T17:10:19Z", "html_url": "https://github.com/libdynd/libdynd/pull/45#discussion_r13282557", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/45", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/13282557"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/45#discussion_r13282557"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/45"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/13282557/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/13282589", "pull_request_review_id": null, "id": 13282589, "diff_hunk": "@@ -0,0 +1,158 @@\n+//\n+// Copyright (C) 2011-14 Irwin Zaid, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#include <dynd/special.hpp>\n+\n+using namespace dynd;\n+\n+double dynd::factorial(int n) {\n+    if (n < 0) {\n+        throw std::runtime_error(\"n must be a nonnegative integer\");\n+    }\n+\n+    double res = 1.0;\n+    for (int k = 1; k <= n; ++k) {\n+        res *= k;\n+    }\n+\n+    return res;\n+}\n+\n+double dynd::factorial2(int n) {\n+    if (n < 0) {\n+        throw std::runtime_error(\"n must be a nonnegative integer\");\n+    }\n+\n+    double res = 1.0;\n+    for (int k = n; k > 0; k -= 2) {\n+        res *= k;\n+    }\n+\n+    return res;\n+}\n+\n+double dynd::factorial_ratio(int m, int n) {\n+    if (m < 0 || n < 0) {\n+        throw std::runtime_error(\"m and n must be nonnegative integers\");\n+    }\n+\n+    if (m < n) {\n+        return 1.0 / factorial_ratio(n, m);\n+    }\n+\n+    double res = 1.0;\n+    for (int k = n + 1; k <= m; ++k) {\n+        res *= k;\n+    }\n+\n+    return res;\n+}\n+\n+double dynd::sph_bessel_j(double nu, double x) {\n+    if (nu == 0) {\n+        return sph_bessel_j0(x);\n+    }\n+\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+\n+    if (x < 1) {\n+        double x_div_2 = x / 2.0;\n+        double x_sq_div_4 = x_div_2 * x_div_2;\n+\n+        int k = 0;\n+        double term = std::pow(x_div_2, nu) / gamma(nu + 1.5), res = term;\n+        do {\n+            ++k;\n+            term *= -x_sq_div_4 / (k * (k + nu + 0.5));\n+            res += term;\n+        } while (fabs(std::numeric_limits<double>::epsilon() * res) < fabs(term));\n+\n+        return std::sqrt(dynd::dynd_pi_div_4<double>()) * res;\n+    }\n+\n+    return std::sqrt(dynd::dynd_pi_div_2<double>() / x) * bessel_j(nu + 0.5, x);\n+}\n+\n+double dynd::legendre_p_next(int l, double x, double pls1, double pl) {\n+    return ((2 * l + 1) * x * pl - l * pls1) / (l + 1);\n+}\n+\n+double dynd::legendre_p(int l, double x) {\n+    if (l < 0) {\n+        throw std::runtime_error(\"l must be a nonnegative integer\");\n+    }\n+\n+    if (fabs(x) > 1) {\n+        throw std::runtime_error(\"fabs(x) must be less than or equal to 1\");", "path": "src/dynd/special.cpp", "position": null, "original_position": 90, "commit_id": "7b263f1974250fd561c21571edfef0b3036f4199", "original_commit_id": "0dcb78cf698117aae120ae6fe6e34fb714f7c280", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Added function name.\n", "created_at": "2014-06-02T13:01:17Z", "updated_at": "2014-06-02T17:10:19Z", "html_url": "https://github.com/libdynd/libdynd/pull/45#discussion_r13282589", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/45", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/13282589"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/45#discussion_r13282589"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/45"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/13282589/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/13282652", "pull_request_review_id": null, "id": 13282652, "diff_hunk": "@@ -0,0 +1,278 @@\n+// Copyright (C) 2011-14 Irwin Zaid, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#include <iostream>\n+#include <stdexcept>\n+#include <cmath>\n+#include <inc_gtest.hpp>\n+\n+#include \"special_vals.hpp\"\n+\n+#include <dynd/special.hpp>\n+\n+using namespace std;\n+using namespace dynd;\n+\n+double rel_error(double expected, double actual) {\n+    if ((expected == 0.0) && (actual == 0.0)) {\n+        return 0.0;\n+    }\n+\n+    return fabs(1.0 - actual / expected);\n+}\n+\n+double rel_error(dynd_complex<double> expected, dynd_complex<double> actual) {\n+    if ((expected == 0.0) && (actual == 0.0)) {\n+        return 0.0;\n+    }\n+\n+    return fabs(1.0 - abs(actual) / abs(expected));", "path": "tests/test_special.cpp", "position": null, "original_position": 30, "commit_id": "7b263f1974250fd561c21571edfef0b3036f4199", "original_commit_id": "0dcb78cf698117aae120ae6fe6e34fb714f7c280", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Done.\n", "created_at": "2014-06-02T13:02:53Z", "updated_at": "2014-06-02T17:10:19Z", "html_url": "https://github.com/libdynd/libdynd/pull/45#discussion_r13282652", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/45", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/13282652"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/45#discussion_r13282652"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/45"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/13282652/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/13282830", "pull_request_review_id": null, "id": 13282830, "diff_hunk": "@@ -0,0 +1,29 @@\n+cmake_minimum_required(VERSION 2.6)\n+project(cephes)\n+\n+set(CMAKE_VERBOSE_MAKEFILE 1)\n+\n+set(cephes_SRC\n+    ${CMAKE_CURRENT_SOURCE_DIR}/airy.c\n+    ${CMAKE_CURRENT_SOURCE_DIR}/cbrt.c\n+    ${CMAKE_CURRENT_SOURCE_DIR}/const.c\n+    ${CMAKE_CURRENT_SOURCE_DIR}/gamma.c\n+    ${CMAKE_CURRENT_SOURCE_DIR}/j0.c\n+    ${CMAKE_CURRENT_SOURCE_DIR}/j1.c\n+    ${CMAKE_CURRENT_SOURCE_DIR}/jv.c\n+    ${CMAKE_CURRENT_SOURCE_DIR}/polevl.c\n+    ${CMAKE_CURRENT_SOURCE_DIR}/mtherr.c\n+    ${CMAKE_CURRENT_SOURCE_DIR}/sf_error.c\n+    ${CMAKE_CURRENT_SOURCE_DIR}/struve.c\n+    ${CMAKE_CURRENT_SOURCE_DIR}/yn.c\n+    ${CMAKE_CURRENT_SOURCE_DIR}/mconf.h", "path": "thirdparty/cephes/CMakeLists.txt", "position": null, "original_position": 19, "commit_id": "7b263f1974250fd561c21571edfef0b3036f4199", "original_commit_id": "0dcb78cf698117aae120ae6fe6e34fb714f7c280", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Not needed, I removed them.\n", "created_at": "2014-06-02T13:07:58Z", "updated_at": "2014-06-02T17:10:19Z", "html_url": "https://github.com/libdynd/libdynd/pull/45#discussion_r13282830", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/45", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/13282830"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/45#discussion_r13282830"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/45"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/13282830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/13286222", "pull_request_review_id": null, "id": 13286222, "diff_hunk": "@@ -0,0 +1,278 @@\n+// Copyright (C) 2011-14 Irwin Zaid, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#include <iostream>\n+#include <stdexcept>\n+#include <cmath>\n+#include <inc_gtest.hpp>\n+\n+#include \"special_vals.hpp\"\n+\n+#include <dynd/special.hpp>\n+\n+using namespace std;\n+using namespace dynd;\n+\n+double rel_error(double expected, double actual) {\n+    if ((expected == 0.0) && (actual == 0.0)) {\n+        return 0.0;\n+    }\n+\n+    return fabs(1.0 - actual / expected);\n+}\n+\n+double rel_error(dynd_complex<double> expected, dynd_complex<double> actual) {\n+    if ((expected == 0.0) && (actual == 0.0)) {\n+        return 0.0;\n+    }\n+\n+    return fabs(1.0 - abs(actual) / abs(expected));\n+}\n+\n+#define REL_ERROR_MAX 1E-8\n+\n+TEST(Special, Factorial) {\n+    nd::array vals = factorial_vals();\n+    intptr_t size = vals.get_dim_size();\n+\n+    for (int i = 0; i < size; ++i) {\n+        EXPECT_GE(REL_ERROR_MAX,\n+            rel_error(vals(i, 1).as<double>(), factorial(vals(i, 0).as<int>())));", "path": "tests/test_special.cpp", "position": null, "original_position": 41, "commit_id": "7b263f1974250fd561c21571edfef0b3036f4199", "original_commit_id": "0dcb78cf698117aae120ae6fe6e34fb714f7c280", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Done.\n", "created_at": "2014-06-02T14:17:43Z", "updated_at": "2014-06-02T17:10:19Z", "html_url": "https://github.com/libdynd/libdynd/pull/45#discussion_r13286222", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/45", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/13286222"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/45#discussion_r13286222"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/45"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/13286222/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/13847839", "pull_request_review_id": null, "id": 13847839, "diff_hunk": "@@ -213,7 +225,141 @@ class array_iter<0, 1> {\n };\n \n template<>\n+class array_neighborhood_iter<0, 1> : public array_iter<0, 1> {\n+    dimvector m_neighbor_iterindex;\n+    dimvector m_neighborhood_iteroffset;\n+    dimvector m_neighborhood_itershape;\n+    bool m_neighbor_within_bounds;\n+    const char *m_origin_data;\n+    const char *m_neighbor_data;\n+    iterdata_common *m_neighborhood_iterdata;\n+\n+    inline void init(const ndt::type& tp0, const char *arrmeta0, const char *data0, size_t ndim,\n+        const intptr_t *neighborhood_shape, const intptr_t *neighborhood_offset)\n+    {\n+        array_iter<0, 1>::init(tp0, arrmeta0, data0, ndim);\n+\n+        if (m_iter_ndim != 0) {\n+            m_neighbor_iterindex.init(m_iter_ndim);\n+            memset(m_neighbor_iterindex.get(), 0, sizeof(intptr_t) * m_iter_ndim);\n+            m_neighborhood_itershape.init(m_iter_ndim, neighborhood_shape);\n+            if (neighborhood_offset == NULL) {\n+                m_neighborhood_iteroffset.init(m_iter_ndim);\n+                memset(m_neighborhood_iteroffset.get(), 0, sizeof(intptr_t) * m_iter_ndim);\n+            } else {\n+                m_neighborhood_iteroffset.init(m_iter_ndim, neighborhood_offset);\n+            }\n+\n+            m_neighborhood_iterdata = reinterpret_cast<iterdata_common *>(malloc(sizeof(m_iterdata)));\n+            if (!m_iterdata) {", "path": "include/dynd/array_iter.hpp", "position": null, "original_position": 77, "commit_id": "9bcf30a3aa8c1b6d47d45b5dbe99253b30eb7456", "original_commit_id": "b0f8f54b3f47d5ecbca06d66a9b43af4d40fb099", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "This check should be against m_neighborhood_iterdata.\n", "created_at": "2014-06-17T08:31:05Z", "updated_at": "2014-06-17T22:59:04Z", "html_url": "https://github.com/libdynd/libdynd/pull/60#discussion_r13847839", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/60", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/13847839"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/60#discussion_r13847839"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/60"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/13847839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/13847965", "pull_request_review_id": null, "id": 13847965, "diff_hunk": "@@ -213,7 +225,141 @@ class array_iter<0, 1> {\n };\n \n template<>\n+class array_neighborhood_iter<0, 1> : public array_iter<0, 1> {\n+    dimvector m_neighbor_iterindex;\n+    dimvector m_neighborhood_iteroffset;\n+    dimvector m_neighborhood_itershape;\n+    bool m_neighbor_within_bounds;\n+    const char *m_origin_data;\n+    const char *m_neighbor_data;\n+    iterdata_common *m_neighborhood_iterdata;\n+\n+    inline void init(const ndt::type& tp0, const char *arrmeta0, const char *data0, size_t ndim,\n+        const intptr_t *neighborhood_shape, const intptr_t *neighborhood_offset)\n+    {\n+        array_iter<0, 1>::init(tp0, arrmeta0, data0, ndim);\n+\n+        if (m_iter_ndim != 0) {\n+            m_neighbor_iterindex.init(m_iter_ndim);\n+            memset(m_neighbor_iterindex.get(), 0, sizeof(intptr_t) * m_iter_ndim);\n+            m_neighborhood_itershape.init(m_iter_ndim, neighborhood_shape);\n+            if (neighborhood_offset == NULL) {\n+                m_neighborhood_iteroffset.init(m_iter_ndim);\n+                memset(m_neighborhood_iteroffset.get(), 0, sizeof(intptr_t) * m_iter_ndim);\n+            } else {\n+                m_neighborhood_iteroffset.init(m_iter_ndim, neighborhood_offset);\n+            }\n+\n+            m_neighborhood_iterdata = reinterpret_cast<iterdata_common *>(malloc(sizeof(m_iterdata)));", "path": "include/dynd/array_iter.hpp", "position": null, "original_position": 76, "commit_id": "9bcf30a3aa8c1b6d47d45b5dbe99253b30eb7456", "original_commit_id": "b0f8f54b3f47d5ecbca06d66a9b43af4d40fb099", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "This doesn't look like the right size to me, compare with the code in the array_iter init:\n\n```\n            size_t iterdata_size = m_array_tp.extended()->get_iterdata_size(m_iter_ndim);\n            m_iterdata = reinterpret_cast<iterdata_common *>(malloc(iterdata_size));\n```\n\nsizeof(m_iterdata) will be the size of the pointer, which would be too small I believe.\n", "created_at": "2014-06-17T08:35:00Z", "updated_at": "2014-06-17T22:59:04Z", "html_url": "https://github.com/libdynd/libdynd/pull/60#discussion_r13847965", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/60", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/13847965"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/60#discussion_r13847965"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/60"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/13847965/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/13848026", "pull_request_review_id": null, "id": 13848026, "diff_hunk": "@@ -363,6 +522,220 @@ class array_iter<1, 1> {\n };\n \n template<>\n+class array_neighborhood_iter<1, 1> : public array_iter<1, 1> {\n+    dimvector m_neighbor_rel_iterindex;\n+    dimvector m_neighbor_iterindex;\n+    dimvector m_neighborhood_iteroffset;\n+    dimvector m_neighborhood_itershape;\n+    bool m_neighbor_within_bounds;\n+    char *m_origin_data[2];\n+    char *m_neighbor_data[2];\n+    iterdata_common *m_neighborhood_iterdata[2];\n+\n+    inline void init(const ndt::type& tp0, const char *arrmeta0, char *data0,\n+                    const ndt::type& tp1, const char *arrmeta1, const char *data1,\n+                    const intptr_t *neighborhood_shape, const intptr_t *neighborhood_offset)\n+    {\n+        array_iter<1, 1>::init(tp0, arrmeta0, data0, tp1, arrmeta1, data1);\n+\n+        if (m_iter_ndim[0] != 0) {\n+            m_neighbor_rel_iterindex.init(m_iter_ndim[0]);\n+            memset(m_neighbor_rel_iterindex.get(), 0, sizeof(intptr_t) * m_iter_ndim[0]);\n+            m_neighbor_iterindex.init(m_iter_ndim[0]);\n+            memset(m_neighbor_iterindex.get(), 0, sizeof(intptr_t) * m_iter_ndim[0]);\n+            m_neighborhood_itershape.init(m_iter_ndim[0], neighborhood_shape);\n+            if (neighborhood_offset == NULL) {\n+                m_neighborhood_iteroffset.init(m_iter_ndim[0]);\n+                memset(m_neighborhood_iteroffset.get(), 0, sizeof(intptr_t) * m_iter_ndim[0]);\n+            } else {\n+                m_neighborhood_iteroffset.init(m_iter_ndim[0], neighborhood_offset);\n+            }\n+\n+            size_t iterdata_size = m_array_tp[0].extended()->get_iterdata_size(m_iter_ndim[0]);\n+            m_neighborhood_iterdata[0] = reinterpret_cast<iterdata_common *>(malloc(iterdata_size));\n+            if (!m_neighborhood_iterdata[0]) {", "path": "include/dynd/array_iter.hpp", "position": 95, "original_position": 251, "commit_id": "9bcf30a3aa8c1b6d47d45b5dbe99253b30eb7456", "original_commit_id": "b0f8f54b3f47d5ecbca06d66a9b43af4d40fb099", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "I see that this is right here, and I think you were going to update the one above, sorry started reading from the top. :)\n", "created_at": "2014-06-17T08:37:05Z", "updated_at": "2014-06-17T22:59:04Z", "html_url": "https://github.com/libdynd/libdynd/pull/60#discussion_r13848026", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/60", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/13848026"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/60#discussion_r13848026"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/60"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/13848026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/13956106", "pull_request_review_id": null, "id": 13956106, "diff_hunk": "@@ -0,0 +1,79 @@\n+//\n+// Copyright (C) 2011-14 Irwin Zaid, Mark Wiebe, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#include <iostream>\n+#include <stdexcept>\n+#include <algorithm>\n+#include <cmath>\n+\n+#include \"inc_gtest.hpp\"\n+#include \"dynd_assertions.hpp\"\n+\n+#include <dynd/array_iter.hpp>\n+\n+using namespace std;\n+using namespace dynd;\n+\n+TEST(ArrayNeighborhoodIter, Simple) {\n+    intptr_t neighborhood_shape[2] = {2, 2};\n+    intptr_t neighborhood_offset[2] = {0, 0};\n+\n+    int vals[2][3] = {{0, 1, 2}, {3, 4, 5}};\n+\n+    nd::array arg = nd::empty(2, 3, ndt::make_strided_dim(ndt::make_strided_dim(ndt::make_type<int>())));\n+    arg.vals() = vals;\n+\n+    nd::array res = nd::empty(2, 3, ndt::make_strided_dim(ndt::make_strided_dim(ndt::make_type<int>())));", "path": "tests/array/test_array_iter.cpp", "position": 28, "original_position": 28, "commit_id": "9bcf30a3aa8c1b6d47d45b5dbe99253b30eb7456", "original_commit_id": "9bcf30a3aa8c1b6d47d45b5dbe99253b30eb7456", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "I've tweaked things and I believe `nd::empty<int[2][3]>()` should be equivalent to this statement.\n", "created_at": "2014-06-19T07:23:08Z", "updated_at": "2014-06-19T07:23:21Z", "html_url": "https://github.com/libdynd/libdynd/pull/60#discussion_r13956106", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/60", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/13956106"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/60#discussion_r13956106"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/60"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/13956106/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14247560", "pull_request_review_id": null, "id": 14247560, "diff_hunk": "@@ -0,0 +1,24 @@\n+#include <dynd/random.hpp>\n+\n+using namespace std;\n+using namespace dynd;\n+\n+nd::array nd::typed_rand(intptr_t ndim, const intptr_t *shape, const ndt::type &tp) {", "path": "src/dynd/random.cpp", "position": 6, "original_position": 6, "commit_id": "ab3a1182ab01e8271748328d39c2e23a07c0a858", "original_commit_id": "4cd313146b7be3d55c19746536bd289b94d3d929", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "This is an awful hack, but I only want to use this for testing now. We'll fix rand when the underlying machinery is present. I mention in comments in its header file that it should be rewritten.\n", "created_at": "2014-06-26T15:33:35Z", "updated_at": "2014-06-26T21:47:22Z", "html_url": "https://github.com/libdynd/libdynd/pull/65#discussion_r14247560", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/65", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14247560"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/65#discussion_r14247560"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/65"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14247560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14247628", "pull_request_review_id": null, "id": 14247628, "diff_hunk": "@@ -1251,6 +1251,97 @@ nd::array nd::array::adapt(const ndt::type& tp, const nd::string& adapt_op)\n }\n \n namespace {\n+    static void with_strided_dim_type(const ndt::type& tp, void *extra,\n+                ndt::type& out_transformed_tp, bool& out_was_transformed)\n+    {\n+        if (tp.get_ndim() > 0) {\n+            tp.extended()->transform_child_types(&with_strided_dim_type, extra, out_transformed_tp, out_was_transformed);\n+            type_id_t tp_id = tp.get_type_id();\n+            if (tp_id == fixed_dim_type_id || tp_id == cfixed_dim_type_id) {\n+                out_transformed_tp = ndt::make_strided_dim(out_transformed_tp.tcast<base_uniform_dim_type>()->get_element_type());\n+                out_was_transformed = true;\n+            }\n+        } else {\n+            out_transformed_tp = tp;\n+        }\n+    }\n+} // anonymous namespace\n+\n+nd::array nd::array::permute(intptr_t ndim, const intptr_t *axes) const\n+{\n+    ndt::type transformed_tp;\n+    bool was_transformed = false;\n+    with_strided_dim_type(get_type(), NULL, transformed_tp, was_transformed);\n+\n+    nd::array res(shallow_copy_array_memory_block(get_memblock()));\n+    res = res.view(transformed_tp);\n+", "path": "src/dynd/array.cpp", "position": 35, "original_position": 35, "commit_id": "ab3a1182ab01e8271748328d39c2e23a07c0a858", "original_commit_id": "4cd313146b7be3d55c19746536bd289b94d3d929", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Do I need to do shallow_copy_array_memory_block(get_memblock()) here? I found just doing a view did not copy the metadata.\n", "created_at": "2014-06-26T15:34:33Z", "updated_at": "2014-06-26T21:47:22Z", "html_url": "https://github.com/libdynd/libdynd/pull/65#discussion_r14247628", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/65", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14247628"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/65#discussion_r14247628"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/65"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14247628/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14247695", "pull_request_review_id": null, "id": 14247695, "diff_hunk": "@@ -525,6 +525,11 @@ class array {\n         irange i[4] = {i0, i1, i2, i3};\n         return at_array(4, i);\n     }\n+    /** Indexing with five index values */\n+    array operator()(const irange& i0, const irange& i1, const irange& i2, const irange& i3, const irange& i4) const {\n+        irange i[5] = {i0, i1, i2, i3, i4};\n+        return at_array(5, i);\n+    }\n ", "path": "include/dynd/array.hpp", "position": 16, "original_position": 16, "commit_id": "ab3a1182ab01e8271748328d39c2e23a07c0a858", "original_commit_id": "4cd313146b7be3d55c19746536bd289b94d3d929", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "We can eventually metaprogram this.\n", "created_at": "2014-06-26T15:35:21Z", "updated_at": "2014-06-26T21:47:22Z", "html_url": "https://github.com/libdynd/libdynd/pull/65#discussion_r14247695", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/65", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14247695"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/65#discussion_r14247695"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/65"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14247695/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14248355", "pull_request_review_id": null, "id": 14248355, "diff_hunk": "@@ -593,6 +598,34 @@ class array {\n     array adapt(const ndt::type& tp, const nd::string& adapt_op);\n \n     /**\n+     * Permutes the dimensions of the array, returning a view to the result.\n+     * Only strided dimensions can be permuted and no dimension can be permuted\n+     * across a variable dimension. At present, there is no error checking.\n+     *\n+     * \\param ndim The number of dimensions to permute. If `ndim' is less than that\n+     *             of this array, the other dimensions will not be modified.\n+     * \\param axes The permutation. It must be of length `ndim' and not contain\n+     *             a value greater or equal to `ndim'.\n+     */\n+    array permute(intptr_t ndim, const intptr_t *axes) const;\n+\n+    /**\n+     * Rolls the dimensions of the array so the axis `from' becomes the axis `to'.\n+     * At present, there cannot be any variable dimensions.\n+     */\n+    array roll(intptr_t to, intptr_t from = 0) const;\n+\n+    array roll(intptr_t from = 0) const {\n+        return roll(get_ndim() - 1, from);\n+    }\n+", "path": "include/dynd/array.hpp", "position": null, "original_position": 43, "commit_id": "ab3a1182ab01e8271748328d39c2e23a07c0a858", "original_commit_id": "4cd313146b7be3d55c19746536bd289b94d3d929", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Maybe a better name for 'roll' would be 'cycle'?\n", "created_at": "2014-06-26T15:44:46Z", "updated_at": "2014-06-26T21:47:22Z", "html_url": "https://github.com/libdynd/libdynd/pull/65#discussion_r14248355", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/65", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14248355"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/65#discussion_r14248355"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/65"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14248355/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14250690", "pull_request_review_id": null, "id": 14250690, "diff_hunk": "@@ -1251,6 +1251,97 @@ nd::array nd::array::adapt(const ndt::type& tp, const nd::string& adapt_op)\n }\n \n namespace {\n+    static void with_strided_dim_type(const ndt::type& tp, void *extra,\n+                ndt::type& out_transformed_tp, bool& out_was_transformed)\n+    {\n+        if (tp.get_ndim() > 0) {\n+            tp.extended()->transform_child_types(&with_strided_dim_type, extra, out_transformed_tp, out_was_transformed);\n+            type_id_t tp_id = tp.get_type_id();\n+            if (tp_id == fixed_dim_type_id || tp_id == cfixed_dim_type_id) {\n+                out_transformed_tp = ndt::make_strided_dim(out_transformed_tp.tcast<base_uniform_dim_type>()->get_element_type());\n+                out_was_transformed = true;\n+            }\n+        } else {\n+            out_transformed_tp = tp;\n+        }\n+    }\n+} // anonymous namespace\n+\n+nd::array nd::array::permute(intptr_t ndim, const intptr_t *axes) const\n+{\n+    ndt::type transformed_tp;\n+    bool was_transformed = false;\n+    with_strided_dim_type(get_type(), NULL, transformed_tp, was_transformed);\n+\n+    nd::array res(shallow_copy_array_memory_block(get_memblock()));\n+    res = res.view(transformed_tp);\n+", "path": "src/dynd/array.cpp", "position": 35, "original_position": 35, "commit_id": "ab3a1182ab01e8271748328d39c2e23a07c0a858", "original_commit_id": "4cd313146b7be3d55c19746536bd289b94d3d929", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "Could change view so that it always returns a new array object pointing at the same data, never returning just a reference to the input.\n", "created_at": "2014-06-26T16:28:00Z", "updated_at": "2014-06-26T21:47:22Z", "html_url": "https://github.com/libdynd/libdynd/pull/65#discussion_r14250690", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/65", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14250690"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/65#discussion_r14250690"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/65"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14250690/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14250906", "pull_request_review_id": null, "id": 14250906, "diff_hunk": "@@ -593,6 +598,34 @@ class array {\n     array adapt(const ndt::type& tp, const nd::string& adapt_op);\n \n     /**\n+     * Permutes the dimensions of the array, returning a view to the result.\n+     * Only strided dimensions can be permuted and no dimension can be permuted\n+     * across a variable dimension. At present, there is no error checking.\n+     *\n+     * \\param ndim The number of dimensions to permute. If `ndim' is less than that\n+     *             of this array, the other dimensions will not be modified.\n+     * \\param axes The permutation. It must be of length `ndim' and not contain\n+     *             a value greater or equal to `ndim'.\n+     */\n+    array permute(intptr_t ndim, const intptr_t *axes) const;\n+\n+    /**\n+     * Rolls the dimensions of the array so the axis `from' becomes the axis `to'.\n+     * At present, there cannot be any variable dimensions.\n+     */\n+    array roll(intptr_t to, intptr_t from = 0) const;\n+\n+    array roll(intptr_t from = 0) const {\n+        return roll(get_ndim() - 1, from);\n+    }\n+", "path": "include/dynd/array.hpp", "position": null, "original_position": 43, "commit_id": "ab3a1182ab01e8271748328d39c2e23a07c0a858", "original_commit_id": "4cd313146b7be3d55c19746536bd289b94d3d929", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "I think the names need a reference to dims or axis or something, because these operations make sense on just the data itself applied to the first dimension. In STL, the algorithm is rotate (http://en.cppreference.com/w/cpp/algorithm/rotate).\n", "created_at": "2014-06-26T16:32:44Z", "updated_at": "2014-06-26T21:47:22Z", "html_url": "https://github.com/libdynd/libdynd/pull/65#discussion_r14250906", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/65", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14250906"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/65#discussion_r14250906"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/65"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14250906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14252679", "pull_request_review_id": null, "id": 14252679, "diff_hunk": "@@ -593,6 +598,34 @@ class array {\n     array adapt(const ndt::type& tp, const nd::string& adapt_op);\n \n     /**\n+     * Permutes the dimensions of the array, returning a view to the result.\n+     * Only strided dimensions can be permuted and no dimension can be permuted\n+     * across a variable dimension. At present, there is no error checking.\n+     *\n+     * \\param ndim The number of dimensions to permute. If `ndim' is less than that\n+     *             of this array, the other dimensions will not be modified.\n+     * \\param axes The permutation. It must be of length `ndim' and not contain\n+     *             a value greater or equal to `ndim'.\n+     */\n+    array permute(intptr_t ndim, const intptr_t *axes) const;\n+\n+    /**\n+     * Rolls the dimensions of the array so the axis `from' becomes the axis `to'.\n+     * At present, there cannot be any variable dimensions.\n+     */\n+    array roll(intptr_t to, intptr_t from = 0) const;\n+\n+    array roll(intptr_t from = 0) const {\n+        return roll(get_ndim() - 1, from);\n+    }\n+", "path": "include/dynd/array.hpp", "position": null, "original_position": 43, "commit_id": "ab3a1182ab01e8271748328d39c2e23a07c0a858", "original_commit_id": "4cd313146b7be3d55c19746536bd289b94d3d929", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "We should go with rotate.\n\nAlthough I thought about the axis reference, I'm not totally sure about that. Transpose is fine, everyone seems to just call it transpose. Permute I think as well, MATLAB just calls it permute (http://www.mathworks.com/help/matlab/ref/permute.html).\n\nSo the lone dissenter is roll. Maybe we should just call 'roll' instead 'rotate' and see if we can live with it. It seems weird having 'transpose', 'permute', and 'rotate_axis' rather than 'transpose', 'permute', and 'rotate'.\n", "created_at": "2014-06-26T17:05:41Z", "updated_at": "2014-06-26T21:47:22Z", "html_url": "https://github.com/libdynd/libdynd/pull/65#discussion_r14252679", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/65", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14252679"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/65#discussion_r14252679"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/65"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14252679/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14252735", "pull_request_review_id": null, "id": 14252735, "diff_hunk": "@@ -1251,6 +1251,97 @@ nd::array nd::array::adapt(const ndt::type& tp, const nd::string& adapt_op)\n }\n \n namespace {\n+    static void with_strided_dim_type(const ndt::type& tp, void *extra,\n+                ndt::type& out_transformed_tp, bool& out_was_transformed)\n+    {\n+        if (tp.get_ndim() > 0) {\n+            tp.extended()->transform_child_types(&with_strided_dim_type, extra, out_transformed_tp, out_was_transformed);\n+            type_id_t tp_id = tp.get_type_id();\n+            if (tp_id == fixed_dim_type_id || tp_id == cfixed_dim_type_id) {\n+                out_transformed_tp = ndt::make_strided_dim(out_transformed_tp.tcast<base_uniform_dim_type>()->get_element_type());\n+                out_was_transformed = true;\n+            }\n+        } else {\n+            out_transformed_tp = tp;\n+        }\n+    }\n+} // anonymous namespace\n+\n+nd::array nd::array::permute(intptr_t ndim, const intptr_t *axes) const\n+{\n+    ndt::type transformed_tp;\n+    bool was_transformed = false;\n+    with_strided_dim_type(get_type(), NULL, transformed_tp, was_transformed);\n+\n+    nd::array res(shallow_copy_array_memory_block(get_memblock()));\n+    res = res.view(transformed_tp);\n+", "path": "src/dynd/array.cpp", "position": 35, "original_position": 35, "commit_id": "ab3a1182ab01e8271748328d39c2e23a07c0a858", "original_commit_id": "4cd313146b7be3d55c19746536bd289b94d3d929", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "It's not a big deal to me, but that probably makes more sense. I think view should be the same data, but everything else is a copy. I was surprised when view used the same metadata.\n", "created_at": "2014-06-26T17:06:57Z", "updated_at": "2014-06-26T21:47:22Z", "html_url": "https://github.com/libdynd/libdynd/pull/65#discussion_r14252735", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/65", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14252735"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/65#discussion_r14252735"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/65"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14252735/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576482", "pull_request_review_id": null, "id": 14576482, "diff_hunk": "@@ -0,0 +1,191 @@\n+//\n+// Copyright (C) 2011-14 Irwin Zaid, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#ifndef _DYND__FFT_HPP_\n+#define _DYND__FFT_HPP_\n+\n+#ifdef DYND_FFTW\n+\n+#include <fftw3.h>", "path": "include/dynd/fft.hpp", "position": 11, "original_position": 11, "commit_id": "c7a96d8146d8b03629d5d7c20f34384d7b15d00f", "original_commit_id": "eb6cbb8b7a8c6e9cd9d715ace31705143d5bf032", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "I understand the point about not including too many external headers in our header files. But, if we want to provide access to the FFTW library rather than just opaquely wrap it, we need to include it.\n\nIf someone chooses to build with FFTW, then it seems reasonable to expect the FFTW headers are included.\n", "created_at": "2014-07-06T17:58:15Z", "updated_at": "2014-07-06T19:48:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/75#discussion_r14576482", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/75", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576482"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/75#discussion_r14576482"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/75"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576482/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576487", "pull_request_review_id": null, "id": 14576487, "diff_hunk": "@@ -16,4 +17,34 @@ namespace dynd { namespace nd {\n  */\n nd::array typed_rand(intptr_t ndim, const intptr_t *shape, const ndt::type &tp);\n ", "path": "include/dynd/random.hpp", "position": 11, "original_position": 11, "commit_id": "c7a96d8146d8b03629d5d7c20f34384d7b15d00f", "original_commit_id": "eb6cbb8b7a8c6e9cd9d715ace31705143d5bf032", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "I hacked up this rand function a bit more so it can do complex rands. Again, needs to be done properly at some point.\n", "created_at": "2014-07-06T17:58:57Z", "updated_at": "2014-07-06T19:48:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/75#discussion_r14576487", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/75", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576487"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/75#discussion_r14576487"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/75"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576487/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576496", "pull_request_review_id": null, "id": 14576496, "diff_hunk": "@@ -1785,6 +1785,22 @@ nd::array nd::typed_ones(intptr_t ndim, const intptr_t *shape,\n     return res;\n }\n \n+nd::array nd::concatenate(const nd::array &x, const nd::array &y) {\n+    if (x.get_ndim() != 1 || y.get_ndim() != 1) {\n+\n+    }\n+\n+    if (x.get_dtype() != y.get_dtype()) {\n+        throw runtime_error(\"dtypes must be the same for concatenate\");\n+    }\n+\n+    nd::array res = nd::empty(x.get_dim_size() + y.get_dim_size(), x.get_dtype());\n+    res(irange(0, x.get_dim_size())).val_assign(x);\n+    res(irange(x.get_dim_size(), res.get_dim_size())).val_assign(y);\n+\n+    return res;\n+}\n+", "path": "src/dynd/array.cpp", "position": 19, "original_position": 19, "commit_id": "c7a96d8146d8b03629d5d7c20f34384d7b15d00f", "original_commit_id": "eb6cbb8b7a8c6e9cd9d715ace31705143d5bf032", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Sometimes I need a fundamental function that libdynd is missing -- in this instance, concatenate. Usually I will try and implement it properly. Rarely, like in this case and for rand, I will put a quick stopgap in so I can move on with the bigger picture. Concatenate is an example of this. It needs to be done properly at some point.\n\nThis version works for a pair of 1D arrays.\n", "created_at": "2014-07-06T18:00:48Z", "updated_at": "2014-07-06T19:48:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/75#discussion_r14576496", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/75", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576496"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/75#discussion_r14576496"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/75"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576496/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576501", "pull_request_review_id": null, "id": 14576501, "diff_hunk": "@@ -0,0 +1,371 @@\n+//\n+// Copyright (C) 2011-14 Irwin Zaid, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#include <map>\n+#include <tr1/tuple>\n+\n+#include <dynd/fft.hpp>\n+#include <dynd/func/take_arrfunc.hpp>\n+\n+using namespace std;\n+using namespace dynd;\n+\n+#ifdef DYND_FFTW\n+\n+namespace dynd { namespace fftw {\n+\n+typedef tr1::tuple<vector<intptr_t>, type_id_t, vector<intptr_t>, int,\n+    type_id_t, vector<intptr_t>, int, int, unsigned int> key_type;\n+static map<key_type, void *> plans;\n+", "path": "src/dynd/fft.cpp", "position": 22, "original_position": 22, "commit_id": "c7a96d8146d8b03629d5d7c20f34384d7b15d00f", "original_commit_id": "eb6cbb8b7a8c6e9cd9d715ace31705143d5bf032", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "The keys for caching an FFTW plan are 9-dimensional. So I needed a tuple.\n\nDo we have cross-platform issues by using tr1 here?\n", "created_at": "2014-07-06T18:01:49Z", "updated_at": "2014-07-06T19:48:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/75#discussion_r14576501", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/75", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576501"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/75#discussion_r14576501"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/75"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576501/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576510", "pull_request_review_id": null, "id": 14576510, "diff_hunk": "@@ -4,11 +4,16 @@ compiler:\n   - gcc\n   - clang\n \n+env:\n+  - DYND_FFTW=OFF\n+  - DYND_FFTW=ON\n+\n before_script:\n   - sudo apt-get -qq install valgrind\n+  - if [ \"$DYND_FFTW\" == \"ON\" ]; then sudo apt-get -qq install libfftw3-dev; fi\n   - mkdir build\n   - cd build\n-  - cmake ..\n+  - cmake -DDYND_FFTW=${DYND_FFTW} ..\n \n script:", "path": ".travis.yml", "position": 16, "original_position": 16, "commit_id": "c7a96d8146d8b03629d5d7c20f34384d7b15d00f", "original_commit_id": "eb6cbb8b7a8c6e9cd9d715ace31705143d5bf032", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Environment variables seem to be the \"right\" way to do options with Travis CI.\n", "created_at": "2014-07-06T18:03:17Z", "updated_at": "2014-07-06T19:48:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/75#discussion_r14576510", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/75", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576510"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/75#discussion_r14576510"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/75"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576520", "pull_request_review_id": null, "id": 14576520, "diff_hunk": "@@ -158,6 +162,28 @@ class dynd_complex<double> {\n     }\n };\n \n+// Metaprogram for determining if a type is a valid C++ scalar\n+// of a particular type.\n+template<typename T> struct is_complex_scalar {enum {value = false};};\n+template <> struct is_complex_scalar<char> {enum {value = true};};\n+template <> struct is_complex_scalar<signed char> {enum {value = true};};\n+template <> struct is_complex_scalar<short> {enum {value = true};};\n+template <> struct is_complex_scalar<int> {enum {value = true};};\n+template <> struct is_complex_scalar<long> {enum {value = true};};\n+template <> struct is_complex_scalar<long long> {enum {value = true};};\n+template <> struct is_complex_scalar<unsigned char> {enum {value = true};};\n+template <> struct is_complex_scalar<unsigned short> {enum {value = true};};\n+template <> struct is_complex_scalar<unsigned int> {enum {value = true};};\n+template <> struct is_complex_scalar<unsigned long> {enum {value = true};};\n+template <> struct is_complex_scalar<unsigned long long> {enum {value = true};};\n+template <> struct is_complex_scalar<float> {enum {value = true};};\n+template <> struct is_complex_scalar<double> {enum {value = true};};\n+\n+template<class T>\n+inline typename enable_if<is_complex_scalar<T>::value, bool>::type operator==(const T& lhs, const dynd_complex<double>& rhs) {\n+    return dynd_complex<double>(lhs) == dynd_complex<double>(rhs);\n+}\n+\n inline dynd_complex<double> operator*(double lhs, const dynd_complex<double>& rhs) {", "path": "include/dynd/types/dynd_complex.hpp", "position": 37, "original_position": 37, "commit_id": "c7a96d8146d8b03629d5d7c20f34384d7b15d00f", "original_commit_id": "eb6cbb8b7a8c6e9cd9d715ace31705143d5bf032", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Some issues with comparing complex and double came up in the testing. This is what I needed to do to fix it.\n", "created_at": "2014-07-06T18:05:09Z", "updated_at": "2014-07-06T19:48:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/75#discussion_r14576520", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/75", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576520"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/75#discussion_r14576520"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/75"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576520/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576629", "pull_request_review_id": null, "id": 14576629, "diff_hunk": "@@ -532,6 +540,15 @@ if (DYND_CUDA)\n #    set(CUDA_SEPARABLE_COMPILATION ON)\n endif()\n \n+if (DYND_FFTW)\n+    find_path(FFTW_PATH fftw3.h)\n+    include_directories(${FFTW_PATH})\n+    set(DYND_LINK_LIBS ${DYND_LINK_LIBS} fftw3 fftw3f)\n+\n+    # Add a preprocessor definition to indicate we're building with FFTW\n+    add_definitions(-DDYND_FFTW)", "path": "CMakeLists.txt", "position": 64, "original_position": 64, "commit_id": "c7a96d8146d8b03629d5d7c20f34384d7b15d00f", "original_commit_id": "eb6cbb8b7a8c6e9cd9d715ace31705143d5bf032", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "It's a bit surprising that there's no FindFFTW3 included in cmake.\n", "created_at": "2014-07-06T18:33:35Z", "updated_at": "2014-07-06T19:48:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/75#discussion_r14576629", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/75", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576629"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/75#discussion_r14576629"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/75"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576629/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576646", "pull_request_review_id": null, "id": 14576646, "diff_hunk": "@@ -1052,6 +1052,24 @@ inline array dtyped_empty(intptr_t ndim, const intptr_t *shape,\n   }\n }\n \n+inline array dtyped_empty(intptr_t dim0, const ndt::type &tp) {\n+    return dtyped_empty(1, &dim0, tp);\n+}\n+inline array dtyped_empty(intptr_t dim0, intptr_t dim1, const ndt::type &tp) {\n+    intptr_t dims[2] = {dim0, dim1};\n+\n+    return dtyped_empty(2, dims, tp);\n+}\n+\n+/**\n+ * A version of dtyped_empty that accepts a std::vector as the shape.\n+ */\n+inline array dtyped_empty(const std::vector<intptr_t> &shape,\n+                         const ndt::type &tp)\n+{\n+  return dtyped_empty(shape.size(), shape.empty() ? NULL : &shape[0], tp);\n+}", "path": "include/dynd/array.hpp", "position": 20, "original_position": 20, "commit_id": "c7a96d8146d8b03629d5d7c20f34384d7b15d00f", "original_commit_id": "eb6cbb8b7a8c6e9cd9d715ace31705143d5bf032", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "I did nd::dtyped_empty as a version of nd::empty which just accepts the ndim/pointer pair, you should be able to just use nd::empty for this (and make the vector<> version an nd::empty overload). Do you know of a way to avoid the ambiguity of NULL between 0 and a pointer to avoid this workaround?\n", "created_at": "2014-07-06T18:36:25Z", "updated_at": "2014-07-06T19:48:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/75#discussion_r14576646", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/75", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576646"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/75#discussion_r14576646"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/75"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576672", "pull_request_review_id": null, "id": 14576672, "diff_hunk": "@@ -0,0 +1,191 @@\n+//\n+// Copyright (C) 2011-14 Irwin Zaid, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#ifndef _DYND__FFT_HPP_\n+#define _DYND__FFT_HPP_\n+\n+#ifdef DYND_FFTW\n+\n+#include <fftw3.h>", "path": "include/dynd/fft.hpp", "position": 11, "original_position": 11, "commit_id": "c7a96d8146d8b03629d5d7c20f34384d7b15d00f", "original_commit_id": "eb6cbb8b7a8c6e9cd9d715ace31705143d5bf032", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "Maybe we can come up with separate direct and mediated versions of these style of functions? The mediated versions going through an abstraction like the arrfunc, so with a bit more overhead.\n", "created_at": "2014-07-06T18:39:20Z", "updated_at": "2014-07-06T19:48:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/75#discussion_r14576672", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/75", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576672"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/75#discussion_r14576672"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/75"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576672/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576699", "pull_request_review_id": null, "id": 14576699, "diff_hunk": "@@ -16,4 +17,34 @@ namespace dynd { namespace nd {\n  */\n nd::array typed_rand(intptr_t ndim, const intptr_t *shape, const ndt::type &tp);\n ", "path": "include/dynd/random.hpp", "position": 11, "original_position": 11, "commit_id": "c7a96d8146d8b03629d5d7c20f34384d7b15d00f", "original_commit_id": "eb6cbb8b7a8c6e9cd9d715ace31705143d5bf032", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "Have you looked at the RNG library added in C++11? Maybe we can model support on that when we get there.\n", "created_at": "2014-07-06T18:43:16Z", "updated_at": "2014-07-06T19:48:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/75#discussion_r14576699", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/75", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576699"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/75#discussion_r14576699"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/75"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576699/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576710", "pull_request_review_id": null, "id": 14576710, "diff_hunk": "@@ -1785,6 +1785,22 @@ nd::array nd::typed_ones(intptr_t ndim, const intptr_t *shape,\n     return res;\n }\n \n+nd::array nd::concatenate(const nd::array &x, const nd::array &y) {\n+    if (x.get_ndim() != 1 || y.get_ndim() != 1) {\n+", "path": "src/dynd/array.cpp", "position": null, "original_position": 6, "commit_id": "c7a96d8146d8b03629d5d7c20f34384d7b15d00f", "original_commit_id": "eb6cbb8b7a8c6e9cd9d715ace31705143d5bf032", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "Did you mean to put a throw here? E.g. throw runtime_error(\"TODO: nd::concatenate is WIP\").\n", "created_at": "2014-07-06T18:44:50Z", "updated_at": "2014-07-06T19:48:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/75#discussion_r14576710", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/75", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576710"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/75#discussion_r14576710"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/75"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576720", "pull_request_review_id": null, "id": 14576720, "diff_hunk": "@@ -0,0 +1,371 @@\n+//\n+// Copyright (C) 2011-14 Irwin Zaid, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#include <map>\n+#include <tr1/tuple>\n+\n+#include <dynd/fft.hpp>\n+#include <dynd/func/take_arrfunc.hpp>\n+\n+using namespace std;\n+using namespace dynd;\n+\n+#ifdef DYND_FFTW\n+\n+namespace dynd { namespace fftw {\n+\n+typedef tr1::tuple<vector<intptr_t>, type_id_t, vector<intptr_t>, int,\n+    type_id_t, vector<intptr_t>, int, int, unsigned int> key_type;\n+static map<key_type, void *> plans;\n+", "path": "src/dynd/fft.cpp", "position": 22, "original_position": 22, "commit_id": "c7a96d8146d8b03629d5d7c20f34384d7b15d00f", "original_commit_id": "eb6cbb8b7a8c6e9cd9d715ace31705143d5bf032", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "I think the only platform that might be a problem is old gcc versions used by centos with which we're building anaconda packages. Let's see if it arises in practice though.\n", "created_at": "2014-07-06T18:49:02Z", "updated_at": "2014-07-06T19:48:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/75#discussion_r14576720", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/75", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576720"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/75#discussion_r14576720"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/75"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576954", "pull_request_review_id": null, "id": 14576954, "diff_hunk": "@@ -16,4 +17,34 @@ namespace dynd { namespace nd {\n  */\n nd::array typed_rand(intptr_t ndim, const intptr_t *shape, const ndt::type &tp);\n ", "path": "include/dynd/random.hpp", "position": 11, "original_position": 11, "commit_id": "c7a96d8146d8b03629d5d7c20f34384d7b15d00f", "original_commit_id": "eb6cbb8b7a8c6e9cd9d715ace31705143d5bf032", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Yeah, it looks pretty good. Seems like something we can work off of.\n", "created_at": "2014-07-06T19:39:14Z", "updated_at": "2014-07-06T19:48:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/75#discussion_r14576954", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/75", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576954"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/75#discussion_r14576954"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/75"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576956", "pull_request_review_id": null, "id": 14576956, "diff_hunk": "@@ -0,0 +1,371 @@\n+//\n+// Copyright (C) 2011-14 Irwin Zaid, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#include <map>\n+#include <tr1/tuple>\n+\n+#include <dynd/fft.hpp>\n+#include <dynd/func/take_arrfunc.hpp>\n+\n+using namespace std;\n+using namespace dynd;\n+\n+#ifdef DYND_FFTW\n+\n+namespace dynd { namespace fftw {\n+\n+typedef tr1::tuple<vector<intptr_t>, type_id_t, vector<intptr_t>, int,\n+    type_id_t, vector<intptr_t>, int, int, unsigned int> key_type;\n+static map<key_type, void *> plans;\n+", "path": "src/dynd/fft.cpp", "position": 22, "original_position": 22, "commit_id": "c7a96d8146d8b03629d5d7c20f34384d7b15d00f", "original_commit_id": "eb6cbb8b7a8c6e9cd9d715ace31705143d5bf032", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Cool, sounds good.\n", "created_at": "2014-07-06T19:39:33Z", "updated_at": "2014-07-06T19:48:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/75#discussion_r14576956", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/75", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576956"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/75#discussion_r14576956"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/75"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576957", "pull_request_review_id": null, "id": 14576957, "diff_hunk": "@@ -532,6 +540,15 @@ if (DYND_CUDA)\n #    set(CUDA_SEPARABLE_COMPILATION ON)\n endif()\n \n+if (DYND_FFTW)\n+    find_path(FFTW_PATH fftw3.h)\n+    include_directories(${FFTW_PATH})\n+    set(DYND_LINK_LIBS ${DYND_LINK_LIBS} fftw3 fftw3f)\n+\n+    # Add a preprocessor definition to indicate we're building with FFTW\n+    add_definitions(-DDYND_FFTW)", "path": "CMakeLists.txt", "position": 64, "original_position": 64, "commit_id": "c7a96d8146d8b03629d5d7c20f34384d7b15d00f", "original_commit_id": "eb6cbb8b7a8c6e9cd9d715ace31705143d5bf032", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "This is true.\n", "created_at": "2014-07-06T19:39:45Z", "updated_at": "2014-07-06T19:48:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/75#discussion_r14576957", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/75", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576957"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/75#discussion_r14576957"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/75"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14577003", "pull_request_review_id": null, "id": 14577003, "diff_hunk": "@@ -1052,6 +1052,24 @@ inline array dtyped_empty(intptr_t ndim, const intptr_t *shape,\n   }\n }\n \n+inline array dtyped_empty(intptr_t dim0, const ndt::type &tp) {\n+    return dtyped_empty(1, &dim0, tp);\n+}\n+inline array dtyped_empty(intptr_t dim0, intptr_t dim1, const ndt::type &tp) {\n+    intptr_t dims[2] = {dim0, dim1};\n+\n+    return dtyped_empty(2, dims, tp);\n+}\n+\n+/**\n+ * A version of dtyped_empty that accepts a std::vector as the shape.\n+ */\n+inline array dtyped_empty(const std::vector<intptr_t> &shape,\n+                         const ndt::type &tp)\n+{\n+  return dtyped_empty(shape.size(), shape.empty() ? NULL : &shape[0], tp);\n+}", "path": "include/dynd/array.hpp", "position": 20, "original_position": 20, "commit_id": "c7a96d8146d8b03629d5d7c20f34384d7b15d00f", "original_commit_id": "eb6cbb8b7a8c6e9cd9d715ace31705143d5bf032", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "A bit confused here -- what's wrong with this dtyped_empty?\n\nAs for the ambiguity, no ideas yet. Currently I'm just using static_casts to intptr_t to avoid it.\n", "created_at": "2014-07-06T19:47:00Z", "updated_at": "2014-07-06T19:48:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/75#discussion_r14577003", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/75", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14577003"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/75#discussion_r14577003"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/75"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14577003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14577007", "pull_request_review_id": null, "id": 14577007, "diff_hunk": "@@ -1785,6 +1785,22 @@ nd::array nd::typed_ones(intptr_t ndim, const intptr_t *shape,\n     return res;\n }\n \n+nd::array nd::concatenate(const nd::array &x, const nd::array &y) {\n+    if (x.get_ndim() != 1 || y.get_ndim() != 1) {\n+", "path": "src/dynd/array.cpp", "position": null, "original_position": 6, "commit_id": "c7a96d8146d8b03629d5d7c20f34384d7b15d00f", "original_commit_id": "eb6cbb8b7a8c6e9cd9d715ace31705143d5bf032", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Yes I did. Added and will commit now with these changes\n", "created_at": "2014-07-06T19:47:31Z", "updated_at": "2014-07-06T19:48:02Z", "html_url": "https://github.com/libdynd/libdynd/pull/75#discussion_r14577007", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/75", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14577007"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/75#discussion_r14577007"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/75"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14577007/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576950", "pull_request_review_id": null, "id": 14576950, "diff_hunk": "@@ -0,0 +1,191 @@\n+//\n+// Copyright (C) 2011-14 Irwin Zaid, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#ifndef _DYND__FFT_HPP_\n+#define _DYND__FFT_HPP_\n+\n+#ifdef DYND_FFTW\n+\n+#include <fftw3.h>", "path": "include/dynd/fft.hpp", "position": 11, "original_position": 11, "commit_id": "c7a96d8146d8b03629d5d7c20f34384d7b15d00f", "original_commit_id": "eb6cbb8b7a8c6e9cd9d715ace31705143d5bf032", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "I don't fully understand. Are the functions that currently exist the separate ones?\n\nEdit: Wait, unless you are proposing to split the header into two headers. One for direct versions, which is this. Another for mediated, which uses arrfunc to hide the FFTW components?\n\nIn any case, I can also move the fftw namespace to the .cpp file, it's not something I really care deeply about.\n", "created_at": "2014-07-06T19:38:36Z", "updated_at": "2014-07-06T19:52:57Z", "html_url": "https://github.com/libdynd/libdynd/pull/75#discussion_r14576950", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/75", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576950"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/75#discussion_r14576950"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/75"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14576950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14577858", "pull_request_review_id": null, "id": 14577858, "diff_hunk": "@@ -0,0 +1,684 @@\n+//\n+// Copyright (C) 2011-14 Irwin Zaid, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#include <iostream>\n+#include <stdexcept>\n+#include <algorithm>\n+#include <cmath>\n+\n+#include \"inc_gtest.hpp\"\n+#include \"dynd_assertions.hpp\"\n+\n+#include <dynd/fft.hpp>\n+#include <dynd/random.hpp>\n+\n+using namespace std;\n+using namespace dynd;\n+\n+template <typename T>\n+class FFT1D;\n+\n+template <typename T, int N>\n+class FFT1D<dynd_complex<T>[N]> : public ::testing::Test {\n+public:\n+    typedef T RealType;\n+    typedef dynd_complex<T> ComplexType;\n+\n+    static const intptr_t SrcShape[1];\n+    static const intptr_t SrcSize;\n+    typedef ComplexType SrcType;\n+\n+    static const intptr_t DstShape[1];\n+    static const intptr_t DstSize;\n+    typedef ComplexType DstType;\n+};\n+\n+template <typename T, int N>\n+const intptr_t FFT1D<dynd_complex<T>[N]>::SrcShape[1] = {N};\n+\n+template <typename T, int N>\n+const intptr_t FFT1D<dynd_complex<T>[N]>::SrcSize = SrcShape[0];\n+\n+template <typename T, int N>\n+const intptr_t FFT1D<dynd_complex<T>[N]>::DstShape[1] = {N};\n+\n+template <typename T, int N>\n+const intptr_t FFT1D<dynd_complex<T>[N]>::DstSize = DstShape[0];\n+\n+TYPED_TEST_CASE_P(FFT1D);\n+\n+template <typename T>\n+class RFFT1D;\n+\n+template <typename T, int N>\n+class RFFT1D<T[N]> : public ::testing::Test {\n+public:\n+    typedef T RealType;\n+    typedef dynd_complex<T> ComplexType;\n+\n+    static const intptr_t SrcShape[1];\n+    static const intptr_t SrcSize;\n+    typedef RealType SrcType;\n+\n+    static const intptr_t DstShape[1];\n+    static const intptr_t DstSize;\n+    typedef ComplexType DstType;\n+};\n+\n+template <typename T, int N>\n+const intptr_t RFFT1D<T[N]>::SrcShape[1] = {N};\n+\n+template <typename T, int N>\n+const intptr_t RFFT1D<T[N]>::SrcSize = SrcShape[0]; \n+\n+template <typename T, int N>\n+const intptr_t RFFT1D<T[N]>::DstShape[1] = {N / 2 + 1};\n+\n+template <typename T, int N>\n+const intptr_t RFFT1D<T[N]>::DstSize = DstShape[0]; \n+\n+TYPED_TEST_CASE_P(RFFT1D);\n+\n+template <typename T>\n+struct FixedDim1D {\n+    typedef testing::Types<T[4], T[8], T[17], T[25], T[64], T[76], T[99], T[128],\n+        T[203], T[256], T[512]> Types;    \n+};\n+\n+template <typename T>\n+class FFT2D;\n+\n+template <typename T, int M, int N>\n+class FFT2D<dynd_complex<T>[M][N]> : public ::testing::Test {\n+public:\n+    typedef T RealType;\n+    typedef dynd_complex<T> ComplexType;\n+\n+    static const intptr_t SrcShape[2];\n+    static const intptr_t SrcSize;\n+    typedef ComplexType SrcType;\n+\n+    static const intptr_t DstShape[2];\n+    static const intptr_t DstSize;\n+    typedef ComplexType DstType;\n+};\n+\n+template <typename T, int M, int N>\n+const intptr_t FFT2D<dynd_complex<T>[M][N]>::SrcShape[2] = {M, N};\n+\n+template <typename T, int M, int N>\n+const intptr_t FFT2D<dynd_complex<T>[M][N]>::SrcSize = SrcShape[0] * SrcShape[1];\n+\n+template <typename T, int M, int N>\n+const intptr_t FFT2D<dynd_complex<T>[M][N]>::DstShape[2] = {M, N};\n+\n+template <typename T, int M, int N>\n+const intptr_t FFT2D<dynd_complex<T>[M][N]>::DstSize = DstShape[0] * DstShape[1];\n+\n+TYPED_TEST_CASE_P(FFT2D);\n+\n+template <typename T>\n+class RFFT2D;\n+\n+template <typename T, int M, int N>\n+class RFFT2D<T[M][N]> : public ::testing::Test {\n+public:\n+    typedef T RealType;\n+    typedef dynd_complex<T> ComplexType;\n+\n+    static const intptr_t SrcShape[2];\n+    static const intptr_t SrcSize;\n+    typedef RealType SrcType;\n+\n+    static const intptr_t DstShape[2];\n+    static const intptr_t DstSize;\n+    typedef ComplexType DstType;\n+};\n+\n+template <typename T, int M, int N>\n+const intptr_t RFFT2D<T[M][N]>::SrcShape[2] = {M, N};\n+\n+template <typename T, int M, int N>\n+const intptr_t RFFT2D<T[M][N]>::SrcSize = SrcShape[0] * SrcShape[1]; \n+\n+template <typename T, int M, int N>\n+const intptr_t RFFT2D<T[M][N]>::DstShape[2] = {M, N / 2 + 1};\n+\n+template <typename T, int M, int N>\n+const intptr_t RFFT2D<T[M][N]>::DstSize = DstShape[0] * DstShape[1]; \n+\n+TYPED_TEST_CASE_P(RFFT2D);\n+\n+template <typename T>\n+struct FixedDim2D {\n+    typedef testing::Types<T[4][4], T[8][8], T[17][25], T[64][64], T[76][14], T[128][128],\n+        T[203][99], T[256][256], T[512][512]> Types;    \n+};\n+\n+template <typename T>\n+T rel_err_max();\n+\n+template <>\n+inline float rel_err_max<float>() {\n+    return 1E-4;\n+}\n+\n+template <>\n+inline double rel_err_max<double>() {\n+    return 1E-8;\n+}\n+\n+TYPED_TEST_P(FFT1D, Linear) {\n+    nd::array x0 = nd::dtyped_rand(TestFixture::SrcShape[0],\n+        ndt::make_type<typename TestFixture::SrcType>());\n+    nd::array x1 = nd::dtyped_rand(TestFixture::SrcShape[0],\n+        ndt::make_type<typename TestFixture::SrcType>());\n+    nd::array x = nd::dtyped_empty(TestFixture::SrcShape[0],\n+        ndt::make_type<typename TestFixture::SrcType>());\n+    x.vals() = x0 + x1;\n+\n+    nd::array y0 = fft(x0);\n+    nd::array y1 = fft(x1);\n+    nd::array y = fft(x);\n+\n+    for (int i = 0; i < TestFixture::DstShape[0]; ++i) {\n+        EXPECT_EQ_RELERR(y0(i).as<typename TestFixture::DstType>() + y1(i).as<typename TestFixture::DstType>(),\n+            y(i).as<typename TestFixture::DstType>(),\n+            rel_err_max<typename TestFixture::RealType>());\n+    }\n+}\n+\n+TYPED_TEST_P(FFT1D, Inverse) {\n+    nd::array x = nd::dtyped_rand(TestFixture::SrcShape[0],\n+        ndt::make_type<typename TestFixture::SrcType>());\n+\n+    nd::array y = ifft(fft(x));\n+    for (int i = 0; i < TestFixture::SrcShape[0]; ++i) {\n+        EXPECT_EQ_RELERR(x(i).as<typename TestFixture::SrcType>(),\n+            y(i).as<typename TestFixture::SrcType>() / TestFixture::SrcSize,\n+            rel_err_max<typename TestFixture::RealType>());\n+    }\n+}\n+\n+TYPED_TEST_P(FFT1D, Zeros) {\n+    nd::array x = nd::dtyped_zeros(TestFixture::SrcShape[0],\n+        ndt::make_type<typename TestFixture::SrcType>());\n+\n+    nd::array y = fft(x);\n+    for (int i = 0; i < TestFixture::DstShape[0]; ++i) {\n+        EXPECT_EQ(0, y(i).as<typename TestFixture::DstType>());\n+    }\n+}\n+\n+TYPED_TEST_P(FFT1D, Ones) {\n+    nd::array x = nd::dtyped_ones(TestFixture::SrcShape[0],\n+        ndt::make_type<typename TestFixture::SrcType>());\n+\n+    nd::array y = fft(x);\n+    for (int i = 0; i < TestFixture::DstShape[0]; ++i) {\n+        if (i == 0) {\n+            EXPECT_EQ_RELERR(TestFixture::SrcSize, y(i).as<typename TestFixture::DstType>(),\n+                rel_err_max<typename TestFixture::RealType>());\n+        } else {\n+            EXPECT_EQ_RELERR(0, y(i).as<typename TestFixture::DstType>(),\n+                rel_err_max<typename TestFixture::RealType>());\n+        }\n+    }\n+}\n+\n+TYPED_TEST_P(FFT1D, KroneckerDelta) {\n+    // Only continue if each dimension is divisible by 2\n+    if ((TestFixture::SrcShape[0] % 2) != 0) {\n+        return;\n+    }\n+\n+    nd::array x = nd::dtyped_zeros(TestFixture::SrcShape[0],\n+        ndt::make_type<typename TestFixture::SrcType>());\n+    x(TestFixture::SrcShape[0] / 2).vals() = 1;\n+\n+    nd::array y = fft(x);\n+    for (int i = 0; i < TestFixture::DstShape[0]; ++i) {\n+        EXPECT_EQ_RELERR(pow(static_cast<typename TestFixture::RealType>(-1), i),\n+            y(i).as<typename TestFixture::DstType>(),\n+            rel_err_max<typename TestFixture::RealType>());\n+    }\n+\n+    // Only continue if each dimension is divisible by 4\n+    if ((TestFixture::SrcShape[0] % 4) != 0) {\n+        return;\n+    }\n+\n+    y = fft(x(irange().by(2)));\n+    for (int i = 0; i < TestFixture::DstShape[0] / 2; ++i) {\n+        EXPECT_EQ_RELERR(pow(static_cast<typename TestFixture::RealType>(-1), i),\n+            y(i).as<typename TestFixture::DstType>(),\n+            rel_err_max<typename TestFixture::RealType>());\n+    }\n+}\n+\n+TEST(FFT1D, Shift) {\n+    double vals0[9] = {0.0, 1.0, 2.0, 3.0, 4.0, -4.0, -3.0, -2.0, -1.0};\n+\n+    nd::array x0 = nd::empty<double[9]>();\n+    x0.vals() = vals0;\n+\n+    nd::array y0 = fftshift(x0);\n+    EXPECT_EQ(y0(0).as<double>(), -4.0);\n+    EXPECT_EQ(y0(1).as<double>(), -3.0);\n+    EXPECT_EQ(y0(2).as<double>(), -2.0);\n+    EXPECT_EQ(y0(3).as<double>(), -1.0);\n+    EXPECT_EQ(y0(4).as<double>(), 0.0);\n+    EXPECT_EQ(y0(5).as<double>(), 1.0);\n+    EXPECT_EQ(y0(6).as<double>(), 2.0);\n+    EXPECT_EQ(y0(7).as<double>(), 3.0);\n+    EXPECT_EQ(y0(8).as<double>(), 4.0);\n+\n+    y0 = ifftshift(y0);\n+    for (int i = 0; i < 9; ++i) {\n+        EXPECT_EQ(y0(i).as<double>(), x0(i).as<double>());\n+    }\n+\n+    double vals1[10] = {0.0, 1.0, 2.0, 3.0, 4.0, -5.0, -4.0, -3.0, -2.0, -1.0};\n+\n+    nd::array x1 = nd::empty<double[10]>();\n+    x1.vals() = vals1;\n+\n+    nd::array y1 = fftshift(x1);\n+    EXPECT_EQ(y1(0).as<double>(), -5.0);\n+    EXPECT_EQ(y1(1).as<double>(), -4.0);\n+    EXPECT_EQ(y1(2).as<double>(), -3.0);\n+    EXPECT_EQ(y1(3).as<double>(), -2.0);\n+    EXPECT_EQ(y1(4).as<double>(), -1.0);\n+    EXPECT_EQ(y1(5).as<double>(), 0.0);\n+    EXPECT_EQ(y1(6).as<double>(), 1.0);\n+    EXPECT_EQ(y1(7).as<double>(), 2.0);\n+    EXPECT_EQ(y1(8).as<double>(), 3.0);\n+    EXPECT_EQ(y1(9).as<double>(), 4.0);\n+\n+    y1 = ifftshift(y1);\n+    for (int i = 0; i < 10; ++i) {\n+        EXPECT_EQ(y1(i).as<double>(), x1(i).as<double>());\n+    }\n+}\n+\n+TYPED_TEST_P(RFFT1D, Linear) {\n+    nd::array x0 = nd::dtyped_rand(TestFixture::SrcShape[0],\n+        ndt::make_type<typename TestFixture::SrcType>());\n+    nd::array x1 = nd::dtyped_rand(TestFixture::SrcShape[0],\n+        ndt::make_type<typename TestFixture::SrcType>());\n+    nd::array x = nd::dtyped_empty(TestFixture::SrcShape[0],\n+        ndt::make_type<typename TestFixture::SrcType>());\n+    x.vals() = x0 + x1;\n+\n+    nd::array y0 = rfft(x0);\n+    nd::array y1 = rfft(x1);\n+    nd::array y = rfft(x);\n+\n+    for (int i = 0; i < TestFixture::DstShape[0]; ++i) {\n+        EXPECT_EQ_RELERR(y0(i).as<typename TestFixture::DstType>() + y1(i).as<typename TestFixture::DstType>(),\n+            y(i).as<typename TestFixture::DstType>(),\n+            rel_err_max<typename TestFixture::RealType>());\n+    }\n+}\n+\n+TYPED_TEST_P(RFFT1D, Inverse) {\n+    nd::array x = nd::dtyped_rand(TestFixture::SrcShape[0],\n+        ndt::make_type<typename TestFixture::SrcType>());\n+\n+    nd::array y = irfft(rfft(x), TestFixture::SrcShape[0]);\n+    for (int i = 0; i < TestFixture::SrcShape[0]; ++i) {\n+        EXPECT_EQ_RELERR(x(i).as<typename TestFixture::SrcType>(),\n+            y(i).as<typename TestFixture::SrcType>() / TestFixture::SrcSize,\n+            rel_err_max<typename TestFixture::RealType>());\n+    }\n+}\n+\n+TYPED_TEST_P(RFFT1D, Zeros) {\n+    nd::array x = nd::dtyped_zeros(TestFixture::SrcShape[0],\n+        ndt::make_type<typename TestFixture::SrcType>());\n+\n+    nd::array y = rfft(x);\n+    for (int i = 0; i < TestFixture::DstShape[0]; ++i) {\n+        EXPECT_EQ(0, y(i).as<typename TestFixture::DstType>());\n+    }\n+}\n+\n+TYPED_TEST_P(RFFT1D, Ones) {\n+    nd::array x = nd::dtyped_ones(TestFixture::SrcShape[0],\n+        ndt::make_type<typename TestFixture::SrcType>());\n+\n+    nd::array y = rfft(x);\n+    for (int i = 0; i < TestFixture::DstShape[0]; ++i) {\n+        if (i == 0) {\n+            EXPECT_EQ_RELERR(TestFixture::SrcSize, y(i).as<typename TestFixture::DstType>(),\n+                rel_err_max<typename TestFixture::RealType>());\n+        } else {\n+            EXPECT_EQ_RELERR(0, y(i).as<typename TestFixture::DstType>(),\n+                rel_err_max<typename TestFixture::RealType>());\n+        }\n+    }\n+}\n+\n+TYPED_TEST_P(RFFT1D, KroneckerDelta) {\n+    // Only continue if each dimension is divisible by 2\n+    if ((TestFixture::SrcShape[0] % 2) != 0) {\n+        return;\n+    }\n+\n+    nd::array x = nd::dtyped_zeros(TestFixture::SrcShape[0],\n+        ndt::make_type<typename TestFixture::SrcType>());\n+    x(TestFixture::SrcShape[0] / 2).vals() = 1;\n+\n+    nd::array y = rfft(x);\n+    for (int i = 0; i < TestFixture::DstShape[0]; ++i) {\n+        EXPECT_EQ_RELERR(pow(static_cast<typename TestFixture::RealType>(-1), i),\n+            y(i).as<typename TestFixture::DstType>(),\n+            rel_err_max<typename TestFixture::RealType>());\n+    }\n+\n+    // Only continue if each dimension is divisible by 4\n+    if ((TestFixture::SrcShape[0] % 4) != 0) {\n+        return;\n+    }\n+\n+    y = rfft(x(irange().by(2)));\n+    for (int i = 0; i < TestFixture::DstShape[0] / 2; ++i) {\n+        EXPECT_EQ_RELERR(pow(static_cast<typename TestFixture::RealType>(-1), i),\n+            y(i).as<typename TestFixture::DstType>(),\n+            rel_err_max<typename TestFixture::RealType>());\n+    }\n+}\n+\n+TYPED_TEST_P(FFT2D, Linear) {\n+    nd::array x0 = nd::dtyped_rand(TestFixture::SrcShape[0], TestFixture::SrcShape[1],\n+        ndt::make_type<typename TestFixture::SrcType>());\n+    nd::array x1 = nd::dtyped_rand(TestFixture::SrcShape[0], TestFixture::SrcShape[1],\n+        ndt::make_type<typename TestFixture::SrcType>());\n+    nd::array x = nd::dtyped_empty(TestFixture::SrcShape[0], TestFixture::SrcShape[1],\n+        ndt::make_type<typename TestFixture::SrcType>());\n+    x.vals() = x0 + x1;\n+\n+    nd::array y0 = fft(x0);\n+    nd::array y1 = fft(x1);\n+    nd::array y = fft(x);\n+\n+    for (int i = 0; i < TestFixture::DstShape[0]; ++i) {\n+        for (int j = 0; j < TestFixture::DstShape[1]; ++j) {\n+            EXPECT_EQ_RELERR(y0(i, j).as<typename TestFixture::DstType>() + y1(i, j).as<typename TestFixture::DstType>(),\n+                y(i, j).as<typename TestFixture::DstType>(),\n+                rel_err_max<typename TestFixture::RealType>());\n+        }\n+    }\n+}\n+\n+TYPED_TEST_P(FFT2D, Inverse) {\n+    nd::array x = nd::dtyped_rand(TestFixture::SrcShape[0], TestFixture::SrcShape[1],\n+        ndt::make_type<typename TestFixture::SrcType>());\n+\n+    nd::array y = ifft(fft(x));\n+    for (int i = 0; i < TestFixture::SrcShape[0]; ++i) {\n+        for (int j = 0; j < TestFixture::SrcShape[1]; ++j) {\n+            EXPECT_EQ_RELERR(x(i, j).as<typename TestFixture::SrcType>(),\n+                y(i, j).as<typename TestFixture::SrcType>() / TestFixture::SrcSize,\n+                rel_err_max<typename TestFixture::RealType>());\n+        }\n+    }\n+}\n+\n+TYPED_TEST_P(FFT2D, Zeros) {\n+    nd::array x = nd::dtyped_zeros(TestFixture::SrcShape[0], TestFixture::SrcShape[1],\n+        ndt::make_type<typename TestFixture::SrcType>());\n+\n+    nd::array y = fft(x);\n+    for (int i = 0; i < TestFixture::DstShape[0]; ++i) {\n+        for (int j = 0; j < TestFixture::DstShape[1]; ++j) {\n+            EXPECT_EQ(0, y(i, j).as<typename TestFixture::DstType>());\n+        }\n+    }\n+}\n+\n+TYPED_TEST_P(FFT2D, Ones) {\n+    nd::array x = nd::dtyped_ones(TestFixture::SrcShape[0], TestFixture::SrcShape[1],\n+        ndt::make_type<typename TestFixture::SrcType>());\n+\n+    nd::array y = fft(x);\n+    for (int i = 0; i < TestFixture::DstShape[0]; ++i) {\n+        for (int j = 0; j < TestFixture::DstShape[1]; ++j) {\n+            if (i == 0 && j == 0) {\n+                EXPECT_EQ_RELERR(TestFixture::SrcSize, y(i, j).as<typename TestFixture::DstType>(),\n+                    rel_err_max<typename TestFixture::RealType>());\n+            } else {\n+                EXPECT_EQ_RELERR(0, y(i, j).as<typename TestFixture::DstType>(),\n+                    rel_err_max<typename TestFixture::RealType>());\n+            }\n+        }\n+    }\n+}\n+\n+TYPED_TEST_P(FFT2D, KroneckerDelta) {\n+    // Only continue if each dimension is divisible by 2\n+    if ((TestFixture::SrcShape[0] % 2) != 0 || (TestFixture::SrcShape[1] % 2) != 0) {\n+        return;\n+    }\n+\n+    nd::array x = nd::dtyped_zeros(TestFixture::SrcShape[0], TestFixture::SrcShape[1],\n+        ndt::make_type<typename TestFixture::SrcType>());\n+    x(TestFixture::SrcShape[0] / 2, TestFixture::SrcShape[1] / 2).vals() = 1;\n+\n+    nd::array y = fft(x);\n+    for (int i = 0; i < TestFixture::DstShape[0]; ++i) {\n+        for (int j = 0; j < TestFixture::DstShape[1]; ++j) {\n+            EXPECT_EQ_RELERR(pow(static_cast<typename TestFixture::RealType>(-1), i + j),\n+                y(i, j).as<typename TestFixture::DstType>(),\n+                rel_err_max<typename TestFixture::RealType>());\n+        }\n+    }\n+\n+    // Only continue if each dimension is divisible by 4\n+    if ((TestFixture::SrcShape[0] % 4) != 0 || (TestFixture::SrcShape[1] % 4) != 0) {\n+        return;\n+    }\n+\n+    y = fft(x(irange().by(2), irange().by(2)));\n+    for (int i = 0; i < TestFixture::DstShape[0] / 2; ++i) {\n+        for (int j = 0; j < TestFixture::DstShape[1] / 2; ++j) {\n+            EXPECT_EQ_RELERR(pow(static_cast<typename TestFixture::RealType>(-1), i + j),\n+                y(i, j).as<typename TestFixture::DstType>(),\n+                rel_err_max<typename TestFixture::RealType>());\n+        }\n+    }\n+}\n+\n+TEST(FFT2D, Shift) {\n+    double vals0[3][3] = {{0.0, 1.0, 2.0}, {3.0, 4.0, -4.0}, {-3.0, -2.0, -1.0}};\n+\n+    nd::array x0 = nd::empty<double[3][3]>();\n+    x0.vals() = vals0;\n+\n+    nd::array y0 = fftshift(x0);\n+    EXPECT_EQ(y0(0, 0).as<double>(), -1.0);\n+    EXPECT_EQ(y0(0, 1).as<double>(), -3.0);\n+    EXPECT_EQ(y0(0, 2).as<double>(), -2.0);\n+    EXPECT_EQ(y0(1, 0).as<double>(), 2.0);\n+    EXPECT_EQ(y0(1, 1).as<double>(), 0.0);\n+    EXPECT_EQ(y0(1, 2).as<double>(), 1.0);\n+    EXPECT_EQ(y0(2, 0).as<double>(), -4.0);\n+    EXPECT_EQ(y0(2, 1).as<double>(), 3.0);\n+    EXPECT_EQ(y0(2, 2).as<double>(), 4.0);\n+\n+    y0 = ifftshift(y0);\n+    for (int i = 0; i < 3; ++i) {\n+        for (int j = 0; j < 3; ++j) {\n+            EXPECT_EQ(y0(i, j).as<double>(), x0(i, j).as<double>());\n+        }\n+    }\n+\n+    double vals1[4][2] = {{0.0, 5.0}, {1.0, 8.0}, {-6.0, 7.0}, {3.0, -1.0}};\n+\n+    nd::array x1 = nd::empty<double[4][2]>();\n+    x1.vals() = vals1;\n+\n+    nd::array y1 = fftshift(x1);\n+    EXPECT_EQ(y1(0, 0).as<double>(), 7.0);\n+    EXPECT_EQ(y1(0, 1).as<double>(), -6.0);\n+    EXPECT_EQ(y1(1, 0).as<double>(), -1.0);\n+    EXPECT_EQ(y1(1, 1).as<double>(), 3.0);\n+    EXPECT_EQ(y1(2, 0).as<double>(), 5.0);\n+    EXPECT_EQ(y1(2, 1).as<double>(), 0.0);\n+    EXPECT_EQ(y1(3, 0).as<double>(), 8.0);\n+    EXPECT_EQ(y1(3, 1).as<double>(), 1.0);\n+\n+    y1 = ifftshift(y1);\n+    for (int i = 0; i < 4; ++i) {\n+        for (int j = 0; j < 2; ++j) {\n+            EXPECT_EQ(y1(i, j).as<double>(), x1(i, j).as<double>());\n+        }\n+    }\n+\n+    double vals2[2][3] = {{0.0, 5.0, 1.0}, {8.0, -6.0, 7.0}};\n+\n+    nd::array x2 = nd::empty<double[2][3]>();\n+    x2.vals() = vals2;\n+\n+    nd::array y2 = fftshift(x2);\n+    EXPECT_EQ(y2(0, 0).as<double>(), 7.0);\n+    EXPECT_EQ(y2(0, 1).as<double>(), 8.0);\n+    EXPECT_EQ(y2(0, 2).as<double>(), -6.0);\n+    EXPECT_EQ(y2(1, 0).as<double>(), 1.0);\n+    EXPECT_EQ(y2(1, 1).as<double>(), 0.0);\n+    EXPECT_EQ(y2(1, 2).as<double>(), 5.0);\n+\n+    y2 = ifftshift(y2);\n+    for (int i = 0; i < 2; ++i) {\n+        for (int j = 0; j < 3; ++j) {\n+            EXPECT_EQ(y2(i, j).as<double>(), x2(i, j).as<double>());\n+        }\n+    }\n+}\n+\n+TYPED_TEST_P(RFFT2D, Linear) {\n+    nd::array x0 = nd::dtyped_rand(TestFixture::SrcShape[0], TestFixture::SrcShape[1],\n+        ndt::make_type<typename TestFixture::SrcType>());\n+    nd::array x1 = nd::dtyped_rand(TestFixture::SrcShape[0], TestFixture::SrcShape[1],\n+        ndt::make_type<typename TestFixture::SrcType>());\n+    nd::array x = nd::dtyped_empty(TestFixture::SrcShape[0], TestFixture::SrcShape[1],\n+        ndt::make_type<typename TestFixture::SrcType>());\n+    x.vals() = x0 + x1;\n+", "path": "tests/test_fft.cpp", "position": 569, "original_position": 569, "commit_id": "c7a96d8146d8b03629d5d7c20f34384d7b15d00f", "original_commit_id": "c7a96d8146d8b03629d5d7c20f34384d7b15d00f", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "This is a good example of why having immutable arrays created by default can be weird sometimes. I should just be able to do 'nd::array x = x0 + x1'.\n", "created_at": "2014-07-06T21:52:37Z", "updated_at": "2014-07-06T21:52:37Z", "html_url": "https://github.com/libdynd/libdynd/pull/75#discussion_r14577858", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/75", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14577858"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/75#discussion_r14577858"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/75"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14577858/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14579202", "pull_request_review_id": null, "id": 14579202, "diff_hunk": "@@ -1052,6 +1052,24 @@ inline array dtyped_empty(intptr_t ndim, const intptr_t *shape,\n   }\n }\n \n+inline array dtyped_empty(intptr_t dim0, const ndt::type &tp) {\n+    return dtyped_empty(1, &dim0, tp);\n+}\n+inline array dtyped_empty(intptr_t dim0, intptr_t dim1, const ndt::type &tp) {\n+    intptr_t dims[2] = {dim0, dim1};\n+\n+    return dtyped_empty(2, dims, tp);\n+}\n+\n+/**\n+ * A version of dtyped_empty that accepts a std::vector as the shape.\n+ */\n+inline array dtyped_empty(const std::vector<intptr_t> &shape,\n+                         const ndt::type &tp)\n+{\n+  return dtyped_empty(shape.size(), shape.empty() ? NULL : &shape[0], tp);\n+}", "path": "include/dynd/array.hpp", "position": 20, "original_position": 20, "commit_id": "c7a96d8146d8b03629d5d7c20f34384d7b15d00f", "original_commit_id": "eb6cbb8b7a8c6e9cd9d715ace31705143d5bf032", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "Nothing wrong, just I think we had different ideas about things: I had nd::empty pegged as the convenient API for numpy-like construction, and nd::dtyped_empty as the exact same API function but that  takes the raw shape array, so that the ambiguity is avoided by there being different names. That's not satisfactory, though, but neither is requiring users of the library to have to know that nd::empty(0, NULL, dtype) would create a 2D 0x0 array of the given dtype instead of a scalar.\n", "created_at": "2014-07-07T01:17:49Z", "updated_at": "2014-07-07T01:17:49Z", "html_url": "https://github.com/libdynd/libdynd/pull/75#discussion_r14579202", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/75", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14579202"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/75#discussion_r14579202"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/75"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14579202/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14579226", "pull_request_review_id": null, "id": 14579226, "diff_hunk": "@@ -0,0 +1,191 @@\n+//\n+// Copyright (C) 2011-14 Irwin Zaid, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#ifndef _DYND__FFT_HPP_\n+#define _DYND__FFT_HPP_\n+\n+#ifdef DYND_FFTW\n+\n+#include <fftw3.h>", "path": "include/dynd/fft.hpp", "position": 11, "original_position": 11, "commit_id": "c7a96d8146d8b03629d5d7c20f34384d7b15d00f", "original_commit_id": "eb6cbb8b7a8c6e9cd9d715ace31705143d5bf032", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "Yeah, your edit is what I was suggesting.\n", "created_at": "2014-07-07T01:19:55Z", "updated_at": "2014-07-07T01:19:55Z", "html_url": "https://github.com/libdynd/libdynd/pull/75#discussion_r14579226", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/75", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14579226"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/75#discussion_r14579226"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/75"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14579226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14579691", "pull_request_review_id": null, "id": 14579691, "diff_hunk": "@@ -0,0 +1,684 @@\n+//\n+// Copyright (C) 2011-14 Irwin Zaid, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#include <iostream>\n+#include <stdexcept>\n+#include <algorithm>\n+#include <cmath>\n+\n+#include \"inc_gtest.hpp\"\n+#include \"dynd_assertions.hpp\"\n+\n+#include <dynd/fft.hpp>\n+#include <dynd/random.hpp>\n+\n+using namespace std;\n+using namespace dynd;\n+\n+template <typename T>\n+class FFT1D;\n+\n+template <typename T, int N>\n+class FFT1D<dynd_complex<T>[N]> : public ::testing::Test {\n+public:\n+    typedef T RealType;\n+    typedef dynd_complex<T> ComplexType;\n+\n+    static const intptr_t SrcShape[1];\n+    static const intptr_t SrcSize;\n+    typedef ComplexType SrcType;\n+\n+    static const intptr_t DstShape[1];\n+    static const intptr_t DstSize;\n+    typedef ComplexType DstType;\n+};\n+\n+template <typename T, int N>\n+const intptr_t FFT1D<dynd_complex<T>[N]>::SrcShape[1] = {N};\n+\n+template <typename T, int N>\n+const intptr_t FFT1D<dynd_complex<T>[N]>::SrcSize = SrcShape[0];\n+\n+template <typename T, int N>\n+const intptr_t FFT1D<dynd_complex<T>[N]>::DstShape[1] = {N};\n+\n+template <typename T, int N>\n+const intptr_t FFT1D<dynd_complex<T>[N]>::DstSize = DstShape[0];\n+\n+TYPED_TEST_CASE_P(FFT1D);\n+\n+template <typename T>\n+class RFFT1D;\n+\n+template <typename T, int N>\n+class RFFT1D<T[N]> : public ::testing::Test {\n+public:\n+    typedef T RealType;\n+    typedef dynd_complex<T> ComplexType;\n+\n+    static const intptr_t SrcShape[1];\n+    static const intptr_t SrcSize;\n+    typedef RealType SrcType;\n+\n+    static const intptr_t DstShape[1];\n+    static const intptr_t DstSize;\n+    typedef ComplexType DstType;\n+};\n+\n+template <typename T, int N>\n+const intptr_t RFFT1D<T[N]>::SrcShape[1] = {N};\n+\n+template <typename T, int N>\n+const intptr_t RFFT1D<T[N]>::SrcSize = SrcShape[0]; \n+\n+template <typename T, int N>\n+const intptr_t RFFT1D<T[N]>::DstShape[1] = {N / 2 + 1};\n+\n+template <typename T, int N>\n+const intptr_t RFFT1D<T[N]>::DstSize = DstShape[0]; \n+\n+TYPED_TEST_CASE_P(RFFT1D);\n+\n+template <typename T>\n+struct FixedDim1D {\n+    typedef testing::Types<T[4], T[8], T[17], T[25], T[64], T[76], T[99], T[128],\n+        T[203], T[256], T[512]> Types;    \n+};\n+\n+template <typename T>\n+class FFT2D;\n+\n+template <typename T, int M, int N>\n+class FFT2D<dynd_complex<T>[M][N]> : public ::testing::Test {\n+public:\n+    typedef T RealType;\n+    typedef dynd_complex<T> ComplexType;\n+\n+    static const intptr_t SrcShape[2];\n+    static const intptr_t SrcSize;\n+    typedef ComplexType SrcType;\n+\n+    static const intptr_t DstShape[2];\n+    static const intptr_t DstSize;\n+    typedef ComplexType DstType;\n+};\n+\n+template <typename T, int M, int N>\n+const intptr_t FFT2D<dynd_complex<T>[M][N]>::SrcShape[2] = {M, N};\n+\n+template <typename T, int M, int N>\n+const intptr_t FFT2D<dynd_complex<T>[M][N]>::SrcSize = SrcShape[0] * SrcShape[1];\n+\n+template <typename T, int M, int N>\n+const intptr_t FFT2D<dynd_complex<T>[M][N]>::DstShape[2] = {M, N};\n+\n+template <typename T, int M, int N>\n+const intptr_t FFT2D<dynd_complex<T>[M][N]>::DstSize = DstShape[0] * DstShape[1];\n+\n+TYPED_TEST_CASE_P(FFT2D);\n+\n+template <typename T>\n+class RFFT2D;\n+\n+template <typename T, int M, int N>\n+class RFFT2D<T[M][N]> : public ::testing::Test {\n+public:\n+    typedef T RealType;\n+    typedef dynd_complex<T> ComplexType;\n+\n+    static const intptr_t SrcShape[2];\n+    static const intptr_t SrcSize;\n+    typedef RealType SrcType;\n+\n+    static const intptr_t DstShape[2];\n+    static const intptr_t DstSize;\n+    typedef ComplexType DstType;\n+};\n+\n+template <typename T, int M, int N>\n+const intptr_t RFFT2D<T[M][N]>::SrcShape[2] = {M, N};\n+\n+template <typename T, int M, int N>\n+const intptr_t RFFT2D<T[M][N]>::SrcSize = SrcShape[0] * SrcShape[1]; \n+\n+template <typename T, int M, int N>\n+const intptr_t RFFT2D<T[M][N]>::DstShape[2] = {M, N / 2 + 1};\n+\n+template <typename T, int M, int N>\n+const intptr_t RFFT2D<T[M][N]>::DstSize = DstShape[0] * DstShape[1]; \n+\n+TYPED_TEST_CASE_P(RFFT2D);\n+\n+template <typename T>\n+struct FixedDim2D {\n+    typedef testing::Types<T[4][4], T[8][8], T[17][25], T[64][64], T[76][14], T[128][128],\n+        T[203][99], T[256][256], T[512][512]> Types;    \n+};\n+\n+template <typename T>\n+T rel_err_max();\n+\n+template <>\n+inline float rel_err_max<float>() {\n+    return 1E-4;\n+}\n+\n+template <>\n+inline double rel_err_max<double>() {\n+    return 1E-8;\n+}\n+\n+TYPED_TEST_P(FFT1D, Linear) {\n+    nd::array x0 = nd::dtyped_rand(TestFixture::SrcShape[0],\n+        ndt::make_type<typename TestFixture::SrcType>());\n+    nd::array x1 = nd::dtyped_rand(TestFixture::SrcShape[0],\n+        ndt::make_type<typename TestFixture::SrcType>());\n+    nd::array x = nd::dtyped_empty(TestFixture::SrcShape[0],\n+        ndt::make_type<typename TestFixture::SrcType>());\n+    x.vals() = x0 + x1;\n+\n+    nd::array y0 = fft(x0);\n+    nd::array y1 = fft(x1);\n+    nd::array y = fft(x);\n+\n+    for (int i = 0; i < TestFixture::DstShape[0]; ++i) {\n+        EXPECT_EQ_RELERR(y0(i).as<typename TestFixture::DstType>() + y1(i).as<typename TestFixture::DstType>(),\n+            y(i).as<typename TestFixture::DstType>(),\n+            rel_err_max<typename TestFixture::RealType>());\n+    }\n+}\n+\n+TYPED_TEST_P(FFT1D, Inverse) {\n+    nd::array x = nd::dtyped_rand(TestFixture::SrcShape[0],\n+        ndt::make_type<typename TestFixture::SrcType>());\n+\n+    nd::array y = ifft(fft(x));\n+    for (int i = 0; i < TestFixture::SrcShape[0]; ++i) {\n+        EXPECT_EQ_RELERR(x(i).as<typename TestFixture::SrcType>(),\n+            y(i).as<typename TestFixture::SrcType>() / TestFixture::SrcSize,\n+            rel_err_max<typename TestFixture::RealType>());\n+    }\n+}\n+\n+TYPED_TEST_P(FFT1D, Zeros) {\n+    nd::array x = nd::dtyped_zeros(TestFixture::SrcShape[0],\n+        ndt::make_type<typename TestFixture::SrcType>());\n+\n+    nd::array y = fft(x);\n+    for (int i = 0; i < TestFixture::DstShape[0]; ++i) {\n+        EXPECT_EQ(0, y(i).as<typename TestFixture::DstType>());\n+    }\n+}\n+\n+TYPED_TEST_P(FFT1D, Ones) {\n+    nd::array x = nd::dtyped_ones(TestFixture::SrcShape[0],\n+        ndt::make_type<typename TestFixture::SrcType>());\n+\n+    nd::array y = fft(x);\n+    for (int i = 0; i < TestFixture::DstShape[0]; ++i) {\n+        if (i == 0) {\n+            EXPECT_EQ_RELERR(TestFixture::SrcSize, y(i).as<typename TestFixture::DstType>(),\n+                rel_err_max<typename TestFixture::RealType>());\n+        } else {\n+            EXPECT_EQ_RELERR(0, y(i).as<typename TestFixture::DstType>(),\n+                rel_err_max<typename TestFixture::RealType>());\n+        }\n+    }\n+}\n+\n+TYPED_TEST_P(FFT1D, KroneckerDelta) {\n+    // Only continue if each dimension is divisible by 2\n+    if ((TestFixture::SrcShape[0] % 2) != 0) {\n+        return;\n+    }\n+\n+    nd::array x = nd::dtyped_zeros(TestFixture::SrcShape[0],\n+        ndt::make_type<typename TestFixture::SrcType>());\n+    x(TestFixture::SrcShape[0] / 2).vals() = 1;\n+\n+    nd::array y = fft(x);\n+    for (int i = 0; i < TestFixture::DstShape[0]; ++i) {\n+        EXPECT_EQ_RELERR(pow(static_cast<typename TestFixture::RealType>(-1), i),\n+            y(i).as<typename TestFixture::DstType>(),\n+            rel_err_max<typename TestFixture::RealType>());\n+    }\n+\n+    // Only continue if each dimension is divisible by 4\n+    if ((TestFixture::SrcShape[0] % 4) != 0) {\n+        return;\n+    }\n+\n+    y = fft(x(irange().by(2)));\n+    for (int i = 0; i < TestFixture::DstShape[0] / 2; ++i) {\n+        EXPECT_EQ_RELERR(pow(static_cast<typename TestFixture::RealType>(-1), i),\n+            y(i).as<typename TestFixture::DstType>(),\n+            rel_err_max<typename TestFixture::RealType>());\n+    }\n+}\n+\n+TEST(FFT1D, Shift) {\n+    double vals0[9] = {0.0, 1.0, 2.0, 3.0, 4.0, -4.0, -3.0, -2.0, -1.0};\n+\n+    nd::array x0 = nd::empty<double[9]>();\n+    x0.vals() = vals0;", "path": "tests/test_fft.cpp", "position": 265, "original_position": 265, "commit_id": "c7a96d8146d8b03629d5d7c20f34384d7b15d00f", "original_commit_id": "c7a96d8146d8b03629d5d7c20f34384d7b15d00f", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "Simply `nd::array x0 = vals0;` should be equivalent to these two lines.\n", "created_at": "2014-07-07T02:12:25Z", "updated_at": "2014-07-07T02:12:25Z", "html_url": "https://github.com/libdynd/libdynd/pull/75#discussion_r14579691", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/75", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14579691"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/75#discussion_r14579691"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/75"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14579691/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14579717", "pull_request_review_id": null, "id": 14579717, "diff_hunk": "@@ -0,0 +1,684 @@\n+//\n+// Copyright (C) 2011-14 Irwin Zaid, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#include <iostream>\n+#include <stdexcept>\n+#include <algorithm>\n+#include <cmath>\n+\n+#include \"inc_gtest.hpp\"\n+#include \"dynd_assertions.hpp\"\n+\n+#include <dynd/fft.hpp>\n+#include <dynd/random.hpp>\n+\n+using namespace std;\n+using namespace dynd;\n+\n+template <typename T>\n+class FFT1D;\n+\n+template <typename T, int N>\n+class FFT1D<dynd_complex<T>[N]> : public ::testing::Test {\n+public:\n+    typedef T RealType;\n+    typedef dynd_complex<T> ComplexType;\n+\n+    static const intptr_t SrcShape[1];\n+    static const intptr_t SrcSize;\n+    typedef ComplexType SrcType;\n+\n+    static const intptr_t DstShape[1];\n+    static const intptr_t DstSize;\n+    typedef ComplexType DstType;\n+};\n+\n+template <typename T, int N>\n+const intptr_t FFT1D<dynd_complex<T>[N]>::SrcShape[1] = {N};\n+\n+template <typename T, int N>\n+const intptr_t FFT1D<dynd_complex<T>[N]>::SrcSize = SrcShape[0];\n+\n+template <typename T, int N>\n+const intptr_t FFT1D<dynd_complex<T>[N]>::DstShape[1] = {N};\n+\n+template <typename T, int N>\n+const intptr_t FFT1D<dynd_complex<T>[N]>::DstSize = DstShape[0];\n+\n+TYPED_TEST_CASE_P(FFT1D);\n+\n+template <typename T>\n+class RFFT1D;\n+\n+template <typename T, int N>\n+class RFFT1D<T[N]> : public ::testing::Test {\n+public:\n+    typedef T RealType;\n+    typedef dynd_complex<T> ComplexType;\n+\n+    static const intptr_t SrcShape[1];\n+    static const intptr_t SrcSize;\n+    typedef RealType SrcType;\n+\n+    static const intptr_t DstShape[1];\n+    static const intptr_t DstSize;\n+    typedef ComplexType DstType;\n+};\n+\n+template <typename T, int N>\n+const intptr_t RFFT1D<T[N]>::SrcShape[1] = {N};\n+\n+template <typename T, int N>\n+const intptr_t RFFT1D<T[N]>::SrcSize = SrcShape[0]; \n+\n+template <typename T, int N>\n+const intptr_t RFFT1D<T[N]>::DstShape[1] = {N / 2 + 1};\n+\n+template <typename T, int N>\n+const intptr_t RFFT1D<T[N]>::DstSize = DstShape[0]; \n+\n+TYPED_TEST_CASE_P(RFFT1D);\n+\n+template <typename T>\n+struct FixedDim1D {\n+    typedef testing::Types<T[4], T[8], T[17], T[25], T[64], T[76], T[99], T[128],\n+        T[203], T[256], T[512]> Types;    \n+};\n+\n+template <typename T>\n+class FFT2D;\n+\n+template <typename T, int M, int N>\n+class FFT2D<dynd_complex<T>[M][N]> : public ::testing::Test {\n+public:\n+    typedef T RealType;\n+    typedef dynd_complex<T> ComplexType;\n+\n+    static const intptr_t SrcShape[2];\n+    static const intptr_t SrcSize;\n+    typedef ComplexType SrcType;\n+\n+    static const intptr_t DstShape[2];\n+    static const intptr_t DstSize;\n+    typedef ComplexType DstType;\n+};\n+\n+template <typename T, int M, int N>\n+const intptr_t FFT2D<dynd_complex<T>[M][N]>::SrcShape[2] = {M, N};\n+\n+template <typename T, int M, int N>\n+const intptr_t FFT2D<dynd_complex<T>[M][N]>::SrcSize = SrcShape[0] * SrcShape[1];\n+\n+template <typename T, int M, int N>\n+const intptr_t FFT2D<dynd_complex<T>[M][N]>::DstShape[2] = {M, N};\n+\n+template <typename T, int M, int N>\n+const intptr_t FFT2D<dynd_complex<T>[M][N]>::DstSize = DstShape[0] * DstShape[1];\n+\n+TYPED_TEST_CASE_P(FFT2D);\n+\n+template <typename T>\n+class RFFT2D;\n+\n+template <typename T, int M, int N>\n+class RFFT2D<T[M][N]> : public ::testing::Test {\n+public:\n+    typedef T RealType;\n+    typedef dynd_complex<T> ComplexType;\n+\n+    static const intptr_t SrcShape[2];\n+    static const intptr_t SrcSize;\n+    typedef RealType SrcType;\n+\n+    static const intptr_t DstShape[2];\n+    static const intptr_t DstSize;\n+    typedef ComplexType DstType;\n+};\n+\n+template <typename T, int M, int N>\n+const intptr_t RFFT2D<T[M][N]>::SrcShape[2] = {M, N};\n+\n+template <typename T, int M, int N>\n+const intptr_t RFFT2D<T[M][N]>::SrcSize = SrcShape[0] * SrcShape[1]; \n+\n+template <typename T, int M, int N>\n+const intptr_t RFFT2D<T[M][N]>::DstShape[2] = {M, N / 2 + 1};\n+\n+template <typename T, int M, int N>\n+const intptr_t RFFT2D<T[M][N]>::DstSize = DstShape[0] * DstShape[1]; \n+\n+TYPED_TEST_CASE_P(RFFT2D);\n+\n+template <typename T>\n+struct FixedDim2D {\n+    typedef testing::Types<T[4][4], T[8][8], T[17][25], T[64][64], T[76][14], T[128][128],\n+        T[203][99], T[256][256], T[512][512]> Types;    \n+};\n+\n+template <typename T>\n+T rel_err_max();\n+\n+template <>\n+inline float rel_err_max<float>() {\n+    return 1E-4;\n+}\n+\n+template <>\n+inline double rel_err_max<double>() {\n+    return 1E-8;\n+}\n+\n+TYPED_TEST_P(FFT1D, Linear) {\n+    nd::array x0 = nd::dtyped_rand(TestFixture::SrcShape[0],\n+        ndt::make_type<typename TestFixture::SrcType>());\n+    nd::array x1 = nd::dtyped_rand(TestFixture::SrcShape[0],\n+        ndt::make_type<typename TestFixture::SrcType>());\n+    nd::array x = nd::dtyped_empty(TestFixture::SrcShape[0],\n+        ndt::make_type<typename TestFixture::SrcType>());\n+    x.vals() = x0 + x1;\n+\n+    nd::array y0 = fft(x0);\n+    nd::array y1 = fft(x1);\n+    nd::array y = fft(x);\n+\n+    for (int i = 0; i < TestFixture::DstShape[0]; ++i) {\n+        EXPECT_EQ_RELERR(y0(i).as<typename TestFixture::DstType>() + y1(i).as<typename TestFixture::DstType>(),\n+            y(i).as<typename TestFixture::DstType>(),\n+            rel_err_max<typename TestFixture::RealType>());\n+    }\n+}\n+\n+TYPED_TEST_P(FFT1D, Inverse) {\n+    nd::array x = nd::dtyped_rand(TestFixture::SrcShape[0],\n+        ndt::make_type<typename TestFixture::SrcType>());\n+\n+    nd::array y = ifft(fft(x));\n+    for (int i = 0; i < TestFixture::SrcShape[0]; ++i) {\n+        EXPECT_EQ_RELERR(x(i).as<typename TestFixture::SrcType>(),\n+            y(i).as<typename TestFixture::SrcType>() / TestFixture::SrcSize,\n+            rel_err_max<typename TestFixture::RealType>());\n+    }\n+}\n+\n+TYPED_TEST_P(FFT1D, Zeros) {\n+    nd::array x = nd::dtyped_zeros(TestFixture::SrcShape[0],\n+        ndt::make_type<typename TestFixture::SrcType>());\n+\n+    nd::array y = fft(x);\n+    for (int i = 0; i < TestFixture::DstShape[0]; ++i) {\n+        EXPECT_EQ(0, y(i).as<typename TestFixture::DstType>());\n+    }\n+}\n+\n+TYPED_TEST_P(FFT1D, Ones) {\n+    nd::array x = nd::dtyped_ones(TestFixture::SrcShape[0],\n+        ndt::make_type<typename TestFixture::SrcType>());\n+\n+    nd::array y = fft(x);\n+    for (int i = 0; i < TestFixture::DstShape[0]; ++i) {\n+        if (i == 0) {\n+            EXPECT_EQ_RELERR(TestFixture::SrcSize, y(i).as<typename TestFixture::DstType>(),\n+                rel_err_max<typename TestFixture::RealType>());\n+        } else {\n+            EXPECT_EQ_RELERR(0, y(i).as<typename TestFixture::DstType>(),\n+                rel_err_max<typename TestFixture::RealType>());\n+        }\n+    }\n+}\n+\n+TYPED_TEST_P(FFT1D, KroneckerDelta) {\n+    // Only continue if each dimension is divisible by 2\n+    if ((TestFixture::SrcShape[0] % 2) != 0) {\n+        return;\n+    }\n+\n+    nd::array x = nd::dtyped_zeros(TestFixture::SrcShape[0],\n+        ndt::make_type<typename TestFixture::SrcType>());\n+    x(TestFixture::SrcShape[0] / 2).vals() = 1;\n+\n+    nd::array y = fft(x);\n+    for (int i = 0; i < TestFixture::DstShape[0]; ++i) {\n+        EXPECT_EQ_RELERR(pow(static_cast<typename TestFixture::RealType>(-1), i),\n+            y(i).as<typename TestFixture::DstType>(),\n+            rel_err_max<typename TestFixture::RealType>());\n+    }\n+\n+    // Only continue if each dimension is divisible by 4\n+    if ((TestFixture::SrcShape[0] % 4) != 0) {\n+        return;\n+    }\n+\n+    y = fft(x(irange().by(2)));\n+    for (int i = 0; i < TestFixture::DstShape[0] / 2; ++i) {\n+        EXPECT_EQ_RELERR(pow(static_cast<typename TestFixture::RealType>(-1), i),\n+            y(i).as<typename TestFixture::DstType>(),\n+            rel_err_max<typename TestFixture::RealType>());\n+    }\n+}\n+\n+TEST(FFT1D, Shift) {\n+    double vals0[9] = {0.0, 1.0, 2.0, 3.0, 4.0, -4.0, -3.0, -2.0, -1.0};\n+\n+    nd::array x0 = nd::empty<double[9]>();\n+    x0.vals() = vals0;\n+\n+    nd::array y0 = fftshift(x0);\n+    EXPECT_EQ(y0(0).as<double>(), -4.0);\n+    EXPECT_EQ(y0(1).as<double>(), -3.0);\n+    EXPECT_EQ(y0(2).as<double>(), -2.0);\n+    EXPECT_EQ(y0(3).as<double>(), -1.0);\n+    EXPECT_EQ(y0(4).as<double>(), 0.0);\n+    EXPECT_EQ(y0(5).as<double>(), 1.0);\n+    EXPECT_EQ(y0(6).as<double>(), 2.0);\n+    EXPECT_EQ(y0(7).as<double>(), 3.0);\n+    EXPECT_EQ(y0(8).as<double>(), 4.0);", "path": "tests/test_fft.cpp", "position": 276, "original_position": 276, "commit_id": "c7a96d8146d8b03629d5d7c20f34384d7b15d00f", "original_commit_id": "c7a96d8146d8b03629d5d7c20f34384d7b15d00f", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "I've made a helper which, while slower, is more succinct and I think useful for writing tests like these:\n\n```\nEXPECT_JSON_EQ_ARR(\"[-4, -3, -2, -1, 0, 1, 2, 3, 4]\", y0);\n```\n", "created_at": "2014-07-07T02:14:58Z", "updated_at": "2014-07-07T02:14:58Z", "html_url": "https://github.com/libdynd/libdynd/pull/75#discussion_r14579717", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/75", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14579717"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/75#discussion_r14579717"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/75"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14579717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14579746", "pull_request_review_id": null, "id": 14579746, "diff_hunk": "@@ -0,0 +1,684 @@\n+//\n+// Copyright (C) 2011-14 Irwin Zaid, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#include <iostream>\n+#include <stdexcept>\n+#include <algorithm>\n+#include <cmath>\n+\n+#include \"inc_gtest.hpp\"\n+#include \"dynd_assertions.hpp\"\n+\n+#include <dynd/fft.hpp>\n+#include <dynd/random.hpp>\n+\n+using namespace std;\n+using namespace dynd;\n+\n+template <typename T>\n+class FFT1D;\n+\n+template <typename T, int N>\n+class FFT1D<dynd_complex<T>[N]> : public ::testing::Test {\n+public:\n+    typedef T RealType;\n+    typedef dynd_complex<T> ComplexType;\n+\n+    static const intptr_t SrcShape[1];\n+    static const intptr_t SrcSize;\n+    typedef ComplexType SrcType;\n+\n+    static const intptr_t DstShape[1];\n+    static const intptr_t DstSize;\n+    typedef ComplexType DstType;\n+};\n+\n+template <typename T, int N>\n+const intptr_t FFT1D<dynd_complex<T>[N]>::SrcShape[1] = {N};\n+\n+template <typename T, int N>\n+const intptr_t FFT1D<dynd_complex<T>[N]>::SrcSize = SrcShape[0];\n+\n+template <typename T, int N>\n+const intptr_t FFT1D<dynd_complex<T>[N]>::DstShape[1] = {N};\n+\n+template <typename T, int N>\n+const intptr_t FFT1D<dynd_complex<T>[N]>::DstSize = DstShape[0];\n+\n+TYPED_TEST_CASE_P(FFT1D);\n+\n+template <typename T>\n+class RFFT1D;\n+\n+template <typename T, int N>\n+class RFFT1D<T[N]> : public ::testing::Test {\n+public:\n+    typedef T RealType;\n+    typedef dynd_complex<T> ComplexType;\n+\n+    static const intptr_t SrcShape[1];\n+    static const intptr_t SrcSize;\n+    typedef RealType SrcType;\n+\n+    static const intptr_t DstShape[1];\n+    static const intptr_t DstSize;\n+    typedef ComplexType DstType;\n+};\n+\n+template <typename T, int N>\n+const intptr_t RFFT1D<T[N]>::SrcShape[1] = {N};\n+\n+template <typename T, int N>\n+const intptr_t RFFT1D<T[N]>::SrcSize = SrcShape[0]; \n+\n+template <typename T, int N>\n+const intptr_t RFFT1D<T[N]>::DstShape[1] = {N / 2 + 1};\n+\n+template <typename T, int N>\n+const intptr_t RFFT1D<T[N]>::DstSize = DstShape[0]; \n+\n+TYPED_TEST_CASE_P(RFFT1D);\n+\n+template <typename T>\n+struct FixedDim1D {\n+    typedef testing::Types<T[4], T[8], T[17], T[25], T[64], T[76], T[99], T[128],\n+        T[203], T[256], T[512]> Types;    \n+};\n+\n+template <typename T>\n+class FFT2D;\n+\n+template <typename T, int M, int N>\n+class FFT2D<dynd_complex<T>[M][N]> : public ::testing::Test {\n+public:\n+    typedef T RealType;\n+    typedef dynd_complex<T> ComplexType;\n+\n+    static const intptr_t SrcShape[2];\n+    static const intptr_t SrcSize;\n+    typedef ComplexType SrcType;\n+\n+    static const intptr_t DstShape[2];\n+    static const intptr_t DstSize;\n+    typedef ComplexType DstType;\n+};\n+\n+template <typename T, int M, int N>\n+const intptr_t FFT2D<dynd_complex<T>[M][N]>::SrcShape[2] = {M, N};\n+\n+template <typename T, int M, int N>\n+const intptr_t FFT2D<dynd_complex<T>[M][N]>::SrcSize = SrcShape[0] * SrcShape[1];\n+\n+template <typename T, int M, int N>\n+const intptr_t FFT2D<dynd_complex<T>[M][N]>::DstShape[2] = {M, N};\n+\n+template <typename T, int M, int N>\n+const intptr_t FFT2D<dynd_complex<T>[M][N]>::DstSize = DstShape[0] * DstShape[1];\n+\n+TYPED_TEST_CASE_P(FFT2D);\n+\n+template <typename T>\n+class RFFT2D;\n+\n+template <typename T, int M, int N>\n+class RFFT2D<T[M][N]> : public ::testing::Test {\n+public:\n+    typedef T RealType;\n+    typedef dynd_complex<T> ComplexType;\n+\n+    static const intptr_t SrcShape[2];\n+    static const intptr_t SrcSize;\n+    typedef RealType SrcType;\n+\n+    static const intptr_t DstShape[2];\n+    static const intptr_t DstSize;\n+    typedef ComplexType DstType;\n+};\n+\n+template <typename T, int M, int N>\n+const intptr_t RFFT2D<T[M][N]>::SrcShape[2] = {M, N};\n+\n+template <typename T, int M, int N>\n+const intptr_t RFFT2D<T[M][N]>::SrcSize = SrcShape[0] * SrcShape[1]; \n+\n+template <typename T, int M, int N>\n+const intptr_t RFFT2D<T[M][N]>::DstShape[2] = {M, N / 2 + 1};\n+\n+template <typename T, int M, int N>\n+const intptr_t RFFT2D<T[M][N]>::DstSize = DstShape[0] * DstShape[1]; \n+\n+TYPED_TEST_CASE_P(RFFT2D);\n+\n+template <typename T>\n+struct FixedDim2D {\n+    typedef testing::Types<T[4][4], T[8][8], T[17][25], T[64][64], T[76][14], T[128][128],\n+        T[203][99], T[256][256], T[512][512]> Types;    \n+};\n+\n+template <typename T>\n+T rel_err_max();\n+\n+template <>\n+inline float rel_err_max<float>() {\n+    return 1E-4;\n+}\n+\n+template <>\n+inline double rel_err_max<double>() {\n+    return 1E-8;\n+}\n+\n+TYPED_TEST_P(FFT1D, Linear) {\n+    nd::array x0 = nd::dtyped_rand(TestFixture::SrcShape[0],\n+        ndt::make_type<typename TestFixture::SrcType>());\n+    nd::array x1 = nd::dtyped_rand(TestFixture::SrcShape[0],\n+        ndt::make_type<typename TestFixture::SrcType>());\n+    nd::array x = nd::dtyped_empty(TestFixture::SrcShape[0],\n+        ndt::make_type<typename TestFixture::SrcType>());\n+    x.vals() = x0 + x1;\n+\n+    nd::array y0 = fft(x0);\n+    nd::array y1 = fft(x1);\n+    nd::array y = fft(x);\n+\n+    for (int i = 0; i < TestFixture::DstShape[0]; ++i) {\n+        EXPECT_EQ_RELERR(y0(i).as<typename TestFixture::DstType>() + y1(i).as<typename TestFixture::DstType>(),\n+            y(i).as<typename TestFixture::DstType>(),\n+            rel_err_max<typename TestFixture::RealType>());\n+    }\n+}\n+\n+TYPED_TEST_P(FFT1D, Inverse) {\n+    nd::array x = nd::dtyped_rand(TestFixture::SrcShape[0],\n+        ndt::make_type<typename TestFixture::SrcType>());\n+\n+    nd::array y = ifft(fft(x));\n+    for (int i = 0; i < TestFixture::SrcShape[0]; ++i) {\n+        EXPECT_EQ_RELERR(x(i).as<typename TestFixture::SrcType>(),\n+            y(i).as<typename TestFixture::SrcType>() / TestFixture::SrcSize,\n+            rel_err_max<typename TestFixture::RealType>());\n+    }\n+}\n+\n+TYPED_TEST_P(FFT1D, Zeros) {\n+    nd::array x = nd::dtyped_zeros(TestFixture::SrcShape[0],\n+        ndt::make_type<typename TestFixture::SrcType>());\n+\n+    nd::array y = fft(x);\n+    for (int i = 0; i < TestFixture::DstShape[0]; ++i) {\n+        EXPECT_EQ(0, y(i).as<typename TestFixture::DstType>());\n+    }\n+}\n+\n+TYPED_TEST_P(FFT1D, Ones) {\n+    nd::array x = nd::dtyped_ones(TestFixture::SrcShape[0],\n+        ndt::make_type<typename TestFixture::SrcType>());\n+\n+    nd::array y = fft(x);\n+    for (int i = 0; i < TestFixture::DstShape[0]; ++i) {\n+        if (i == 0) {\n+            EXPECT_EQ_RELERR(TestFixture::SrcSize, y(i).as<typename TestFixture::DstType>(),\n+                rel_err_max<typename TestFixture::RealType>());\n+        } else {\n+            EXPECT_EQ_RELERR(0, y(i).as<typename TestFixture::DstType>(),\n+                rel_err_max<typename TestFixture::RealType>());\n+        }\n+    }\n+}\n+\n+TYPED_TEST_P(FFT1D, KroneckerDelta) {\n+    // Only continue if each dimension is divisible by 2\n+    if ((TestFixture::SrcShape[0] % 2) != 0) {\n+        return;\n+    }\n+\n+    nd::array x = nd::dtyped_zeros(TestFixture::SrcShape[0],\n+        ndt::make_type<typename TestFixture::SrcType>());\n+    x(TestFixture::SrcShape[0] / 2).vals() = 1;\n+\n+    nd::array y = fft(x);\n+    for (int i = 0; i < TestFixture::DstShape[0]; ++i) {\n+        EXPECT_EQ_RELERR(pow(static_cast<typename TestFixture::RealType>(-1), i),\n+            y(i).as<typename TestFixture::DstType>(),\n+            rel_err_max<typename TestFixture::RealType>());\n+    }\n+\n+    // Only continue if each dimension is divisible by 4\n+    if ((TestFixture::SrcShape[0] % 4) != 0) {\n+        return;\n+    }\n+\n+    y = fft(x(irange().by(2)));\n+    for (int i = 0; i < TestFixture::DstShape[0] / 2; ++i) {\n+        EXPECT_EQ_RELERR(pow(static_cast<typename TestFixture::RealType>(-1), i),\n+            y(i).as<typename TestFixture::DstType>(),\n+            rel_err_max<typename TestFixture::RealType>());\n+    }\n+}\n+\n+TEST(FFT1D, Shift) {\n+    double vals0[9] = {0.0, 1.0, 2.0, 3.0, 4.0, -4.0, -3.0, -2.0, -1.0};\n+\n+    nd::array x0 = nd::empty<double[9]>();\n+    x0.vals() = vals0;", "path": "tests/test_fft.cpp", "position": 265, "original_position": 265, "commit_id": "c7a96d8146d8b03629d5d7c20f34384d7b15d00f", "original_commit_id": "c7a96d8146d8b03629d5d7c20f34384d7b15d00f", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "Of course, except for the immutable thing as you point out below... `nd::array x0 = nd::array_rw(vals0);` is what I have in there now, but it's obviously errorprone if I'm getting it wrong. :P\n", "created_at": "2014-07-07T02:17:50Z", "updated_at": "2014-07-07T02:17:50Z", "html_url": "https://github.com/libdynd/libdynd/pull/75#discussion_r14579746", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/75", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14579746"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/75#discussion_r14579746"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/75"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/14579746/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16609253", "pull_request_review_id": null, "id": 16609253, "diff_hunk": "@@ -362,6 +362,18 @@ class array {\n         return get_type().get_dim_size(get_arrmeta(), get_ndo()->m_data_pointer);\n     }\n \n+    /**\n+     * Returns the size of the requested dimension.\n+     */\n+    inline intptr_t get_dim_size(intptr_t i) const {\n+        if (i < get_type().get_strided_ndim()) {\n+            const size_stride_t *ss = reinterpret_cast<const size_stride_t *>(get_arrmeta());\n+            return ss[i].dim_size;\n+        }\n+\n+        return get_shape()[i];", "path": "include/dynd/array.hpp", "position": null, "original_position": 13, "commit_id": "fa0c73669e5a742196c400d31c9b540c7c40709e", "original_commit_id": "9700800c134404b17ad3b67517a47af033578dd4", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "If i is greater then the strided_ndim, I currently use get_shape()[i]. Is there a better way to do this?\n", "created_at": "2014-08-22T17:14:09Z", "updated_at": "2014-08-23T13:39:32Z", "html_url": "https://github.com/libdynd/libdynd/pull/100#discussion_r16609253", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/100", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16609253"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/100#discussion_r16609253"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/100"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16609253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16618953", "pull_request_review_id": null, "id": 16618953, "diff_hunk": "@@ -362,6 +362,18 @@ class array {\n         return get_type().get_dim_size(get_arrmeta(), get_ndo()->m_data_pointer);\n     }\n \n+    /**\n+     * Returns the size of the requested dimension.\n+     */\n+    inline intptr_t get_dim_size(intptr_t i) const {\n+        if (i < get_type().get_strided_ndim()) {\n+            const size_stride_t *ss = reinterpret_cast<const size_stride_t *>(get_arrmeta());\n+            return ss[i].dim_size;\n+        }\n+\n+        return get_shape()[i];", "path": "include/dynd/array.hpp", "position": null, "original_position": 13, "commit_id": "fa0c73669e5a742196c400d31c9b540c7c40709e", "original_commit_id": "9700800c134404b17ad3b67517a47af033578dd4", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "Yes, I think the following more verbose idiom should be faster:\n\n```\n  dynd::dimvector shape(i + 1);\n  if (!get_ndo()->is_builtin_type()) {\n    n.get_ndo()->m_type->get_shape(i + 1, 0, shape.get(),\n                            n.get_arrmeta(), get_ndo()->m_data_pointer);\n  } else { /* error */ }\n```\n", "created_at": "2014-08-22T20:15:10Z", "updated_at": "2014-08-23T13:39:32Z", "html_url": "https://github.com/libdynd/libdynd/pull/100#discussion_r16618953", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/100", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16618953"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/100#discussion_r16618953"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/100"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16618953/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16626340", "pull_request_review_id": null, "id": 16626340, "diff_hunk": "@@ -362,6 +362,18 @@ class array {\n         return get_type().get_dim_size(get_arrmeta(), get_ndo()->m_data_pointer);\n     }\n \n+    /**\n+     * Returns the size of the requested dimension.\n+     */\n+    inline intptr_t get_dim_size(intptr_t i) const {\n+        if (i < get_type().get_strided_ndim()) {\n+            const size_stride_t *ss = reinterpret_cast<const size_stride_t *>(get_arrmeta());\n+            return ss[i].dim_size;\n+        }\n+\n+        return get_shape()[i];", "path": "include/dynd/array.hpp", "position": null, "original_position": 13, "commit_id": "fa0c73669e5a742196c400d31c9b540c7c40709e", "original_commit_id": "9700800c134404b17ad3b67517a47af033578dd4", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Changed.\n", "created_at": "2014-08-22T23:34:24Z", "updated_at": "2014-08-23T13:39:32Z", "html_url": "https://github.com/libdynd/libdynd/pull/100#discussion_r16626340", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/100", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16626340"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/100#discussion_r16626340"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/100"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16626340/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16629517", "pull_request_review_id": null, "id": 16629517, "diff_hunk": "@@ -362,6 +362,25 @@ class array {\n         return get_type().get_dim_size(get_arrmeta(), get_ndo()->m_data_pointer);\n     }\n \n+    /**\n+     * Returns the size of the requested dimension.\n+     */\n+    inline intptr_t get_dim_size(intptr_t i) const {\n+        if (i < get_type().get_strided_ndim()) {\n+            const size_stride_t *ss = reinterpret_cast<const size_stride_t *>(get_arrmeta());\n+            return ss[i].dim_size;\n+        } else if (i < get_ndim()) {\n+            dimvector shape(i + 1);\n+            if (!get_ndo()->is_builtin_type()) {\n+                get_ndo()->m_type->get_shape(i + 1, 0, shape.get(),\n+                                get_arrmeta(), get_ndo()->m_data_pointer);\n+            }\n+            return shape[i];\n+        } else {\n+            throw std::invalid_argument(\"Not enough dimensions in array\");", "path": "include/dynd/array.hpp", "position": null, "original_position": 19, "commit_id": "fa0c73669e5a742196c400d31c9b540c7c40709e", "original_commit_id": "6b3a19aa8a0fbdd8c20ce5b4bb8c25c7fbce9914", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "It would be nice to include the type and which dimension's size was requested in the error message, I could imagine tracing back this error message being somewhat inscrutable.\n", "created_at": "2014-08-23T08:18:19Z", "updated_at": "2014-08-23T13:39:32Z", "html_url": "https://github.com/libdynd/libdynd/pull/100#discussion_r16629517", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/100", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16629517"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/100#discussion_r16629517"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/100"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16629517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16629521", "pull_request_review_id": null, "id": 16629521, "diff_hunk": "@@ -362,6 +362,25 @@ class array {\n         return get_type().get_dim_size(get_arrmeta(), get_ndo()->m_data_pointer);\n     }\n \n+    /**\n+     * Returns the size of the requested dimension.\n+     */\n+    inline intptr_t get_dim_size(intptr_t i) const {\n+        if (i < get_type().get_strided_ndim()) {\n+            const size_stride_t *ss = reinterpret_cast<const size_stride_t *>(get_arrmeta());\n+            return ss[i].dim_size;\n+        } else if (i < get_ndim()) {\n+            dimvector shape(i + 1);\n+            if (!get_ndo()->is_builtin_type()) {", "path": "include/dynd/array.hpp", "position": 13, "original_position": 13, "commit_id": "fa0c73669e5a742196c400d31c9b540c7c40709e", "original_commit_id": "6b3a19aa8a0fbdd8c20ce5b4bb8c25c7fbce9914", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "This test is actually redundant, because if \"i < get_ndim()\" is true, then get_ndim() > 0, which none of the built-in types satisfy.\n", "created_at": "2014-08-23T08:19:17Z", "updated_at": "2014-08-23T13:39:32Z", "html_url": "https://github.com/libdynd/libdynd/pull/100#discussion_r16629521", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/100", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16629521"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/100#discussion_r16629521"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/100"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16629521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16630650", "pull_request_review_id": null, "id": 16630650, "diff_hunk": "@@ -362,6 +362,25 @@ class array {\n         return get_type().get_dim_size(get_arrmeta(), get_ndo()->m_data_pointer);\n     }\n \n+    /**\n+     * Returns the size of the requested dimension.\n+     */\n+    inline intptr_t get_dim_size(intptr_t i) const {\n+        if (i < get_type().get_strided_ndim()) {\n+            const size_stride_t *ss = reinterpret_cast<const size_stride_t *>(get_arrmeta());\n+            return ss[i].dim_size;\n+        } else if (i < get_ndim()) {\n+            dimvector shape(i + 1);\n+            if (!get_ndo()->is_builtin_type()) {\n+                get_ndo()->m_type->get_shape(i + 1, 0, shape.get(),\n+                                get_arrmeta(), get_ndo()->m_data_pointer);\n+            }\n+            return shape[i];\n+        } else {\n+            throw std::invalid_argument(\"Not enough dimensions in array\");", "path": "include/dynd/array.hpp", "position": null, "original_position": 19, "commit_id": "fa0c73669e5a742196c400d31c9b540c7c40709e", "original_commit_id": "6b3a19aa8a0fbdd8c20ce5b4bb8c25c7fbce9914", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Changed it.\n", "created_at": "2014-08-23T13:39:52Z", "updated_at": "2014-08-23T13:39:52Z", "html_url": "https://github.com/libdynd/libdynd/pull/100#discussion_r16630650", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/100", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16630650"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/100#discussion_r16630650"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/100"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16630650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16630654", "pull_request_review_id": null, "id": 16630654, "diff_hunk": "@@ -362,6 +362,25 @@ class array {\n         return get_type().get_dim_size(get_arrmeta(), get_ndo()->m_data_pointer);\n     }\n \n+    /**\n+     * Returns the size of the requested dimension.\n+     */\n+    inline intptr_t get_dim_size(intptr_t i) const {\n+        if (i < get_type().get_strided_ndim()) {\n+            const size_stride_t *ss = reinterpret_cast<const size_stride_t *>(get_arrmeta());\n+            return ss[i].dim_size;\n+        } else if (i < get_ndim()) {\n+            dimvector shape(i + 1);\n+            if (!get_ndo()->is_builtin_type()) {", "path": "include/dynd/array.hpp", "position": 13, "original_position": 13, "commit_id": "fa0c73669e5a742196c400d31c9b540c7c40709e", "original_commit_id": "6b3a19aa8a0fbdd8c20ce5b4bb8c25c7fbce9914", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "I don't understand this comment. Aren't the built-in types just scalars, so they should go to the exception?\n\nIn any case, what would you like it to be?\n", "created_at": "2014-08-23T13:40:29Z", "updated_at": "2014-08-23T13:40:29Z", "html_url": "https://github.com/libdynd/libdynd/pull/100#discussion_r16630654", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/100", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16630654"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/100#discussion_r16630654"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/100"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16630654/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16686064", "pull_request_review_id": null, "id": 16686064, "diff_hunk": "@@ -362,6 +362,25 @@ class array {\n         return get_type().get_dim_size(get_arrmeta(), get_ndo()->m_data_pointer);\n     }\n \n+    /**\n+     * Returns the size of the requested dimension.\n+     */\n+    inline intptr_t get_dim_size(intptr_t i) const {\n+        if (i < get_type().get_strided_ndim()) {\n+            const size_stride_t *ss = reinterpret_cast<const size_stride_t *>(get_arrmeta());\n+            return ss[i].dim_size;\n+        } else if (i < get_ndim()) {\n+            dimvector shape(i + 1);\n+            if (!get_ndo()->is_builtin_type()) {", "path": "include/dynd/array.hpp", "position": 13, "original_position": 13, "commit_id": "fa0c73669e5a742196c400d31c9b540c7c40709e", "original_commit_id": "6b3a19aa8a0fbdd8c20ce5b4bb8c25c7fbce9914", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "I just meant that the `if (i < get_ndim()) {` test already guarantees that it's not built-in if `i` is a valid >= 0, so this if statement can be removed.\n", "created_at": "2014-08-25T22:47:50Z", "updated_at": "2014-08-25T22:47:50Z", "html_url": "https://github.com/libdynd/libdynd/pull/100#discussion_r16686064", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/100", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16686064"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/100#discussion_r16686064"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/100"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16686064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/17771564", "pull_request_review_id": null, "id": 17771564, "diff_hunk": "@@ -12,11 +12,13 @@ find_package(CUDA)\n set(LIB_SUFFIX \"\" CACHE STRING\n     \"Typically an empty string or 64. Controls installation to lib or lib64\")\n \n-# -DDYND_ELWISE_MAX, the maximum number of arguments that the elwise function\n-#   in libdynd will support\n-SET(DYND_ELWISE_MAX 4 CACHE STRING\n-    \"Build a libdynd library with an elwise function that supports the specified maximum number of arguments\")\n+# -DDYND_SRC_MAX, the maximum number of arguments that functor arrfuncs will support\n+SET(DYND_SRC_MAX 4 CACHE STRING\n+    \"Build a libdynd library with functor arrfuncs that support the specified maximum number of arguments\")\n # TODO: Check that the preprocessor can handle this number\n+# -DDYND_SRC_MAX, the maximum number of arguments that functor arrfuncs will support\n+SET(DYND_ARG_MAX 6 CACHE STRING\n+    \"Build a libdynd library with functor arrfuncs that support the specified maximum number of arguments\")", "path": "CMakeLists.txt", "position": null, "original_position": 14, "commit_id": "90707168098da8500c06b4b98bcd3c5868541db8", "original_commit_id": "64b2d98814bc326147a2e0f21eb79407e286bc6a", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "In the lines above, both DYND_SRC_MAX and DYND_ARG_MAX are defined, but the comment is for DYND_SRC_MAX both times, and the descriptions of the differently named parameters are the same.\n", "created_at": "2014-09-19T07:10:56Z", "updated_at": "2014-09-19T09:24:01Z", "html_url": "https://github.com/libdynd/libdynd/pull/119#discussion_r17771564", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/119", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/17771564"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/119#discussion_r17771564"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/119"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/17771564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/17771577", "pull_request_review_id": null, "id": 17771577, "diff_hunk": "@@ -404,6 +405,7 @@ set(libdynd_SRC\n     include/dynd/kernels/expr_kernel_generator.hpp\n     include/dynd/kernels/expression_assignment_kernels.hpp\n     include/dynd/kernels/expression_comparison_kernels.hpp\n+\tinclude/dynd/kernels/functor_kernels.hpp", "path": "CMakeLists.txt", "position": null, "original_position": 30, "commit_id": "90707168098da8500c06b4b98bcd3c5868541db8", "original_commit_id": "64b2d98814bc326147a2e0f21eb79407e286bc6a", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "Tab character instead of spaces?\n", "created_at": "2014-09-19T07:11:23Z", "updated_at": "2014-09-19T09:24:01Z", "html_url": "https://github.com/libdynd/libdynd/pull/119#discussion_r17771577", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/119", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/17771577"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/119#discussion_r17771577"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/119"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/17771577/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/17772056", "pull_request_review_id": null, "id": 17772056, "diff_hunk": "@@ -19,9 +19,9 @@ namespace detail {\n \\\n         typedef void (T::*func_type)(R &, DYND_PP_JOIN_1((,), DYND_PP_META_NAME_RANGE(A, NSRC))) const; \\\n         DYND_PP_JOIN_ELWISE_1(DYND_PP_META_TYPEDEF_TYPENAME, (;), \\\n-            DYND_PP_OUTER_1(DYND_PP_META_TEMPLATE_INSTANTIATION_SCOPE, (remove_const), \\\n+            DYND_PP_OUTER_1(DYND_PP_META_TEMPLATE_INSTANTIATION_SCOPE, (std::remove_const), \\", "path": "include/dynd/func/elwise_callrefres.hpp", "position": 5, "original_position": 5, "commit_id": "90707168098da8500c06b4b98bcd3c5868541db8", "original_commit_id": "64b2d98814bc326147a2e0f21eb79407e286bc6a", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "Are these std:: ok across all the supported platforms? Unfortunately our jenkins server will only test this once it's merged.\n", "created_at": "2014-09-19T07:31:03Z", "updated_at": "2014-09-19T09:24:01Z", "html_url": "https://github.com/libdynd/libdynd/pull/119#discussion_r17772056", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/119", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/17772056"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/119#discussion_r17772056"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/119"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/17772056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/17772458", "pull_request_review_id": null, "id": 17772458, "diff_hunk": "@@ -0,0 +1,55 @@\n+//\n+// Copyright (C) 2011-14 Irwin Zaid, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#ifndef _DYND__FUNCPROTO_HPP_\n+#define _DYND__FUNCPROTO_HPP_\n+\n+#include <dynd/config.hpp>\n+#include <dynd/pp/list.hpp>\n+#include <dynd/pp/meta.hpp>\n+\n+namespace dynd {\n+\n+template <typename T>", "path": "include/dynd/funcproto.hpp", "position": null, "original_position": 15, "commit_id": "90707168098da8500c06b4b98bcd3c5868541db8", "original_commit_id": "64b2d98814bc326147a2e0f21eb79407e286bc6a", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "Somewhere, maybe above this line, would be nice to have a doxygen string describing what the metafunction computes.\n", "created_at": "2014-09-19T07:44:06Z", "updated_at": "2014-09-19T09:24:01Z", "html_url": "https://github.com/libdynd/libdynd/pull/119#discussion_r17772458", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/119", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/17772458"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/119#discussion_r17772458"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/119"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/17772458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/17772548", "pull_request_review_id": null, "id": 17772548, "diff_hunk": "@@ -0,0 +1,348 @@\n+//\n+// Copyright (C) 2011-14 Mark Wiebe, Irwin Zaid, DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#ifndef DYND__KERNELS_FUNCTOR_KERNELS_HPP\n+#define DYND__KERNELS_FUNCTOR_KERNELS_HPP\n+\n+#include <dynd/kernels/ckernel_common_functions.hpp>\n+#include <dynd/kernels/expr_kernels.hpp>\n+#include <dynd/pp/meta.hpp>\n+#include <dynd/types/funcproto_type.hpp>\n+\n+namespace dynd { namespace nd { namespace detail {\n+\n+template <typename T>\n+class from_bytes {", "path": "include/dynd/kernels/functor_kernels.hpp", "position": null, "original_position": 17, "commit_id": "90707168098da8500c06b4b98bcd3c5868541db8", "original_commit_id": "64b2d98814bc326147a2e0f21eb79407e286bc6a", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "There's probably a better name than from_bytes for this, being almost a reinterpret_cast wrapper object. Maybe typed_param_from_bytes, if that's not too long.\n", "created_at": "2014-09-19T07:46:47Z", "updated_at": "2014-09-19T09:24:01Z", "html_url": "https://github.com/libdynd/libdynd/pull/119#discussion_r17772548", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/119", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/17772548"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/119#discussion_r17772548"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/119"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/17772548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/17772667", "pull_request_review_id": null, "id": 17772667, "diff_hunk": "@@ -96,6 +96,7 @@ set(tests_SRC\n     array/test_view.cpp\n     vm/test_elwise_program.cpp\n     test_arithmetic_op.cpp\n+\ttest_buffer.cpp", "path": "tests/CMakeLists.txt", "position": null, "original_position": 4, "commit_id": "90707168098da8500c06b4b98bcd3c5868541db8", "original_commit_id": "64b2d98814bc326147a2e0f21eb79407e286bc6a", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "Another tab instead of spaces\n", "created_at": "2014-09-19T07:49:53Z", "updated_at": "2014-09-19T09:24:01Z", "html_url": "https://github.com/libdynd/libdynd/pull/119#discussion_r17772667", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/119", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/17772667"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/119#discussion_r17772667"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/119"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/17772667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/17899113", "pull_request_review_id": null, "id": 17899113, "diff_hunk": "@@ -48,6 +49,10 @@ class funcproto_type : public base_type {\n         return m_return_type;\n     }\n \n+    inline bool get_const() const {", "path": "include/dynd/types/funcproto_type.hpp", "position": 16, "original_position": 16, "commit_id": "3a4556634ddcebaa8b02913d6c7f867a3d8008b4", "original_commit_id": "3a4556634ddcebaa8b02913d6c7f867a3d8008b4", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "The way I like to name boolean property accessors, this would be called is_const() instead of get_const().\n", "created_at": "2014-09-23T09:35:28Z", "updated_at": "2014-09-23T09:35:28Z", "html_url": "https://github.com/libdynd/libdynd/pull/120#discussion_r17899113", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/120", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/17899113"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/120#discussion_r17899113"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/120"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/17899113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16626002", "pull_request_review_id": null, "id": 16626002, "diff_hunk": "@@ -1441,6 +1441,37 @@ nd::array nd::array::replace_dtype(const ndt::type& replacement_tp, intptr_t rep\n     }\n }\n \n+nd::array nd::array::new_axis(intptr_t i) const\n+{\n+    ndt::type tp = get_type(), el_tp;\n+    ndt::type new_tp = tp.with_new_axis(i, el_tp);\n+\n+    size_t el_arrmeta_size = el_tp.get_arrmeta_size();\n+    size_t arrmeta_diff = tp.get_arrmeta_size() - el_arrmeta_size;\n+\n+    nd::array res(make_array_memory_block(new_tp.get_arrmeta_size()));\n+    // Copy the fields\n+    res.get_ndo()->m_data_pointer = get_ndo()->m_data_pointer;\n+    if (get_ndo()->m_data_reference == NULL) {\n+        // Embedded data, need reference to the array\n+        res.get_ndo()->m_data_reference = get_memblock().release();\n+    } else {\n+        // Use the same data reference, avoid producing a chain\n+        res.get_ndo()->m_data_reference = get_data_memblock().release();\n+    }\n+    res.get_ndo()->m_type = new_tp.release();\n+    res.get_ndo()->m_flags = get_ndo()->m_flags;\n+    // Copy the arrmeta, including setting the appropriate shape and strides of the new arrmeta\n+    DYND_MEMCPY(res.get_arrmeta(), get_arrmeta(), arrmeta_diff);\n+    strided_dim_type_arrmeta *smd = reinterpret_cast<strided_dim_type_arrmeta *>(res.get_arrmeta() + arrmeta_diff);\n+    smd->dim_size = 1;\n+    smd->stride = 0;\n+    DYND_MEMCPY(smd + 1, get_arrmeta() + arrmeta_diff, el_tp.get_strided_ndim() * sizeof(strided_dim_type_arrmeta));", "path": "src/dynd/array.cpp", "position": null, "original_position": 29, "commit_id": "bed8ce03c0f47396b6a7daeaf7690c98b366f955", "original_commit_id": "534af0cda737243afb8540a62fce3c8282140c1e", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "@mwiebe, is the DYND_MEMCPY(smd +1, ...) here necessary? I thought it might be due to changes for strided arrays you made recently.\n\nWith or without this, I expect this to work.\n", "created_at": "2014-08-22T23:18:58Z", "updated_at": "2014-10-12T16:42:57Z", "html_url": "https://github.com/libdynd/libdynd/pull/102#discussion_r16626002", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/102", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16626002"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/102#discussion_r16626002"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/102"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16626002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16629485", "pull_request_review_id": null, "id": 16629485, "diff_hunk": "@@ -217,6 +217,17 @@ ndt::type ndt::type::with_replaced_dtype(const ndt::type& replacement_tp, intptr\n     return result;\n }\n \n+ndt::type ndt::type::with_new_axis(intptr_t i) const\n+{\n+    return with_replaced_dtype(ndt::make_strided_dim(get_type_at_dimension(NULL, i)), get_ndim() - i);\n+}\n+\n+ndt::type ndt::type::with_new_axis(intptr_t i, type &out_el_tp) const\n+{\n+    out_el_tp = get_type_at_dimension(NULL, i);\n+    return with_replaced_dtype(ndt::make_strided_dim(out_el_tp), get_ndim() - i);\n+}", "path": "src/dynd/type.cpp", "position": null, "original_position": 13, "commit_id": "bed8ce03c0f47396b6a7daeaf7690c98b366f955", "original_commit_id": "534af0cda737243afb8540a62fce3c8282140c1e", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "These two functions will only work correctly if the dimensions prior to `i` are strided, not with e.g. a `var` dimension. Could either raise if this assumption doesn't hold, or change it to work more generally.\n", "created_at": "2014-08-23T08:08:08Z", "updated_at": "2014-10-12T16:42:57Z", "html_url": "https://github.com/libdynd/libdynd/pull/102#discussion_r16629485", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/102", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16629485"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/102#discussion_r16629485"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/102"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16629485/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16629491", "pull_request_review_id": null, "id": 16629491, "diff_hunk": "@@ -1441,6 +1441,37 @@ nd::array nd::array::replace_dtype(const ndt::type& replacement_tp, intptr_t rep\n     }\n }\n \n+nd::array nd::array::new_axis(intptr_t i) const\n+{\n+    ndt::type tp = get_type(), el_tp;\n+    ndt::type new_tp = tp.with_new_axis(i, el_tp);\n+\n+    size_t el_arrmeta_size = el_tp.get_arrmeta_size();\n+    size_t arrmeta_diff = tp.get_arrmeta_size() - el_arrmeta_size;\n+\n+    nd::array res(make_array_memory_block(new_tp.get_arrmeta_size()));\n+    // Copy the fields\n+    res.get_ndo()->m_data_pointer = get_ndo()->m_data_pointer;\n+    if (get_ndo()->m_data_reference == NULL) {\n+        // Embedded data, need reference to the array\n+        res.get_ndo()->m_data_reference = get_memblock().release();\n+    } else {\n+        // Use the same data reference, avoid producing a chain\n+        res.get_ndo()->m_data_reference = get_data_memblock().release();\n+    }\n+    res.get_ndo()->m_type = new_tp.release();\n+    res.get_ndo()->m_flags = get_ndo()->m_flags;\n+    // Copy the arrmeta, including setting the appropriate shape and strides of the new arrmeta\n+    DYND_MEMCPY(res.get_arrmeta(), get_arrmeta(), arrmeta_diff);", "path": "src/dynd/array.cpp", "position": null, "original_position": 25, "commit_id": "bed8ce03c0f47396b6a7daeaf7690c98b366f955", "original_commit_id": "534af0cda737243afb8540a62fce3c8282140c1e", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "This should be using the arrmeta_copy function on the type, because arrmeta are able to own references to resources. For example, the string type's data buffer is owned by its arrmeta.\n", "created_at": "2014-08-23T08:10:33Z", "updated_at": "2014-10-12T16:42:57Z", "html_url": "https://github.com/libdynd/libdynd/pull/102#discussion_r16629491", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/102", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16629491"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/102#discussion_r16629491"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/102"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16629491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16629497", "pull_request_review_id": null, "id": 16629497, "diff_hunk": "@@ -1441,6 +1441,37 @@ nd::array nd::array::replace_dtype(const ndt::type& replacement_tp, intptr_t rep\n     }\n }\n \n+nd::array nd::array::new_axis(intptr_t i) const\n+{\n+    ndt::type tp = get_type(), el_tp;\n+    ndt::type new_tp = tp.with_new_axis(i, el_tp);\n+\n+    size_t el_arrmeta_size = el_tp.get_arrmeta_size();\n+    size_t arrmeta_diff = tp.get_arrmeta_size() - el_arrmeta_size;\n+\n+    nd::array res(make_array_memory_block(new_tp.get_arrmeta_size()));\n+    // Copy the fields\n+    res.get_ndo()->m_data_pointer = get_ndo()->m_data_pointer;\n+    if (get_ndo()->m_data_reference == NULL) {\n+        // Embedded data, need reference to the array\n+        res.get_ndo()->m_data_reference = get_memblock().release();\n+    } else {\n+        // Use the same data reference, avoid producing a chain\n+        res.get_ndo()->m_data_reference = get_data_memblock().release();\n+    }\n+    res.get_ndo()->m_type = new_tp.release();\n+    res.get_ndo()->m_flags = get_ndo()->m_flags;\n+    // Copy the arrmeta, including setting the appropriate shape and strides of the new arrmeta\n+    DYND_MEMCPY(res.get_arrmeta(), get_arrmeta(), arrmeta_diff);\n+    strided_dim_type_arrmeta *smd = reinterpret_cast<strided_dim_type_arrmeta *>(res.get_arrmeta() + arrmeta_diff);", "path": "src/dynd/array.cpp", "position": null, "original_position": 26, "commit_id": "bed8ce03c0f47396b6a7daeaf7690c98b366f955", "original_commit_id": "534af0cda737243afb8540a62fce3c8282140c1e", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "This will only work if all the dimensions before `i` are strided, should validate that this holds.\n", "created_at": "2014-08-23T08:12:19Z", "updated_at": "2014-10-12T16:42:57Z", "html_url": "https://github.com/libdynd/libdynd/pull/102#discussion_r16629497", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/102", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16629497"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/102#discussion_r16629497"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/102"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16629497/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16629503", "pull_request_review_id": null, "id": 16629503, "diff_hunk": "@@ -1441,6 +1441,37 @@ nd::array nd::array::replace_dtype(const ndt::type& replacement_tp, intptr_t rep\n     }\n }\n \n+nd::array nd::array::new_axis(intptr_t i) const\n+{\n+    ndt::type tp = get_type(), el_tp;\n+    ndt::type new_tp = tp.with_new_axis(i, el_tp);\n+\n+    size_t el_arrmeta_size = el_tp.get_arrmeta_size();\n+    size_t arrmeta_diff = tp.get_arrmeta_size() - el_arrmeta_size;\n+\n+    nd::array res(make_array_memory_block(new_tp.get_arrmeta_size()));\n+    // Copy the fields\n+    res.get_ndo()->m_data_pointer = get_ndo()->m_data_pointer;\n+    if (get_ndo()->m_data_reference == NULL) {\n+        // Embedded data, need reference to the array\n+        res.get_ndo()->m_data_reference = get_memblock().release();\n+    } else {\n+        // Use the same data reference, avoid producing a chain\n+        res.get_ndo()->m_data_reference = get_data_memblock().release();\n+    }\n+    res.get_ndo()->m_type = new_tp.release();\n+    res.get_ndo()->m_flags = get_ndo()->m_flags;\n+    // Copy the arrmeta, including setting the appropriate shape and strides of the new arrmeta\n+    DYND_MEMCPY(res.get_arrmeta(), get_arrmeta(), arrmeta_diff);\n+    strided_dim_type_arrmeta *smd = reinterpret_cast<strided_dim_type_arrmeta *>(res.get_arrmeta() + arrmeta_diff);\n+    smd->dim_size = 1;\n+    smd->stride = 0;\n+    DYND_MEMCPY(smd + 1, get_arrmeta() + arrmeta_diff, el_tp.get_strided_ndim() * sizeof(strided_dim_type_arrmeta));", "path": "src/dynd/array.cpp", "position": null, "original_position": 29, "commit_id": "bed8ce03c0f47396b6a7daeaf7690c98b366f955", "original_commit_id": "534af0cda737243afb8540a62fce3c8282140c1e", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "For dtypes which have non-trivial arrmeta, something like this would be necessary. I think the general approach you're taking here, of copying the arrmeta with the pre-newaxis type, then fixing it up, can work fine. You'd want to do the memcpy (memmove actually) before setting the dim_size and stride of the new dimension though.\n", "created_at": "2014-08-23T08:14:55Z", "updated_at": "2014-10-12T16:42:57Z", "html_url": "https://github.com/libdynd/libdynd/pull/102#discussion_r16629503", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/102", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16629503"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/102#discussion_r16629503"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/102"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16629503/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16629512", "pull_request_review_id": null, "id": 16629512, "diff_hunk": "@@ -282,3 +282,65 @@ TEST(View, StringAsBytes) {\n   EXPECT_EQ('\\xAD', btd->begin[2]);\n   EXPECT_EQ('\\xA2', btd->begin[3]);\n }\n+\n+TEST(View, NewAxis) {\n+    nd::array a = nd::empty(\"int32\");", "path": "tests/array/test_view.cpp", "position": null, "original_position": 6, "commit_id": "bed8ce03c0f47396b6a7daeaf7690c98b366f955", "original_commit_id": "534af0cda737243afb8540a62fce3c8282140c1e", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "I recommend to test with the `string` type, together with valgrind it should help flush out details of the arrmeta copying.\n", "created_at": "2014-08-23T08:16:32Z", "updated_at": "2014-10-12T16:42:57Z", "html_url": "https://github.com/libdynd/libdynd/pull/102#discussion_r16629512", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/102", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16629512"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/102#discussion_r16629512"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/102"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16629512/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16630697", "pull_request_review_id": null, "id": 16630697, "diff_hunk": "@@ -1441,6 +1441,37 @@ nd::array nd::array::replace_dtype(const ndt::type& replacement_tp, intptr_t rep\n     }\n }\n \n+nd::array nd::array::new_axis(intptr_t i) const\n+{\n+    ndt::type tp = get_type(), el_tp;\n+    ndt::type new_tp = tp.with_new_axis(i, el_tp);\n+\n+    size_t el_arrmeta_size = el_tp.get_arrmeta_size();\n+    size_t arrmeta_diff = tp.get_arrmeta_size() - el_arrmeta_size;\n+\n+    nd::array res(make_array_memory_block(new_tp.get_arrmeta_size()));\n+    // Copy the fields\n+    res.get_ndo()->m_data_pointer = get_ndo()->m_data_pointer;\n+    if (get_ndo()->m_data_reference == NULL) {\n+        // Embedded data, need reference to the array\n+        res.get_ndo()->m_data_reference = get_memblock().release();\n+    } else {\n+        // Use the same data reference, avoid producing a chain\n+        res.get_ndo()->m_data_reference = get_data_memblock().release();\n+    }\n+    res.get_ndo()->m_type = new_tp.release();\n+    res.get_ndo()->m_flags = get_ndo()->m_flags;\n+    // Copy the arrmeta, including setting the appropriate shape and strides of the new arrmeta\n+    DYND_MEMCPY(res.get_arrmeta(), get_arrmeta(), arrmeta_diff);", "path": "src/dynd/array.cpp", "position": null, "original_position": 25, "commit_id": "bed8ce03c0f47396b6a7daeaf7690c98b366f955", "original_commit_id": "534af0cda737243afb8540a62fce3c8282140c1e", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Do you mean arrmeta_copy_construct? Wouldn't that copy all of the arrmeta, whereas we need to only copy the part of it before the new axis.\n\nI can see how it would work for part after the new axis though.\n", "created_at": "2014-08-23T13:50:45Z", "updated_at": "2014-10-12T16:42:57Z", "html_url": "https://github.com/libdynd/libdynd/pull/102#discussion_r16630697", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/102", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16630697"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/102#discussion_r16630697"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/102"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16630697/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16630701", "pull_request_review_id": null, "id": 16630701, "diff_hunk": "@@ -217,6 +217,17 @@ ndt::type ndt::type::with_replaced_dtype(const ndt::type& replacement_tp, intptr\n     return result;\n }\n \n+ndt::type ndt::type::with_new_axis(intptr_t i) const\n+{\n+    return with_replaced_dtype(ndt::make_strided_dim(get_type_at_dimension(NULL, i)), get_ndim() - i);\n+}\n+\n+ndt::type ndt::type::with_new_axis(intptr_t i, type &out_el_tp) const\n+{\n+    out_el_tp = get_type_at_dimension(NULL, i);\n+    return with_replaced_dtype(ndt::make_strided_dim(out_el_tp), get_ndim() - i);\n+}", "path": "src/dynd/type.cpp", "position": null, "original_position": 13, "commit_id": "bed8ce03c0f47396b6a7daeaf7690c98b366f955", "original_commit_id": "534af0cda737243afb8540a62fce3c8282140c1e", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "We should make it work more generally. What is the right way to do this?\n", "created_at": "2014-08-23T13:52:17Z", "updated_at": "2014-10-12T16:42:57Z", "html_url": "https://github.com/libdynd/libdynd/pull/102#discussion_r16630701", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/102", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16630701"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/102#discussion_r16630701"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/102"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16630701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16630707", "pull_request_review_id": null, "id": 16630707, "diff_hunk": "@@ -1441,6 +1441,37 @@ nd::array nd::array::replace_dtype(const ndt::type& replacement_tp, intptr_t rep\n     }\n }\n \n+nd::array nd::array::new_axis(intptr_t i) const\n+{\n+    ndt::type tp = get_type(), el_tp;\n+    ndt::type new_tp = tp.with_new_axis(i, el_tp);\n+\n+    size_t el_arrmeta_size = el_tp.get_arrmeta_size();\n+    size_t arrmeta_diff = tp.get_arrmeta_size() - el_arrmeta_size;\n+\n+    nd::array res(make_array_memory_block(new_tp.get_arrmeta_size()));\n+    // Copy the fields\n+    res.get_ndo()->m_data_pointer = get_ndo()->m_data_pointer;\n+    if (get_ndo()->m_data_reference == NULL) {\n+        // Embedded data, need reference to the array\n+        res.get_ndo()->m_data_reference = get_memblock().release();\n+    } else {\n+        // Use the same data reference, avoid producing a chain\n+        res.get_ndo()->m_data_reference = get_data_memblock().release();\n+    }\n+    res.get_ndo()->m_type = new_tp.release();\n+    res.get_ndo()->m_flags = get_ndo()->m_flags;\n+    // Copy the arrmeta, including setting the appropriate shape and strides of the new arrmeta\n+    DYND_MEMCPY(res.get_arrmeta(), get_arrmeta(), arrmeta_diff);\n+    strided_dim_type_arrmeta *smd = reinterpret_cast<strided_dim_type_arrmeta *>(res.get_arrmeta() + arrmeta_diff);", "path": "src/dynd/array.cpp", "position": null, "original_position": 26, "commit_id": "bed8ce03c0f47396b6a7daeaf7690c98b366f955", "original_commit_id": "534af0cda737243afb8540a62fce3c8282140c1e", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Do you mean because of the type function with_new_axis, or because of something else? If it is the latter, what is that something else?\n", "created_at": "2014-08-23T13:53:07Z", "updated_at": "2014-10-12T16:42:57Z", "html_url": "https://github.com/libdynd/libdynd/pull/102#discussion_r16630707", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/102", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16630707"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/102#discussion_r16630707"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/102"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/16630707/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/18714458", "pull_request_review_id": null, "id": 18714458, "diff_hunk": "@@ -1441,6 +1441,37 @@ nd::array nd::array::replace_dtype(const ndt::type& replacement_tp, intptr_t rep\n     }\n }\n \n+nd::array nd::array::new_axis(intptr_t i) const\n+{\n+    ndt::type tp = get_type(), el_tp;\n+    ndt::type new_tp = tp.with_new_axis(i, el_tp);\n+\n+    size_t el_arrmeta_size = el_tp.get_arrmeta_size();\n+    size_t arrmeta_diff = tp.get_arrmeta_size() - el_arrmeta_size;\n+\n+    nd::array res(make_array_memory_block(new_tp.get_arrmeta_size()));\n+    // Copy the fields\n+    res.get_ndo()->m_data_pointer = get_ndo()->m_data_pointer;\n+    if (get_ndo()->m_data_reference == NULL) {\n+        // Embedded data, need reference to the array\n+        res.get_ndo()->m_data_reference = get_memblock().release();\n+    } else {\n+        // Use the same data reference, avoid producing a chain\n+        res.get_ndo()->m_data_reference = get_data_memblock().release();\n+    }\n+    res.get_ndo()->m_type = new_tp.release();\n+    res.get_ndo()->m_flags = get_ndo()->m_flags;\n+    // Copy the arrmeta, including setting the appropriate shape and strides of the new arrmeta\n+    DYND_MEMCPY(res.get_arrmeta(), get_arrmeta(), arrmeta_diff);", "path": "src/dynd/array.cpp", "position": null, "original_position": 25, "commit_id": "bed8ce03c0f47396b6a7daeaf7690c98b366f955", "original_commit_id": "534af0cda737243afb8540a62fce3c8282140c1e", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "Because arrmeta can contain references, heap-allocated memory, and other owned resources, memcpy can only be ok when you know exactly that the particular arrmeta being copied is POD. This is true for the fixed/cfixed dimensions, but not true for var dimensions or the string type, hence the suggestion below to test with string.\n", "created_at": "2014-10-10T16:02:05Z", "updated_at": "2014-10-12T16:42:57Z", "html_url": "https://github.com/libdynd/libdynd/pull/102#discussion_r18714458", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/102", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/18714458"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/102#discussion_r18714458"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/102"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/18714458/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/18715270", "pull_request_review_id": null, "id": 18715270, "diff_hunk": "@@ -1441,6 +1441,37 @@ nd::array nd::array::replace_dtype(const ndt::type& replacement_tp, intptr_t rep\n     }\n }\n \n+nd::array nd::array::new_axis(intptr_t i) const\n+{\n+    ndt::type tp = get_type(), el_tp;\n+    ndt::type new_tp = tp.with_new_axis(i, el_tp);\n+\n+    size_t el_arrmeta_size = el_tp.get_arrmeta_size();\n+    size_t arrmeta_diff = tp.get_arrmeta_size() - el_arrmeta_size;\n+\n+    nd::array res(make_array_memory_block(new_tp.get_arrmeta_size()));\n+    // Copy the fields\n+    res.get_ndo()->m_data_pointer = get_ndo()->m_data_pointer;\n+    if (get_ndo()->m_data_reference == NULL) {\n+        // Embedded data, need reference to the array\n+        res.get_ndo()->m_data_reference = get_memblock().release();\n+    } else {\n+        // Use the same data reference, avoid producing a chain\n+        res.get_ndo()->m_data_reference = get_data_memblock().release();\n+    }\n+    res.get_ndo()->m_type = new_tp.release();\n+    res.get_ndo()->m_flags = get_ndo()->m_flags;\n+    // Copy the arrmeta, including setting the appropriate shape and strides of the new arrmeta\n+    DYND_MEMCPY(res.get_arrmeta(), get_arrmeta(), arrmeta_diff);", "path": "src/dynd/array.cpp", "position": null, "original_position": 25, "commit_id": "bed8ce03c0f47396b6a7daeaf7690c98b366f955", "original_commit_id": "534af0cda737243afb8540a62fce3c8282140c1e", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Does arrmeta_copy_construct also handle the child types? If it does, then isn't it going be a problem here because the child types may be different if I inserted a new dimension somewhere?\n\nIf it doesn't, then it's fine.\n", "created_at": "2014-10-10T16:19:16Z", "updated_at": "2014-10-12T16:42:57Z", "html_url": "https://github.com/libdynd/libdynd/pull/102#discussion_r18715270", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/102", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/18715270"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/102#discussion_r18715270"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/102"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/18715270/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/18719594", "pull_request_review_id": null, "id": 18719594, "diff_hunk": "@@ -1441,6 +1441,37 @@ nd::array nd::array::replace_dtype(const ndt::type& replacement_tp, intptr_t rep\n     }\n }\n \n+nd::array nd::array::new_axis(intptr_t i) const\n+{\n+    ndt::type tp = get_type(), el_tp;\n+    ndt::type new_tp = tp.with_new_axis(i, el_tp);\n+\n+    size_t el_arrmeta_size = el_tp.get_arrmeta_size();\n+    size_t arrmeta_diff = tp.get_arrmeta_size() - el_arrmeta_size;\n+\n+    nd::array res(make_array_memory_block(new_tp.get_arrmeta_size()));\n+    // Copy the fields\n+    res.get_ndo()->m_data_pointer = get_ndo()->m_data_pointer;\n+    if (get_ndo()->m_data_reference == NULL) {\n+        // Embedded data, need reference to the array\n+        res.get_ndo()->m_data_reference = get_memblock().release();\n+    } else {\n+        // Use the same data reference, avoid producing a chain\n+        res.get_ndo()->m_data_reference = get_data_memblock().release();\n+    }\n+    res.get_ndo()->m_type = new_tp.release();\n+    res.get_ndo()->m_flags = get_ndo()->m_flags;\n+    // Copy the arrmeta, including setting the appropriate shape and strides of the new arrmeta\n+    DYND_MEMCPY(res.get_arrmeta(), get_arrmeta(), arrmeta_diff);", "path": "src/dynd/array.cpp", "position": null, "original_position": 25, "commit_id": "bed8ce03c0f47396b6a7daeaf7690c98b366f955", "original_commit_id": "534af0cda737243afb8540a62fce3c8282140c1e", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "arrmeta_copy_construct copies the full arrmeta of the type, including all child types. In base_dim_type there's another method implemented which just copies the arrmeta for that dimension.\n", "created_at": "2014-10-10T17:42:46Z", "updated_at": "2014-10-12T16:42:57Z", "html_url": "https://github.com/libdynd/libdynd/pull/102#discussion_r18719594", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/102", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/18719594"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/102#discussion_r18719594"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/102"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/18719594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/22329046", "pull_request_review_id": null, "id": 22329046, "diff_hunk": "@@ -613,14 +619,15 @@ namespace nd {\n     }\n \n     template <typename... K>\n-    ndt::type resolve(intptr_t nsrc, const ndt::type *src_tp, const char *const *src_arrmeta,\n+    ndt::type resolve(intptr_t nsrc, const ndt::type *src_tp,\n+                      const char *const *src_arrmeta,\n                       const detail::kwds<K...> &kwds,\n                       array &kwds_as_array) const\n     {\n       const arrfunc_type_data *self = get();\n       const arrfunc_type *self_tp = m_value.get_type().extended<arrfunc_type>();\n \n-      if (nsrc != self_tp->get_npos()) {\n+      if (!self_tp->is_pos_variadic() && nsrc != self_tp->get_npos()) {", "path": "include/dynd/func/arrfunc.hpp", "position": 72, "original_position": 72, "commit_id": "974e12537dca247e0c0348b64ccbe09af40094f9", "original_commit_id": "f80a407643ed246d7a0243444b99f81cdbde8b3e", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "I think this check isn't quite right, for a signature like (int, int, ...) -> int, but being passed too few values.\n", "created_at": "2014-12-29T21:22:01Z", "updated_at": "2014-12-29T22:02:56Z", "html_url": "https://github.com/libdynd/libdynd/pull/232#discussion_r22329046", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/232", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/22329046"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/232#discussion_r22329046"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/232"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/22329046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/22331041", "pull_request_review_id": null, "id": 22331041, "diff_hunk": "@@ -613,14 +619,15 @@ namespace nd {\n     }\n \n     template <typename... K>\n-    ndt::type resolve(intptr_t nsrc, const ndt::type *src_tp, const char *const *src_arrmeta,\n+    ndt::type resolve(intptr_t nsrc, const ndt::type *src_tp,\n+                      const char *const *src_arrmeta,\n                       const detail::kwds<K...> &kwds,\n                       array &kwds_as_array) const\n     {\n       const arrfunc_type_data *self = get();\n       const arrfunc_type *self_tp = m_value.get_type().extended<arrfunc_type>();\n \n-      if (nsrc != self_tp->get_npos()) {\n+      if (!self_tp->is_pos_variadic() && nsrc != self_tp->get_npos()) {", "path": "include/dynd/func/arrfunc.hpp", "position": 72, "original_position": 72, "commit_id": "974e12537dca247e0c0348b64ccbe09af40094f9", "original_commit_id": "f80a407643ed246d7a0243444b99f81cdbde8b3e", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "It's not, we should probably ensure nsrc >= self_tp->get_npos().\n", "created_at": "2014-12-29T22:05:27Z", "updated_at": "2014-12-29T22:05:27Z", "html_url": "https://github.com/libdynd/libdynd/pull/232#discussion_r22331041", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/232", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/22331041"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/232#discussion_r22331041"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/232"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/22331041/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/26618758", "pull_request_review_id": null, "id": 26618758, "diff_hunk": "@@ -162,8 +152,7 @@ namespace nd {\n       {\n         if (val.get_type().get_type_id() == pointer_type_id) {\n           m_val = val.f(\"dereference\").as<T>();\n-        }\n-        else {\n+        } else {", "path": "include/dynd/kernels/apply.hpp", "position": 73, "original_position": 73, "commit_id": "f4ff06431559569b71d3da3affd1842f2b889c8d", "original_commit_id": "f4ff06431559569b71d3da3affd1842f2b889c8d", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "This is a bit annoying - the clang-format embedded in MSVC is behaving differently than other clang-format embeddings for this case.\n", "created_at": "2015-03-17T21:34:33Z", "updated_at": "2015-03-17T21:34:33Z", "html_url": "https://github.com/libdynd/libdynd/pull/332#discussion_r26618758", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/332", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/26618758"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/332#discussion_r26618758"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/332"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/26618758/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/26622522", "pull_request_review_id": null, "id": 26622522, "diff_hunk": "@@ -8,284 +8,195 @@\n namespace dynd {\n \n struct start_stop_t {\n-    intptr_t start;\n-    intptr_t stop;\n+  intptr_t start;\n+  intptr_t stop;\n };\n \n-namespace nd {\n-\n namespace detail {\n \n-template <int N>\n-struct strided_utils {\n-    static const char *get(const char *pointer, const intptr_t *index, const intptr_t *strides) {\n-        return strided_utils<N - 1>::get(pointer, strides, index) + index[N - 1] * strides[N - 1];\n-    }\n-\n-    static bool is_valid(const intptr_t *index, const start_stop_t *start_stop) {\n-        return strided_utils<N - 1>::is_valid(index, start_stop) && (index[N - 1] >= start_stop[N - 1].start) && (index[N - 1] < start_stop[N - 1].stop);\n-    }\n+  template <typename T, bool inner>\n+  class fixed_dim;\n+\n+  template <typename T>\n+  class fixed_dim<T, true> {\n+  public:\n+    static const size_t arrmeta_size = sizeof(fixed_dim_type_arrmeta);\n+    static const intptr_t ndim = 1;\n+    typedef T dtype;\n+\n+    static int at(const intptr_t *i, const char *arrmeta, const char *data)\n+    {\n+      return *reinterpret_cast<const T *>(\n+                 data +\n+                 i[0] *\n+                     reinterpret_cast<const fixed_dim_type_arrmeta *>(arrmeta)\n+                         ->stride);\n+    }\n+\n+    static void incr(const char *arrmeta, const char **data, intptr_t *index)\n+    {\n+      ++index[0];\n+      *data +=\n+          reinterpret_cast<const fixed_dim_type_arrmeta *>(arrmeta)->stride;\n+    }\n+  };\n+\n+  template <typename T>\n+  class fixed_dim<T, false> {", "path": "include/dynd/strided_vals.hpp", "position": 51, "original_position": 51, "commit_id": "f4ff06431559569b71d3da3affd1842f2b889c8d", "original_commit_id": "f4ff06431559569b71d3da3affd1842f2b889c8d", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "Couldn't the inner parameter be handled more cleanly by a recursive case? Something like:\n\n```\ntemplate <typename T>\n  class fixed_dim<fixed_dim<T>> {\n\n```\n", "created_at": "2015-03-17T22:21:08Z", "updated_at": "2015-03-17T22:21:08Z", "html_url": "https://github.com/libdynd/libdynd/pull/332#discussion_r26622522", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/332", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/26622522"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/332#discussion_r26622522"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/332"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/26622522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/26626785", "pull_request_review_id": null, "id": 26626785, "diff_hunk": "@@ -8,284 +8,195 @@\n namespace dynd {\n \n struct start_stop_t {\n-    intptr_t start;\n-    intptr_t stop;\n+  intptr_t start;\n+  intptr_t stop;\n };\n \n-namespace nd {\n-\n namespace detail {\n \n-template <int N>\n-struct strided_utils {\n-    static const char *get(const char *pointer, const intptr_t *index, const intptr_t *strides) {\n-        return strided_utils<N - 1>::get(pointer, strides, index) + index[N - 1] * strides[N - 1];\n-    }\n-\n-    static bool is_valid(const intptr_t *index, const start_stop_t *start_stop) {\n-        return strided_utils<N - 1>::is_valid(index, start_stop) && (index[N - 1] >= start_stop[N - 1].start) && (index[N - 1] < start_stop[N - 1].stop);\n-    }\n+  template <typename T, bool inner>\n+  class fixed_dim;\n+\n+  template <typename T>\n+  class fixed_dim<T, true> {\n+  public:\n+    static const size_t arrmeta_size = sizeof(fixed_dim_type_arrmeta);\n+    static const intptr_t ndim = 1;\n+    typedef T dtype;\n+\n+    static int at(const intptr_t *i, const char *arrmeta, const char *data)\n+    {\n+      return *reinterpret_cast<const T *>(\n+                 data +\n+                 i[0] *\n+                     reinterpret_cast<const fixed_dim_type_arrmeta *>(arrmeta)\n+                         ->stride);\n+    }\n+\n+    static void incr(const char *arrmeta, const char **data, intptr_t *index)\n+    {\n+      ++index[0];\n+      *data +=\n+          reinterpret_cast<const fixed_dim_type_arrmeta *>(arrmeta)->stride;\n+    }\n+  };\n+\n+  template <typename T>\n+  class fixed_dim<T, false> {", "path": "include/dynd/strided_vals.hpp", "position": 51, "original_position": 51, "commit_id": "f4ff06431559569b71d3da3affd1842f2b889c8d", "original_commit_id": "f4ff06431559569b71d3da3affd1842f2b889c8d", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "What about if we want to support var_dim (not for neighborhood, but for apply or iteration)? I guess we could do that by simply inheriting from the fixed_dim<fixed_dim<T>> case?\n", "created_at": "2015-03-17T23:28:03Z", "updated_at": "2015-03-17T23:28:03Z", "html_url": "https://github.com/libdynd/libdynd/pull/332#discussion_r26626785", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/332", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/26626785"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/332#discussion_r26626785"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/332"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/26626785/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/26628110", "pull_request_review_id": null, "id": 26628110, "diff_hunk": "@@ -8,284 +8,195 @@\n namespace dynd {\n \n struct start_stop_t {\n-    intptr_t start;\n-    intptr_t stop;\n+  intptr_t start;\n+  intptr_t stop;\n };\n \n-namespace nd {\n-\n namespace detail {\n \n-template <int N>\n-struct strided_utils {\n-    static const char *get(const char *pointer, const intptr_t *index, const intptr_t *strides) {\n-        return strided_utils<N - 1>::get(pointer, strides, index) + index[N - 1] * strides[N - 1];\n-    }\n-\n-    static bool is_valid(const intptr_t *index, const start_stop_t *start_stop) {\n-        return strided_utils<N - 1>::is_valid(index, start_stop) && (index[N - 1] >= start_stop[N - 1].start) && (index[N - 1] < start_stop[N - 1].stop);\n-    }\n+  template <typename T, bool inner>\n+  class fixed_dim;\n+\n+  template <typename T>\n+  class fixed_dim<T, true> {\n+  public:\n+    static const size_t arrmeta_size = sizeof(fixed_dim_type_arrmeta);\n+    static const intptr_t ndim = 1;\n+    typedef T dtype;\n+\n+    static int at(const intptr_t *i, const char *arrmeta, const char *data)\n+    {\n+      return *reinterpret_cast<const T *>(\n+                 data +\n+                 i[0] *\n+                     reinterpret_cast<const fixed_dim_type_arrmeta *>(arrmeta)\n+                         ->stride);\n+    }\n+\n+    static void incr(const char *arrmeta, const char **data, intptr_t *index)\n+    {\n+      ++index[0];\n+      *data +=\n+          reinterpret_cast<const fixed_dim_type_arrmeta *>(arrmeta)->stride;\n+    }\n+  };\n+\n+  template <typename T>\n+  class fixed_dim<T, false> {", "path": "include/dynd/strided_vals.hpp", "position": 51, "original_position": 51, "commit_id": "f4ff06431559569b71d3da3affd1842f2b889c8d", "original_commit_id": "f4ff06431559569b71d3da3affd1842f2b889c8d", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "Ok, so the reason to have this flag in there is to share implementation details between var_dim and fixed_dim, using the is_dim<...> metafunction.\n", "created_at": "2015-03-17T23:53:42Z", "updated_at": "2015-03-17T23:53:42Z", "html_url": "https://github.com/libdynd/libdynd/pull/332#discussion_r26628110", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/332", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/26628110"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/332#discussion_r26628110"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/332"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/26628110/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/26628336", "pull_request_review_id": null, "id": 26628336, "diff_hunk": "@@ -8,284 +8,195 @@\n namespace dynd {\n \n struct start_stop_t {\n-    intptr_t start;\n-    intptr_t stop;\n+  intptr_t start;\n+  intptr_t stop;\n };\n \n-namespace nd {\n-\n namespace detail {\n \n-template <int N>\n-struct strided_utils {\n-    static const char *get(const char *pointer, const intptr_t *index, const intptr_t *strides) {\n-        return strided_utils<N - 1>::get(pointer, strides, index) + index[N - 1] * strides[N - 1];\n-    }\n-\n-    static bool is_valid(const intptr_t *index, const start_stop_t *start_stop) {\n-        return strided_utils<N - 1>::is_valid(index, start_stop) && (index[N - 1] >= start_stop[N - 1].start) && (index[N - 1] < start_stop[N - 1].stop);\n-    }\n+  template <typename T, bool inner>\n+  class fixed_dim;\n+\n+  template <typename T>\n+  class fixed_dim<T, true> {\n+  public:\n+    static const size_t arrmeta_size = sizeof(fixed_dim_type_arrmeta);\n+    static const intptr_t ndim = 1;\n+    typedef T dtype;\n+\n+    static int at(const intptr_t *i, const char *arrmeta, const char *data)\n+    {\n+      return *reinterpret_cast<const T *>(\n+                 data +\n+                 i[0] *\n+                     reinterpret_cast<const fixed_dim_type_arrmeta *>(arrmeta)\n+                         ->stride);\n+    }\n+\n+    static void incr(const char *arrmeta, const char **data, intptr_t *index)\n+    {\n+      ++index[0];\n+      *data +=\n+          reinterpret_cast<const fixed_dim_type_arrmeta *>(arrmeta)->stride;\n+    }\n+  };\n+\n+  template <typename T>\n+  class fixed_dim<T, false> {", "path": "include/dynd/strided_vals.hpp", "position": 51, "original_position": 51, "commit_id": "f4ff06431559569b71d3da3affd1842f2b889c8d", "original_commit_id": "f4ff06431559569b71d3da3affd1842f2b889c8d", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "The flag is because the innermost details need to be specialized. But, yes, fixed_dim[var_dim[T]] and fixed_dim[fixed_dim[T]] should behave the same way at the outermost fixed_dim.\n", "created_at": "2015-03-17T23:57:52Z", "updated_at": "2015-03-17T23:57:52Z", "html_url": "https://github.com/libdynd/libdynd/pull/332#discussion_r26628336", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/332", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/26628336"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/332#discussion_r26628336"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/332"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/26628336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/26628871", "pull_request_review_id": null, "id": 26628871, "diff_hunk": "@@ -8,284 +8,195 @@\n namespace dynd {\n \n struct start_stop_t {\n-    intptr_t start;\n-    intptr_t stop;\n+  intptr_t start;\n+  intptr_t stop;\n };\n \n-namespace nd {\n-\n namespace detail {\n \n-template <int N>\n-struct strided_utils {\n-    static const char *get(const char *pointer, const intptr_t *index, const intptr_t *strides) {\n-        return strided_utils<N - 1>::get(pointer, strides, index) + index[N - 1] * strides[N - 1];\n-    }\n-\n-    static bool is_valid(const intptr_t *index, const start_stop_t *start_stop) {\n-        return strided_utils<N - 1>::is_valid(index, start_stop) && (index[N - 1] >= start_stop[N - 1].start) && (index[N - 1] < start_stop[N - 1].stop);\n-    }\n+  template <typename T, bool inner>\n+  class fixed_dim;\n+\n+  template <typename T>\n+  class fixed_dim<T, true> {\n+  public:\n+    static const size_t arrmeta_size = sizeof(fixed_dim_type_arrmeta);\n+    static const intptr_t ndim = 1;\n+    typedef T dtype;\n+\n+    static int at(const intptr_t *i, const char *arrmeta, const char *data)\n+    {\n+      return *reinterpret_cast<const T *>(\n+                 data +\n+                 i[0] *\n+                     reinterpret_cast<const fixed_dim_type_arrmeta *>(arrmeta)\n+                         ->stride);\n+    }\n+\n+    static void incr(const char *arrmeta, const char **data, intptr_t *index)\n+    {\n+      ++index[0];\n+      *data +=\n+          reinterpret_cast<const fixed_dim_type_arrmeta *>(arrmeta)->stride;\n+    }\n+  };\n+\n+  template <typename T>\n+  class fixed_dim<T, false> {\n+  public:\n+    static const size_t arrmeta_size =\n+        sizeof(fixed_dim_type_arrmeta) + T::arrmeta_size;\n+    static const intptr_t ndim = 1 + T::ndim;\n+    typedef typename T::dtype dtype;\n+\n+    static int at(const intptr_t *i, const char *arrmeta, const char *data)\n+    {\n+      return T::at(\n+          i + 1, arrmeta + sizeof(size_stride_t),\n+          data +\n+              i[0] * reinterpret_cast<const size_stride_t *>(arrmeta)->stride);\n+    }\n+\n+    static void incr(const char *arrmeta, const char **data, intptr_t *index)\n+    {\n+      const size_stride_t *size_stride =\n+          reinterpret_cast<const size_stride_t *>(arrmeta);\n+\n+      if (++index[0] != size_stride->dim_size) {\n+        *data += size_stride->stride;\n+      } else {\n+        index[0] = 0;\n+        *data -= (size_stride->dim_size - 1) * size_stride->stride;\n+        T::incr(arrmeta + sizeof(size_stride_t), data, index + 1);\n+      }\n+    }\n+  };\n+\n+} // namespace dynd::detail\n \n-    static void incr(const char *&pointer, intptr_t *index, const intptr_t *sizes, const intptr_t *strides) {\n-        if (++index[N - 1] != sizes[N - 1]) {\n-            pointer += strides[N - 1];\n-        } else {\n-            index[N - 1] = 0;\n-            pointer -= (sizes[N - 1] - 1) * strides[N - 1];\n-            strided_utils<N - 1>::incr(pointer, index, sizes, strides);\n-        }\n-    }\n+template <typename T>\n+struct is_dim {\n+  static const bool value = false;\n };\n \n-template <>\n-struct strided_utils<1> {\n-    static const char *get(const char *pointer, const intptr_t *index, const intptr_t *strides) {\n-        return pointer + index[0] * strides[0];\n-    }\n-\n-    static bool is_valid(const intptr_t *index, const start_stop_t *start_stop) {\n-        return (index[0] >= start_stop[0].start) && (index[0] < start_stop[0].stop);\n-    }\n-\n-    static void incr(const char *&pointer, intptr_t *index, const intptr_t *DYND_UNUSED(sizes), const intptr_t *strides) {\n-        ++index[0];\n-        pointer += strides[0];\n-    }\n+template <typename T>\n+struct is_dim<fixed_dim<T>> {\n+  static const bool value = true;\n };\n \n-template <typename T, int N>\n-class strided_vals {\n-    struct {\n-        const char *pointer;\n-        intptr_t strides[N];\n-    } m_data;\n-    struct {\n-        const char *pointer;\n-        intptr_t strides[N];\n-    } m_mask;\n-    intptr_t m_sizes[N];\n-    const start_stop_t *m_start_stop;\n-    intptr_t m_center_index[N];\n+template <typename T>\n+class fixed_dim : public detail::fixed_dim<T, !is_dim<T>::value> {\n+  char m_arrmeta[fixed_dim::arrmeta_size];\n+  const char *m_data;\n+  const start_stop_t *m_start_stop;", "path": "include/dynd/strided_vals.hpp", "position": 133, "original_position": 133, "commit_id": "f4ff06431559569b71d3da3affd1842f2b889c8d", "original_commit_id": "f4ff06431559569b71d3da3affd1842f2b889c8d", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "What's the purpose of start_stop_t?\n", "created_at": "2015-03-18T00:10:19Z", "updated_at": "2015-03-18T00:10:19Z", "html_url": "https://github.com/libdynd/libdynd/pull/332#discussion_r26628871", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/332", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/26628871"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/332#discussion_r26628871"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/332"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/26628871/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/26629037", "pull_request_review_id": null, "id": 26629037, "diff_hunk": "@@ -54,46 +59,51 @@ inline void *inc_to_alignment(void *ptr, size_t alignment) {\n  * \\returns  True if the offset is divisible by the power of two alignment,\n  *           False otherwise.\n  */\n-inline bool offset_is_aligned(size_t offset, size_t alignment) {\n-    return (offset&(alignment - 1)) == 0;\n+inline bool offset_is_aligned(size_t offset, size_t alignment)\n+{\n+  return (offset & (alignment - 1)) == 0;\n }\n \n /** Prints a single scalar of a builtin type to the stream */\n-void print_builtin_scalar(type_id_t type_id, std::ostream& o, const char *data);\n+void print_builtin_scalar(type_id_t type_id, std::ostream &o, const char *data);\n \n /** Special iterdata which broadcasts to any number of additional dimensions */\n struct iterdata_broadcasting_terminator {\n-    iterdata_common common;\n-    char *data;\n+  iterdata_common common;\n+  char *data;\n };\n-char *iterdata_broadcasting_terminator_incr(iterdata_common *iterdata, intptr_t level);\n-char *iterdata_broadcasting_terminator_adv(iterdata_common *iterdata, intptr_t level, intptr_t i);\n-char *iterdata_broadcasting_terminator_reset(iterdata_common *iterdata, char *data, intptr_t level);\n+char *iterdata_broadcasting_terminator_incr(iterdata_common *iterdata,\n+                                            intptr_t level);\n+char *iterdata_broadcasting_terminator_adv(iterdata_common *iterdata,\n+                                           intptr_t level, intptr_t i);\n+char *iterdata_broadcasting_terminator_reset(iterdata_common *iterdata,\n+                                             char *data, intptr_t level);\n+\n+// Forward declaration of strided_vals", "path": "include/dynd/type.hpp", "position": 72, "original_position": 72, "commit_id": "f4ff06431559569b71d3da3affd1842f2b889c8d", "original_commit_id": "f4ff06431559569b71d3da3affd1842f2b889c8d", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "Comment out of date here\n", "created_at": "2015-03-18T00:14:16Z", "updated_at": "2015-03-18T00:14:16Z", "html_url": "https://github.com/libdynd/libdynd/pull/332#discussion_r26629037", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/332", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/26629037"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/332#discussion_r26629037"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/332"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/26629037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/26631448", "pull_request_review_id": null, "id": 26631448, "diff_hunk": "@@ -8,284 +8,195 @@\n namespace dynd {\n \n struct start_stop_t {\n-    intptr_t start;\n-    intptr_t stop;\n+  intptr_t start;\n+  intptr_t stop;\n };\n \n-namespace nd {\n-\n namespace detail {\n \n-template <int N>\n-struct strided_utils {\n-    static const char *get(const char *pointer, const intptr_t *index, const intptr_t *strides) {\n-        return strided_utils<N - 1>::get(pointer, strides, index) + index[N - 1] * strides[N - 1];\n-    }\n-\n-    static bool is_valid(const intptr_t *index, const start_stop_t *start_stop) {\n-        return strided_utils<N - 1>::is_valid(index, start_stop) && (index[N - 1] >= start_stop[N - 1].start) && (index[N - 1] < start_stop[N - 1].stop);\n-    }\n+  template <typename T, bool inner>\n+  class fixed_dim;\n+\n+  template <typename T>\n+  class fixed_dim<T, true> {\n+  public:\n+    static const size_t arrmeta_size = sizeof(fixed_dim_type_arrmeta);\n+    static const intptr_t ndim = 1;\n+    typedef T dtype;\n+\n+    static int at(const intptr_t *i, const char *arrmeta, const char *data)\n+    {\n+      return *reinterpret_cast<const T *>(\n+                 data +\n+                 i[0] *\n+                     reinterpret_cast<const fixed_dim_type_arrmeta *>(arrmeta)\n+                         ->stride);\n+    }\n+\n+    static void incr(const char *arrmeta, const char **data, intptr_t *index)\n+    {\n+      ++index[0];\n+      *data +=\n+          reinterpret_cast<const fixed_dim_type_arrmeta *>(arrmeta)->stride;\n+    }\n+  };\n+\n+  template <typename T>\n+  class fixed_dim<T, false> {\n+  public:\n+    static const size_t arrmeta_size =\n+        sizeof(fixed_dim_type_arrmeta) + T::arrmeta_size;\n+    static const intptr_t ndim = 1 + T::ndim;\n+    typedef typename T::dtype dtype;\n+\n+    static int at(const intptr_t *i, const char *arrmeta, const char *data)\n+    {\n+      return T::at(\n+          i + 1, arrmeta + sizeof(size_stride_t),\n+          data +\n+              i[0] * reinterpret_cast<const size_stride_t *>(arrmeta)->stride);\n+    }\n+\n+    static void incr(const char *arrmeta, const char **data, intptr_t *index)\n+    {\n+      const size_stride_t *size_stride =\n+          reinterpret_cast<const size_stride_t *>(arrmeta);\n+\n+      if (++index[0] != size_stride->dim_size) {\n+        *data += size_stride->stride;\n+      } else {\n+        index[0] = 0;\n+        *data -= (size_stride->dim_size - 1) * size_stride->stride;\n+        T::incr(arrmeta + sizeof(size_stride_t), data, index + 1);\n+      }\n+    }\n+  };\n+\n+} // namespace dynd::detail\n \n-    static void incr(const char *&pointer, intptr_t *index, const intptr_t *sizes, const intptr_t *strides) {\n-        if (++index[N - 1] != sizes[N - 1]) {\n-            pointer += strides[N - 1];\n-        } else {\n-            index[N - 1] = 0;\n-            pointer -= (sizes[N - 1] - 1) * strides[N - 1];\n-            strided_utils<N - 1>::incr(pointer, index, sizes, strides);\n-        }\n-    }\n+template <typename T>\n+struct is_dim {\n+  static const bool value = false;\n };\n \n-template <>\n-struct strided_utils<1> {\n-    static const char *get(const char *pointer, const intptr_t *index, const intptr_t *strides) {\n-        return pointer + index[0] * strides[0];\n-    }\n-\n-    static bool is_valid(const intptr_t *index, const start_stop_t *start_stop) {\n-        return (index[0] >= start_stop[0].start) && (index[0] < start_stop[0].stop);\n-    }\n-\n-    static void incr(const char *&pointer, intptr_t *index, const intptr_t *DYND_UNUSED(sizes), const intptr_t *strides) {\n-        ++index[0];\n-        pointer += strides[0];\n-    }\n+template <typename T>\n+struct is_dim<fixed_dim<T>> {\n+  static const bool value = true;\n };\n \n-template <typename T, int N>\n-class strided_vals {\n-    struct {\n-        const char *pointer;\n-        intptr_t strides[N];\n-    } m_data;\n-    struct {\n-        const char *pointer;\n-        intptr_t strides[N];\n-    } m_mask;\n-    intptr_t m_sizes[N];\n-    const start_stop_t *m_start_stop;\n-    intptr_t m_center_index[N];\n+template <typename T>\n+class fixed_dim : public detail::fixed_dim<T, !is_dim<T>::value> {\n+  char m_arrmeta[fixed_dim::arrmeta_size];\n+  const char *m_data;\n+  const start_stop_t *m_start_stop;", "path": "include/dynd/strided_vals.hpp", "position": 133, "original_position": 133, "commit_id": "f4ff06431559569b71d3da3affd1842f2b889c8d", "original_commit_id": "f4ff06431559569b71d3da3affd1842f2b889c8d", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "It's a bit vestigal. We need a mechanism to support using fixed_dim in neighborhood. This tells which parts of the neighborhood are out of bounds. I'm trying to figure out a better way to do that...\n", "created_at": "2015-03-18T01:11:25Z", "updated_at": "2015-03-18T01:11:25Z", "html_url": "https://github.com/libdynd/libdynd/pull/332#discussion_r26631448", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/332", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/26631448"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/332#discussion_r26631448"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/332"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/26631448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/26631454", "pull_request_review_id": null, "id": 26631454, "diff_hunk": "@@ -54,46 +59,51 @@ inline void *inc_to_alignment(void *ptr, size_t alignment) {\n  * \\returns  True if the offset is divisible by the power of two alignment,\n  *           False otherwise.\n  */\n-inline bool offset_is_aligned(size_t offset, size_t alignment) {\n-    return (offset&(alignment - 1)) == 0;\n+inline bool offset_is_aligned(size_t offset, size_t alignment)\n+{\n+  return (offset & (alignment - 1)) == 0;\n }\n \n /** Prints a single scalar of a builtin type to the stream */\n-void print_builtin_scalar(type_id_t type_id, std::ostream& o, const char *data);\n+void print_builtin_scalar(type_id_t type_id, std::ostream &o, const char *data);\n \n /** Special iterdata which broadcasts to any number of additional dimensions */\n struct iterdata_broadcasting_terminator {\n-    iterdata_common common;\n-    char *data;\n+  iterdata_common common;\n+  char *data;\n };\n-char *iterdata_broadcasting_terminator_incr(iterdata_common *iterdata, intptr_t level);\n-char *iterdata_broadcasting_terminator_adv(iterdata_common *iterdata, intptr_t level, intptr_t i);\n-char *iterdata_broadcasting_terminator_reset(iterdata_common *iterdata, char *data, intptr_t level);\n+char *iterdata_broadcasting_terminator_incr(iterdata_common *iterdata,\n+                                            intptr_t level);\n+char *iterdata_broadcasting_terminator_adv(iterdata_common *iterdata,\n+                                           intptr_t level, intptr_t i);\n+char *iterdata_broadcasting_terminator_reset(iterdata_common *iterdata,\n+                                             char *data, intptr_t level);\n+\n+// Forward declaration of strided_vals", "path": "include/dynd/type.hpp", "position": 72, "original_position": 72, "commit_id": "f4ff06431559569b71d3da3affd1842f2b889c8d", "original_commit_id": "f4ff06431559569b71d3da3affd1842f2b889c8d", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Also true.\n", "created_at": "2015-03-18T01:11:34Z", "updated_at": "2015-03-18T01:11:34Z", "html_url": "https://github.com/libdynd/libdynd/pull/332#discussion_r26631454", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/332", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/26631454"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/332#discussion_r26631454"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/332"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/26631454/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/26904981", "pull_request_review_id": null, "id": 26904981, "diff_hunk": "@@ -622,4 +690,55 @@ struct is_type_bool<bool> {\n   enum { value = true };\n };\n \n-} // namespace dynd\n+namespace detail {\n+\n+  template <typename T, int N>\n+  class array_by_type_id;", "path": "include/dynd/types/type_id.hpp", "position": 83, "original_position": 83, "commit_id": "b6e1de38cd4d27a05694041bee0cf5c4f38bdad0", "original_commit_id": "db17da634dae23f2e8e3bce5abe77b830a9f8747", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "Should have a docstring.\n", "created_at": "2015-03-22T17:20:25Z", "updated_at": "2015-03-23T09:07:56Z", "html_url": "https://github.com/libdynd/libdynd/pull/334#discussion_r26904981", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/334", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/26904981"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/334#discussion_r26904981"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/334"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/26904981/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/26905012", "pull_request_review_id": null, "id": 26905012, "diff_hunk": "@@ -4,73 +4,73 @@\n //\n \n #include <dynd/func/arithmetic.hpp>\n+#include <dynd/func/elwise.hpp>\n #include <dynd/kernels/arithmetic.hpp>\n-#include <dynd/array.hpp>\n \n using namespace dynd;\n \n-#define BUILTIN_ROW(NAME, A0)                                                  \\\n-  {                                                                            \\\n-    NULL, &create<nd::NAME<A0, int8_t>>, &create<nd::NAME<A0, int16_t>>,       \\\n-        &create<nd::NAME<A0, int32_t>>, &create<nd::NAME<A0, int64_t>>, NULL,  \\\n-        &create<nd::NAME<A0, uint8_t>>, &create<nd::NAME<A0, uint16_t>>,       \\\n-        &create<nd::NAME<A0, uint32_t>>, &create<nd::NAME<A0, uint64_t>>,      \\\n-        NULL, NULL, &create<nd::NAME<A0, float>>,                              \\\n-        &create<nd::NAME<A0, double>>, NULL,                                   \\\n-        &create<nd::NAME<A0, dynd::complex<float>>>,                           \\\n-        &create<nd::NAME<A0, dynd::complex<double>>>,                          \\\n-  }\n-\n-#define BUILTIN_TABLE(NAME)                                                    \\\n-  const create_t nd::NAME::builtin_table[builtin_type_id_count -               \\\n-                                         2][builtin_type_id_count - 2] = {     \\\n-      {NULL},                                                                  \\\n-      BUILTIN_ROW(NAME##_ck, int8_t),                                          \\\n-      BUILTIN_ROW(NAME##_ck, int16_t),                                         \\\n-      BUILTIN_ROW(NAME##_ck, int32_t),                                         \\\n-      BUILTIN_ROW(NAME##_ck, int64_t),                                         \\\n-      {NULL},                                                                  \\\n-      BUILTIN_ROW(NAME##_ck, uint8_t),                                         \\\n-      BUILTIN_ROW(NAME##_ck, uint16_t),                                        \\\n-      BUILTIN_ROW(NAME##_ck, uint32_t),                                        \\\n-      BUILTIN_ROW(NAME##_ck, uint64_t),                                        \\\n-      {NULL},                                                                  \\\n-      {NULL},                                                                  \\\n-      BUILTIN_ROW(NAME##_ck, float),                                           \\\n-      BUILTIN_ROW(NAME##_ck, double),                                          \\\n-      {NULL},                                                                  \\\n-      BUILTIN_ROW(NAME##_ck, dynd::complex<float>),                            \\\n-      BUILTIN_ROW(NAME##_ck, dynd::complex<double>)};\n-\n-BUILTIN_TABLE(add);\n-BUILTIN_TABLE(sub);\n-BUILTIN_TABLE(mul);\n-BUILTIN_TABLE(div);\n-\n-#undef BUILTIN_TABLE\n-#undef BUILTIN_ROW\n+nd::arrfunc nd::plus::make()\n+{\n+  return functional::elwise(as_arrfunc<multidispatch_plus_ck>());\n+}\n+\n+struct nd::plus nd::plus;\n+\n+nd::array nd::operator+(const nd::array &a0) { return nd::plus(a0); }", "path": "src/dynd/func/arithmetic.cpp", "position": 62, "original_position": 57, "commit_id": "b6e1de38cd4d27a05694041bee0cf5c4f38bdad0", "original_commit_id": "db17da634dae23f2e8e3bce5abe77b830a9f8747", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "So nd::plus is both the type of the class and the instance, is that right? I'm used to that kind of thing being problematic, does it work fully consistently now?\n", "created_at": "2015-03-22T17:24:02Z", "updated_at": "2015-03-23T09:07:56Z", "html_url": "https://github.com/libdynd/libdynd/pull/334#discussion_r26905012", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/334", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/26905012"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/334#discussion_r26905012"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/334"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/26905012/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/26905115", "pull_request_review_id": null, "id": 26905115, "diff_hunk": "@@ -0,0 +1,100 @@\n+//\n+// Copyright (C) 2011-15 DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#include <dynd/kernels/arithmetic.hpp>\n+\n+using namespace std;\n+using namespace dynd;\n+\n+#define DYND_BUILTIN_TYPE_IDS                                                  \\\n+  (int8_type_id, int16_type_id, int32_type_id, int64_type_id, uint8_type_id,   \\\n+   uint16_type_id, uint32_type_id, uint64_type_id, float32_type_id,            \\\n+   float64_type_id, complex_float32_type_id, complex_float64_type_id)\n+\n+#define MAKE_PAIRS(I) DYND_PP_JOIN_MAP(MAKE_PAIR, (, ), I)\n+\n+#define MAKE_PAIR(I) std::make_pair(I, as_arrfunc<plus_ck<I>>())\n+\n+detail::array_by_type_id<nd::arrfunc, 1> nd::multidispatch_plus_ck::children(\n+    {MAKE_PAIRS((int8_type_id, int16_type_id, int32_type_id, int64_type_id,\n+                 uint8_type_id, uint16_type_id, uint32_type_id, uint64_type_id,\n+                 float32_type_id, float64_type_id, complex_float32_type_id))});\n+\n+#undef MAKE_PAIR\n+\n+ndt::type nd::multidispatch_plus_ck::make_type()\n+{\n+  return ndt::type(\"(A0) -> R\");\n+}\n+\n+detail::array_by_type_id<nd::arrfunc, 1> nd::multidispatch_minus_ck::children(\n+    {std::make_pair(int32_type_id, as_arrfunc<minus_ck<int32_t>>()),\n+     std::make_pair(int64_type_id, as_arrfunc<minus_ck<int64_t>>()),\n+     std::make_pair(float32_type_id, as_arrfunc<minus_ck<float>>()),\n+     std::make_pair(float64_type_id, as_arrfunc<minus_ck<double>>())});\n+\n+ndt::type nd::multidispatch_minus_ck::make_type()\n+{\n+  return ndt::type(\"(A0) -> R\");\n+}\n+\n+#undef MAKE_PAIRS\n+\n+#define MAKE_PAIRS(I, J)                                                       \\\n+  DYND_PP_JOIN_ELWISE(_MAKE_PAIRS, (, ), I, DYND_PP_REPEAT(J, DYND_PP_LEN(I)))\n+#define _MAKE_PAIRS(I, J)                                                      \\\n+  DYND_PP_JOIN_ELWISE_1(MAKE_PAIR, (, ), DYND_PP_REPEAT(I, DYND_PP_LEN(J)), J)", "path": "src/dynd/kernels/arithmetic.cpp", "position": null, "original_position": 48, "commit_id": "b6e1de38cd4d27a05694041bee0cf5c4f38bdad0", "original_commit_id": "db17da634dae23f2e8e3bce5abe77b830a9f8747", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "I believe using identifiers like this with an _ at the beginning, is undefined, because the standard reserves such names for the compiler to do whatever it likes with. I think it would be a good practice to avoid using this kind of name.\n", "created_at": "2015-03-22T17:36:16Z", "updated_at": "2015-03-23T09:07:56Z", "html_url": "https://github.com/libdynd/libdynd/pull/334#discussion_r26905115", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/334", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/26905115"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/334#discussion_r26905115"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/334"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/26905115/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/26906015", "pull_request_review_id": null, "id": 26906015, "diff_hunk": "@@ -4,73 +4,73 @@\n //\n \n #include <dynd/func/arithmetic.hpp>\n+#include <dynd/func/elwise.hpp>\n #include <dynd/kernels/arithmetic.hpp>\n-#include <dynd/array.hpp>\n \n using namespace dynd;\n \n-#define BUILTIN_ROW(NAME, A0)                                                  \\\n-  {                                                                            \\\n-    NULL, &create<nd::NAME<A0, int8_t>>, &create<nd::NAME<A0, int16_t>>,       \\\n-        &create<nd::NAME<A0, int32_t>>, &create<nd::NAME<A0, int64_t>>, NULL,  \\\n-        &create<nd::NAME<A0, uint8_t>>, &create<nd::NAME<A0, uint16_t>>,       \\\n-        &create<nd::NAME<A0, uint32_t>>, &create<nd::NAME<A0, uint64_t>>,      \\\n-        NULL, NULL, &create<nd::NAME<A0, float>>,                              \\\n-        &create<nd::NAME<A0, double>>, NULL,                                   \\\n-        &create<nd::NAME<A0, dynd::complex<float>>>,                           \\\n-        &create<nd::NAME<A0, dynd::complex<double>>>,                          \\\n-  }\n-\n-#define BUILTIN_TABLE(NAME)                                                    \\\n-  const create_t nd::NAME::builtin_table[builtin_type_id_count -               \\\n-                                         2][builtin_type_id_count - 2] = {     \\\n-      {NULL},                                                                  \\\n-      BUILTIN_ROW(NAME##_ck, int8_t),                                          \\\n-      BUILTIN_ROW(NAME##_ck, int16_t),                                         \\\n-      BUILTIN_ROW(NAME##_ck, int32_t),                                         \\\n-      BUILTIN_ROW(NAME##_ck, int64_t),                                         \\\n-      {NULL},                                                                  \\\n-      BUILTIN_ROW(NAME##_ck, uint8_t),                                         \\\n-      BUILTIN_ROW(NAME##_ck, uint16_t),                                        \\\n-      BUILTIN_ROW(NAME##_ck, uint32_t),                                        \\\n-      BUILTIN_ROW(NAME##_ck, uint64_t),                                        \\\n-      {NULL},                                                                  \\\n-      {NULL},                                                                  \\\n-      BUILTIN_ROW(NAME##_ck, float),                                           \\\n-      BUILTIN_ROW(NAME##_ck, double),                                          \\\n-      {NULL},                                                                  \\\n-      BUILTIN_ROW(NAME##_ck, dynd::complex<float>),                            \\\n-      BUILTIN_ROW(NAME##_ck, dynd::complex<double>)};\n-\n-BUILTIN_TABLE(add);\n-BUILTIN_TABLE(sub);\n-BUILTIN_TABLE(mul);\n-BUILTIN_TABLE(div);\n-\n-#undef BUILTIN_TABLE\n-#undef BUILTIN_ROW\n+nd::arrfunc nd::plus::make()\n+{\n+  return functional::elwise(as_arrfunc<multidispatch_plus_ck>());\n+}\n+\n+struct nd::plus nd::plus;\n+\n+nd::array nd::operator+(const nd::array &a0) { return nd::plus(a0); }", "path": "src/dynd/func/arithmetic.cpp", "position": 62, "original_position": 57, "commit_id": "b6e1de38cd4d27a05694041bee0cf5c4f38bdad0", "original_commit_id": "db17da634dae23f2e8e3bce5abe77b830a9f8747", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "It is. I'm actually using this pattern for all of our arrfuncs defined through declfunc. It does work well. If you want to specify the class, and not the instance, you can do it by using the keyword \"struct\". \n", "created_at": "2015-03-22T19:03:52Z", "updated_at": "2015-03-23T09:07:56Z", "html_url": "https://github.com/libdynd/libdynd/pull/334#discussion_r26906015", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/334", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/26906015"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/334#discussion_r26906015"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/334"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/26906015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/27370920", "pull_request_review_id": null, "id": 27370920, "diff_hunk": "@@ -829,16 +823,19 @@ namespace nd {\n           kwds.as_array(ndt::make_struct(self_tp->get_kwd_names(), kwd_tp),\n                         available, missing);\n \n+      // ...\n+      char *data = new char[get()->size * arrfunc_type_data::data_size];", "path": "include/dynd/func/arrfunc.hpp", "position": null, "original_position": 63, "commit_id": "81b377e73cd0a0c1b685e179ebbfb89cae24ec6b", "original_commit_id": "7654feb962c0e184df02e57e71ba9f23da5cc621", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "You can use `std::unique_ptr<char[]>` to hold this data, it would be nice to never have raw new/delete.\n", "created_at": "2015-03-30T07:36:24Z", "updated_at": "2015-03-30T11:37:07Z", "html_url": "https://github.com/libdynd/libdynd/pull/340#discussion_r27370920", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/340", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/27370920"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/340#discussion_r27370920"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/340"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/27370920/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/33485024", "pull_request_review_id": null, "id": 33485024, "diff_hunk": "@@ -349,6 +349,29 @@ namespace nd {\n     template <int N0, int N1>\n     struct new_multidispatch_by_type_id_kernel\n         : base_virtual_kernel<new_multidispatch_by_type_id_kernel<N0, N1>> {\n+      struct data {", "path": "include/dynd/kernels/multidispatch.hpp", "position": 4, "original_position": 4, "commit_id": "49d4629d5bf58c5be35d22fd6874833fd105ebb7", "original_commit_id": "49d4629d5bf58c5be35d22fd6874833fd105ebb7", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "From reading this, I think the i[2] is to allow multi-dispatching based on any two of the source types, or the dst + a source type, is that right? Might be worth a small comment to help ease reading the code.\n", "created_at": "2015-06-29T16:50:37Z", "updated_at": "2015-06-29T16:50:37Z", "html_url": "https://github.com/libdynd/libdynd/pull/416#discussion_r33485024", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/416", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/33485024"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/416#discussion_r33485024"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/416"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/33485024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/33485095", "pull_request_review_id": null, "id": 33485095, "diff_hunk": "@@ -313,106 +313,130 @@ struct type_id_of;\n \n template <typename T>\n struct type_id_of<const T> {\n-  enum { value = type_id_of<T>::value };\n+  static const type_id_t value = type_id_of<T>::value;", "path": "include/dynd/types/type_id.hpp", "position": 5, "original_position": 5, "commit_id": "49d4629d5bf58c5be35d22fd6874833fd105ebb7", "original_commit_id": "49d4629d5bf58c5be35d22fd6874833fd105ebb7", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "Yes, since dynd doesn't support older MSVCs any more, this is good.\n", "created_at": "2015-06-29T16:51:19Z", "updated_at": "2015-06-29T16:51:19Z", "html_url": "https://github.com/libdynd/libdynd/pull/416#discussion_r33485095", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/416", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/33485095"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/416#discussion_r33485095"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/416"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/33485095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/39102645", "pull_request_review_id": null, "id": 39102645, "diff_hunk": "@@ -23,7 +22,7 @@ namespace nd {\n   class array;\n } // namespace nd\n \n-class DYND_API dynd_exception : public std::exception {\n+class DYND_API dynd_exception {", "path": "include/dynd/exceptions.hpp", "position": 13, "original_position": 13, "commit_id": "8a12ec31cc9493b1306e2e1d0fc85bb3eb11ba98", "original_commit_id": "8a12ec31cc9493b1306e2e1d0fc85bb3eb11ba98", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "One suggestion I have here is to add a comment describing why it's not a subclass of std::exception, as that seems like a pretty obvious question to ask when browsing this code.\n", "created_at": "2015-09-09T22:02:19Z", "updated_at": "2015-09-09T22:02:19Z", "html_url": "https://github.com/libdynd/libdynd/pull/536#discussion_r39102645", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/536", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/39102645"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/536#discussion_r39102645"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/536"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/39102645/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/39104912", "pull_request_review_id": null, "id": 39104912, "diff_hunk": "@@ -23,7 +22,7 @@ namespace nd {\n   class array;\n } // namespace nd\n \n-class DYND_API dynd_exception : public std::exception {\n+class DYND_API dynd_exception {", "path": "include/dynd/exceptions.hpp", "position": 13, "original_position": 13, "commit_id": "8a12ec31cc9493b1306e2e1d0fc85bb3eb11ba98", "original_commit_id": "8a12ec31cc9493b1306e2e1d0fc85bb3eb11ba98", "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "body": "Good idea, I'll add that in a follow up PR.\n", "created_at": "2015-09-09T22:26:03Z", "updated_at": "2015-09-09T22:26:03Z", "html_url": "https://github.com/libdynd/libdynd/pull/536#discussion_r39104912", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/536", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/39104912"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/536#discussion_r39104912"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/536"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/39104912/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/40053099", "pull_request_review_id": null, "id": 40053099, "diff_hunk": "@@ -7,42 +7,66 @@\n namespace dynd {\n namespace nd {\n \n-  template <type_id_t I0>\n-  struct plus_kernel : base_kernel<plus_kernel<I0>, 1> {\n+  template <type_id_t I0, typename func_type, func_type f>\n+  struct unary_kernel : base_kernel<unary_kernel<I0, func_type, f>, 1> {\n     typedef typename type_of<I0>::type A0;", "path": "include/dynd/kernels/arithmetic.hpp", "position": null, "original_position": 8, "commit_id": "d0ffa7a256b2f276ca719df349f4e2f9d7d3fbe1", "original_commit_id": "cd7e52693685c83af4adfb5be2764203f55e5c12", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "A few changes I would suggest here. We should rename I0, I1, ... to Src0TypeID, Src1TypeID, ... (this was introduced to the other kernels later on after the arithmetic_kernels were written). We also should write template parameters AsFirstLetterCapitalized. @mwiebe and I decided on this at one point and we're trying to be consistent now.\n", "created_at": "2015-09-22T04:56:28Z", "updated_at": "2015-09-23T23:13:00Z", "html_url": "https://github.com/libdynd/libdynd/pull/562#discussion_r40053099", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/562", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/40053099"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/562#discussion_r40053099"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/562"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/40053099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/40053174", "pull_request_review_id": null, "id": 40053174, "diff_hunk": "@@ -7,42 +7,66 @@\n namespace dynd {\n namespace nd {\n \n-  template <type_id_t I0>\n-  struct plus_kernel : base_kernel<plus_kernel<I0>, 1> {\n+  template <type_id_t I0, typename func_type, func_type f>\n+  struct unary_kernel : base_kernel<unary_kernel<I0, func_type, f>, 1> {\n     typedef typename type_of<I0>::type A0;\n-    typedef decltype(+std::declval<A0>()) R;\n-\n+    typedef decltype(f(std::declval<A0>())) R;\n     DYND_CUDA_HOST_DEVICE void single(char *dst, char *const *src)\n     {\n-      *reinterpret_cast<R *>(dst) = +*reinterpret_cast<A0 *>(src[0]);\n+      *reinterpret_cast<R *>(dst) = f(*reinterpret_cast<A0 *>(src[0]));\n     }\n   };\n \n-  template <type_id_t I0>\n-  struct minus_kernel : base_kernel<minus_kernel<I0>, 1> {\n-    typedef typename type_of<I0>::type A0;\n-    typedef decltype(-std::declval<A0>()) R;\n+#define DYND_DeclUnaryOp(OP, NAME)                                                                        \\\n+  template <typename T>                                                                                   \\\n+  inline decltype(OP std::declval<T>()) inline_ ## NAME(T val) { return OP val; }                         \\\n+  template <type_id_t I0>                                                                                 \\\n+  struct NAME ## _kernel : unary_kernel<I0, decltype(&inline_ ## NAME<typename type_of<I0>::type>),       \\\n+                                        &inline_ ## NAME<typename type_of<I0>::type>> {};                 \\\n ", "path": "include/dynd/kernels/arithmetic.hpp", "position": null, "original_position": 29, "commit_id": "d0ffa7a256b2f276ca719df349f4e2f9d7d3fbe1", "original_commit_id": "cd7e52693685c83af4adfb5be2764203f55e5c12", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "So, in terms of code duplication this is obviously better. I definitely the idea of having kernels being templated on the operation and want to keep that. A few thoughts:\n\n1) Should we use macros here? It does make the code more unreadable.\n\n2) I think we might be able to reuse the kernels in apply_kernels.hpp for this. We should check that out.\n", "created_at": "2015-09-22T04:58:54Z", "updated_at": "2015-09-23T23:13:00Z", "html_url": "https://github.com/libdynd/libdynd/pull/562#discussion_r40053174", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/562", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/40053174"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/562#discussion_r40053174"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/562"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/40053174/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/40109264", "pull_request_review_id": null, "id": 40109264, "diff_hunk": "@@ -7,42 +7,66 @@\n namespace dynd {\n namespace nd {\n \n-  template <type_id_t I0>\n-  struct plus_kernel : base_kernel<plus_kernel<I0>, 1> {\n+  template <type_id_t I0, typename func_type, func_type f>\n+  struct unary_kernel : base_kernel<unary_kernel<I0, func_type, f>, 1> {\n     typedef typename type_of<I0>::type A0;\n-    typedef decltype(+std::declval<A0>()) R;\n-\n+    typedef decltype(f(std::declval<A0>())) R;\n     DYND_CUDA_HOST_DEVICE void single(char *dst, char *const *src)\n     {\n-      *reinterpret_cast<R *>(dst) = +*reinterpret_cast<A0 *>(src[0]);\n+      *reinterpret_cast<R *>(dst) = f(*reinterpret_cast<A0 *>(src[0]));\n     }\n   };\n \n-  template <type_id_t I0>\n-  struct minus_kernel : base_kernel<minus_kernel<I0>, 1> {\n-    typedef typename type_of<I0>::type A0;\n-    typedef decltype(-std::declval<A0>()) R;\n+#define DYND_DeclUnaryOp(OP, NAME)                                                                        \\\n+  template <typename T>                                                                                   \\\n+  inline decltype(OP std::declval<T>()) inline_ ## NAME(T val) { return OP val; }                         \\\n+  template <type_id_t I0>                                                                                 \\\n+  struct NAME ## _kernel : unary_kernel<I0, decltype(&inline_ ## NAME<typename type_of<I0>::type>),       \\\n+                                        &inline_ ## NAME<typename type_of<I0>::type>> {};                 \\\n ", "path": "include/dynd/kernels/arithmetic.hpp", "position": null, "original_position": 29, "commit_id": "d0ffa7a256b2f276ca719df349f4e2f9d7d3fbe1", "original_commit_id": "cd7e52693685c83af4adfb5be2764203f55e5c12", "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "body": "I prefer the macros primarily because they let the reader know that the _exact_ same thing is being done several times over, but that's just me. I can see why we would prefer not to have them though, so we can get rid of them if you'd like.\n\nThanks for pointing out the kernels there. It makes a lot of sense to use those instead.\n", "created_at": "2015-09-22T16:34:57Z", "updated_at": "2015-09-23T23:13:00Z", "html_url": "https://github.com/libdynd/libdynd/pull/562#discussion_r40109264", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/562", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/40109264"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/562#discussion_r40109264"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/562"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/40109264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/40110936", "pull_request_review_id": null, "id": 40110936, "diff_hunk": "@@ -7,42 +7,66 @@\n namespace dynd {\n namespace nd {\n \n-  template <type_id_t I0>\n-  struct plus_kernel : base_kernel<plus_kernel<I0>, 1> {\n+  template <type_id_t I0, typename func_type, func_type f>\n+  struct unary_kernel : base_kernel<unary_kernel<I0, func_type, f>, 1> {\n     typedef typename type_of<I0>::type A0;", "path": "include/dynd/kernels/arithmetic.hpp", "position": null, "original_position": 8, "commit_id": "d0ffa7a256b2f276ca719df349f4e2f9d7d3fbe1", "original_commit_id": "cd7e52693685c83af4adfb5be2764203f55e5c12", "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "body": "That makes a lot of sense. I'll go ahead and make that change.\n", "created_at": "2015-09-22T16:48:42Z", "updated_at": "2015-09-23T23:13:00Z", "html_url": "https://github.com/libdynd/libdynd/pull/562#discussion_r40110936", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/562", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/40110936"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/562#discussion_r40110936"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/562"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/40110936/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/41629167", "pull_request_review_id": null, "id": 41629167, "diff_hunk": "@@ -14,11 +14,11 @@\n namespace dynd {\n namespace nd {\n \n-  template <typename F, template <type_id_t...> class K, int N>\n+  template <typename F, template <type_id_t...> class K, int N, typename TypeIDs>\n   struct arithmetic_operator;\n ", "path": "include/dynd/func/arithmetic.hpp", "position": null, "original_position": 7, "commit_id": "d7f5b5fd504d97e6944f8d96fadff08268996d0c", "original_commit_id": "e576119cd41ff94fa247d0c99230a3cfffee573d", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Adding the TypeIDs as a template parameter is a good step for sure. A trivial comment is that I typically have called such a typename TypeIDSequence throughout DyND, so we should harmonize that.\n\nA less trivial comment is I'd like to hear your opinions on this arithmetic_operator template. This template probably should be a more general thing, as we have a similar comparision_operator template and so on. I'm not sure if arithmetic_operator was a good idea or not, it was a bit experimental when I wrote it.\n", "created_at": "2015-10-09T13:27:22Z", "updated_at": "2015-10-09T20:48:52Z", "html_url": "https://github.com/libdynd/libdynd/pull/587#discussion_r41629167", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/587", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/41629167"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/587#discussion_r41629167"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/587"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/41629167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/41629391", "pull_request_review_id": null, "id": 41629391, "diff_hunk": "@@ -8,35 +8,94 @@\n namespace dynd {\n namespace nd {\n \n+namespace detail{\n+  template<typename>\n+  struct sfinae_true : std::true_type{};\n+}", "path": "include/dynd/kernels/arithmetic.hpp", "position": null, "original_position": 7, "commit_id": "d7f5b5fd504d97e6944f8d96fadff08268996d0c", "original_commit_id": "e576119cd41ff94fa247d0c99230a3cfffee573d", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Things like sfinae_true should go into config.hpp as they are more general than just arithmetic. But, we should be really careful about adding templates unless we really need them -- which, in this case, we do.\n\nHowever, there is a true_t in config.hpp which does the same thing. Probably best to use that.\n", "created_at": "2015-10-09T13:29:32Z", "updated_at": "2015-10-09T20:48:52Z", "html_url": "https://github.com/libdynd/libdynd/pull/587#discussion_r41629391", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/587", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/41629391"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/587#discussion_r41629391"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/587"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/41629391/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/41629786", "pull_request_review_id": null, "id": 41629786, "diff_hunk": "@@ -430,41 +486,69 @@ namespace nd {\n \n namespace ndt {\n \n-  template <type_id_t Src0TypeID>\n-  struct type::equivalent<nd::plus_kernel<Src0TypeID>> {\n-    typedef typename dynd::type_of<Src0TypeID>::type A0;\n-    typedef decltype(+std::declval<A0>()) R;\n-\n-    static type make()\n-    {\n-      std::map<std::string, ndt::type> tp_vars;\n-      tp_vars[\"A0\"] = ndt::type::make<A0>();\n-      tp_vars[\"R\"] = ndt::type::make<R>();\n-\n-      return ndt::substitute(ndt::type(\"(A0) -> R\"), tp_vars, true);\n-    }\n-  };\n-\n-  template <type_id_t Src0TypeID>\n-  struct type::equivalent<nd::minus_kernel<Src0TypeID>> {\n-    typedef typename dynd::type_of<Src0TypeID>::type A0;\n-    typedef decltype(-std::declval<A0>()) R;\n-\n-    static type make()\n-    {\n-      std::map<std::string, ndt::type> tp_vars;\n-      tp_vars[\"A0\"] = ndt::type::make<A0>();\n-      tp_vars[\"R\"] = ndt::type::make<R>();\n-\n-      return ndt::substitute(ndt::type(\"(A0) -> R\"), tp_vars, true);\n-    }\n-  };\n+#define DYND_DEF_UNARY_OP_KERNEL_EQUIVALENT(OP, NAME)                  \\\n+  template <type_id_t Src0TypeID>                                      \\\n+  struct type::equivalent<nd::NAME ## _kernel<Src0TypeID>> {           \\\n+    typedef typename dynd::type_of<Src0TypeID>::type A0;               \\\n+    typedef decltype(OP std::declval<A0>()) R;                         \\\n+                                                                       \\\n+    static type make()                                                 \\\n+    {                                                                  \\\n+      std::map<std::string, ndt::type> tp_vars;                        \\\n+      tp_vars[\"A0\"] = ndt::type::make<A0>();                           \\\n+      tp_vars[\"R\"] = ndt::type::make<R>();                             \\\n+                                                                       \\\n+      return ndt::substitute(ndt::type(\"(A0) -> R\"), tp_vars, true);   \\\n+    }                                                                  \\\n+  };                                                                   \\\n+", "path": "include/dynd/kernels/arithmetic.hpp", "position": null, "original_position": 172, "commit_id": "d7f5b5fd504d97e6944f8d96fadff08268996d0c", "original_commit_id": "e576119cd41ff94fa247d0c99230a3cfffee573d", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "I'm the one who originally write the make function here, so I'm just criticizing myself. We shouldn't use ndt::substitute in these functions. At the time, we lacked tools to easily construct a callable_type, but we have those now. One should use something like `callable_type::make(ndt::type::make<R>(), {ndt::type::make<A0>()})`.\n", "created_at": "2015-10-09T13:33:48Z", "updated_at": "2015-10-09T20:48:52Z", "html_url": "https://github.com/libdynd/libdynd/pull/587#discussion_r41629786", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/587", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/41629786"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/587#discussion_r41629786"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/587"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/41629786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/41629847", "pull_request_review_id": null, "id": 41629847, "diff_hunk": "@@ -430,41 +486,69 @@ namespace nd {\n \n namespace ndt {\n \n-  template <type_id_t Src0TypeID>\n-  struct type::equivalent<nd::plus_kernel<Src0TypeID>> {\n-    typedef typename dynd::type_of<Src0TypeID>::type A0;\n-    typedef decltype(+std::declval<A0>()) R;\n-\n-    static type make()\n-    {\n-      std::map<std::string, ndt::type> tp_vars;\n-      tp_vars[\"A0\"] = ndt::type::make<A0>();\n-      tp_vars[\"R\"] = ndt::type::make<R>();\n-\n-      return ndt::substitute(ndt::type(\"(A0) -> R\"), tp_vars, true);\n-    }\n-  };\n-\n-  template <type_id_t Src0TypeID>\n-  struct type::equivalent<nd::minus_kernel<Src0TypeID>> {\n-    typedef typename dynd::type_of<Src0TypeID>::type A0;\n-    typedef decltype(-std::declval<A0>()) R;\n-\n-    static type make()\n-    {\n-      std::map<std::string, ndt::type> tp_vars;\n-      tp_vars[\"A0\"] = ndt::type::make<A0>();\n-      tp_vars[\"R\"] = ndt::type::make<R>();\n-\n-      return ndt::substitute(ndt::type(\"(A0) -> R\"), tp_vars, true);\n-    }\n-  };\n+#define DYND_DEF_UNARY_OP_KERNEL_EQUIVALENT(OP, NAME)                  \\\n+  template <type_id_t Src0TypeID>                                      \\\n+  struct type::equivalent<nd::NAME ## _kernel<Src0TypeID>> {           \\\n+    typedef typename dynd::type_of<Src0TypeID>::type A0;               \\\n+    typedef decltype(OP std::declval<A0>()) R;                         \\\n+                                                                       \\\n+    static type make()                                                 \\\n+    {                                                                  \\\n+      std::map<std::string, ndt::type> tp_vars;                        \\\n+      tp_vars[\"A0\"] = ndt::type::make<A0>();                           \\\n+      tp_vars[\"R\"] = ndt::type::make<R>();                             \\\n+                                                                       \\\n+      return ndt::substitute(ndt::type(\"(A0) -> R\"), tp_vars, true);   \\\n+    }                                                                  \\\n+  };                                                                   \\\n+\n+  DYND_DEF_UNARY_OP_KERNEL_EQUIVALENT(+, plus)\n+  DYND_ALLOW_UNSIGNED_UNARY_MINUS\n+  DYND_DEF_UNARY_OP_KERNEL_EQUIVALENT(-, minus)\n+  DYND_END_ALLOW_UNSIGNED_UNARY_MINUS\n+  DYND_DEF_UNARY_OP_KERNEL_EQUIVALENT(!, logical_not)\n+  DYND_DEF_UNARY_OP_KERNEL_EQUIVALENT(~, bitwise_not)\n+\n+#undef DYND_DEF_UNARY_OP_KERNEL_EQUIVALENT\n+\n+#define DYND_DEF_BINARY_OP_KERNEL_EQUIVALENT(OP, NAME)                      \\\n+  template <type_id_t Src0TypeID, type_id_t Src1TypeID>                     \\\n+  struct type::equivalent<nd::NAME ## _kernel<Src0TypeID, Src1TypeID>> {    \\\n+    typedef typename dynd::type_of<Src0TypeID>::type A0;                    \\\n+    typedef typename dynd::type_of<Src1TypeID>::type A1;                    \\\n+    typedef decltype(std::declval<A0>() OP std::declval<A1>()) R;           \\\n+                                                                            \\\n+    static type make()                                                      \\\n+    {                                                                       \\\n+      std::map<std::string, ndt::type> tp_vars;                             \\\n+      tp_vars[\"A0\"] = ndt::type::make<A0>();                                \\\n+      tp_vars[\"A1\"] = ndt::type::make<A1>();                                \\\n+      tp_vars[\"R\"] = ndt::type::make<R>();                                  \\\n+                                                                            \\\n+      return ndt::substitute(ndt::type(\"(A0, A1) -> R\"), tp_vars, true);    \\\n+    }                                                                       \\\n+  };                                                                        \\", "path": "include/dynd/kernels/arithmetic.hpp", "position": null, "original_position": 198, "commit_id": "d7f5b5fd504d97e6944f8d96fadff08268996d0c", "original_commit_id": "e576119cd41ff94fa247d0c99230a3cfffee573d", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Same as above.\n", "created_at": "2015-10-09T13:34:22Z", "updated_at": "2015-10-09T20:48:52Z", "html_url": "https://github.com/libdynd/libdynd/pull/587#discussion_r41629847", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/587", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/41629847"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/587#discussion_r41629847"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/587"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/41629847/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/42280232", "pull_request_review_id": null, "id": 42280232, "diff_hunk": "@@ -0,0 +1,34 @@\n+//\n+// Copyright (C) 2011-15 DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#include <dynd/kernels/min_kernel.hpp>\n+#include <dynd/func/multidispatch.hpp>\n+#include <dynd/func/reduction.hpp>\n+#include <dynd/func/min.hpp>\n+#include <dynd/types/scalar_kind_type.hpp>\n+\n+using namespace std;\n+using namespace dynd;\n+\n+DYND_API nd::callable nd::min::make()\n+{\n+  auto children = callable::make_all<min_kernel, arithmetic_type_ids>();\n+\n+  return functional::reduction(\n+      functional::multidispatch(ndt::callable_type::make(ndt::scalar_kind_type::make(), ndt::scalar_kind_type::make()),\n+                                [children](const ndt::type & DYND_UNUSED(dst_tp), intptr_t DYND_UNUSED(nsrc),\n+                                           const ndt::type * src_tp) mutable->callable &\n+  {\n+                                  callable &child = children[src_tp[0].get_type_id()];\n+                                  if (child.is_null()) {\n+                                    throw runtime_error(\"no suitable child found for nd::sum\");", "path": "src/dynd/func/min.cpp", "position": 26, "original_position": 26, "commit_id": "7624bf79ba0c10d628895198575d26f6e2bc8d3b", "original_commit_id": "7624bf79ba0c10d628895198575d26f6e2bc8d3b", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "Error message here says \"nd::sum\" instead of \"nd::min\".\n", "created_at": "2015-10-16T19:22:15Z", "updated_at": "2015-10-16T19:22:15Z", "html_url": "https://github.com/libdynd/libdynd/pull/601#discussion_r42280232", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/601", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/42280232"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/601#discussion_r42280232"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/601"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/42280232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/42330111", "pull_request_review_id": null, "id": 42330111, "diff_hunk": "@@ -17,86 +17,90 @@\n using namespace std;\n using namespace dynd;\n \n-TEST(BytesDType, Create) {\n-    ndt::type d;\n+TEST(BytesDType, Create)\n+{\n+  ndt::type d;\n \n-    // Strings with various alignments\n-    d = ndt::bytes_type::make(1);\n-    EXPECT_EQ(bytes_type_id, d.get_type_id());\n-    EXPECT_EQ(bytes_kind, d.get_kind());\n-    EXPECT_EQ(sizeof(void *), d.get_data_alignment());\n-    EXPECT_EQ(2*sizeof(void *), d.get_data_size());\n-    EXPECT_EQ(1u, d.extended<ndt::bytes_type>()->get_target_alignment());\n-    EXPECT_EQ(1u, d.p(\"target_alignment\").as<size_t>());\n-    EXPECT_FALSE(d.is_expression());\n-    // Roundtripping through a string\n-    EXPECT_EQ(d, ndt::type(d.str()));\n+  // Strings with various alignments\n+  d = ndt::bytes_type::make(1);\n+  EXPECT_EQ(bytes_type_id, d.get_type_id());\n+  EXPECT_EQ(bytes_kind, d.get_kind());\n+  EXPECT_EQ(alignof(bytes), d.get_data_alignment());\n+  EXPECT_EQ(sizeof(bytes), d.get_data_size());", "path": "tests/types/test_bytes_type.cpp", "position": 26, "original_position": 26, "commit_id": "8373f7ddf53f5d71c56aa384f8ec82955f2831f0", "original_commit_id": "8373f7ddf53f5d71c56aa384f8ec82955f2831f0", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "Might be nice to keep these tests in terms of `sizeof(void *)` or similar, because the intention is to define the specific layout in memory so C code or other JITted could could interoperate without having the C++ definition of `bytes`.\n", "created_at": "2015-10-19T01:01:30Z", "updated_at": "2015-10-19T01:01:30Z", "html_url": "https://github.com/libdynd/libdynd/pull/607#discussion_r42330111", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/607", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/42330111"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/607#discussion_r42330111"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/607"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/42330111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/42360766", "pull_request_review_id": null, "id": 42360766, "diff_hunk": "@@ -40,6 +40,22 @@ class DYND_API bool1 {\n     return *this;\n   }\n \n+  DYND_CUDA_HOST_DEVICE inline bool1 operator!() const {\n+    return bool1(m_value == 0);\n+  }\n+\n+  DYND_CUDA_HOST_DEVICE inline bool1 operator~() const {\n+    return bool1(m_value == 0);\n+  }\n+\n+  DYND_CUDA_HOST_DEVICE bool1 operator&&(bool1 &rhs) {\n+    return bool1(m_value && rhs.m_value);\n+  }\n+\n+  DYND_CUDA_HOST_DEVICE bool1 operator||(bool1 &rhs) {\n+    return bool1(m_value || rhs.m_value);\n+  }\n+\n   DYND_CUDA_HOST_DEVICE bool1 &operator+=(bool1 rhs)", "path": "include/dynd/bool1.hpp", "position": 32, "original_position": 20, "commit_id": "c9bc946b780638d8a08aef2014d8aff13a185bff", "original_commit_id": "ed864633016a6675395ec3a49263593f85f7a359", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "So, a method in a class is `inline` by default. You actually don't need to specify it here -- if it's specified anywhere else in DyND, it should be removed.\n", "created_at": "2015-10-19T11:34:11Z", "updated_at": "2015-10-21T23:16:16Z", "html_url": "https://github.com/libdynd/libdynd/pull/602#discussion_r42360766", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/602", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/42360766"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/602#discussion_r42360766"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/602"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/42360766/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/42360818", "pull_request_review_id": null, "id": 42360818, "diff_hunk": "@@ -81,7 +81,15 @@ class DYND_API int128 {\n   DYND_CUDA_HOST_DEVICE inline int128 operator+() const {\n     return *this;\n   }\n-  \n+\n+  DYND_CUDA_HOST_DEVICE inline bool operator!() const {\n+    return !(this->m_hi) && !(this->m_lo);\n+  }\n+\n+  DYND_CUDA_HOST_DEVICE inline int128 operator~() const {\n+    return int128(~m_hi, ~m_lo);\n+  }\n+", "path": "include/dynd/int128.hpp", "position": null, "original_position": 13, "commit_id": "c9bc946b780638d8a08aef2014d8aff13a185bff", "original_commit_id": "ed864633016a6675395ec3a49263593f85f7a359", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Same `inline` comment.\n", "created_at": "2015-10-19T11:34:54Z", "updated_at": "2015-10-21T23:16:16Z", "html_url": "https://github.com/libdynd/libdynd/pull/602#discussion_r42360818", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/602", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/42360818"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/602#discussion_r42360818"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/602"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/42360818/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/42360830", "pull_request_review_id": null, "id": 42360830, "diff_hunk": "@@ -109,6 +109,14 @@ class DYND_API uint128 {\n   DYND_END_ALLOW_UNSIGNED_UNARY_MINUS\n   }\n \n+  DYND_CUDA_HOST_DEVICE inline bool operator!() const {\n+    return (m_hi != 0) && (m_lo != 0);\n+  }\n+\n+  DYND_CUDA_HOST_DEVICE inline uint128 operator~() const {\n+    return uint128(~m_hi, ~m_lo);\n+  }\n+\n   DYND_CUDA_HOST_DEVICE inline bool operator!=(const uint128 &rhs) const\n   {", "path": "include/dynd/uint128.hpp", "position": null, "original_position": 13, "commit_id": "c9bc946b780638d8a08aef2014d8aff13a185bff", "original_commit_id": "ed864633016a6675395ec3a49263593f85f7a359", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Same `inline` comment.\n", "created_at": "2015-10-19T11:35:02Z", "updated_at": "2015-10-21T23:16:16Z", "html_url": "https://github.com/libdynd/libdynd/pull/602#discussion_r42360830", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/602", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/42360830"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/602#discussion_r42360830"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/602"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/42360830/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/42360888", "pull_request_review_id": null, "id": 42360888, "diff_hunk": "@@ -282,40 +282,40 @@ TEST(Arithmetic, OptionArithmeticInt32)\n {\n   nd::array NA = nd::empty(ndt::type(\"?int32\"));\n   nd::assign_na(NA);\n-  EXPECT_FALSE(nd::is_avail(NA + 1));\n-  EXPECT_FALSE(nd::is_avail(NA - 1));\n-  EXPECT_FALSE(nd::is_avail(NA * 1));\n-  EXPECT_FALSE(nd::is_avail(NA / 1));\n-\n-  EXPECT_FALSE(nd::is_avail(1 + NA));\n-  EXPECT_FALSE(nd::is_avail(1 - NA));\n-  EXPECT_FALSE(nd::is_avail(1 * NA));\n-  EXPECT_FALSE(nd::is_avail(1 / NA));\n-\n-  EXPECT_FALSE(nd::is_avail(NA + NA));\n-  EXPECT_FALSE(nd::is_avail(NA - NA));\n-  EXPECT_FALSE(nd::is_avail(NA * NA));\n-  EXPECT_FALSE(nd::is_avail(NA / NA));\n+  EXPECT_ALL_FALSE(nd::is_avail(NA + 1));\n+  EXPECT_ALL_FALSE(nd::is_avail(NA - 1));\n+  EXPECT_ALL_FALSE(nd::is_avail(NA * 1));\n+  EXPECT_ALL_FALSE(nd::is_avail(NA / 1));\n+\n+  EXPECT_ALL_FALSE(nd::is_avail(1 + NA));\n+  EXPECT_ALL_FALSE(nd::is_avail(1 - NA));\n+  EXPECT_ALL_FALSE(nd::is_avail(1 * NA));\n+  EXPECT_ALL_FALSE(nd::is_avail(1 / NA));\n+\n+  EXPECT_ALL_FALSE(nd::is_avail(NA + NA));\n+  EXPECT_ALL_FALSE(nd::is_avail(NA - NA));\n+  EXPECT_ALL_FALSE(nd::is_avail(NA * NA));\n+  EXPECT_ALL_FALSE(nd::is_avail(NA / NA));\n }\n ", "path": "tests/func/test_arithmetic.cpp", "position": 33, "original_position": 33, "commit_id": "c9bc946b780638d8a08aef2014d8aff13a185bff", "original_commit_id": "ed864633016a6675395ec3a49263593f85f7a359", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Why the change to EXPECT_ALL_FALSE? Why doesn't EXPECT_FALSE work anymore?\n", "created_at": "2015-10-19T11:35:50Z", "updated_at": "2015-10-21T23:16:16Z", "html_url": "https://github.com/libdynd/libdynd/pull/602#discussion_r42360888", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/602", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/42360888"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/602#discussion_r42360888"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/602"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/42360888/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/42385929", "pull_request_review_id": null, "id": 42385929, "diff_hunk": "@@ -40,6 +40,22 @@ class DYND_API bool1 {\n     return *this;\n   }\n \n+  DYND_CUDA_HOST_DEVICE inline bool1 operator!() const {\n+    return bool1(m_value == 0);\n+  }\n+\n+  DYND_CUDA_HOST_DEVICE inline bool1 operator~() const {\n+    return bool1(m_value == 0);\n+  }\n+\n+  DYND_CUDA_HOST_DEVICE bool1 operator&&(bool1 &rhs) {\n+    return bool1(m_value && rhs.m_value);\n+  }\n+\n+  DYND_CUDA_HOST_DEVICE bool1 operator||(bool1 &rhs) {\n+    return bool1(m_value || rhs.m_value);\n+  }\n+\n   DYND_CUDA_HOST_DEVICE bool1 &operator+=(bool1 rhs)", "path": "include/dynd/bool1.hpp", "position": 32, "original_position": 20, "commit_id": "c9bc946b780638d8a08aef2014d8aff13a185bff", "original_commit_id": "ed864633016a6675395ec3a49263593f85f7a359", "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "body": "Okay, I've seen that all over the place. I'll remove it here, but a style PR is probably in order for everything else.\n", "created_at": "2015-10-19T15:32:54Z", "updated_at": "2015-10-21T23:16:16Z", "html_url": "https://github.com/libdynd/libdynd/pull/602#discussion_r42385929", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/602", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/42385929"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/602#discussion_r42385929"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/602"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/42385929/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/42387249", "pull_request_review_id": null, "id": 42387249, "diff_hunk": "@@ -282,40 +282,40 @@ TEST(Arithmetic, OptionArithmeticInt32)\n {\n   nd::array NA = nd::empty(ndt::type(\"?int32\"));\n   nd::assign_na(NA);\n-  EXPECT_FALSE(nd::is_avail(NA + 1));\n-  EXPECT_FALSE(nd::is_avail(NA - 1));\n-  EXPECT_FALSE(nd::is_avail(NA * 1));\n-  EXPECT_FALSE(nd::is_avail(NA / 1));\n-\n-  EXPECT_FALSE(nd::is_avail(1 + NA));\n-  EXPECT_FALSE(nd::is_avail(1 - NA));\n-  EXPECT_FALSE(nd::is_avail(1 * NA));\n-  EXPECT_FALSE(nd::is_avail(1 / NA));\n-\n-  EXPECT_FALSE(nd::is_avail(NA + NA));\n-  EXPECT_FALSE(nd::is_avail(NA - NA));\n-  EXPECT_FALSE(nd::is_avail(NA * NA));\n-  EXPECT_FALSE(nd::is_avail(NA / NA));\n+  EXPECT_ALL_FALSE(nd::is_avail(NA + 1));\n+  EXPECT_ALL_FALSE(nd::is_avail(NA - 1));\n+  EXPECT_ALL_FALSE(nd::is_avail(NA * 1));\n+  EXPECT_ALL_FALSE(nd::is_avail(NA / 1));\n+\n+  EXPECT_ALL_FALSE(nd::is_avail(1 + NA));\n+  EXPECT_ALL_FALSE(nd::is_avail(1 - NA));\n+  EXPECT_ALL_FALSE(nd::is_avail(1 * NA));\n+  EXPECT_ALL_FALSE(nd::is_avail(1 / NA));\n+\n+  EXPECT_ALL_FALSE(nd::is_avail(NA + NA));\n+  EXPECT_ALL_FALSE(nd::is_avail(NA - NA));\n+  EXPECT_ALL_FALSE(nd::is_avail(NA * NA));\n+  EXPECT_ALL_FALSE(nd::is_avail(NA / NA));\n }\n ", "path": "tests/func/test_arithmetic.cpp", "position": 33, "original_position": 33, "commit_id": "c9bc946b780638d8a08aef2014d8aff13a185bff", "original_commit_id": "ed864633016a6675395ec3a49263593f85f7a359", "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "body": "`EXPECT_FALSE` implicitly performs a static cast to bool by applying the logical not operator. Once a class overloads the logical not operator, the appropriate overload is called instead, so an array is returned from the expression rather than a boolean value. I didn't finish digging through the gtest code to find exactly why it fails after that. I could try fixing it in their code.\n", "created_at": "2015-10-19T15:41:59Z", "updated_at": "2015-10-21T23:16:16Z", "html_url": "https://github.com/libdynd/libdynd/pull/602#discussion_r42387249", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/602", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/42387249"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/602#discussion_r42387249"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/602"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/42387249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/40002372", "pull_request_review_id": null, "id": 40002372, "diff_hunk": "@@ -0,0 +1,109 @@\n+//\n+// Copyright (C) 2011-15 DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#include <dynd/func/fill.hpp>\n+#include <dynd/func/elwise.hpp>\n+#include <dynd/func/multidispatch.hpp>\n+#include <dynd/func/call.hpp>\n+#include <dynd/kernels/zeros_kernel.hpp>\n+#include <dynd/kernels/ones_kernel.hpp>\n+\n+using namespace std;\n+using namespace dynd;\n+\n+\n+DYND_API nd::callable nd::zeros::children[DYND_TYPE_ID_MAX + 1];\n+\n+DYND_API nd::callable nd::zeros::make()\n+{\n+    typedef type_id_sequence<\n+        bool_type_id,\n+        int8_type_id,\n+        int16_type_id,\n+        int32_type_id,\n+        int64_type_id,\n+        int128_type_id,\n+        uint8_type_id,\n+        uint16_type_id,\n+        uint32_type_id,\n+        uint64_type_id,\n+        uint128_type_id,\n+        float16_type_id,\n+        float32_type_id,\n+        float64_type_id,\n+        float128_type_id,\n+        complex_float32_type_id,\n+        complex_float64_type_id\n+    > type_ids;", "path": "src/dynd/func/fill.cpp", "position": 39, "original_position": 39, "commit_id": "8580884f3e816550fc00f24b217a20b6b42e0101", "original_commit_id": "ffc41ae3e7bd4a82b962d9d1fb34d55c581c637e", "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "body": "We should be able to just use some of our predefined typedefs here. [aritmetic_type_ids](https://github.com/libdynd/libdynd/blob/master/include/dynd/types/type_id.hpp#L207) is the same as what you define here.\n", "created_at": "2015-09-21T17:52:17Z", "updated_at": "2015-10-26T00:06:08Z", "html_url": "https://github.com/libdynd/libdynd/pull/561#discussion_r40002372", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/561", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/40002372"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/561#discussion_r40002372"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/561"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/40002372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/40002472", "pull_request_review_id": null, "id": 40002472, "diff_hunk": "@@ -0,0 +1,109 @@\n+//\n+// Copyright (C) 2011-15 DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#include <dynd/func/fill.hpp>\n+#include <dynd/func/elwise.hpp>\n+#include <dynd/func/multidispatch.hpp>\n+#include <dynd/func/call.hpp>\n+#include <dynd/kernels/zeros_kernel.hpp>\n+#include <dynd/kernels/ones_kernel.hpp>\n+\n+using namespace std;\n+using namespace dynd;\n+\n+\n+DYND_API nd::callable nd::zeros::children[DYND_TYPE_ID_MAX + 1];\n+\n+DYND_API nd::callable nd::zeros::make()\n+{\n+    typedef type_id_sequence<\n+        bool_type_id,\n+        int8_type_id,\n+        int16_type_id,\n+        int32_type_id,\n+        int64_type_id,\n+        int128_type_id,\n+        uint8_type_id,\n+        uint16_type_id,\n+        uint32_type_id,\n+        uint64_type_id,\n+        uint128_type_id,\n+        float16_type_id,\n+        float32_type_id,\n+        float64_type_id,\n+        float128_type_id,\n+        complex_float32_type_id,\n+        complex_float64_type_id\n+    > type_ids;\n+    for (auto &pair : callable::make_all<zeros_kernel, type_ids>()) {\n+        children[pair.first] = pair.second;\n+    }\n+    \n+    callable self = functional::call<zeros>(ndt::type(\"() -> Any\"));\n+    \n+    for (auto tp_id : {fixed_dim_type_id, var_dim_type_id}) {\n+        children[tp_id] = functional::elwise(self);\n+    }\n+    \n+    return functional::multidispatch(ndt::type(\"() -> Any\"),\n+             [](const ndt::type &dst_tp, intptr_t DYND_UNUSED(nsrc),\n+                const ndt::type *DYND_UNUSED(src_tp)) -> callable & {\n+                 callable &child = children[dst_tp.get_type_id()];\n+                 if (child.is_null()) {\n+                     throw std::runtime_error(\"no child found\");\n+                 }\n+                 return child;\n+             },\n+         0);\n+}\n+\n+DYND_API struct nd::zeros nd::zeros;\n+\n+DYND_API nd::callable nd::ones::children[DYND_TYPE_ID_MAX + 1];\n+\n+DYND_API nd::callable nd::ones::make()\n+{\n+    typedef type_id_sequence<", "path": "src/dynd/func/fill.cpp", "position": 68, "original_position": 68, "commit_id": "8580884f3e816550fc00f24b217a20b6b42e0101", "original_commit_id": "ffc41ae3e7bd4a82b962d9d1fb34d55c581c637e", "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "body": "Same as above, use one of the prebuilt lists for this.\n", "created_at": "2015-09-21T17:52:59Z", "updated_at": "2015-10-26T00:06:08Z", "html_url": "https://github.com/libdynd/libdynd/pull/561#discussion_r40002472", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/561", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/40002472"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/561#discussion_r40002472"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/561"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/40002472/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/45532261", "pull_request_review_id": null, "id": 45532261, "diff_hunk": "@@ -38,7 +38,7 @@ struct DYND_API array_preamble : memory_block_data {\n       if (!owner) {\n         // Call the data destructor if necessary (i.e. the nd::array owns\n         // the data memory, and the type has a data destructor)\n-        if ((tp->get_flags() & type_flag_destructor) != 0) {\n+        if (!tp->is_expression() && (tp->get_flags() & type_flag_destructor) != 0) {", "path": "include/dynd/memblock/array_memory_block.hpp", "position": 5, "original_position": 5, "commit_id": "7fd4fd87e75043fdfd09815777b2387ed47907a1", "original_commit_id": "7fd4fd87e75043fdfd09815777b2387ed47907a1", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "This change looks a bit fishy to me, why was it necessary? An expression type's storage type could require destruction, and it should be inheriting this particular flag from the storage type, not the value type.\n", "created_at": "2015-11-20T23:27:33Z", "updated_at": "2015-11-20T23:27:33Z", "html_url": "https://github.com/libdynd/libdynd/pull/696#discussion_r45532261", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/696", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/45532261"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/696#discussion_r45532261"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/696"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/45532261/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/49377846", "pull_request_review_id": null, "id": 49377846, "diff_hunk": "@@ -0,0 +1,64 @@\n+# Serialization\n+\n+DyND stores typed multi-dimensional data in memory, which needs to be saved to disk and transported between machines for things like distributed and out of core computation. We would like the serialization to be simple and obvious where possible, and well-defined in a way suitable for use as a building block for creating Merkle DAGs.\n+\n+What follows is a proposal for how this can be done, to get things started and provide a basis for design discussion.\n+\n+## Document/Design Scope\n+\n+Ultimately, we may want to add a streaming capability to DyND, so that a DyND array which is almost as big as memory could stream directly to a file without being placed in an intermediate bytes object. In initial design and implementation of serialization, we can simply use the `bytes` type without hampering such future extension.\n+\n+We are not concerned with deduplication, as that would complicate the serialization format a fair bit. Deduplication can be handled by a future extension to a new type like `array[Any]`, but which operates as a Merkle link, together with serialization to/from a content addressable storage (CAS).\n+\n+We are not concerned with compression, that is something that can be layered on top of serialization. If a stream interface is added to DyND, chaining compression to serialization via that interface would be natural to pursue.\n+\n+As a serialization protocol, this document is concerned with converting to/from byte streams, and  not with random access or efficient seeking. In some cases, random access is possible, however.\n+\n+## Serialize Callable\n+\n+The `serialize` callable has signature `(Any) -> bytes`, and operates as a reduction kernel. This means it concatenates data to the output bytes object. Only the data gets serialized, not the type. This is not a problem, however, because to serialize an arbitrary array, one can serialize it as `array[Any]`, which must serialize both the type and the data.", "path": "docs/serialization-design.md", "position": 19, "original_position": 19, "commit_id": "ec522c17a23eb3f12a414b2227f4f7925c65088b", "original_commit_id": "605f5d37300ed7a51a01a9d1fdde8bbc6d56f0aa", "user": {"login": "mrocklin", "id": 306380, "avatar_url": "https://avatars3.githubusercontent.com/u/306380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrocklin", "html_url": "https://github.com/mrocklin", "followers_url": "https://api.github.com/users/mrocklin/followers", "following_url": "https://api.github.com/users/mrocklin/following{/other_user}", "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions", "organizations_url": "https://api.github.com/users/mrocklin/orgs", "repos_url": "https://api.github.com/users/mrocklin/repos", "events_url": "https://api.github.com/users/mrocklin/events{/privacy}", "received_events_url": "https://api.github.com/users/mrocklin/received_events", "type": "User", "site_admin": false}, "body": "The phrase \"only the data gets serialized, not the type\" concerned me.  It looks like you follow this with a reason about why this isn't a problem.  Just want to verify that the serialization would be self-describing.\n", "created_at": "2016-01-11T21:00:53Z", "updated_at": "2016-01-13T18:37:48Z", "html_url": "https://github.com/libdynd/libdynd/pull/873#discussion_r49377846", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/873", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/49377846"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/873#discussion_r49377846"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/873"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/49377846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/49377931", "pull_request_review_id": null, "id": 49377931, "diff_hunk": "@@ -0,0 +1,64 @@\n+# Serialization\n+\n+DyND stores typed multi-dimensional data in memory, which needs to be saved to disk and transported between machines for things like distributed and out of core computation. We would like the serialization to be simple and obvious where possible, and well-defined in a way suitable for use as a building block for creating Merkle DAGs.\n+\n+What follows is a proposal for how this can be done, to get things started and provide a basis for design discussion.\n+\n+## Document/Design Scope\n+\n+Ultimately, we may want to add a streaming capability to DyND, so that a DyND array which is almost as big as memory could stream directly to a file without being placed in an intermediate bytes object. In initial design and implementation of serialization, we can simply use the `bytes` type without hampering such future extension.\n+\n+We are not concerned with deduplication, as that would complicate the serialization format a fair bit. Deduplication can be handled by a future extension to a new type like `array[Any]`, but which operates as a Merkle link, together with serialization to/from a content addressable storage (CAS).\n+\n+We are not concerned with compression, that is something that can be layered on top of serialization. If a stream interface is added to DyND, chaining compression to serialization via that interface would be natural to pursue.\n+\n+As a serialization protocol, this document is concerned with converting to/from byte streams, and  not with random access or efficient seeking. In some cases, random access is possible, however.\n+\n+## Serialize Callable\n+\n+The `serialize` callable has signature `(Any) -> bytes`, and operates as a reduction kernel. This means it concatenates data to the output bytes object. Only the data gets serialized, not the type. This is not a problem, however, because to serialize an arbitrary array, one can serialize it as `array[Any]`, which must serialize both the type and the data.\n+\n+All primitives are serialized in little-endian order. By making this choice explicitly, there is no ambiguity across different platforms, and by not allowing alternatives, this makes the serialization suitable for use in Merkle DAGs. A majority of platforms are little-endian, so this is also good for the typical case.\n+\n+In DyND's storage within memory, there is some metadata which describes memory layout, data references, and other details incidental to how things are stored. For serialization, the layout is defined completely in terms of the type, and there is no such metadata. For example, the `fixed` dimension type has a stride in its metadata. In the serialization of a strided array, the data is always tightly packed, and no stride is stored anywhere.\n+\n+## Deserialize Callable\n+\n+The `deserialize` callable has signature `(bytes, dst_tp: type) -> Any`, where the output array has the specified destination type. The generic case of of deserializing a general DyND array is treated as an element of type `array[Any]`, as noted in the serialize section above.\n+\n+## Type to Bytes Mapping\n+\n+* `bool`\n+  * Single byte `0x00` (false) `0x01` (true)\n+* `int##`, `uint##`, `float##`\n+  * The bytes are packed in little endian order.\n+* `complex[T]`\n+  * The real and imaginary components are serialized one after the other.\n+* `bytes[N]`\n+  * The bytes are stored as is.\n+* `bytes`\n+  * The size is stored as a [base 128 Varint](https://developers.google.com/protocol-buffers/docs/encoding?hl=en#varints), and the bytes follow as is.\n+* `string`\n+  * The UTF-8 encoding of the string is serialized identically to `bytes`.\n+* `char`\n+  * The 32-bit code point is serialized as is. (TODO: Would be better as UTF-8?)\n+* `type`\n+  * The type represented as a string, serialized as `string`. (TODO: Need to specify a well-defined type to string serialization that we will never change.)\n+* `void`\n+  * Adds no bytes to the serialization.\n+* `N * T`\n+  * Each element is serialized in sequence (a packed contiguous serialization). Because `N` is part of the type, it does not need to be stored.\n+* `var * T`\n+  * The size is stored as a [base 128 Varint](https://developers.google.com/protocol-buffers/docs/encoding?hl=en#varints), and then the elements are serialized the same as `N * T`.\n+* `(T0, T1, ...)`, `{field0: T0, field1: T1, ...}`\n+  * Each element of the tuple/struct is serialized in sequence (a packed contiguous serialization).\n+* `?T`\n+  * For types where the missing data sentinel is well-defined, the data is serialized just as `T` would be. For other types, missing is serialized as a single byte `0x00`, and available data is serialized as a single byte `0x01` followed by the serialization as `T`.\n+* `pointer[T]`\n+  * Serialized exactly as `T` would be.\n+* `array[T]`\n+  * Serialized as if it were a tuple `(type, T)`, with the type serialized, immediately followed by the data.", "path": "docs/serialization-design.md", "position": 64, "original_position": 60, "commit_id": "ec522c17a23eb3f12a414b2227f4f7925c65088b", "original_commit_id": "605f5d37300ed7a51a01a9d1fdde8bbc6d56f0aa", "user": {"login": "mrocklin", "id": 306380, "avatar_url": "https://avatars3.githubusercontent.com/u/306380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrocklin", "html_url": "https://github.com/mrocklin", "followers_url": "https://api.github.com/users/mrocklin/followers", "following_url": "https://api.github.com/users/mrocklin/following{/other_user}", "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions", "organizations_url": "https://api.github.com/users/mrocklin/orgs", "repos_url": "https://api.github.com/users/mrocklin/repos", "events_url": "https://api.github.com/users/mrocklin/events{/privacy}", "received_events_url": "https://api.github.com/users/mrocklin/received_events", "type": "User", "site_admin": false}, "body": "As people add custom types they'll also want a mechanism to serialize and deserialize those types.  What is a good solution here?\n", "created_at": "2016-01-11T21:01:36Z", "updated_at": "2016-01-13T18:37:48Z", "html_url": "https://github.com/libdynd/libdynd/pull/873#discussion_r49377931", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/873", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/49377931"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/873#discussion_r49377931"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/873"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/49377931/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/49377948", "pull_request_review_id": null, "id": 49377948, "diff_hunk": "@@ -0,0 +1,64 @@\n+# Serialization\n+\n+DyND stores typed multi-dimensional data in memory, which needs to be saved to disk and transported between machines for things like distributed and out of core computation. We would like the serialization to be simple and obvious where possible, and well-defined in a way suitable for use as a building block for creating Merkle DAGs.\n+\n+What follows is a proposal for how this can be done, to get things started and provide a basis for design discussion.\n+\n+## Document/Design Scope\n+\n+Ultimately, we may want to add a streaming capability to DyND, so that a DyND array which is almost as big as memory could stream directly to a file without being placed in an intermediate bytes object. In initial design and implementation of serialization, we can simply use the `bytes` type without hampering such future extension.\n+\n+We are not concerned with deduplication, as that would complicate the serialization format a fair bit. Deduplication can be handled by a future extension to a new type like `array[Any]`, but which operates as a Merkle link, together with serialization to/from a content addressable storage (CAS).\n+\n+We are not concerned with compression, that is something that can be layered on top of serialization. If a stream interface is added to DyND, chaining compression to serialization via that interface would be natural to pursue.\n+\n+As a serialization protocol, this document is concerned with converting to/from byte streams, and  not with random access or efficient seeking. In some cases, random access is possible, however.\n+\n+## Serialize Callable\n+\n+The `serialize` callable has signature `(Any) -> bytes`, and operates as a reduction kernel. This means it concatenates data to the output bytes object. Only the data gets serialized, not the type. This is not a problem, however, because to serialize an arbitrary array, one can serialize it as `array[Any]`, which must serialize both the type and the data.\n+\n+All primitives are serialized in little-endian order. By making this choice explicitly, there is no ambiguity across different platforms, and by not allowing alternatives, this makes the serialization suitable for use in Merkle DAGs. A majority of platforms are little-endian, so this is also good for the typical case.\n+\n+In DyND's storage within memory, there is some metadata which describes memory layout, data references, and other details incidental to how things are stored. For serialization, the layout is defined completely in terms of the type, and there is no such metadata. For example, the `fixed` dimension type has a stride in its metadata. In the serialization of a strided array, the data is always tightly packed, and no stride is stored anywhere.\n+\n+## Deserialize Callable\n+\n+The `deserialize` callable has signature `(bytes, dst_tp: type) -> Any`, where the output array has the specified destination type. The generic case of of deserializing a general DyND array is treated as an element of type `array[Any]`, as noted in the serialize section above.\n+\n+## Type to Bytes Mapping\n+\n+* `bool`\n+  * Single byte `0x00` (false) `0x01` (true)\n+* `int##`, `uint##`, `float##`\n+  * The bytes are packed in little endian order.\n+* `complex[T]`\n+  * The real and imaginary components are serialized one after the other.\n+* `bytes[N]`\n+  * The bytes are stored as is.\n+* `bytes`\n+  * The size is stored as a [base 128 Varint](https://developers.google.com/protocol-buffers/docs/encoding?hl=en#varints), and the bytes follow as is.\n+* `string`\n+  * The UTF-8 encoding of the string is serialized identically to `bytes`.\n+* `char`\n+  * The 32-bit code point is serialized as is. (TODO: Would be better as UTF-8?)\n+* `type`\n+  * The type represented as a string, serialized as `string`. (TODO: Need to specify a well-defined type to string serialization that we will never change.)\n+* `void`\n+  * Adds no bytes to the serialization.\n+* `N * T`\n+  * Each element is serialized in sequence (a packed contiguous serialization). Because `N` is part of the type, it does not need to be stored.\n+* `var * T`\n+  * The size is stored as a [base 128 Varint](https://developers.google.com/protocol-buffers/docs/encoding?hl=en#varints), and then the elements are serialized the same as `N * T`.\n+* `(T0, T1, ...)`, `{field0: T0, field1: T1, ...}`\n+  * Each element of the tuple/struct is serialized in sequence (a packed contiguous serialization).\n+* `?T`\n+  * For types where the missing data sentinel is well-defined, the data is serialized just as `T` would be. For other types, missing is serialized as a single byte `0x00`, and available data is serialized as a single byte `0x01` followed by the serialization as `T`.\n+* `pointer[T]`\n+  * Serialized exactly as `T` would be.\n+* `array[T]`\n+  * Serialized as if it were a tuple `(type, T)`, with the type serialized, immediately followed by the data.", "path": "docs/serialization-design.md", "position": 64, "original_position": 60, "commit_id": "ec522c17a23eb3f12a414b2227f4f7925c65088b", "original_commit_id": "605f5d37300ed7a51a01a9d1fdde8bbc6d56f0aa", "user": {"login": "mrocklin", "id": 306380, "avatar_url": "https://avatars3.githubusercontent.com/u/306380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrocklin", "html_url": "https://github.com/mrocklin", "followers_url": "https://api.github.com/users/mrocklin/followers", "following_url": "https://api.github.com/users/mrocklin/following{/other_user}", "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions", "organizations_url": "https://api.github.com/users/mrocklin/orgs", "repos_url": "https://api.github.com/users/mrocklin/repos", "events_url": "https://api.github.com/users/mrocklin/events{/privacy}", "received_events_url": "https://api.github.com/users/mrocklin/received_events", "type": "User", "site_admin": false}, "body": "Thoughts on categoricals?\n", "created_at": "2016-01-11T21:01:44Z", "updated_at": "2016-01-13T18:37:48Z", "html_url": "https://github.com/libdynd/libdynd/pull/873#discussion_r49377948", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/873", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/49377948"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/873#discussion_r49377948"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/873"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/49377948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/49378037", "pull_request_review_id": null, "id": 49378037, "diff_hunk": "@@ -0,0 +1,64 @@\n+# Serialization\n+\n+DyND stores typed multi-dimensional data in memory, which needs to be saved to disk and transported between machines for things like distributed and out of core computation. We would like the serialization to be simple and obvious where possible, and well-defined in a way suitable for use as a building block for creating Merkle DAGs.\n+\n+What follows is a proposal for how this can be done, to get things started and provide a basis for design discussion.\n+\n+## Document/Design Scope\n+\n+Ultimately, we may want to add a streaming capability to DyND, so that a DyND array which is almost as big as memory could stream directly to a file without being placed in an intermediate bytes object. In initial design and implementation of serialization, we can simply use the `bytes` type without hampering such future extension.\n+\n+We are not concerned with deduplication, as that would complicate the serialization format a fair bit. Deduplication can be handled by a future extension to a new type like `array[Any]`, but which operates as a Merkle link, together with serialization to/from a content addressable storage (CAS).\n+\n+We are not concerned with compression, that is something that can be layered on top of serialization. If a stream interface is added to DyND, chaining compression to serialization via that interface would be natural to pursue.\n+\n+As a serialization protocol, this document is concerned with converting to/from byte streams, and  not with random access or efficient seeking. In some cases, random access is possible, however.\n+\n+## Serialize Callable\n+\n+The `serialize` callable has signature `(Any) -> bytes`, and operates as a reduction kernel. This means it concatenates data to the output bytes object. Only the data gets serialized, not the type. This is not a problem, however, because to serialize an arbitrary array, one can serialize it as `array[Any]`, which must serialize both the type and the data.\n+\n+All primitives are serialized in little-endian order. By making this choice explicitly, there is no ambiguity across different platforms, and by not allowing alternatives, this makes the serialization suitable for use in Merkle DAGs. A majority of platforms are little-endian, so this is also good for the typical case.\n+\n+In DyND's storage within memory, there is some metadata which describes memory layout, data references, and other details incidental to how things are stored. For serialization, the layout is defined completely in terms of the type, and there is no such metadata. For example, the `fixed` dimension type has a stride in its metadata. In the serialization of a strided array, the data is always tightly packed, and no stride is stored anywhere.\n+\n+## Deserialize Callable\n+\n+The `deserialize` callable has signature `(bytes, dst_tp: type) -> Any`, where the output array has the specified destination type. The generic case of of deserializing a general DyND array is treated as an element of type `array[Any]`, as noted in the serialize section above.\n+\n+## Type to Bytes Mapping\n+\n+* `bool`\n+  * Single byte `0x00` (false) `0x01` (true)\n+* `int##`, `uint##`, `float##`\n+  * The bytes are packed in little endian order.\n+* `complex[T]`\n+  * The real and imaginary components are serialized one after the other.\n+* `bytes[N]`\n+  * The bytes are stored as is.\n+* `bytes`\n+  * The size is stored as a [base 128 Varint](https://developers.google.com/protocol-buffers/docs/encoding?hl=en#varints), and the bytes follow as is.\n+* `string`\n+  * The UTF-8 encoding of the string is serialized identically to `bytes`.\n+* `char`\n+  * The 32-bit code point is serialized as is. (TODO: Would be better as UTF-8?)\n+* `type`\n+  * The type represented as a string, serialized as `string`. (TODO: Need to specify a well-defined type to string serialization that we will never change.)\n+* `void`\n+  * Adds no bytes to the serialization.\n+* `N * T`\n+  * Each element is serialized in sequence (a packed contiguous serialization). Because `N` is part of the type, it does not need to be stored.\n+* `var * T`\n+  * The size is stored as a [base 128 Varint](https://developers.google.com/protocol-buffers/docs/encoding?hl=en#varints), and then the elements are serialized the same as `N * T`.\n+* `(T0, T1, ...)`, `{field0: T0, field1: T1, ...}`\n+  * Each element of the tuple/struct is serialized in sequence (a packed contiguous serialization).\n+* `?T`\n+  * For types where the missing data sentinel is well-defined, the data is serialized just as `T` would be. For other types, missing is serialized as a single byte `0x00`, and available data is serialized as a single byte `0x01` followed by the serialization as `T`.\n+* `pointer[T]`\n+  * Serialized exactly as `T` would be.\n+* `array[T]`\n+  * Serialized as if it were a tuple `(type, T)`, with the type serialized, immediately followed by the data.\n+\n+## Possible DyND Array Serialization As CBOR\n+\n+The serialization could be as [CBOR](http://cbor.io/), through the mechanism described in http://tools.ietf.org/html/rfc7049#section-7.2. This is not thought out properly yet.", "path": "docs/serialization-design.md", "position": null, "original_position": 64, "commit_id": "ec522c17a23eb3f12a414b2227f4f7925c65088b", "original_commit_id": "605f5d37300ed7a51a01a9d1fdde8bbc6d56f0aa", "user": {"login": "mrocklin", "id": 306380, "avatar_url": "https://avatars3.githubusercontent.com/u/306380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrocklin", "html_url": "https://github.com/mrocklin", "followers_url": "https://api.github.com/users/mrocklin/followers", "following_url": "https://api.github.com/users/mrocklin/following{/other_user}", "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions", "organizations_url": "https://api.github.com/users/mrocklin/orgs", "repos_url": "https://api.github.com/users/mrocklin/repos", "events_url": "https://api.github.com/users/mrocklin/events{/privacy}", "received_events_url": "https://api.github.com/users/mrocklin/received_events", "type": "User", "site_admin": false}, "body": "Are current CBOR standards sufficient to describe all dynd arrays?  I know it's community-extensible, I just don't know how far along they've gotten in defining their standards.\n", "created_at": "2016-01-11T21:02:33Z", "updated_at": "2016-01-13T18:37:48Z", "html_url": "https://github.com/libdynd/libdynd/pull/873#discussion_r49378037", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/873", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/49378037"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/873#discussion_r49378037"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/873"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/49378037/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/49378299", "pull_request_review_id": null, "id": 49378299, "diff_hunk": "@@ -0,0 +1,64 @@\n+# Serialization\n+\n+DyND stores typed multi-dimensional data in memory, which needs to be saved to disk and transported between machines for things like distributed and out of core computation. We would like the serialization to be simple and obvious where possible, and well-defined in a way suitable for use as a building block for creating Merkle DAGs.\n+\n+What follows is a proposal for how this can be done, to get things started and provide a basis for design discussion.\n+\n+## Document/Design Scope\n+\n+Ultimately, we may want to add a streaming capability to DyND, so that a DyND array which is almost as big as memory could stream directly to a file without being placed in an intermediate bytes object. In initial design and implementation of serialization, we can simply use the `bytes` type without hampering such future extension.\n+\n+We are not concerned with deduplication, as that would complicate the serialization format a fair bit. Deduplication can be handled by a future extension to a new type like `array[Any]`, but which operates as a Merkle link, together with serialization to/from a content addressable storage (CAS).\n+\n+We are not concerned with compression, that is something that can be layered on top of serialization. If a stream interface is added to DyND, chaining compression to serialization via that interface would be natural to pursue.\n+\n+As a serialization protocol, this document is concerned with converting to/from byte streams, and  not with random access or efficient seeking. In some cases, random access is possible, however.\n+\n+## Serialize Callable\n+\n+The `serialize` callable has signature `(Any) -> bytes`, and operates as a reduction kernel. This means it concatenates data to the output bytes object. Only the data gets serialized, not the type. This is not a problem, however, because to serialize an arbitrary array, one can serialize it as `array[Any]`, which must serialize both the type and the data.\n+\n+All primitives are serialized in little-endian order. By making this choice explicitly, there is no ambiguity across different platforms, and by not allowing alternatives, this makes the serialization suitable for use in Merkle DAGs. A majority of platforms are little-endian, so this is also good for the typical case.\n+\n+In DyND's storage within memory, there is some metadata which describes memory layout, data references, and other details incidental to how things are stored. For serialization, the layout is defined completely in terms of the type, and there is no such metadata. For example, the `fixed` dimension type has a stride in its metadata. In the serialization of a strided array, the data is always tightly packed, and no stride is stored anywhere.\n+\n+## Deserialize Callable\n+\n+The `deserialize` callable has signature `(bytes, dst_tp: type) -> Any`, where the output array has the specified destination type. The generic case of of deserializing a general DyND array is treated as an element of type `array[Any]`, as noted in the serialize section above.\n+\n+## Type to Bytes Mapping\n+\n+* `bool`\n+  * Single byte `0x00` (false) `0x01` (true)\n+* `int##`, `uint##`, `float##`\n+  * The bytes are packed in little endian order.\n+* `complex[T]`\n+  * The real and imaginary components are serialized one after the other.\n+* `bytes[N]`\n+  * The bytes are stored as is.\n+* `bytes`\n+  * The size is stored as a [base 128 Varint](https://developers.google.com/protocol-buffers/docs/encoding?hl=en#varints), and the bytes follow as is.\n+* `string`\n+  * The UTF-8 encoding of the string is serialized identically to `bytes`.\n+* `char`\n+  * The 32-bit code point is serialized as is. (TODO: Would be better as UTF-8?)\n+* `type`\n+  * The type represented as a string, serialized as `string`. (TODO: Need to specify a well-defined type to string serialization that we will never change.)\n+* `void`\n+  * Adds no bytes to the serialization.\n+* `N * T`\n+  * Each element is serialized in sequence (a packed contiguous serialization). Because `N` is part of the type, it does not need to be stored.\n+* `var * T`\n+  * The size is stored as a [base 128 Varint](https://developers.google.com/protocol-buffers/docs/encoding?hl=en#varints), and then the elements are serialized the same as `N * T`.\n+* `(T0, T1, ...)`, `{field0: T0, field1: T1, ...}`\n+  * Each element of the tuple/struct is serialized in sequence (a packed contiguous serialization).\n+* `?T`\n+  * For types where the missing data sentinel is well-defined, the data is serialized just as `T` would be. For other types, missing is serialized as a single byte `0x00`, and available data is serialized as a single byte `0x01` followed by the serialization as `T`.\n+* `pointer[T]`\n+  * Serialized exactly as `T` would be.\n+* `array[T]`\n+  * Serialized as if it were a tuple `(type, T)`, with the type serialized, immediately followed by the data.", "path": "docs/serialization-design.md", "position": 64, "original_position": 60, "commit_id": "ec522c17a23eb3f12a414b2227f4f7925c65088b", "original_commit_id": "605f5d37300ed7a51a01a9d1fdde8bbc6d56f0aa", "user": {"login": "mrocklin", "id": 306380, "avatar_url": "https://avatars3.githubusercontent.com/u/306380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrocklin", "html_url": "https://github.com/mrocklin", "followers_url": "https://api.github.com/users/mrocklin/followers", "following_url": "https://api.github.com/users/mrocklin/following{/other_user}", "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions", "organizations_url": "https://api.github.com/users/mrocklin/orgs", "repos_url": "https://api.github.com/users/mrocklin/repos", "events_url": "https://api.github.com/users/mrocklin/events{/privacy}", "received_events_url": "https://api.github.com/users/mrocklin/received_events", "type": "User", "site_admin": false}, "body": "Ah, I see that @insertinterestingnamehere already made the point about custom types.\n", "created_at": "2016-01-11T21:04:49Z", "updated_at": "2016-01-13T18:37:48Z", "html_url": "https://github.com/libdynd/libdynd/pull/873#discussion_r49378299", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/873", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/49378299"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/873#discussion_r49378299"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/873"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/49378299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/49379307", "pull_request_review_id": null, "id": 49379307, "diff_hunk": "@@ -0,0 +1,64 @@\n+# Serialization\n+\n+DyND stores typed multi-dimensional data in memory, which needs to be saved to disk and transported between machines for things like distributed and out of core computation. We would like the serialization to be simple and obvious where possible, and well-defined in a way suitable for use as a building block for creating Merkle DAGs.\n+\n+What follows is a proposal for how this can be done, to get things started and provide a basis for design discussion.\n+\n+## Document/Design Scope\n+\n+Ultimately, we may want to add a streaming capability to DyND, so that a DyND array which is almost as big as memory could stream directly to a file without being placed in an intermediate bytes object. In initial design and implementation of serialization, we can simply use the `bytes` type without hampering such future extension.\n+\n+We are not concerned with deduplication, as that would complicate the serialization format a fair bit. Deduplication can be handled by a future extension to a new type like `array[Any]`, but which operates as a Merkle link, together with serialization to/from a content addressable storage (CAS).\n+\n+We are not concerned with compression, that is something that can be layered on top of serialization. If a stream interface is added to DyND, chaining compression to serialization via that interface would be natural to pursue.\n+\n+As a serialization protocol, this document is concerned with converting to/from byte streams, and  not with random access or efficient seeking. In some cases, random access is possible, however.\n+\n+## Serialize Callable\n+\n+The `serialize` callable has signature `(Any) -> bytes`, and operates as a reduction kernel. This means it concatenates data to the output bytes object. Only the data gets serialized, not the type. This is not a problem, however, because to serialize an arbitrary array, one can serialize it as `array[Any]`, which must serialize both the type and the data.", "path": "docs/serialization-design.md", "position": 19, "original_position": 19, "commit_id": "ec522c17a23eb3f12a414b2227f4f7925c65088b", "original_commit_id": "605f5d37300ed7a51a01a9d1fdde8bbc6d56f0aa", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "Another reason, which I didn't write down, is that it has to be this way to be able to define the serialization properly. The type generally specifies the structure of the data quite rigidly, unlike JSON-like serialization formats where each element can have different types. If we put the type into the serialization of everything, we can't recursively apply that definition for serializing arrays, tuples, etc, without the type appearing repeatedly everywhere.\n", "created_at": "2016-01-11T21:12:10Z", "updated_at": "2016-01-13T18:37:48Z", "html_url": "https://github.com/libdynd/libdynd/pull/873#discussion_r49379307", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/873", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/49379307"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/873#discussion_r49379307"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/873"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/49379307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/49379606", "pull_request_review_id": null, "id": 49379606, "diff_hunk": "@@ -0,0 +1,64 @@\n+# Serialization\n+\n+DyND stores typed multi-dimensional data in memory, which needs to be saved to disk and transported between machines for things like distributed and out of core computation. We would like the serialization to be simple and obvious where possible, and well-defined in a way suitable for use as a building block for creating Merkle DAGs.\n+\n+What follows is a proposal for how this can be done, to get things started and provide a basis for design discussion.\n+\n+## Document/Design Scope\n+\n+Ultimately, we may want to add a streaming capability to DyND, so that a DyND array which is almost as big as memory could stream directly to a file without being placed in an intermediate bytes object. In initial design and implementation of serialization, we can simply use the `bytes` type without hampering such future extension.\n+\n+We are not concerned with deduplication, as that would complicate the serialization format a fair bit. Deduplication can be handled by a future extension to a new type like `array[Any]`, but which operates as a Merkle link, together with serialization to/from a content addressable storage (CAS).\n+\n+We are not concerned with compression, that is something that can be layered on top of serialization. If a stream interface is added to DyND, chaining compression to serialization via that interface would be natural to pursue.\n+\n+As a serialization protocol, this document is concerned with converting to/from byte streams, and  not with random access or efficient seeking. In some cases, random access is possible, however.\n+\n+## Serialize Callable\n+\n+The `serialize` callable has signature `(Any) -> bytes`, and operates as a reduction kernel. This means it concatenates data to the output bytes object. Only the data gets serialized, not the type. This is not a problem, however, because to serialize an arbitrary array, one can serialize it as `array[Any]`, which must serialize both the type and the data.\n+\n+All primitives are serialized in little-endian order. By making this choice explicitly, there is no ambiguity across different platforms, and by not allowing alternatives, this makes the serialization suitable for use in Merkle DAGs. A majority of platforms are little-endian, so this is also good for the typical case.\n+\n+In DyND's storage within memory, there is some metadata which describes memory layout, data references, and other details incidental to how things are stored. For serialization, the layout is defined completely in terms of the type, and there is no such metadata. For example, the `fixed` dimension type has a stride in its metadata. In the serialization of a strided array, the data is always tightly packed, and no stride is stored anywhere.\n+\n+## Deserialize Callable\n+\n+The `deserialize` callable has signature `(bytes, dst_tp: type) -> Any`, where the output array has the specified destination type. The generic case of of deserializing a general DyND array is treated as an element of type `array[Any]`, as noted in the serialize section above.\n+\n+## Type to Bytes Mapping\n+\n+* `bool`\n+  * Single byte `0x00` (false) `0x01` (true)\n+* `int##`, `uint##`, `float##`\n+  * The bytes are packed in little endian order.\n+* `complex[T]`\n+  * The real and imaginary components are serialized one after the other.\n+* `bytes[N]`\n+  * The bytes are stored as is.\n+* `bytes`\n+  * The size is stored as a [base 128 Varint](https://developers.google.com/protocol-buffers/docs/encoding?hl=en#varints), and the bytes follow as is.\n+* `string`\n+  * The UTF-8 encoding of the string is serialized identically to `bytes`.\n+* `char`\n+  * The 32-bit code point is serialized as is. (TODO: Would be better as UTF-8?)\n+* `type`\n+  * The type represented as a string, serialized as `string`. (TODO: Need to specify a well-defined type to string serialization that we will never change.)\n+* `void`\n+  * Adds no bytes to the serialization.\n+* `N * T`\n+  * Each element is serialized in sequence (a packed contiguous serialization). Because `N` is part of the type, it does not need to be stored.\n+* `var * T`\n+  * The size is stored as a [base 128 Varint](https://developers.google.com/protocol-buffers/docs/encoding?hl=en#varints), and then the elements are serialized the same as `N * T`.\n+* `(T0, T1, ...)`, `{field0: T0, field1: T1, ...}`\n+  * Each element of the tuple/struct is serialized in sequence (a packed contiguous serialization).\n+* `?T`\n+  * For types where the missing data sentinel is well-defined, the data is serialized just as `T` would be. For other types, missing is serialized as a single byte `0x00`, and available data is serialized as a single byte `0x01` followed by the serialization as `T`.\n+* `pointer[T]`\n+  * Serialized exactly as `T` would be.\n+* `array[T]`\n+  * Serialized as if it were a tuple `(type, T)`, with the type serialized, immediately followed by the data.\n+\n+## Possible DyND Array Serialization As CBOR\n+\n+The serialization could be as [CBOR](http://cbor.io/), through the mechanism described in http://tools.ietf.org/html/rfc7049#section-7.2. This is not thought out properly yet.", "path": "docs/serialization-design.md", "position": null, "original_position": 64, "commit_id": "ec522c17a23eb3f12a414b2227f4f7925c65088b", "original_commit_id": "605f5d37300ed7a51a01a9d1fdde8bbc6d56f0aa", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "CBOR is primarily designed to serialize JSON data. As such, there is one \"number\" type, among other things. Whether we can interact well with that data model is a thing that is not thought out, this may turn out to be a bad idea.\n\nIn http://cbor.io/, it says \"CBOR is defined in an Internet Standards Document, RFC 7049. The format has been designed to be stable for decades.\"\n", "created_at": "2016-01-11T21:14:58Z", "updated_at": "2016-01-13T18:37:48Z", "html_url": "https://github.com/libdynd/libdynd/pull/873#discussion_r49379606", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/873", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/49379606"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/873#discussion_r49379606"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/873"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/49379606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/49382176", "pull_request_review_id": null, "id": 49382176, "diff_hunk": "@@ -0,0 +1,64 @@\n+# Serialization\n+\n+DyND stores typed multi-dimensional data in memory, which needs to be saved to disk and transported between machines for things like distributed and out of core computation. We would like the serialization to be simple and obvious where possible, and well-defined in a way suitable for use as a building block for creating Merkle DAGs.\n+\n+What follows is a proposal for how this can be done, to get things started and provide a basis for design discussion.\n+\n+## Document/Design Scope\n+\n+Ultimately, we may want to add a streaming capability to DyND, so that a DyND array which is almost as big as memory could stream directly to a file without being placed in an intermediate bytes object. In initial design and implementation of serialization, we can simply use the `bytes` type without hampering such future extension.\n+\n+We are not concerned with deduplication, as that would complicate the serialization format a fair bit. Deduplication can be handled by a future extension to a new type like `array[Any]`, but which operates as a Merkle link, together with serialization to/from a content addressable storage (CAS).\n+\n+We are not concerned with compression, that is something that can be layered on top of serialization. If a stream interface is added to DyND, chaining compression to serialization via that interface would be natural to pursue.\n+\n+As a serialization protocol, this document is concerned with converting to/from byte streams, and  not with random access or efficient seeking. In some cases, random access is possible, however.\n+\n+## Serialize Callable\n+\n+The `serialize` callable has signature `(Any) -> bytes`, and operates as a reduction kernel. This means it concatenates data to the output bytes object. Only the data gets serialized, not the type. This is not a problem, however, because to serialize an arbitrary array, one can serialize it as `array[Any]`, which must serialize both the type and the data.\n+\n+All primitives are serialized in little-endian order. By making this choice explicitly, there is no ambiguity across different platforms, and by not allowing alternatives, this makes the serialization suitable for use in Merkle DAGs. A majority of platforms are little-endian, so this is also good for the typical case.\n+\n+In DyND's storage within memory, there is some metadata which describes memory layout, data references, and other details incidental to how things are stored. For serialization, the layout is defined completely in terms of the type, and there is no such metadata. For example, the `fixed` dimension type has a stride in its metadata. In the serialization of a strided array, the data is always tightly packed, and no stride is stored anywhere.\n+\n+## Deserialize Callable\n+\n+The `deserialize` callable has signature `(bytes, dst_tp: type) -> Any`, where the output array has the specified destination type. The generic case of of deserializing a general DyND array is treated as an element of type `array[Any]`, as noted in the serialize section above.\n+\n+## Type to Bytes Mapping\n+\n+* `bool`\n+  * Single byte `0x00` (false) `0x01` (true)\n+* `int##`, `uint##`, `float##`\n+  * The bytes are packed in little endian order.\n+* `complex[T]`\n+  * The real and imaginary components are serialized one after the other.\n+* `bytes[N]`\n+  * The bytes are stored as is.\n+* `bytes`\n+  * The size is stored as a [base 128 Varint](https://developers.google.com/protocol-buffers/docs/encoding?hl=en#varints), and the bytes follow as is.\n+* `string`\n+  * The UTF-8 encoding of the string is serialized identically to `bytes`.\n+* `char`\n+  * The 32-bit code point is serialized as is. (TODO: Would be better as UTF-8?)\n+* `type`\n+  * The type represented as a string, serialized as `string`. (TODO: Need to specify a well-defined type to string serialization that we will never change.)\n+* `void`\n+  * Adds no bytes to the serialization.\n+* `N * T`\n+  * Each element is serialized in sequence (a packed contiguous serialization). Because `N` is part of the type, it does not need to be stored.\n+* `var * T`\n+  * The size is stored as a [base 128 Varint](https://developers.google.com/protocol-buffers/docs/encoding?hl=en#varints), and then the elements are serialized the same as `N * T`.\n+* `(T0, T1, ...)`, `{field0: T0, field1: T1, ...}`\n+  * Each element of the tuple/struct is serialized in sequence (a packed contiguous serialization).\n+* `?T`\n+  * For types where the missing data sentinel is well-defined, the data is serialized just as `T` would be. For other types, missing is serialized as a single byte `0x00`, and available data is serialized as a single byte `0x01` followed by the serialization as `T`.\n+* `pointer[T]`\n+  * Serialized exactly as `T` would be.\n+* `array[T]`\n+  * Serialized as if it were a tuple `(type, T)`, with the type serialized, immediately followed by the data.\n+\n+## Possible DyND Array Serialization As CBOR\n+\n+The serialization could be as [CBOR](http://cbor.io/), through the mechanism described in http://tools.ietf.org/html/rfc7049#section-7.2. This is not thought out properly yet.", "path": "docs/serialization-design.md", "position": null, "original_position": 64, "commit_id": "ec522c17a23eb3f12a414b2227f4f7925c65088b", "original_commit_id": "605f5d37300ed7a51a01a9d1fdde8bbc6d56f0aa", "user": {"login": "seibert", "id": 425352, "avatar_url": "https://avatars1.githubusercontent.com/u/425352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seibert", "html_url": "https://github.com/seibert", "followers_url": "https://api.github.com/users/seibert/followers", "following_url": "https://api.github.com/users/seibert/following{/other_user}", "gists_url": "https://api.github.com/users/seibert/gists{/gist_id}", "starred_url": "https://api.github.com/users/seibert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seibert/subscriptions", "organizations_url": "https://api.github.com/users/seibert/orgs", "repos_url": "https://api.github.com/users/seibert/repos", "events_url": "https://api.github.com/users/seibert/events{/privacy}", "received_events_url": "https://api.github.com/users/seibert/received_events", "type": "User", "site_admin": false}, "body": "Looking through the CBOR docs, it appears they follow the JSON data model structurally, but also define the usual set of specialized binary integer and float types one would expect.\n", "created_at": "2016-01-11T21:35:13Z", "updated_at": "2016-01-13T18:37:48Z", "html_url": "https://github.com/libdynd/libdynd/pull/873#discussion_r49382176", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/873", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/49382176"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/873#discussion_r49382176"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/873"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/49382176/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/49382455", "pull_request_review_id": null, "id": 49382455, "diff_hunk": "@@ -0,0 +1,64 @@\n+# Serialization\n+\n+DyND stores typed multi-dimensional data in memory, which needs to be saved to disk and transported between machines for things like distributed and out of core computation. We would like the serialization to be simple and obvious where possible, and well-defined in a way suitable for use as a building block for creating Merkle DAGs.\n+\n+What follows is a proposal for how this can be done, to get things started and provide a basis for design discussion.\n+\n+## Document/Design Scope\n+\n+Ultimately, we may want to add a streaming capability to DyND, so that a DyND array which is almost as big as memory could stream directly to a file without being placed in an intermediate bytes object. In initial design and implementation of serialization, we can simply use the `bytes` type without hampering such future extension.\n+\n+We are not concerned with deduplication, as that would complicate the serialization format a fair bit. Deduplication can be handled by a future extension to a new type like `array[Any]`, but which operates as a Merkle link, together with serialization to/from a content addressable storage (CAS).\n+\n+We are not concerned with compression, that is something that can be layered on top of serialization. If a stream interface is added to DyND, chaining compression to serialization via that interface would be natural to pursue.\n+\n+As a serialization protocol, this document is concerned with converting to/from byte streams, and  not with random access or efficient seeking. In some cases, random access is possible, however.\n+\n+## Serialize Callable\n+\n+The `serialize` callable has signature `(Any) -> bytes`, and operates as a reduction kernel. This means it concatenates data to the output bytes object. Only the data gets serialized, not the type. This is not a problem, however, because to serialize an arbitrary array, one can serialize it as `array[Any]`, which must serialize both the type and the data.\n+\n+All primitives are serialized in little-endian order. By making this choice explicitly, there is no ambiguity across different platforms, and by not allowing alternatives, this makes the serialization suitable for use in Merkle DAGs. A majority of platforms are little-endian, so this is also good for the typical case.\n+\n+In DyND's storage within memory, there is some metadata which describes memory layout, data references, and other details incidental to how things are stored. For serialization, the layout is defined completely in terms of the type, and there is no such metadata. For example, the `fixed` dimension type has a stride in its metadata. In the serialization of a strided array, the data is always tightly packed, and no stride is stored anywhere.\n+\n+## Deserialize Callable\n+\n+The `deserialize` callable has signature `(bytes, dst_tp: type) -> Any`, where the output array has the specified destination type. The generic case of of deserializing a general DyND array is treated as an element of type `array[Any]`, as noted in the serialize section above.\n+\n+## Type to Bytes Mapping\n+\n+* `bool`\n+  * Single byte `0x00` (false) `0x01` (true)\n+* `int##`, `uint##`, `float##`\n+  * The bytes are packed in little endian order.\n+* `complex[T]`\n+  * The real and imaginary components are serialized one after the other.\n+* `bytes[N]`\n+  * The bytes are stored as is.\n+* `bytes`\n+  * The size is stored as a [base 128 Varint](https://developers.google.com/protocol-buffers/docs/encoding?hl=en#varints), and the bytes follow as is.\n+* `string`\n+  * The UTF-8 encoding of the string is serialized identically to `bytes`.\n+* `char`\n+  * The 32-bit code point is serialized as is. (TODO: Would be better as UTF-8?)\n+* `type`\n+  * The type represented as a string, serialized as `string`. (TODO: Need to specify a well-defined type to string serialization that we will never change.)\n+* `void`\n+  * Adds no bytes to the serialization.\n+* `N * T`\n+  * Each element is serialized in sequence (a packed contiguous serialization). Because `N` is part of the type, it does not need to be stored.\n+* `var * T`\n+  * The size is stored as a [base 128 Varint](https://developers.google.com/protocol-buffers/docs/encoding?hl=en#varints), and then the elements are serialized the same as `N * T`.\n+* `(T0, T1, ...)`, `{field0: T0, field1: T1, ...}`\n+  * Each element of the tuple/struct is serialized in sequence (a packed contiguous serialization).\n+* `?T`\n+  * For types where the missing data sentinel is well-defined, the data is serialized just as `T` would be. For other types, missing is serialized as a single byte `0x00`, and available data is serialized as a single byte `0x01` followed by the serialization as `T`.\n+* `pointer[T]`\n+  * Serialized exactly as `T` would be.\n+* `array[T]`\n+  * Serialized as if it were a tuple `(type, T)`, with the type serialized, immediately followed by the data.\n+\n+## Possible DyND Array Serialization As CBOR\n+\n+The serialization could be as [CBOR](http://cbor.io/), through the mechanism described in http://tools.ietf.org/html/rfc7049#section-7.2. This is not thought out properly yet.", "path": "docs/serialization-design.md", "position": null, "original_position": 64, "commit_id": "ec522c17a23eb3f12a414b2227f4f7925c65088b", "original_commit_id": "605f5d37300ed7a51a01a9d1fdde8bbc6d56f0aa", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "They have a subsection http://tools.ietf.org/html/rfc7049#section-3.6 which delves a bit more into recommendations about interpreting this.\n", "created_at": "2016-01-11T21:37:25Z", "updated_at": "2016-01-13T18:37:48Z", "html_url": "https://github.com/libdynd/libdynd/pull/873#discussion_r49382455", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/873", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/49382455"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/873#discussion_r49382455"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/873"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/49382455/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/49383267", "pull_request_review_id": null, "id": 49383267, "diff_hunk": "@@ -0,0 +1,64 @@\n+# Serialization\n+\n+DyND stores typed multi-dimensional data in memory, which needs to be saved to disk and transported between machines for things like distributed and out of core computation. We would like the serialization to be simple and obvious where possible, and well-defined in a way suitable for use as a building block for creating Merkle DAGs.\n+\n+What follows is a proposal for how this can be done, to get things started and provide a basis for design discussion.\n+\n+## Document/Design Scope\n+\n+Ultimately, we may want to add a streaming capability to DyND, so that a DyND array which is almost as big as memory could stream directly to a file without being placed in an intermediate bytes object. In initial design and implementation of serialization, we can simply use the `bytes` type without hampering such future extension.\n+\n+We are not concerned with deduplication, as that would complicate the serialization format a fair bit. Deduplication can be handled by a future extension to a new type like `array[Any]`, but which operates as a Merkle link, together with serialization to/from a content addressable storage (CAS).\n+\n+We are not concerned with compression, that is something that can be layered on top of serialization. If a stream interface is added to DyND, chaining compression to serialization via that interface would be natural to pursue.\n+\n+As a serialization protocol, this document is concerned with converting to/from byte streams, and  not with random access or efficient seeking. In some cases, random access is possible, however.\n+\n+## Serialize Callable\n+\n+The `serialize` callable has signature `(Any) -> bytes`, and operates as a reduction kernel. This means it concatenates data to the output bytes object. Only the data gets serialized, not the type. This is not a problem, however, because to serialize an arbitrary array, one can serialize it as `array[Any]`, which must serialize both the type and the data.\n+\n+All primitives are serialized in little-endian order. By making this choice explicitly, there is no ambiguity across different platforms, and by not allowing alternatives, this makes the serialization suitable for use in Merkle DAGs. A majority of platforms are little-endian, so this is also good for the typical case.\n+\n+In DyND's storage within memory, there is some metadata which describes memory layout, data references, and other details incidental to how things are stored. For serialization, the layout is defined completely in terms of the type, and there is no such metadata. For example, the `fixed` dimension type has a stride in its metadata. In the serialization of a strided array, the data is always tightly packed, and no stride is stored anywhere.\n+\n+## Deserialize Callable\n+\n+The `deserialize` callable has signature `(bytes, dst_tp: type) -> Any`, where the output array has the specified destination type. The generic case of of deserializing a general DyND array is treated as an element of type `array[Any]`, as noted in the serialize section above.\n+\n+## Type to Bytes Mapping\n+\n+* `bool`\n+  * Single byte `0x00` (false) `0x01` (true)\n+* `int##`, `uint##`, `float##`\n+  * The bytes are packed in little endian order.\n+* `complex[T]`\n+  * The real and imaginary components are serialized one after the other.\n+* `bytes[N]`\n+  * The bytes are stored as is.\n+* `bytes`\n+  * The size is stored as a [base 128 Varint](https://developers.google.com/protocol-buffers/docs/encoding?hl=en#varints), and the bytes follow as is.\n+* `string`\n+  * The UTF-8 encoding of the string is serialized identically to `bytes`.\n+* `char`\n+  * The 32-bit code point is serialized as is. (TODO: Would be better as UTF-8?)\n+* `type`\n+  * The type represented as a string, serialized as `string`. (TODO: Need to specify a well-defined type to string serialization that we will never change.)\n+* `void`\n+  * Adds no bytes to the serialization.\n+* `N * T`\n+  * Each element is serialized in sequence (a packed contiguous serialization). Because `N` is part of the type, it does not need to be stored.\n+* `var * T`\n+  * The size is stored as a [base 128 Varint](https://developers.google.com/protocol-buffers/docs/encoding?hl=en#varints), and then the elements are serialized the same as `N * T`.\n+* `(T0, T1, ...)`, `{field0: T0, field1: T1, ...}`\n+  * Each element of the tuple/struct is serialized in sequence (a packed contiguous serialization).\n+* `?T`\n+  * For types where the missing data sentinel is well-defined, the data is serialized just as `T` would be. For other types, missing is serialized as a single byte `0x00`, and available data is serialized as a single byte `0x01` followed by the serialization as `T`.\n+* `pointer[T]`\n+  * Serialized exactly as `T` would be.\n+* `array[T]`\n+  * Serialized as if it were a tuple `(type, T)`, with the type serialized, immediately followed by the data.\n+\n+## Possible DyND Array Serialization As CBOR\n+\n+The serialization could be as [CBOR](http://cbor.io/), through the mechanism described in http://tools.ietf.org/html/rfc7049#section-7.2. This is not thought out properly yet.", "path": "docs/serialization-design.md", "position": null, "original_position": 64, "commit_id": "ec522c17a23eb3f12a414b2227f4f7925c65088b", "original_commit_id": "605f5d37300ed7a51a01a9d1fdde8bbc6d56f0aa", "user": {"login": "seibert", "id": 425352, "avatar_url": "https://avatars1.githubusercontent.com/u/425352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seibert", "html_url": "https://github.com/seibert", "followers_url": "https://api.github.com/users/seibert/followers", "following_url": "https://api.github.com/users/seibert/following{/other_user}", "gists_url": "https://api.github.com/users/seibert/gists{/gist_id}", "starred_url": "https://api.github.com/users/seibert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seibert/subscriptions", "organizations_url": "https://api.github.com/users/seibert/orgs", "repos_url": "https://api.github.com/users/seibert/repos", "events_url": "https://api.github.com/users/seibert/events{/privacy}", "received_events_url": "https://api.github.com/users/seibert/received_events", "type": "User", "site_admin": false}, "body": "I see, so DyND would basically specify a CBOR protocol where different numeric data formats would be used based on the datashape.\n", "created_at": "2016-01-11T21:43:31Z", "updated_at": "2016-01-13T18:37:48Z", "html_url": "https://github.com/libdynd/libdynd/pull/873#discussion_r49383267", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/873", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/49383267"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/873#discussion_r49383267"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/873"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/49383267/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51152587", "pull_request_review_id": null, "id": 51152587, "diff_hunk": "@@ -68,7 +68,49 @@ namespace nd {\n                                          &detail::inline_logical_xor<Src0TypeID, Src1TypeID>::f> {\n   };\n \n-#undef DYND_DeclBinopKernel\n+#define DYND_DEF_BINARY_OP_KERNEL_ZEROCHECK_INT(OP, NAME)                                                              \\\n+  namespace detail {                                                                                                   \\\n+    template <type_id_t Src0TypeID, type_id_t Src1TypeID,                                                              \\\n+              type_id_t Src0Base = base_id_of<Src0TypeID>::value,                                                      \\\n+              type_id_t Src1Base = base_id_of<Src1TypeID>::value,                                                      \\\n+              bool check = ((Src0Base == bool_kind_id) || (Src0Base == int_kind_id) || (Src0Base == uint_kind_id)) &&  \\\n+                           ((Src1Base == bool_kind_id) || (Src1Base == int_kind_id) || (Src1Base == uint_kind_id))>    \\\n+    struct inline_##NAME;                                                                                              \\\n+                                                                                                                       \\\n+    template <type_id_t Src0TypeID, type_id_t Src1TypeID, type_id_t Src0Base, type_id_t Src1Base>                      \\", "path": "include/dynd/kernels/arithmetic.hpp", "position": null, "original_position": 32, "commit_id": "2287d56d1eaa9fd5a20b126eb897389de300145e", "original_commit_id": "149d6d625940135f292ad9887327b9d254bcb524", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Looks good, this is the right way to do it. For consistency, I've been doing Src0ID, Src0BaseID, Src1ID, Src1BaseID rather then Src0ID, Src1ID, Src0BaseID, Src1BaseID. We should probably stick with the former as it is used throughout DyND.\n", "created_at": "2016-01-28T17:10:01Z", "updated_at": "2016-01-28T19:59:20Z", "html_url": "https://github.com/libdynd/libdynd/pull/898#discussion_r51152587", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/898", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51152587"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/898#discussion_r51152587"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/898"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51152587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51152764", "pull_request_review_id": null, "id": 51152764, "diff_hunk": "@@ -68,7 +68,49 @@ namespace nd {\n                                          &detail::inline_logical_xor<Src0TypeID, Src1TypeID>::f> {\n   };\n \n-#undef DYND_DeclBinopKernel\n+#define DYND_DEF_BINARY_OP_KERNEL_ZEROCHECK_INT(OP, NAME)                                                              \\\n+  namespace detail {                                                                                                   \\\n+    template <type_id_t Src0TypeID, type_id_t Src1TypeID,                                                              \\\n+              type_id_t Src0Base = base_id_of<Src0TypeID>::value,                                                      \\\n+              type_id_t Src1Base = base_id_of<Src1TypeID>::value,                                                      \\\n+              bool check = ((Src0Base == bool_kind_id) || (Src0Base == int_kind_id) || (Src0Base == uint_kind_id)) &&  \\\n+                           ((Src1Base == bool_kind_id) || (Src1Base == int_kind_id) || (Src1Base == uint_kind_id))>    \\\n+    struct inline_##NAME;                                                                                              \\\n+                                                                                                                       \\\n+    template <type_id_t Src0TypeID, type_id_t Src1TypeID, type_id_t Src0Base, type_id_t Src1Base>                      \\\n+    struct inline_##NAME<Src0TypeID, Src1TypeID, Src0Base, Src1Base, true> {                                           \\\n+      typedef typename type_of<Src0TypeID>::type T0;                                                                   \\\n+      typedef typename type_of<Src1TypeID>::type T1;                                                                   \\\n+      typedef decltype(std::declval<T0>() OP std::declval<T1>()) R;                                                    \\\n+      static R f(T0 a, T1 b) {                                                                                         \\\n+        if(b == 0) {                                                                                                   \\\n+          throw dynd::zero_division_error(\"Integer division or modulo by zero.\");                                      \\\n+        }                                                                                                              \\\n+        return a OP b;                                                                                                 \\\n+      }                                                                                                                \\\n+    };                                                                                                                 \\\n+                                                                                                                       \\\n+    template <type_id_t Src0TypeID, type_id_t Src1TypeID, type_id_t Src0Base, type_id_t Src1Base>                      \\", "path": "include/dynd/kernels/arithmetic.hpp", "position": null, "original_position": 45, "commit_id": "2287d56d1eaa9fd5a20b126eb897389de300145e", "original_commit_id": "149d6d625940135f292ad9887327b9d254bcb524", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Rather then the check template variable, what I would do here is break out the int_kind and bool_kind into a template specialization. This might require some demacroizing....\n", "created_at": "2016-01-28T17:11:18Z", "updated_at": "2016-01-28T19:59:20Z", "html_url": "https://github.com/libdynd/libdynd/pull/898#discussion_r51152764", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/898", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51152764"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/898#discussion_r51152764"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/898"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51152764/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51161029", "pull_request_review_id": null, "id": 51161029, "diff_hunk": "@@ -68,7 +68,49 @@ namespace nd {\n                                          &detail::inline_logical_xor<Src0TypeID, Src1TypeID>::f> {\n   };\n \n-#undef DYND_DeclBinopKernel\n+#define DYND_DEF_BINARY_OP_KERNEL_ZEROCHECK_INT(OP, NAME)                                                              \\\n+  namespace detail {                                                                                                   \\\n+    template <type_id_t Src0TypeID, type_id_t Src1TypeID,                                                              \\\n+              type_id_t Src0Base = base_id_of<Src0TypeID>::value,                                                      \\\n+              type_id_t Src1Base = base_id_of<Src1TypeID>::value,                                                      \\\n+              bool check = ((Src0Base == bool_kind_id) || (Src0Base == int_kind_id) || (Src0Base == uint_kind_id)) &&  \\\n+                           ((Src1Base == bool_kind_id) || (Src1Base == int_kind_id) || (Src1Base == uint_kind_id))>    \\\n+    struct inline_##NAME;                                                                                              \\\n+                                                                                                                       \\\n+    template <type_id_t Src0TypeID, type_id_t Src1TypeID, type_id_t Src0Base, type_id_t Src1Base>                      \\", "path": "include/dynd/kernels/arithmetic.hpp", "position": null, "original_position": 32, "commit_id": "2287d56d1eaa9fd5a20b126eb897389de300145e", "original_commit_id": "149d6d625940135f292ad9887327b9d254bcb524", "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "body": "I did things in that order to avoid adding an extra layer of indirection in the templates before passing the kernel in to `make_all` at https://github.com/libdynd/libdynd/blob/master/include/dynd/func/arithmetic.hpp#L61. Is there another interface there that I should be using or are you asking for another set of templates here?\n", "created_at": "2016-01-28T18:07:26Z", "updated_at": "2016-01-28T19:59:20Z", "html_url": "https://github.com/libdynd/libdynd/pull/898#discussion_r51161029", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/898", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51161029"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/898#discussion_r51161029"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/898"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51161029/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51161724", "pull_request_review_id": null, "id": 51161724, "diff_hunk": "@@ -68,7 +68,49 @@ namespace nd {\n                                          &detail::inline_logical_xor<Src0TypeID, Src1TypeID>::f> {\n   };\n \n-#undef DYND_DeclBinopKernel\n+#define DYND_DEF_BINARY_OP_KERNEL_ZEROCHECK_INT(OP, NAME)                                                              \\\n+  namespace detail {                                                                                                   \\\n+    template <type_id_t Src0TypeID, type_id_t Src1TypeID,                                                              \\\n+              type_id_t Src0Base = base_id_of<Src0TypeID>::value,                                                      \\\n+              type_id_t Src1Base = base_id_of<Src1TypeID>::value,                                                      \\\n+              bool check = ((Src0Base == bool_kind_id) || (Src0Base == int_kind_id) || (Src0Base == uint_kind_id)) &&  \\\n+                           ((Src1Base == bool_kind_id) || (Src1Base == int_kind_id) || (Src1Base == uint_kind_id))>    \\\n+    struct inline_##NAME;                                                                                              \\\n+                                                                                                                       \\\n+    template <type_id_t Src0TypeID, type_id_t Src1TypeID, type_id_t Src0Base, type_id_t Src1Base>                      \\", "path": "include/dynd/kernels/arithmetic.hpp", "position": null, "original_position": 32, "commit_id": "2287d56d1eaa9fd5a20b126eb897389de300145e", "original_commit_id": "149d6d625940135f292ad9887327b9d254bcb524", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "The solution we've been using here is a template alias -- see https://github.com/libdynd/libdynd/blob/master/include/dynd/kernels/uniform_kernel.hpp#L229.\n\nI'm also open to other solutions, anything that simplifies.\n", "created_at": "2016-01-28T18:12:42Z", "updated_at": "2016-01-28T19:59:20Z", "html_url": "https://github.com/libdynd/libdynd/pull/898#discussion_r51161724", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/898", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51161724"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/898#discussion_r51161724"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/898"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51161724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51162031", "pull_request_review_id": null, "id": 51162031, "diff_hunk": "@@ -68,7 +68,49 @@ namespace nd {\n                                          &detail::inline_logical_xor<Src0TypeID, Src1TypeID>::f> {\n   };\n \n-#undef DYND_DeclBinopKernel\n+#define DYND_DEF_BINARY_OP_KERNEL_ZEROCHECK_INT(OP, NAME)                                                              \\\n+  namespace detail {                                                                                                   \\\n+    template <type_id_t Src0TypeID, type_id_t Src1TypeID,                                                              \\\n+              type_id_t Src0Base = base_id_of<Src0TypeID>::value,                                                      \\\n+              type_id_t Src1Base = base_id_of<Src1TypeID>::value,                                                      \\\n+              bool check = ((Src0Base == bool_kind_id) || (Src0Base == int_kind_id) || (Src0Base == uint_kind_id)) &&  \\\n+                           ((Src1Base == bool_kind_id) || (Src1Base == int_kind_id) || (Src1Base == uint_kind_id))>    \\\n+    struct inline_##NAME;                                                                                              \\\n+                                                                                                                       \\\n+    template <type_id_t Src0TypeID, type_id_t Src1TypeID, type_id_t Src0Base, type_id_t Src1Base>                      \\\n+    struct inline_##NAME<Src0TypeID, Src1TypeID, Src0Base, Src1Base, true> {                                           \\\n+      typedef typename type_of<Src0TypeID>::type T0;                                                                   \\\n+      typedef typename type_of<Src1TypeID>::type T1;                                                                   \\\n+      typedef decltype(std::declval<T0>() OP std::declval<T1>()) R;                                                    \\\n+      static R f(T0 a, T1 b) {                                                                                         \\\n+        if(b == 0) {                                                                                                   \\\n+          throw dynd::zero_division_error(\"Integer division or modulo by zero.\");                                      \\\n+        }                                                                                                              \\\n+        return a OP b;                                                                                                 \\\n+      }                                                                                                                \\\n+    };                                                                                                                 \\\n+                                                                                                                       \\\n+    template <type_id_t Src0TypeID, type_id_t Src1TypeID, type_id_t Src0Base, type_id_t Src1Base>                      \\", "path": "include/dynd/kernels/arithmetic.hpp", "position": null, "original_position": 45, "commit_id": "2287d56d1eaa9fd5a20b126eb897389de300145e", "original_commit_id": "149d6d625940135f292ad9887327b9d254bcb524", "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "body": "I did that deliberately since the code is completely identical for unsigned integers, signed integers, and bools and we have to check that both arguments are one of those types. That's why I originally implemented this with `std::is_integral`. Is there a another way to do this that doesn't involve rewriting the same thing nine times?\n", "created_at": "2016-01-28T18:14:39Z", "updated_at": "2016-01-28T19:59:20Z", "html_url": "https://github.com/libdynd/libdynd/pull/898#discussion_r51162031", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/898", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51162031"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/898#discussion_r51162031"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/898"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51162031/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51162441", "pull_request_review_id": null, "id": 51162441, "diff_hunk": "@@ -68,7 +68,49 @@ namespace nd {\n                                          &detail::inline_logical_xor<Src0TypeID, Src1TypeID>::f> {\n   };\n \n-#undef DYND_DeclBinopKernel\n+#define DYND_DEF_BINARY_OP_KERNEL_ZEROCHECK_INT(OP, NAME)                                                              \\\n+  namespace detail {                                                                                                   \\\n+    template <type_id_t Src0TypeID, type_id_t Src1TypeID,                                                              \\\n+              type_id_t Src0Base = base_id_of<Src0TypeID>::value,                                                      \\\n+              type_id_t Src1Base = base_id_of<Src1TypeID>::value,                                                      \\\n+              bool check = ((Src0Base == bool_kind_id) || (Src0Base == int_kind_id) || (Src0Base == uint_kind_id)) &&  \\\n+                           ((Src1Base == bool_kind_id) || (Src1Base == int_kind_id) || (Src1Base == uint_kind_id))>    \\\n+    struct inline_##NAME;                                                                                              \\\n+                                                                                                                       \\\n+    template <type_id_t Src0TypeID, type_id_t Src1TypeID, type_id_t Src0Base, type_id_t Src1Base>                      \\", "path": "include/dynd/kernels/arithmetic.hpp", "position": null, "original_position": 32, "commit_id": "2287d56d1eaa9fd5a20b126eb897389de300145e", "original_commit_id": "149d6d625940135f292ad9887327b9d254bcb524", "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "body": "An alias like that looks good to me. I'll add that in. Thanks.\n", "created_at": "2016-01-28T18:17:50Z", "updated_at": "2016-01-28T19:59:20Z", "html_url": "https://github.com/libdynd/libdynd/pull/898#discussion_r51162441", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/898", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51162441"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/898#discussion_r51162441"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/898"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51162441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51163962", "pull_request_review_id": null, "id": 51163962, "diff_hunk": "@@ -68,7 +68,49 @@ namespace nd {\n                                          &detail::inline_logical_xor<Src0TypeID, Src1TypeID>::f> {\n   };\n \n-#undef DYND_DeclBinopKernel\n+#define DYND_DEF_BINARY_OP_KERNEL_ZEROCHECK_INT(OP, NAME)                                                              \\\n+  namespace detail {                                                                                                   \\\n+    template <type_id_t Src0TypeID, type_id_t Src1TypeID,                                                              \\\n+              type_id_t Src0Base = base_id_of<Src0TypeID>::value,                                                      \\\n+              type_id_t Src1Base = base_id_of<Src1TypeID>::value,                                                      \\\n+              bool check = ((Src0Base == bool_kind_id) || (Src0Base == int_kind_id) || (Src0Base == uint_kind_id)) &&  \\\n+                           ((Src1Base == bool_kind_id) || (Src1Base == int_kind_id) || (Src1Base == uint_kind_id))>    \\\n+    struct inline_##NAME;                                                                                              \\\n+                                                                                                                       \\\n+    template <type_id_t Src0TypeID, type_id_t Src1TypeID, type_id_t Src0Base, type_id_t Src1Base>                      \\\n+    struct inline_##NAME<Src0TypeID, Src1TypeID, Src0Base, Src1Base, true> {                                           \\\n+      typedef typename type_of<Src0TypeID>::type T0;                                                                   \\\n+      typedef typename type_of<Src1TypeID>::type T1;                                                                   \\\n+      typedef decltype(std::declval<T0>() OP std::declval<T1>()) R;                                                    \\\n+      static R f(T0 a, T1 b) {                                                                                         \\\n+        if(b == 0) {                                                                                                   \\\n+          throw dynd::zero_division_error(\"Integer division or modulo by zero.\");                                      \\\n+        }                                                                                                              \\\n+        return a OP b;                                                                                                 \\\n+      }                                                                                                                \\\n+    };                                                                                                                 \\\n+                                                                                                                       \\\n+    template <type_id_t Src0TypeID, type_id_t Src1TypeID, type_id_t Src0Base, type_id_t Src1Base>                      \\", "path": "include/dynd/kernels/arithmetic.hpp", "position": null, "original_position": 45, "commit_id": "2287d56d1eaa9fd5a20b126eb897389de300145e", "original_commit_id": "149d6d625940135f292ad9887327b9d254bcb524", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "If we leave the type ID as an unspecialized template variable, but specialize on the base ID for unsigned, signed, and bool, then we only have to write it out 3 times. I think you can probably simplify, but you just need to play around a bit. This is partially a question of personal preference, I think.\n", "created_at": "2016-01-28T18:27:36Z", "updated_at": "2016-01-28T19:59:20Z", "html_url": "https://github.com/libdynd/libdynd/pull/898#discussion_r51163962", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/898", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51163962"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/898#discussion_r51163962"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/898"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51163962/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51140632", "pull_request_review_id": null, "id": 51140632, "diff_hunk": "@@ -3,83 +3,33 @@\n // BSD 2-Clause License, see LICENSE.txt\n //\n \n-// Implement a number of string algorithms. Note that the initial\n+// Implement a number of string algorithms.\n \n #pragma once\n \n+#include <dynd/callable.hpp>\n #include <dynd/kernels/kernel_builder.hpp>\n-#include <dynd/string_encodings.hpp>\n+#include <dynd/types/string_type.hpp>\n \n-namespace dynd { namespace kernels {\n+namespace dynd {\n+  namespace nd {\n \n-/**\n- * String concatenation kernel.\n- *\n- * (string, string, ...) -> string\n- */\n-struct DYND_API string_concatenation_kernel {\n-    typedef string_concatenation_kernel extra_type;\n+    struct string_concatenation_kernel\n+      : base_kernel<string_concatenation_kernel, 2> {\n+      typedef string_concatenation_kernel extra_type;\n \n-    ckernel_prefix m_base;\n-    // The number of input operands\n-    size_t m_nop;\n+      void single(char *dst, char *const *src);\n+    };\n \n-    ckernel_prefix& base() {\n-        return m_base;\n-    }\n+  } // namespace nd\n ", "path": "include/dynd/kernels/string_algorithm_kernels.hpp", "position": null, "original_position": 39, "commit_id": "cf6e13304f725a27bfabc5a16cd1b6883140014f", "original_commit_id": "401a5df239b52d183593aab74d65f61ca4221f65", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Your string_concatenation kernel is perfect. You just need to fill in the body of single with the operation, and that's exactly how we write them.\n", "created_at": "2016-01-28T15:53:59Z", "updated_at": "2016-01-28T20:51:59Z", "html_url": "https://github.com/libdynd/libdynd/pull/901#discussion_r51140632", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/901", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51140632"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/901#discussion_r51140632"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/901"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51140632/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51140736", "pull_request_review_id": null, "id": 51140736, "diff_hunk": "@@ -3,83 +3,33 @@\n // BSD 2-Clause License, see LICENSE.txt\n //\n \n-// Implement a number of string algorithms. Note that the initial\n+// Implement a number of string algorithms.\n \n #pragma once\n \n+#include <dynd/callable.hpp>\n #include <dynd/kernels/kernel_builder.hpp>\n-#include <dynd/string_encodings.hpp>\n+#include <dynd/types/string_type.hpp>\n \n-namespace dynd { namespace kernels {\n+namespace dynd {\n+  namespace nd {\n \n-/**\n- * String concatenation kernel.\n- *\n- * (string, string, ...) -> string\n- */\n-struct DYND_API string_concatenation_kernel {\n-    typedef string_concatenation_kernel extra_type;\n+    struct string_concatenation_kernel\n+      : base_kernel<string_concatenation_kernel, 2> {\n+      typedef string_concatenation_kernel extra_type;\n \n-    ckernel_prefix m_base;\n-    // The number of input operands\n-    size_t m_nop;\n+      void single(char *dst, char *const *src);\n+    };\n \n-    ckernel_prefix& base() {\n-        return m_base;\n-    }\n+  } // namespace nd\n \n-    /**\n-     * Initializes the kernel data.\n-     *\n-     * \\param nop  This must be >= 2.\n-     * \\param dst_arrmeta  Must be the destination for a \"string\" type (utf-8 string type).\n-     * \\param src_arrmeta  Must be the two sources for \"string\" types.\n-     */\n-    void init(size_t nop, const char *dst_arrmeta, const char **src_arrmeta);\n+  namespace ndt {\n \n-    static void single(char *dst, char *const *src,\n-                       ckernel_prefix *extra);\n-    static void strided(char *dst, intptr_t dst_stride, char *const *src,\n-                        const intptr_t *src_stride, size_t count,\n-                        ckernel_prefix *extra);\n-};\n+    template<>\n+    struct traits<dynd::nd::string_concatenation_kernel> {\n+      static type equivalent() { return callable_type::make(make_type<dynd::string>(), {type(string_id), type(string_id)}); }\n+    };\n ", "path": "include/dynd/kernels/string_algorithm_kernels.hpp", "position": null, "original_position": 60, "commit_id": "cf6e13304f725a27bfabc5a16cd1b6883140014f", "original_commit_id": "401a5df239b52d183593aab74d65f61ca4221f65", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "The `ndt::traits<...>` template that you are using communicates the signature of the kernel to how we make callables (details to follow on that). This is also perfect.\n", "created_at": "2016-01-28T15:54:38Z", "updated_at": "2016-01-28T20:51:59Z", "html_url": "https://github.com/libdynd/libdynd/pull/901#discussion_r51140736", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/901", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51140736"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/901#discussion_r51140736"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/901"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51140736/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51140871", "pull_request_review_id": null, "id": 51140871, "diff_hunk": "@@ -427,30 +429,29 @@ TEST(StringType, Comparisons)\n     */\n }\n \n-/*\n-TODO: Reenable this.\n \n TEST(StringType, Concatenation) {\n     nd::array a, b, c;\n \n+    nd::callable f = nd::functional::elwise(nd::callable::make<nd::string_concatenation_kernel>());\n+\n     a = \"first\";", "path": "tests/types/test_string_type.cpp", "position": null, "original_position": 21, "commit_id": "cf6e13304f725a27bfabc5a16cd1b6883140014f", "original_commit_id": "401a5df239b52d183593aab74d65f61ca4221f65", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "How you made the `nd::callable f` is also good. There's a way we declare these functions in DyND as global variables, which is all you are missing.\n", "created_at": "2016-01-28T15:55:35Z", "updated_at": "2016-01-28T20:51:59Z", "html_url": "https://github.com/libdynd/libdynd/pull/901#discussion_r51140871", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/901", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51140871"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/901#discussion_r51140871"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/901"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51140871/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51180056", "pull_request_review_id": null, "id": 51180056, "diff_hunk": "@@ -0,0 +1,19 @@\n+//\n+// Copyright (C) 2011-15 DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#pragma once\n+\n+#include <dynd/callable.hpp>\n+#include <dynd/kernels/string_concat_kernel.hpp>\n+", "path": "include/dynd/string.hpp", "position": null, "original_position": 10, "commit_id": "cf6e13304f725a27bfabc5a16cd1b6883140014f", "original_commit_id": "8ed68b5b7600f91cf1b069bf417f784896d6af14", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "`#include <dynd/kernels/string_concat_kernel.hpp>` should only be in the string.cpp file. That really simplifies the amount of includes visible to the user.\n", "created_at": "2016-01-28T20:11:02Z", "updated_at": "2016-01-28T20:51:59Z", "html_url": "https://github.com/libdynd/libdynd/pull/901#discussion_r51180056", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/901", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51180056"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/901#discussion_r51180056"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/901"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51180056/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51180686", "pull_request_review_id": null, "id": 51180686, "diff_hunk": "@@ -0,0 +1,19 @@\n+//\n+// Copyright (C) 2011-15 DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+#pragma once\n+\n+#include <dynd/callable.hpp>\n+#include <dynd/kernels/string_concat_kernel.hpp>\n+", "path": "include/dynd/string.hpp", "position": null, "original_position": 10, "commit_id": "cf6e13304f725a27bfabc5a16cd1b6883140014f", "original_commit_id": "8ed68b5b7600f91cf1b069bf417f784896d6af14", "user": {"login": "mdboom", "id": 38294, "avatar_url": "https://avatars3.githubusercontent.com/u/38294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdboom", "html_url": "https://github.com/mdboom", "followers_url": "https://api.github.com/users/mdboom/followers", "following_url": "https://api.github.com/users/mdboom/following{/other_user}", "gists_url": "https://api.github.com/users/mdboom/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdboom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdboom/subscriptions", "organizations_url": "https://api.github.com/users/mdboom/orgs", "repos_url": "https://api.github.com/users/mdboom/repos", "events_url": "https://api.github.com/users/mdboom/events{/privacy}", "received_events_url": "https://api.github.com/users/mdboom/received_events", "type": "User", "site_admin": false}, "body": "Makes sense.\n", "created_at": "2016-01-28T20:16:00Z", "updated_at": "2016-01-28T20:51:59Z", "html_url": "https://github.com/libdynd/libdynd/pull/901#discussion_r51180686", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/901", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51180686"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/901#discussion_r51180686"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/901"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51180686/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51286777", "pull_request_review_id": null, "id": 51286777, "diff_hunk": "@@ -22,6 +22,8 @@ class DYND_API string : public bytes {\n \n   string(const std::string &other) : string(other.data(), other.size()) {}\n \n+  string(const bytes &other) : string(other.data(), other.size()) {}\n+\n   bool operator<(const string &rhs) const", "path": "include/dynd/types/string_type.hpp", "position": 6, "original_position": 6, "commit_id": "8c67647df5e8ea5f250db48bf51e2971e8eda0fe", "original_commit_id": "22b8093dc88ef32e031b3366e9d2fca410dba96b", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Why is `string(const bytes &other)` necessary? It feels strange to me to have a copy constructor in string from it's base class.\n", "created_at": "2016-01-29T17:09:06Z", "updated_at": "2016-01-29T17:25:20Z", "html_url": "https://github.com/libdynd/libdynd/pull/905#discussion_r51286777", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/905", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51286777"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/905#discussion_r51286777"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/905"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51286777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51286974", "pull_request_review_id": null, "id": 51286974, "diff_hunk": "@@ -431,6 +431,22 @@ TEST(StringType, Comparisons)\n }\n \n \n+TEST(StringType, ConcatenationScalar) {\n+    dynd::string a(\"first\");\n+    dynd::string b(\"second\");\n+\n+    dynd::string c(a + b);\n+    ASSERT_EQ(dynd::string(\"firstsecond\"), c);\n+\n+    a = dynd::string(\"foo\");\n+    a += dynd::string(\"bar\");\n+\n+    printf(\"%s\\n\", a.begin());", "path": "tests/types/test_string_type.cpp", "position": null, "original_position": 14, "commit_id": "8c67647df5e8ea5f250db48bf51e2971e8eda0fe", "original_commit_id": "22b8093dc88ef32e031b3366e9d2fca410dba96b", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Extra printf that we should remove.\n", "created_at": "2016-01-29T17:10:46Z", "updated_at": "2016-01-29T17:25:20Z", "html_url": "https://github.com/libdynd/libdynd/pull/905#discussion_r51286974", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/905", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51286974"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/905#discussion_r51286974"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/905"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51286974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51288494", "pull_request_review_id": null, "id": 51288494, "diff_hunk": "@@ -22,6 +22,8 @@ class DYND_API string : public bytes {\n \n   string(const std::string &other) : string(other.data(), other.size()) {}\n \n+  string(const bytes &other) : string(other.data(), other.size()) {}\n+\n   bool operator<(const string &rhs) const", "path": "include/dynd/types/string_type.hpp", "position": 6, "original_position": 6, "commit_id": "8c67647df5e8ea5f250db48bf51e2971e8eda0fe", "original_commit_id": "22b8093dc88ef32e031b3366e9d2fca410dba96b", "user": {"login": "mdboom", "id": 38294, "avatar_url": "https://avatars3.githubusercontent.com/u/38294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdboom", "html_url": "https://github.com/mdboom", "followers_url": "https://api.github.com/users/mdboom/followers", "following_url": "https://api.github.com/users/mdboom/following{/other_user}", "gists_url": "https://api.github.com/users/mdboom/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdboom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdboom/subscriptions", "organizations_url": "https://api.github.com/users/mdboom/orgs", "repos_url": "https://api.github.com/users/mdboom/repos", "events_url": "https://api.github.com/users/mdboom/events{/privacy}", "received_events_url": "https://api.github.com/users/mdboom/received_events", "type": "User", "site_admin": false}, "body": "It's to support:\n\n```\ndynd::string a(\"first\");\ndynd::string b(\"second\");\ndynd::string c(a + b);\n```\n\nsince `operator+` returns bytes.\n\nThere might be a better way, of course.\n", "created_at": "2016-01-29T17:24:55Z", "updated_at": "2016-01-29T17:25:20Z", "html_url": "https://github.com/libdynd/libdynd/pull/905#discussion_r51288494", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/905", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51288494"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/905#discussion_r51288494"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/905"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51288494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51289279", "pull_request_review_id": null, "id": 51289279, "diff_hunk": "@@ -22,6 +22,8 @@ class DYND_API string : public bytes {\n \n   string(const std::string &other) : string(other.data(), other.size()) {}\n \n+  string(const bytes &other) : string(other.data(), other.size()) {}\n+\n   bool operator<(const string &rhs) const", "path": "include/dynd/types/string_type.hpp", "position": 6, "original_position": 6, "commit_id": "8c67647df5e8ea5f250db48bf51e2971e8eda0fe", "original_commit_id": "22b8093dc88ef32e031b3366e9d2fca410dba96b", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Ah, okay. There probably is a better way to do it, but I don't know what it is offhand. So let's leave this in and fix it whenever someone feels like playing around with it.\n", "created_at": "2016-01-29T17:32:04Z", "updated_at": "2016-01-29T17:32:04Z", "html_url": "https://github.com/libdynd/libdynd/pull/905#discussion_r51289279", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/905", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51289279"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/905#discussion_r51289279"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/905"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51289279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51291356", "pull_request_review_id": null, "id": 51291356, "diff_hunk": "@@ -22,6 +22,8 @@ class DYND_API string : public bytes {\n \n   string(const std::string &other) : string(other.data(), other.size()) {}\n \n+  string(const bytes &other) : string(other.data(), other.size()) {}\n+\n   bool operator<(const string &rhs) const", "path": "include/dynd/types/string_type.hpp", "position": 6, "original_position": 6, "commit_id": "8c67647df5e8ea5f250db48bf51e2971e8eda0fe", "original_commit_id": "22b8093dc88ef32e031b3366e9d2fca410dba96b", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "Hey @mdboom thanks for getting into the code, it's awesome to see more faces in the commit logs :)\n\nI think we want to keep a barrier between dynd::bytes and dynd::string, just like in Python 3. That would mean no implicit conversions, and structuring it so that the explicit conversions are very clear.\n", "created_at": "2016-01-29T17:49:47Z", "updated_at": "2016-01-29T17:49:47Z", "html_url": "https://github.com/libdynd/libdynd/pull/905#discussion_r51291356", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/905", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51291356"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/905#discussion_r51291356"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/905"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51291356/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51292452", "pull_request_review_id": null, "id": 51292452, "diff_hunk": "@@ -89,14 +89,22 @@ class DYND_API bytes {\n \n   const bytes operator+(const bytes& rhs)\n   {\n-      bytes result;\n+    bytes result;\n \n-      result.resize(size() + rhs.size());\n+    result.resize(size() + rhs.size());\n \n-      DYND_MEMCPY(result.begin(), begin(), size());\n-      DYND_MEMCPY(result.begin() + size(), rhs.begin(), rhs.size());\n+    DYND_MEMCPY(result.begin(), begin(), size());\n+    DYND_MEMCPY(result.begin() + size(), rhs.begin(), rhs.size());\n \n-      return result;\n+    return result;\n+  }\n+\n+  bytes &operator+=(const bytes& rhs)\n+  {\n+    size_t orig_size = size();\n+    resize(size() + rhs.size());\n+    DYND_MEMCPY(begin() + orig_size, rhs.begin(), rhs.size());\n+    return *this;", "path": "include/dynd/bytes.hpp", "position": 24, "original_position": 24, "commit_id": "8c67647df5e8ea5f250db48bf51e2971e8eda0fe", "original_commit_id": "8c67647df5e8ea5f250db48bf51e2971e8eda0fe", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "It looks like because the string isn't following the design in https://github.com/libdynd/libdynd/blob/master/docs/string-design.md yet, this can't currently be implemented with an exponential growth strategy for efficient amortized concatenation. What thoughts does everyone have on finishing that up?\n", "created_at": "2016-01-29T17:58:35Z", "updated_at": "2016-01-29T17:58:35Z", "html_url": "https://github.com/libdynd/libdynd/pull/905#discussion_r51292452", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/905", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51292452"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/905#discussion_r51292452"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/905"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51292452/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51294522", "pull_request_review_id": null, "id": 51294522, "diff_hunk": "@@ -89,14 +89,22 @@ class DYND_API bytes {\n \n   const bytes operator+(const bytes& rhs)\n   {\n-      bytes result;\n+    bytes result;\n \n-      result.resize(size() + rhs.size());\n+    result.resize(size() + rhs.size());\n \n-      DYND_MEMCPY(result.begin(), begin(), size());\n-      DYND_MEMCPY(result.begin() + size(), rhs.begin(), rhs.size());\n+    DYND_MEMCPY(result.begin(), begin(), size());\n+    DYND_MEMCPY(result.begin() + size(), rhs.begin(), rhs.size());\n \n-      return result;\n+    return result;\n+  }\n+\n+  bytes &operator+=(const bytes& rhs)\n+  {\n+    size_t orig_size = size();\n+    resize(size() + rhs.size());\n+    DYND_MEMCPY(begin() + orig_size, rhs.begin(), rhs.size());\n+    return *this;", "path": "include/dynd/bytes.hpp", "position": 24, "original_position": 24, "commit_id": "8c67647df5e8ea5f250db48bf51e2971e8eda0fe", "original_commit_id": "8c67647df5e8ea5f250db48bf51e2971e8eda0fe", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "The only thing that's lacking from the design implementation is the inline storage, right? We should definitely finish that at some point, but it doesn't alter how we are building string kernels -- unless I'm missing something.\n", "created_at": "2016-01-29T18:16:17Z", "updated_at": "2016-01-29T18:16:17Z", "html_url": "https://github.com/libdynd/libdynd/pull/905#discussion_r51294522", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/905", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51294522"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/905#discussion_r51294522"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/905"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51294522/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51295300", "pull_request_review_id": null, "id": 51295300, "diff_hunk": "@@ -89,14 +89,22 @@ class DYND_API bytes {\n \n   const bytes operator+(const bytes& rhs)\n   {\n-      bytes result;\n+    bytes result;\n \n-      result.resize(size() + rhs.size());\n+    result.resize(size() + rhs.size());\n \n-      DYND_MEMCPY(result.begin(), begin(), size());\n-      DYND_MEMCPY(result.begin() + size(), rhs.begin(), rhs.size());\n+    DYND_MEMCPY(result.begin(), begin(), size());\n+    DYND_MEMCPY(result.begin() + size(), rhs.begin(), rhs.size());\n \n-      return result;\n+    return result;\n+  }\n+\n+  bytes &operator+=(const bytes& rhs)\n+  {\n+    size_t orig_size = size();\n+    resize(size() + rhs.size());\n+    DYND_MEMCPY(begin() + orig_size, rhs.begin(), rhs.size());\n+    return *this;", "path": "include/dynd/bytes.hpp", "position": 24, "original_position": 24, "commit_id": "8c67647df5e8ea5f250db48bf51e2971e8eda0fe", "original_commit_id": "8c67647df5e8ea5f250db48bf51e2971e8eda0fe", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "It looks like the implementation doesn't have a `capacity` in the heap storage mode either. I'll put a little more in that design doc to try to make it more clear.\n", "created_at": "2016-01-29T18:21:38Z", "updated_at": "2016-01-29T18:21:38Z", "html_url": "https://github.com/libdynd/libdynd/pull/905#discussion_r51295300", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/905", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51295300"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/905#discussion_r51295300"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/905"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51295300/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51295329", "pull_request_review_id": null, "id": 51295329, "diff_hunk": "@@ -155,9 +155,9 @@ namespace nd {\n \n     std::intptr_t get_narg() const { return get_type()->get_npos(); }\n \n-    const ndt::type &get_arg_type(std::intptr_t i) const { return get_type()->get_pos_type(i); }\n+    const ndt::type get_arg_type(std::intptr_t i) const { return get_type()->get_pos_type(i); }\n \n-    const array &get_arg_types() const { return get_type()->get_pos_types(); }\n+    nd::array get_arg_types() const { return get_type()->get_pos_types(); }", "path": "include/dynd/callable.hpp", "position": 8, "original_position": 8, "commit_id": "13b465584e1ca6211a7a306b46841acb7c81eb80", "original_commit_id": "0df93abe6fbaa78ba84e6d4965b887d7a8c6d3e7", "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "body": "There are a variety of places here where you change const references to by value returns. Is there any particular reason for this?\n", "created_at": "2016-01-29T18:21:46Z", "updated_at": "2016-01-29T18:21:46Z", "html_url": "https://github.com/libdynd/libdynd/pull/903#discussion_r51295329", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/903", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51295329"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/903#discussion_r51295329"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/903"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51295329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51295891", "pull_request_review_id": null, "id": 51295891, "diff_hunk": "@@ -89,14 +89,22 @@ class DYND_API bytes {\n \n   const bytes operator+(const bytes& rhs)\n   {\n-      bytes result;\n+    bytes result;\n \n-      result.resize(size() + rhs.size());\n+    result.resize(size() + rhs.size());\n \n-      DYND_MEMCPY(result.begin(), begin(), size());\n-      DYND_MEMCPY(result.begin() + size(), rhs.begin(), rhs.size());\n+    DYND_MEMCPY(result.begin(), begin(), size());\n+    DYND_MEMCPY(result.begin() + size(), rhs.begin(), rhs.size());\n \n-      return result;\n+    return result;\n+  }\n+\n+  bytes &operator+=(const bytes& rhs)\n+  {\n+    size_t orig_size = size();\n+    resize(size() + rhs.size());\n+    DYND_MEMCPY(begin() + orig_size, rhs.begin(), rhs.size());\n+    return *this;", "path": "include/dynd/bytes.hpp", "position": 24, "original_position": 24, "commit_id": "8c67647df5e8ea5f250db48bf51e2971e8eda0fe", "original_commit_id": "8c67647df5e8ea5f250db48bf51e2971e8eda0fe", "user": {"login": "mdboom", "id": 38294, "avatar_url": "https://avatars3.githubusercontent.com/u/38294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdboom", "html_url": "https://github.com/mdboom", "followers_url": "https://api.github.com/users/mdboom/followers", "following_url": "https://api.github.com/users/mdboom/following{/other_user}", "gists_url": "https://api.github.com/users/mdboom/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdboom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdboom/subscriptions", "organizations_url": "https://api.github.com/users/mdboom/orgs", "repos_url": "https://api.github.com/users/mdboom/repos", "events_url": "https://api.github.com/users/mdboom/events{/privacy}", "received_events_url": "https://api.github.com/users/mdboom/received_events", "type": "User", "site_admin": false}, "body": "Yeah, I agree there's lots we could do here.  At present, I'm just working within the confines of the current simple implementation.\n", "created_at": "2016-01-29T18:26:23Z", "updated_at": "2016-01-29T18:26:23Z", "html_url": "https://github.com/libdynd/libdynd/pull/905#discussion_r51295891", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/905", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51295891"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/905#discussion_r51295891"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/905"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51295891/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51296035", "pull_request_review_id": null, "id": 51296035, "diff_hunk": "@@ -11,7 +11,40 @@\n namespace dynd {\n namespace nd {\n \n-  template <typename TypeType, const array &(TypeType::*Func)() const>\n+template <typename TypeType, array (TypeType::*Func)() const>\n+struct get_then_copy_kernel2 : base_kernel<get_then_copy_kernel2<TypeType, Func>, 0> {", "path": "include/dynd/kernels/get_then_copy_kernel.hpp", "position": 6, "original_position": 6, "commit_id": "13b465584e1ca6211a7a306b46841acb7c81eb80", "original_commit_id": "0df93abe6fbaa78ba84e6d4965b887d7a8c6d3e7", "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "body": "Does this completely replace the old `get_then_copy_kernel`? Why not make the changes to the original rather than having two kernels?\n", "created_at": "2016-01-29T18:27:36Z", "updated_at": "2016-01-29T18:27:36Z", "html_url": "https://github.com/libdynd/libdynd/pull/903#discussion_r51296035", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/903", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51296035"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/903#discussion_r51296035"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/903"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51296035/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51296621", "pull_request_review_id": null, "id": 51296621, "diff_hunk": "@@ -89,14 +89,22 @@ class DYND_API bytes {\n \n   const bytes operator+(const bytes& rhs)\n   {\n-      bytes result;\n+    bytes result;\n \n-      result.resize(size() + rhs.size());\n+    result.resize(size() + rhs.size());\n \n-      DYND_MEMCPY(result.begin(), begin(), size());\n-      DYND_MEMCPY(result.begin() + size(), rhs.begin(), rhs.size());\n+    DYND_MEMCPY(result.begin(), begin(), size());\n+    DYND_MEMCPY(result.begin() + size(), rhs.begin(), rhs.size());\n \n-      return result;\n+    return result;\n+  }\n+\n+  bytes &operator+=(const bytes& rhs)\n+  {\n+    size_t orig_size = size();\n+    resize(size() + rhs.size());\n+    DYND_MEMCPY(begin() + orig_size, rhs.begin(), rhs.size());\n+    return *this;", "path": "include/dynd/bytes.hpp", "position": 24, "original_position": 24, "commit_id": "8c67647df5e8ea5f250db48bf51e2971e8eda0fe", "original_commit_id": "8c67647df5e8ea5f250db48bf51e2971e8eda0fe", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "@mwiebe To me, the really important thing is that we're building the string kernels off a relatively stable `dynd::string` API. If you think that's not the currrent case, let me know!\n", "created_at": "2016-01-29T18:32:19Z", "updated_at": "2016-01-29T18:32:19Z", "html_url": "https://github.com/libdynd/libdynd/pull/905#discussion_r51296621", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/905", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51296621"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/905#discussion_r51296621"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/905"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51296621/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51298227", "pull_request_review_id": null, "id": 51298227, "diff_hunk": "@@ -11,7 +11,40 @@\n namespace dynd {\n namespace nd {\n \n-  template <typename TypeType, const array &(TypeType::*Func)() const>\n+template <typename TypeType, array (TypeType::*Func)() const>\n+struct get_then_copy_kernel2 : base_kernel<get_then_copy_kernel2<TypeType, Func>, 0> {", "path": "include/dynd/kernels/get_then_copy_kernel.hpp", "position": 6, "original_position": 6, "commit_id": "13b465584e1ca6211a7a306b46841acb7c81eb80", "original_commit_id": "0df93abe6fbaa78ba84e6d4965b887d7a8c6d3e7", "user": {"login": "skrah", "id": 16530421, "avatar_url": "https://avatars1.githubusercontent.com/u/16530421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skrah", "html_url": "https://github.com/skrah", "followers_url": "https://api.github.com/users/skrah/followers", "following_url": "https://api.github.com/users/skrah/following{/other_user}", "gists_url": "https://api.github.com/users/skrah/gists{/gist_id}", "starred_url": "https://api.github.com/users/skrah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skrah/subscriptions", "organizations_url": "https://api.github.com/users/skrah/orgs", "repos_url": "https://api.github.com/users/skrah/repos", "events_url": "https://api.github.com/users/skrah/events{/privacy}", "received_events_url": "https://api.github.com/users/skrah/received_events", "type": "User", "site_admin": false}, "body": "Yes, the goal is to keep one version only.  Currently both versions are needed since other parts still need to be converted.\n", "created_at": "2016-01-29T18:45:15Z", "updated_at": "2016-01-29T18:45:15Z", "html_url": "https://github.com/libdynd/libdynd/pull/903#discussion_r51298227", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/903", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51298227"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/903#discussion_r51298227"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/903"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51298227/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51298240", "pull_request_review_id": null, "id": 51298240, "diff_hunk": "@@ -155,9 +155,9 @@ namespace nd {\n \n     std::intptr_t get_narg() const { return get_type()->get_npos(); }\n \n-    const ndt::type &get_arg_type(std::intptr_t i) const { return get_type()->get_pos_type(i); }\n+    const ndt::type get_arg_type(std::intptr_t i) const { return get_type()->get_pos_type(i); }\n \n-    const array &get_arg_types() const { return get_type()->get_pos_types(); }\n+    nd::array get_arg_types() const { return get_type()->get_pos_types(); }", "path": "include/dynd/callable.hpp", "position": 8, "original_position": 8, "commit_id": "13b465584e1ca6211a7a306b46841acb7c81eb80", "original_commit_id": "0df93abe6fbaa78ba84e6d4965b887d7a8c6d3e7", "user": {"login": "skrah", "id": 16530421, "avatar_url": "https://avatars1.githubusercontent.com/u/16530421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skrah", "html_url": "https://github.com/skrah", "followers_url": "https://api.github.com/users/skrah/followers", "following_url": "https://api.github.com/users/skrah/following{/other_user}", "gists_url": "https://api.github.com/users/skrah/gists{/gist_id}", "starred_url": "https://api.github.com/users/skrah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skrah/subscriptions", "organizations_url": "https://api.github.com/users/skrah/orgs", "repos_url": "https://api.github.com/users/skrah/repos", "events_url": "https://api.github.com/users/skrah/events{/privacy}", "received_events_url": "https://api.github.com/users/skrah/received_events", "type": "User", "site_admin": false}, "body": "It would return a reference to a local object otherwise:\n\n/home/stefan/libdynd/include/dynd/callable.hpp:160:53: error: returning reference to local temporary object [-Werror,-Wreturn-stack-address]\n    const nd::array &get_arg_types() const { return get_type()->get_pos_types(); }\n", "created_at": "2016-01-29T18:45:21Z", "updated_at": "2016-01-29T18:45:21Z", "html_url": "https://github.com/libdynd/libdynd/pull/903#discussion_r51298240", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/903", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51298240"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/903#discussion_r51298240"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/903"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51298240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51298935", "pull_request_review_id": null, "id": 51298935, "diff_hunk": "@@ -155,9 +155,9 @@ namespace nd {\n \n     std::intptr_t get_narg() const { return get_type()->get_npos(); }\n \n-    const ndt::type &get_arg_type(std::intptr_t i) const { return get_type()->get_pos_type(i); }\n+    const ndt::type get_arg_type(std::intptr_t i) const { return get_type()->get_pos_type(i); }\n \n-    const array &get_arg_types() const { return get_type()->get_pos_types(); }\n+    nd::array get_arg_types() const { return get_type()->get_pos_types(); }", "path": "include/dynd/callable.hpp", "position": 8, "original_position": 8, "commit_id": "13b465584e1ca6211a7a306b46841acb7c81eb80", "original_commit_id": "0df93abe6fbaa78ba84e6d4965b887d7a8c6d3e7", "user": {"login": "insertinterestingnamehere", "id": 1847484, "avatar_url": "https://avatars0.githubusercontent.com/u/1847484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/insertinterestingnamehere", "html_url": "https://github.com/insertinterestingnamehere", "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers", "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}", "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions", "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs", "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos", "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}", "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events", "type": "User", "site_admin": false}, "body": "Yes, that error makes sense since `get_pos_types` doesn't return a const reference either (nor does `get_field_types`). The change would have to be made for all of them.\n", "created_at": "2016-01-29T18:50:17Z", "updated_at": "2016-01-29T18:50:17Z", "html_url": "https://github.com/libdynd/libdynd/pull/903#discussion_r51298935", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/903", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51298935"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/903#discussion_r51298935"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/903"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51298935/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51299657", "pull_request_review_id": null, "id": 51299657, "diff_hunk": "@@ -89,14 +89,22 @@ class DYND_API bytes {\n \n   const bytes operator+(const bytes& rhs)\n   {\n-      bytes result;\n+    bytes result;\n \n-      result.resize(size() + rhs.size());\n+    result.resize(size() + rhs.size());\n \n-      DYND_MEMCPY(result.begin(), begin(), size());\n-      DYND_MEMCPY(result.begin() + size(), rhs.begin(), rhs.size());\n+    DYND_MEMCPY(result.begin(), begin(), size());\n+    DYND_MEMCPY(result.begin() + size(), rhs.begin(), rhs.size());\n \n-      return result;\n+    return result;\n+  }\n+\n+  bytes &operator+=(const bytes& rhs)\n+  {\n+    size_t orig_size = size();\n+    resize(size() + rhs.size());\n+    DYND_MEMCPY(begin() + orig_size, rhs.begin(), rhs.size());\n+    return *this;", "path": "include/dynd/bytes.hpp", "position": 24, "original_position": 24, "commit_id": "8c67647df5e8ea5f250db48bf51e2971e8eda0fe", "original_commit_id": "8c67647df5e8ea5f250db48bf51e2971e8eda0fe", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "It's pretty close, but I think it needs API to distinguish the exponential growth mode, so that can be used appropriately. The ABI is quite a bit different, that's something that needs to be solidified before connecting it with Numba or another JIT. I've made https://github.com/libdynd/libdynd/pull/907 to give one possible way the exponential growth can be expressed, I can turn that into a code PR later if that API looks alright.\n", "created_at": "2016-01-29T18:55:35Z", "updated_at": "2016-01-29T18:55:35Z", "html_url": "https://github.com/libdynd/libdynd/pull/905#discussion_r51299657", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/905", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51299657"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/905#discussion_r51299657"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/905"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51299657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51300071", "pull_request_review_id": null, "id": 51300071, "diff_hunk": "@@ -155,9 +155,9 @@ namespace nd {\n \n     std::intptr_t get_narg() const { return get_type()->get_npos(); }\n \n-    const ndt::type &get_arg_type(std::intptr_t i) const { return get_type()->get_pos_type(i); }\n+    const ndt::type get_arg_type(std::intptr_t i) const { return get_type()->get_pos_type(i); }\n \n-    const array &get_arg_types() const { return get_type()->get_pos_types(); }\n+    nd::array get_arg_types() const { return get_type()->get_pos_types(); }", "path": "include/dynd/callable.hpp", "position": 8, "original_position": 8, "commit_id": "13b465584e1ca6211a7a306b46841acb7c81eb80", "original_commit_id": "0df93abe6fbaa78ba84e6d4965b887d7a8c6d3e7", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "We might want to change these to return a const reference to the internal std::vector instead? Implicitly doing a copy of the whole array when get_arg_types() and other API is called feels like it adds hidden performance traps.\n", "created_at": "2016-01-29T18:58:36Z", "updated_at": "2016-01-29T18:58:36Z", "html_url": "https://github.com/libdynd/libdynd/pull/903#discussion_r51300071", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/903", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51300071"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/903#discussion_r51300071"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/903"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51300071/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51300263", "pull_request_review_id": null, "id": 51300263, "diff_hunk": "@@ -145,13 +147,13 @@ namespace ndt {\n     }\n \n     /** Makes a tuple type with the specified types */\n-    static type make(const nd::array &field_types, bool variadic = false)\n+    static type make(std::vector<type> field_types, bool variadic = false)\n     {\n       return type(new tuple_type(field_types, variadic), false);", "path": "include/dynd/types/tuple_type.hpp", "position": 55, "original_position": 55, "commit_id": "13b465584e1ca6211a7a306b46841acb7c81eb80", "original_commit_id": "13b465584e1ca6211a7a306b46841acb7c81eb80", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "Should maybe be `new tuple_type(std::move(field_types), ...)`, to avoid the extra copy.\n", "created_at": "2016-01-29T19:00:03Z", "updated_at": "2016-01-29T19:00:03Z", "html_url": "https://github.com/libdynd/libdynd/pull/903#discussion_r51300263", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/903", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51300263"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/903#discussion_r51300263"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/903"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51300263/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51300399", "pull_request_review_id": null, "id": 51300399, "diff_hunk": "@@ -15,11 +15,11 @@\n using namespace std;\n using namespace dynd;\n \n-ndt::tuple_type::tuple_type(type_id_t type_id, const nd::array &field_types, flags_type flags, bool layout_in_arrmeta,\n+ndt::tuple_type::tuple_type(type_id_t type_id, std::vector<type> field_types, flags_type flags, bool layout_in_arrmeta,\n                             bool variadic)\n     : base_type(type_id, variadic ? kind_kind : tuple_kind, 0, 1,\n                 flags | type_flag_indexable | (variadic ? type_flag_symbolic : 0), 0, 0, 0),\n-      m_field_count(field_types.get_dim_size()), m_field_types(field_types),\n+      m_field_count(field_types.size()), m_field_types(field_types),", "path": "src/dynd/types/tuple_type.cpp", "position": 10, "original_position": 10, "commit_id": "13b465584e1ca6211a7a306b46841acb7c81eb80", "original_commit_id": "13b465584e1ca6211a7a306b46841acb7c81eb80", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "Probably should be `m_field_types(std::move(field_types))`\n", "created_at": "2016-01-29T19:01:10Z", "updated_at": "2016-01-29T19:01:10Z", "html_url": "https://github.com/libdynd/libdynd/pull/903#discussion_r51300399", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/903", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51300399"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/903#discussion_r51300399"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/903"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51300399/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51300602", "pull_request_review_id": null, "id": 51300602, "diff_hunk": "@@ -58,7 +58,7 @@ ndt::tuple_type::tuple_type(type_id_t type_id, const nd::array &field_types, fla\n   m_arrmeta_offsets.flag_as_immutable();\n }\n \n-ndt::tuple_type::tuple_type(const nd::array &field_types, bool variadic)\n+ndt::tuple_type::tuple_type(std::vector<type> field_types, bool variadic)\n     : tuple_type(tuple_id, field_types, type_flag_none, true, variadic)", "path": "src/dynd/types/tuple_type.cpp", "position": 20, "original_position": 20, "commit_id": "13b465584e1ca6211a7a306b46841acb7c81eb80", "original_commit_id": "13b465584e1ca6211a7a306b46841acb7c81eb80", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "`std::move(field_types)` here too, and also anywhere else the by-value std::vector<type> parameter is.\n", "created_at": "2016-01-29T19:02:53Z", "updated_at": "2016-01-29T19:02:53Z", "html_url": "https://github.com/libdynd/libdynd/pull/903#discussion_r51300602", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/903", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51300602"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/903#discussion_r51300602"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/903"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51300602/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51300680", "pull_request_review_id": null, "id": 51300680, "diff_hunk": "@@ -155,9 +155,9 @@ namespace nd {\n \n     std::intptr_t get_narg() const { return get_type()->get_npos(); }\n \n-    const ndt::type &get_arg_type(std::intptr_t i) const { return get_type()->get_pos_type(i); }\n+    const ndt::type get_arg_type(std::intptr_t i) const { return get_type()->get_pos_type(i); }\n \n-    const array &get_arg_types() const { return get_type()->get_pos_types(); }\n+    nd::array get_arg_types() const { return get_type()->get_pos_types(); }", "path": "include/dynd/callable.hpp", "position": 8, "original_position": 8, "commit_id": "13b465584e1ca6211a7a306b46841acb7c81eb80", "original_commit_id": "0df93abe6fbaa78ba84e6d4965b887d7a8c6d3e7", "user": {"login": "skrah", "id": 16530421, "avatar_url": "https://avatars1.githubusercontent.com/u/16530421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skrah", "html_url": "https://github.com/skrah", "followers_url": "https://api.github.com/users/skrah/followers", "following_url": "https://api.github.com/users/skrah/following{/other_user}", "gists_url": "https://api.github.com/users/skrah/gists{/gist_id}", "starred_url": "https://api.github.com/users/skrah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skrah/subscriptions", "organizations_url": "https://api.github.com/users/skrah/orgs", "repos_url": "https://api.github.com/users/skrah/repos", "events_url": "https://api.github.com/users/skrah/events{/privacy}", "received_events_url": "https://api.github.com/users/skrah/received_events", "type": "User", "site_admin": false}, "body": "Yes, I'll try.  In general there are still many conversions from std::vector -> nd::array because all the consumers expect an nd::array.  Can these be eliminated in the end?\n", "created_at": "2016-01-29T19:03:26Z", "updated_at": "2016-01-29T19:03:26Z", "html_url": "https://github.com/libdynd/libdynd/pull/903#discussion_r51300680", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/903", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51300680"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/903#discussion_r51300680"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/903"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51300680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51300934", "pull_request_review_id": null, "id": 51300934, "diff_hunk": "@@ -155,9 +155,9 @@ namespace nd {\n \n     std::intptr_t get_narg() const { return get_type()->get_npos(); }\n \n-    const ndt::type &get_arg_type(std::intptr_t i) const { return get_type()->get_pos_type(i); }\n+    const ndt::type get_arg_type(std::intptr_t i) const { return get_type()->get_pos_type(i); }\n \n-    const array &get_arg_types() const { return get_type()->get_pos_types(); }\n+    nd::array get_arg_types() const { return get_type()->get_pos_types(); }", "path": "include/dynd/callable.hpp", "position": 8, "original_position": 8, "commit_id": "13b465584e1ca6211a7a306b46841acb7c81eb80", "original_commit_id": "0df93abe6fbaa78ba84e6d4965b887d7a8c6d3e7", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "Yes, I think those will generally go away, and consumers changed to expect `std::vector<T>`.\n", "created_at": "2016-01-29T19:05:21Z", "updated_at": "2016-01-29T19:05:21Z", "html_url": "https://github.com/libdynd/libdynd/pull/903#discussion_r51300934", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/903", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51300934"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/903#discussion_r51300934"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/903"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51300934/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51305816", "pull_request_review_id": null, "id": 51305816, "diff_hunk": "@@ -155,9 +155,9 @@ namespace nd {\n \n     std::intptr_t get_narg() const { return get_type()->get_npos(); }\n \n-    const ndt::type &get_arg_type(std::intptr_t i) const { return get_type()->get_pos_type(i); }\n+    const ndt::type get_arg_type(std::intptr_t i) const { return get_type()->get_pos_type(i); }\n \n-    const array &get_arg_types() const { return get_type()->get_pos_types(); }\n+    nd::array get_arg_types() const { return get_type()->get_pos_types(); }", "path": "include/dynd/callable.hpp", "position": 8, "original_position": 8, "commit_id": "13b465584e1ca6211a7a306b46841acb7c81eb80", "original_commit_id": "0df93abe6fbaa78ba84e6d4965b887d7a8c6d3e7", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "Nothing prevents the tuple from disappearing, that's true. It's the responsibility of the code getting that property to make sure the lifetime of that reference is not longer than the lifetime of the object it came from.\n\nThis is pretty common - e.g. in std::vector, operator[] returns a `T&` reference with exactly the same considerations.\n", "created_at": "2016-01-29T19:41:08Z", "updated_at": "2016-01-29T19:41:25Z", "html_url": "https://github.com/libdynd/libdynd/pull/903#discussion_r51305816", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/903", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51305816"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/903#discussion_r51305816"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/903"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51305816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51305542", "pull_request_review_id": null, "id": 51305542, "diff_hunk": "@@ -155,9 +155,9 @@ namespace nd {\n \n     std::intptr_t get_narg() const { return get_type()->get_npos(); }\n \n-    const ndt::type &get_arg_type(std::intptr_t i) const { return get_type()->get_pos_type(i); }\n+    const ndt::type get_arg_type(std::intptr_t i) const { return get_type()->get_pos_type(i); }\n \n-    const array &get_arg_types() const { return get_type()->get_pos_types(); }\n+    nd::array get_arg_types() const { return get_type()->get_pos_types(); }", "path": "include/dynd/callable.hpp", "position": 8, "original_position": 8, "commit_id": "13b465584e1ca6211a7a306b46841acb7c81eb80", "original_commit_id": "0df93abe6fbaa78ba84e6d4965b887d7a8c6d3e7", "user": {"login": "skrah", "id": 16530421, "avatar_url": "https://avatars1.githubusercontent.com/u/16530421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skrah", "html_url": "https://github.com/skrah", "followers_url": "https://api.github.com/users/skrah/followers", "following_url": "https://api.github.com/users/skrah/following{/other_user}", "gists_url": "https://api.github.com/users/skrah/gists{/gist_id}", "starred_url": "https://api.github.com/users/skrah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skrah/subscriptions", "organizations_url": "https://api.github.com/users/skrah/orgs", "repos_url": "https://api.github.com/users/skrah/repos", "events_url": "https://api.github.com/users/skrah/events{/privacy}", "received_events_url": "https://api.github.com/users/skrah/received_events", "type": "User", "site_admin": false}, "body": "Okay.  Regarding the const reference to the internal std::vector:  I'm not sure yet what the ownership invariants are.  If everything is a reference to the internal vector of the tuple type, what prevents the tuple from disappearing while something still holds a reference (I'm usually programming in C, this might be an elementary thing in C++).\n\nIs it an option to use only the move semantics you mentioned below, i.e. not use references at all?\n", "created_at": "2016-01-29T19:38:34Z", "updated_at": "2016-01-29T19:43:39Z", "html_url": "https://github.com/libdynd/libdynd/pull/903#discussion_r51305542", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/903", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51305542"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/903#discussion_r51305542"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/903"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51305542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51307012", "pull_request_review_id": null, "id": 51307012, "diff_hunk": "@@ -155,9 +155,9 @@ namespace nd {\n \n     std::intptr_t get_narg() const { return get_type()->get_npos(); }\n \n-    const ndt::type &get_arg_type(std::intptr_t i) const { return get_type()->get_pos_type(i); }\n+    const ndt::type get_arg_type(std::intptr_t i) const { return get_type()->get_pos_type(i); }\n \n-    const array &get_arg_types() const { return get_type()->get_pos_types(); }\n+    nd::array get_arg_types() const { return get_type()->get_pos_types(); }", "path": "include/dynd/callable.hpp", "position": 8, "original_position": 8, "commit_id": "13b465584e1ca6211a7a306b46841acb7c81eb80", "original_commit_id": "0df93abe6fbaa78ba84e6d4965b887d7a8c6d3e7", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "Re: the move semantics, for property access using const references is better, as that way the data doesn't have to be copied. To use move semantics, a copy of that internal data would be what is moved, and it's not good to have such an expensive operation in there for just property access.\n", "created_at": "2016-01-29T19:50:22Z", "updated_at": "2016-01-29T19:50:22Z", "html_url": "https://github.com/libdynd/libdynd/pull/903#discussion_r51307012", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/903", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51307012"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/903#discussion_r51307012"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/903"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51307012/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51351390", "pull_request_review_id": null, "id": 51351390, "diff_hunk": "@@ -145,13 +147,13 @@ namespace ndt {\n     }\n \n     /** Makes a tuple type with the specified types */\n-    static type make(const nd::array &field_types, bool variadic = false)\n+    static type make(std::vector<type> field_types, bool variadic = false)\n     {\n       return type(new tuple_type(field_types, variadic), false);", "path": "include/dynd/types/tuple_type.hpp", "position": 55, "original_position": 55, "commit_id": "13b465584e1ca6211a7a306b46841acb7c81eb80", "original_commit_id": "13b465584e1ca6211a7a306b46841acb7c81eb80", "user": {"login": "skrah", "id": 16530421, "avatar_url": "https://avatars1.githubusercontent.com/u/16530421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skrah", "html_url": "https://github.com/skrah", "followers_url": "https://api.github.com/users/skrah/followers", "following_url": "https://api.github.com/users/skrah/following{/other_user}", "gists_url": "https://api.github.com/users/skrah/gists{/gist_id}", "starred_url": "https://api.github.com/users/skrah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skrah/subscriptions", "organizations_url": "https://api.github.com/users/skrah/orgs", "repos_url": "https://api.github.com/users/skrah/repos", "events_url": "https://api.github.com/users/skrah/events{/privacy}", "received_events_url": "https://api.github.com/users/skrah/received_events", "type": "User", "site_admin": false}, "body": "Is it worth changing the 'make' signature to take an rvalue reference?\n\n/*\\* Makes a tuple type with the specified types */\nstatic type make(std::vector<type> &&field_types, bool variadic = false)\n{\n  return type(new tuple_type(std::move(field_types), variadic), false);\n}\n\nThe drawback is that this would require quite a bit of code changes, like https://github.com/libdynd/libdynd/blob/master/src/dynd/types/datashape_parser.cpp#L953 ::\n\n  ndt::type pos = ndt::tuple_type::make(std::move(pos_arg_types));\n  ndt::type kwds = ndt::struct_type::make(kw_names, kw_arg_types);\n  ndt::type result_tp = ndt::tuple_type::make(std::move({pos, kwds}));\n", "created_at": "2016-01-30T21:37:22Z", "updated_at": "2016-01-30T21:37:22Z", "html_url": "https://github.com/libdynd/libdynd/pull/903#discussion_r51351390", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/903", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51351390"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/903#discussion_r51351390"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/903"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51351390/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51366639", "pull_request_review_id": null, "id": 51366639, "diff_hunk": "@@ -145,13 +147,13 @@ namespace ndt {\n     }\n \n     /** Makes a tuple type with the specified types */\n-    static type make(const nd::array &field_types, bool variadic = false)\n+    static type make(std::vector<type> field_types, bool variadic = false)\n     {\n       return type(new tuple_type(field_types, variadic), false);", "path": "include/dynd/types/tuple_type.hpp", "position": 55, "original_position": 55, "commit_id": "13b465584e1ca6211a7a306b46841acb7c81eb80", "original_commit_id": "13b465584e1ca6211a7a306b46841acb7c81eb80", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Eventually, yes, but I wouldn't worry about these kind of optimizations for now. Let's get our code structure into a good place, then we can optimize that kind of thing.\n", "created_at": "2016-01-31T20:19:29Z", "updated_at": "2016-01-31T20:19:29Z", "html_url": "https://github.com/libdynd/libdynd/pull/903#discussion_r51366639", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/903", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51366639"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/903#discussion_r51366639"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/903"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51366639/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51367135", "pull_request_review_id": null, "id": 51367135, "diff_hunk": "@@ -145,13 +147,13 @@ namespace ndt {\n     }\n \n     /** Makes a tuple type with the specified types */\n-    static type make(const nd::array &field_types, bool variadic = false)\n+    static type make(std::vector<type> field_types, bool variadic = false)\n     {\n       return type(new tuple_type(field_types, variadic), false);", "path": "include/dynd/types/tuple_type.hpp", "position": 55, "original_position": 55, "commit_id": "13b465584e1ca6211a7a306b46841acb7c81eb80", "original_commit_id": "13b465584e1ca6211a7a306b46841acb7c81eb80", "user": {"login": "skrah", "id": 16530421, "avatar_url": "https://avatars1.githubusercontent.com/u/16530421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skrah", "html_url": "https://github.com/skrah", "followers_url": "https://api.github.com/users/skrah/followers", "following_url": "https://api.github.com/users/skrah/following{/other_user}", "gists_url": "https://api.github.com/users/skrah/gists{/gist_id}", "starred_url": "https://api.github.com/users/skrah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skrah/subscriptions", "organizations_url": "https://api.github.com/users/skrah/orgs", "repos_url": "https://api.github.com/users/skrah/repos", "events_url": "https://api.github.com/users/skrah/events{/privacy}", "received_events_url": "https://api.github.com/users/skrah/received_events", "type": "User", "site_admin": false}, "body": "Are you also okay with leaving everything a const std::vector<type> for now and\ndo all the std::moves() later?  -- I've experimented with some small programs\nand clang/gcc produced exactly the same asm for move semantics and const-only\nvectors (it may be different of course for the actual code here).\n", "created_at": "2016-01-31T20:49:20Z", "updated_at": "2016-01-31T20:49:20Z", "html_url": "https://github.com/libdynd/libdynd/pull/903#discussion_r51367135", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/903", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51367135"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/903#discussion_r51367135"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/903"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51367135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51367212", "pull_request_review_id": null, "id": 51367212, "diff_hunk": "@@ -145,13 +147,13 @@ namespace ndt {\n     }\n \n     /** Makes a tuple type with the specified types */\n-    static type make(const nd::array &field_types, bool variadic = false)\n+    static type make(std::vector<type> field_types, bool variadic = false)\n     {\n       return type(new tuple_type(field_types, variadic), false);", "path": "include/dynd/types/tuple_type.hpp", "position": 55, "original_position": 55, "commit_id": "13b465584e1ca6211a7a306b46841acb7c81eb80", "original_commit_id": "13b465584e1ca6211a7a306b46841acb7c81eb80", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Yes, I'm okay with that. I do think we should do const std::vector & now, because that makes a lot of things easier (with regard to passing temporaries and the like).\n", "created_at": "2016-01-31T20:55:29Z", "updated_at": "2016-01-31T20:55:29Z", "html_url": "https://github.com/libdynd/libdynd/pull/903#discussion_r51367212", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/903", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51367212"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/903#discussion_r51367212"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/903"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51367212/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51367323", "pull_request_review_id": null, "id": 51367323, "diff_hunk": "@@ -145,13 +147,13 @@ namespace ndt {\n     }\n \n     /** Makes a tuple type with the specified types */\n-    static type make(const nd::array &field_types, bool variadic = false)\n+    static type make(std::vector<type> field_types, bool variadic = false)\n     {\n       return type(new tuple_type(field_types, variadic), false);", "path": "include/dynd/types/tuple_type.hpp", "position": 55, "original_position": 55, "commit_id": "13b465584e1ca6211a7a306b46841acb7c81eb80", "original_commit_id": "13b465584e1ca6211a7a306b46841acb7c81eb80", "user": {"login": "skrah", "id": 16530421, "avatar_url": "https://avatars1.githubusercontent.com/u/16530421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skrah", "html_url": "https://github.com/skrah", "followers_url": "https://api.github.com/users/skrah/followers", "following_url": "https://api.github.com/users/skrah/following{/other_user}", "gists_url": "https://api.github.com/users/skrah/gists{/gist_id}", "starred_url": "https://api.github.com/users/skrah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skrah/subscriptions", "organizations_url": "https://api.github.com/users/skrah/orgs", "repos_url": "https://api.github.com/users/skrah/repos", "events_url": "https://api.github.com/users/skrah/events{/privacy}", "received_events_url": "https://api.github.com/users/skrah/received_events", "type": "User", "site_admin": false}, "body": "Ah yes, for returning vectors from e.g. get_field_types() I have const std::vector & everywhere now, for constructing tuples I have const std::vector.\n", "created_at": "2016-01-31T21:01:52Z", "updated_at": "2016-01-31T21:01:52Z", "html_url": "https://github.com/libdynd/libdynd/pull/903#discussion_r51367323", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/903", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51367323"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/903#discussion_r51367323"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/903"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51367323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51368393", "pull_request_review_id": null, "id": 51368393, "diff_hunk": "@@ -145,13 +147,13 @@ namespace ndt {\n     }\n \n     /** Makes a tuple type with the specified types */\n-    static type make(const nd::array &field_types, bool variadic = false)\n+    static type make(std::vector<type> field_types, bool variadic = false)\n     {\n       return type(new tuple_type(field_types, variadic), false);", "path": "include/dynd/types/tuple_type.hpp", "position": 55, "original_position": 55, "commit_id": "13b465584e1ca6211a7a306b46841acb7c81eb80", "original_commit_id": "13b465584e1ca6211a7a306b46841acb7c81eb80", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "If I understand you correctly, constructing tuples can also be `const std::vector &`, rather then `const std::vector`. It just can't be stored as a reference `&. So the constructor can take a` const std::vector &`, but store it as a`std::vector`or`const std::vector`.\n", "created_at": "2016-01-31T22:05:24Z", "updated_at": "2016-01-31T22:05:24Z", "html_url": "https://github.com/libdynd/libdynd/pull/903#discussion_r51368393", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/903", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51368393"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/903#discussion_r51368393"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/903"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51368393/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51429244", "pull_request_review_id": null, "id": 51429244, "diff_hunk": "@@ -145,13 +147,13 @@ namespace ndt {\n     }\n \n     /** Makes a tuple type with the specified types */\n-    static type make(const nd::array &field_types, bool variadic = false)\n+    static type make(std::vector<type> field_types, bool variadic = false)\n     {\n       return type(new tuple_type(field_types, variadic), false);", "path": "include/dynd/types/tuple_type.hpp", "position": 55, "original_position": 55, "commit_id": "13b465584e1ca6211a7a306b46841acb7c81eb80", "original_commit_id": "13b465584e1ca6211a7a306b46841acb7c81eb80", "user": {"login": "skrah", "id": 16530421, "avatar_url": "https://avatars1.githubusercontent.com/u/16530421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skrah", "html_url": "https://github.com/skrah", "followers_url": "https://api.github.com/users/skrah/followers", "following_url": "https://api.github.com/users/skrah/following{/other_user}", "gists_url": "https://api.github.com/users/skrah/gists{/gist_id}", "starred_url": "https://api.github.com/users/skrah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skrah/subscriptions", "organizations_url": "https://api.github.com/users/skrah/orgs", "repos_url": "https://api.github.com/users/skrah/repos", "events_url": "https://api.github.com/users/skrah/events{/privacy}", "received_events_url": "https://api.github.com/users/skrah/received_events", "type": "User", "site_admin": false}, "body": "You are right (I was still thinking in C).\n", "created_at": "2016-02-01T15:13:22Z", "updated_at": "2016-02-01T15:13:22Z", "html_url": "https://github.com/libdynd/libdynd/pull/903#discussion_r51429244", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/903", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51429244"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/903#discussion_r51429244"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/903"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51429244/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51477122", "pull_request_review_id": null, "id": 51477122, "diff_hunk": "@@ -154,18 +154,16 @@ bool ndt::is_valid_typevar_name(const char *begin, const char *end)\n   }\n }\n \n-nd::array ndt::make_typevar_range(const char *name, intptr_t count)\n+const std::vector<ndt::type> ndt::make_typevar_range(const char *name, intptr_t count)\n {", "path": "src/dynd/types/typevar_type.cpp", "position": null, "original_position": 6, "commit_id": "cacd392844758a3f0e1252984f9846b9520b2de7", "original_commit_id": "2d8d80b6276182255635859b0c03bceec72d0176", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Should be `std::vector<ndt::type>`, I don't think `const` on return makes sense. (Later on, we'll move this to `&&` anyway.)\n", "created_at": "2016-02-01T20:40:17Z", "updated_at": "2016-02-01T22:18:48Z", "html_url": "https://github.com/libdynd/libdynd/pull/912#discussion_r51477122", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/912", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51477122"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/912#discussion_r51477122"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/912"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51477122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51477224", "pull_request_review_id": null, "id": 51477224, "diff_hunk": "@@ -518,8 +516,8 @@ bool ndt::tuple_type::match(const char *arrmeta, const type &candidate_tp, const\n std::map<std::string, nd::callable> ndt::tuple_type::get_dynamic_type_properties() const\n {\n   std::map<std::string, nd::callable> properties;\n-  properties[\"field_types\"] = nd::callable::make<nd::get_then_copy_kernel<tuple_type, &tuple_type::get_field_types>>(\n-      ndt::callable_type::make(m_field_types.get_type(), ndt::tuple_type::make(),\n+  properties[\"field_types\"] = nd::callable::make<nd::get_then_copy_kernel2<tuple_type, &tuple_type::get_field_types>>(\n+      ndt::callable_type::make(this->get_type(), ndt::tuple_type::make(),\n                                ndt::struct_type::make({\"self\"}, {ndt::make_type<ndt::type_type>()})));\n   properties[\"metadata_offsets\"] =\n       nd::callable::make<nd::get_then_copy_kernel<tuple_type, &tuple_type::get_arrmeta_offsets>>(", "path": "src/dynd/types/tuple_type.cpp", "position": null, "original_position": 102, "commit_id": "cacd392844758a3f0e1252984f9846b9520b2de7", "original_commit_id": "2d8d80b6276182255635859b0c03bceec72d0176", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "`this->` is unnecessary anyway, you can drop it.\n", "created_at": "2016-02-01T20:41:09Z", "updated_at": "2016-02-01T22:18:48Z", "html_url": "https://github.com/libdynd/libdynd/pull/912#discussion_r51477224", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/912", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51477224"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/912#discussion_r51477224"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/912"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51477224/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51477275", "pull_request_review_id": null, "id": 51477275, "diff_hunk": "@@ -27,15 +27,16 @@ using namespace dynd;\n /**\n  * Substitutes the field types for contiguous array of types\n  */\n-static nd::array substitute_type_array(const nd::array &type_array, const std::map<std::string, ndt::type> &typevars,\n-                                       bool concrete)\n+static const std::vector<ndt::type> substitute_type_array(const nd::array &type_array,\n+                                                          const std::map<std::string, ndt::type> &typevars,\n+                                                          bool concrete)\n {", "path": "src/dynd/types/substitute_typevars.cpp", "position": null, "original_position": 9, "commit_id": "cacd392844758a3f0e1252984f9846b9520b2de7", "original_commit_id": "2d8d80b6276182255635859b0c03bceec72d0176", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Let's remove the `const` for now.\n", "created_at": "2016-02-01T20:41:41Z", "updated_at": "2016-02-01T22:18:48Z", "html_url": "https://github.com/libdynd/libdynd/pull/912#discussion_r51477275", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/912", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51477275"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/912#discussion_r51477275"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/912"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51477275/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51477298", "pull_request_review_id": null, "id": 51477298, "diff_hunk": "@@ -400,11 +402,10 @@ namespace nd {\n \n } // namespace dynd\n \n-static nd::array make_self_types()\n+static const std::vector<ndt::type> make_self_types()\n {", "path": "src/dynd/types/struct_type.cpp", "position": null, "original_position": 104, "commit_id": "cacd392844758a3f0e1252984f9846b9520b2de7", "original_commit_id": "2d8d80b6276182255635859b0c03bceec72d0176", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Let's remove the `const` for now.\n", "created_at": "2016-02-01T20:41:54Z", "updated_at": "2016-02-01T22:18:48Z", "html_url": "https://github.com/libdynd/libdynd/pull/912#discussion_r51477298", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/912", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51477298"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/912#discussion_r51477298"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/912"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51477298/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51330226", "pull_request_review_id": null, "id": 51330226, "diff_hunk": "@@ -0,0 +1,42 @@\n+//\n+// Copyright (C) 2011-15 DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+// String count kernel\n+\n+#pragma once\n+\n+#include <dynd/string.hpp>\n+#include <dynd/callable.hpp>\n+#include <dynd/kernels/kernel_builder.hpp>\n+#include <dynd/types/string_type.hpp>\n+\n+namespace dynd {\n+  namespace nd {\n+\n+    struct string_count_kernel\n+      : base_kernel<string_count_kernel, 2> {\n+\n+      void single(char *dst, char *const *src) {\n+        intptr_t *d = reinterpret_cast<intptr_t *>(dst);\n+        const dynd::string *const *s = reinterpret_cast<const dynd::string *const *>(src);\n+\n+        *d = dynd::string_count(s[0], s[1]);\n+      }\n+    };\n+\n+  } // namespace nd\n+\n+  namespace ndt {\n+\n+    template<>\n+    struct traits<dynd::nd::string_count_kernel> {\n+      /* TODO: Rather than int64_id, I really want the id that corresponds to\n+               intptr_t... */", "path": "include/dynd/kernels/string_count_kernel.hpp", "position": null, "original_position": 36, "commit_id": "c9183d191592d67fb40919c0b5d4f0ed252f4258", "original_commit_id": "ed94956e90bf7efb40489842e5fe41fc67908012", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "I think what you want is `ndt::make_type<intptr_t>()` instead of `ndt::type(int64_id)`.\n", "created_at": "2016-01-29T23:30:29Z", "updated_at": "2016-02-02T15:56:40Z", "html_url": "https://github.com/libdynd/libdynd/pull/910#discussion_r51330226", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/910", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51330226"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/910#discussion_r51330226"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/910"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51330226/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51366710", "pull_request_review_id": null, "id": 51366710, "diff_hunk": "@@ -14,27 +15,6 @@\n namespace dynd {\n   namespace nd {\n ", "path": "include/dynd/kernels/string_concat_kernel.hpp", "position": 11, "original_position": 11, "commit_id": "c9183d191592d67fb40919c0b5d4f0ed252f4258", "original_commit_id": "ed94956e90bf7efb40489842e5fe41fc67908012", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Okay, so you probably only need one of {`#include <dynd/string.hpp>`, `#include <dynd/types/string_type.hpp>`} and `#include <dynd/kernels/base_kernel.hpp>` here. We normally don't include kernel_builder directly.\n", "created_at": "2016-01-31T20:22:57Z", "updated_at": "2016-02-02T15:56:40Z", "html_url": "https://github.com/libdynd/libdynd/pull/910#discussion_r51366710", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/910", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51366710"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/910#discussion_r51366710"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/910"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51366710/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51366729", "pull_request_review_id": null, "id": 51366729, "diff_hunk": "@@ -42,7 +22,7 @@ namespace dynd {\n         dynd::string *d = reinterpret_cast<dynd::string *>(dst);\n         const dynd::string *const *s = reinterpret_cast<const dynd::string *const *>(src);\n \n-        detail::concat_one_string(2, d, s);\n+        string_concat(2, d, s);\n       }\n     };\n ", "path": "include/dynd/kernels/string_concat_kernel.hpp", "position": null, "original_position": 44, "commit_id": "c9183d191592d67fb40919c0b5d4f0ed252f4258", "original_commit_id": "ed94956e90bf7efb40489842e5fe41fc67908012", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "I'd probably just call `string_concat(2, reinterpret_cast<string *>(dst), reinterpret_cast<string *>(src[0]));` and skip the temporaries, but it's up to you. Because we're already in the `dynd` namespace, `string` implicitly refers to `dynd::string`.\n", "created_at": "2016-01-31T20:24:19Z", "updated_at": "2016-02-02T15:56:40Z", "html_url": "https://github.com/libdynd/libdynd/pull/910#discussion_r51366729", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/910", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51366729"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/910#discussion_r51366729"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/910"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51366729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51366742", "pull_request_review_id": null, "id": 51366742, "diff_hunk": "@@ -0,0 +1,42 @@\n+//\n+// Copyright (C) 2011-15 DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+// String count kernel\n+\n+#pragma once\n+\n+#include <dynd/string.hpp>\n+#include <dynd/callable.hpp>\n+#include <dynd/kernels/kernel_builder.hpp>\n+#include <dynd/types/string_type.hpp>\n+\n+namespace dynd {\n+  namespace nd {\n+\n+    struct string_count_kernel\n+      : base_kernel<string_count_kernel, 2> {\n+\n+      void single(char *dst, char *const *src) {\n+        intptr_t *d = reinterpret_cast<intptr_t *>(dst);\n+        const dynd::string *const *s = reinterpret_cast<const dynd::string *const *>(src);\n+\n+        *d = dynd::string_count(s[0], s[1]);\n+      }\n+    };\n+\n+  } // namespace nd\n+\n+  namespace ndt {\n+\n+    template<>\n+    struct traits<dynd::nd::string_count_kernel> {\n+      /* TODO: Rather than int64_id, I really want the id that corresponds to\n+               intptr_t... */", "path": "include/dynd/kernels/string_count_kernel.hpp", "position": null, "original_position": 36, "commit_id": "c9183d191592d67fb40919c0b5d4f0ed252f4258", "original_commit_id": "ed94956e90bf7efb40489842e5fe41fc67908012", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "What Mark said above.\n", "created_at": "2016-01-31T20:25:16Z", "updated_at": "2016-02-02T15:56:40Z", "html_url": "https://github.com/libdynd/libdynd/pull/910#discussion_r51366742", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/910", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51366742"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/910#discussion_r51366742"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/910"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51366742/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51366759", "pull_request_review_id": null, "id": 51366759, "diff_hunk": "@@ -8,11 +8,52 @@\n #include <dynd/callable.hpp>\n \n namespace dynd {\n-namespace nd {\n \n-  extern DYND_API struct DYND_API string_concatenation : declfunc<string_concatenation> {\n-    static callable make();\n-  } string_concatenation;\n+  /*\n+    Concatenates `nop` strings in the `s` array, storing the result in\n+    `d`\n+  */\n+  void string_concat(size_t nop, dynd::string *d, const dynd::string *const *s);\n \n-} // namespace dynd::nd\n+  /*\n+    Returns the number of times needle appears in haystack.\n+  */\n+  intptr_t string_count(const dynd::string *const haystack,\n+                        const dynd::string *const needle);\n+\n+  /*\n+    Returns byte index of the first occurrence of needle in haystack.\n+    Returns -1 if not found.\n+  */\n+  intptr_t string_find(const dynd::string *const haystack,\n+                       const dynd::string *const needle);\n+\n+  /*\n+    In string `src`, replace all non-overlapping appearances of\n+    `old_str` with `new_str`, storing the result in `dst`.\n+  */\n+  void string_replace(dynd::string *const dst,\n+                      const dynd::string *const src,\n+                      const dynd::string *const old_str,\n+                      const dynd::string *const new_str);\n+", "path": "include/dynd/string.hpp", "position": null, "original_position": 37, "commit_id": "c9183d191592d67fb40919c0b5d4f0ed252f4258", "original_commit_id": "ed94956e90bf7efb40489842e5fe41fc67908012", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "In terms of API design, these functions should probably take references to `dynd::string` or something. It would be nice if these functions made sense and were usable independently of their corresponding kernels -- e.g., so users could apply them in their own DyND functions.\n", "created_at": "2016-01-31T20:26:30Z", "updated_at": "2016-02-02T15:56:40Z", "html_url": "https://github.com/libdynd/libdynd/pull/910#discussion_r51366759", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/910", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51366759"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/910#discussion_r51366759"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/910"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51366759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51366769", "pull_request_review_id": null, "id": 51366769, "diff_hunk": "@@ -5,14 +5,358 @@\n \n #include <dynd/string.hpp>\n #include <dynd/kernels/string_concat_kernel.hpp>\n+#include <dynd/kernels/string_count_kernel.hpp>\n+#include <dynd/kernels/string_find_kernel.hpp>\n+#include <dynd/kernels/string_replace_kernel.hpp>\n #include <dynd/func/elwise.hpp>\n \n using namespace std;\n using namespace dynd;\n \n+\n+////////////////////////////////////////////////////////////\n+// String algorithms\n+\n+\n+void dynd::string_concat(size_t nop, dynd::string *d, const dynd::string *const *s)\n+{\n+  // Get the size of the concatenated string\n+  size_t size = 0;\n+  for (size_t i = 0; i != nop; ++i) {\n+    size += (s[i]->end() - s[i]->begin());\n+  }\n+\n+  // Allocate the output\n+  d->resize(size);\n+  // Copy the string data\n+  char *dst = d->begin();\n+  for (size_t i = 0; i != nop; ++i) {\n+    size_t op_size = (s[i]->end() - s[i]->begin());\n+    DYND_MEMCPY(dst, s[i]->begin(), op_size);\n+    dst += op_size;\n+  }\n+}\n+\n+\n+template<class SelfType>\n+struct string_search_base {\n+  inline void bloom_add(uint64_t &mask, const char ch)\n+  {\n+    mask |= 1UL << ((ch) & (64 - 1));\n+  }\n+\n+  inline uint64_t bloom(const uint64_t &mask, const char ch)\n+  {\n+    return mask & (1UL << ((ch) & (64 - 1)));\n+  }\n+\n+  /* Special case path where the needle is only a single character.\n+     According to effbot's numbers, for haystacks < 10 characters, a\n+     naive loop is fastest.  Larger than that, using POSIX `memchr` is\n+     faster. */\n+  inline void find_1char(const char *haystack, size_t n, char needle)\n+  {\n+    SelfType *self = (SelfType *)this;\n+\n+    if (n <= 10) {\n+      for (size_t i = 0; i < n; ++i) {\n+        if (haystack[i] == needle) {\n+          if (self->handle_match(i)) {\n+            return;\n+          }\n+        }\n+      }\n+    } else {\n+      const char *s = haystack;\n+      while (s < haystack + n) {\n+        void *candidate = memchr((void *)s, needle, n);\n+        if (candidate == NULL) {\n+          return;\n+        }\n+        s = (const char *)candidate;\n+        if (self->handle_match(s - haystack)) {\n+          return;\n+        }\n+        s++;\n+      }\n+    }\n+  }\n+", "path": "src/dynd/string.cpp", "position": null, "original_position": 80, "commit_id": "c9183d191592d67fb40919c0b5d4f0ed252f4258", "original_commit_id": "ed94956e90bf7efb40489842e5fe41fc67908012", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "`inline` is actually implicit for any methods in a class or struct, so you can drop it.\n", "created_at": "2016-01-31T20:27:15Z", "updated_at": "2016-02-02T15:56:40Z", "html_url": "https://github.com/libdynd/libdynd/pull/910#discussion_r51366769", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/910", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51366769"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/910#discussion_r51366769"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/910"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51366769/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51366816", "pull_request_review_id": null, "id": 51366816, "diff_hunk": "@@ -5,14 +5,358 @@\n \n #include <dynd/string.hpp>\n #include <dynd/kernels/string_concat_kernel.hpp>\n+#include <dynd/kernels/string_count_kernel.hpp>\n+#include <dynd/kernels/string_find_kernel.hpp>\n+#include <dynd/kernels/string_replace_kernel.hpp>\n #include <dynd/func/elwise.hpp>\n \n using namespace std;\n using namespace dynd;\n \n+\n+////////////////////////////////////////////////////////////\n+// String algorithms\n+\n+\n+void dynd::string_concat(size_t nop, dynd::string *d, const dynd::string *const *s)\n+{\n+  // Get the size of the concatenated string\n+  size_t size = 0;\n+  for (size_t i = 0; i != nop; ++i) {\n+    size += (s[i]->end() - s[i]->begin());\n+  }\n+\n+  // Allocate the output\n+  d->resize(size);\n+  // Copy the string data\n+  char *dst = d->begin();\n+  for (size_t i = 0; i != nop; ++i) {\n+    size_t op_size = (s[i]->end() - s[i]->begin());\n+    DYND_MEMCPY(dst, s[i]->begin(), op_size);\n+    dst += op_size;\n+  }\n+}\n+\n+\n+template<class SelfType>\n+struct string_search_base {\n+  inline void bloom_add(uint64_t &mask, const char ch)\n+  {\n+    mask |= 1UL << ((ch) & (64 - 1));\n+  }\n+\n+  inline uint64_t bloom(const uint64_t &mask, const char ch)\n+  {\n+    return mask & (1UL << ((ch) & (64 - 1)));\n+  }\n+\n+  /* Special case path where the needle is only a single character.\n+     According to effbot's numbers, for haystacks < 10 characters, a\n+     naive loop is fastest.  Larger than that, using POSIX `memchr` is\n+     faster. */\n+  inline void find_1char(const char *haystack, size_t n, char needle)\n+  {\n+    SelfType *self = (SelfType *)this;\n+\n+    if (n <= 10) {\n+      for (size_t i = 0; i < n; ++i) {\n+        if (haystack[i] == needle) {\n+          if (self->handle_match(i)) {\n+            return;\n+          }\n+        }\n+      }\n+    } else {\n+      const char *s = haystack;\n+      while (s < haystack + n) {\n+        void *candidate = memchr((void *)s, needle, n);\n+        if (candidate == NULL) {\n+          return;\n+        }\n+        s = (const char *)candidate;\n+        if (self->handle_match(s - haystack)) {\n+          return;\n+        }\n+        s++;\n+      }\n+    }\n+  }\n+\n+  void operator()(const dynd::string *const haystack,\n+                  const dynd::string *const needle)\n+  {\n+    /*\n+      This is a mostly direct copy of the algorithm by Fredrik Lundh in\n+      CPython, as found here:\n+\n+      http://hg.python.org/cpython/file/3.5/Objects/stringlib/fastsearch.h\n+\n+      and described here:\n+\n+      http://effbot.org/zone/stringlib.htm\n+\n+      The main differences are a result of handling UTF-8 only, and not\n+      three different char widths as in Python.\n+\n+      There are probably further optimizations possible here, given that\n+      this is UTF-8. For example, we could skip over multi-byte\n+      sequences when a match fails, but this doesn't currently do that.\n+    */\n+    SelfType *self = (SelfType *)this;\n+\n+    const char *s = haystack->begin();\n+    const char *p = needle->begin();\n+    size_t n = haystack->size();\n+    size_t m = needle->size();\n+\n+    size_t w = n - m;\n+    if (w < 0) {\n+      return;\n+    }\n+\n+    /* look for special cases */\n+    if (m <= 1) {\n+      if (m == 0) {\n+        return;\n+      }\n+\n+      find_1char(haystack->begin(), n, needle->begin()[0]);\n+      return;\n+    }\n+\n+    size_t mlast = m - 1;\n+    size_t skip = mlast - 1;\n+    uint64_t mask = 0;\n+\n+    const char *ss = s + m - 1;\n+    const char *pp = p + m - 1;\n+\n+    size_t i;\n+    size_t j;\n+\n+    /* create compressed boyer-moore delta 1 table */\n+\n+    /* process pattern[:-1] */\n+    for (i = 0; i < mlast; i++) {\n+      bloom_add(mask, p[i]);\n+      if (p[i] == p[mlast]) {\n+         skip = mlast - i - 1;\n+      }\n+    }\n+\n+    /* process pattern[-1] outside the loop */\n+    bloom_add(mask, p[mlast]);\n+\n+    for (i = 0; i <= w; i++) {\n+      /* note: using mlast in the skip path slows things down on x86 */\n+      if (ss[i] == pp[0]) {\n+        /* candidate match */\n+        for (j = 0; j < mlast; j++) {\n+          if (s[i+j] != p[j]) {\n+            break;\n+          }\n+        }\n+        if (j == mlast) {\n+          /* got a match! */\n+          if (self->handle_match(i)) {\n+            return;\n+          }\n+          i = i + mlast;\n+        }\n+        /* miss: check if next character is part of pattern */\n+        if (!bloom(mask, ss[i+1])) {\n+          i = i + m;\n+        } else {\n+          i = i + skip;\n+        }\n+      } else {\n+        /* skip: check if next character is part of pattern */\n+        if (!bloom(mask, ss[i+1])) {\n+          i = i + m;\n+        }\n+      }\n+    }\n+\n+    return;\n+  }\n+};\n+\n+\n+struct string_finder : public string_search_base<string_finder>\n+{\n+  intptr_t m_result;\n+\n+  string_finder() : m_result(-1) { }\n+\n+  bool handle_match(const size_t match) {\n+    m_result = (intptr_t)match;\n+    return true;\n+  }\n+};\n+\n+\n+intptr_t dynd::string_find(const dynd::string *const haystack,\n+                           const dynd::string *const needle) {\n+  string_finder f;\n+\n+  f(haystack, needle);\n+\n+  return f.m_result;\n+}\n+\n+\n+struct string_counter : public string_search_base<string_counter>\n+{\n+  size_t m_count;\n+\n+  string_counter() : m_count(0) { }\n+\n+  bool handle_match(const size_t DYND_UNUSED(match)) {\n+    m_count++;\n+    return false;\n+  }\n+};\n+\n+\n+intptr_t dynd::string_count(const dynd::string *const haystack,\n+                            const dynd::string *const needle) {\n+  string_counter f;\n+\n+  f(haystack, needle);\n+\n+  return f.m_count;\n+}\n+\n+\n+struct string_inplace_replacer : public string_search_base<string_inplace_replacer>\n+{\n+  dynd::string *m_dst;\n+  const dynd::string *m_new_str;\n+\n+  string_inplace_replacer(dynd::string *const dst,\n+                          const dynd::string *const new_str) :\n+    m_dst(dst),\n+    m_new_str(new_str) { }\n+\n+  bool handle_match(const size_t match) {\n+    memcpy(m_dst->begin() + match, m_new_str->begin(), m_new_str->size());\n+    return false;\n+  }\n+};\n+\n+\n+struct string_copy_replacer : public string_search_base<string_copy_replacer>\n+{\n+  char *m_dst;\n+  const char *m_src;\n+  size_t m_src_size;\n+  size_t m_last_src_start;\n+  size_t m_old_str_size;\n+  const char *m_new_str;\n+  size_t m_new_str_size;\n+\n+  string_copy_replacer(dynd::string *const dst,\n+                       const dynd::string *const src,\n+                       const dynd::string *const old_str,\n+                       const dynd::string *const new_str) :\n+    m_dst(dst->begin()),\n+    m_src(src->begin()),\n+    m_src_size(src->size()),\n+    m_last_src_start(0),\n+    m_old_str_size(old_str->size()),\n+    m_new_str(new_str->begin()),\n+    m_new_str_size(new_str->size())\n+  { }\n+\n+  bool handle_match(const size_t match) {\n+    size_t src_chunk_size = match - m_last_src_start;\n+\n+    memcpy(m_dst, m_src + m_last_src_start, src_chunk_size);\n+    m_dst += src_chunk_size;\n+    memcpy(m_dst, m_new_str, m_new_str_size);\n+    m_dst += m_new_str_size;\n+    m_last_src_start = match + m_old_str_size;\n+\n+    return false;\n+  }\n+\n+  void handle_end() {\n+    memcpy(m_dst, m_src + m_last_src_start, m_src_size - m_last_src_start);\n+  }\n+};\n+\n+\n+void dynd::string_replace(dynd::string *const dst,\n+                          const dynd::string *const src,\n+                          const dynd::string *const old_str,\n+                          const dynd::string *const new_str) {\n+\n+  if (old_str->size() == 0) {\n+    /* Just copy -- there's nothing to replace */\n+    *dst = *src;\n+  } else if (old_str->size() == new_str->size()) {\n+    /* Special case when old_str and new_str are same length,\n+       we copy src to dst and the replace in-place. */\n+    *dst = *src;\n+\n+    if (old_str->size() == 1) {\n+      /* Special case when old_str and new_str are both 1 character */\n+      char old_chr = old_str->begin()[0];\n+      char new_chr = new_str->begin()[0];\n+      for (auto p = dst->begin(); p != dst->end(); ++p) {\n+        if (*p == old_chr) {\n+          *p = new_chr;\n+        }\n+      }\n+    } else {\n+      string_inplace_replacer replacer(dst, new_str);\n+      replacer(src, old_str);\n+    }\n+  } else {\n+    /* Most general case, where old_str and new_str are different\n+       lengths.  Count matches to determine resulting string length,\n+       then interleave to make the result. */\n+    intptr_t count = string_count(src, old_str);\n+    size_t delta =\n+      ((intptr_t)new_str->size() - (intptr_t)old_str->size()) * count;\n+\n+    dst->resize((intptr_t)src->size() + delta);\n+\n+    string_copy_replacer replacer(dst, src, old_str, new_str);\n+    replacer(src, old_str);\n+    replacer.handle_end();\n+  }\n+}\n+\n+\n+////////////////////////////////////////////////////////////\n+// String kernels\n+\n+\n DYND_API nd::callable nd::string_concatenation::make()\n {\n   return nd::functional::elwise(nd::callable::make<nd::string_concatenation_kernel>());\n }\n \n DYND_API struct nd::string_concatenation nd::string_concatenation;\n+\n+DYND_API nd::callable nd::string_count::make()\n+{\n+  return nd::functional::elwise(nd::callable::make<nd::string_count_kernel>());\n+}\n+\n+DYND_API struct nd::string_count nd::string_count;\n+\n+DYND_API nd::callable nd::string_find::make()\n+{\n+  return nd::functional::elwise(nd::callable::make<nd::string_find_kernel>());\n+}\n+\n+DYND_API struct nd::string_find nd::string_find;\n+\n+DYND_API nd::callable nd::string_replace::make()\n+{\n+  return nd::functional::elwise(nd::callable::make<nd::string_replace_kernel>());\n+}\n+\n+DYND_API struct nd::string_replace nd::string_replace;", "path": "src/dynd/string.cpp", "position": null, "original_position": 358, "commit_id": "c9183d191592d67fb40919c0b5d4f0ed252f4258", "original_commit_id": "ed94956e90bf7efb40489842e5fe41fc67908012", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "`nd` is also implicit here because these algorithms are in the `nd` namespace\n", "created_at": "2016-01-31T20:29:34Z", "updated_at": "2016-02-02T15:56:40Z", "html_url": "https://github.com/libdynd/libdynd/pull/910#discussion_r51366816", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/910", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51366816"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/910#discussion_r51366816"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/910"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51366816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51366833", "pull_request_review_id": null, "id": 51366833, "diff_hunk": "@@ -455,41 +455,146 @@ TEST(StringType, Concatenation) {\n     EXPECT_ARRAY_EQ(\"twogamma\", c(2));\n }\n \n-/*\n-TEST(StringType, Find1) {\n-    nd::array a, b, c;\n \n-    const char *a_arr[4] = {\"abc\", \"ababc\", \"ababab\", \"abd\"};\n-    a = a_arr;\n-    b = \"abc\";\n-\n-    c = a.f(\"find\", b).eval();\n-    ASSERT_EQ(ndt::type(\"4 * intptr\"), c.get_type());\n-    ASSERT_EQ(4, c.get_shape()[0]);\n-    EXPECT_EQ(0, c(0).as<intptr_t>());\n-    EXPECT_EQ(2, c(1).as<intptr_t>());\n-    EXPECT_EQ(-1, c(2).as<intptr_t>());\n-    EXPECT_EQ(-1, c(3).as<intptr_t>());\n+TEST(StringType, Find1) {\n+  nd::array a, b, c;\n+\n+  const char *a_arr[4] = {\"abc\", \"ababc\", \"ababab\", \"abd\"};\n+  a = a_arr;\n+  b = \"abc\";\n+\n+  c = nd::string_find(a, b);\n+  ASSERT_EQ(ndt::type(\"4 * intptr\"), c.get_type());\n+  ASSERT_EQ(4, c.get_shape()[0]);\n+  EXPECT_ARRAY_EQ(0l, c(0));\n+  EXPECT_ARRAY_EQ(2l, c(1));\n+  EXPECT_ARRAY_EQ(-1l, c(2));\n+  EXPECT_ARRAY_EQ(-1l, c(3));\n }\n ", "path": "tests/types/test_string_type.cpp", "position": null, "original_position": 34, "commit_id": "c9183d191592d67fb40919c0b5d4f0ed252f4258", "original_commit_id": "ed94956e90bf7efb40489842e5fe41fc67908012", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "You can match a whole array with `EXPECT_ARRAY_EQ` by passing in the values as an `std::initializer_list`. For instance, this should be equivalent to what you have above: `EXPECT_ARRAY_EQ(nd::array{0l, 2l, -1l, -1l}, nd::string_find(a, b))`. The benefit of that is it does everything you have (checks type, shape, and values), but we get it down to a single line.\n", "created_at": "2016-01-31T20:30:57Z", "updated_at": "2016-02-02T15:56:40Z", "html_url": "https://github.com/libdynd/libdynd/pull/910#discussion_r51366833", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/910", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51366833"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/910#discussion_r51366833"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/910"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51366833/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51366839", "pull_request_review_id": null, "id": 51366839, "diff_hunk": "@@ -455,41 +455,146 @@ TEST(StringType, Concatenation) {\n     EXPECT_ARRAY_EQ(\"twogamma\", c(2));\n }\n \n-/*\n-TEST(StringType, Find1) {\n-    nd::array a, b, c;\n \n-    const char *a_arr[4] = {\"abc\", \"ababc\", \"ababab\", \"abd\"};\n-    a = a_arr;\n-    b = \"abc\";\n-\n-    c = a.f(\"find\", b).eval();\n-    ASSERT_EQ(ndt::type(\"4 * intptr\"), c.get_type());\n-    ASSERT_EQ(4, c.get_shape()[0]);\n-    EXPECT_EQ(0, c(0).as<intptr_t>());\n-    EXPECT_EQ(2, c(1).as<intptr_t>());\n-    EXPECT_EQ(-1, c(2).as<intptr_t>());\n-    EXPECT_EQ(-1, c(3).as<intptr_t>());\n+TEST(StringType, Find1) {\n+  nd::array a, b, c;\n+\n+  const char *a_arr[4] = {\"abc\", \"ababc\", \"ababab\", \"abd\"};\n+  a = a_arr;\n+  b = \"abc\";\n+\n+  c = nd::string_find(a, b);\n+  ASSERT_EQ(ndt::type(\"4 * intptr\"), c.get_type());\n+  ASSERT_EQ(4, c.get_shape()[0]);\n+  EXPECT_ARRAY_EQ(0l, c(0));\n+  EXPECT_ARRAY_EQ(2l, c(1));\n+  EXPECT_ARRAY_EQ(-1l, c(2));\n+  EXPECT_ARRAY_EQ(-1l, c(3));\n }\n \n+\n TEST(StringType, Find2) {\n-    nd::array a, b, c;\n+  nd::array a, b, c;\n+\n+  const char *b_arr[6] = {\"a\", \"b\", \"c\", \"bc\", \"d\", \"cd\"};\n+  a = \"abc\";\n+  b = b_arr;\n+\n+  c = nd::string_find(a, b);\n+  ASSERT_EQ(ndt::type(\"6 * intptr\"), c.get_type());\n+  ASSERT_EQ(6, c.get_shape()[0]);\n+  EXPECT_ARRAY_EQ(0l, c(0));\n+  EXPECT_ARRAY_EQ(1l, c(1));\n+  EXPECT_ARRAY_EQ(2l, c(2));\n+  EXPECT_ARRAY_EQ(1l, c(3));\n+  EXPECT_ARRAY_EQ(-1l, c(4));\n+  EXPECT_ARRAY_EQ(-1l, c(5));\n+}\n ", "path": "tests/types/test_string_type.cpp", "position": null, "original_position": 54, "commit_id": "c9183d191592d67fb40919c0b5d4f0ed252f4258", "original_commit_id": "ed94956e90bf7efb40489842e5fe41fc67908012", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Same comment as above.\n", "created_at": "2016-01-31T20:31:16Z", "updated_at": "2016-02-02T15:56:40Z", "html_url": "https://github.com/libdynd/libdynd/pull/910#discussion_r51366839", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/910", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51366839"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/910#discussion_r51366839"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/910"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51366839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51370565", "pull_request_review_id": null, "id": 51370565, "diff_hunk": "@@ -8,11 +8,52 @@\n #include <dynd/callable.hpp>\n \n namespace dynd {\n-namespace nd {\n \n-  extern DYND_API struct DYND_API string_concatenation : declfunc<string_concatenation> {\n-    static callable make();\n-  } string_concatenation;\n+  /*\n+    Concatenates `nop` strings in the `s` array, storing the result in\n+    `d`\n+  */\n+  void string_concat(size_t nop, dynd::string *d, const dynd::string *const *s);\n \n-} // namespace dynd::nd\n+  /*\n+    Returns the number of times needle appears in haystack.\n+  */\n+  intptr_t string_count(const dynd::string *const haystack,\n+                        const dynd::string *const needle);\n+\n+  /*\n+    Returns byte index of the first occurrence of needle in haystack.\n+    Returns -1 if not found.\n+  */\n+  intptr_t string_find(const dynd::string *const haystack,\n+                       const dynd::string *const needle);\n+\n+  /*\n+    In string `src`, replace all non-overlapping appearances of\n+    `old_str` with `new_str`, storing the result in `dst`.\n+  */\n+  void string_replace(dynd::string *const dst,\n+                      const dynd::string *const src,\n+                      const dynd::string *const old_str,\n+                      const dynd::string *const new_str);\n+", "path": "include/dynd/string.hpp", "position": null, "original_position": 37, "commit_id": "c9183d191592d67fb40919c0b5d4f0ed252f4258", "original_commit_id": "ed94956e90bf7efb40489842e5fe41fc67908012", "user": {"login": "mdboom", "id": 38294, "avatar_url": "https://avatars3.githubusercontent.com/u/38294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdboom", "html_url": "https://github.com/mdboom", "followers_url": "https://api.github.com/users/mdboom/followers", "following_url": "https://api.github.com/users/mdboom/following{/other_user}", "gists_url": "https://api.github.com/users/mdboom/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdboom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdboom/subscriptions", "organizations_url": "https://api.github.com/users/mdboom/orgs", "repos_url": "https://api.github.com/users/mdboom/repos", "events_url": "https://api.github.com/users/mdboom/events{/privacy}", "received_events_url": "https://api.github.com/users/mdboom/received_events", "type": "User", "site_admin": false}, "body": "Sure -- they can take references.  Would it make sense to have C-like interfaces as well (i.e. char \\* and size_t pairs for each string) so they could be used independently of the `dynd::string` type?  Even further, these could be templatized so `std::string` could be used instead (the used part of the API is the same).\n", "created_at": "2016-02-01T00:10:05Z", "updated_at": "2016-02-02T15:56:40Z", "html_url": "https://github.com/libdynd/libdynd/pull/910#discussion_r51370565", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/910", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51370565"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/910#discussion_r51370565"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/910"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51370565/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51370669", "pull_request_review_id": null, "id": 51370669, "diff_hunk": "@@ -14,27 +15,6 @@\n namespace dynd {\n   namespace nd {\n ", "path": "include/dynd/kernels/string_concat_kernel.hpp", "position": 11, "original_position": 11, "commit_id": "c9183d191592d67fb40919c0b5d4f0ed252f4258", "original_commit_id": "ed94956e90bf7efb40489842e5fe41fc67908012", "user": {"login": "mdboom", "id": 38294, "avatar_url": "https://avatars3.githubusercontent.com/u/38294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdboom", "html_url": "https://github.com/mdboom", "followers_url": "https://api.github.com/users/mdboom/followers", "following_url": "https://api.github.com/users/mdboom/following{/other_user}", "gists_url": "https://api.github.com/users/mdboom/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdboom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdboom/subscriptions", "organizations_url": "https://api.github.com/users/mdboom/orgs", "repos_url": "https://api.github.com/users/mdboom/repos", "events_url": "https://api.github.com/users/mdboom/events{/privacy}", "received_events_url": "https://api.github.com/users/mdboom/received_events", "type": "User", "site_admin": false}, "body": "Which `#include` should I include?\n", "created_at": "2016-02-01T00:15:34Z", "updated_at": "2016-02-02T15:56:40Z", "html_url": "https://github.com/libdynd/libdynd/pull/910#discussion_r51370669", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/910", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51370669"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/910#discussion_r51370669"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/910"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51370669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51371048", "pull_request_review_id": null, "id": 51371048, "diff_hunk": "@@ -455,41 +455,146 @@ TEST(StringType, Concatenation) {\n     EXPECT_ARRAY_EQ(\"twogamma\", c(2));\n }\n \n-/*\n-TEST(StringType, Find1) {\n-    nd::array a, b, c;\n \n-    const char *a_arr[4] = {\"abc\", \"ababc\", \"ababab\", \"abd\"};\n-    a = a_arr;\n-    b = \"abc\";\n-\n-    c = a.f(\"find\", b).eval();\n-    ASSERT_EQ(ndt::type(\"4 * intptr\"), c.get_type());\n-    ASSERT_EQ(4, c.get_shape()[0]);\n-    EXPECT_EQ(0, c(0).as<intptr_t>());\n-    EXPECT_EQ(2, c(1).as<intptr_t>());\n-    EXPECT_EQ(-1, c(2).as<intptr_t>());\n-    EXPECT_EQ(-1, c(3).as<intptr_t>());\n+TEST(StringType, Find1) {\n+  nd::array a, b, c;\n+\n+  const char *a_arr[4] = {\"abc\", \"ababc\", \"ababab\", \"abd\"};\n+  a = a_arr;\n+  b = \"abc\";\n+\n+  c = nd::string_find(a, b);\n+  ASSERT_EQ(ndt::type(\"4 * intptr\"), c.get_type());\n+  ASSERT_EQ(4, c.get_shape()[0]);\n+  EXPECT_ARRAY_EQ(0l, c(0));\n+  EXPECT_ARRAY_EQ(2l, c(1));\n+  EXPECT_ARRAY_EQ(-1l, c(2));\n+  EXPECT_ARRAY_EQ(-1l, c(3));\n }\n ", "path": "tests/types/test_string_type.cpp", "position": null, "original_position": 34, "commit_id": "c9183d191592d67fb40919c0b5d4f0ed252f4258", "original_commit_id": "ed94956e90bf7efb40489842e5fe41fc67908012", "user": {"login": "mdboom", "id": 38294, "avatar_url": "https://avatars3.githubusercontent.com/u/38294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdboom", "html_url": "https://github.com/mdboom", "followers_url": "https://api.github.com/users/mdboom/followers", "following_url": "https://api.github.com/users/mdboom/following{/other_user}", "gists_url": "https://api.github.com/users/mdboom/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdboom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdboom/subscriptions", "organizations_url": "https://api.github.com/users/mdboom/orgs", "repos_url": "https://api.github.com/users/mdboom/repos", "events_url": "https://api.github.com/users/mdboom/events{/privacy}", "received_events_url": "https://api.github.com/users/mdboom/received_events", "type": "User", "site_admin": false}, "body": "That's really cool.  Still ramping up on all the neat stuff in C++11...\n", "created_at": "2016-02-01T00:35:03Z", "updated_at": "2016-02-02T15:56:40Z", "html_url": "https://github.com/libdynd/libdynd/pull/910#discussion_r51371048", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/910", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51371048"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/910#discussion_r51371048"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/910"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51371048/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51382625", "pull_request_review_id": null, "id": 51382625, "diff_hunk": "@@ -14,27 +15,6 @@\n namespace dynd {\n   namespace nd {\n ", "path": "include/dynd/kernels/string_concat_kernel.hpp", "position": 11, "original_position": 11, "commit_id": "c9183d191592d67fb40919c0b5d4f0ed252f4258", "original_commit_id": "ed94956e90bf7efb40489842e5fe41fc67908012", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Fixed above, markup ate the actual filenames.\n", "created_at": "2016-02-01T06:22:33Z", "updated_at": "2016-02-02T15:56:40Z", "html_url": "https://github.com/libdynd/libdynd/pull/910#discussion_r51382625", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/910", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51382625"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/910#discussion_r51382625"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/910"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51382625/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51382706", "pull_request_review_id": null, "id": 51382706, "diff_hunk": "@@ -8,11 +8,52 @@\n #include <dynd/callable.hpp>\n \n namespace dynd {\n-namespace nd {\n \n-  extern DYND_API struct DYND_API string_concatenation : declfunc<string_concatenation> {\n-    static callable make();\n-  } string_concatenation;\n+  /*\n+    Concatenates `nop` strings in the `s` array, storing the result in\n+    `d`\n+  */\n+  void string_concat(size_t nop, dynd::string *d, const dynd::string *const *s);\n \n-} // namespace dynd::nd\n+  /*\n+    Returns the number of times needle appears in haystack.\n+  */\n+  intptr_t string_count(const dynd::string *const haystack,\n+                        const dynd::string *const needle);\n+\n+  /*\n+    Returns byte index of the first occurrence of needle in haystack.\n+    Returns -1 if not found.\n+  */\n+  intptr_t string_find(const dynd::string *const haystack,\n+                       const dynd::string *const needle);\n+\n+  /*\n+    In string `src`, replace all non-overlapping appearances of\n+    `old_str` with `new_str`, storing the result in `dst`.\n+  */\n+  void string_replace(dynd::string *const dst,\n+                      const dynd::string *const src,\n+                      const dynd::string *const old_str,\n+                      const dynd::string *const new_str);\n+", "path": "include/dynd/string.hpp", "position": null, "original_position": 37, "commit_id": "c9183d191592d67fb40919c0b5d4f0ed252f4258", "original_commit_id": "ed94956e90bf7efb40489842e5fe41fc67908012", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "I think we should have a simple API, it can be based off of either the C++ API (my preference) or the C API. If we can support both through templates, even better.\n", "created_at": "2016-02-01T06:23:29Z", "updated_at": "2016-02-02T15:56:40Z", "html_url": "https://github.com/libdynd/libdynd/pull/910#discussion_r51382706", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/910", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51382706"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/910#discussion_r51382706"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/910"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51382706/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51416341", "pull_request_review_id": null, "id": 51416341, "diff_hunk": "@@ -14,27 +15,6 @@\n namespace dynd {\n   namespace nd {\n ", "path": "include/dynd/kernels/string_concat_kernel.hpp", "position": 11, "original_position": 11, "commit_id": "c9183d191592d67fb40919c0b5d4f0ed252f4258", "original_commit_id": "ed94956e90bf7efb40489842e5fe41fc67908012", "user": {"login": "mdboom", "id": 38294, "avatar_url": "https://avatars3.githubusercontent.com/u/38294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdboom", "html_url": "https://github.com/mdboom", "followers_url": "https://api.github.com/users/mdboom/followers", "following_url": "https://api.github.com/users/mdboom/following{/other_user}", "gists_url": "https://api.github.com/users/mdboom/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdboom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdboom/subscriptions", "organizations_url": "https://api.github.com/users/mdboom/orgs", "repos_url": "https://api.github.com/users/mdboom/repos", "events_url": "https://api.github.com/users/mdboom/events{/privacy}", "received_events_url": "https://api.github.com/users/mdboom/received_events", "type": "User", "site_admin": false}, "body": "Ah, got it. ;)\n", "created_at": "2016-02-01T13:17:22Z", "updated_at": "2016-02-02T15:56:40Z", "html_url": "https://github.com/libdynd/libdynd/pull/910#discussion_r51416341", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/910", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51416341"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/910#discussion_r51416341"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/910"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51416341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51416564", "pull_request_review_id": null, "id": 51416564, "diff_hunk": "@@ -8,11 +8,52 @@\n #include <dynd/callable.hpp>\n \n namespace dynd {\n-namespace nd {\n \n-  extern DYND_API struct DYND_API string_concatenation : declfunc<string_concatenation> {\n-    static callable make();\n-  } string_concatenation;\n+  /*\n+    Concatenates `nop` strings in the `s` array, storing the result in\n+    `d`\n+  */\n+  void string_concat(size_t nop, dynd::string *d, const dynd::string *const *s);\n \n-} // namespace dynd::nd\n+  /*\n+    Returns the number of times needle appears in haystack.\n+  */\n+  intptr_t string_count(const dynd::string *const haystack,\n+                        const dynd::string *const needle);\n+\n+  /*\n+    Returns byte index of the first occurrence of needle in haystack.\n+    Returns -1 if not found.\n+  */\n+  intptr_t string_find(const dynd::string *const haystack,\n+                       const dynd::string *const needle);\n+\n+  /*\n+    In string `src`, replace all non-overlapping appearances of\n+    `old_str` with `new_str`, storing the result in `dst`.\n+  */\n+  void string_replace(dynd::string *const dst,\n+                      const dynd::string *const src,\n+                      const dynd::string *const old_str,\n+                      const dynd::string *const new_str);\n+", "path": "include/dynd/string.hpp", "position": null, "original_position": 37, "commit_id": "c9183d191592d67fb40919c0b5d4f0ed252f4258", "original_commit_id": "ed94956e90bf7efb40489842e5fe41fc67908012", "user": {"login": "mdboom", "id": 38294, "avatar_url": "https://avatars3.githubusercontent.com/u/38294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdboom", "html_url": "https://github.com/mdboom", "followers_url": "https://api.github.com/users/mdboom/followers", "following_url": "https://api.github.com/users/mdboom/following{/other_user}", "gists_url": "https://api.github.com/users/mdboom/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdboom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdboom/subscriptions", "organizations_url": "https://api.github.com/users/mdboom/orgs", "repos_url": "https://api.github.com/users/mdboom/repos", "events_url": "https://api.github.com/users/mdboom/events{/privacy}", "received_events_url": "https://api.github.com/users/mdboom/received_events", "type": "User", "site_admin": false}, "body": "I think to cover all bases, we can easily support:\n- A template that supports _either_ a dynd::string or a std::string (or any class that has `begin`, `end`, `size` and `resize`) ... which then calls...\n- A C-like API\n\nThat avoids the problem of a lot of old-school C++ APIs that generally say \"first create an instance of X (which requires some sort of copy), before you can to anything...\"\n", "created_at": "2016-02-01T13:19:37Z", "updated_at": "2016-02-02T15:56:40Z", "html_url": "https://github.com/libdynd/libdynd/pull/910#discussion_r51416564", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/910", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51416564"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/910#discussion_r51416564"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/910"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51416564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51419584", "pull_request_review_id": null, "id": 51419584, "diff_hunk": "@@ -8,11 +8,52 @@\n #include <dynd/callable.hpp>\n \n namespace dynd {\n-namespace nd {\n \n-  extern DYND_API struct DYND_API string_concatenation : declfunc<string_concatenation> {\n-    static callable make();\n-  } string_concatenation;\n+  /*\n+    Concatenates `nop` strings in the `s` array, storing the result in\n+    `d`\n+  */\n+  void string_concat(size_t nop, dynd::string *d, const dynd::string *const *s);\n \n-} // namespace dynd::nd\n+  /*\n+    Returns the number of times needle appears in haystack.\n+  */\n+  intptr_t string_count(const dynd::string *const haystack,\n+                        const dynd::string *const needle);\n+\n+  /*\n+    Returns byte index of the first occurrence of needle in haystack.\n+    Returns -1 if not found.\n+  */\n+  intptr_t string_find(const dynd::string *const haystack,\n+                       const dynd::string *const needle);\n+\n+  /*\n+    In string `src`, replace all non-overlapping appearances of\n+    `old_str` with `new_str`, storing the result in `dst`.\n+  */\n+  void string_replace(dynd::string *const dst,\n+                      const dynd::string *const src,\n+                      const dynd::string *const old_str,\n+                      const dynd::string *const new_str);\n+", "path": "include/dynd/string.hpp", "position": null, "original_position": 37, "commit_id": "c9183d191592d67fb40919c0b5d4f0ed252f4258", "original_commit_id": "ed94956e90bf7efb40489842e5fe41fc67908012", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Sounds good to me!\n", "created_at": "2016-02-01T13:50:58Z", "updated_at": "2016-02-02T15:56:40Z", "html_url": "https://github.com/libdynd/libdynd/pull/910#discussion_r51419584", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/910", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51419584"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/910#discussion_r51419584"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/910"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51419584/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51490534", "pull_request_review_id": null, "id": 51490534, "diff_hunk": "@@ -8,11 +8,52 @@\n #include <dynd/callable.hpp>\n \n namespace dynd {\n-namespace nd {\n \n-  extern DYND_API struct DYND_API string_concatenation : declfunc<string_concatenation> {\n-    static callable make();\n-  } string_concatenation;\n+  /*\n+    Concatenates `nop` strings in the `s` array, storing the result in\n+    `d`\n+  */\n+  void string_concat(size_t nop, dynd::string *d, const dynd::string *const *s);\n \n-} // namespace dynd::nd\n+  /*\n+    Returns the number of times needle appears in haystack.\n+  */\n+  intptr_t string_count(const dynd::string *const haystack,\n+                        const dynd::string *const needle);\n+\n+  /*\n+    Returns byte index of the first occurrence of needle in haystack.\n+    Returns -1 if not found.\n+  */\n+  intptr_t string_find(const dynd::string *const haystack,\n+                       const dynd::string *const needle);\n+\n+  /*\n+    In string `src`, replace all non-overlapping appearances of\n+    `old_str` with `new_str`, storing the result in `dst`.\n+  */\n+  void string_replace(dynd::string *const dst,\n+                      const dynd::string *const src,\n+                      const dynd::string *const old_str,\n+                      const dynd::string *const new_str);\n+", "path": "include/dynd/string.hpp", "position": null, "original_position": 37, "commit_id": "c9183d191592d67fb40919c0b5d4f0ed252f4258", "original_commit_id": "ed94956e90bf7efb40489842e5fe41fc67908012", "user": {"login": "mdboom", "id": 38294, "avatar_url": "https://avatars3.githubusercontent.com/u/38294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdboom", "html_url": "https://github.com/mdboom", "followers_url": "https://api.github.com/users/mdboom/followers", "following_url": "https://api.github.com/users/mdboom/following{/other_user}", "gists_url": "https://api.github.com/users/mdboom/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdboom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdboom/subscriptions", "organizations_url": "https://api.github.com/users/mdboom/orgs", "repos_url": "https://api.github.com/users/mdboom/repos", "events_url": "https://api.github.com/users/mdboom/events{/privacy}", "received_events_url": "https://api.github.com/users/mdboom/received_events", "type": "User", "site_admin": false}, "body": "My plan was to create APIs that take `dynd::string` or `std::string` that call lower-level APIs that take `char *`/`size_t` pairs (the C-like interface).\n\nThe detail I forgot in that plan is the memory management.  The C APIs will need to allocate and return the result buffer through a `char **` (since the caller won't know what size to allocate).  But then the C++ API will need to create a `dynd::string` out of it, without copying.  We could add an internal API to assign ownership of a pointer to a `dynd::string`, but such a thing doesn't exist in `std::string`, and it probably breaks @mwiebe's plans to add short-string optimization.\n\nSo, I think I come down on _just_ supporting `dynd::string` and `std::string`, through a template, and not C-like buffers.  But maybe others have better ideas or strong opinions about what we _must_ support here.\n", "created_at": "2016-02-01T22:17:34Z", "updated_at": "2016-02-02T15:56:40Z", "html_url": "https://github.com/libdynd/libdynd/pull/910#discussion_r51490534", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/910", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51490534"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/910#discussion_r51490534"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/910"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51490534/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51491632", "pull_request_review_id": null, "id": 51491632, "diff_hunk": "@@ -8,11 +8,52 @@\n #include <dynd/callable.hpp>\n \n namespace dynd {\n-namespace nd {\n \n-  extern DYND_API struct DYND_API string_concatenation : declfunc<string_concatenation> {\n-    static callable make();\n-  } string_concatenation;\n+  /*\n+    Concatenates `nop` strings in the `s` array, storing the result in\n+    `d`\n+  */\n+  void string_concat(size_t nop, dynd::string *d, const dynd::string *const *s);\n \n-} // namespace dynd::nd\n+  /*\n+    Returns the number of times needle appears in haystack.\n+  */\n+  intptr_t string_count(const dynd::string *const haystack,\n+                        const dynd::string *const needle);\n+\n+  /*\n+    Returns byte index of the first occurrence of needle in haystack.\n+    Returns -1 if not found.\n+  */\n+  intptr_t string_find(const dynd::string *const haystack,\n+                       const dynd::string *const needle);\n+\n+  /*\n+    In string `src`, replace all non-overlapping appearances of\n+    `old_str` with `new_str`, storing the result in `dst`.\n+  */\n+  void string_replace(dynd::string *const dst,\n+                      const dynd::string *const src,\n+                      const dynd::string *const old_str,\n+                      const dynd::string *const new_str);\n+", "path": "include/dynd/string.hpp", "position": null, "original_position": 37, "commit_id": "c9183d191592d67fb40919c0b5d4f0ed252f4258", "original_commit_id": "ed94956e90bf7efb40489842e5fe41fc67908012", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Yeah, the current string proposal from @mwiebe originated as an attempt to move away from exactly that. Our old strings were capable of doing things like that, and it got crazy. ;)\n\nSo I'm +1 to implementing algorithms on a generic `StringType` template that supports obvious things.\n", "created_at": "2016-02-01T22:25:56Z", "updated_at": "2016-02-02T15:56:40Z", "html_url": "https://github.com/libdynd/libdynd/pull/910#discussion_r51491632", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/910", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51491632"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/910#discussion_r51491632"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/910"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51491632/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51747505", "pull_request_review_id": null, "id": 51747505, "diff_hunk": "@@ -22,15 +22,14 @@ namespace ndt {\n     intptr_t m_field_count;\n \n     /**\n-     * Immutable contiguous array of field types. Always has type \"N * type\".\n+     * Immutable vector of field types. Always has type \"N * type\".\n      */\n     const std::vector<type> m_field_types;\n \n     /**\n-     * Immutable contiguous array of arrmeta offsets. Always has type \"N *\n-     * intptr\".\n+     * Immutable vector of arrmeta offsets. Always has type \"N * uintptr\".\n      */\n-    nd::array m_arrmeta_offsets;\n+    std::vector<uintptr_t> m_arrmeta_offsets;\n ", "path": "include/dynd/types/tuple_type.hpp", "position": 16, "original_position": 16, "commit_id": "95c7a05b1ffbd6122b4780e345d47a1a6042464d", "original_commit_id": "95c7a05b1ffbd6122b4780e345d47a1a6042464d", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Should we make this `const` as well?\n", "created_at": "2016-02-03T16:36:26Z", "updated_at": "2016-02-03T16:36:26Z", "html_url": "https://github.com/libdynd/libdynd/pull/918#discussion_r51747505", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/918", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51747505"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/918#discussion_r51747505"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/918"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51747505/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51748272", "pull_request_review_id": null, "id": 51748272, "diff_hunk": "@@ -22,15 +22,14 @@ namespace ndt {\n     intptr_t m_field_count;\n \n     /**\n-     * Immutable contiguous array of field types. Always has type \"N * type\".\n+     * Immutable vector of field types. Always has type \"N * type\".\n      */\n     const std::vector<type> m_field_types;\n \n     /**\n-     * Immutable contiguous array of arrmeta offsets. Always has type \"N *\n-     * intptr\".\n+     * Immutable vector of arrmeta offsets. Always has type \"N * uintptr\".\n      */\n-    nd::array m_arrmeta_offsets;\n+    std::vector<uintptr_t> m_arrmeta_offsets;\n ", "path": "include/dynd/types/tuple_type.hpp", "position": 16, "original_position": 16, "commit_id": "95c7a05b1ffbd6122b4780e345d47a1a6042464d", "original_commit_id": "95c7a05b1ffbd6122b4780e345d47a1a6042464d", "user": {"login": "skrah", "id": 16530421, "avatar_url": "https://avatars1.githubusercontent.com/u/16530421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skrah", "html_url": "https://github.com/skrah", "followers_url": "https://api.github.com/users/skrah/followers", "following_url": "https://api.github.com/users/skrah/following{/other_user}", "gists_url": "https://api.github.com/users/skrah/gists{/gist_id}", "starred_url": "https://api.github.com/users/skrah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skrah/subscriptions", "organizations_url": "https://api.github.com/users/skrah/orgs", "repos_url": "https://api.github.com/users/skrah/repos", "events_url": "https://api.github.com/users/skrah/events{/privacy}", "received_events_url": "https://api.github.com/users/skrah/received_events", "type": "User", "site_admin": false}, "body": "Yes, definitely.  The showstopper for now is https://github.com/libdynd/libdynd/pull/918/files#diff-d1a413db4b4cdcb4584670f4f43742caL417 (and also the initialization in the constructor should move to a function).\n", "created_at": "2016-02-03T16:40:45Z", "updated_at": "2016-02-03T16:40:45Z", "html_url": "https://github.com/libdynd/libdynd/pull/918#discussion_r51748272", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/918", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51748272"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/918#discussion_r51748272"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/918"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51748272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51748918", "pull_request_review_id": null, "id": 51748918, "diff_hunk": "@@ -22,15 +22,14 @@ namespace ndt {\n     intptr_t m_field_count;\n \n     /**\n-     * Immutable contiguous array of field types. Always has type \"N * type\".\n+     * Immutable vector of field types. Always has type \"N * type\".\n      */\n     const std::vector<type> m_field_types;\n \n     /**\n-     * Immutable contiguous array of arrmeta offsets. Always has type \"N *\n-     * intptr\".\n+     * Immutable vector of arrmeta offsets. Always has type \"N * uintptr\".\n      */\n-    nd::array m_arrmeta_offsets;\n+    std::vector<uintptr_t> m_arrmeta_offsets;\n ", "path": "include/dynd/types/tuple_type.hpp", "position": 16, "original_position": 16, "commit_id": "95c7a05b1ffbd6122b4780e345d47a1a6042464d", "original_commit_id": "95c7a05b1ffbd6122b4780e345d47a1a6042464d", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Makes sense!\n", "created_at": "2016-02-03T16:43:59Z", "updated_at": "2016-02-03T16:43:59Z", "html_url": "https://github.com/libdynd/libdynd/pull/918#discussion_r51748918", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/918", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51748918"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/918#discussion_r51748918"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/918"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51748918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51890389", "pull_request_review_id": null, "id": 51890389, "diff_hunk": "@@ -0,0 +1,23 @@\n+//\n+// Copyright (C) 2011-15 DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+static inline bool is_simple_identifier_name(const std::string &s)\n+{\n+  if (s.empty()) {\n+    return false;\n+  }\n+  else {\n+    auto c = s.begin();\n+    if (!(('a' <= *c && *c <= 'z') || ('A' <= *c && *c <= 'Z') || *c == '_')) {\n+      return false;\n+    }\n+    for (++c; c != s.end(); ++c) {\n+      if (!(('0' <= *c && *c <= '9') || ('a' <= *c && *c <= 'z') || ('A' <= *c && *c <= 'Z') || *c == '_')) {\n+        return false;\n+      }\n+    }\n+    return true;\n+  }", "path": "include/dynd/types/str_util.hpp", "position": 24, "original_position": 22, "commit_id": "49a8d6f4378c92c1d267114b0e0beea9d98532f5", "original_commit_id": "7e6457720b344bc3b362c17f64dcd1a585c31708", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "I don't want this extra file, but I agree that `is_simple_identifier_name` needs to go somewhere else. I'm not sure where...\n", "created_at": "2016-02-04T15:44:57Z", "updated_at": "2016-02-04T21:52:54Z", "html_url": "https://github.com/libdynd/libdynd/pull/923#discussion_r51890389", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/923", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51890389"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/923#discussion_r51890389"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/923"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51890389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51890451", "pull_request_review_id": null, "id": 51890451, "diff_hunk": "@@ -0,0 +1,23 @@\n+//\n+// Copyright (C) 2011-15 DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+static inline bool is_simple_identifier_name(const std::string &s)\n+{", "path": "include/dynd/types/str_util.hpp", "position": null, "original_position": 7, "commit_id": "49a8d6f4378c92c1d267114b0e0beea9d98532f5", "original_commit_id": "7e6457720b344bc3b362c17f64dcd1a585c31708", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "`static` should be removed here, that should only be used for functions in a `.cpp` file\n", "created_at": "2016-02-04T15:45:22Z", "updated_at": "2016-02-04T21:52:54Z", "html_url": "https://github.com/libdynd/libdynd/pull/923#discussion_r51890451", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/923", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51890451"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/923#discussion_r51890451"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/923"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51890451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51890988", "pull_request_review_id": null, "id": 51890988, "diff_hunk": "@@ -48,45 +50,17 @@ ndt::struct_type::~struct_type() {}\n intptr_t ndt::struct_type::get_field_index(const char *field_name_begin, const char *field_name_end) const\n {\n   size_t size = field_name_end - field_name_begin;\n-  if (size > 0) {\n-    char firstchar = *field_name_begin;\n-    intptr_t field_count = get_field_count();\n-    const char *fn_ptr = m_field_names.cdata();\n-    intptr_t fn_stride = reinterpret_cast<const fixed_dim_type_arrmeta *>(m_field_names.get()->metadata())->stride;\n-    for (intptr_t i = 0; i != field_count; ++i, fn_ptr += fn_stride) {\n-      const string *fn = reinterpret_cast<const string *>(fn_ptr);\n-      const char *begin = fn->begin(), *end = fn->end();\n-      if ((size_t)(end - begin) == size && *begin == firstchar) {\n-        if (memcmp(fn->begin(), field_name_begin, size) == 0) {\n-          return i;\n-        }\n-      }\n+\n+  for (intptr_t i = 0; i < m_field_count; ++i) {\n+    const std::string &name = m_field_names[i];\n+    if (name.compare(0, std::string::npos, field_name_begin, size) == 0) {\n+      return i;\n     }\n   }\n \n   return -1;\n }\n ", "path": "src/dynd/types/struct_type.cpp", "position": 58, "original_position": 56, "commit_id": "49a8d6f4378c92c1d267114b0e0beea9d98532f5", "original_commit_id": "7e6457720b344bc3b362c17f64dcd1a585c31708", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "We should just use `std::find(m_field_names.begin(), m_field_names.end(), field_name_begin)` here if we can make that work.\n", "created_at": "2016-02-04T15:48:32Z", "updated_at": "2016-02-04T21:52:54Z", "html_url": "https://github.com/libdynd/libdynd/pull/923#discussion_r51890988", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/923", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51890988"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/923#discussion_r51890988"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/923"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51890988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51893106", "pull_request_review_id": null, "id": 51893106, "diff_hunk": "@@ -0,0 +1,23 @@\n+//\n+// Copyright (C) 2011-15 DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+static inline bool is_simple_identifier_name(const std::string &s)\n+{\n+  if (s.empty()) {\n+    return false;\n+  }\n+  else {\n+    auto c = s.begin();\n+    if (!(('a' <= *c && *c <= 'z') || ('A' <= *c && *c <= 'Z') || *c == '_')) {\n+      return false;\n+    }\n+    for (++c; c != s.end(); ++c) {\n+      if (!(('0' <= *c && *c <= '9') || ('a' <= *c && *c <= 'z') || ('A' <= *c && *c <= 'Z') || *c == '_')) {\n+        return false;\n+      }\n+    }\n+    return true;\n+  }", "path": "include/dynd/types/str_util.hpp", "position": 24, "original_position": 22, "commit_id": "49a8d6f4378c92c1d267114b0e0beea9d98532f5", "original_commit_id": "7e6457720b344bc3b362c17f64dcd1a585c31708", "user": {"login": "skrah", "id": 16530421, "avatar_url": "https://avatars1.githubusercontent.com/u/16530421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skrah", "html_url": "https://github.com/skrah", "followers_url": "https://api.github.com/users/skrah/followers", "following_url": "https://api.github.com/users/skrah/following{/other_user}", "gists_url": "https://api.github.com/users/skrah/gists{/gist_id}", "starred_url": "https://api.github.com/users/skrah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skrah/subscriptions", "organizations_url": "https://api.github.com/users/skrah/orgs", "repos_url": "https://api.github.com/users/skrah/repos", "events_url": "https://api.github.com/users/skrah/events{/privacy}", "received_events_url": "https://api.github.com/users/skrah/received_events", "type": "User", "site_admin": false}, "body": "There are a couple of string related functions in src/dynd/json_formatter.cpp that could also go into some utility file. It's hard to find a good location. \n", "created_at": "2016-02-04T16:01:59Z", "updated_at": "2016-02-04T21:52:54Z", "html_url": "https://github.com/libdynd/libdynd/pull/923#discussion_r51893106", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/923", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51893106"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/923#discussion_r51893106"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/923"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51893106/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51894126", "pull_request_review_id": null, "id": 51894126, "diff_hunk": "@@ -0,0 +1,23 @@\n+//\n+// Copyright (C) 2011-15 DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+static inline bool is_simple_identifier_name(const std::string &s)\n+{\n+  if (s.empty()) {\n+    return false;\n+  }\n+  else {\n+    auto c = s.begin();\n+    if (!(('a' <= *c && *c <= 'z') || ('A' <= *c && *c <= 'Z') || *c == '_')) {\n+      return false;\n+    }\n+    for (++c; c != s.end(); ++c) {\n+      if (!(('0' <= *c && *c <= '9') || ('a' <= *c && *c <= 'z') || ('A' <= *c && *c <= 'Z') || *c == '_')) {\n+        return false;\n+      }\n+    }\n+    return true;\n+  }", "path": "include/dynd/types/str_util.hpp", "position": 24, "original_position": 22, "commit_id": "49a8d6f4378c92c1d267114b0e0beea9d98532f5", "original_commit_id": "7e6457720b344bc3b362c17f64dcd1a585c31708", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Yeah, I agree. We can leave it here for now, just voicing my thoughts.\n", "created_at": "2016-02-04T16:08:35Z", "updated_at": "2016-02-04T21:52:54Z", "html_url": "https://github.com/libdynd/libdynd/pull/923#discussion_r51894126", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/923", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51894126"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/923#discussion_r51894126"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/923"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51894126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51894194", "pull_request_review_id": null, "id": 51894194, "diff_hunk": "@@ -0,0 +1,23 @@\n+//\n+// Copyright (C) 2011-15 DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+static inline bool is_simple_identifier_name(const std::string &s)\n+{", "path": "include/dynd/types/str_util.hpp", "position": null, "original_position": 7, "commit_id": "49a8d6f4378c92c1d267114b0e0beea9d98532f5", "original_commit_id": "7e6457720b344bc3b362c17f64dcd1a585c31708", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Also, this needs to be in a namespace `dynd`.\n", "created_at": "2016-02-04T16:09:01Z", "updated_at": "2016-02-04T21:52:54Z", "html_url": "https://github.com/libdynd/libdynd/pull/923#discussion_r51894194", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/923", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51894194"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/923#discussion_r51894194"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/923"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51894194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51895173", "pull_request_review_id": null, "id": 51895173, "diff_hunk": "@@ -0,0 +1,23 @@\n+//\n+// Copyright (C) 2011-15 DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+static inline bool is_simple_identifier_name(const std::string &s)\n+{\n+  if (s.empty()) {\n+    return false;\n+  }\n+  else {\n+    auto c = s.begin();\n+    if (!(('a' <= *c && *c <= 'z') || ('A' <= *c && *c <= 'Z') || *c == '_')) {\n+      return false;\n+    }\n+    for (++c; c != s.end(); ++c) {\n+      if (!(('0' <= *c && *c <= '9') || ('a' <= *c && *c <= 'z') || ('A' <= *c && *c <= 'Z') || *c == '_')) {\n+        return false;\n+      }\n+    }\n+    return true;\n+  }", "path": "include/dynd/types/str_util.hpp", "position": 24, "original_position": 22, "commit_id": "49a8d6f4378c92c1d267114b0e0beea9d98532f5", "original_commit_id": "7e6457720b344bc3b362c17f64dcd1a585c31708", "user": {"login": "skrah", "id": 16530421, "avatar_url": "https://avatars1.githubusercontent.com/u/16530421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skrah", "html_url": "https://github.com/skrah", "followers_url": "https://api.github.com/users/skrah/followers", "following_url": "https://api.github.com/users/skrah/following{/other_user}", "gists_url": "https://api.github.com/users/skrah/gists{/gist_id}", "starred_url": "https://api.github.com/users/skrah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skrah/subscriptions", "organizations_url": "https://api.github.com/users/skrah/orgs", "repos_url": "https://api.github.com/users/skrah/repos", "events_url": "https://api.github.com/users/skrah/events{/privacy}", "received_events_url": "https://api.github.com/users/skrah/received_events", "type": "User", "site_admin": false}, "body": "But are you okay with the extra file for now? Then I can update the patch.\n", "created_at": "2016-02-04T16:14:44Z", "updated_at": "2016-02-04T21:52:54Z", "html_url": "https://github.com/libdynd/libdynd/pull/923#discussion_r51895173", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/923", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51895173"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/923#discussion_r51895173"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/923"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51895173/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51895253", "pull_request_review_id": null, "id": 51895253, "diff_hunk": "@@ -0,0 +1,23 @@\n+//\n+// Copyright (C) 2011-15 DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+static inline bool is_simple_identifier_name(const std::string &s)\n+{\n+  if (s.empty()) {\n+    return false;\n+  }\n+  else {\n+    auto c = s.begin();\n+    if (!(('a' <= *c && *c <= 'z') || ('A' <= *c && *c <= 'Z') || *c == '_')) {\n+      return false;\n+    }\n+    for (++c; c != s.end(); ++c) {\n+      if (!(('0' <= *c && *c <= '9') || ('a' <= *c && *c <= 'z') || ('A' <= *c && *c <= 'Z') || *c == '_')) {\n+        return false;\n+      }\n+    }\n+    return true;\n+  }", "path": "include/dynd/types/str_util.hpp", "position": 24, "original_position": 22, "commit_id": "49a8d6f4378c92c1d267114b0e0beea9d98532f5", "original_commit_id": "7e6457720b344bc3b362c17f64dcd1a585c31708", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Yes, we can certainly keep it for now. I don't have a better idea. :)\n", "created_at": "2016-02-04T16:15:23Z", "updated_at": "2016-02-04T21:52:54Z", "html_url": "https://github.com/libdynd/libdynd/pull/923#discussion_r51895253", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/923", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51895253"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/923#discussion_r51895253"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/923"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51895253/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51918768", "pull_request_review_id": null, "id": 51918768, "diff_hunk": "@@ -48,45 +50,17 @@ ndt::struct_type::~struct_type() {}\n intptr_t ndt::struct_type::get_field_index(const char *field_name_begin, const char *field_name_end) const\n {\n   size_t size = field_name_end - field_name_begin;\n-  if (size > 0) {\n-    char firstchar = *field_name_begin;\n-    intptr_t field_count = get_field_count();\n-    const char *fn_ptr = m_field_names.cdata();\n-    intptr_t fn_stride = reinterpret_cast<const fixed_dim_type_arrmeta *>(m_field_names.get()->metadata())->stride;\n-    for (intptr_t i = 0; i != field_count; ++i, fn_ptr += fn_stride) {\n-      const string *fn = reinterpret_cast<const string *>(fn_ptr);\n-      const char *begin = fn->begin(), *end = fn->end();\n-      if ((size_t)(end - begin) == size && *begin == firstchar) {\n-        if (memcmp(fn->begin(), field_name_begin, size) == 0) {\n-          return i;\n-        }\n-      }\n+\n+  for (intptr_t i = 0; i < m_field_count; ++i) {\n+    const std::string &name = m_field_names[i];\n+    if (name.compare(0, std::string::npos, field_name_begin, size) == 0) {\n+      return i;\n     }\n   }\n \n   return -1;\n }\n ", "path": "src/dynd/types/struct_type.cpp", "position": 58, "original_position": 56, "commit_id": "49a8d6f4378c92c1d267114b0e0beea9d98532f5", "original_commit_id": "7e6457720b344bc3b362c17f64dcd1a585c31708", "user": {"login": "skrah", "id": 16530421, "avatar_url": "https://avatars1.githubusercontent.com/u/16530421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skrah", "html_url": "https://github.com/skrah", "followers_url": "https://api.github.com/users/skrah/followers", "following_url": "https://api.github.com/users/skrah/following{/other_user}", "gists_url": "https://api.github.com/users/skrah/gists{/gist_id}", "starred_url": "https://api.github.com/users/skrah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skrah/subscriptions", "organizations_url": "https://api.github.com/users/skrah/orgs", "repos_url": "https://api.github.com/users/skrah/repos", "events_url": "https://api.github.com/users/skrah/events{/privacy}", "received_events_url": "https://api.github.com/users/skrah/received_events", "type": "User", "site_admin": false}, "body": "I'm not sure: `const char *field_name_begin` is not guaranteed to be NUL-terminated (I think!), so the size needs to be passed to the comparison.  With a lambda it would be possible, but it would probably not add clarity.\n", "created_at": "2016-02-04T18:52:27Z", "updated_at": "2016-02-04T21:52:54Z", "html_url": "https://github.com/libdynd/libdynd/pull/923#discussion_r51918768", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/923", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51918768"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/923#discussion_r51918768"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/923"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51918768/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51919045", "pull_request_review_id": null, "id": 51919045, "diff_hunk": "@@ -48,45 +50,17 @@ ndt::struct_type::~struct_type() {}\n intptr_t ndt::struct_type::get_field_index(const char *field_name_begin, const char *field_name_end) const\n {\n   size_t size = field_name_end - field_name_begin;\n-  if (size > 0) {\n-    char firstchar = *field_name_begin;\n-    intptr_t field_count = get_field_count();\n-    const char *fn_ptr = m_field_names.cdata();\n-    intptr_t fn_stride = reinterpret_cast<const fixed_dim_type_arrmeta *>(m_field_names.get()->metadata())->stride;\n-    for (intptr_t i = 0; i != field_count; ++i, fn_ptr += fn_stride) {\n-      const string *fn = reinterpret_cast<const string *>(fn_ptr);\n-      const char *begin = fn->begin(), *end = fn->end();\n-      if ((size_t)(end - begin) == size && *begin == firstchar) {\n-        if (memcmp(fn->begin(), field_name_begin, size) == 0) {\n-          return i;\n-        }\n-      }\n+\n+  for (intptr_t i = 0; i < m_field_count; ++i) {\n+    const std::string &name = m_field_names[i];\n+    if (name.compare(0, std::string::npos, field_name_begin, size) == 0) {\n+      return i;\n     }\n   }\n \n   return -1;\n }\n ", "path": "src/dynd/types/struct_type.cpp", "position": 58, "original_position": 56, "commit_id": "49a8d6f4378c92c1d267114b0e0beea9d98532f5", "original_commit_id": "7e6457720b344bc3b362c17f64dcd1a585c31708", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "It's not guaranteed, but it should be NULL-terminated. Otherwise it's kind of a weird thing to do in C++.\n\nWe definitely don't need field_name_end though, so just turning that into a size would be good. (I know this is not code you wrote, but we may as well correct it now.)\n", "created_at": "2016-02-04T18:54:17Z", "updated_at": "2016-02-04T21:52:54Z", "html_url": "https://github.com/libdynd/libdynd/pull/923#discussion_r51919045", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/923", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51919045"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/923#discussion_r51919045"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/923"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51919045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51919473", "pull_request_review_id": null, "id": 51919473, "diff_hunk": "@@ -48,45 +50,17 @@ ndt::struct_type::~struct_type() {}\n intptr_t ndt::struct_type::get_field_index(const char *field_name_begin, const char *field_name_end) const\n {\n   size_t size = field_name_end - field_name_begin;\n-  if (size > 0) {\n-    char firstchar = *field_name_begin;\n-    intptr_t field_count = get_field_count();\n-    const char *fn_ptr = m_field_names.cdata();\n-    intptr_t fn_stride = reinterpret_cast<const fixed_dim_type_arrmeta *>(m_field_names.get()->metadata())->stride;\n-    for (intptr_t i = 0; i != field_count; ++i, fn_ptr += fn_stride) {\n-      const string *fn = reinterpret_cast<const string *>(fn_ptr);\n-      const char *begin = fn->begin(), *end = fn->end();\n-      if ((size_t)(end - begin) == size && *begin == firstchar) {\n-        if (memcmp(fn->begin(), field_name_begin, size) == 0) {\n-          return i;\n-        }\n-      }\n+\n+  for (intptr_t i = 0; i < m_field_count; ++i) {\n+    const std::string &name = m_field_names[i];\n+    if (name.compare(0, std::string::npos, field_name_begin, size) == 0) {\n+      return i;\n     }\n   }\n \n   return -1;\n }\n ", "path": "src/dynd/types/struct_type.cpp", "position": 58, "original_position": 56, "commit_id": "49a8d6f4378c92c1d267114b0e0beea9d98532f5", "original_commit_id": "7e6457720b344bc3b362c17f64dcd1a585c31708", "user": {"login": "skrah", "id": 16530421, "avatar_url": "https://avatars1.githubusercontent.com/u/16530421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skrah", "html_url": "https://github.com/skrah", "followers_url": "https://api.github.com/users/skrah/followers", "following_url": "https://api.github.com/users/skrah/following{/other_user}", "gists_url": "https://api.github.com/users/skrah/gists{/gist_id}", "starred_url": "https://api.github.com/users/skrah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skrah/subscriptions", "organizations_url": "https://api.github.com/users/skrah/orgs", "repos_url": "https://api.github.com/users/skrah/repos", "events_url": "https://api.github.com/users/skrah/events{/privacy}", "received_events_url": "https://api.github.com/users/skrah/received_events", "type": "User", "site_admin": false}, "body": "Ah, so it's okay to change the function signature? I'll try that.\n", "created_at": "2016-02-04T18:56:47Z", "updated_at": "2016-02-04T21:52:54Z", "html_url": "https://github.com/libdynd/libdynd/pull/923#discussion_r51919473", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/923", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51919473"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/923#discussion_r51919473"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/923"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51919473/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51919575", "pull_request_review_id": null, "id": 51919575, "diff_hunk": "@@ -48,45 +50,17 @@ ndt::struct_type::~struct_type() {}\n intptr_t ndt::struct_type::get_field_index(const char *field_name_begin, const char *field_name_end) const\n {\n   size_t size = field_name_end - field_name_begin;\n-  if (size > 0) {\n-    char firstchar = *field_name_begin;\n-    intptr_t field_count = get_field_count();\n-    const char *fn_ptr = m_field_names.cdata();\n-    intptr_t fn_stride = reinterpret_cast<const fixed_dim_type_arrmeta *>(m_field_names.get()->metadata())->stride;\n-    for (intptr_t i = 0; i != field_count; ++i, fn_ptr += fn_stride) {\n-      const string *fn = reinterpret_cast<const string *>(fn_ptr);\n-      const char *begin = fn->begin(), *end = fn->end();\n-      if ((size_t)(end - begin) == size && *begin == firstchar) {\n-        if (memcmp(fn->begin(), field_name_begin, size) == 0) {\n-          return i;\n-        }\n-      }\n+\n+  for (intptr_t i = 0; i < m_field_count; ++i) {\n+    const std::string &name = m_field_names[i];\n+    if (name.compare(0, std::string::npos, field_name_begin, size) == 0) {\n+      return i;\n     }\n   }\n \n   return -1;\n }\n ", "path": "src/dynd/types/struct_type.cpp", "position": 58, "original_position": 56, "commit_id": "49a8d6f4378c92c1d267114b0e0beea9d98532f5", "original_commit_id": "7e6457720b344bc3b362c17f64dcd1a585c31708", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Absolutely! You should feel free to do that in general (and I'll feel free to tell you if the particular change is a bad one).\n", "created_at": "2016-02-04T18:57:27Z", "updated_at": "2016-02-04T21:52:54Z", "html_url": "https://github.com/libdynd/libdynd/pull/923#discussion_r51919575", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/923", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51919575"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/923#discussion_r51919575"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/923"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51919575/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51944669", "pull_request_review_id": null, "id": 51944669, "diff_hunk": "@@ -48,45 +50,17 @@ ndt::struct_type::~struct_type() {}\n intptr_t ndt::struct_type::get_field_index(const char *field_name_begin, const char *field_name_end) const\n {\n   size_t size = field_name_end - field_name_begin;\n-  if (size > 0) {\n-    char firstchar = *field_name_begin;\n-    intptr_t field_count = get_field_count();\n-    const char *fn_ptr = m_field_names.cdata();\n-    intptr_t fn_stride = reinterpret_cast<const fixed_dim_type_arrmeta *>(m_field_names.get()->metadata())->stride;\n-    for (intptr_t i = 0; i != field_count; ++i, fn_ptr += fn_stride) {\n-      const string *fn = reinterpret_cast<const string *>(fn_ptr);\n-      const char *begin = fn->begin(), *end = fn->end();\n-      if ((size_t)(end - begin) == size && *begin == firstchar) {\n-        if (memcmp(fn->begin(), field_name_begin, size) == 0) {\n-          return i;\n-        }\n-      }\n+\n+  for (intptr_t i = 0; i < m_field_count; ++i) {\n+    const std::string &name = m_field_names[i];\n+    if (name.compare(0, std::string::npos, field_name_begin, size) == 0) {\n+      return i;\n     }\n   }\n \n   return -1;\n }\n ", "path": "src/dynd/types/struct_type.cpp", "position": 58, "original_position": 56, "commit_id": "49a8d6f4378c92c1d267114b0e0beea9d98532f5", "original_commit_id": "7e6457720b344bc3b362c17f64dcd1a585c31708", "user": {"login": "skrah", "id": 16530421, "avatar_url": "https://avatars1.githubusercontent.com/u/16530421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skrah", "html_url": "https://github.com/skrah", "followers_url": "https://api.github.com/users/skrah/followers", "following_url": "https://api.github.com/users/skrah/following{/other_user}", "gists_url": "https://api.github.com/users/skrah/gists{/gist_id}", "starred_url": "https://api.github.com/users/skrah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skrah/subscriptions", "organizations_url": "https://api.github.com/users/skrah/orgs", "repos_url": "https://api.github.com/users/skrah/repos", "events_url": "https://api.github.com/users/skrah/events{/privacy}", "received_events_url": "https://api.github.com/users/skrah/received_events", "type": "User", "site_admin": false}, "body": "In the latest patch I just used `std::string`.  It would be nice to have `std::buffer` for temporarily wrapping a `const char *` without making a copy, but it does not seem to exist.\n", "created_at": "2016-02-04T21:59:25Z", "updated_at": "2016-02-04T21:59:25Z", "html_url": "https://github.com/libdynd/libdynd/pull/923#discussion_r51944669", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/923", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51944669"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/923#discussion_r51944669"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/923"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51944669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51953510", "pull_request_review_id": null, "id": 51953510, "diff_hunk": "@@ -48,45 +50,17 @@ ndt::struct_type::~struct_type() {}\n intptr_t ndt::struct_type::get_field_index(const char *field_name_begin, const char *field_name_end) const\n {\n   size_t size = field_name_end - field_name_begin;\n-  if (size > 0) {\n-    char firstchar = *field_name_begin;\n-    intptr_t field_count = get_field_count();\n-    const char *fn_ptr = m_field_names.cdata();\n-    intptr_t fn_stride = reinterpret_cast<const fixed_dim_type_arrmeta *>(m_field_names.get()->metadata())->stride;\n-    for (intptr_t i = 0; i != field_count; ++i, fn_ptr += fn_stride) {\n-      const string *fn = reinterpret_cast<const string *>(fn_ptr);\n-      const char *begin = fn->begin(), *end = fn->end();\n-      if ((size_t)(end - begin) == size && *begin == firstchar) {\n-        if (memcmp(fn->begin(), field_name_begin, size) == 0) {\n-          return i;\n-        }\n-      }\n+\n+  for (intptr_t i = 0; i < m_field_count; ++i) {\n+    const std::string &name = m_field_names[i];\n+    if (name.compare(0, std::string::npos, field_name_begin, size) == 0) {\n+      return i;\n     }\n   }\n \n   return -1;\n }\n ", "path": "src/dynd/types/struct_type.cpp", "position": 58, "original_position": 56, "commit_id": "49a8d6f4378c92c1d267114b0e0beea9d98532f5", "original_commit_id": "7e6457720b344bc3b362c17f64dcd1a585c31708", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "http://en.cppreference.com/w/cpp/header/experimental/string_view is what you're thinking of, I think it's making its way into C++17\n", "created_at": "2016-02-04T23:11:10Z", "updated_at": "2016-02-04T23:11:10Z", "html_url": "https://github.com/libdynd/libdynd/pull/923#discussion_r51953510", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/923", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51953510"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/923#discussion_r51953510"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/923"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/51953510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/52024194", "pull_request_review_id": null, "id": 52024194, "diff_hunk": "@@ -48,45 +50,17 @@ ndt::struct_type::~struct_type() {}\n intptr_t ndt::struct_type::get_field_index(const char *field_name_begin, const char *field_name_end) const\n {\n   size_t size = field_name_end - field_name_begin;\n-  if (size > 0) {\n-    char firstchar = *field_name_begin;\n-    intptr_t field_count = get_field_count();\n-    const char *fn_ptr = m_field_names.cdata();\n-    intptr_t fn_stride = reinterpret_cast<const fixed_dim_type_arrmeta *>(m_field_names.get()->metadata())->stride;\n-    for (intptr_t i = 0; i != field_count; ++i, fn_ptr += fn_stride) {\n-      const string *fn = reinterpret_cast<const string *>(fn_ptr);\n-      const char *begin = fn->begin(), *end = fn->end();\n-      if ((size_t)(end - begin) == size && *begin == firstchar) {\n-        if (memcmp(fn->begin(), field_name_begin, size) == 0) {\n-          return i;\n-        }\n-      }\n+\n+  for (intptr_t i = 0; i < m_field_count; ++i) {\n+    const std::string &name = m_field_names[i];\n+    if (name.compare(0, std::string::npos, field_name_begin, size) == 0) {\n+      return i;\n     }\n   }\n \n   return -1;\n }\n ", "path": "src/dynd/types/struct_type.cpp", "position": 58, "original_position": 56, "commit_id": "49a8d6f4378c92c1d267114b0e0beea9d98532f5", "original_commit_id": "7e6457720b344bc3b362c17f64dcd1a585c31708", "user": {"login": "skrah", "id": 16530421, "avatar_url": "https://avatars1.githubusercontent.com/u/16530421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skrah", "html_url": "https://github.com/skrah", "followers_url": "https://api.github.com/users/skrah/followers", "following_url": "https://api.github.com/users/skrah/following{/other_user}", "gists_url": "https://api.github.com/users/skrah/gists{/gist_id}", "starred_url": "https://api.github.com/users/skrah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skrah/subscriptions", "organizations_url": "https://api.github.com/users/skrah/orgs", "repos_url": "https://api.github.com/users/skrah/repos", "events_url": "https://api.github.com/users/skrah/events{/privacy}", "received_events_url": "https://api.github.com/users/skrah/received_events", "type": "User", "site_admin": false}, "body": "Thanks! That's what I was looking for.\n", "created_at": "2016-02-05T14:53:06Z", "updated_at": "2016-02-05T14:53:06Z", "html_url": "https://github.com/libdynd/libdynd/pull/923#discussion_r52024194", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/923", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/52024194"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/923#discussion_r52024194"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/923"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/52024194/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/52919241", "pull_request_review_id": null, "id": 52919241, "diff_hunk": "@@ -15,4 +15,28 @@\n using namespace std;\n using namespace dynd;\n \n-// TEST(Struct, FieldAccess) { nd::field_access(nd::as_struct({{\"x\", 7}, {\"y\", 0.5}})); }\n+\n+TEST(Struct, FieldAccess)\n+{\n+  nd::array s1 = nd::as_struct({{\"x\", 7}, {\"y\", 0.5}});\n+  EXPECT_EQ(s1, s1);\n+", "path": "tests/func/test_struct.cpp", "position": 10, "original_position": 10, "commit_id": "52fa54f92149c2d4ab340d4f3a09e0a8009bd953", "original_commit_id": "efaf0e1cb8e90ba1e056b00022c9720913983d59", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "`EXPECT_EQ(s1, s1)` seems like a mistake here.\n", "created_at": "2016-02-15T16:34:48Z", "updated_at": "2016-02-17T16:28:26Z", "html_url": "https://github.com/libdynd/libdynd/pull/941#discussion_r52919241", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/941", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/52919241"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/941#discussion_r52919241"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/941"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/52919241/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/52919541", "pull_request_review_id": null, "id": 52919541, "diff_hunk": "@@ -15,4 +15,28 @@\n using namespace std;\n using namespace dynd;\n \n-// TEST(Struct, FieldAccess) { nd::field_access(nd::as_struct({{\"x\", 7}, {\"y\", 0.5}})); }\n+\n+TEST(Struct, FieldAccess)\n+{\n+  nd::array s1 = nd::as_struct({{\"x\", 7}, {\"y\", 0.5}});\n+  EXPECT_EQ(s1, s1);\n+\n+  EXPECT_EQ(7, nd::field_access(s1, \"x\"));\n+  EXPECT_EQ(0.5, nd::field_access(s1, \"y\"));\n+\n+  nd::array a = nd::array({1,2,3,4,5,6,7,8,9,10,11,12});\n+  nd::array s2 = nd::as_struct({{\"a\", a}, {\"s1\", s1}});\n+  EXPECT_EQ(a, nd::field_access(s2, \"a\"));\n+  //EXPECT_EQ(s1, nd::field_access(s2, \"s1\"));\n+  EXPECT_EQ(12, nd::field_access(s2, \"a\")(11));\n+  EXPECT_EQ(0.5, nd::field_access(nd::field_access(s2, \"s1\"), \"y\"));\n+\n+  nd::array b = nd::array({{1,2,3,4}, {5,6,7,8}, {9,10,11,12}});\n+  nd::array s3 = nd::as_struct({{\"b\", b}, {\"s2\", s2}});\n+  EXPECT_EQ(b, nd::field_access(s3, \"b\"));\n+  //EXPECT_EQ(s2, nd::field_access(s3, \"s2\"));\n+  EXPECT_EQ(7, nd::field_access(s3, \"b\")(1)(2));\n+  EXPECT_EQ(10, nd::field_access(nd::field_access(s3, \"s2\"), \"a\")(9));\n+}\n+", "path": "tests/func/test_struct.cpp", "position": 28, "original_position": 28, "commit_id": "52fa54f92149c2d4ab340d4f3a09e0a8009bd953", "original_commit_id": "efaf0e1cb8e90ba1e056b00022c9720913983d59", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "In general, can you use `EXPECT_ARRAY_EQ` instead of `EXPECT_EQ`? The reason being `EXPECT_ARRAY_EQ` will also check the `ndt::type`, whereas `EXPECT_EQ` will only check the values. You shouldn't need to change anything else, just the macro name.\n", "created_at": "2016-02-15T16:36:52Z", "updated_at": "2016-02-17T16:28:26Z", "html_url": "https://github.com/libdynd/libdynd/pull/941#discussion_r52919541", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/941", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/52919541"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/941#discussion_r52919541"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/941"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/52919541/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/52919794", "pull_request_review_id": null, "id": 52919794, "diff_hunk": "@@ -39,7 +71,7 @@ namespace ndt {\n \n   template <>\n   struct traits<nd::field_access_kernel> {\n-    static type equivalent() { return type(\"({...}) -> void\"); }\n+    static type equivalent() { return type(\"({...}, field_name : string) -> Any\"); }\n   };\n ", "path": "include/dynd/kernels/field_access_kernel.hpp", "position": 82, "original_position": 82, "commit_id": "52fa54f92149c2d4ab340d4f3a09e0a8009bd953", "original_commit_id": "efaf0e1cb8e90ba1e056b00022c9720913983d59", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "A bit of bikeshedding here, but what should this callable be called? Do people like `nd::field_access`? Ping @mwiebe @insertinterestingnamehere \n", "created_at": "2016-02-15T16:38:10Z", "updated_at": "2016-02-17T16:28:26Z", "html_url": "https://github.com/libdynd/libdynd/pull/941#discussion_r52919794", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/941", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/52919794"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/941#discussion_r52919794"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/941"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/52919794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/52920443", "pull_request_review_id": null, "id": 52920443, "diff_hunk": "@@ -15,4 +15,28 @@\n using namespace std;\n using namespace dynd;\n \n-// TEST(Struct, FieldAccess) { nd::field_access(nd::as_struct({{\"x\", 7}, {\"y\", 0.5}})); }\n+\n+TEST(Struct, FieldAccess)\n+{\n+  nd::array s1 = nd::as_struct({{\"x\", 7}, {\"y\", 0.5}});\n+  EXPECT_EQ(s1, s1);\n+\n+  EXPECT_EQ(7, nd::field_access(s1, \"x\"));\n+  EXPECT_EQ(0.5, nd::field_access(s1, \"y\"));\n+\n+  nd::array a = nd::array({1,2,3,4,5,6,7,8,9,10,11,12});\n+  nd::array s2 = nd::as_struct({{\"a\", a}, {\"s1\", s1}});\n+  EXPECT_EQ(a, nd::field_access(s2, \"a\"));\n+  //EXPECT_EQ(s1, nd::field_access(s2, \"s1\"));\n+  EXPECT_EQ(12, nd::field_access(s2, \"a\")(11));\n+  EXPECT_EQ(0.5, nd::field_access(nd::field_access(s2, \"s1\"), \"y\"));\n+\n+  nd::array b = nd::array({{1,2,3,4}, {5,6,7,8}, {9,10,11,12}});\n+  nd::array s3 = nd::as_struct({{\"b\", b}, {\"s2\", s2}});\n+  EXPECT_EQ(b, nd::field_access(s3, \"b\"));\n+  //EXPECT_EQ(s2, nd::field_access(s3, \"s2\"));\n+  EXPECT_EQ(7, nd::field_access(s3, \"b\")(1)(2));\n+  EXPECT_EQ(10, nd::field_access(nd::field_access(s3, \"s2\"), \"a\")(9));\n+}\n+", "path": "tests/func/test_struct.cpp", "position": 28, "original_position": 28, "commit_id": "52fa54f92149c2d4ab340d4f3a09e0a8009bd953", "original_commit_id": "efaf0e1cb8e90ba1e056b00022c9720913983d59", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Can you also add some tests for arrays of structs? e.g. `10 * {x: float64, y: int32}` and `10 * var * {x: float64, y: int32}` and whatever. This should work just with `elwise`, but we should test it.\n\nTo make that work, we'll have to change `return callable::make<field_access_kernel>();` to `return functional::elwise(callable::make<field_access_kernel>());` in `field_access::make`.\n", "created_at": "2016-02-15T16:43:40Z", "updated_at": "2016-02-17T16:28:26Z", "html_url": "https://github.com/libdynd/libdynd/pull/941#discussion_r52920443", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/941", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/52920443"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/941#discussion_r52920443"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/941"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/52920443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/52939564", "pull_request_review_id": null, "id": 52939564, "diff_hunk": "@@ -15,4 +15,28 @@\n using namespace std;\n using namespace dynd;\n \n-// TEST(Struct, FieldAccess) { nd::field_access(nd::as_struct({{\"x\", 7}, {\"y\", 0.5}})); }\n+\n+TEST(Struct, FieldAccess)\n+{\n+  nd::array s1 = nd::as_struct({{\"x\", 7}, {\"y\", 0.5}});\n+  EXPECT_EQ(s1, s1);\n+\n+  EXPECT_EQ(7, nd::field_access(s1, \"x\"));\n+  EXPECT_EQ(0.5, nd::field_access(s1, \"y\"));\n+\n+  nd::array a = nd::array({1,2,3,4,5,6,7,8,9,10,11,12});\n+  nd::array s2 = nd::as_struct({{\"a\", a}, {\"s1\", s1}});\n+  EXPECT_EQ(a, nd::field_access(s2, \"a\"));\n+  //EXPECT_EQ(s1, nd::field_access(s2, \"s1\"));\n+  EXPECT_EQ(12, nd::field_access(s2, \"a\")(11));\n+  EXPECT_EQ(0.5, nd::field_access(nd::field_access(s2, \"s1\"), \"y\"));\n+\n+  nd::array b = nd::array({{1,2,3,4}, {5,6,7,8}, {9,10,11,12}});\n+  nd::array s3 = nd::as_struct({{\"b\", b}, {\"s2\", s2}});\n+  EXPECT_EQ(b, nd::field_access(s3, \"b\"));\n+  //EXPECT_EQ(s2, nd::field_access(s3, \"s2\"));\n+  EXPECT_EQ(7, nd::field_access(s3, \"b\")(1)(2));\n+  EXPECT_EQ(10, nd::field_access(nd::field_access(s3, \"s2\"), \"a\")(9));\n+}\n+", "path": "tests/func/test_struct.cpp", "position": 28, "original_position": 28, "commit_id": "52fa54f92149c2d4ab340d4f3a09e0a8009bd953", "original_commit_id": "efaf0e1cb8e90ba1e056b00022c9720913983d59", "user": {"login": "skrah", "id": 16530421, "avatar_url": "https://avatars1.githubusercontent.com/u/16530421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skrah", "html_url": "https://github.com/skrah", "followers_url": "https://api.github.com/users/skrah/followers", "following_url": "https://api.github.com/users/skrah/following{/other_user}", "gists_url": "https://api.github.com/users/skrah/gists{/gist_id}", "starred_url": "https://api.github.com/users/skrah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skrah/subscriptions", "organizations_url": "https://api.github.com/users/skrah/orgs", "repos_url": "https://api.github.com/users/skrah/repos", "events_url": "https://api.github.com/users/skrah/events{/privacy}", "received_events_url": "https://api.github.com/users/skrah/received_events", "type": "User", "site_admin": false}, "body": "Thanks for all the comments!  -- I still get broadcast errors even with `EXPECT_ARRAY_EQ(s2, nd::field_access(s3, \"s2\"));`.  I'll have to look into that.\n", "created_at": "2016-02-15T20:14:26Z", "updated_at": "2016-02-17T16:28:26Z", "html_url": "https://github.com/libdynd/libdynd/pull/941#discussion_r52939564", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/941", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/52939564"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/941#discussion_r52939564"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/941"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/52939564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/53223690", "pull_request_review_id": null, "id": 53223690, "diff_hunk": "@@ -6,30 +6,62 @@\n #pragma once\n \n #include <dynd/kernels/base_kernel.hpp>\n+#include <dynd/func/assignment.hpp>\n \n namespace dynd {\n namespace nd {\n \n-  // This is an example of accessing fields in a struct. It currently assumes that the struct has types {int, double}.\n   struct field_access_kernel : base_kernel<field_access_kernel, 1> {\n-    const uintptr_t *data_offsets;\n+    const uintptr_t data_offset;\n \n-    field_access_kernel(const uintptr_t *data_offsets) : data_offsets(data_offsets) {}\n+    field_access_kernel(uintptr_t data_offset) : data_offset(data_offset) {}\n \n-    void single(char *DYND_UNUSED(dst), char *const *src)\n+    ~field_access_kernel() { get_child()->destroy(); }\n+\n+    void single(char *res, char *const *src)\n+    {\n+      char *const field_src[1] = {src[0] + data_offset};\n+      get_child()->single(res, field_src);\n+    }\n+\n+    static void resolve_dst_type(char *DYND_UNUSED(static_data), char *DYND_UNUSED(data), ndt::type &dst_tp,\n+                                 intptr_t DYND_UNUSED(nsrc), const ndt::type *src_tp, intptr_t DYND_UNUSED(nkwd),\n+                                 const array *kwds, const std::map<std::string, ndt::type> &DYND_UNUSED(tp_vars))\n     {\n-      std::cout << \"x = \" << *reinterpret_cast<int *>(src[0] + data_offsets[0]) << std::endl;\n-      std::cout << \"y = \" << *reinterpret_cast<double *>(src[0] + data_offsets[1]) << std::endl;\n+      dst_tp = get_field_type(src_tp, kwds);\n     }\n \n-    static void instantiate(char *DYND_UNUSED(static_data), char *DYND_UNUSED(data), kernel_builder *ckb,\n-                            const ndt::type &DYND_UNUSED(dst_tp), const char *DYND_UNUSED(dst_arrmeta),\n-                            intptr_t DYND_UNUSED(nsrc), const ndt::type *DYND_UNUSED(src_tp),\n+    static void instantiate(char *DYND_UNUSED(static_data), char *data, kernel_builder *ckb, const ndt::type &dst_tp,\n+                            const char *dst_arrmeta, intptr_t DYND_UNUSED(nsrc), const ndt::type *src_tp,\n                             const char *const *src_arrmeta, kernel_request_t kernreq, intptr_t DYND_UNUSED(nkwd),\n-                            const array *DYND_UNUSED(kwds),\n-                            const std::map<std::string, ndt::type> &DYND_UNUSED(tp_vars))\n+                            const array *kwds, const std::map<std::string, ndt::type> &tp_vars)\n+    {\n+      const uintptr_t data_offset = get_data_offset(src_tp, src_arrmeta, kwds);\n+      const ndt::type field_type[1] = {get_field_type(src_tp, kwds)};\n+      const nd::array field_value = nd::empty(field_type[0]);\n+      const char *field_metadata[1] = {field_value->metadata()};\n+\n+      ckb->emplace_back<field_access_kernel>(kernreq, data_offset);\n+\n+      static const array error_mode(opt<assign_error_mode>());\n+      assign::get()->instantiate(assign::get()->static_data(), data, ckb, dst_tp, dst_arrmeta, 1, field_type,\n+                                 field_metadata, kernreq | kernel_request_data_only, 1, &error_mode, tp_vars);\n+    };\n+\n+    static const ndt::type &get_field_type(const ndt::type *src_tp, const array *kwds)\n+    {\n+      const ndt::struct_type *s = src_tp->extended<ndt::struct_type>();\n+      const std::string &name = kwds[0].as<std::string>();\n+      uintptr_t index = s->get_field_index(name);", "path": "include/dynd/kernels/field_access_kernel.hpp", "position": 61, "original_position": 61, "commit_id": "c71e490fbb46caea3dbeb4854ae2837f0e2d2981", "original_commit_id": "c71e490fbb46caea3dbeb4854ae2837f0e2d2981", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Yeah, you're right, we need an error check like that. I'll add it in after I fix the other issues.\n", "created_at": "2016-02-17T20:09:48Z", "updated_at": "2016-02-17T20:09:48Z", "html_url": "https://github.com/libdynd/libdynd/pull/954#discussion_r53223690", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/954", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/53223690"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/954#discussion_r53223690"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/954"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/53223690/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/53223550", "pull_request_review_id": null, "id": 53223550, "diff_hunk": "@@ -6,30 +6,62 @@\n #pragma once\n \n #include <dynd/kernels/base_kernel.hpp>\n+#include <dynd/func/assignment.hpp>\n \n namespace dynd {\n namespace nd {\n \n-  // This is an example of accessing fields in a struct. It currently assumes that the struct has types {int, double}.\n   struct field_access_kernel : base_kernel<field_access_kernel, 1> {\n-    const uintptr_t *data_offsets;\n+    const uintptr_t data_offset;\n \n-    field_access_kernel(const uintptr_t *data_offsets) : data_offsets(data_offsets) {}\n+    field_access_kernel(uintptr_t data_offset) : data_offset(data_offset) {}\n \n-    void single(char *DYND_UNUSED(dst), char *const *src)\n+    ~field_access_kernel() { get_child()->destroy(); }\n+\n+    void single(char *res, char *const *src)\n+    {\n+      char *const field_src[1] = {src[0] + data_offset};\n+      get_child()->single(res, field_src);\n+    }\n+\n+    static void resolve_dst_type(char *DYND_UNUSED(static_data), char *DYND_UNUSED(data), ndt::type &dst_tp,\n+                                 intptr_t DYND_UNUSED(nsrc), const ndt::type *src_tp, intptr_t DYND_UNUSED(nkwd),\n+                                 const array *kwds, const std::map<std::string, ndt::type> &DYND_UNUSED(tp_vars))\n     {\n-      std::cout << \"x = \" << *reinterpret_cast<int *>(src[0] + data_offsets[0]) << std::endl;\n-      std::cout << \"y = \" << *reinterpret_cast<double *>(src[0] + data_offsets[1]) << std::endl;\n+      dst_tp = get_field_type(src_tp, kwds);\n     }\n \n-    static void instantiate(char *DYND_UNUSED(static_data), char *DYND_UNUSED(data), kernel_builder *ckb,\n-                            const ndt::type &DYND_UNUSED(dst_tp), const char *DYND_UNUSED(dst_arrmeta),\n-                            intptr_t DYND_UNUSED(nsrc), const ndt::type *DYND_UNUSED(src_tp),\n+    static void instantiate(char *DYND_UNUSED(static_data), char *data, kernel_builder *ckb, const ndt::type &dst_tp,\n+                            const char *dst_arrmeta, intptr_t DYND_UNUSED(nsrc), const ndt::type *src_tp,\n                             const char *const *src_arrmeta, kernel_request_t kernreq, intptr_t DYND_UNUSED(nkwd),\n-                            const array *DYND_UNUSED(kwds),\n-                            const std::map<std::string, ndt::type> &DYND_UNUSED(tp_vars))\n+                            const array *kwds, const std::map<std::string, ndt::type> &tp_vars)\n+    {\n+      const uintptr_t data_offset = get_data_offset(src_tp, src_arrmeta, kwds);\n+      const ndt::type field_type[1] = {get_field_type(src_tp, kwds)};\n+      const nd::array field_value = nd::empty(field_type[0]);\n+      const char *field_metadata[1] = {field_value->metadata()};\n+\n+      ckb->emplace_back<field_access_kernel>(kernreq, data_offset);\n+\n+      static const array error_mode(opt<assign_error_mode>());\n+      assign::get()->instantiate(assign::get()->static_data(), data, ckb, dst_tp, dst_arrmeta, 1, field_type,\n+                                 field_metadata, kernreq | kernel_request_data_only, 1, &error_mode, tp_vars);\n+    };\n+\n+    static const ndt::type &get_field_type(const ndt::type *src_tp, const array *kwds)\n+    {\n+      const ndt::struct_type *s = src_tp->extended<ndt::struct_type>();\n+      const std::string &name = kwds[0].as<std::string>();\n+      uintptr_t index = s->get_field_index(name);", "path": "include/dynd/kernels/field_access_kernel.hpp", "position": 61, "original_position": 61, "commit_id": "c71e490fbb46caea3dbeb4854ae2837f0e2d2981", "original_commit_id": "c71e490fbb46caea3dbeb4854ae2837f0e2d2981", "user": {"login": "skrah", "id": 16530421, "avatar_url": "https://avatars1.githubusercontent.com/u/16530421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skrah", "html_url": "https://github.com/skrah", "followers_url": "https://api.github.com/users/skrah/followers", "following_url": "https://api.github.com/users/skrah/following{/other_user}", "gists_url": "https://api.github.com/users/skrah/gists{/gist_id}", "starred_url": "https://api.github.com/users/skrah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skrah/subscriptions", "organizations_url": "https://api.github.com/users/skrah/orgs", "repos_url": "https://api.github.com/users/skrah/repos", "events_url": "https://api.github.com/users/skrah/events{/privacy}", "received_events_url": "https://api.github.com/users/skrah/received_events", "type": "User", "site_admin": false}, "body": "Looking at it again, I think we need something like:\n\n```\nintptr_t index = s->get_field_index(name);\n\n if (index == -1) {\n    throw std::invalid_argument(\"no field named '\" + name + \"'\");\n }\n```\n\nOr should we throw the exception in get_field_index()?\n", "created_at": "2016-02-17T20:08:48Z", "updated_at": "2016-02-17T20:10:11Z", "html_url": "https://github.com/libdynd/libdynd/pull/954#discussion_r53223550", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/954", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/53223550"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/954#discussion_r53223550"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/954"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/53223550/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/53366040", "pull_request_review_id": null, "id": 53366040, "diff_hunk": "@@ -328,10 +328,10 @@ TEST(Arithmetic, OptionArrayLHSInt32)\n   EXPECT_ARRAY_EQ(nd::is_na(data * 2), expected);\n   EXPECT_ARRAY_EQ(nd::is_na(data / 1), expected);\n \n-  auto add = nd::array{1, 41, 2}.ucast(ndt::type(\"?int32\")).eval();\n-  auto sub = nd::array{-1, 39, 0}.ucast(ndt::type(\"?int32\")).eval();\n-  auto mul = nd::array{0, 80, 2}.ucast(ndt::type(\"?int32\")).eval();\n-  auto div = nd::array{0, 40, 1}.ucast(ndt::type(\"?int32\")).eval();\n+  nd::array add = nd::empty(ndt::type(\"3 * ?int32\")).assign({1, 41, 2});\n+  nd::array sub = nd::empty(ndt::type(\"3 * ?int32\")).assign({-1, 39, 0});\n+  nd::array mul = nd::empty(ndt::type(\"3 * ?int32\")).assign({0, 80, 2});\n+  nd::array div = nd::empty(ndt::type(\"3 * ?int32\")).assign({0, 40, 1});", "path": "tests/func/test_arithmetic.cpp", "position": 11, "original_position": 11, "commit_id": "803e31f8162006a5dfb899ea088cfdb4992ca949", "original_commit_id": "803e31f8162006a5dfb899ea088cfdb4992ca949", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "Is it be reasonable to make `nd::array({0, 40, 1}, \"?int32\")` or `nd::array({0, 40, 1}, \"3 * ?int32\")` work? A succinct spelling of this would be nice.\n", "created_at": "2016-02-18T19:13:00Z", "updated_at": "2016-02-18T19:13:00Z", "html_url": "https://github.com/libdynd/libdynd/pull/960#discussion_r53366040", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/960", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/53366040"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/960#discussion_r53366040"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/960"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/53366040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/53366142", "pull_request_review_id": null, "id": 53366142, "diff_hunk": "@@ -328,10 +328,10 @@ TEST(Arithmetic, OptionArrayLHSInt32)\n   EXPECT_ARRAY_EQ(nd::is_na(data * 2), expected);\n   EXPECT_ARRAY_EQ(nd::is_na(data / 1), expected);\n \n-  auto add = nd::array{1, 41, 2}.ucast(ndt::type(\"?int32\")).eval();\n-  auto sub = nd::array{-1, 39, 0}.ucast(ndt::type(\"?int32\")).eval();\n-  auto mul = nd::array{0, 80, 2}.ucast(ndt::type(\"?int32\")).eval();\n-  auto div = nd::array{0, 40, 1}.ucast(ndt::type(\"?int32\")).eval();\n+  nd::array add = nd::empty(ndt::type(\"3 * ?int32\")).assign({1, 41, 2});\n+  nd::array sub = nd::empty(ndt::type(\"3 * ?int32\")).assign({-1, 39, 0});\n+  nd::array mul = nd::empty(ndt::type(\"3 * ?int32\")).assign({0, 80, 2});\n+  nd::array div = nd::empty(ndt::type(\"3 * ?int32\")).assign({0, 40, 1});", "path": "tests/func/test_arithmetic.cpp", "position": 11, "original_position": 11, "commit_id": "803e31f8162006a5dfb899ea088cfdb4992ca949", "original_commit_id": "803e31f8162006a5dfb899ea088cfdb4992ca949", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "No, it's not reasonable. Already on my mind. :)\n\nEdit: Ah, sorry, I misunderstood your comment. The code in the tests is currently not reasonable. You are exactly right, and we need some sort of simple, general mechanism for putting dtypes in places where types can be accepted. Like for views or for casting.\n", "created_at": "2016-02-18T19:13:37Z", "updated_at": "2016-02-18T19:15:03Z", "html_url": "https://github.com/libdynd/libdynd/pull/960#discussion_r53366142", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/960", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/53366142"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/960#discussion_r53366142"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/960"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/53366142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/53188729", "pull_request_review_id": null, "id": 53188729, "diff_hunk": "@@ -0,0 +1,82 @@\n+//\n+// Copyright (C) 2011-15 DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+// String split kernel\n+\n+#pragma once\n+\n+#include <dynd/string.hpp>\n+#include <dynd/string_search.hpp>\n+#include <dynd/types/var_dim_type.hpp>\n+\n+namespace dynd {\n+  namespace nd {\n+\n+    struct string_split_kernel\n+      : base_kernel<string_split_kernel, 2> {\n+\n+      typedef string_split_kernel self_type;\n+", "path": "include/dynd/kernels/string_split_kernel.hpp", "position": null, "original_position": 21, "commit_id": "4916f7e652ee607ab9b06b3fe16b58d8ab55cda6", "original_commit_id": "9581e5c0bf12cc6444672d956a7ffd7e12c7902c", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Can we remove the self_type here? That was an old pattern of ours, but is pretty unnecessary now.\n", "created_at": "2016-02-17T16:20:19Z", "updated_at": "2016-02-19T13:00:54Z", "html_url": "https://github.com/libdynd/libdynd/pull/951#discussion_r53188729", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/951", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/53188729"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/951#discussion_r53188729"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/951"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/53188729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/53188890", "pull_request_review_id": null, "id": 53188890, "diff_hunk": "@@ -0,0 +1,82 @@\n+//\n+// Copyright (C) 2011-15 DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+// String split kernel\n+\n+#pragma once\n+\n+#include <dynd/string.hpp>\n+#include <dynd/string_search.hpp>\n+#include <dynd/types/var_dim_type.hpp>\n+\n+namespace dynd {\n+  namespace nd {\n+\n+    struct string_split_kernel\n+      : base_kernel<string_split_kernel, 2> {\n+\n+      typedef string_split_kernel self_type;\n+\n+      memory_block_data *m_dst_memblock;\n+", "path": "include/dynd/kernels/string_split_kernel.hpp", "position": null, "original_position": 23, "commit_id": "4916f7e652ee607ab9b06b3fe16b58d8ab55cda6", "original_commit_id": "9581e5c0bf12cc6444672d956a7ffd7e12c7902c", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Rather then a `memory_block_data *`, let's store this as a `intrusive_ptr<memory_block_data>`, which is exactly what it is in the var_dim arrmeta. That gives us reference counting, but the semantics should otherwise be the same.\n", "created_at": "2016-02-17T16:21:10Z", "updated_at": "2016-02-19T13:00:54Z", "html_url": "https://github.com/libdynd/libdynd/pull/951#discussion_r53188890", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/951", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/53188890"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/951#discussion_r53188890"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/951"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/53188890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/53188959", "pull_request_review_id": null, "id": 53188959, "diff_hunk": "@@ -0,0 +1,82 @@\n+//\n+// Copyright (C) 2011-15 DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+// String split kernel\n+\n+#pragma once\n+\n+#include <dynd/string.hpp>\n+#include <dynd/string_search.hpp>\n+#include <dynd/types/var_dim_type.hpp>\n+\n+namespace dynd {\n+  namespace nd {\n+\n+    struct string_split_kernel\n+      : base_kernel<string_split_kernel, 2> {\n+\n+      typedef string_split_kernel self_type;\n+\n+      memory_block_data *m_dst_memblock;\n+\n+      string_split_kernel(memory_block_data *dst_memblock) :\n+        m_dst_memblock(dst_memblock) {\n+\n+      }\n+\n+      static void instantiate(char *DYND_UNUSED(static_data), char *DYND_UNUSED(data),\n+                              kernel_builder *ckb, const ndt::type &DYND_UNUSED(dst_tp),\n+                              const char *dst_arrmeta, intptr_t DYND_UNUSED(nsrc),\n+                              const ndt::type *DYND_UNUSED(src_tp),\n+                              const char *const *DYND_UNUSED(src_arrmeta),\n+                              kernel_request_t kernreq, intptr_t DYND_UNUSED(kwd),\n+                              const nd::array *DYND_UNUSED(kwds),\n+                              const std::map<std::string, ndt::type> &DYND_UNUSED(tp_vars)) {\n+        ckb->emplace_back<self_type>(\n+          kernreq, reinterpret_cast<const ndt::var_dim_type::metadata_type *>(dst_arrmeta)->blockref.get());\n+      }\n+", "path": "include/dynd/kernels/string_split_kernel.hpp", "position": null, "original_position": 40, "commit_id": "4916f7e652ee607ab9b06b3fe16b58d8ab55cda6", "original_commit_id": "9581e5c0bf12cc6444672d956a7ffd7e12c7902c", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "You should be able to drop the `.get()` if we change how we store the memblock.\n", "created_at": "2016-02-17T16:21:36Z", "updated_at": "2016-02-19T13:00:54Z", "html_url": "https://github.com/libdynd/libdynd/pull/951#discussion_r53188959", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/951", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/53188959"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/951#discussion_r53188959"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/951"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/53188959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/53189001", "pull_request_review_id": null, "id": 53189001, "diff_hunk": "@@ -0,0 +1,82 @@\n+//\n+// Copyright (C) 2011-15 DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+// String split kernel\n+\n+#pragma once\n+\n+#include <dynd/string.hpp>\n+#include <dynd/string_search.hpp>\n+#include <dynd/types/var_dim_type.hpp>\n+\n+namespace dynd {\n+  namespace nd {\n+\n+    struct string_split_kernel\n+      : base_kernel<string_split_kernel, 2> {\n+\n+      typedef string_split_kernel self_type;\n+\n+      memory_block_data *m_dst_memblock;\n+\n+      string_split_kernel(memory_block_data *dst_memblock) :\n+        m_dst_memblock(dst_memblock) {\n+\n+      }\n+\n+      static void instantiate(char *DYND_UNUSED(static_data), char *DYND_UNUSED(data),\n+                              kernel_builder *ckb, const ndt::type &DYND_UNUSED(dst_tp),\n+                              const char *dst_arrmeta, intptr_t DYND_UNUSED(nsrc),\n+                              const ndt::type *DYND_UNUSED(src_tp),\n+                              const char *const *DYND_UNUSED(src_arrmeta),\n+                              kernel_request_t kernreq, intptr_t DYND_UNUSED(kwd),\n+                              const nd::array *DYND_UNUSED(kwds),\n+                              const std::map<std::string, ndt::type> &DYND_UNUSED(tp_vars)) {\n+        ckb->emplace_back<self_type>(\n+          kernreq, reinterpret_cast<const ndt::var_dim_type::metadata_type *>(dst_arrmeta)->blockref.get());\n+      }\n+\n+      void single(char *dst, char *const *src) {\n+        ndt::var_dim_type::data_type *dst_v = reinterpret_cast<ndt::var_dim_type::data_type *>(dst);\n+\n+        const string *const *s = reinterpret_cast<const string *const *>(src);\n+        const string &haystack = *(s[0]);\n+        const string &needle = *(s[1]);\n+\n+        intptr_t count = dynd::string_count(haystack, needle);\n+", "path": "include/dynd/kernels/string_split_kernel.hpp", "position": 47, "original_position": 49, "commit_id": "4916f7e652ee607ab9b06b3fe16b58d8ab55cda6", "original_commit_id": "9581e5c0bf12cc6444672d956a7ffd7e12c7902c", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Should be able to just do `string_count`, not `dynd::string_count`.\n", "created_at": "2016-02-17T16:21:54Z", "updated_at": "2016-02-19T13:00:54Z", "html_url": "https://github.com/libdynd/libdynd/pull/951#discussion_r53189001", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/951", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/53189001"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/951#discussion_r53189001"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/951"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/53189001/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/53189330", "pull_request_review_id": null, "id": 53189330, "diff_hunk": "@@ -0,0 +1,82 @@\n+//\n+// Copyright (C) 2011-15 DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+// String split kernel\n+\n+#pragma once\n+\n+#include <dynd/string.hpp>\n+#include <dynd/string_search.hpp>\n+#include <dynd/types/var_dim_type.hpp>\n+\n+namespace dynd {\n+  namespace nd {\n+\n+    struct string_split_kernel\n+      : base_kernel<string_split_kernel, 2> {\n+\n+      typedef string_split_kernel self_type;\n+\n+      memory_block_data *m_dst_memblock;\n+\n+      string_split_kernel(memory_block_data *dst_memblock) :\n+        m_dst_memblock(dst_memblock) {\n+\n+      }\n+\n+      static void instantiate(char *DYND_UNUSED(static_data), char *DYND_UNUSED(data),\n+                              kernel_builder *ckb, const ndt::type &DYND_UNUSED(dst_tp),\n+                              const char *dst_arrmeta, intptr_t DYND_UNUSED(nsrc),\n+                              const ndt::type *DYND_UNUSED(src_tp),\n+                              const char *const *DYND_UNUSED(src_arrmeta),\n+                              kernel_request_t kernreq, intptr_t DYND_UNUSED(kwd),\n+                              const nd::array *DYND_UNUSED(kwds),\n+                              const std::map<std::string, ndt::type> &DYND_UNUSED(tp_vars)) {\n+        ckb->emplace_back<self_type>(\n+          kernreq, reinterpret_cast<const ndt::var_dim_type::metadata_type *>(dst_arrmeta)->blockref.get());\n+      }\n+\n+      void single(char *dst, char *const *src) {\n+        ndt::var_dim_type::data_type *dst_v = reinterpret_cast<ndt::var_dim_type::data_type *>(dst);\n+\n+        const string *const *s = reinterpret_cast<const string *const *>(src);\n+        const string &haystack = *(s[0]);\n+        const string &needle = *(s[1]);\n+\n+        intptr_t count = dynd::string_count(haystack, needle);\n+\n+        if (count == 0) {\n+          dst_v->begin = m_dst_memblock->alloc(1);\n+          dst_v->size = 1;\n+          string *dst_str = reinterpret_cast<string *>(dst_v->begin);\n+          new(&dst_str[0]) string(haystack);\n+          return;", "path": "include/dynd/kernels/string_split_kernel.hpp", "position": null, "original_position": 55, "commit_id": "4916f7e652ee607ab9b06b3fe16b58d8ab55cda6", "original_commit_id": "9581e5c0bf12cc6444672d956a7ffd7e12c7902c", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "You shouldn't need in-place new here, I believe dst_memblock->alloc should initialize the strings to their default state (a NULL pointer). So you should be able to just do dst_str->assign(...) or whatever.\n", "created_at": "2016-02-17T16:23:40Z", "updated_at": "2016-02-19T13:00:54Z", "html_url": "https://github.com/libdynd/libdynd/pull/951#discussion_r53189330", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/951", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/53189330"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/951#discussion_r53189330"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/951"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/53189330/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/53189662", "pull_request_review_id": null, "id": 53189662, "diff_hunk": "@@ -559,6 +559,43 @@ TEST(StringType, Replace) {\n }\n \n \n+TEST(StringType, Split) {\n+  nd::array a, b, c;\n+\n+  a = {\"xaxxbxxxc\", \"xxxabcxxxabcxxx\", \"cabababc\", \"foobar\"};\n+  b = {\"x\",         \"abc\",             \"ab\",       \"\"};\n+\n+  c = nd::string_split(a, b);\n+\n+  EXPECT_EQ(1u, c(0).get_shape().size());\n+  EXPECT_EQ(7, c(0).get_shape()[0]);\n+  EXPECT_EQ(\"\", c(0)(0));\n+  EXPECT_EQ(\"a\", c(0)(1));\n+  EXPECT_EQ(\"\", c(0)(2));\n+  EXPECT_EQ(\"b\", c(0)(3));\n+  EXPECT_EQ(\"\", c(0)(4));\n+  EXPECT_EQ(\"\", c(0)(5));\n+  EXPECT_EQ(\"c\", c(0)(6));\n+\n+  EXPECT_EQ(1u, c(1).get_shape().size());\n+  EXPECT_EQ(3, c(1).get_shape()[0]);\n+  EXPECT_EQ(\"xxx\", c(1)(0));\n+  EXPECT_EQ(\"xxx\", c(1)(1));\n+  EXPECT_EQ(\"xxx\", c(1)(2));\n+\n+  EXPECT_EQ(1u, c(2).get_shape().size());\n+  EXPECT_EQ(4, c(2).get_shape()[0]);\n+  EXPECT_EQ(\"c\", c(2)(0));\n+  EXPECT_EQ(\"\", c(2)(1));\n+  EXPECT_EQ(\"\", c(2)(2));\n+  EXPECT_EQ(\"c\", c(2)(3));\n+\n+  EXPECT_EQ(1u, c(3).get_shape().size());\n+  EXPECT_EQ(1, c(3).get_shape()[0]);\n+  EXPECT_EQ(\"foobar\", c(3)(0));\n+}", "path": "tests/types/test_string_type.cpp", "position": 38, "original_position": 38, "commit_id": "4916f7e652ee607ab9b06b3fe16b58d8ab55cda6", "original_commit_id": "9581e5c0bf12cc6444672d956a7ffd7e12c7902c", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Okay, so you should be able to use EXPECT_ARRAY_EQ here. It might be a little fiddly with the var dims though, so I'll play with it after we merge this PR.\n", "created_at": "2016-02-17T16:25:45Z", "updated_at": "2016-02-19T13:00:54Z", "html_url": "https://github.com/libdynd/libdynd/pull/951#discussion_r53189662", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/951", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/53189662"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/951#discussion_r53189662"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/951"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/53189662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/53190678", "pull_request_review_id": null, "id": 53190678, "diff_hunk": "@@ -0,0 +1,82 @@\n+//\n+// Copyright (C) 2011-15 DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+// String split kernel\n+\n+#pragma once\n+\n+#include <dynd/string.hpp>\n+#include <dynd/string_search.hpp>\n+#include <dynd/types/var_dim_type.hpp>\n+\n+namespace dynd {\n+  namespace nd {\n+\n+    struct string_split_kernel\n+      : base_kernel<string_split_kernel, 2> {\n+\n+      typedef string_split_kernel self_type;\n+\n+      memory_block_data *m_dst_memblock;\n+\n+      string_split_kernel(memory_block_data *dst_memblock) :\n+        m_dst_memblock(dst_memblock) {\n+\n+      }\n+\n+      static void instantiate(char *DYND_UNUSED(static_data), char *DYND_UNUSED(data),\n+                              kernel_builder *ckb, const ndt::type &DYND_UNUSED(dst_tp),\n+                              const char *dst_arrmeta, intptr_t DYND_UNUSED(nsrc),\n+                              const ndt::type *DYND_UNUSED(src_tp),\n+                              const char *const *DYND_UNUSED(src_arrmeta),\n+                              kernel_request_t kernreq, intptr_t DYND_UNUSED(kwd),\n+                              const nd::array *DYND_UNUSED(kwds),\n+                              const std::map<std::string, ndt::type> &DYND_UNUSED(tp_vars)) {\n+        ckb->emplace_back<self_type>(\n+          kernreq, reinterpret_cast<const ndt::var_dim_type::metadata_type *>(dst_arrmeta)->blockref.get());\n+      }\n+\n+      void single(char *dst, char *const *src) {\n+        ndt::var_dim_type::data_type *dst_v = reinterpret_cast<ndt::var_dim_type::data_type *>(dst);\n+\n+        const string *const *s = reinterpret_cast<const string *const *>(src);\n+        const string &haystack = *(s[0]);\n+        const string &needle = *(s[1]);\n+\n+        intptr_t count = dynd::string_count(haystack, needle);\n+", "path": "include/dynd/kernels/string_split_kernel.hpp", "position": 47, "original_position": 49, "commit_id": "4916f7e652ee607ab9b06b3fe16b58d8ab55cda6", "original_commit_id": "9581e5c0bf12cc6444672d956a7ffd7e12c7902c", "user": {"login": "mdboom", "id": 38294, "avatar_url": "https://avatars3.githubusercontent.com/u/38294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdboom", "html_url": "https://github.com/mdboom", "followers_url": "https://api.github.com/users/mdboom/followers", "following_url": "https://api.github.com/users/mdboom/following{/other_user}", "gists_url": "https://api.github.com/users/mdboom/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdboom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdboom/subscriptions", "organizations_url": "https://api.github.com/users/mdboom/orgs", "repos_url": "https://api.github.com/users/mdboom/repos", "events_url": "https://api.github.com/users/mdboom/events{/privacy}", "received_events_url": "https://api.github.com/users/mdboom/received_events", "type": "User", "site_admin": false}, "body": "There is an ambiguity between the regular function in `dynd::string_count` and the elwise kernel in `dynd::nd::string_count`.  In this case I wan't to use the former, but C++ defaults to the latter, since this block is in `dynd::nd`.  I can rename things if that would help...\n", "created_at": "2016-02-17T16:31:44Z", "updated_at": "2016-02-19T13:00:54Z", "html_url": "https://github.com/libdynd/libdynd/pull/951#discussion_r53190678", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/951", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/53190678"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/951#discussion_r53190678"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/951"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/53190678/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/53191002", "pull_request_review_id": null, "id": 53191002, "diff_hunk": "@@ -0,0 +1,82 @@\n+//\n+// Copyright (C) 2011-15 DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+// String split kernel\n+\n+#pragma once\n+\n+#include <dynd/string.hpp>\n+#include <dynd/string_search.hpp>\n+#include <dynd/types/var_dim_type.hpp>\n+\n+namespace dynd {\n+  namespace nd {\n+\n+    struct string_split_kernel\n+      : base_kernel<string_split_kernel, 2> {\n+\n+      typedef string_split_kernel self_type;\n+\n+      memory_block_data *m_dst_memblock;\n+\n+      string_split_kernel(memory_block_data *dst_memblock) :\n+        m_dst_memblock(dst_memblock) {\n+\n+      }\n+\n+      static void instantiate(char *DYND_UNUSED(static_data), char *DYND_UNUSED(data),\n+                              kernel_builder *ckb, const ndt::type &DYND_UNUSED(dst_tp),\n+                              const char *dst_arrmeta, intptr_t DYND_UNUSED(nsrc),\n+                              const ndt::type *DYND_UNUSED(src_tp),\n+                              const char *const *DYND_UNUSED(src_arrmeta),\n+                              kernel_request_t kernreq, intptr_t DYND_UNUSED(kwd),\n+                              const nd::array *DYND_UNUSED(kwds),\n+                              const std::map<std::string, ndt::type> &DYND_UNUSED(tp_vars)) {\n+        ckb->emplace_back<self_type>(\n+          kernreq, reinterpret_cast<const ndt::var_dim_type::metadata_type *>(dst_arrmeta)->blockref.get());\n+      }\n+\n+      void single(char *dst, char *const *src) {\n+        ndt::var_dim_type::data_type *dst_v = reinterpret_cast<ndt::var_dim_type::data_type *>(dst);\n+\n+        const string *const *s = reinterpret_cast<const string *const *>(src);\n+        const string &haystack = *(s[0]);\n+        const string &needle = *(s[1]);\n+\n+        intptr_t count = dynd::string_count(haystack, needle);\n+", "path": "include/dynd/kernels/string_split_kernel.hpp", "position": 47, "original_position": 49, "commit_id": "4916f7e652ee607ab9b06b3fe16b58d8ab55cda6", "original_commit_id": "9581e5c0bf12cc6444672d956a7ffd7e12c7902c", "user": {"login": "izaid", "id": 482179, "avatar_url": "https://avatars1.githubusercontent.com/u/482179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izaid", "html_url": "https://github.com/izaid", "followers_url": "https://api.github.com/users/izaid/followers", "following_url": "https://api.github.com/users/izaid/following{/other_user}", "gists_url": "https://api.github.com/users/izaid/gists{/gist_id}", "starred_url": "https://api.github.com/users/izaid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izaid/subscriptions", "organizations_url": "https://api.github.com/users/izaid/orgs", "repos_url": "https://api.github.com/users/izaid/repos", "events_url": "https://api.github.com/users/izaid/events{/privacy}", "received_events_url": "https://api.github.com/users/izaid/received_events", "type": "User", "site_admin": false}, "body": "Ah, okay, that's cool then.\n", "created_at": "2016-02-17T16:33:36Z", "updated_at": "2016-02-19T13:00:54Z", "html_url": "https://github.com/libdynd/libdynd/pull/951#discussion_r53191002", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/951", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/53191002"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/951#discussion_r53191002"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/951"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/53191002/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/53191461", "pull_request_review_id": null, "id": 53191461, "diff_hunk": "@@ -0,0 +1,82 @@\n+//\n+// Copyright (C) 2011-15 DyND Developers\n+// BSD 2-Clause License, see LICENSE.txt\n+//\n+\n+// String split kernel\n+\n+#pragma once\n+\n+#include <dynd/string.hpp>\n+#include <dynd/string_search.hpp>\n+#include <dynd/types/var_dim_type.hpp>\n+\n+namespace dynd {\n+  namespace nd {\n+\n+    struct string_split_kernel\n+      : base_kernel<string_split_kernel, 2> {\n+\n+      typedef string_split_kernel self_type;\n+\n+      memory_block_data *m_dst_memblock;\n+\n+      string_split_kernel(memory_block_data *dst_memblock) :\n+        m_dst_memblock(dst_memblock) {\n+\n+      }\n+\n+      static void instantiate(char *DYND_UNUSED(static_data), char *DYND_UNUSED(data),\n+                              kernel_builder *ckb, const ndt::type &DYND_UNUSED(dst_tp),\n+                              const char *dst_arrmeta, intptr_t DYND_UNUSED(nsrc),\n+                              const ndt::type *DYND_UNUSED(src_tp),\n+                              const char *const *DYND_UNUSED(src_arrmeta),\n+                              kernel_request_t kernreq, intptr_t DYND_UNUSED(kwd),\n+                              const nd::array *DYND_UNUSED(kwds),\n+                              const std::map<std::string, ndt::type> &DYND_UNUSED(tp_vars)) {\n+        ckb->emplace_back<self_type>(\n+          kernreq, reinterpret_cast<const ndt::var_dim_type::metadata_type *>(dst_arrmeta)->blockref.get());\n+      }\n+\n+      void single(char *dst, char *const *src) {\n+        ndt::var_dim_type::data_type *dst_v = reinterpret_cast<ndt::var_dim_type::data_type *>(dst);\n+\n+        const string *const *s = reinterpret_cast<const string *const *>(src);\n+        const string &haystack = *(s[0]);\n+        const string &needle = *(s[1]);\n+\n+        intptr_t count = dynd::string_count(haystack, needle);\n+\n+        if (count == 0) {\n+          dst_v->begin = m_dst_memblock->alloc(1);\n+          dst_v->size = 1;\n+          string *dst_str = reinterpret_cast<string *>(dst_v->begin);\n+          new(&dst_str[0]) string(haystack);\n+          return;", "path": "include/dynd/kernels/string_split_kernel.hpp", "position": null, "original_position": 55, "commit_id": "4916f7e652ee607ab9b06b3fe16b58d8ab55cda6", "original_commit_id": "9581e5c0bf12cc6444672d956a7ffd7e12c7902c", "user": {"login": "mdboom", "id": 38294, "avatar_url": "https://avatars3.githubusercontent.com/u/38294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdboom", "html_url": "https://github.com/mdboom", "followers_url": "https://api.github.com/users/mdboom/followers", "following_url": "https://api.github.com/users/mdboom/following{/other_user}", "gists_url": "https://api.github.com/users/mdboom/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdboom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdboom/subscriptions", "organizations_url": "https://api.github.com/users/mdboom/orgs", "repos_url": "https://api.github.com/users/mdboom/repos", "events_url": "https://api.github.com/users/mdboom/events{/privacy}", "received_events_url": "https://api.github.com/users/mdboom/received_events", "type": "User", "site_admin": false}, "body": "Ah, indeed.  I wonder why that didn't work for me earlier (I was getting a crash where it was trying to free a garbage pointer when the new string content was assigned).  Anyway, it's working now.\n", "created_at": "2016-02-17T16:36:06Z", "updated_at": "2016-02-19T13:00:54Z", "html_url": "https://github.com/libdynd/libdynd/pull/951#discussion_r53191461", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/951", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/53191461"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/951#discussion_r53191461"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/951"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/53191461/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}, {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/53523462", "pull_request_review_id": null, "id": 53523462, "diff_hunk": "@@ -50,11 +48,14 @@ void ndt::bytes_type::set_bytes_data(const char *DYND_UNUSED(arrmeta), char *dat\n \n void ndt::bytes_type::print_data(std::ostream &o, const char *DYND_UNUSED(arrmeta), const char *data) const\n {\n-  const char *begin = reinterpret_cast<const char *const *>(data)[0];\n-  const char *end = reinterpret_cast<const char *const *>(data)[1];\n-\n-  // Print as hexadecimal\n-  hexadecimal_print_summarized(o, begin, end - begin, 80);\n+  if (reinterpret_cast<const bytes *>(data)->empty()) {\n+    o << \"NULL\";", "path": "src/dynd/types/bytes_type.cpp", "position": 19, "original_position": 19, "commit_id": "d4cb827b98baa20b7f447a2ce03c1b97e4892d73", "original_commit_id": "d4cb827b98baa20b7f447a2ce03c1b97e4892d73", "user": {"login": "mwiebe", "id": 399551, "avatar_url": "https://avatars0.githubusercontent.com/u/399551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwiebe", "html_url": "https://github.com/mwiebe", "followers_url": "https://api.github.com/users/mwiebe/followers", "following_url": "https://api.github.com/users/mwiebe/following{/other_user}", "gists_url": "https://api.github.com/users/mwiebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwiebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwiebe/subscriptions", "organizations_url": "https://api.github.com/users/mwiebe/orgs", "repos_url": "https://api.github.com/users/mwiebe/repos", "events_url": "https://api.github.com/users/mwiebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mwiebe/received_events", "type": "User", "site_admin": false}, "body": "One thing to ensure is that NULL and a zero-length bytes are distinct values?\n", "created_at": "2016-02-19T21:51:03Z", "updated_at": "2016-02-19T21:51:03Z", "html_url": "https://github.com/libdynd/libdynd/pull/966#discussion_r53523462", "pull_request_url": "https://api.github.com/repos/libdynd/libdynd/pulls/966", "author_association": "OWNER", "_links": {"self": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/53523462"}, "html": {"href": "https://github.com/libdynd/libdynd/pull/966#discussion_r53523462"}, "pull_request": {"href": "https://api.github.com/repos/libdynd/libdynd/pulls/966"}}, "reactions": {"url": "https://api.github.com/repos/libdynd/libdynd/pulls/comments/53523462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0}}]}}}